
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c510  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d49c  0800c6d8  0800c6d8  0001c6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019b74  08019b74  0003015c  2**0
                  CONTENTS
  4 .ARM          00000008  08019b74  08019b74  00029b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019b7c  08019b7c  0003015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019b7c  08019b7c  00029b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019b80  08019b80  00029b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000015c  20000000  08019b84  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f60  2000015c  08019ce0  0003015c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020bc  08019ce0  000320bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003015c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003018c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025e15  00000000  00000000  000301cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004dea  00000000  00000000  00055fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002230  00000000  00000000  0005add0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a57  00000000  00000000  0005d000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000079ac  00000000  00000000  0005ea57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000291bc  00000000  00000000  00066403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107b2f  00000000  00000000  0008f5bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000095fc  00000000  00000000  001970f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001a06ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000015c 	.word	0x2000015c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800c6c0 	.word	0x0800c6c0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000160 	.word	0x20000160
 8000204:	0800c6c0 	.word	0x0800c6c0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	SSD1963_Init();
 8000508:	f001 fdea 	bl	80020e0 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 800050c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000510:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000514:	490b      	ldr	r1, [pc, #44]	; (8000544 <Display_Init+0x40>)
 8000516:	480c      	ldr	r0, [pc, #48]	; (8000548 <Display_Init+0x44>)
 8000518:	f001 f866 	bl	80015e8 <UG_Init>

	UG_FontSetVSpace(0);
 800051c:	2000      	movs	r0, #0
 800051e:	f001 fb07 	bl	8001b30 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 8000522:	2000      	movs	r0, #0
 8000524:	f001 faf0 	bl	8001b08 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 8000528:	4908      	ldr	r1, [pc, #32]	; (800054c <Display_Init+0x48>)
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fdac 	bl	8002088 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <Display_Init+0x4c>)
 8000532:	2000      	movs	r0, #0
 8000534:	f001 fda8 	bl	8002088 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <Display_Init+0x50>)
 800053a:	2003      	movs	r0, #3
 800053c:	f001 fda4 	bl	8002088 <UG_DriverRegister>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	080022a3 	.word	0x080022a3
 8000548:	20000178 	.word	0x20000178
 800054c:	0800232d 	.word	0x0800232d
 8000550:	080023f7 	.word	0x080023f7
 8000554:	080024ab 	.word	0x080024ab

08000558 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 800055e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000562:	f001 f8ed 	bl	8001740 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 8000566:	231f      	movs	r3, #31
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800056e:	220a      	movs	r2, #10
 8000570:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000574:	2000      	movs	r0, #0
 8000576:	f001 f905 	bl	8001784 <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 800057a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	230a      	movs	r3, #10
 8000582:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000586:	2100      	movs	r1, #0
 8000588:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800058c:	f001 f8fa 	bl	8001784 <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8000590:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	f44f 7388 	mov.w	r3, #272	; 0x110
 800059a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800059e:	f44f 7183 	mov.w	r1, #262	; 0x106
 80005a2:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80005a6:	f001 f8ed 	bl	8001784 <UG_FillFrame>
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b6:	f002 f858 	bl	800266a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f851 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 fb65 	bl	8000c8c <MX_GPIO_Init>
  MX_CAN1_Init();
 80005c2:	f000 f95d 	bl	8000880 <MX_CAN1_Init>
  MX_CAN2_Init();
 80005c6:	f000 f98f 	bl	80008e8 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 80005ca:	f000 f9c1 	bl	8000950 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 80005ce:	f000 f8b3 	bl	8000738 <MX_ADC1_Init>
  MX_ADC3_Init();
 80005d2:	f000 f903 	bl	80007dc <MX_ADC3_Init>
  MX_TIM2_Init();
 80005d6:	f000 f9eb 	bl	80009b0 <MX_TIM2_Init>
  MX_TIM4_Init();
 80005da:	f000 fa3f 	bl	8000a5c <MX_TIM4_Init>
  MX_UART4_Init();
 80005de:	f000 fa93 	bl	8000b08 <MX_UART4_Init>
  MX_UART7_Init();
 80005e2:	f000 fac1 	bl	8000b68 <MX_UART7_Init>
  MX_FMC_Init();
 80005e6:	f000 faef 	bl	8000bc8 <MX_FMC_Init>
  MX_USB_DEVICE_Init();
 80005ea:	f00b f9c1 	bl	800b970 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  init_sensors();
 80005ee:	f000 fc13 	bl	8000e18 <init_sensors>

  Display_Init();
 80005f2:	f7ff ff87 	bl	8000504 <Display_Init>
  UG_FontSelect(&FONT_32X53);
 80005f6:	4816      	ldr	r0, [pc, #88]	; (8000650 <main+0xa0>)
 80005f8:	f001 f88c 	bl	8001714 <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 80005fc:	2000      	movs	r0, #0
 80005fe:	f001 fa71 	bl	8001ae4 <UG_SetBackcolor>
  UG_SetForecolor(C_WHITE);
 8000602:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000606:	f001 fa5b 	bl	8001ac0 <UG_SetForecolor>

  Display_CalibrateScreen();
 800060a:	f7ff ffa5 	bl	8000558 <Display_CalibrateScreen>
  HAL_Delay(5000);
 800060e:	f241 3088 	movw	r0, #5000	; 0x1388
 8000612:	f002 f887 	bl	8002724 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  UG_PutString(0, 0, "Hello");
 8000616:	4a0f      	ldr	r2, [pc, #60]	; (8000654 <main+0xa4>)
 8000618:	2100      	movs	r1, #0
 800061a:	2000      	movs	r0, #0
 800061c:	f001 f922 	bl	8001864 <UG_PutString>
	  UG_PutColorString(50, 50, "It's working", C_RED, C_WHITE);
 8000620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000624:	9300      	str	r3, [sp, #0]
 8000626:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800062a:	4a0b      	ldr	r2, [pc, #44]	; (8000658 <main+0xa8>)
 800062c:	2132      	movs	r1, #50	; 0x32
 800062e:	2032      	movs	r0, #50	; 0x32
 8000630:	f001 f99e 	bl	8001970 <UG_PutColorString>
	  UG_PutColorString(0, 110, "still working", C_BLACK, C_WHITE);
 8000634:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <main+0xac>)
 800063e:	216e      	movs	r1, #110	; 0x6e
 8000640:	2000      	movs	r0, #0
 8000642:	f001 f995 	bl	8001970 <UG_PutColorString>
	  HAL_Delay(1000);
 8000646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064a:	f002 f86b 	bl	8002724 <HAL_Delay>
	  UG_PutString(0, 0, "Hello");
 800064e:	e7e2      	b.n	8000616 <main+0x66>
 8000650:	08019b60 	.word	0x08019b60
 8000654:	0800c6d8 	.word	0x0800c6d8
 8000658:	0800c6e0 	.word	0x0800c6e0
 800065c:	0800c6f0 	.word	0x0800c6f0

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f00b ff96 	bl	800c5a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <SystemClock_Config+0xd0>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a29      	ldr	r2, [pc, #164]	; (8000730 <SystemClock_Config+0xd0>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	60bb      	str	r3, [r7, #8]
 800069a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800069c:	4b25      	ldr	r3, [pc, #148]	; (8000734 <SystemClock_Config+0xd4>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a24      	ldr	r2, [pc, #144]	; (8000734 <SystemClock_Config+0xd4>)
 80006a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006a6:	6013      	str	r3, [r2, #0]
 80006a8:	4b22      	ldr	r3, [pc, #136]	; (8000734 <SystemClock_Config+0xd4>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b4:	2301      	movs	r3, #1
 80006b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80006cc:	23d8      	movs	r3, #216	; 0xd8
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80006d4:	2309      	movs	r3, #9
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0320 	add.w	r3, r7, #32
 80006dc:	4618      	mov	r0, r3
 80006de:	f004 f9b5 	bl	8004a4c <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e8:	f000 fb90 	bl	8000e0c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006ec:	f004 f95e 	bl	80049ac <HAL_PWREx_EnableOverDrive>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f6:	f000 fb89 	bl	8000e0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000706:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000712:	f107 030c 	add.w	r3, r7, #12
 8000716:	2107      	movs	r1, #7
 8000718:	4618      	mov	r0, r3
 800071a:	f004 fc3b 	bl	8004f94 <HAL_RCC_ClockConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000724:	f000 fb72 	bl	8000e0c <Error_Handler>
  }
}
 8000728:	bf00      	nop
 800072a:	3750      	adds	r7, #80	; 0x50
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073e:	463b      	mov	r3, r7
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800074a:	4b21      	ldr	r3, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x98>)
 800074c:	4a21      	ldr	r2, [pc, #132]	; (80007d4 <MX_ADC1_Init+0x9c>)
 800074e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000752:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000756:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_ADC1_Init+0x98>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000760:	2200      	movs	r2, #0
 8000762:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <MX_ADC1_Init+0x98>)
 800076c:	2200      	movs	r2, #0
 800076e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000772:	4b17      	ldr	r3, [pc, #92]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000778:	4b15      	ldr	r3, [pc, #84]	; (80007d0 <MX_ADC1_Init+0x98>)
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <MX_ADC1_Init+0xa0>)
 800077c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077e:	4b14      	ldr	r3, [pc, #80]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000786:	2201      	movs	r2, #1
 8000788:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800078a:	4b11      	ldr	r3, [pc, #68]	; (80007d0 <MX_ADC1_Init+0x98>)
 800078c:	2200      	movs	r2, #0
 800078e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000792:	4b0f      	ldr	r3, [pc, #60]	; (80007d0 <MX_ADC1_Init+0x98>)
 8000794:	2201      	movs	r2, #1
 8000796:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000798:	480d      	ldr	r0, [pc, #52]	; (80007d0 <MX_ADC1_Init+0x98>)
 800079a:	f001 ffe7 	bl	800276c <HAL_ADC_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a4:	f000 fb32 	bl	8000e0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007a8:	230a      	movs	r3, #10
 80007aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80007ac:	2301      	movs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007b0:	2300      	movs	r3, #0
 80007b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b4:	463b      	mov	r3, r7
 80007b6:	4619      	mov	r1, r3
 80007b8:	4805      	ldr	r0, [pc, #20]	; (80007d0 <MX_ADC1_Init+0x98>)
 80007ba:	f002 f81b 	bl	80027f4 <HAL_ADC_ConfigChannel>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c4:	f000 fb22 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c8:	bf00      	nop
 80007ca:	3710      	adds	r7, #16
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	200001fc 	.word	0x200001fc
 80007d4:	40012000 	.word	0x40012000
 80007d8:	0f000001 	.word	0x0f000001

080007dc <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007e2:	463b      	mov	r3, r7
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80007ee:	4b21      	ldr	r3, [pc, #132]	; (8000874 <MX_ADC3_Init+0x98>)
 80007f0:	4a21      	ldr	r2, [pc, #132]	; (8000878 <MX_ADC3_Init+0x9c>)
 80007f2:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80007f4:	4b1f      	ldr	r3, [pc, #124]	; (8000874 <MX_ADC3_Init+0x98>)
 80007f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80007fa:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80007fc:	4b1d      	ldr	r3, [pc, #116]	; (8000874 <MX_ADC3_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_ADC3_Init+0x98>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_ADC3_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_ADC3_Init+0x98>)
 8000810:	2200      	movs	r2, #0
 8000812:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_ADC3_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_ADC3_Init+0x98>)
 800081e:	4a17      	ldr	r2, [pc, #92]	; (800087c <MX_ADC3_Init+0xa0>)
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_ADC3_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_ADC3_Init+0x98>)
 800082a:	2201      	movs	r2, #1
 800082c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_ADC3_Init+0x98>)
 8000830:	2200      	movs	r2, #0
 8000832:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_ADC3_Init+0x98>)
 8000838:	2201      	movs	r2, #1
 800083a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800083c:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_ADC3_Init+0x98>)
 800083e:	f001 ff95 	bl	800276c <HAL_ADC_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000848:	f000 fae0 	bl	8000e0c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800084c:	2308      	movs	r3, #8
 800084e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000850:	2301      	movs	r3, #1
 8000852:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000858:	463b      	mov	r3, r7
 800085a:	4619      	mov	r1, r3
 800085c:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_ADC3_Init+0x98>)
 800085e:	f001 ffc9 	bl	80027f4 <HAL_ADC_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000868:	f000 fad0 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	3710      	adds	r7, #16
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	20000244 	.word	0x20000244
 8000878:	40012200 	.word	0x40012200
 800087c:	0f000001 	.word	0x0f000001

08000880 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000884:	4b16      	ldr	r3, [pc, #88]	; (80008e0 <MX_CAN1_Init+0x60>)
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <MX_CAN1_Init+0x64>)
 8000888:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <MX_CAN1_Init+0x60>)
 800088c:	2212      	movs	r2, #18
 800088e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000890:	4b13      	ldr	r3, [pc, #76]	; (80008e0 <MX_CAN1_Init+0x60>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MX_CAN1_Init+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 800089c:	4b10      	ldr	r3, [pc, #64]	; (80008e0 <MX_CAN1_Init+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008a8:	4b0d      	ldr	r3, [pc, #52]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008ae:	4b0c      	ldr	r3, [pc, #48]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80008b4:	4b0a      	ldr	r3, [pc, #40]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80008ba:	4b09      	ldr	r3, [pc, #36]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008bc:	2200      	movs	r2, #0
 80008be:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80008c6:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80008cc:	4804      	ldr	r0, [pc, #16]	; (80008e0 <MX_CAN1_Init+0x60>)
 80008ce:	f002 f9e1 	bl	8002c94 <HAL_CAN_Init>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80008d8:	f000 fa98 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80008dc:	bf00      	nop
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	2000028c 	.word	0x2000028c
 80008e4:	40006400 	.word	0x40006400

080008e8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80008ec:	4b16      	ldr	r3, [pc, #88]	; (8000948 <MX_CAN2_Init+0x60>)
 80008ee:	4a17      	ldr	r2, [pc, #92]	; (800094c <MX_CAN2_Init+0x64>)
 80008f0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 80008f2:	4b15      	ldr	r3, [pc, #84]	; (8000948 <MX_CAN2_Init+0x60>)
 80008f4:	2212      	movs	r2, #18
 80008f6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <MX_CAN2_Init+0x60>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <MX_CAN2_Init+0x60>)
 8000900:	2200      	movs	r2, #0
 8000902:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000904:	4b10      	ldr	r3, [pc, #64]	; (8000948 <MX_CAN2_Init+0x60>)
 8000906:	2200      	movs	r2, #0
 8000908:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800090a:	4b0f      	ldr	r3, [pc, #60]	; (8000948 <MX_CAN2_Init+0x60>)
 800090c:	2200      	movs	r2, #0
 800090e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000910:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_CAN2_Init+0x60>)
 8000912:	2200      	movs	r2, #0
 8000914:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000916:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <MX_CAN2_Init+0x60>)
 8000918:	2200      	movs	r2, #0
 800091a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <MX_CAN2_Init+0x60>)
 800091e:	2200      	movs	r2, #0
 8000920:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000922:	4b09      	ldr	r3, [pc, #36]	; (8000948 <MX_CAN2_Init+0x60>)
 8000924:	2200      	movs	r2, #0
 8000926:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000928:	4b07      	ldr	r3, [pc, #28]	; (8000948 <MX_CAN2_Init+0x60>)
 800092a:	2200      	movs	r2, #0
 800092c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <MX_CAN2_Init+0x60>)
 8000930:	2200      	movs	r2, #0
 8000932:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_CAN2_Init+0x60>)
 8000936:	f002 f9ad 	bl	8002c94 <HAL_CAN_Init>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000940:	f000 fa64 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000944:	bf00      	nop
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200002b4 	.word	0x200002b4
 800094c:	40006800 	.word	0x40006800

08000950 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000954:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 8000956:	4a15      	ldr	r2, [pc, #84]	; (80009ac <MX_SDMMC1_SD_Init+0x5c>)
 8000958:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800095a:	4b13      	ldr	r3, [pc, #76]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800096c:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 800096e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000972:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 8000982:	f005 f91b 	bl	8005bbc <HAL_SD_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 800098c:	f000 fa3e 	bl	8000e0c <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000990:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000994:	4804      	ldr	r0, [pc, #16]	; (80009a8 <MX_SDMMC1_SD_Init+0x58>)
 8000996:	f005 fb6d 	bl	8006074 <HAL_SD_ConfigWideBusOperation>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_SDMMC1_SD_Init+0x54>
  {
    Error_Handler();
 80009a0:	f000 fa34 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200002dc 	.word	0x200002dc
 80009ac:	40012c00 	.word	0x40012c00

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c6:	463b      	mov	r3, r7
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009d0:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80009d8:	4b1f      	ldr	r3, [pc, #124]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009de:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009e4:	4b1c      	ldr	r3, [pc, #112]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009e6:	f04f 32ff 	mov.w	r2, #4294967295
 80009ea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009ec:	4b1a      	ldr	r3, [pc, #104]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009f2:	4b19      	ldr	r3, [pc, #100]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009f8:	4817      	ldr	r0, [pc, #92]	; (8000a58 <MX_TIM2_Init+0xa8>)
 80009fa:	f005 fee2 	bl	80067c2 <HAL_TIM_Base_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 fa02 	bl	8000e0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000a0c:	2370      	movs	r3, #112	; 0x70
 8000a0e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	480d      	ldr	r0, [pc, #52]	; (8000a58 <MX_TIM2_Init+0xa8>)
 8000a24:	f005 ff24 	bl	8006870 <HAL_TIM_SlaveConfigSynchro>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000a2e:	f000 f9ed 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a32:	2300      	movs	r3, #0
 8000a34:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a3a:	463b      	mov	r3, r7
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_TIM2_Init+0xa8>)
 8000a40:	f006 f90c 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000a4a:	f000 f9df 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	3720      	adds	r7, #32
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000360 	.word	0x20000360

08000a5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b088      	sub	sp, #32
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a62:	f107 030c 	add.w	r3, r7, #12
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a72:	463b      	mov	r3, r7
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a7c:	4b20      	ldr	r3, [pc, #128]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000a7e:	4a21      	ldr	r2, [pc, #132]	; (8000b04 <MX_TIM4_Init+0xa8>)
 8000a80:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000a90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a94:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a96:	4b1a      	ldr	r3, [pc, #104]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a9c:	4b18      	ldr	r3, [pc, #96]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000aa2:	4817      	ldr	r0, [pc, #92]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000aa4:	f005 fe8d 	bl	80067c2 <HAL_TIM_Base_Init>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000aae:	f000 f9ad 	bl	8000e0c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000ab2:	2307      	movs	r3, #7
 8000ab4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000ab6:	2370      	movs	r3, #112	; 0x70
 8000ab8:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000aba:	2300      	movs	r3, #0
 8000abc:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ac6:	f107 030c 	add.w	r3, r7, #12
 8000aca:	4619      	mov	r1, r3
 8000acc:	480c      	ldr	r0, [pc, #48]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000ace:	f005 fecf 	bl	8006870 <HAL_TIM_SlaveConfigSynchro>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000ad8:	f000 f998 	bl	8000e0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000adc:	2300      	movs	r3, #0
 8000ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4805      	ldr	r0, [pc, #20]	; (8000b00 <MX_TIM4_Init+0xa4>)
 8000aea:	f006 f8b7 	bl	8006c5c <HAL_TIMEx_MasterConfigSynchronization>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000af4:	f000 f98a 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	3720      	adds	r7, #32
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	200003ac 	.word	0x200003ac
 8000b04:	40000800 	.word	0x40000800

08000b08 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b0e:	4a15      	ldr	r2, [pc, #84]	; (8000b64 <MX_UART4_Init+0x5c>)
 8000b10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000b26:	4b0e      	ldr	r3, [pc, #56]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b2e:	220c      	movs	r2, #12
 8000b30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b32:	4b0b      	ldr	r3, [pc, #44]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b3e:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_UART4_Init+0x58>)
 8000b4c:	f006 f914 	bl	8006d78 <HAL_UART_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000b56:	f000 f959 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200003f8 	.word	0x200003f8
 8000b64:	40004c00 	.word	0x40004c00

08000b68 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b6e:	4a15      	ldr	r2, [pc, #84]	; (8000bc4 <MX_UART7_Init+0x5c>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000b72:	4b13      	ldr	r3, [pc, #76]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <MX_UART7_Init+0x58>)
 8000bac:	f006 f8e4 	bl	8006d78 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000bb6:	f000 f929 	bl	8000e0c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	20000480 	.word	0x20000480
 8000bc4:	40007800 	.word	0x40007800

08000bc8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b088      	sub	sp, #32
 8000bcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000bce:	1d3b      	adds	r3, r7, #4
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	601a      	str	r2, [r3, #0]
 8000bd4:	605a      	str	r2, [r3, #4]
 8000bd6:	609a      	str	r2, [r3, #8]
 8000bd8:	60da      	str	r2, [r3, #12]
 8000bda:	611a      	str	r2, [r3, #16]
 8000bdc:	615a      	str	r2, [r3, #20]
 8000bde:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000be0:	4b28      	ldr	r3, [pc, #160]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000be2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000be6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000bea:	4a27      	ldr	r2, [pc, #156]	; (8000c88 <MX_FMC_Init+0xc0>)
 8000bec:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000bf4:	4b23      	ldr	r3, [pc, #140]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000bfa:	4b22      	ldr	r3, [pc, #136]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_8;
 8000c00:	4b20      	ldr	r3, [pc, #128]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000c0c:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c1e:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000c20:	4b18      	ldr	r3, [pc, #96]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000c4e:	230f      	movs	r3, #15
 8000c50:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000c52:	23ff      	movs	r3, #255	; 0xff
 8000c54:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000c56:	230f      	movs	r3, #15
 8000c58:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000c5a:	2310      	movs	r3, #16
 8000c5c:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000c5e:	2311      	movs	r3, #17
 8000c60:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000c66:	1d3b      	adds	r3, r7, #4
 8000c68:	2200      	movs	r2, #0
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4805      	ldr	r0, [pc, #20]	; (8000c84 <MX_FMC_Init+0xbc>)
 8000c6e:	f005 fd60 	bl	8006732 <HAL_SRAM_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000c78:	f000 f8c8 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c7c:	bf00      	nop
 8000c7e:	3720      	adds	r7, #32
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000508 	.word	0x20000508
 8000c88:	a0000104 	.word	0xa0000104

08000c8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b08e      	sub	sp, #56	; 0x38
 8000c90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
 8000ca0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ca2:	4b54      	ldr	r3, [pc, #336]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a53      	ldr	r2, [pc, #332]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000ca8:	f043 0320 	orr.w	r3, r3, #32
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b51      	ldr	r3, [pc, #324]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0320 	and.w	r3, r3, #32
 8000cb6:	623b      	str	r3, [r7, #32]
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cba:	4b4e      	ldr	r3, [pc, #312]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a4d      	ldr	r2, [pc, #308]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b4b      	ldr	r3, [pc, #300]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	61fb      	str	r3, [r7, #28]
 8000cd0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd2:	4b48      	ldr	r3, [pc, #288]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a47      	ldr	r2, [pc, #284]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cd8:	f043 0304 	orr.w	r3, r3, #4
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b45      	ldr	r3, [pc, #276]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0304 	and.w	r3, r3, #4
 8000ce6:	61bb      	str	r3, [r7, #24]
 8000ce8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	4b42      	ldr	r3, [pc, #264]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a41      	ldr	r2, [pc, #260]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b3f      	ldr	r3, [pc, #252]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	617b      	str	r3, [r7, #20]
 8000d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d02:	4b3c      	ldr	r3, [pc, #240]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a3b      	ldr	r2, [pc, #236]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	4b36      	ldr	r3, [pc, #216]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	4a35      	ldr	r2, [pc, #212]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d20:	f043 0302 	orr.w	r3, r3, #2
 8000d24:	6313      	str	r3, [r2, #48]	; 0x30
 8000d26:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	f003 0302 	and.w	r3, r3, #2
 8000d2e:	60fb      	str	r3, [r7, #12]
 8000d30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	4a2f      	ldr	r2, [pc, #188]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3e:	4b2d      	ldr	r3, [pc, #180]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	f003 0308 	and.w	r3, r3, #8
 8000d46:	60bb      	str	r3, [r7, #8]
 8000d48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4a:	4b2a      	ldr	r3, [pc, #168]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a29      	ldr	r2, [pc, #164]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b27      	ldr	r3, [pc, #156]	; (8000df4 <MX_GPIO_Init+0x168>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 8000d62:	2200      	movs	r2, #0
 8000d64:	2108      	movs	r1, #8
 8000d66:	4824      	ldr	r0, [pc, #144]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000d68:	f002 fb4e 	bl	8003408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS2_Pin;
 8000d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d72:	2300      	movs	r3, #0
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d76:	2300      	movs	r3, #0
 8000d78:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS2_GPIO_Port, &GPIO_InitStruct);
 8000d7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7e:	4619      	mov	r1, r3
 8000d80:	481e      	ldr	r0, [pc, #120]	; (8000dfc <MX_GPIO_Init+0x170>)
 8000d82:	f002 f995 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 8000d86:	2302      	movs	r3, #2
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 8000d92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d96:	4619      	mov	r1, r3
 8000d98:	4819      	ldr	r0, [pc, #100]	; (8000e00 <MX_GPIO_Init+0x174>)
 8000d9a:	f002 f989 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8000d9e:	2308      	movs	r3, #8
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da6:	2300      	movs	r3, #0
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000daa:	2300      	movs	r3, #0
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4810      	ldr	r0, [pc, #64]	; (8000df8 <MX_GPIO_Init+0x16c>)
 8000db6:	f002 f97b 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin PG15 */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|GPIO_PIN_15;
 8000dba:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dcc:	4619      	mov	r1, r3
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_GPIO_Init+0x178>)
 8000dd0:	f002 f96e 	bl	80030b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = BAT_12V_MEASURE_Pin;
 8000dd4:	2308      	movs	r3, #8
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BAT_12V_MEASURE_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de4:	4619      	mov	r1, r3
 8000de6:	4808      	ldr	r0, [pc, #32]	; (8000e08 <MX_GPIO_Init+0x17c>)
 8000de8:	f002 f962 	bl	80030b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dec:	bf00      	nop
 8000dee:	3738      	adds	r7, #56	; 0x38
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020000 	.word	0x40020000
 8000dfc:	40021400 	.word	0x40021400
 8000e00:	40020800 	.word	0x40020800
 8000e04:	40021800 	.word	0x40021800
 8000e08:	40020400 	.word	0x40020400

08000e0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e10:	b672      	cpsid	i
}
 8000e12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <Error_Handler+0x8>
	...

08000e18 <init_sensors>:
    if(in > max) return max;
    if(in < min) return min;
    return in;
}

void init_sensors(){
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <init_sensors+0x4c>)
 8000e1e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e22:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <init_sensors+0x4c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <init_sensors+0x4c>)
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 8000e30:	4b0d      	ldr	r3, [pc, #52]	; (8000e68 <init_sensors+0x50>)
 8000e32:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e36:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 8000e38:	4b0b      	ldr	r3, [pc, #44]	; (8000e68 <init_sensors+0x50>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 8000e3e:	4b0a      	ldr	r3, [pc, #40]	; (8000e68 <init_sensors+0x50>)
 8000e40:	2201      	movs	r2, #1
 8000e42:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 8000e44:	4b09      	ldr	r3, [pc, #36]	; (8000e6c <init_sensors+0x54>)
 8000e46:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8000e4a:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <init_sensors+0x54>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 8000e52:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <init_sensors+0x54>)
 8000e54:	2201      	movs	r2, #1
 8000e56:	80da      	strh	r2, [r3, #6]
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	20000554 	.word	0x20000554
 8000e68:	20000560 	.word	0x20000560
 8000e6c:	2000056c 	.word	0x2000056c

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8e:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a08      	ldr	r2, [pc, #32]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <HAL_MspInit+0x44>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	bf00      	nop
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800

08000eb8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b08c      	sub	sp, #48	; 0x30
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a2a      	ldr	r2, [pc, #168]	; (8000f80 <HAL_ADC_MspInit+0xc8>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d124      	bne.n	8000f24 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000eda:	4b2a      	ldr	r3, [pc, #168]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a29      	ldr	r2, [pc, #164]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b27      	ldr	r3, [pc, #156]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eee:	61bb      	str	r3, [r7, #24]
 8000ef0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b24      	ldr	r3, [pc, #144]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a23      	ldr	r2, [pc, #140]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000ef8:	f043 0304 	orr.w	r3, r3, #4
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b21      	ldr	r3, [pc, #132]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0304 	and.w	r3, r3, #4
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 8000f0a:	230d      	movs	r3, #13
 8000f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f12:	2300      	movs	r3, #0
 8000f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f16:	f107 031c 	add.w	r3, r7, #28
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	481a      	ldr	r0, [pc, #104]	; (8000f88 <HAL_ADC_MspInit+0xd0>)
 8000f1e:	f002 f8c7 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000f22:	e029      	b.n	8000f78 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a18      	ldr	r2, [pc, #96]	; (8000f8c <HAL_ADC_MspInit+0xd4>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d124      	bne.n	8000f78 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	4a14      	ldr	r2, [pc, #80]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f34:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f38:	6453      	str	r3, [r2, #68]	; 0x44
 8000f3a:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f46:	4b0f      	ldr	r3, [pc, #60]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a0e      	ldr	r2, [pc, #56]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f4c:	f043 0320 	orr.w	r3, r3, #32
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0320 	and.w	r3, r3, #32
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = APP2_Pin;
 8000f5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f64:	2303      	movs	r3, #3
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(APP2_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 031c 	add.w	r3, r7, #28
 8000f70:	4619      	mov	r1, r3
 8000f72:	4807      	ldr	r0, [pc, #28]	; (8000f90 <HAL_ADC_MspInit+0xd8>)
 8000f74:	f002 f89c 	bl	80030b0 <HAL_GPIO_Init>
}
 8000f78:	bf00      	nop
 8000f7a:	3730      	adds	r7, #48	; 0x30
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40012000 	.word	0x40012000
 8000f84:	40023800 	.word	0x40023800
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40012200 	.word	0x40012200
 8000f90:	40021400 	.word	0x40021400

08000f94 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08c      	sub	sp, #48	; 0x30
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	601a      	str	r2, [r3, #0]
 8000fa4:	605a      	str	r2, [r3, #4]
 8000fa6:	609a      	str	r2, [r3, #8]
 8000fa8:	60da      	str	r2, [r3, #12]
 8000faa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a3e      	ldr	r2, [pc, #248]	; (80010ac <HAL_CAN_MspInit+0x118>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d132      	bne.n	800101c <HAL_CAN_MspInit+0x88>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000fb6:	4b3e      	ldr	r3, [pc, #248]	; (80010b0 <HAL_CAN_MspInit+0x11c>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a3c      	ldr	r2, [pc, #240]	; (80010b0 <HAL_CAN_MspInit+0x11c>)
 8000fbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <HAL_CAN_MspInit+0x11c>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d10b      	bne.n	8000fe0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000fc8:	4b3a      	ldr	r3, [pc, #232]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8000fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fcc:	4a39      	ldr	r2, [pc, #228]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8000fce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd4:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fdc:	61bb      	str	r3, [r7, #24]
 8000fde:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe0:	4b34      	ldr	r3, [pc, #208]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a33      	ldr	r2, [pc, #204]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b31      	ldr	r3, [pc, #196]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	617b      	str	r3, [r7, #20]
 8000ff6:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8000ff8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800100a:	2309      	movs	r3, #9
 800100c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	f107 031c 	add.w	r3, r7, #28
 8001012:	4619      	mov	r1, r3
 8001014:	4828      	ldr	r0, [pc, #160]	; (80010b8 <HAL_CAN_MspInit+0x124>)
 8001016:	f002 f84b 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800101a:	e042      	b.n	80010a2 <HAL_CAN_MspInit+0x10e>
  else if(hcan->Instance==CAN2)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a26      	ldr	r2, [pc, #152]	; (80010bc <HAL_CAN_MspInit+0x128>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d13d      	bne.n	80010a2 <HAL_CAN_MspInit+0x10e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001026:	4b23      	ldr	r3, [pc, #140]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 800102c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001030:	6413      	str	r3, [r2, #64]	; 0x40
 8001032:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8001034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001036:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <HAL_CAN_MspInit+0x11c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_CAN_MspInit+0x11c>)
 8001046:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <HAL_CAN_MspInit+0x11c>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10b      	bne.n	8001068 <HAL_CAN_MspInit+0xd4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001050:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8001052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001054:	4a17      	ldr	r2, [pc, #92]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8001056:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800105a:	6413      	str	r3, [r2, #64]	; 0x40
 800105c:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 800105e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 800106e:	f043 0302 	orr.w	r3, r3, #2
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <HAL_CAN_MspInit+0x120>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 8001080:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001086:	2302      	movs	r3, #2
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108a:	2300      	movs	r3, #0
 800108c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108e:	2303      	movs	r3, #3
 8001090:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001092:	2309      	movs	r3, #9
 8001094:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4619      	mov	r1, r3
 800109c:	4808      	ldr	r0, [pc, #32]	; (80010c0 <HAL_CAN_MspInit+0x12c>)
 800109e:	f002 f807 	bl	80030b0 <HAL_GPIO_Init>
}
 80010a2:	bf00      	nop
 80010a4:	3730      	adds	r7, #48	; 0x30
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	40006400 	.word	0x40006400
 80010b0:	20000578 	.word	0x20000578
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40020000 	.word	0x40020000
 80010bc:	40006800 	.word	0x40006800
 80010c0:	40020400 	.word	0x40020400

080010c4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b0ac      	sub	sp, #176	; 0xb0
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010d0:	2200      	movs	r2, #0
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	605a      	str	r2, [r3, #4]
 80010d6:	609a      	str	r2, [r3, #8]
 80010d8:	60da      	str	r2, [r3, #12]
 80010da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010dc:	f107 0318 	add.w	r3, r7, #24
 80010e0:	2284      	movs	r2, #132	; 0x84
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f00b fa5b 	bl	800c5a0 <memset>
  if(hsd->Instance==SDMMC1)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a34      	ldr	r2, [pc, #208]	; (80011c0 <HAL_SD_MspInit+0xfc>)
 80010f0:	4293      	cmp	r3, r2
 80010f2:	d161      	bne.n	80011b8 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80010f4:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80010f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001100:	2300      	movs	r3, #0
 8001102:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001106:	f107 0318 	add.w	r3, r7, #24
 800110a:	4618      	mov	r0, r3
 800110c:	f004 f966 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 8001116:	f7ff fe79 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800111a:	4b2a      	ldr	r3, [pc, #168]	; (80011c4 <HAL_SD_MspInit+0x100>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	4a29      	ldr	r2, [pc, #164]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001120:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001124:	6453      	str	r3, [r2, #68]	; 0x44
 8001126:	4b27      	ldr	r3, [pc, #156]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a23      	ldr	r2, [pc, #140]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001138:	f043 0304 	orr.w	r3, r3, #4
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b21      	ldr	r3, [pc, #132]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0304 	and.w	r3, r3, #4
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_SD_MspInit+0x100>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a1d      	ldr	r2, [pc, #116]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001150:	f043 0308 	orr.w	r3, r3, #8
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b1b      	ldr	r3, [pc, #108]	; (80011c4 <HAL_SD_MspInit+0x100>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0308 	and.w	r3, r3, #8
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001162:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116a:	2302      	movs	r3, #2
 800116c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001176:	2303      	movs	r3, #3
 8001178:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800117c:	230c      	movs	r3, #12
 800117e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001182:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001186:	4619      	mov	r1, r3
 8001188:	480f      	ldr	r0, [pc, #60]	; (80011c8 <HAL_SD_MspInit+0x104>)
 800118a:	f001 ff91 	bl	80030b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800118e:	2304      	movs	r3, #4
 8001190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80011a6:	230c      	movs	r3, #12
 80011a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011b0:	4619      	mov	r1, r3
 80011b2:	4806      	ldr	r0, [pc, #24]	; (80011cc <HAL_SD_MspInit+0x108>)
 80011b4:	f001 ff7c 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80011b8:	bf00      	nop
 80011ba:	37b0      	adds	r7, #176	; 0xb0
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40012c00 	.word	0x40012c00
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40020800 	.word	0x40020800
 80011cc:	40020c00 	.word	0x40020c00

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08c      	sub	sp, #48	; 0x30
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
 80011e4:	60da      	str	r2, [r3, #12]
 80011e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011f0:	d129      	bne.n	8001246 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011f2:	4b2d      	ldr	r3, [pc, #180]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a2c      	ldr	r2, [pc, #176]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	4b27      	ldr	r3, [pc, #156]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001210:	f043 0301 	orr.w	r3, r3, #1
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0301 	and.w	r3, r3, #1
 800121e:	617b      	str	r3, [r7, #20]
 8001220:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001228:	2302      	movs	r3, #2
 800122a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001234:	2301      	movs	r3, #1
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001238:	f107 031c 	add.w	r3, r7, #28
 800123c:	4619      	mov	r1, r3
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <HAL_TIM_Base_MspInit+0xdc>)
 8001240:	f001 ff36 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001244:	e02c      	b.n	80012a0 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a19      	ldr	r2, [pc, #100]	; (80012b0 <HAL_TIM_Base_MspInit+0xe0>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d127      	bne.n	80012a0 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001250:	4b15      	ldr	r3, [pc, #84]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a14      	ldr	r2, [pc, #80]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001256:	f043 0304 	orr.w	r3, r3, #4
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	613b      	str	r3, [r7, #16]
 8001266:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 800126e:	f043 0310 	orr.w	r3, r3, #16
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b0c      	ldr	r3, [pc, #48]	; (80012a8 <HAL_TIM_Base_MspInit+0xd8>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 0310 	and.w	r3, r3, #16
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001280:	2301      	movs	r3, #1
 8001282:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001284:	2302      	movs	r3, #2
 8001286:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001290:	2302      	movs	r3, #2
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001294:	f107 031c 	add.w	r3, r7, #28
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	; (80012b4 <HAL_TIM_Base_MspInit+0xe4>)
 800129c:	f001 ff08 	bl	80030b0 <HAL_GPIO_Init>
}
 80012a0:	bf00      	nop
 80012a2:	3730      	adds	r7, #48	; 0x30
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40020000 	.word	0x40020000
 80012b0:	40000800 	.word	0x40000800
 80012b4:	40021000 	.word	0x40021000

080012b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b0ac      	sub	sp, #176	; 0xb0
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012d0:	f107 0318 	add.w	r3, r7, #24
 80012d4:	2284      	movs	r2, #132	; 0x84
 80012d6:	2100      	movs	r1, #0
 80012d8:	4618      	mov	r0, r3
 80012da:	f00b f961 	bl	800c5a0 <memset>
  if(huart->Instance==UART4)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a42      	ldr	r2, [pc, #264]	; (80013ec <HAL_UART_MspInit+0x134>)
 80012e4:	4293      	cmp	r3, r2
 80012e6:	d13c      	bne.n	8001362 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80012e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012ec:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012f2:	f107 0318 	add.w	r3, r7, #24
 80012f6:	4618      	mov	r0, r3
 80012f8:	f004 f870 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001302:	f7ff fd83 	bl	8000e0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001306:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <HAL_UART_MspInit+0x138>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	4a39      	ldr	r2, [pc, #228]	; (80013f0 <HAL_UART_MspInit+0x138>)
 800130c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001310:	6413      	str	r3, [r2, #64]	; 0x40
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <HAL_UART_MspInit+0x138>)
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800131a:	617b      	str	r3, [r7, #20]
 800131c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	4b34      	ldr	r3, [pc, #208]	; (80013f0 <HAL_UART_MspInit+0x138>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a33      	ldr	r2, [pc, #204]	; (80013f0 <HAL_UART_MspInit+0x138>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b31      	ldr	r3, [pc, #196]	; (80013f0 <HAL_UART_MspInit+0x138>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 8001336:	2303      	movs	r3, #3
 8001338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133c:	2302      	movs	r3, #2
 800133e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001348:	2303      	movs	r3, #3
 800134a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800134e:	2308      	movs	r3, #8
 8001350:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001354:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001358:	4619      	mov	r1, r3
 800135a:	4826      	ldr	r0, [pc, #152]	; (80013f4 <HAL_UART_MspInit+0x13c>)
 800135c:	f001 fea8 	bl	80030b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001360:	e040      	b.n	80013e4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART7)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <HAL_UART_MspInit+0x140>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d13b      	bne.n	80013e4 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001372:	2300      	movs	r3, #0
 8001374:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001376:	f107 0318 	add.w	r3, r7, #24
 800137a:	4618      	mov	r0, r3
 800137c:	f004 f82e 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001386:	f7ff fd41 	bl	8000e0c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_UART_MspInit+0x138>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a18      	ldr	r2, [pc, #96]	; (80013f0 <HAL_UART_MspInit+0x138>)
 8001390:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_UART_MspInit+0x138>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <HAL_UART_MspInit+0x138>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a12      	ldr	r2, [pc, #72]	; (80013f0 <HAL_UART_MspInit+0x138>)
 80013a8:	f043 0320 	orr.w	r3, r3, #32
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <HAL_UART_MspInit+0x138>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0320 	and.w	r3, r3, #32
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013cc:	2303      	movs	r3, #3
 80013ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80013d2:	2308      	movs	r3, #8
 80013d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013dc:	4619      	mov	r1, r3
 80013de:	4807      	ldr	r0, [pc, #28]	; (80013fc <HAL_UART_MspInit+0x144>)
 80013e0:	f001 fe66 	bl	80030b0 <HAL_GPIO_Init>
}
 80013e4:	bf00      	nop
 80013e6:	37b0      	adds	r7, #176	; 0xb0
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	40004c00 	.word	0x40004c00
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40007800 	.word	0x40007800
 80013fc:	40021400 	.word	0x40021400

08001400 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001400:	b580      	push	{r7, lr}
 8001402:	b086      	sub	sp, #24
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001414:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <HAL_FMC_MspInit+0xc4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d14f      	bne.n	80014bc <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <HAL_FMC_MspInit+0xc4>)
 800141e:	2201      	movs	r2, #1
 8001420:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001422:	4b29      	ldr	r3, [pc, #164]	; (80014c8 <HAL_FMC_MspInit+0xc8>)
 8001424:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001426:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <HAL_FMC_MspInit+0xc8>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6393      	str	r3, [r2, #56]	; 0x38
 800142e:	4b26      	ldr	r3, [pc, #152]	; (80014c8 <HAL_FMC_MspInit+0xc8>)
 8001430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PG9   ------> FMC_NE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800143a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144c:	230c      	movs	r3, #12
 800144e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	481d      	ldr	r0, [pc, #116]	; (80014cc <HAL_FMC_MspInit+0xcc>)
 8001456:	f001 fe2b 	bl	80030b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 800145a:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 800145e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001468:	2303      	movs	r3, #3
 800146a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146c:	230c      	movs	r3, #12
 800146e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	4619      	mov	r1, r3
 8001474:	4816      	ldr	r0, [pc, #88]	; (80014d0 <HAL_FMC_MspInit+0xd0>)
 8001476:	f001 fe1b 	bl	80030b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
 800147a:	f24c 0333 	movw	r3, #49203	; 0xc033
 800147e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001488:	2303      	movs	r3, #3
 800148a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800148c:	230c      	movs	r3, #12
 800148e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001490:	1d3b      	adds	r3, r7, #4
 8001492:	4619      	mov	r1, r3
 8001494:	480f      	ldr	r0, [pc, #60]	; (80014d4 <HAL_FMC_MspInit+0xd4>)
 8001496:	f001 fe0b 	bl	80030b0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800149a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800149e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a0:	2302      	movs	r3, #2
 80014a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a8:	2303      	movs	r3, #3
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ac:	230c      	movs	r3, #12
 80014ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014b0:	1d3b      	adds	r3, r7, #4
 80014b2:	4619      	mov	r1, r3
 80014b4:	4808      	ldr	r0, [pc, #32]	; (80014d8 <HAL_FMC_MspInit+0xd8>)
 80014b6:	f001 fdfb 	bl	80030b0 <HAL_GPIO_Init>
 80014ba:	e000      	b.n	80014be <HAL_FMC_MspInit+0xbe>
    return;
 80014bc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	2000057c 	.word	0x2000057c
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40021400 	.word	0x40021400
 80014d0:	40021000 	.word	0x40021000
 80014d4:	40020c00 	.word	0x40020c00
 80014d8:	40021800 	.word	0x40021800

080014dc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80014e4:	f7ff ff8c 	bl	8001400 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014f4:	e7fe      	b.n	80014f4 <NMI_Handler+0x4>

080014f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014fa:	e7fe      	b.n	80014fa <HardFault_Handler+0x4>

080014fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler+0x4>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	b480      	push	{r7}
 8001504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001506:	e7fe      	b.n	8001506 <BusFault_Handler+0x4>

08001508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800150c:	e7fe      	b.n	800150c <UsageFault_Handler+0x4>

0800150e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800152e:	bf00      	nop
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800153c:	f001 f8d2 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}

08001544 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001548:	4802      	ldr	r0, [pc, #8]	; (8001554 <OTG_HS_IRQHandler+0x10>)
 800154a:	f002 f8bc 	bl	80036c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20001a6c 	.word	0x20001a6c

08001558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <_sbrk+0x5c>)
 8001562:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <_sbrk+0x60>)
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800156c:	4b13      	ldr	r3, [pc, #76]	; (80015bc <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d102      	bne.n	800157a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <_sbrk+0x64>)
 8001576:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <_sbrk+0x68>)
 8001578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157a:	4b10      	ldr	r3, [pc, #64]	; (80015bc <_sbrk+0x64>)
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	429a      	cmp	r2, r3
 8001586:	d207      	bcs.n	8001598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001588:	f00b f822 	bl	800c5d0 <__errno>
 800158c:	4603      	mov	r3, r0
 800158e:	220c      	movs	r2, #12
 8001590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001592:	f04f 33ff 	mov.w	r3, #4294967295
 8001596:	e009      	b.n	80015ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <_sbrk+0x64>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800159e:	4b07      	ldr	r3, [pc, #28]	; (80015bc <_sbrk+0x64>)
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	4413      	add	r3, r2
 80015a6:	4a05      	ldr	r2, [pc, #20]	; (80015bc <_sbrk+0x64>)
 80015a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20050000 	.word	0x20050000
 80015b8:	00000400 	.word	0x00000400
 80015bc:	20000580 	.word	0x20000580
 80015c0:	200020c0 	.word	0x200020c0

080015c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015c8:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <SystemInit+0x20>)
 80015ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ce:	4a05      	ldr	r2, [pc, #20]	; (80015e4 <SystemInit+0x20>)
 80015d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015d8:	bf00      	nop
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 80015e8:	b480      	push	{r7}
 80015ea:	b087      	sub	sp, #28
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	4611      	mov	r1, r2
 80015f4:	461a      	mov	r2, r3
 80015f6:	460b      	mov	r3, r1
 80015f8:	80fb      	strh	r3, [r7, #6]
 80015fa:	4613      	mov	r3, r2
 80015fc:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	68ba      	ldr	r2, [r7, #8]
 8001602:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	88fa      	ldrh	r2, [r7, #6]
 8001608:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	88ba      	ldrh	r2, [r7, #4]
 800160e:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2204      	movs	r2, #4
 8001614:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	2204      	movs	r2, #4
 800161a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001622:	b29a      	uxth	r2, r3
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800162a:	b29b      	uxth	r3, r3
 800162c:	1ad3      	subs	r3, r2, r3
 800162e:	b29b      	uxth	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b29b      	uxth	r3, r3
 8001634:	b21a      	sxth	r2, r3
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001640:	b29a      	uxth	r2, r3
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001648:	b29b      	uxth	r3, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	b21a      	sxth	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	2200      	movs	r2, #0
 8001686:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2200      	movs	r2, #0
 800168c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	2200      	movs	r2, #0
 8001692:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	2200      	movs	r2, #0
 8001698:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80016a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016b0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2200      	movs	r2, #0
 80016c0:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2200      	movs	r2, #0
 80016cc:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
 80016d2:	e010      	b.n	80016f6 <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	68fa      	ldr	r2, [r7, #12]
 80016d8:	3309      	adds	r3, #9
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	3309      	adds	r3, #9
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	4413      	add	r3, r2
 80016ec:	2200      	movs	r2, #0
 80016ee:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	3301      	adds	r3, #1
 80016f4:	75fb      	strb	r3, [r7, #23]
 80016f6:	7dfb      	ldrb	r3, [r7, #23]
 80016f8:	2b06      	cmp	r3, #6
 80016fa:	d9eb      	bls.n	80016d4 <UG_Init+0xec>
   }

   gui = g;
 80016fc:	4a04      	ldr	r2, [pc, #16]	; (8001710 <UG_Init+0x128>)
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	6013      	str	r3, [r2, #0]
   return 1;
 8001702:	2301      	movs	r3, #1
}
 8001704:	4618      	mov	r0, r3
 8001706:	371c      	adds	r7, #28
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	20000584 	.word	0x20000584

08001714 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8001714:	b4b0      	push	{r4, r5, r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <UG_FontSelect+0x28>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001726:	4615      	mov	r5, r2
 8001728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	6023      	str	r3, [r4, #0]
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bcb0      	pop	{r4, r5, r7}
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	20000584 	.word	0x20000584

08001740 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af02      	add	r7, sp, #8
 8001746:	4603      	mov	r3, r0
 8001748:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <UG_FillScreen+0x40>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001752:	b29b      	uxth	r3, r3
 8001754:	3b01      	subs	r3, #1
 8001756:	b29b      	uxth	r3, r3
 8001758:	b21a      	sxth	r2, r3
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <UG_FillScreen+0x40>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001762:	b29b      	uxth	r3, r3
 8001764:	3b01      	subs	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	b219      	sxth	r1, r3
 800176a:	88fb      	ldrh	r3, [r7, #6]
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	460b      	mov	r3, r1
 8001770:	2100      	movs	r1, #0
 8001772:	2000      	movs	r0, #0
 8001774:	f000 f806 	bl	8001784 <UG_FillFrame>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000584 	.word	0x20000584

08001784 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8001784:	b5b0      	push	{r4, r5, r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af02      	add	r7, sp, #8
 800178a:	4604      	mov	r4, r0
 800178c:	4608      	mov	r0, r1
 800178e:	4611      	mov	r1, r2
 8001790:	461a      	mov	r2, r3
 8001792:	4623      	mov	r3, r4
 8001794:	80fb      	strh	r3, [r7, #6]
 8001796:	4603      	mov	r3, r0
 8001798:	80bb      	strh	r3, [r7, #4]
 800179a:	460b      	mov	r3, r1
 800179c:	807b      	strh	r3, [r7, #2]
 800179e:	4613      	mov	r3, r2
 80017a0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80017a2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	da05      	bge.n	80017ba <UG_FillFrame+0x36>
   {
      n = x2;
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80017b2:	88fb      	ldrh	r3, [r7, #6]
 80017b4:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80017b6:	89fb      	ldrh	r3, [r7, #14]
 80017b8:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80017ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 80017be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	da05      	bge.n	80017d2 <UG_FillFrame+0x4e>
   {
      n = y2;
 80017c6:	883b      	ldrh	r3, [r7, #0]
 80017c8:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80017ca:	88bb      	ldrh	r3, [r7, #4]
 80017cc:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80017ce:	89fb      	ldrh	r3, [r7, #14]
 80017d0:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80017d2:	4b23      	ldr	r3, [pc, #140]	; (8001860 <UG_FillFrame+0xdc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d012      	beq.n	8001808 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80017e2:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <UG_FillFrame+0xdc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017e8:	461d      	mov	r5, r3
 80017ea:	f9b7 4000 	ldrsh.w	r4, [r7]
 80017ee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80017f2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80017f6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80017fa:	8c3b      	ldrh	r3, [r7, #32]
 80017fc:	9300      	str	r3, [sp, #0]
 80017fe:	4623      	mov	r3, r4
 8001800:	47a8      	blx	r5
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d027      	beq.n	8001858 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8001808:	88bb      	ldrh	r3, [r7, #4]
 800180a:	81bb      	strh	r3, [r7, #12]
 800180c:	e01d      	b.n	800184a <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	81fb      	strh	r3, [r7, #14]
 8001812:	e00e      	b.n	8001832 <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <UG_FillFrame+0xdc>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	8c3a      	ldrh	r2, [r7, #32]
 800181c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001820:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001824:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8001826:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800182a:	b29b      	uxth	r3, r3
 800182c:	3301      	adds	r3, #1
 800182e:	b29b      	uxth	r3, r3
 8001830:	81fb      	strh	r3, [r7, #14]
 8001832:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001836:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800183a:	429a      	cmp	r2, r3
 800183c:	ddea      	ble.n	8001814 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800183e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001842:	b29b      	uxth	r3, r3
 8001844:	3301      	adds	r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	81bb      	strh	r3, [r7, #12]
 800184a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800184e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001852:	429a      	cmp	r2, r3
 8001854:	dddb      	ble.n	800180e <UG_FillFrame+0x8a>
 8001856:	e000      	b.n	800185a <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8001858:	bf00      	nop
      }
   }
}
 800185a:	3710      	adds	r7, #16
 800185c:	46bd      	mov	sp, r7
 800185e:	bdb0      	pop	{r4, r5, r7, pc}
 8001860:	20000584 	.word	0x20000584

08001864 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8001864:	b590      	push	{r4, r7, lr}
 8001866:	b087      	sub	sp, #28
 8001868:	af02      	add	r7, sp, #8
 800186a:	4603      	mov	r3, r0
 800186c:	603a      	str	r2, [r7, #0]
 800186e:	80fb      	strh	r3, [r7, #6]
 8001870:	460b      	mov	r3, r1
 8001872:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 800187c:	e06d      	b.n	800195a <UG_PutString+0xf6>
   {
      chr = *str++;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	603a      	str	r2, [r7, #0]
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8001888:	7afb      	ldrb	r3, [r7, #11]
 800188a:	b29a      	uxth	r2, r3
 800188c:	4b37      	ldr	r3, [pc, #220]	; (800196c <UG_PutString+0x108>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001892:	429a      	cmp	r2, r3
 8001894:	d361      	bcc.n	800195a <UG_PutString+0xf6>
 8001896:	7afb      	ldrb	r3, [r7, #11]
 8001898:	b29a      	uxth	r2, r3
 800189a:	4b34      	ldr	r3, [pc, #208]	; (800196c <UG_PutString+0x108>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d900      	bls.n	80018a6 <UG_PutString+0x42>
 80018a4:	e059      	b.n	800195a <UG_PutString+0xf6>
      if ( chr == '\n' )
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	2b0a      	cmp	r3, #10
 80018aa:	d104      	bne.n	80018b6 <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <UG_PutString+0x108>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	889b      	ldrh	r3, [r3, #4]
 80018b2:	81fb      	strh	r3, [r7, #14]
         continue;
 80018b4:	e051      	b.n	800195a <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80018b6:	4b2d      	ldr	r3, [pc, #180]	; (800196c <UG_PutString+0x108>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d00a      	beq.n	80018d6 <UG_PutString+0x72>
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <UG_PutString+0x108>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018c6:	7afa      	ldrb	r2, [r7, #11]
 80018c8:	4928      	ldr	r1, [pc, #160]	; (800196c <UG_PutString+0x108>)
 80018ca:	6809      	ldr	r1, [r1, #0]
 80018cc:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80018ce:	1a52      	subs	r2, r2, r1
 80018d0:	4413      	add	r3, r2
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	e004      	b.n	80018e0 <UG_PutString+0x7c>
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <UG_PutString+0x108>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 80018e2:	4b22      	ldr	r3, [pc, #136]	; (800196c <UG_PutString+0x108>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80018ea:	4619      	mov	r1, r3
 80018ec:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80018f0:	7abb      	ldrb	r3, [r7, #10]
 80018f2:	4413      	add	r3, r2
 80018f4:	4299      	cmp	r1, r3
 80018f6:	dc11      	bgt.n	800191c <UG_PutString+0xb8>
      {
         xp = x;
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 80018fc:	4b1b      	ldr	r3, [pc, #108]	; (800196c <UG_PutString+0x108>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001904:	b29a      	uxth	r2, r3
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <UG_PutString+0x108>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 800190e:	b29b      	uxth	r3, r3
 8001910:	4413      	add	r3, r2
 8001912:	b29a      	uxth	r2, r3
 8001914:	89bb      	ldrh	r3, [r7, #12]
 8001916:	4413      	add	r3, r2
 8001918:	b29b      	uxth	r3, r3
 800191a:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 800191c:	4b13      	ldr	r3, [pc, #76]	; (800196c <UG_PutString+0x108>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8001924:	4b11      	ldr	r3, [pc, #68]	; (800196c <UG_PutString+0x108>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800192c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001930:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001934:	7af8      	ldrb	r0, [r7, #11]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4623      	mov	r3, r4
 800193a:	f000 f89d 	bl	8001a78 <UG_PutChar>

      xp += cw + gui->char_h_space;
 800193e:	7abb      	ldrb	r3, [r7, #10]
 8001940:	b21a      	sxth	r2, r3
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <UG_PutString+0x108>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 800194a:	b21b      	sxth	r3, r3
 800194c:	4413      	add	r3, r2
 800194e:	b21b      	sxth	r3, r3
 8001950:	b29a      	uxth	r2, r3
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	4413      	add	r3, r2
 8001956:	b29b      	uxth	r3, r3
 8001958:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d18d      	bne.n	800187e <UG_PutString+0x1a>
   }
}
 8001962:	bf00      	nop
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bd90      	pop	{r4, r7, pc}
 800196c:	20000584 	.word	0x20000584

08001970 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8001970:	b590      	push	{r4, r7, lr}
 8001972:	b089      	sub	sp, #36	; 0x24
 8001974:	af02      	add	r7, sp, #8
 8001976:	60ba      	str	r2, [r7, #8]
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	81fb      	strh	r3, [r7, #14]
 800197e:	460b      	mov	r3, r1
 8001980:	81bb      	strh	r3, [r7, #12]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8001986:	89fb      	ldrh	r3, [r7, #14]
 8001988:	82fb      	strh	r3, [r7, #22]
   yp=y;
 800198a:	89bb      	ldrh	r3, [r7, #12]
 800198c:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 800198e:	e067      	b.n	8001a60 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8001990:	68bb      	ldr	r3, [r7, #8]
 8001992:	1c5a      	adds	r2, r3, #1
 8001994:	60ba      	str	r2, [r7, #8]
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 800199a:	7cfb      	ldrb	r3, [r7, #19]
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b35      	ldr	r3, [pc, #212]	; (8001a74 <UG_PutColorString+0x104>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d35b      	bcc.n	8001a60 <UG_PutColorString+0xf0>
 80019a8:	7cfb      	ldrb	r3, [r7, #19]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4b31      	ldr	r3, [pc, #196]	; (8001a74 <UG_PutColorString+0x104>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d900      	bls.n	80019b8 <UG_PutColorString+0x48>
 80019b6:	e053      	b.n	8001a60 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 80019b8:	7cfb      	ldrb	r3, [r7, #19]
 80019ba:	2b0a      	cmp	r3, #10
 80019bc:	d104      	bne.n	80019c8 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 80019be:	4b2d      	ldr	r3, [pc, #180]	; (8001a74 <UG_PutColorString+0x104>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	889b      	ldrh	r3, [r3, #4]
 80019c4:	82fb      	strh	r3, [r7, #22]
         continue;
 80019c6:	e04b      	b.n	8001a60 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80019c8:	4b2a      	ldr	r3, [pc, #168]	; (8001a74 <UG_PutColorString+0x104>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d00a      	beq.n	80019e8 <UG_PutColorString+0x78>
 80019d2:	4b28      	ldr	r3, [pc, #160]	; (8001a74 <UG_PutColorString+0x104>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d8:	7cfa      	ldrb	r2, [r7, #19]
 80019da:	4926      	ldr	r1, [pc, #152]	; (8001a74 <UG_PutColorString+0x104>)
 80019dc:	6809      	ldr	r1, [r1, #0]
 80019de:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80019e0:	1a52      	subs	r2, r2, r1
 80019e2:	4413      	add	r3, r2
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	e004      	b.n	80019f2 <UG_PutColorString+0x82>
 80019e8:	4b22      	ldr	r3, [pc, #136]	; (8001a74 <UG_PutColorString+0x104>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 80019f4:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <UG_PutColorString+0x104>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001a02:	7cbb      	ldrb	r3, [r7, #18]
 8001a04:	4413      	add	r3, r2
 8001a06:	4299      	cmp	r1, r3
 8001a08:	dc11      	bgt.n	8001a2e <UG_PutColorString+0xbe>
      {
         xp = x;
 8001a0a:	89fb      	ldrh	r3, [r7, #14]
 8001a0c:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <UG_PutColorString+0x104>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <UG_PutColorString+0x104>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	4413      	add	r3, r2
 8001a24:	b29a      	uxth	r2, r3
 8001a26:	8abb      	ldrh	r3, [r7, #20]
 8001a28:	4413      	add	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 8001a2e:	88fc      	ldrh	r4, [r7, #6]
 8001a30:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001a34:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001a38:	7cf8      	ldrb	r0, [r7, #19]
 8001a3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	4623      	mov	r3, r4
 8001a40:	f000 f81a 	bl	8001a78 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8001a44:	7cbb      	ldrb	r3, [r7, #18]
 8001a46:	b21a      	sxth	r2, r3
 8001a48:	4b0a      	ldr	r3, [pc, #40]	; (8001a74 <UG_PutColorString+0x104>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8001a50:	b21b      	sxth	r3, r3
 8001a52:	4413      	add	r3, r2
 8001a54:	b21b      	sxth	r3, r3
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	8afb      	ldrh	r3, [r7, #22]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d193      	bne.n	8001990 <UG_PutColorString+0x20>
   }
}
 8001a68:	bf00      	nop
 8001a6a:	bf00      	nop
 8001a6c:	371c      	adds	r7, #28
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd90      	pop	{r4, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	20000584 	.word	0x20000584

08001a78 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af02      	add	r7, sp, #8
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	71fb      	strb	r3, [r7, #7]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80bb      	strh	r3, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8001a96:	4b09      	ldr	r3, [pc, #36]	; (8001abc <UG_PutChar+0x44>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	332c      	adds	r3, #44	; 0x2c
 8001a9c:	883c      	ldrh	r4, [r7, #0]
 8001a9e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001aa2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001aa6:	79f8      	ldrb	r0, [r7, #7]
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	8b3b      	ldrh	r3, [r7, #24]
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	4623      	mov	r3, r4
 8001ab0:	f000 f852 	bl	8001b58 <_UG_PutChar>
}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd90      	pop	{r4, r7, pc}
 8001abc:	20000584 	.word	0x20000584

08001ac0 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <UG_SetForecolor+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	88fa      	ldrh	r2, [r7, #6]
 8001ad0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8001ad4:	bf00      	nop
 8001ad6:	370c      	adds	r7, #12
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr
 8001ae0:	20000584 	.word	0x20000584

08001ae4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8001aee:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <UG_SetBackcolor+0x20>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	88fa      	ldrh	r2, [r7, #6]
 8001af4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	20000584 	.word	0x20000584

08001b08 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8001b12:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <UG_FontSetHSpace+0x24>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	88fa      	ldrh	r2, [r7, #6]
 8001b18:	b252      	sxtb	r2, r2
 8001b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000584 	.word	0x20000584

08001b30 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8001b3a:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <UG_FontSetVSpace+0x24>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	b252      	sxtb	r2, r2
 8001b42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	20000584 	.word	0x20000584

08001b58 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8001b58:	b5b0      	push	{r4, r5, r7, lr}
 8001b5a:	b08a      	sub	sp, #40	; 0x28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4604      	mov	r4, r0
 8001b60:	4608      	mov	r0, r1
 8001b62:	4611      	mov	r1, r2
 8001b64:	461a      	mov	r2, r3
 8001b66:	4623      	mov	r3, r4
 8001b68:	71fb      	strb	r3, [r7, #7]
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	80bb      	strh	r3, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	807b      	strh	r3, [r7, #2]
 8001b72:	4613      	mov	r3, r2
 8001b74:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8001b7a:	7e3b      	ldrb	r3, [r7, #24]
 8001b7c:	2bfc      	cmp	r3, #252	; 0xfc
 8001b7e:	dc77      	bgt.n	8001c70 <_UG_PutChar+0x118>
 8001b80:	2bd6      	cmp	r3, #214	; 0xd6
 8001b82:	da08      	bge.n	8001b96 <_UG_PutChar+0x3e>
 8001b84:	2bc4      	cmp	r3, #196	; 0xc4
 8001b86:	d06a      	beq.n	8001c5e <_UG_PutChar+0x106>
 8001b88:	2bc4      	cmp	r3, #196	; 0xc4
 8001b8a:	dc71      	bgt.n	8001c70 <_UG_PutChar+0x118>
 8001b8c:	2bb0      	cmp	r3, #176	; 0xb0
 8001b8e:	d06c      	beq.n	8001c6a <_UG_PutChar+0x112>
 8001b90:	2bb5      	cmp	r3, #181	; 0xb5
 8001b92:	d067      	beq.n	8001c64 <_UG_PutChar+0x10c>
 8001b94:	e06c      	b.n	8001c70 <_UG_PutChar+0x118>
 8001b96:	3bd6      	subs	r3, #214	; 0xd6
 8001b98:	2b26      	cmp	r3, #38	; 0x26
 8001b9a:	d869      	bhi.n	8001c70 <_UG_PutChar+0x118>
 8001b9c:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <_UG_PutChar+0x4c>)
 8001b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba2:	bf00      	nop
 8001ba4:	08001c47 	.word	0x08001c47
 8001ba8:	08001c71 	.word	0x08001c71
 8001bac:	08001c71 	.word	0x08001c71
 8001bb0:	08001c71 	.word	0x08001c71
 8001bb4:	08001c71 	.word	0x08001c71
 8001bb8:	08001c71 	.word	0x08001c71
 8001bbc:	08001c53 	.word	0x08001c53
 8001bc0:	08001c71 	.word	0x08001c71
 8001bc4:	08001c71 	.word	0x08001c71
 8001bc8:	08001c71 	.word	0x08001c71
 8001bcc:	08001c71 	.word	0x08001c71
 8001bd0:	08001c71 	.word	0x08001c71
 8001bd4:	08001c71 	.word	0x08001c71
 8001bd8:	08001c71 	.word	0x08001c71
 8001bdc:	08001c59 	.word	0x08001c59
 8001be0:	08001c71 	.word	0x08001c71
 8001be4:	08001c71 	.word	0x08001c71
 8001be8:	08001c71 	.word	0x08001c71
 8001bec:	08001c71 	.word	0x08001c71
 8001bf0:	08001c71 	.word	0x08001c71
 8001bf4:	08001c71 	.word	0x08001c71
 8001bf8:	08001c71 	.word	0x08001c71
 8001bfc:	08001c71 	.word	0x08001c71
 8001c00:	08001c71 	.word	0x08001c71
 8001c04:	08001c71 	.word	0x08001c71
 8001c08:	08001c71 	.word	0x08001c71
 8001c0c:	08001c71 	.word	0x08001c71
 8001c10:	08001c71 	.word	0x08001c71
 8001c14:	08001c71 	.word	0x08001c71
 8001c18:	08001c71 	.word	0x08001c71
 8001c1c:	08001c71 	.word	0x08001c71
 8001c20:	08001c71 	.word	0x08001c71
 8001c24:	08001c41 	.word	0x08001c41
 8001c28:	08001c71 	.word	0x08001c71
 8001c2c:	08001c71 	.word	0x08001c71
 8001c30:	08001c71 	.word	0x08001c71
 8001c34:	08001c71 	.word	0x08001c71
 8001c38:	08001c71 	.word	0x08001c71
 8001c3c:	08001c4d 	.word	0x08001c4d
   {
      case 0xF6: bt = 0x94; break; // ö
 8001c40:	2394      	movs	r3, #148	; 0x94
 8001c42:	763b      	strb	r3, [r7, #24]
 8001c44:	e014      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 8001c46:	2399      	movs	r3, #153	; 0x99
 8001c48:	763b      	strb	r3, [r7, #24]
 8001c4a:	e011      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 8001c4c:	2381      	movs	r3, #129	; 0x81
 8001c4e:	763b      	strb	r3, [r7, #24]
 8001c50:	e00e      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 8001c52:	239a      	movs	r3, #154	; 0x9a
 8001c54:	763b      	strb	r3, [r7, #24]
 8001c56:	e00b      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 8001c58:	2384      	movs	r3, #132	; 0x84
 8001c5a:	763b      	strb	r3, [r7, #24]
 8001c5c:	e008      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 8001c5e:	238e      	movs	r3, #142	; 0x8e
 8001c60:	763b      	strb	r3, [r7, #24]
 8001c62:	e005      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 8001c64:	23e6      	movs	r3, #230	; 0xe6
 8001c66:	763b      	strb	r3, [r7, #24]
 8001c68:	e002      	b.n	8001c70 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 8001c6a:	23f8      	movs	r3, #248	; 0xf8
 8001c6c:	763b      	strb	r3, [r7, #24]
 8001c6e:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8001c70:	7e3b      	ldrb	r3, [r7, #24]
 8001c72:	b29a      	uxth	r2, r3
 8001c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c76:	895b      	ldrh	r3, [r3, #10]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	f0c0 81fc 	bcc.w	8002076 <_UG_PutChar+0x51e>
 8001c7e:	7e3b      	ldrb	r3, [r7, #24]
 8001c80:	b29a      	uxth	r2, r3
 8001c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c84:	899b      	ldrh	r3, [r3, #12]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	f200 81f5 	bhi.w	8002076 <_UG_PutChar+0x51e>

   yo = y;
 8001c8c:	887b      	ldrh	r3, [r7, #2]
 8001c8e:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c96:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8001c98:	8b7b      	ldrh	r3, [r7, #26]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	f000 81ed 	beq.w	800207a <_UG_PutChar+0x522>
   bn >>= 3;
 8001ca0:	8b7b      	ldrh	r3, [r7, #26]
 8001ca2:	08db      	lsrs	r3, r3, #3
 8001ca4:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8001ca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d002      	beq.n	8001cbe <_UG_PutChar+0x166>
 8001cb8:	8b7b      	ldrh	r3, [r7, #26]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8001cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc0:	691b      	ldr	r3, [r3, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d009      	beq.n	8001cda <_UG_PutChar+0x182>
 8001cc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	7e3a      	ldrb	r2, [r7, #24]
 8001ccc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001cce:	8949      	ldrh	r1, [r1, #10]
 8001cd0:	1a52      	subs	r2, r2, r1
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	e003      	b.n	8001ce2 <_UG_PutChar+0x18a>
 8001cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cdc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ce0:	b29b      	uxth	r3, r3
 8001ce2:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8001ce4:	4b93      	ldr	r3, [pc, #588]	; (8001f34 <_UG_PutChar+0x3dc>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80d8 	beq.w	8001ea6 <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8001cf6:	4b8f      	ldr	r3, [pc, #572]	; (8001f34 <_UG_PutChar+0x3dc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	461d      	mov	r5, r3
 8001cfe:	88ba      	ldrh	r2, [r7, #4]
 8001d00:	8a7b      	ldrh	r3, [r7, #18]
 8001d02:	4413      	add	r3, r2
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	3b01      	subs	r3, #1
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	b21c      	sxth	r4, r3
 8001d0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d0e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	887b      	ldrh	r3, [r7, #2]
 8001d16:	4413      	add	r3, r2
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	3b01      	subs	r3, #1
 8001d1c:	b29b      	uxth	r3, r3
 8001d1e:	b21b      	sxth	r3, r3
 8001d20:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001d24:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001d28:	4622      	mov	r2, r4
 8001d2a:	47a8      	blx	r5
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 8001d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d32:	791b      	ldrb	r3, [r3, #4]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d14d      	bne.n	8001dd4 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8001d38:	7e3b      	ldrb	r3, [r7, #24]
 8001d3a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d3c:	8952      	ldrh	r2, [r2, #10]
 8001d3e:	1a9b      	subs	r3, r3, r2
 8001d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d42:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001d46:	fb02 f303 	mul.w	r3, r2, r3
 8001d4a:	8b7a      	ldrh	r2, [r7, #26]
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 8001d52:	2300      	movs	r3, #0
 8001d54:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001d56:	e036      	b.n	8001dc6 <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8001d58:	8a7b      	ldrh	r3, [r7, #18]
 8001d5a:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001d60:	e02a      	b.n	8001db8 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 8001d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	1c59      	adds	r1, r3, #1
 8001d6a:	6179      	str	r1, [r7, #20]
 8001d6c:	4413      	add	r3, r2
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 8001d72:	2300      	movs	r3, #0
 8001d74:	847b      	strh	r3, [r7, #34]	; 0x22
 8001d76:	e016      	b.n	8001da6 <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8001d78:	7e7b      	ldrb	r3, [r7, #25]
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d004      	beq.n	8001d8c <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 8001d82:	883a      	ldrh	r2, [r7, #0]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4610      	mov	r0, r2
 8001d88:	4798      	blx	r3
 8001d8a:	e003      	b.n	8001d94 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8001d8c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4610      	mov	r0, r2
 8001d92:	4798      	blx	r3
				   }
				   b >>= 1;
 8001d94:	7e7b      	ldrb	r3, [r7, #25]
 8001d96:	085b      	lsrs	r3, r3, #1
 8001d98:	767b      	strb	r3, [r7, #25]
				   c--;
 8001d9a:	8bbb      	ldrh	r3, [r7, #28]
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8001da0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001da2:	3301      	adds	r3, #1
 8001da4:	847b      	strh	r3, [r7, #34]	; 0x22
 8001da6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001da8:	2b07      	cmp	r3, #7
 8001daa:	d802      	bhi.n	8001db2 <_UG_PutChar+0x25a>
 8001dac:	8bbb      	ldrh	r3, [r7, #28]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1e2      	bne.n	8001d78 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8001db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001db4:	3301      	adds	r3, #1
 8001db6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001db8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001dba:	8b7b      	ldrh	r3, [r7, #26]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3d0      	bcc.n	8001d62 <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8001dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001dc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001dc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	dbc2      	blt.n	8001d58 <_UG_PutChar+0x200>
 8001dd2:	e153      	b.n	800207c <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8001dd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dd6:	791b      	ldrb	r3, [r3, #4]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	f040 814f 	bne.w	800207c <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8001dde:	7e3b      	ldrb	r3, [r7, #24]
 8001de0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de2:	8952      	ldrh	r2, [r2, #10]
 8001de4:	1a9b      	subs	r3, r3, r2
 8001de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001de8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001dec:	fb02 f303 	mul.w	r3, r2, r3
 8001df0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001df2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001df6:	fb02 f303 	mul.w	r3, r2, r3
 8001dfa:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e00:	e04a      	b.n	8001e98 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 8001e02:	2300      	movs	r3, #0
 8001e04:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e06:	e036      	b.n	8001e76 <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8001e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	6179      	str	r1, [r7, #20]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8001e18:	883b      	ldrh	r3, [r7, #0]
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	7e7a      	ldrb	r2, [r7, #25]
 8001e1e:	fb03 f202 	mul.w	r2, r3, r2
 8001e22:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	7e79      	ldrb	r1, [r7, #25]
 8001e28:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8001e2c:	fb01 f303 	mul.w	r3, r1, r3
 8001e30:	4413      	add	r3, r2
 8001e32:	121b      	asrs	r3, r3, #8
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	883b      	ldrh	r3, [r7, #0]
 8001e3c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001e40:	7e79      	ldrb	r1, [r7, #25]
 8001e42:	fb03 f101 	mul.w	r1, r3, r1
 8001e46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001e48:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001e4c:	7e78      	ldrb	r0, [r7, #25]
 8001e4e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8001e52:	fb00 f303 	mul.w	r3, r0, r3
 8001e56:	440b      	add	r3, r1
 8001e58:	121b      	asrs	r3, r3, #8
 8001e5a:	b21b      	sxth	r3, r3
 8001e5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e60:	b21b      	sxth	r3, r3
 8001e62:	4313      	orrs	r3, r2
 8001e64:	b21b      	sxth	r3, r3
 8001e66:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8001e68:	8a3a      	ldrh	r2, [r7, #16]
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8001e70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001e72:	3301      	adds	r3, #1
 8001e74:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001e76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001e78:	8a7b      	ldrh	r3, [r7, #18]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d3c4      	bcc.n	8001e08 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 8001e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e80:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001e84:	461a      	mov	r2, r3
 8001e86:	8a7b      	ldrh	r3, [r7, #18]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	4413      	add	r3, r2
 8001e90:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8001e92:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e94:	3301      	adds	r3, #1
 8001e96:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001e98:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e9a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001e9c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	dbae      	blt.n	8001e02 <_UG_PutChar+0x2aa>
 8001ea4:	e0ea      	b.n	800207c <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8001ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d16e      	bne.n	8001f8c <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 8001eae:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001eb2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001eb6:	8a7b      	ldrh	r3, [r7, #18]
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	461c      	mov	r4, r3
 8001ebe:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001ec2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001ec6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ec8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001ecc:	4413      	add	r3, r2
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	460a      	mov	r2, r1
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	f000 f99c 	bl	8002210 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8001ed8:	f000 fa14 	bl	8002304 <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8001edc:	7e3b      	ldrb	r3, [r7, #24]
 8001ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee0:	8952      	ldrh	r2, [r2, #10]
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ee6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001eea:	fb02 f303 	mul.w	r3, r2, r3
 8001eee:	8b7a      	ldrh	r2, [r7, #26]
 8001ef0:	fb02 f303 	mul.w	r3, r2, r3
 8001ef4:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001efa:	e040      	b.n	8001f7e <_UG_PutChar+0x426>
         {
           xo = x;
 8001efc:	88bb      	ldrh	r3, [r7, #4]
 8001efe:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8001f00:	8a7b      	ldrh	r3, [r7, #18]
 8001f02:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 8001f04:	2300      	movs	r3, #0
 8001f06:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f08:	e02f      	b.n	8001f6a <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 8001f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	1c59      	adds	r1, r3, #1
 8001f12:	6179      	str	r1, [r7, #20]
 8001f14:	4413      	add	r3, r2
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f1e:	e01b      	b.n	8001f58 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8001f20:	7e7b      	ldrb	r3, [r7, #25]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d006      	beq.n	8001f38 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 8001f2a:	883b      	ldrh	r3, [r7, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f9f0 	bl	8002312 <SSD1963_ConsecutivePSet>
 8001f32:	e005      	b.n	8001f40 <_UG_PutChar+0x3e8>
 8001f34:	20000584 	.word	0x20000584
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 8001f38:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f000 f9e9 	bl	8002312 <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 8001f40:	7e7b      	ldrb	r3, [r7, #25]
 8001f42:	085b      	lsrs	r3, r3, #1
 8001f44:	767b      	strb	r3, [r7, #25]
               xo++;
 8001f46:	8c3b      	ldrh	r3, [r7, #32]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	843b      	strh	r3, [r7, #32]
               c--;
 8001f4c:	8bbb      	ldrh	r3, [r7, #28]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8001f52:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f54:	3301      	adds	r3, #1
 8001f56:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001f5a:	2b07      	cmp	r3, #7
 8001f5c:	d802      	bhi.n	8001f64 <_UG_PutChar+0x40c>
 8001f5e:	8bbb      	ldrh	r3, [r7, #28]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d1dd      	bne.n	8001f20 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 8001f64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001f66:	3301      	adds	r3, #1
 8001f68:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f6a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001f6c:	8b7b      	ldrh	r3, [r7, #26]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d3cb      	bcc.n	8001f0a <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 8001f72:	8bfb      	ldrh	r3, [r7, #30]
 8001f74:	3301      	adds	r3, #1
 8001f76:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8001f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f80:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f82:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f86:	4293      	cmp	r3, r2
 8001f88:	dbb8      	blt.n	8001efc <_UG_PutChar+0x3a4>
 8001f8a:	e077      	b.n	800207c <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8001f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d173      	bne.n	800207c <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8001f94:	7e3b      	ldrb	r3, [r7, #24]
 8001f96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f98:	8952      	ldrh	r2, [r2, #10]
 8001f9a:	1a9b      	subs	r3, r3, r2
 8001f9c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f9e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001fa2:	fb02 f303 	mul.w	r3, r2, r3
 8001fa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001fa8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001fac:	fb02 f303 	mul.w	r3, r2, r3
 8001fb0:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001fb6:	e057      	b.n	8002068 <_UG_PutChar+0x510>
         {
            xo = x;
 8001fb8:	88bb      	ldrh	r3, [r7, #4]
 8001fba:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001fc0:	e03e      	b.n	8002040 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 8001fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	1c59      	adds	r1, r3, #1
 8001fca:	6179      	str	r1, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8001fd2:	883b      	ldrh	r3, [r7, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	7e7a      	ldrb	r2, [r7, #25]
 8001fd8:	fb03 f202 	mul.w	r2, r3, r2
 8001fdc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	7e79      	ldrb	r1, [r7, #25]
 8001fe2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8001fe6:	fb01 f303 	mul.w	r3, r1, r3
 8001fea:	4413      	add	r3, r2
 8001fec:	121b      	asrs	r3, r3, #8
 8001fee:	b21b      	sxth	r3, r3
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	b21a      	sxth	r2, r3
 8001ff4:	883b      	ldrh	r3, [r7, #0]
 8001ff6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001ffa:	7e79      	ldrb	r1, [r7, #25]
 8001ffc:	fb03 f101 	mul.w	r1, r3, r1
 8002000:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002006:	7e78      	ldrb	r0, [r7, #25]
 8002008:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800200c:	fb00 f303 	mul.w	r3, r0, r3
 8002010:	440b      	add	r3, r1
 8002012:	121b      	asrs	r3, r3, #8
 8002014:	b21b      	sxth	r3, r3
 8002016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800201a:	b21b      	sxth	r3, r3
 800201c:	4313      	orrs	r3, r2
 800201e:	b21b      	sxth	r3, r3
 8002020:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 8002022:	4b18      	ldr	r3, [pc, #96]	; (8002084 <_UG_PutChar+0x52c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 800202c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8002030:	8a3a      	ldrh	r2, [r7, #16]
 8002032:	4798      	blx	r3
               xo++;
 8002034:	8c3b      	ldrh	r3, [r7, #32]
 8002036:	3301      	adds	r3, #1
 8002038:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 800203a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800203c:	3301      	adds	r3, #1
 800203e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002040:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002042:	8a7b      	ldrh	r3, [r7, #18]
 8002044:	429a      	cmp	r2, r3
 8002046:	d3bc      	bcc.n	8001fc2 <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800204e:	461a      	mov	r2, r3
 8002050:	8a7b      	ldrh	r3, [r7, #18]
 8002052:	1ad3      	subs	r3, r2, r3
 8002054:	461a      	mov	r2, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	4413      	add	r3, r2
 800205a:	617b      	str	r3, [r7, #20]
            yo++;
 800205c:	8bfb      	ldrh	r3, [r7, #30]
 800205e:	3301      	adds	r3, #1
 8002060:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8002062:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002064:	3301      	adds	r3, #1
 8002066:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002068:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800206a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002070:	4293      	cmp	r3, r2
 8002072:	dba1      	blt.n	8001fb8 <_UG_PutChar+0x460>
 8002074:	e002      	b.n	800207c <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 8002076:	bf00      	nop
 8002078:	e000      	b.n	800207c <_UG_PutChar+0x524>
   if ( !bn ) return;
 800207a:	bf00      	nop
         }
      }
   }
}
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bdb0      	pop	{r4, r5, r7, pc}
 8002082:	bf00      	nop
 8002084:	20000584 	.word	0x20000584

08002088 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d810      	bhi.n	80020bc <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800209a:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <UG_DriverRegister+0x40>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	79fb      	ldrb	r3, [r7, #7]
 80020a0:	3309      	adds	r3, #9
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4413      	add	r3, r2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80020aa:	4b07      	ldr	r3, [pc, #28]	; (80020c8 <UG_DriverRegister+0x40>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	79fb      	ldrb	r3, [r7, #7]
 80020b0:	3309      	adds	r3, #9
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	2203      	movs	r2, #3
 80020b8:	721a      	strb	r2, [r3, #8]
 80020ba:	e000      	b.n	80020be <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80020bc:	bf00      	nop
}
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	20000584 	.word	0x20000584

080020cc <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 80020d0:	2001      	movs	r0, #1
 80020d2:	f000 fa3e 	bl	8002552 <write_command>
    HAL_Delay(10);
 80020d6:	200a      	movs	r0, #10
 80020d8:	f000 fb24 	bl	8002724 <HAL_Delay>
}
 80020dc:	bf00      	nop
 80020de:	bd80      	pop	{r7, pc}

080020e0 <SSD1963_Init>:

void SSD1963_Init()
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 80020e4:	f7ff fff2 	bl	80020cc <SSD1963_Reset>

    write_command(0xe0);
 80020e8:	20e0      	movs	r0, #224	; 0xe0
 80020ea:	f000 fa32 	bl	8002552 <write_command>
    write_data(0x01);            //Enable PLL
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 fa4a 	bl	8002588 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 80020f4:	20e0      	movs	r0, #224	; 0xe0
 80020f6:	f000 fa2c 	bl	8002552 <write_command>
    write_data(0x03);            //Lock PLL
 80020fa:	2003      	movs	r0, #3
 80020fc:	f000 fa44 	bl	8002588 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8002100:	f7ff ffe4 	bl	80020cc <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8002104:	20b0      	movs	r0, #176	; 0xb0
 8002106:	f000 fa24 	bl	8002552 <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 800210a:	2008      	movs	r0, #8
 800210c:	f000 fa3c 	bl	8002588 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8002110:	2080      	movs	r0, #128	; 0x80
 8002112:	f000 fa39 	bl	8002588 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 8002116:	2001      	movs	r0, #1
 8002118:	f000 fa36 	bl	8002588 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 800211c:	20df      	movs	r0, #223	; 0xdf
 800211e:	f000 fa33 	bl	8002588 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8002122:	2001      	movs	r0, #1
 8002124:	f000 fa30 	bl	8002588 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8002128:	200f      	movs	r0, #15
 800212a:	f000 fa2d 	bl	8002588 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 800212e:	2000      	movs	r0, #0
 8002130:	f000 fa2a 	bl	8002588 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8002134:	20f0      	movs	r0, #240	; 0xf0
 8002136:	f000 fa0c 	bl	8002552 <write_command>
    write_data(0x03);
 800213a:	2003      	movs	r0, #3
 800213c:	f000 fa24 	bl	8002588 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8002140:	20e6      	movs	r0, #230	; 0xe6
 8002142:	f000 fa06 	bl	8002552 <write_command>
    write_data(0x01);    //02
 8002146:	2001      	movs	r0, #1
 8002148:	f000 fa1e 	bl	8002588 <write_data>
    write_data(0x45);    //ff
 800214c:	2045      	movs	r0, #69	; 0x45
 800214e:	f000 fa1b 	bl	8002588 <write_data>
    write_data(0x47);    //ff
 8002152:	2047      	movs	r0, #71	; 0x47
 8002154:	f000 fa18 	bl	8002588 <write_data>

    write_command(0xb4); //set HBP
 8002158:	20b4      	movs	r0, #180	; 0xb4
 800215a:	f000 f9fa 	bl	8002552 <write_command>
    write_data(0x02); //set Hsync = 600
 800215e:	2002      	movs	r0, #2
 8002160:	f000 fa12 	bl	8002588 <write_data>
    write_data(0x0d);
 8002164:	200d      	movs	r0, #13
 8002166:	f000 fa0f 	bl	8002588 <write_data>
    write_data(0x00);    //set HBP 68
 800216a:	2000      	movs	r0, #0
 800216c:	f000 fa0c 	bl	8002588 <write_data>
    write_data(0x2b);
 8002170:	202b      	movs	r0, #43	; 0x2b
 8002172:	f000 fa09 	bl	8002588 <write_data>
    write_data(0x28);    //set VBP 16
 8002176:	2028      	movs	r0, #40	; 0x28
 8002178:	f000 fa06 	bl	8002588 <write_data>
    write_data(0x00);    //Set Hsync start position
 800217c:	2000      	movs	r0, #0
 800217e:	f000 fa03 	bl	8002588 <write_data>
    write_data(0x00);
 8002182:	2000      	movs	r0, #0
 8002184:	f000 fa00 	bl	8002588 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8002188:	2000      	movs	r0, #0
 800218a:	f000 f9fd 	bl	8002588 <write_data>

    write_command(0xb6); //set VBP
 800218e:	20b6      	movs	r0, #182	; 0xb6
 8002190:	f000 f9df 	bl	8002552 <write_command>
    write_data(0x01);    //set Vsync total 360
 8002194:	2001      	movs	r0, #1
 8002196:	f000 f9f7 	bl	8002588 <write_data>
    write_data(0x1d);
 800219a:	201d      	movs	r0, #29
 800219c:	f000 f9f4 	bl	8002588 <write_data>
    write_data(0x00);    //set VBP = 19
 80021a0:	2000      	movs	r0, #0
 80021a2:	f000 f9f1 	bl	8002588 <write_data>
    write_data(0x0c);
 80021a6:	200c      	movs	r0, #12
 80021a8:	f000 f9ee 	bl	8002588 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 80021ac:	2009      	movs	r0, #9
 80021ae:	f000 f9eb 	bl	8002588 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f9e8 	bl	8002588 <write_data>
    write_data(0x00);
 80021b8:	2000      	movs	r0, #0
 80021ba:	f000 f9e5 	bl	8002588 <write_data>

    write_command(0x2a); //set column address
 80021be:	202a      	movs	r0, #42	; 0x2a
 80021c0:	f000 f9c7 	bl	8002552 <write_command>
    write_data(0x00);    //set start column address 0
 80021c4:	2000      	movs	r0, #0
 80021c6:	f000 f9df 	bl	8002588 <write_data>
    write_data(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f000 f9dc 	bl	8002588 <write_data>
    write_data(0x01);    //set end column address = 479
 80021d0:	2001      	movs	r0, #1
 80021d2:	f000 f9d9 	bl	8002588 <write_data>
    write_data(0xdf);
 80021d6:	20df      	movs	r0, #223	; 0xdf
 80021d8:	f000 f9d6 	bl	8002588 <write_data>

    write_command(0x2b); //set page address
 80021dc:	202b      	movs	r0, #43	; 0x2b
 80021de:	f000 f9b8 	bl	8002552 <write_command>
    write_data(0x00);    //set start page address = 0
 80021e2:	2000      	movs	r0, #0
 80021e4:	f000 f9d0 	bl	8002588 <write_data>
    write_data(0x00);
 80021e8:	2000      	movs	r0, #0
 80021ea:	f000 f9cd 	bl	8002588 <write_data>
    write_data(0x01);    //set end column address = 479
 80021ee:	2001      	movs	r0, #1
 80021f0:	f000 f9ca 	bl	8002588 <write_data>
    write_data(0x0f);
 80021f4:	200f      	movs	r0, #15
 80021f6:	f000 f9c7 	bl	8002588 <write_data>

    write_command(0x13); //set normal mode
 80021fa:	2013      	movs	r0, #19
 80021fc:	f000 f9a9 	bl	8002552 <write_command>
    write_command(0x38); //set normal mode
 8002200:	2038      	movs	r0, #56	; 0x38
 8002202:	f000 f9a6 	bl	8002552 <write_command>
    write_command(0x29); //set display on
 8002206:	2029      	movs	r0, #41	; 0x29
 8002208:	f000 f9a3 	bl	8002552 <write_command>
}
 800220c:	bf00      	nop
 800220e:	bd80      	pop	{r7, pc}

08002210 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 800221c:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	0a1b      	lsrs	r3, r3, #8
 8002222:	b29b      	uxth	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	b29b      	uxth	r3, r3
 8002228:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	b29b      	uxth	r3, r3
 800222e:	b2db      	uxtb	r3, r3
 8002230:	b29b      	uxth	r3, r3
 8002232:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	b29b      	uxth	r3, r3
 800223e:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	b29b      	uxth	r3, r3
 8002244:	b2db      	uxtb	r3, r3
 8002246:	b29b      	uxth	r3, r3
 8002248:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 800224a:	202a      	movs	r0, #42	; 0x2a
 800224c:	f000 f981 	bl	8002552 <write_command>
    write_multi_data(data, 4);
 8002250:	f107 0310 	add.w	r3, r7, #16
 8002254:	2104      	movs	r1, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f000 f9b0 	bl	80025bc <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	b29b      	uxth	r3, r3
 8002266:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	b29b      	uxth	r3, r3
 800226c:	b2db      	uxtb	r3, r3
 800226e:	b29b      	uxth	r3, r3
 8002270:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	0a1b      	lsrs	r3, r3, #8
 8002276:	b29b      	uxth	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	b29b      	uxth	r3, r3
 800227c:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	b29b      	uxth	r3, r3
 8002282:	b2db      	uxtb	r3, r3
 8002284:	b29b      	uxth	r3, r3
 8002286:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8002288:	202b      	movs	r0, #43	; 0x2b
 800228a:	f000 f962 	bl	8002552 <write_command>
    write_multi_data(data, 4);
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	2104      	movs	r1, #4
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f991 	bl	80025bc <write_multi_data>
}
 800229a:	bf00      	nop
 800229c:	3718      	adds	r7, #24
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}

080022a2 <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b082      	sub	sp, #8
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	4603      	mov	r3, r0
 80022aa:	80fb      	strh	r3, [r7, #6]
 80022ac:	460b      	mov	r3, r1
 80022ae:	80bb      	strh	r3, [r7, #4]
 80022b0:	4613      	mov	r3, r2
 80022b2:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80022b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db1f      	blt.n	80022fc <SSD1963_PSet+0x5a>
 80022bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022c0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80022c4:	da1a      	bge.n	80022fc <SSD1963_PSet+0x5a>
 80022c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	db16      	blt.n	80022fc <SSD1963_PSet+0x5a>
 80022ce:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022d2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80022d6:	da11      	bge.n	80022fc <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 80022d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80022dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4619      	mov	r1, r3
 80022e4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80022e8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80022ec:	3301      	adds	r3, #1
 80022ee:	f7ff ff8f 	bl	8002210 <SSD1963_WindowSet>
    write_data(c);
 80022f2:	887b      	ldrh	r3, [r7, #2]
 80022f4:	4618      	mov	r0, r3
 80022f6:	f000 f947 	bl	8002588 <write_data>
 80022fa:	e000      	b.n	80022fe <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80022fc:	bf00      	nop
}
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8002308:	202c      	movs	r0, #44	; 0x2c
 800230a:	f000 f922 	bl	8002552 <write_command>
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}

08002312 <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 8002312:	b580      	push	{r7, lr}
 8002314:	b082      	sub	sp, #8
 8002316:	af00      	add	r7, sp, #0
 8002318:	4603      	mov	r3, r0
 800231a:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f932 	bl	8002588 <write_data>
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}

0800232c <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	4604      	mov	r4, r0
 8002334:	4608      	mov	r0, r1
 8002336:	4611      	mov	r1, r2
 8002338:	461a      	mov	r2, r3
 800233a:	4623      	mov	r3, r4
 800233c:	80fb      	strh	r3, [r7, #6]
 800233e:	4603      	mov	r3, r0
 8002340:	80bb      	strh	r3, [r7, #4]
 8002342:	460b      	mov	r3, r1
 8002344:	807b      	strh	r3, [r7, #2]
 8002346:	4613      	mov	r3, r2
 8002348:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800234a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800234e:	2b00      	cmp	r3, #0
 8002350:	db0d      	blt.n	800236e <HW_FillFrame+0x42>
 8002352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002356:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800235a:	da08      	bge.n	800236e <HW_FillFrame+0x42>
 800235c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	db04      	blt.n	800236e <HW_FillFrame+0x42>
 8002364:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002368:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800236c:	db02      	blt.n	8002374 <HW_FillFrame+0x48>
 800236e:	f04f 33ff 	mov.w	r3, #4294967295
 8002372:	e03c      	b.n	80023ee <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002374:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002378:	2b00      	cmp	r3, #0
 800237a:	db0d      	blt.n	8002398 <HW_FillFrame+0x6c>
 800237c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002380:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002384:	da08      	bge.n	8002398 <HW_FillFrame+0x6c>
 8002386:	f9b7 3000 	ldrsh.w	r3, [r7]
 800238a:	2b00      	cmp	r3, #0
 800238c:	db04      	blt.n	8002398 <HW_FillFrame+0x6c>
 800238e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002392:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002396:	db02      	blt.n	800239e <HW_FillFrame+0x72>
 8002398:	f04f 33ff 	mov.w	r3, #4294967295
 800239c:	e027      	b.n	80023ee <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 800239e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80023a2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80023a6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80023aa:	f9b7 3000 	ldrsh.w	r3, [r7]
 80023ae:	f7ff ff2f 	bl	8002210 <SSD1963_WindowSet>

    write_command(0x2c);
 80023b2:	202c      	movs	r0, #44	; 0x2c
 80023b4:	f000 f8cd 	bl	8002552 <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	81fb      	strh	r3, [r7, #14]
 80023bc:	e011      	b.n	80023e2 <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80023be:	88bb      	ldrh	r3, [r7, #4]
 80023c0:	81bb      	strh	r3, [r7, #12]
 80023c2:	e006      	b.n	80023d2 <HW_FillFrame+0xa6>
        {
            write_data(c);
 80023c4:	8c3b      	ldrh	r3, [r7, #32]
 80023c6:	4618      	mov	r0, r3
 80023c8:	f000 f8de 	bl	8002588 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80023cc:	89bb      	ldrh	r3, [r7, #12]
 80023ce:	3301      	adds	r3, #1
 80023d0:	81bb      	strh	r3, [r7, #12]
 80023d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80023d6:	89bb      	ldrh	r3, [r7, #12]
 80023d8:	429a      	cmp	r2, r3
 80023da:	daf3      	bge.n	80023c4 <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 80023dc:	89fb      	ldrh	r3, [r7, #14]
 80023de:	3301      	adds	r3, #1
 80023e0:	81fb      	strh	r3, [r7, #14]
 80023e2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dae8      	bge.n	80023be <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3714      	adds	r7, #20
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd90      	pop	{r4, r7, pc}

080023f6 <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 80023f6:	b590      	push	{r4, r7, lr}
 80023f8:	b085      	sub	sp, #20
 80023fa:	af02      	add	r7, sp, #8
 80023fc:	4604      	mov	r4, r0
 80023fe:	4608      	mov	r0, r1
 8002400:	4611      	mov	r1, r2
 8002402:	461a      	mov	r2, r3
 8002404:	4623      	mov	r3, r4
 8002406:	80fb      	strh	r3, [r7, #6]
 8002408:	4603      	mov	r3, r0
 800240a:	80bb      	strh	r3, [r7, #4]
 800240c:	460b      	mov	r3, r1
 800240e:	807b      	strh	r3, [r7, #2]
 8002410:	4613      	mov	r3, r2
 8002412:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	db0d      	blt.n	8002438 <HW_DrawLine+0x42>
 800241c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002420:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002424:	da08      	bge.n	8002438 <HW_DrawLine+0x42>
 8002426:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800242a:	2b00      	cmp	r3, #0
 800242c:	db04      	blt.n	8002438 <HW_DrawLine+0x42>
 800242e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002432:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002436:	db02      	blt.n	800243e <HW_DrawLine+0x48>
 8002438:	f04f 33ff 	mov.w	r3, #4294967295
 800243c:	e031      	b.n	80024a2 <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800243e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002442:	2b00      	cmp	r3, #0
 8002444:	db0d      	blt.n	8002462 <HW_DrawLine+0x6c>
 8002446:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800244a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800244e:	da08      	bge.n	8002462 <HW_DrawLine+0x6c>
 8002450:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002454:	2b00      	cmp	r3, #0
 8002456:	db04      	blt.n	8002462 <HW_DrawLine+0x6c>
 8002458:	f9b7 3000 	ldrsh.w	r3, [r7]
 800245c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002460:	db02      	blt.n	8002468 <HW_DrawLine+0x72>
 8002462:	f04f 33ff 	mov.w	r3, #4294967295
 8002466:	e01c      	b.n	80024a2 <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8002468:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800246c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002470:	429a      	cmp	r2, r3
 8002472:	d005      	beq.n	8002480 <HW_DrawLine+0x8a>
 8002474:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002478:	f9b7 3000 	ldrsh.w	r3, [r7]
 800247c:	429a      	cmp	r2, r3
 800247e:	d10e      	bne.n	800249e <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8002480:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002484:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002488:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800248c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002490:	8b3b      	ldrh	r3, [r7, #24]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	4623      	mov	r3, r4
 8002496:	f7ff ff49 	bl	800232c <HW_FillFrame>
        return UG_RESULT_OK;
 800249a:	2300      	movs	r3, #0
 800249c:	e001      	b.n	80024a2 <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 800249e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	370c      	adds	r7, #12
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}

080024aa <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	4604      	mov	r4, r0
 80024b2:	4608      	mov	r0, r1
 80024b4:	4611      	mov	r1, r2
 80024b6:	461a      	mov	r2, r3
 80024b8:	4623      	mov	r3, r4
 80024ba:	80fb      	strh	r3, [r7, #6]
 80024bc:	4603      	mov	r3, r0
 80024be:	80bb      	strh	r3, [r7, #4]
 80024c0:	460b      	mov	r3, r1
 80024c2:	807b      	strh	r3, [r7, #2]
 80024c4:	4613      	mov	r3, r2
 80024c6:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80024c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	db0d      	blt.n	80024ec <HW_DrawImage+0x42>
 80024d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024d4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80024d8:	da08      	bge.n	80024ec <HW_DrawImage+0x42>
 80024da:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db04      	blt.n	80024ec <HW_DrawImage+0x42>
 80024e2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024e6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80024ea:	db02      	blt.n	80024f2 <HW_DrawImage+0x48>
 80024ec:	f04f 33ff 	mov.w	r3, #4294967295
 80024f0:	e02b      	b.n	800254a <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80024f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0d      	blt.n	8002516 <HW_DrawImage+0x6c>
 80024fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80024fe:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002502:	da08      	bge.n	8002516 <HW_DrawImage+0x6c>
 8002504:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db04      	blt.n	8002516 <HW_DrawImage+0x6c>
 800250c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002510:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002514:	db02      	blt.n	800251c <HW_DrawImage+0x72>
 8002516:	f04f 33ff 	mov.w	r3, #4294967295
 800251a:	e016      	b.n	800254a <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 800251c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002520:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002524:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002528:	f9b7 3000 	ldrsh.w	r3, [r7]
 800252c:	f7ff fe70 	bl	8002210 <SSD1963_WindowSet>

    write_command(0x2c);
 8002530:	202c      	movs	r0, #44	; 0x2c
 8002532:	f000 f80e 	bl	8002552 <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 8002536:	8bbb      	ldrh	r3, [r7, #28]
 8002538:	461a      	mov	r2, r3
 800253a:	0052      	lsls	r2, r2, #1
 800253c:	4413      	add	r3, r2
 800253e:	b29b      	uxth	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	69b8      	ldr	r0, [r7, #24]
 8002544:	f000 f83a 	bl	80025bc <write_multi_data>

    return UG_RESULT_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bd90      	pop	{r4, r7, pc}

08002552 <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	4603      	mov	r3, r0
 800255a:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 800255c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002560:	79fa      	ldrb	r2, [r7, #7]
 8002562:	b292      	uxth	r2, r2
 8002564:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002566:	2300      	movs	r3, #0
 8002568:	81fb      	strh	r3, [r7, #14]
 800256a:	e002      	b.n	8002572 <write_command+0x20>
 800256c:	89fb      	ldrh	r3, [r7, #14]
 800256e:	3301      	adds	r3, #1
 8002570:	81fb      	strh	r3, [r7, #14]
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	2b0b      	cmp	r3, #11
 8002576:	d9f9      	bls.n	800256c <write_command+0x1a>
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <write_data>:


void write_data(DATA_t data)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <write_data+0x30>)
 8002594:	88fb      	ldrh	r3, [r7, #6]
 8002596:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002598:	2300      	movs	r3, #0
 800259a:	81fb      	strh	r3, [r7, #14]
 800259c:	e002      	b.n	80025a4 <write_data+0x1c>
 800259e:	89fb      	ldrh	r3, [r7, #14]
 80025a0:	3301      	adds	r3, #1
 80025a2:	81fb      	strh	r3, [r7, #14]
 80025a4:	89fb      	ldrh	r3, [r7, #14]
 80025a6:	2b0b      	cmp	r3, #11
 80025a8:	d9f9      	bls.n	800259e <write_data+0x16>
 }
 80025aa:	bf00      	nop
 80025ac:	bf00      	nop
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	60000100 	.word	0x60000100

080025bc <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	460b      	mov	r3, r1
 80025c6:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 80025c8:	2300      	movs	r3, #0
 80025ca:	81fb      	strh	r3, [r7, #14]
 80025cc:	e016      	b.n	80025fc <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 80025ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <write_multi_data+0x58>)
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80025de:	2300      	movs	r3, #0
 80025e0:	81bb      	strh	r3, [r7, #12]
 80025e2:	e002      	b.n	80025ea <write_multi_data+0x2e>
 80025e4:	89bb      	ldrh	r3, [r7, #12]
 80025e6:	3301      	adds	r3, #1
 80025e8:	81bb      	strh	r3, [r7, #12]
 80025ea:	89bb      	ldrh	r3, [r7, #12]
 80025ec:	2b0b      	cmp	r3, #11
 80025ee:	d9f9      	bls.n	80025e4 <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 80025f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	3301      	adds	r3, #1
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	81fb      	strh	r3, [r7, #14]
 80025fc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002600:	887b      	ldrh	r3, [r7, #2]
 8002602:	429a      	cmp	r2, r3
 8002604:	dbe3      	blt.n	80025ce <write_multi_data+0x12>
    }
}
 8002606:	bf00      	nop
 8002608:	bf00      	nop
 800260a:	3714      	adds	r7, #20
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	60000100 	.word	0x60000100

08002618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800261c:	480d      	ldr	r0, [pc, #52]	; (8002654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800261e:	490e      	ldr	r1, [pc, #56]	; (8002658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002620:	4a0e      	ldr	r2, [pc, #56]	; (800265c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002624:	e002      	b.n	800262c <LoopCopyDataInit>

08002626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800262a:	3304      	adds	r3, #4

0800262c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800262c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800262e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002630:	d3f9      	bcc.n	8002626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002632:	4a0b      	ldr	r2, [pc, #44]	; (8002660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002634:	4c0b      	ldr	r4, [pc, #44]	; (8002664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002638:	e001      	b.n	800263e <LoopFillZerobss>

0800263a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800263a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800263c:	3204      	adds	r2, #4

0800263e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800263e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002640:	d3fb      	bcc.n	800263a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002642:	f7fe ffbf 	bl	80015c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002646:	f009 ffc9 	bl	800c5dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800264a:	f7fd ffb1 	bl	80005b0 <main>
  bx  lr    
 800264e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002650:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002658:	2000015c 	.word	0x2000015c
  ldr r2, =_sidata
 800265c:	08019b84 	.word	0x08019b84
  ldr r2, =_sbss
 8002660:	2000015c 	.word	0x2000015c
  ldr r4, =_ebss
 8002664:	200020bc 	.word	0x200020bc

08002668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002668:	e7fe      	b.n	8002668 <ADC_IRQHandler>

0800266a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800266e:	2003      	movs	r0, #3
 8002670:	f000 fcdc 	bl	800302c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002674:	200f      	movs	r0, #15
 8002676:	f000 f805 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800267a:	f7fe fbf9 	bl	8000e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	bd80      	pop	{r7, pc}

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fcf7 	bl	8003096 <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 fcbf 	bl	8003042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000000 	.word	0x20000000
 80026dc:	20000008 	.word	0x20000008
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008
 8002708:	20000588 	.word	0x20000588

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000588 	.word	0x20000588

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff ffee 	bl	800270c <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffde 	bl	800270c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000008 	.word	0x20000008

0800276c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e031      	b.n	80027e6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d109      	bne.n	800279e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7fe fb94 	bl	8000eb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a2:	f003 0310 	and.w	r3, r3, #16
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d116      	bne.n	80027d8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <HAL_ADC_Init+0x84>)
 80027b0:	4013      	ands	r3, r2
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f970 	bl	8002aa0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	; 0x40
 80027d6:	e001      	b.n	80027dc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	ffffeefd 	.word	0xffffeefd

080027f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002808:	2b01      	cmp	r3, #1
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x1c>
 800280c:	2302      	movs	r3, #2
 800280e:	e136      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x28a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2b09      	cmp	r3, #9
 800281e:	d93a      	bls.n	8002896 <HAL_ADC_ConfigChannel+0xa2>
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002828:	d035      	beq.n	8002896 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68d9      	ldr	r1, [r3, #12]
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	b29b      	uxth	r3, r3
 8002836:	461a      	mov	r2, r3
 8002838:	4613      	mov	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	4413      	add	r3, r2
 800283e:	3b1e      	subs	r3, #30
 8002840:	2207      	movs	r2, #7
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a8d      	ldr	r2, [pc, #564]	; (8002a8c <HAL_ADC_ConfigChannel+0x298>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10a      	bne.n	8002870 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	68d9      	ldr	r1, [r3, #12]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	061a      	lsls	r2, r3, #24
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	430a      	orrs	r2, r1
 800286c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800286e:	e035      	b.n	80028dc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68d9      	ldr	r1, [r3, #12]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	b29b      	uxth	r3, r3
 8002880:	4618      	mov	r0, r3
 8002882:	4603      	mov	r3, r0
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4403      	add	r3, r0
 8002888:	3b1e      	subs	r3, #30
 800288a:	409a      	lsls	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002894:	e022      	b.n	80028dc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6919      	ldr	r1, [r3, #16]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	461a      	mov	r2, r3
 80028a4:	4613      	mov	r3, r2
 80028a6:	005b      	lsls	r3, r3, #1
 80028a8:	4413      	add	r3, r2
 80028aa:	2207      	movs	r2, #7
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43da      	mvns	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	400a      	ands	r2, r1
 80028b8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	6919      	ldr	r1, [r3, #16]
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689a      	ldr	r2, [r3, #8]
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	4603      	mov	r3, r0
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	4403      	add	r3, r0
 80028d2:	409a      	lsls	r2, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b06      	cmp	r3, #6
 80028e2:	d824      	bhi.n	800292e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	009b      	lsls	r3, r3, #2
 80028f2:	4413      	add	r3, r2
 80028f4:	3b05      	subs	r3, #5
 80028f6:	221f      	movs	r2, #31
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	43da      	mvns	r2, r3
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	400a      	ands	r2, r1
 8002904:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	4618      	mov	r0, r3
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685a      	ldr	r2, [r3, #4]
 8002918:	4613      	mov	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	4413      	add	r3, r2
 800291e:	3b05      	subs	r3, #5
 8002920:	fa00 f203 	lsl.w	r2, r0, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	635a      	str	r2, [r3, #52]	; 0x34
 800292c:	e04c      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d824      	bhi.n	8002980 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	3b23      	subs	r3, #35	; 0x23
 8002948:	221f      	movs	r2, #31
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	400a      	ands	r2, r1
 8002956:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	3b23      	subs	r3, #35	; 0x23
 8002972:	fa00 f203 	lsl.w	r2, r0, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	430a      	orrs	r2, r1
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
 800297e:	e023      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	4413      	add	r3, r2
 8002990:	3b41      	subs	r3, #65	; 0x41
 8002992:	221f      	movs	r2, #31
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43da      	mvns	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	400a      	ands	r2, r1
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	b29b      	uxth	r3, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	4613      	mov	r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4413      	add	r3, r2
 80029ba:	3b41      	subs	r3, #65	; 0x41
 80029bc:	fa00 f203 	lsl.w	r2, r0, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a30      	ldr	r2, [pc, #192]	; (8002a90 <HAL_ADC_ConfigChannel+0x29c>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d10a      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1f4>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80029da:	d105      	bne.n	80029e8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80029dc:	4b2d      	ldr	r3, [pc, #180]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 80029e2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80029e6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a28      	ldr	r2, [pc, #160]	; (8002a90 <HAL_ADC_ConfigChannel+0x29c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10f      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x21e>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	2b12      	cmp	r3, #18
 80029f8:	d10b      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80029fa:	4b26      	ldr	r3, [pc, #152]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	4a25      	ldr	r2, [pc, #148]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a00:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a04:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	4a22      	ldr	r2, [pc, #136]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a10:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a1e      	ldr	r2, [pc, #120]	; (8002a90 <HAL_ADC_ConfigChannel+0x29c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d12b      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x280>
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1a      	ldr	r2, [pc, #104]	; (8002a8c <HAL_ADC_ConfigChannel+0x298>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <HAL_ADC_ConfigChannel+0x23a>
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2b11      	cmp	r3, #17
 8002a2c:	d122      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002a2e:	4b19      	ldr	r3, [pc, #100]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a34:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002a38:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002a3a:	4b16      	ldr	r3, [pc, #88]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	4a15      	ldr	r2, [pc, #84]	; (8002a94 <HAL_ADC_ConfigChannel+0x2a0>)
 8002a40:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a44:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a10      	ldr	r2, [pc, #64]	; (8002a8c <HAL_ADC_ConfigChannel+0x298>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002a50:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_ADC_ConfigChannel+0x2a4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a11      	ldr	r2, [pc, #68]	; (8002a9c <HAL_ADC_ConfigChannel+0x2a8>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	0c9a      	lsrs	r2, r3, #18
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4413      	add	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a66:	e002      	b.n	8002a6e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f9      	bne.n	8002a68 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a7c:	2300      	movs	r3, #0
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3714      	adds	r7, #20
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	10000012 	.word	0x10000012
 8002a90:	40012000 	.word	0x40012000
 8002a94:	40012300 	.word	0x40012300
 8002a98:	20000000 	.word	0x20000000
 8002a9c:	431bde83 	.word	0x431bde83

08002aa0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002aa8:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <ADC_Init+0x1ec>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	4a77      	ldr	r2, [pc, #476]	; (8002c8c <ADC_Init+0x1ec>)
 8002aae:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002ab2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002ab4:	4b75      	ldr	r3, [pc, #468]	; (8002c8c <ADC_Init+0x1ec>)
 8002ab6:	685a      	ldr	r2, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	4973      	ldr	r1, [pc, #460]	; (8002c8c <ADC_Init+0x1ec>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ad0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6859      	ldr	r1, [r3, #4]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	021a      	lsls	r2, r3, #8
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685a      	ldr	r2, [r3, #4]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002af4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	6859      	ldr	r1, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689a      	ldr	r2, [r3, #8]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	430a      	orrs	r2, r1
 8002b06:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689a      	ldr	r2, [r3, #8]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	6899      	ldr	r1, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68da      	ldr	r2, [r3, #12]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	4a58      	ldr	r2, [pc, #352]	; (8002c90 <ADC_Init+0x1f0>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b42:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6899      	ldr	r1, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b64:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	6899      	ldr	r1, [r3, #8]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	430a      	orrs	r2, r1
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	e00f      	b.n	8002b9a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b88:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689a      	ldr	r2, [r3, #8]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b98:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0202 	bic.w	r2, r2, #2
 8002ba8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6899      	ldr	r1, [r3, #8]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	005a      	lsls	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	430a      	orrs	r2, r1
 8002bbc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bd6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002be6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	035a      	lsls	r2, r3, #13
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	605a      	str	r2, [r3, #4]
 8002bfe:	e007      	b.n	8002c10 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	685a      	ldr	r2, [r3, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c0e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	051a      	lsls	r2, r3, #20
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c44:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6899      	ldr	r1, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c52:	025a      	lsls	r2, r3, #9
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c6a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6899      	ldr	r1, [r3, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	029a      	lsls	r2, r3, #10
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	430a      	orrs	r2, r1
 8002c7e:	609a      	str	r2, [r3, #8]
}
 8002c80:	bf00      	nop
 8002c82:	370c      	adds	r7, #12
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40012300 	.word	0x40012300
 8002c90:	0f000001 	.word	0x0f000001

08002c94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e0ed      	b.n	8002e82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d102      	bne.n	8002cb8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f7fe f96e 	bl	8000f94 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0201 	orr.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cc8:	f7ff fd20 	bl	800270c <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cce:	e012      	b.n	8002cf6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cd0:	f7ff fd1c 	bl	800270c <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	2b0a      	cmp	r3, #10
 8002cdc:	d90b      	bls.n	8002cf6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2205      	movs	r2, #5
 8002cee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0c5      	b.n	8002e82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d0e5      	beq.n	8002cd0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0202 	bic.w	r2, r2, #2
 8002d12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d14:	f7ff fcfa 	bl	800270c <HAL_GetTick>
 8002d18:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d1a:	e012      	b.n	8002d42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002d1c:	f7ff fcf6 	bl	800270c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b0a      	cmp	r3, #10
 8002d28:	d90b      	bls.n	8002d42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2205      	movs	r2, #5
 8002d3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e09f      	b.n	8002e82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1e5      	bne.n	8002d1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	7e1b      	ldrb	r3, [r3, #24]
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d108      	bne.n	8002d6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	e007      	b.n	8002d7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	7e5b      	ldrb	r3, [r3, #25]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d108      	bne.n	8002d94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	e007      	b.n	8002da4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681a      	ldr	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7e9b      	ldrb	r3, [r3, #26]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d108      	bne.n	8002dbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f042 0220 	orr.w	r2, r2, #32
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e007      	b.n	8002dce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0220 	bic.w	r2, r2, #32
 8002dcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	7edb      	ldrb	r3, [r3, #27]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d108      	bne.n	8002de8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0210 	bic.w	r2, r2, #16
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	e007      	b.n	8002df8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f042 0210 	orr.w	r2, r2, #16
 8002df6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7f1b      	ldrb	r3, [r3, #28]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d108      	bne.n	8002e12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	e007      	b.n	8002e22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0208 	bic.w	r2, r2, #8
 8002e20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	7f5b      	ldrb	r3, [r3, #29]
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d108      	bne.n	8002e3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f042 0204 	orr.w	r2, r2, #4
 8002e38:	601a      	str	r2, [r3, #0]
 8002e3a:	e007      	b.n	8002e4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0204 	bic.w	r2, r2, #4
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689a      	ldr	r2, [r3, #8]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	ea42 0103 	orr.w	r1, r2, r3
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	430a      	orrs	r2, r1
 8002e70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2200      	movs	r2, #0
 8002e76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3710      	adds	r7, #16
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <__NVIC_SetPriorityGrouping+0x40>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00
 8002ed0:	05fa0000 	.word	0x05fa0000

08002ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed8:	4b04      	ldr	r3, [pc, #16]	; (8002eec <__NVIC_GetPriorityGrouping+0x18>)
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	0a1b      	lsrs	r3, r3, #8
 8002ede:	f003 0307 	and.w	r3, r3, #7
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000ed00 	.word	0xe000ed00

08002ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	db0b      	blt.n	8002f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f02:	79fb      	ldrb	r3, [r7, #7]
 8002f04:	f003 021f 	and.w	r2, r3, #31
 8002f08:	4907      	ldr	r1, [pc, #28]	; (8002f28 <__NVIC_EnableIRQ+0x38>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	2001      	movs	r0, #1
 8002f12:	fa00 f202 	lsl.w	r2, r0, r2
 8002f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f1a:	bf00      	nop
 8002f1c:	370c      	adds	r7, #12
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	e000e100 	.word	0xe000e100

08002f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b083      	sub	sp, #12
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	4603      	mov	r3, r0
 8002f34:	6039      	str	r1, [r7, #0]
 8002f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	db0a      	blt.n	8002f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	490c      	ldr	r1, [pc, #48]	; (8002f78 <__NVIC_SetPriority+0x4c>)
 8002f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f4a:	0112      	lsls	r2, r2, #4
 8002f4c:	b2d2      	uxtb	r2, r2
 8002f4e:	440b      	add	r3, r1
 8002f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f54:	e00a      	b.n	8002f6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4908      	ldr	r1, [pc, #32]	; (8002f7c <__NVIC_SetPriority+0x50>)
 8002f5c:	79fb      	ldrb	r3, [r7, #7]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	3b04      	subs	r3, #4
 8002f64:	0112      	lsls	r2, r2, #4
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	440b      	add	r3, r1
 8002f6a:	761a      	strb	r2, [r3, #24]
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	e000e100 	.word	0xe000e100
 8002f7c:	e000ed00 	.word	0xe000ed00

08002f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b089      	sub	sp, #36	; 0x24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	60f8      	str	r0, [r7, #12]
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	f1c3 0307 	rsb	r3, r3, #7
 8002f9a:	2b04      	cmp	r3, #4
 8002f9c:	bf28      	it	cs
 8002f9e:	2304      	movcs	r3, #4
 8002fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	3304      	adds	r3, #4
 8002fa6:	2b06      	cmp	r3, #6
 8002fa8:	d902      	bls.n	8002fb0 <NVIC_EncodePriority+0x30>
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	3b03      	subs	r3, #3
 8002fae:	e000      	b.n	8002fb2 <NVIC_EncodePriority+0x32>
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43da      	mvns	r2, r3
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	401a      	ands	r2, r3
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	43d9      	mvns	r1, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd8:	4313      	orrs	r3, r2
         );
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3724      	adds	r7, #36	; 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b082      	sub	sp, #8
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ff8:	d301      	bcc.n	8002ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e00f      	b.n	800301e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	; (8003028 <SysTick_Config+0x40>)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3b01      	subs	r3, #1
 8003004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003006:	210f      	movs	r1, #15
 8003008:	f04f 30ff 	mov.w	r0, #4294967295
 800300c:	f7ff ff8e 	bl	8002f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003010:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SysTick_Config+0x40>)
 8003012:	2200      	movs	r2, #0
 8003014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003016:	4b04      	ldr	r3, [pc, #16]	; (8003028 <SysTick_Config+0x40>)
 8003018:	2207      	movs	r2, #7
 800301a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3708      	adds	r7, #8
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	e000e010 	.word	0xe000e010

0800302c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff ff29 	bl	8002e8c <__NVIC_SetPriorityGrouping>
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003042:	b580      	push	{r7, lr}
 8003044:	b086      	sub	sp, #24
 8003046:	af00      	add	r7, sp, #0
 8003048:	4603      	mov	r3, r0
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003050:	2300      	movs	r3, #0
 8003052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003054:	f7ff ff3e 	bl	8002ed4 <__NVIC_GetPriorityGrouping>
 8003058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800305a:	687a      	ldr	r2, [r7, #4]
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	6978      	ldr	r0, [r7, #20]
 8003060:	f7ff ff8e 	bl	8002f80 <NVIC_EncodePriority>
 8003064:	4602      	mov	r2, r0
 8003066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800306a:	4611      	mov	r1, r2
 800306c:	4618      	mov	r0, r3
 800306e:	f7ff ff5d 	bl	8002f2c <__NVIC_SetPriority>
}
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800307a:	b580      	push	{r7, lr}
 800307c:	b082      	sub	sp, #8
 800307e:	af00      	add	r7, sp, #0
 8003080:	4603      	mov	r3, r0
 8003082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003088:	4618      	mov	r0, r3
 800308a:	f7ff ff31 	bl	8002ef0 <__NVIC_EnableIRQ>
}
 800308e:	bf00      	nop
 8003090:	3708      	adds	r7, #8
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}

08003096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f7ff ffa2 	bl	8002fe8 <SysTick_Config>
 80030a4:	4603      	mov	r3, r0
}
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}
	...

080030b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b089      	sub	sp, #36	; 0x24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80030ba:	2300      	movs	r3, #0
 80030bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80030c2:	2300      	movs	r3, #0
 80030c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	e175      	b.n	80033bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80030d0:	2201      	movs	r2, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80030e4:	693a      	ldr	r2, [r7, #16]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	f040 8164 	bne.w	80033b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f003 0303 	and.w	r3, r3, #3
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d005      	beq.n	8003106 <HAL_GPIO_Init+0x56>
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d130      	bne.n	8003168 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	2203      	movs	r2, #3
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	69ba      	ldr	r2, [r7, #24]
 800311a:	4013      	ands	r3, r2
 800311c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	005b      	lsls	r3, r3, #1
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800313c:	2201      	movs	r2, #1
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa02 f303 	lsl.w	r3, r2, r3
 8003144:	43db      	mvns	r3, r3
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4013      	ands	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	091b      	lsrs	r3, r3, #4
 8003152:	f003 0201 	and.w	r2, r3, #1
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f003 0303 	and.w	r3, r3, #3
 8003170:	2b03      	cmp	r3, #3
 8003172:	d017      	beq.n	80031a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d123      	bne.n	80031f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	08da      	lsrs	r2, r3, #3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3208      	adds	r2, #8
 80031b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	f003 0307 	and.w	r3, r3, #7
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	220f      	movs	r2, #15
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	43db      	mvns	r3, r3
 80031ce:	69ba      	ldr	r2, [r7, #24]
 80031d0:	4013      	ands	r3, r2
 80031d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	691a      	ldr	r2, [r3, #16]
 80031d8:	69fb      	ldr	r3, [r7, #28]
 80031da:	f003 0307 	and.w	r3, r3, #7
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	fa02 f303 	lsl.w	r3, r2, r3
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	08da      	lsrs	r2, r3, #3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	3208      	adds	r2, #8
 80031f2:	69b9      	ldr	r1, [r7, #24]
 80031f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	2203      	movs	r2, #3
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0203 	and.w	r2, r3, #3
 8003218:	69fb      	ldr	r3, [r7, #28]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80be 	beq.w	80033b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_GPIO_Init+0x324>)
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	4a65      	ldr	r2, [pc, #404]	; (80033d4 <HAL_GPIO_Init+0x324>)
 8003240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003244:	6453      	str	r3, [r2, #68]	; 0x44
 8003246:	4b63      	ldr	r3, [pc, #396]	; (80033d4 <HAL_GPIO_Init+0x324>)
 8003248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800324a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324e:	60fb      	str	r3, [r7, #12]
 8003250:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003252:	4a61      	ldr	r2, [pc, #388]	; (80033d8 <HAL_GPIO_Init+0x328>)
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	089b      	lsrs	r3, r3, #2
 8003258:	3302      	adds	r3, #2
 800325a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	220f      	movs	r2, #15
 800326a:	fa02 f303 	lsl.w	r3, r2, r3
 800326e:	43db      	mvns	r3, r3
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	4013      	ands	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a58      	ldr	r2, [pc, #352]	; (80033dc <HAL_GPIO_Init+0x32c>)
 800327a:	4293      	cmp	r3, r2
 800327c:	d037      	beq.n	80032ee <HAL_GPIO_Init+0x23e>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	4a57      	ldr	r2, [pc, #348]	; (80033e0 <HAL_GPIO_Init+0x330>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d031      	beq.n	80032ea <HAL_GPIO_Init+0x23a>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	4a56      	ldr	r2, [pc, #344]	; (80033e4 <HAL_GPIO_Init+0x334>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d02b      	beq.n	80032e6 <HAL_GPIO_Init+0x236>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	4a55      	ldr	r2, [pc, #340]	; (80033e8 <HAL_GPIO_Init+0x338>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d025      	beq.n	80032e2 <HAL_GPIO_Init+0x232>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a54      	ldr	r2, [pc, #336]	; (80033ec <HAL_GPIO_Init+0x33c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01f      	beq.n	80032de <HAL_GPIO_Init+0x22e>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	4a53      	ldr	r2, [pc, #332]	; (80033f0 <HAL_GPIO_Init+0x340>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d019      	beq.n	80032da <HAL_GPIO_Init+0x22a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a52      	ldr	r2, [pc, #328]	; (80033f4 <HAL_GPIO_Init+0x344>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d013      	beq.n	80032d6 <HAL_GPIO_Init+0x226>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a51      	ldr	r2, [pc, #324]	; (80033f8 <HAL_GPIO_Init+0x348>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d00d      	beq.n	80032d2 <HAL_GPIO_Init+0x222>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a50      	ldr	r2, [pc, #320]	; (80033fc <HAL_GPIO_Init+0x34c>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <HAL_GPIO_Init+0x21e>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a4f      	ldr	r2, [pc, #316]	; (8003400 <HAL_GPIO_Init+0x350>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d101      	bne.n	80032ca <HAL_GPIO_Init+0x21a>
 80032c6:	2309      	movs	r3, #9
 80032c8:	e012      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032ca:	230a      	movs	r3, #10
 80032cc:	e010      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032ce:	2308      	movs	r3, #8
 80032d0:	e00e      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032d2:	2307      	movs	r3, #7
 80032d4:	e00c      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032d6:	2306      	movs	r3, #6
 80032d8:	e00a      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032da:	2305      	movs	r3, #5
 80032dc:	e008      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032de:	2304      	movs	r3, #4
 80032e0:	e006      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032e2:	2303      	movs	r3, #3
 80032e4:	e004      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e002      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <HAL_GPIO_Init+0x240>
 80032ee:	2300      	movs	r3, #0
 80032f0:	69fa      	ldr	r2, [r7, #28]
 80032f2:	f002 0203 	and.w	r2, r2, #3
 80032f6:	0092      	lsls	r2, r2, #2
 80032f8:	4093      	lsls	r3, r2
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003300:	4935      	ldr	r1, [pc, #212]	; (80033d8 <HAL_GPIO_Init+0x328>)
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	089b      	lsrs	r3, r3, #2
 8003306:	3302      	adds	r3, #2
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330e:	4b3d      	ldr	r3, [pc, #244]	; (8003404 <HAL_GPIO_Init+0x354>)
 8003310:	689b      	ldr	r3, [r3, #8]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	43db      	mvns	r3, r3
 8003318:	69ba      	ldr	r2, [r7, #24]
 800331a:	4013      	ands	r3, r2
 800331c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003332:	4a34      	ldr	r2, [pc, #208]	; (8003404 <HAL_GPIO_Init+0x354>)
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <HAL_GPIO_Init+0x354>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333e:	693b      	ldr	r3, [r7, #16]
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4313      	orrs	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800335c:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_GPIO_Init+0x354>)
 800335e:	69bb      	ldr	r3, [r7, #24]
 8003360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003362:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_GPIO_Init+0x354>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	43db      	mvns	r3, r3
 800336c:	69ba      	ldr	r2, [r7, #24]
 800336e:	4013      	ands	r3, r2
 8003370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4313      	orrs	r3, r2
 8003384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003386:	4a1f      	ldr	r2, [pc, #124]	; (8003404 <HAL_GPIO_Init+0x354>)
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_GPIO_Init+0x354>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4313      	orrs	r3, r2
 80033ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b0:	4a14      	ldr	r2, [pc, #80]	; (8003404 <HAL_GPIO_Init+0x354>)
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	3301      	adds	r3, #1
 80033ba:	61fb      	str	r3, [r7, #28]
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2b0f      	cmp	r3, #15
 80033c0:	f67f ae86 	bls.w	80030d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80033c4:	bf00      	nop
 80033c6:	bf00      	nop
 80033c8:	3724      	adds	r7, #36	; 0x24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40013800 	.word	0x40013800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	40020400 	.word	0x40020400
 80033e4:	40020800 	.word	0x40020800
 80033e8:	40020c00 	.word	0x40020c00
 80033ec:	40021000 	.word	0x40021000
 80033f0:	40021400 	.word	0x40021400
 80033f4:	40021800 	.word	0x40021800
 80033f8:	40021c00 	.word	0x40021c00
 80033fc:	40022000 	.word	0x40022000
 8003400:	40022400 	.word	0x40022400
 8003404:	40013c00 	.word	0x40013c00

08003408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	807b      	strh	r3, [r7, #2]
 8003414:	4613      	mov	r3, r2
 8003416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003418:	787b      	ldrb	r3, [r7, #1]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d003      	beq.n	8003426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800341e:	887a      	ldrh	r2, [r7, #2]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003424:	e003      	b.n	800342e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003426:	887b      	ldrh	r3, [r7, #2]
 8003428:	041a      	lsls	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	619a      	str	r2, [r3, #24]
}
 800342e:	bf00      	nop
 8003430:	370c      	adds	r7, #12
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800343a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800343c:	b08f      	sub	sp, #60	; 0x3c
 800343e:	af0a      	add	r7, sp, #40	; 0x28
 8003440:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e116      	b.n	800367a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003458:	b2db      	uxtb	r3, r3
 800345a:	2b00      	cmp	r3, #0
 800345c:	d106      	bne.n	800346c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f008 fc74 	bl	800bd54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2203      	movs	r2, #3
 8003470:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800347c:	2b00      	cmp	r3, #0
 800347e:	d102      	bne.n	8003486 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4618      	mov	r0, r3
 800348c:	f004 ff83 	bl	8008396 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	603b      	str	r3, [r7, #0]
 8003496:	687e      	ldr	r6, [r7, #4]
 8003498:	466d      	mov	r5, sp
 800349a:	f106 0410 	add.w	r4, r6, #16
 800349e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80034a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80034a6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80034aa:	e885 0003 	stmia.w	r5, {r0, r1}
 80034ae:	1d33      	adds	r3, r6, #4
 80034b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	f004 fe64 	bl	8008180 <USB_CoreInit>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e0d7      	b.n	800367a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f004 ff71 	bl	80083b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034d6:	2300      	movs	r3, #0
 80034d8:	73fb      	strb	r3, [r7, #15]
 80034da:	e04a      	b.n	8003572 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034dc:	7bfa      	ldrb	r2, [r7, #15]
 80034de:	6879      	ldr	r1, [r7, #4]
 80034e0:	4613      	mov	r3, r2
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4413      	add	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	333d      	adds	r3, #61	; 0x3d
 80034ec:	2201      	movs	r2, #1
 80034ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034f0:	7bfa      	ldrb	r2, [r7, #15]
 80034f2:	6879      	ldr	r1, [r7, #4]
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	440b      	add	r3, r1
 80034fe:	333c      	adds	r3, #60	; 0x3c
 8003500:	7bfa      	ldrb	r2, [r7, #15]
 8003502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003504:	7bfa      	ldrb	r2, [r7, #15]
 8003506:	7bfb      	ldrb	r3, [r7, #15]
 8003508:	b298      	uxth	r0, r3
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	00db      	lsls	r3, r3, #3
 8003510:	4413      	add	r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3344      	adds	r3, #68	; 0x44
 8003518:	4602      	mov	r2, r0
 800351a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800351c:	7bfa      	ldrb	r2, [r7, #15]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4413      	add	r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	3340      	adds	r3, #64	; 0x40
 800352c:	2200      	movs	r2, #0
 800352e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003530:	7bfa      	ldrb	r2, [r7, #15]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	00db      	lsls	r3, r3, #3
 8003538:	4413      	add	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	3348      	adds	r3, #72	; 0x48
 8003540:	2200      	movs	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003544:	7bfa      	ldrb	r2, [r7, #15]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	4413      	add	r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	334c      	adds	r3, #76	; 0x4c
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4413      	add	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	440b      	add	r3, r1
 8003566:	3354      	adds	r3, #84	; 0x54
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	3301      	adds	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
 8003572:	7bfa      	ldrb	r2, [r7, #15]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d3af      	bcc.n	80034dc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800357c:	2300      	movs	r3, #0
 800357e:	73fb      	strb	r3, [r7, #15]
 8003580:	e044      	b.n	800360c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003582:	7bfa      	ldrb	r2, [r7, #15]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003598:	7bfa      	ldrb	r2, [r7, #15]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	4413      	add	r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80035aa:	7bfa      	ldrb	r2, [r7, #15]
 80035ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80035ae:	7bfa      	ldrb	r2, [r7, #15]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80035c0:	2200      	movs	r2, #0
 80035c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035c4:	7bfa      	ldrb	r2, [r7, #15]
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	4613      	mov	r3, r2
 80035ca:	00db      	lsls	r3, r3, #3
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80035d6:	2200      	movs	r2, #0
 80035d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035da:	7bfa      	ldrb	r2, [r7, #15]
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	4613      	mov	r3, r2
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	440b      	add	r3, r1
 80035e8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035f0:	7bfa      	ldrb	r2, [r7, #15]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	4413      	add	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003606:	7bfb      	ldrb	r3, [r7, #15]
 8003608:	3301      	adds	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
 800360c:	7bfa      	ldrb	r2, [r7, #15]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	429a      	cmp	r2, r3
 8003614:	d3b5      	bcc.n	8003582 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	687e      	ldr	r6, [r7, #4]
 800361e:	466d      	mov	r5, sp
 8003620:	f106 0410 	add.w	r4, r6, #16
 8003624:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003626:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003628:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800362a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003630:	e885 0003 	stmia.w	r5, {r0, r1}
 8003634:	1d33      	adds	r3, r6, #4
 8003636:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003638:	6838      	ldr	r0, [r7, #0]
 800363a:	f004 ff09 	bl	8008450 <USB_DevInit>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d005      	beq.n	8003650 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e014      	b.n	800367a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	2b01      	cmp	r3, #1
 8003666:	d102      	bne.n	800366e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f001 f97b 	bl	8004964 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4618      	mov	r0, r3
 8003674:	f006 f857 	bl	8009726 <USB_DevDisconnect>

  return HAL_OK;
 8003678:	2300      	movs	r3, #0
}
 800367a:	4618      	mov	r0, r3
 800367c:	3714      	adds	r7, #20
 800367e:	46bd      	mov	sp, r7
 8003680:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003682 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003682:	b580      	push	{r7, lr}
 8003684:	b082      	sub	sp, #8
 8003686:	af00      	add	r7, sp, #0
 8003688:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003690:	2b01      	cmp	r3, #1
 8003692:	d101      	bne.n	8003698 <HAL_PCD_Start+0x16>
 8003694:	2302      	movs	r3, #2
 8003696:	e012      	b.n	80036be <HAL_PCD_Start+0x3c>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f004 fe65 	bl	8008374 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f006 f818 	bl	80096e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036c6:	b590      	push	{r4, r7, lr}
 80036c8:	b08d      	sub	sp, #52	; 0x34
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f006 f8d6 	bl	800988e <USB_GetMode>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f040 84b7 	bne.w	8004058 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f006 f83a 	bl	8009768 <USB_ReadInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 84ad 	beq.w	8004056 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4618      	mov	r0, r3
 8003716:	f006 f827 	bl	8009768 <USB_ReadInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f003 0302 	and.w	r3, r3, #2
 8003720:	2b02      	cmp	r3, #2
 8003722:	d107      	bne.n	8003734 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695a      	ldr	r2, [r3, #20]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f002 0202 	and.w	r2, r2, #2
 8003732:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f006 f815 	bl	8009768 <USB_ReadInterrupts>
 800373e:	4603      	mov	r3, r0
 8003740:	f003 0310 	and.w	r3, r3, #16
 8003744:	2b10      	cmp	r3, #16
 8003746:	d161      	bne.n	800380c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f022 0210 	bic.w	r2, r2, #16
 8003756:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	f003 020f 	and.w	r2, r3, #15
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	0c5b      	lsrs	r3, r3, #17
 800377c:	f003 030f 	and.w	r3, r3, #15
 8003780:	2b02      	cmp	r3, #2
 8003782:	d124      	bne.n	80037ce <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d035      	beq.n	80037fc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800379a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800379e:	b29b      	uxth	r3, r3
 80037a0:	461a      	mov	r2, r3
 80037a2:	6a38      	ldr	r0, [r7, #32]
 80037a4:	f005 fe4c 	bl	8009440 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	691a      	ldr	r2, [r3, #16]
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	091b      	lsrs	r3, r3, #4
 80037b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037b4:	441a      	add	r2, r3
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	6a1a      	ldr	r2, [r3, #32]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037c6:	441a      	add	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	621a      	str	r2, [r3, #32]
 80037cc:	e016      	b.n	80037fc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037ce:	69bb      	ldr	r3, [r7, #24]
 80037d0:	0c5b      	lsrs	r3, r3, #17
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	2b06      	cmp	r3, #6
 80037d8:	d110      	bne.n	80037fc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037e0:	2208      	movs	r2, #8
 80037e2:	4619      	mov	r1, r3
 80037e4:	6a38      	ldr	r0, [r7, #32]
 80037e6:	f005 fe2b 	bl	8009440 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	6a1a      	ldr	r2, [r3, #32]
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037f6:	441a      	add	r2, r3
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f042 0210 	orr.w	r2, r2, #16
 800380a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f005 ffa9 	bl	8009768 <USB_ReadInterrupts>
 8003816:	4603      	mov	r3, r0
 8003818:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800381c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003820:	f040 80a7 	bne.w	8003972 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f005 ffae 	bl	800978e <USB_ReadDevAllOutEpInterrupt>
 8003832:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003834:	e099      	b.n	800396a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	2b00      	cmp	r3, #0
 800383e:	f000 808e 	beq.w	800395e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003848:	b2d2      	uxtb	r2, r2
 800384a:	4611      	mov	r1, r2
 800384c:	4618      	mov	r0, r3
 800384e:	f005 ffd2 	bl	80097f6 <USB_ReadDevOutEPInterrupt>
 8003852:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00c      	beq.n	8003878 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800385e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	4413      	add	r3, r2
 8003866:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386a:	461a      	mov	r2, r3
 800386c:	2301      	movs	r3, #1
 800386e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003870:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fef0 	bl	8004658 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d00c      	beq.n	800389c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003884:	015a      	lsls	r2, r3, #5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	4413      	add	r3, r2
 800388a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800388e:	461a      	mov	r2, r3
 8003890:	2308      	movs	r3, #8
 8003892:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003894:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 ffc6 	bl	8004828 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0310 	and.w	r3, r3, #16
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d008      	beq.n	80038b8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80038a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a8:	015a      	lsls	r2, r3, #5
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	4413      	add	r3, r2
 80038ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b2:	461a      	mov	r2, r3
 80038b4:	2310      	movs	r3, #16
 80038b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d030      	beq.n	8003924 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038c2:	6a3b      	ldr	r3, [r7, #32]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038ca:	2b80      	cmp	r3, #128	; 0x80
 80038cc:	d109      	bne.n	80038e2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	69fa      	ldr	r2, [r7, #28]
 80038d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038e0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	4413      	add	r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	4413      	add	r3, r2
 80038f4:	3304      	adds	r3, #4
 80038f6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	78db      	ldrb	r3, [r3, #3]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d108      	bne.n	8003912 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	2200      	movs	r2, #0
 8003904:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003908:	b2db      	uxtb	r3, r3
 800390a:	4619      	mov	r1, r3
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f008 fb3b 	bl	800bf88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	2302      	movs	r3, #2
 8003922:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f003 0320 	and.w	r3, r3, #32
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	2320      	movs	r3, #32
 800393e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d009      	beq.n	800395e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	461a      	mov	r2, r3
 8003958:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800395c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	3301      	adds	r3, #1
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	2b00      	cmp	r3, #0
 800396e:	f47f af62 	bne.w	8003836 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4618      	mov	r0, r3
 8003978:	f005 fef6 	bl	8009768 <USB_ReadInterrupts>
 800397c:	4603      	mov	r3, r0
 800397e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003982:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003986:	f040 80db 	bne.w	8003b40 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4618      	mov	r0, r3
 8003990:	f005 ff17 	bl	80097c2 <USB_ReadDevAllInEpInterrupt>
 8003994:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800399a:	e0cd      	b.n	8003b38 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f000 80c2 	beq.w	8003b2c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f005 ff3d 	bl	8009832 <USB_ReadDevInEPInterrupt>
 80039b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d057      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	f003 030f 	and.w	r3, r3, #15
 80039ca:	2201      	movs	r2, #1
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e4:	4013      	ands	r3, r2
 80039e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	461a      	mov	r2, r3
 80039f6:	2301      	movs	r3, #1
 80039f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d132      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a06:	4613      	mov	r3, r2
 8003a08:	00db      	lsls	r3, r3, #3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	334c      	adds	r3, #76	; 0x4c
 8003a12:	6819      	ldr	r1, [r3, #0]
 8003a14:	6878      	ldr	r0, [r7, #4]
 8003a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a18:	4613      	mov	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	4413      	add	r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	4403      	add	r3, r0
 8003a22:	3348      	adds	r3, #72	; 0x48
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4419      	add	r1, r3
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	00db      	lsls	r3, r3, #3
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4403      	add	r3, r0
 8003a36:	334c      	adds	r3, #76	; 0x4c
 8003a38:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d113      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x3a2>
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	3354      	adds	r3, #84	; 0x54
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d108      	bne.n	8003a68 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6818      	ldr	r0, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a60:	461a      	mov	r2, r3
 8003a62:	2101      	movs	r1, #1
 8003a64:	f005 ff46 	bl	80098f4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f008 fa05 	bl	800be7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab8:	015a      	lsls	r2, r3, #5
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	2340      	movs	r3, #64	; 0x40
 8003ac6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d023      	beq.n	8003b1a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ad2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ad4:	6a38      	ldr	r0, [r7, #32]
 8003ad6:	f004 fe19 	bl	800870c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	4613      	mov	r3, r2
 8003ade:	00db      	lsls	r3, r3, #3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	3338      	adds	r3, #56	; 0x38
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3304      	adds	r3, #4
 8003aec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	78db      	ldrb	r3, [r3, #3]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d108      	bne.n	8003b08 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	2200      	movs	r2, #0
 8003afa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	4619      	mov	r1, r3
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f008 fa52 	bl	800bfac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	015a      	lsls	r2, r3, #5
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	4413      	add	r3, r2
 8003b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b14:	461a      	mov	r2, r3
 8003b16:	2302      	movs	r3, #2
 8003b18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fd08 	bl	800453c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2e:	3301      	adds	r3, #1
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	085b      	lsrs	r3, r3, #1
 8003b36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f47f af2e 	bne.w	800399c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f005 fe0f 	bl	8009768 <USB_ReadInterrupts>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b54:	d122      	bne.n	8003b9c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	69fa      	ldr	r2, [r7, #28]
 8003b60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b64:	f023 0301 	bic.w	r3, r3, #1
 8003b68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d108      	bne.n	8003b86 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f008 fbd2 	bl	800c328 <HAL_PCDEx_LPM_Callback>
 8003b84:	e002      	b.n	8003b8c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f008 f9f0 	bl	800bf6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695a      	ldr	r2, [r3, #20]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003b9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f005 fde1 	bl	8009768 <USB_ReadInterrupts>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bb0:	d112      	bne.n	8003bd8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d102      	bne.n	8003bc8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f008 f9ac 	bl	800bf20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f005 fdc3 	bl	8009768 <USB_ReadInterrupts>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003be8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bec:	d121      	bne.n	8003c32 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003bfc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d111      	bne.n	8003c2c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c16:	089b      	lsrs	r3, r3, #2
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003c22:	2101      	movs	r1, #1
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f008 fb7f 	bl	800c328 <HAL_PCDEx_LPM_Callback>
 8003c2a:	e002      	b.n	8003c32 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f008 f977 	bl	800bf20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f005 fd96 	bl	8009768 <USB_ReadInterrupts>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c46:	f040 80b7 	bne.w	8003db8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	69fa      	ldr	r2, [r7, #28]
 8003c54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c58:	f023 0301 	bic.w	r3, r3, #1
 8003c5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2110      	movs	r1, #16
 8003c64:	4618      	mov	r0, r3
 8003c66:	f004 fd51 	bl	800870c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c6e:	e046      	b.n	8003cfe <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c94:	0151      	lsls	r1, r2, #5
 8003c96:	69fa      	ldr	r2, [r7, #28]
 8003c98:	440a      	add	r2, r1
 8003c9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ca2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cb6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cba:	015a      	lsls	r2, r3, #5
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc8:	0151      	lsls	r1, r2, #5
 8003cca:	69fa      	ldr	r2, [r7, #28]
 8003ccc:	440a      	add	r2, r1
 8003cce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003cd6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce8:	0151      	lsls	r1, r2, #5
 8003cea:	69fa      	ldr	r2, [r7, #28]
 8003cec:	440a      	add	r2, r1
 8003cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cf2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cf6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d3b3      	bcc.n	8003c70 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	69fa      	ldr	r2, [r7, #28]
 8003d12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d16:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d1a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d016      	beq.n	8003d52 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d24:	69fb      	ldr	r3, [r7, #28]
 8003d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2e:	69fa      	ldr	r2, [r7, #28]
 8003d30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d34:	f043 030b 	orr.w	r3, r3, #11
 8003d38:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	69fa      	ldr	r2, [r7, #28]
 8003d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d4a:	f043 030b 	orr.w	r3, r3, #11
 8003d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d50:	e015      	b.n	8003d7e <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d60:	4619      	mov	r1, r3
 8003d62:	f242 032b 	movw	r3, #8235	; 0x202b
 8003d66:	4313      	orrs	r3, r2
 8003d68:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d78:	f043 030b 	orr.w	r3, r3, #11
 8003d7c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d7e:	69fb      	ldr	r3, [r7, #28]
 8003d80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003d90:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6818      	ldr	r0, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003da2:	461a      	mov	r2, r3
 8003da4:	f005 fda6 	bl	80098f4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	695a      	ldr	r2, [r3, #20]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003db6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	f005 fcd3 	bl	8009768 <USB_ReadInterrupts>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dcc:	d124      	bne.n	8003e18 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f005 fd6a 	bl	80098ac <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f004 fd12 	bl	8008806 <USB_GetDevSpeed>
 8003de2:	4603      	mov	r3, r0
 8003de4:	461a      	mov	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681c      	ldr	r4, [r3, #0]
 8003dee:	f001 fac1 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8003df2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4620      	mov	r0, r4
 8003dfe:	f004 fa17 	bl	8008230 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f008 f863 	bl	800bece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	695a      	ldr	r2, [r3, #20]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e16:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f005 fca3 	bl	8009768 <USB_ReadInterrupts>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f003 0308 	and.w	r3, r3, #8
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d10a      	bne.n	8003e42 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e2c:	6878      	ldr	r0, [r7, #4]
 8003e2e:	f008 f840 	bl	800beb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695a      	ldr	r2, [r3, #20]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f002 0208 	and.w	r2, r2, #8
 8003e40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4618      	mov	r0, r3
 8003e48:	f005 fc8e 	bl	8009768 <USB_ReadInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e52:	2b80      	cmp	r3, #128	; 0x80
 8003e54:	d122      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003e56:	6a3b      	ldr	r3, [r7, #32]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e62:	2301      	movs	r3, #1
 8003e64:	627b      	str	r3, [r7, #36]	; 0x24
 8003e66:	e014      	b.n	8003e92 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003e68:	6879      	ldr	r1, [r7, #4]
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	00db      	lsls	r3, r3, #3
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003e7a:	781b      	ldrb	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d105      	bne.n	8003e8c <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	4619      	mov	r1, r3
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb27 	bl	80044da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8e:	3301      	adds	r3, #1
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d3e5      	bcc.n	8003e68 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f005 fc61 	bl	8009768 <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb0:	d13b      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	e02b      	b.n	8003f10 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ec8:	6879      	ldr	r1, [r7, #4]
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	4413      	add	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	3340      	adds	r3, #64	; 0x40
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d115      	bne.n	8003f0a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003ede:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	da12      	bge.n	8003f0a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee8:	4613      	mov	r3, r2
 8003eea:	00db      	lsls	r3, r3, #3
 8003eec:	4413      	add	r3, r2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	333f      	adds	r3, #63	; 0x3f
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	4619      	mov	r1, r3
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f000 fae8 	bl	80044da <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3ce      	bcc.n	8003eb8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695a      	ldr	r2, [r3, #20]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f005 fc1a 	bl	8009768 <USB_ReadInterrupts>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f3e:	d155      	bne.n	8003fec <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f40:	2301      	movs	r3, #1
 8003f42:	627b      	str	r3, [r7, #36]	; 0x24
 8003f44:	e045      	b.n	8003fd2 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	015a      	lsls	r2, r3, #5
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	4413      	add	r3, r2
 8003f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f56:	6879      	ldr	r1, [r7, #4]
 8003f58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4413      	add	r3, r2
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	440b      	add	r3, r1
 8003f64:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d12e      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	da2b      	bge.n	8003fcc <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003f80:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d121      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4413      	add	r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003fa6:	6a3b      	ldr	r3, [r7, #32]
 8003fa8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10a      	bne.n	8003fcc <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fc8:	6053      	str	r3, [r2, #4]
            break;
 8003fca:	e007      	b.n	8003fdc <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fce:	3301      	adds	r3, #1
 8003fd0:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3b4      	bcc.n	8003f46 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003fea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f005 fbb9 	bl	8009768 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004000:	d10a      	bne.n	8004018 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f007 ffe4 	bl	800bfd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695a      	ldr	r2, [r3, #20]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004016:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4618      	mov	r0, r3
 800401e:	f005 fba3 	bl	8009768 <USB_ReadInterrupts>
 8004022:	4603      	mov	r3, r0
 8004024:	f003 0304 	and.w	r3, r3, #4
 8004028:	2b04      	cmp	r3, #4
 800402a:	d115      	bne.n	8004058 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d002      	beq.n	8004044 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800403e:	6878      	ldr	r0, [r7, #4]
 8004040:	f007 ffd4 	bl	800bfec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
 8004054:	e000      	b.n	8004058 <HAL_PCD_IRQHandler+0x992>
      return;
 8004056:	bf00      	nop
    }
  }
}
 8004058:	3734      	adds	r7, #52	; 0x34
 800405a:	46bd      	mov	sp, r7
 800405c:	bd90      	pop	{r4, r7, pc}

0800405e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b082      	sub	sp, #8
 8004062:	af00      	add	r7, sp, #0
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	460b      	mov	r3, r1
 8004068:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_PCD_SetAddress+0x1a>
 8004074:	2302      	movs	r3, #2
 8004076:	e013      	b.n	80040a0 <HAL_PCD_SetAddress+0x42>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	78fa      	ldrb	r2, [r7, #3]
 800408e:	4611      	mov	r1, r2
 8004090:	4618      	mov	r0, r3
 8004092:	f005 fb01 	bl	8009698 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3708      	adds	r7, #8
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	4608      	mov	r0, r1
 80040b2:	4611      	mov	r1, r2
 80040b4:	461a      	mov	r2, r3
 80040b6:	4603      	mov	r3, r0
 80040b8:	70fb      	strb	r3, [r7, #3]
 80040ba:	460b      	mov	r3, r1
 80040bc:	803b      	strh	r3, [r7, #0]
 80040be:	4613      	mov	r3, r2
 80040c0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80040c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da0f      	bge.n	80040ee <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	f003 020f 	and.w	r2, r3, #15
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	3338      	adds	r3, #56	; 0x38
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	4413      	add	r3, r2
 80040e2:	3304      	adds	r3, #4
 80040e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	705a      	strb	r2, [r3, #1]
 80040ec:	e00f      	b.n	800410e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ee:	78fb      	ldrb	r3, [r7, #3]
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004100:	687a      	ldr	r2, [r7, #4]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	f003 030f 	and.w	r3, r3, #15
 8004114:	b2da      	uxtb	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800411a:	883a      	ldrh	r2, [r7, #0]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	78ba      	ldrb	r2, [r7, #2]
 8004124:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	785b      	ldrb	r3, [r3, #1]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d004      	beq.n	8004138 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004138:	78bb      	ldrb	r3, [r7, #2]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d102      	bne.n	8004144 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800414a:	2b01      	cmp	r3, #1
 800414c:	d101      	bne.n	8004152 <HAL_PCD_EP_Open+0xaa>
 800414e:	2302      	movs	r3, #2
 8004150:	e00e      	b.n	8004170 <HAL_PCD_EP_Open+0xc8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	68f9      	ldr	r1, [r7, #12]
 8004160:	4618      	mov	r0, r3
 8004162:	f004 fb75 	bl	8008850 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800416e:	7afb      	ldrb	r3, [r7, #11]
}
 8004170:	4618      	mov	r0, r3
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	460b      	mov	r3, r1
 8004182:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004188:	2b00      	cmp	r3, #0
 800418a:	da0f      	bge.n	80041ac <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	f003 020f 	and.w	r2, r3, #15
 8004192:	4613      	mov	r3, r2
 8004194:	00db      	lsls	r3, r3, #3
 8004196:	4413      	add	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	3338      	adds	r3, #56	; 0x38
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	4413      	add	r3, r2
 80041a0:	3304      	adds	r3, #4
 80041a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	705a      	strb	r2, [r3, #1]
 80041aa:	e00f      	b.n	80041cc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	78fb      	ldrb	r3, [r7, #3]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80041cc:	78fb      	ldrb	r3, [r7, #3]
 80041ce:	f003 030f 	and.w	r3, r3, #15
 80041d2:	b2da      	uxtb	r2, r3
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_PCD_EP_Close+0x6e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e00e      	b.n	8004204 <HAL_PCD_EP_Close+0x8c>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68f9      	ldr	r1, [r7, #12]
 80041f4:	4618      	mov	r0, r3
 80041f6:	f004 fbb3 	bl	8008960 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004202:	2300      	movs	r3, #0
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	607a      	str	r2, [r7, #4]
 8004216:	603b      	str	r3, [r7, #0]
 8004218:	460b      	mov	r3, r1
 800421a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800421c:	7afb      	ldrb	r3, [r7, #11]
 800421e:	f003 020f 	and.w	r2, r3, #15
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4413      	add	r3, r2
 8004232:	3304      	adds	r3, #4
 8004234:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	2200      	movs	r2, #0
 8004246:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	2200      	movs	r2, #0
 800424c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800424e:	7afb      	ldrb	r3, [r7, #11]
 8004250:	f003 030f 	and.w	r3, r3, #15
 8004254:	b2da      	uxtb	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	2b01      	cmp	r3, #1
 8004260:	d102      	bne.n	8004268 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004268:	7afb      	ldrb	r3, [r7, #11]
 800426a:	f003 030f 	and.w	r3, r3, #15
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	691b      	ldr	r3, [r3, #16]
 800427a:	b2db      	uxtb	r3, r3
 800427c:	461a      	mov	r2, r3
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	f004 fe9a 	bl	8008fb8 <USB_EP0StartXfer>
 8004284:	e008      	b.n	8004298 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	b2db      	uxtb	r3, r3
 8004290:	461a      	mov	r2, r3
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	f004 fc40 	bl	8008b18 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004298:	2300      	movs	r3, #0
}
 800429a:	4618      	mov	r0, r3
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042a2:	b480      	push	{r7}
 80042a4:	b083      	sub	sp, #12
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	6078      	str	r0, [r7, #4]
 80042aa:	460b      	mov	r3, r1
 80042ac:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	f003 020f 	and.w	r2, r3, #15
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	4413      	add	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80042c4:	681b      	ldr	r3, [r3, #0]
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b086      	sub	sp, #24
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	60f8      	str	r0, [r7, #12]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
 80042de:	460b      	mov	r3, r1
 80042e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042e2:	7afb      	ldrb	r3, [r7, #11]
 80042e4:	f003 020f 	and.w	r2, r3, #15
 80042e8:	4613      	mov	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	4413      	add	r3, r2
 80042ee:	009b      	lsls	r3, r3, #2
 80042f0:	3338      	adds	r3, #56	; 0x38
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	3304      	adds	r3, #4
 80042f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2201      	movs	r2, #1
 8004310:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004312:	7afb      	ldrb	r3, [r7, #11]
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	b2da      	uxtb	r2, r3
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	2b01      	cmp	r3, #1
 8004324:	d102      	bne.n	800432c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800432c:	7afb      	ldrb	r3, [r7, #11]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	6979      	ldr	r1, [r7, #20]
 8004344:	f004 fe38 	bl	8008fb8 <USB_EP0StartXfer>
 8004348:	e008      	b.n	800435c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	6818      	ldr	r0, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	b2db      	uxtb	r3, r3
 8004354:	461a      	mov	r2, r3
 8004356:	6979      	ldr	r1, [r7, #20]
 8004358:	f004 fbde 	bl	8008b18 <USB_EPStartXfer>
  }

  return HAL_OK;
 800435c:	2300      	movs	r3, #0
}
 800435e:	4618      	mov	r0, r3
 8004360:	3718      	adds	r7, #24
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}

08004366 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004366:	b580      	push	{r7, lr}
 8004368:	b084      	sub	sp, #16
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
 800436e:	460b      	mov	r3, r1
 8004370:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	f003 020f 	and.w	r2, r3, #15
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	429a      	cmp	r2, r3
 800437e:	d901      	bls.n	8004384 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	e050      	b.n	8004426 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004384:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004388:	2b00      	cmp	r3, #0
 800438a:	da0f      	bge.n	80043ac <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800438c:	78fb      	ldrb	r3, [r7, #3]
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4413      	add	r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	3338      	adds	r3, #56	; 0x38
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2201      	movs	r2, #1
 80043a8:	705a      	strb	r2, [r3, #1]
 80043aa:	e00d      	b.n	80043c8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80043ac:	78fa      	ldrb	r2, [r7, #3]
 80043ae:	4613      	mov	r3, r2
 80043b0:	00db      	lsls	r3, r3, #3
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	4413      	add	r3, r2
 80043be:	3304      	adds	r3, #4
 80043c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2201      	movs	r2, #1
 80043cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043e0:	2b01      	cmp	r3, #1
 80043e2:	d101      	bne.n	80043e8 <HAL_PCD_EP_SetStall+0x82>
 80043e4:	2302      	movs	r3, #2
 80043e6:	e01e      	b.n	8004426 <HAL_PCD_EP_SetStall+0xc0>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2201      	movs	r2, #1
 80043ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68f9      	ldr	r1, [r7, #12]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f005 f87a 	bl	80094f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043fc:	78fb      	ldrb	r3, [r7, #3]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10a      	bne.n	800441c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	b2d9      	uxtb	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004416:	461a      	mov	r2, r3
 8004418:	f005 fa6c 	bl	80098f4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b084      	sub	sp, #16
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
 8004436:	460b      	mov	r3, r1
 8004438:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800443a:	78fb      	ldrb	r3, [r7, #3]
 800443c:	f003 020f 	and.w	r2, r3, #15
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	429a      	cmp	r2, r3
 8004446:	d901      	bls.n	800444c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e042      	b.n	80044d2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800444c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004450:	2b00      	cmp	r3, #0
 8004452:	da0f      	bge.n	8004474 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 020f 	and.w	r2, r3, #15
 800445a:	4613      	mov	r3, r2
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	4413      	add	r3, r2
 8004460:	009b      	lsls	r3, r3, #2
 8004462:	3338      	adds	r3, #56	; 0x38
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	4413      	add	r3, r2
 8004468:	3304      	adds	r3, #4
 800446a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2201      	movs	r2, #1
 8004470:	705a      	strb	r2, [r3, #1]
 8004472:	e00f      	b.n	8004494 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	f003 020f 	and.w	r2, r3, #15
 800447a:	4613      	mov	r3, r2
 800447c:	00db      	lsls	r3, r3, #3
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	4413      	add	r3, r2
 800448a:	3304      	adds	r3, #4
 800448c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2200      	movs	r2, #0
 8004498:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800449a:	78fb      	ldrb	r3, [r7, #3]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_PCD_EP_ClrStall+0x86>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e00e      	b.n	80044d2 <HAL_PCD_EP_ClrStall+0xa4>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68f9      	ldr	r1, [r7, #12]
 80044c2:	4618      	mov	r0, r3
 80044c4:	f005 f882 	bl	80095cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b084      	sub	sp, #16
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	460b      	mov	r3, r1
 80044e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80044e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	da0c      	bge.n	8004508 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044ee:	78fb      	ldrb	r3, [r7, #3]
 80044f0:	f003 020f 	and.w	r2, r3, #15
 80044f4:	4613      	mov	r3, r2
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	3338      	adds	r3, #56	; 0x38
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	4413      	add	r3, r2
 8004502:	3304      	adds	r3, #4
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e00c      	b.n	8004522 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	f003 020f 	and.w	r2, r3, #15
 800450e:	4613      	mov	r3, r2
 8004510:	00db      	lsls	r3, r3, #3
 8004512:	4413      	add	r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	3304      	adds	r3, #4
 8004520:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	4618      	mov	r0, r3
 800452a:	f004 fea1 	bl	8009270 <USB_EPStopXfer>
 800452e:	4603      	mov	r3, r0
 8004530:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004532:	7afb      	ldrb	r3, [r7, #11]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3710      	adds	r7, #16
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}

0800453c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b08a      	sub	sp, #40	; 0x28
 8004540:	af02      	add	r7, sp, #8
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	4613      	mov	r3, r2
 8004554:	00db      	lsls	r3, r3, #3
 8004556:	4413      	add	r3, r2
 8004558:	009b      	lsls	r3, r3, #2
 800455a:	3338      	adds	r3, #56	; 0x38
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	4413      	add	r3, r2
 8004560:	3304      	adds	r3, #4
 8004562:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	6a1a      	ldr	r2, [r3, #32]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	429a      	cmp	r2, r3
 800456e:	d901      	bls.n	8004574 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e06c      	b.n	800464e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	699a      	ldr	r2, [r3, #24]
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	69fa      	ldr	r2, [r7, #28]
 8004586:	429a      	cmp	r2, r3
 8004588:	d902      	bls.n	8004590 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	3303      	adds	r3, #3
 8004594:	089b      	lsrs	r3, r3, #2
 8004596:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004598:	e02b      	b.n	80045f2 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	699a      	ldr	r2, [r3, #24]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	1ad3      	subs	r3, r2, r3
 80045a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	69fa      	ldr	r2, [r7, #28]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d902      	bls.n	80045b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3303      	adds	r3, #3
 80045ba:	089b      	lsrs	r3, r3, #2
 80045bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6919      	ldr	r1, [r3, #16]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	b2da      	uxtb	r2, r3
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	9300      	str	r3, [sp, #0]
 80045d2:	4603      	mov	r3, r0
 80045d4:	6978      	ldr	r0, [r7, #20]
 80045d6:	f004 fef5 	bl	80093c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	441a      	add	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1a      	ldr	r2, [r3, #32]
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	441a      	add	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	015a      	lsls	r2, r3, #5
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	4413      	add	r3, r2
 80045fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	429a      	cmp	r2, r3
 8004606:	d809      	bhi.n	800461c <PCD_WriteEmptyTxFifo+0xe0>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6a1a      	ldr	r2, [r3, #32]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004610:	429a      	cmp	r2, r3
 8004612:	d203      	bcs.n	800461c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1be      	bne.n	800459a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	699a      	ldr	r2, [r3, #24]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	429a      	cmp	r2, r3
 8004626:	d811      	bhi.n	800464c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	f003 030f 	and.w	r3, r3, #15
 800462e:	2201      	movs	r2, #1
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	43db      	mvns	r3, r3
 8004642:	6939      	ldr	r1, [r7, #16]
 8004644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004648:	4013      	ands	r3, r2
 800464a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	333c      	adds	r3, #60	; 0x3c
 8004670:	3304      	adds	r3, #4
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	69bb      	ldr	r3, [r7, #24]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d17b      	bne.n	8004786 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d015      	beq.n	80046c4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	4a61      	ldr	r2, [pc, #388]	; (8004820 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800469c:	4293      	cmp	r3, r2
 800469e:	f240 80b9 	bls.w	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80b3 	beq.w	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ba:	461a      	mov	r2, r3
 80046bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c0:	6093      	str	r3, [r2, #8]
 80046c2:	e0a7      	b.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f003 0320 	and.w	r3, r3, #32
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d009      	beq.n	80046e2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	461a      	mov	r2, r3
 80046dc:	2320      	movs	r3, #32
 80046de:	6093      	str	r3, [r2, #8]
 80046e0:	e098      	b.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f040 8093 	bne.w	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	4a4b      	ldr	r2, [pc, #300]	; (8004820 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d90f      	bls.n	8004716 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d00a      	beq.n	8004716 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	015a      	lsls	r2, r3, #5
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	4413      	add	r3, r2
 8004708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470c:	461a      	mov	r2, r3
 800470e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004712:	6093      	str	r3, [r2, #8]
 8004714:	e07e      	b.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	69da      	ldr	r2, [r3, #28]
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	0159      	lsls	r1, r3, #5
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	440b      	add	r3, r1
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004742:	1ad2      	subs	r2, r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d114      	bne.n	8004778 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004760:	461a      	mov	r2, r3
 8004762:	2101      	movs	r1, #1
 8004764:	f005 f8c6 	bl	80098f4 <USB_EP0_OutStart>
 8004768:	e006      	b.n	8004778 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6a1b      	ldr	r3, [r3, #32]
 8004772:	441a      	add	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	4619      	mov	r1, r3
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f007 fb62 	bl	800be48 <HAL_PCD_DataOutStageCallback>
 8004784:	e046      	b.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4a26      	ldr	r2, [pc, #152]	; (8004824 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d124      	bne.n	80047d8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69bb      	ldr	r3, [r7, #24]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047aa:	6093      	str	r3, [r2, #8]
 80047ac:	e032      	b.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f003 0320 	and.w	r3, r3, #32
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d008      	beq.n	80047ca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	461a      	mov	r2, r3
 80047c6:	2320      	movs	r3, #32
 80047c8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	4619      	mov	r1, r3
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f007 fb39 	bl	800be48 <HAL_PCD_DataOutStageCallback>
 80047d6:	e01d      	b.n	8004814 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d114      	bne.n	8004808 <PCD_EP_OutXfrComplete_int+0x1b0>
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	4613      	mov	r3, r2
 80047e4:	00db      	lsls	r3, r3, #3
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d108      	bne.n	8004808 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6818      	ldr	r0, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004800:	461a      	mov	r2, r3
 8004802:	2100      	movs	r1, #0
 8004804:	f005 f876 	bl	80098f4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	4619      	mov	r1, r3
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f007 fb1a 	bl	800be48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	4f54300a 	.word	0x4f54300a
 8004824:	4f54310a 	.word	0x4f54310a

08004828 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b086      	sub	sp, #24
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	333c      	adds	r3, #60	; 0x3c
 8004840:	3304      	adds	r3, #4
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	015a      	lsls	r2, r3, #5
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4413      	add	r3, r2
 800484e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a15      	ldr	r2, [pc, #84]	; (80048b0 <PCD_EP_OutSetupPacket_int+0x88>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d90e      	bls.n	800487c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004864:	2b00      	cmp	r3, #0
 8004866:	d009      	beq.n	800487c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	461a      	mov	r2, r3
 8004876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800487a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f007 fad1 	bl	800be24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a0a      	ldr	r2, [pc, #40]	; (80048b0 <PCD_EP_OutSetupPacket_int+0x88>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d90c      	bls.n	80048a4 <PCD_EP_OutSetupPacket_int+0x7c>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	2b01      	cmp	r3, #1
 8004890:	d108      	bne.n	80048a4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800489c:	461a      	mov	r2, r3
 800489e:	2101      	movs	r1, #1
 80048a0:	f005 f828 	bl	80098f4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3718      	adds	r7, #24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	4f54300a 	.word	0x4f54300a

080048b4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
 80048c0:	4613      	mov	r3, r2
 80048c2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d107      	bne.n	80048e2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80048d2:	883b      	ldrh	r3, [r7, #0]
 80048d4:	0419      	lsls	r1, r3, #16
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	430a      	orrs	r2, r1
 80048de:	629a      	str	r2, [r3, #40]	; 0x28
 80048e0:	e028      	b.n	8004934 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	0c1b      	lsrs	r3, r3, #16
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	4413      	add	r3, r2
 80048ee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048f0:	2300      	movs	r3, #0
 80048f2:	73fb      	strb	r3, [r7, #15]
 80048f4:	e00d      	b.n	8004912 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	7bfb      	ldrb	r3, [r7, #15]
 80048fc:	3340      	adds	r3, #64	; 0x40
 80048fe:	009b      	lsls	r3, r3, #2
 8004900:	4413      	add	r3, r2
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	0c1b      	lsrs	r3, r3, #16
 8004906:	68ba      	ldr	r2, [r7, #8]
 8004908:	4413      	add	r3, r2
 800490a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	3301      	adds	r3, #1
 8004910:	73fb      	strb	r3, [r7, #15]
 8004912:	7bfa      	ldrb	r2, [r7, #15]
 8004914:	78fb      	ldrb	r3, [r7, #3]
 8004916:	3b01      	subs	r3, #1
 8004918:	429a      	cmp	r2, r3
 800491a:	d3ec      	bcc.n	80048f6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800491c:	883b      	ldrh	r3, [r7, #0]
 800491e:	0418      	lsls	r0, r3, #16
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6819      	ldr	r1, [r3, #0]
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	3b01      	subs	r3, #1
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	4302      	orrs	r2, r0
 800492c:	3340      	adds	r3, #64	; 0x40
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3714      	adds	r7, #20
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004942:	b480      	push	{r7}
 8004944:	b083      	sub	sp, #12
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	887a      	ldrh	r2, [r7, #2]
 8004954:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	699b      	ldr	r3, [r3, #24]
 8004986:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_PCDEx_ActivateLPM+0x44>)
 8004994:	4313      	orrs	r3, r2
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr
 80049a8:	10000003 	.word	0x10000003

080049ac <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b082      	sub	sp, #8
 80049b0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80049b2:	2300      	movs	r3, #0
 80049b4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049b6:	4b23      	ldr	r3, [pc, #140]	; (8004a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80049bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_PWREx_EnableOverDrive+0x98>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80049ce:	4b1e      	ldr	r3, [pc, #120]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80049da:	f7fd fe97 	bl	800270c <HAL_GetTick>
 80049de:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049e0:	e009      	b.n	80049f6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80049e2:	f7fd fe93 	bl	800270c <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049f0:	d901      	bls.n	80049f6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e022      	b.n	8004a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80049f6:	4b14      	ldr	r3, [pc, #80]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a02:	d1ee      	bne.n	80049e2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a04:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a0f      	ldr	r2, [pc, #60]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a0e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a10:	f7fd fe7c 	bl	800270c <HAL_GetTick>
 8004a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a16:	e009      	b.n	8004a2c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a18:	f7fd fe78 	bl	800270c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a26:	d901      	bls.n	8004a2c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e007      	b.n	8004a3c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a38:	d1ee      	bne.n	8004a18 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3708      	adds	r7, #8
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40007000 	.word	0x40007000

08004a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b086      	sub	sp, #24
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004a54:	2300      	movs	r3, #0
 8004a56:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e291      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0301 	and.w	r3, r3, #1
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f000 8087 	beq.w	8004b7e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004a70:	4b96      	ldr	r3, [pc, #600]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a72:	689b      	ldr	r3, [r3, #8]
 8004a74:	f003 030c 	and.w	r3, r3, #12
 8004a78:	2b04      	cmp	r3, #4
 8004a7a:	d00c      	beq.n	8004a96 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a7c:	4b93      	ldr	r3, [pc, #588]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 030c 	and.w	r3, r3, #12
 8004a84:	2b08      	cmp	r3, #8
 8004a86:	d112      	bne.n	8004aae <HAL_RCC_OscConfig+0x62>
 8004a88:	4b90      	ldr	r3, [pc, #576]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a94:	d10b      	bne.n	8004aae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a96:	4b8d      	ldr	r3, [pc, #564]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d06c      	beq.n	8004b7c <HAL_RCC_OscConfig+0x130>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d168      	bne.n	8004b7c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e26b      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ab6:	d106      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x7a>
 8004ab8:	4b84      	ldr	r3, [pc, #528]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a83      	ldr	r2, [pc, #524]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e02e      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10c      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x9c>
 8004ace:	4b7f      	ldr	r3, [pc, #508]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a7e      	ldr	r2, [pc, #504]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ad4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	4b7c      	ldr	r3, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a7b      	ldr	r2, [pc, #492]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ae0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0xc0>
 8004af2:	4b76      	ldr	r3, [pc, #472]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a75      	ldr	r2, [pc, #468]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b73      	ldr	r3, [pc, #460]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a72      	ldr	r2, [pc, #456]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xd8>
 8004b0c:	4b6f      	ldr	r3, [pc, #444]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b6c      	ldr	r3, [pc, #432]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a6b      	ldr	r2, [pc, #428]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b2c:	f7fd fdee 	bl	800270c <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fd fdea 	bl	800270c <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	; 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e21f      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xe8>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b54:	f7fd fdda 	bl	800270c <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fd fdd6 	bl	800270c <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	; 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e20b      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b57      	ldr	r3, [pc, #348]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0x110>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d069      	beq.n	8004c5e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004b8a:	4b50      	ldr	r3, [pc, #320]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b4d      	ldr	r3, [pc, #308]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x190>
 8004ba2:	4b4a      	ldr	r3, [pc, #296]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d116      	bne.n	8004bdc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	4b47      	ldr	r3, [pc, #284]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17a>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1df      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b41      	ldr	r3, [pc, #260]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	493d      	ldr	r1, [pc, #244]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	e040      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d023      	beq.n	8004c2c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	4b39      	ldr	r3, [pc, #228]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a38      	ldr	r2, [pc, #224]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004bea:	f043 0301 	orr.w	r3, r3, #1
 8004bee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bf0:	f7fd fd8c 	bl	800270c <HAL_GetTick>
 8004bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf6:	e008      	b.n	8004c0a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf8:	f7fd fd88 	bl	800270c <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e1bd      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c0a:	4b30      	ldr	r3, [pc, #192]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c16:	4b2d      	ldr	r3, [pc, #180]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	00db      	lsls	r3, r3, #3
 8004c24:	4929      	ldr	r1, [pc, #164]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	600b      	str	r3, [r1, #0]
 8004c2a:	e018      	b.n	8004c5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2c:	4b27      	ldr	r3, [pc, #156]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a26      	ldr	r2, [pc, #152]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c32:	f023 0301 	bic.w	r3, r3, #1
 8004c36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c38:	f7fd fd68 	bl	800270c <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c40:	f7fd fd64 	bl	800270c <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e199      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c52:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d038      	beq.n	8004cdc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d019      	beq.n	8004ca6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c72:	4b16      	ldr	r3, [pc, #88]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c76:	4a15      	ldr	r2, [pc, #84]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c78:	f043 0301 	orr.w	r3, r3, #1
 8004c7c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7e:	f7fd fd45 	bl	800270c <HAL_GetTick>
 8004c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c84:	e008      	b.n	8004c98 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c86:	f7fd fd41 	bl	800270c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d901      	bls.n	8004c98 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c94:	2303      	movs	r3, #3
 8004c96:	e176      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c98:	4b0c      	ldr	r3, [pc, #48]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9c:	f003 0302 	and.w	r3, r3, #2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d0f0      	beq.n	8004c86 <HAL_RCC_OscConfig+0x23a>
 8004ca4:	e01a      	b.n	8004cdc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca6:	4b09      	ldr	r3, [pc, #36]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004ca8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004caa:	4a08      	ldr	r2, [pc, #32]	; (8004ccc <HAL_RCC_OscConfig+0x280>)
 8004cac:	f023 0301 	bic.w	r3, r3, #1
 8004cb0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cb2:	f7fd fd2b 	bl	800270c <HAL_GetTick>
 8004cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cba:	f7fd fd27 	bl	800270c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d903      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e15c      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
 8004ccc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cd0:	4b91      	ldr	r3, [pc, #580]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004cd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1ee      	bne.n	8004cba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 80a4 	beq.w	8004e32 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cea:	4b8b      	ldr	r3, [pc, #556]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10d      	bne.n	8004d12 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cf6:	4b88      	ldr	r3, [pc, #544]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	4a87      	ldr	r2, [pc, #540]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004cfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d00:	6413      	str	r3, [r2, #64]	; 0x40
 8004d02:	4b85      	ldr	r3, [pc, #532]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	60bb      	str	r3, [r7, #8]
 8004d0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0e:	2301      	movs	r3, #1
 8004d10:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d12:	4b82      	ldr	r3, [pc, #520]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d118      	bne.n	8004d50 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d1e:	4b7f      	ldr	r3, [pc, #508]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a7e      	ldr	r2, [pc, #504]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d2a:	f7fd fcef 	bl	800270c <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d30:	e008      	b.n	8004d44 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d32:	f7fd fceb 	bl	800270c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b64      	cmp	r3, #100	; 0x64
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e120      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d44:	4b75      	ldr	r3, [pc, #468]	; (8004f1c <HAL_RCC_OscConfig+0x4d0>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d0f0      	beq.n	8004d32 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d106      	bne.n	8004d66 <HAL_RCC_OscConfig+0x31a>
 8004d58:	4b6f      	ldr	r3, [pc, #444]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d5c:	4a6e      	ldr	r2, [pc, #440]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d5e:	f043 0301 	orr.w	r3, r3, #1
 8004d62:	6713      	str	r3, [r2, #112]	; 0x70
 8004d64:	e02d      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d10c      	bne.n	8004d88 <HAL_RCC_OscConfig+0x33c>
 8004d6e:	4b6a      	ldr	r3, [pc, #424]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d72:	4a69      	ldr	r2, [pc, #420]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	6713      	str	r3, [r2, #112]	; 0x70
 8004d7a:	4b67      	ldr	r3, [pc, #412]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d7e:	4a66      	ldr	r2, [pc, #408]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d80:	f023 0304 	bic.w	r3, r3, #4
 8004d84:	6713      	str	r3, [r2, #112]	; 0x70
 8004d86:	e01c      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	2b05      	cmp	r3, #5
 8004d8e:	d10c      	bne.n	8004daa <HAL_RCC_OscConfig+0x35e>
 8004d90:	4b61      	ldr	r3, [pc, #388]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d94:	4a60      	ldr	r2, [pc, #384]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d96:	f043 0304 	orr.w	r3, r3, #4
 8004d9a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d9c:	4b5e      	ldr	r3, [pc, #376]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da0:	4a5d      	ldr	r2, [pc, #372]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004da2:	f043 0301 	orr.w	r3, r3, #1
 8004da6:	6713      	str	r3, [r2, #112]	; 0x70
 8004da8:	e00b      	b.n	8004dc2 <HAL_RCC_OscConfig+0x376>
 8004daa:	4b5b      	ldr	r3, [pc, #364]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dae:	4a5a      	ldr	r2, [pc, #360]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004db0:	f023 0301 	bic.w	r3, r3, #1
 8004db4:	6713      	str	r3, [r2, #112]	; 0x70
 8004db6:	4b58      	ldr	r3, [pc, #352]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dba:	4a57      	ldr	r2, [pc, #348]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004dbc:	f023 0304 	bic.w	r3, r3, #4
 8004dc0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d015      	beq.n	8004df6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dca:	f7fd fc9f 	bl	800270c <HAL_GetTick>
 8004dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd0:	e00a      	b.n	8004de8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd2:	f7fd fc9b 	bl	800270c <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d901      	bls.n	8004de8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e0ce      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de8:	4b4b      	ldr	r3, [pc, #300]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d0ee      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x386>
 8004df4:	e014      	b.n	8004e20 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004df6:	f7fd fc89 	bl	800270c <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dfc:	e00a      	b.n	8004e14 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dfe:	f7fd fc85 	bl	800270c <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d901      	bls.n	8004e14 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e10:	2303      	movs	r3, #3
 8004e12:	e0b8      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e14:	4b40      	ldr	r3, [pc, #256]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1ee      	bne.n	8004dfe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d105      	bne.n	8004e32 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e26:	4b3c      	ldr	r3, [pc, #240]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	4a3b      	ldr	r2, [pc, #236]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f000 80a4 	beq.w	8004f84 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e3c:	4b36      	ldr	r3, [pc, #216]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f003 030c 	and.w	r3, r3, #12
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d06b      	beq.n	8004f20 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	2b02      	cmp	r3, #2
 8004e4e:	d149      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e50:	4b31      	ldr	r3, [pc, #196]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a30      	ldr	r2, [pc, #192]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e5c:	f7fd fc56 	bl	800270c <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e64:	f7fd fc52 	bl	800270c <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e087      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e76:	4b28      	ldr	r3, [pc, #160]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69da      	ldr	r2, [r3, #28]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a1b      	ldr	r3, [r3, #32]
 8004e8a:	431a      	orrs	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	019b      	lsls	r3, r3, #6
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e98:	085b      	lsrs	r3, r3, #1
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	041b      	lsls	r3, r3, #16
 8004e9e:	431a      	orrs	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea4:	061b      	lsls	r3, r3, #24
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	4a1b      	ldr	r2, [pc, #108]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004eae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004eb0:	4b19      	ldr	r3, [pc, #100]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a18      	ldr	r2, [pc, #96]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004eb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ebc:	f7fd fc26 	bl	800270c <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fd fc22 	bl	800270c <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e057      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ed6:	4b10      	ldr	r3, [pc, #64]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0f0      	beq.n	8004ec4 <HAL_RCC_OscConfig+0x478>
 8004ee2:	e04f      	b.n	8004f84 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a0b      	ldr	r2, [pc, #44]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ef0:	f7fd fc0c 	bl	800270c <HAL_GetTick>
 8004ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ef6:	e008      	b.n	8004f0a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ef8:	f7fd fc08 	bl	800270c <HAL_GetTick>
 8004efc:	4602      	mov	r2, r0
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad3      	subs	r3, r2, r3
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d901      	bls.n	8004f0a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f06:	2303      	movs	r3, #3
 8004f08:	e03d      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0a:	4b03      	ldr	r3, [pc, #12]	; (8004f18 <HAL_RCC_OscConfig+0x4cc>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1f0      	bne.n	8004ef8 <HAL_RCC_OscConfig+0x4ac>
 8004f16:	e035      	b.n	8004f84 <HAL_RCC_OscConfig+0x538>
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f20:	4b1b      	ldr	r3, [pc, #108]	; (8004f90 <HAL_RCC_OscConfig+0x544>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d028      	beq.n	8004f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d121      	bne.n	8004f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d11a      	bne.n	8004f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4a:	68fa      	ldr	r2, [r7, #12]
 8004f4c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f50:	4013      	ands	r3, r2
 8004f52:	687a      	ldr	r2, [r7, #4]
 8004f54:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f56:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d111      	bne.n	8004f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f66:	085b      	lsrs	r3, r3, #1
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d107      	bne.n	8004f80 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d001      	beq.n	8004f84 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	e000      	b.n	8004f86 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d101      	bne.n	8004fac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e0d0      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004fac:	4b6a      	ldr	r3, [pc, #424]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 030f 	and.w	r3, r3, #15
 8004fb4:	683a      	ldr	r2, [r7, #0]
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	d910      	bls.n	8004fdc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fba:	4b67      	ldr	r3, [pc, #412]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f023 020f 	bic.w	r2, r3, #15
 8004fc2:	4965      	ldr	r1, [pc, #404]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fca:	4b63      	ldr	r3, [pc, #396]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 030f 	and.w	r3, r3, #15
 8004fd2:	683a      	ldr	r2, [r7, #0]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d001      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0b8      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d020      	beq.n	800502a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d005      	beq.n	8005000 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ff4:	4b59      	ldr	r3, [pc, #356]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	4a58      	ldr	r2, [pc, #352]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8004ffa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004ffe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d005      	beq.n	8005018 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800500c:	4b53      	ldr	r3, [pc, #332]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	4a52      	ldr	r2, [pc, #328]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005012:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005016:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005018:	4b50      	ldr	r3, [pc, #320]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	494d      	ldr	r1, [pc, #308]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0301 	and.w	r3, r3, #1
 8005032:	2b00      	cmp	r3, #0
 8005034:	d040      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	2b01      	cmp	r3, #1
 800503c:	d107      	bne.n	800504e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800503e:	4b47      	ldr	r3, [pc, #284]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d115      	bne.n	8005076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800504a:	2301      	movs	r3, #1
 800504c:	e07f      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	2b02      	cmp	r3, #2
 8005054:	d107      	bne.n	8005066 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005056:	4b41      	ldr	r3, [pc, #260]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d109      	bne.n	8005076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e073      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005066:	4b3d      	ldr	r3, [pc, #244]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e06b      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005076:	4b39      	ldr	r3, [pc, #228]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f023 0203 	bic.w	r2, r3, #3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	4936      	ldr	r1, [pc, #216]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005084:	4313      	orrs	r3, r2
 8005086:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005088:	f7fd fb40 	bl	800270c <HAL_GetTick>
 800508c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005090:	f7fd fb3c 	bl	800270c <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e053      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a6:	4b2d      	ldr	r3, [pc, #180]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 020c 	and.w	r2, r3, #12
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d1eb      	bne.n	8005090 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050b8:	4b27      	ldr	r3, [pc, #156]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f003 030f 	and.w	r3, r3, #15
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d210      	bcs.n	80050e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050c6:	4b24      	ldr	r3, [pc, #144]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 020f 	bic.w	r2, r3, #15
 80050ce:	4922      	ldr	r1, [pc, #136]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b20      	ldr	r3, [pc, #128]	; (8005158 <HAL_RCC_ClockConfig+0x1c4>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 030f 	and.w	r3, r3, #15
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e032      	b.n	800514e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0304 	and.w	r3, r3, #4
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d008      	beq.n	8005106 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	4916      	ldr	r1, [pc, #88]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005102:	4313      	orrs	r3, r2
 8005104:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b00      	cmp	r3, #0
 8005110:	d009      	beq.n	8005126 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	00db      	lsls	r3, r3, #3
 8005120:	490e      	ldr	r1, [pc, #56]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 8005122:	4313      	orrs	r3, r2
 8005124:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005126:	f000 f821 	bl	800516c <HAL_RCC_GetSysClockFreq>
 800512a:	4602      	mov	r2, r0
 800512c:	4b0b      	ldr	r3, [pc, #44]	; (800515c <HAL_RCC_ClockConfig+0x1c8>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	091b      	lsrs	r3, r3, #4
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	490a      	ldr	r1, [pc, #40]	; (8005160 <HAL_RCC_ClockConfig+0x1cc>)
 8005138:	5ccb      	ldrb	r3, [r1, r3]
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	4a09      	ldr	r2, [pc, #36]	; (8005164 <HAL_RCC_ClockConfig+0x1d0>)
 8005140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005142:	4b09      	ldr	r3, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x1d4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f7fd fa9c 	bl	8002684 <HAL_InitTick>

  return HAL_OK;
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	40023c00 	.word	0x40023c00
 800515c:	40023800 	.word	0x40023800
 8005160:	0800c748 	.word	0x0800c748
 8005164:	20000000 	.word	0x20000000
 8005168:	20000004 	.word	0x20000004

0800516c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b094      	sub	sp, #80	; 0x50
 8005172:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	647b      	str	r3, [r7, #68]	; 0x44
 8005178:	2300      	movs	r3, #0
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517c:	2300      	movs	r3, #0
 800517e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005180:	2300      	movs	r3, #0
 8005182:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005184:	4b79      	ldr	r3, [pc, #484]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 030c 	and.w	r3, r3, #12
 800518c:	2b08      	cmp	r3, #8
 800518e:	d00d      	beq.n	80051ac <HAL_RCC_GetSysClockFreq+0x40>
 8005190:	2b08      	cmp	r3, #8
 8005192:	f200 80e1 	bhi.w	8005358 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_RCC_GetSysClockFreq+0x34>
 800519a:	2b04      	cmp	r3, #4
 800519c:	d003      	beq.n	80051a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800519e:	e0db      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a0:	4b73      	ldr	r3, [pc, #460]	; (8005370 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051a4:	e0db      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051a6:	4b72      	ldr	r3, [pc, #456]	; (8005370 <HAL_RCC_GetSysClockFreq+0x204>)
 80051a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051aa:	e0d8      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051ac:	4b6f      	ldr	r3, [pc, #444]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80051b6:	4b6d      	ldr	r3, [pc, #436]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d063      	beq.n	800528a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c2:	4b6a      	ldr	r3, [pc, #424]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	099b      	lsrs	r3, r3, #6
 80051c8:	2200      	movs	r2, #0
 80051ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80051cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80051ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051d4:	633b      	str	r3, [r7, #48]	; 0x30
 80051d6:	2300      	movs	r3, #0
 80051d8:	637b      	str	r3, [r7, #52]	; 0x34
 80051da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80051de:	4622      	mov	r2, r4
 80051e0:	462b      	mov	r3, r5
 80051e2:	f04f 0000 	mov.w	r0, #0
 80051e6:	f04f 0100 	mov.w	r1, #0
 80051ea:	0159      	lsls	r1, r3, #5
 80051ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f0:	0150      	lsls	r0, r2, #5
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	4621      	mov	r1, r4
 80051f8:	1a51      	subs	r1, r2, r1
 80051fa:	6139      	str	r1, [r7, #16]
 80051fc:	4629      	mov	r1, r5
 80051fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	f04f 0200 	mov.w	r2, #0
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005210:	4659      	mov	r1, fp
 8005212:	018b      	lsls	r3, r1, #6
 8005214:	4651      	mov	r1, sl
 8005216:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800521a:	4651      	mov	r1, sl
 800521c:	018a      	lsls	r2, r1, #6
 800521e:	4651      	mov	r1, sl
 8005220:	ebb2 0801 	subs.w	r8, r2, r1
 8005224:	4659      	mov	r1, fp
 8005226:	eb63 0901 	sbc.w	r9, r3, r1
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523e:	4690      	mov	r8, r2
 8005240:	4699      	mov	r9, r3
 8005242:	4623      	mov	r3, r4
 8005244:	eb18 0303 	adds.w	r3, r8, r3
 8005248:	60bb      	str	r3, [r7, #8]
 800524a:	462b      	mov	r3, r5
 800524c:	eb49 0303 	adc.w	r3, r9, r3
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800525e:	4629      	mov	r1, r5
 8005260:	028b      	lsls	r3, r1, #10
 8005262:	4621      	mov	r1, r4
 8005264:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005268:	4621      	mov	r1, r4
 800526a:	028a      	lsls	r2, r1, #10
 800526c:	4610      	mov	r0, r2
 800526e:	4619      	mov	r1, r3
 8005270:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005272:	2200      	movs	r2, #0
 8005274:	62bb      	str	r3, [r7, #40]	; 0x28
 8005276:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005278:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800527c:	f7fa ffc4 	bl	8000208 <__aeabi_uldivmod>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4613      	mov	r3, r2
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	e058      	b.n	800533c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800528a:	4b38      	ldr	r3, [pc, #224]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	099b      	lsrs	r3, r3, #6
 8005290:	2200      	movs	r2, #0
 8005292:	4618      	mov	r0, r3
 8005294:	4611      	mov	r1, r2
 8005296:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800529a:	623b      	str	r3, [r7, #32]
 800529c:	2300      	movs	r3, #0
 800529e:	627b      	str	r3, [r7, #36]	; 0x24
 80052a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	f04f 0000 	mov.w	r0, #0
 80052ac:	f04f 0100 	mov.w	r1, #0
 80052b0:	0159      	lsls	r1, r3, #5
 80052b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052b6:	0150      	lsls	r0, r2, #5
 80052b8:	4602      	mov	r2, r0
 80052ba:	460b      	mov	r3, r1
 80052bc:	4641      	mov	r1, r8
 80052be:	ebb2 0a01 	subs.w	sl, r2, r1
 80052c2:	4649      	mov	r1, r9
 80052c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80052c8:	f04f 0200 	mov.w	r2, #0
 80052cc:	f04f 0300 	mov.w	r3, #0
 80052d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80052d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052dc:	ebb2 040a 	subs.w	r4, r2, sl
 80052e0:	eb63 050b 	sbc.w	r5, r3, fp
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	00eb      	lsls	r3, r5, #3
 80052ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052f2:	00e2      	lsls	r2, r4, #3
 80052f4:	4614      	mov	r4, r2
 80052f6:	461d      	mov	r5, r3
 80052f8:	4643      	mov	r3, r8
 80052fa:	18e3      	adds	r3, r4, r3
 80052fc:	603b      	str	r3, [r7, #0]
 80052fe:	464b      	mov	r3, r9
 8005300:	eb45 0303 	adc.w	r3, r5, r3
 8005304:	607b      	str	r3, [r7, #4]
 8005306:	f04f 0200 	mov.w	r2, #0
 800530a:	f04f 0300 	mov.w	r3, #0
 800530e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005312:	4629      	mov	r1, r5
 8005314:	028b      	lsls	r3, r1, #10
 8005316:	4621      	mov	r1, r4
 8005318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800531c:	4621      	mov	r1, r4
 800531e:	028a      	lsls	r2, r1, #10
 8005320:	4610      	mov	r0, r2
 8005322:	4619      	mov	r1, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005326:	2200      	movs	r2, #0
 8005328:	61bb      	str	r3, [r7, #24]
 800532a:	61fa      	str	r2, [r7, #28]
 800532c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005330:	f7fa ff6a 	bl	8000208 <__aeabi_uldivmod>
 8005334:	4602      	mov	r2, r0
 8005336:	460b      	mov	r3, r1
 8005338:	4613      	mov	r3, r2
 800533a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800533c:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_GetSysClockFreq+0x200>)
 800533e:	685b      	ldr	r3, [r3, #4]
 8005340:	0c1b      	lsrs	r3, r3, #16
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	3301      	adds	r3, #1
 8005348:	005b      	lsls	r3, r3, #1
 800534a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800534c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800534e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005350:	fbb2 f3f3 	udiv	r3, r2, r3
 8005354:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005356:	e002      	b.n	800535e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005358:	4b05      	ldr	r3, [pc, #20]	; (8005370 <HAL_RCC_GetSysClockFreq+0x204>)
 800535a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800535c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800535e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005360:	4618      	mov	r0, r3
 8005362:	3750      	adds	r7, #80	; 0x50
 8005364:	46bd      	mov	sp, r7
 8005366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800536a:	bf00      	nop
 800536c:	40023800 	.word	0x40023800
 8005370:	00f42400 	.word	0x00f42400

08005374 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000000 	.word	0x20000000

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4903      	ldr	r1, [pc, #12]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	0800c758 	.word	0x0800c758

080053b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80053b8:	f7ff ffdc 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053bc:	4602      	mov	r2, r0
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	0b5b      	lsrs	r3, r3, #13
 80053c4:	f003 0307 	and.w	r3, r3, #7
 80053c8:	4903      	ldr	r1, [pc, #12]	; (80053d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053ca:	5ccb      	ldrb	r3, [r1, r3]
 80053cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	bd80      	pop	{r7, pc}
 80053d4:	40023800 	.word	0x40023800
 80053d8:	0800c758 	.word	0x0800c758

080053dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80053f0:	2300      	movs	r3, #0
 80053f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	d012      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005404:	4b69      	ldr	r3, [pc, #420]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a68      	ldr	r2, [pc, #416]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800540e:	6093      	str	r3, [r2, #8]
 8005410:	4b66      	ldr	r3, [pc, #408]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	4964      	ldr	r1, [pc, #400]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005426:	2301      	movs	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005432:	2b00      	cmp	r3, #0
 8005434:	d017      	beq.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005436:	4b5d      	ldr	r3, [pc, #372]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800543c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005444:	4959      	ldr	r1, [pc, #356]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005454:	d101      	bne.n	800545a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005456:	2301      	movs	r3, #1
 8005458:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005462:	2301      	movs	r3, #1
 8005464:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d017      	beq.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005472:	4b4e      	ldr	r3, [pc, #312]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005474:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	494a      	ldr	r1, [pc, #296]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005490:	d101      	bne.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005492:	2301      	movs	r3, #1
 8005494:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549a:	2b00      	cmp	r3, #0
 800549c:	d101      	bne.n	80054a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800549e:	2301      	movs	r3, #1
 80054a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d001      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	f000 808b 	beq.w	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80054c0:	4b3a      	ldr	r3, [pc, #232]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c4:	4a39      	ldr	r2, [pc, #228]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054ca:	6413      	str	r3, [r2, #64]	; 0x40
 80054cc:	4b37      	ldr	r3, [pc, #220]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80054d8:	4b35      	ldr	r3, [pc, #212]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a34      	ldr	r2, [pc, #208]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80054de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054e4:	f7fd f912 	bl	800270c <HAL_GetTick>
 80054e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054ea:	e008      	b.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ec:	f7fd f90e 	bl	800270c <HAL_GetTick>
 80054f0:	4602      	mov	r2, r0
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b64      	cmp	r3, #100	; 0x64
 80054f8:	d901      	bls.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80054fa:	2303      	movs	r3, #3
 80054fc:	e357      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80054fe:	4b2c      	ldr	r3, [pc, #176]	; (80055b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005506:	2b00      	cmp	r3, #0
 8005508:	d0f0      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800550a:	4b28      	ldr	r3, [pc, #160]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800550c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d035      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	429a      	cmp	r2, r3
 8005526:	d02e      	beq.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005528:	4b20      	ldr	r3, [pc, #128]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800552a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005530:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005532:	4b1e      	ldr	r3, [pc, #120]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005536:	4a1d      	ldr	r2, [pc, #116]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800553c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800553e:	4b1b      	ldr	r3, [pc, #108]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005542:	4a1a      	ldr	r2, [pc, #104]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005544:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005548:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800554a:	4a18      	ldr	r2, [pc, #96]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005550:	4b16      	ldr	r3, [pc, #88]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b01      	cmp	r3, #1
 800555a:	d114      	bne.n	8005586 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800555c:	f7fd f8d6 	bl	800270c <HAL_GetTick>
 8005560:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005562:	e00a      	b.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005564:	f7fd f8d2 	bl	800270c <HAL_GetTick>
 8005568:	4602      	mov	r2, r0
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005572:	4293      	cmp	r3, r2
 8005574:	d901      	bls.n	800557a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e319      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800557a:	4b0c      	ldr	r3, [pc, #48]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d0ee      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800558e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005592:	d111      	bne.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005594:	4b05      	ldr	r3, [pc, #20]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055a0:	4b04      	ldr	r3, [pc, #16]	; (80055b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055a2:	400b      	ands	r3, r1
 80055a4:	4901      	ldr	r1, [pc, #4]	; (80055ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a6:	4313      	orrs	r3, r2
 80055a8:	608b      	str	r3, [r1, #8]
 80055aa:	e00b      	b.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80055ac:	40023800 	.word	0x40023800
 80055b0:	40007000 	.word	0x40007000
 80055b4:	0ffffcff 	.word	0x0ffffcff
 80055b8:	4baa      	ldr	r3, [pc, #680]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	4aa9      	ldr	r2, [pc, #676]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80055c2:	6093      	str	r3, [r2, #8]
 80055c4:	4ba7      	ldr	r3, [pc, #668]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055d0:	49a4      	ldr	r1, [pc, #656]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d2:	4313      	orrs	r3, r2
 80055d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80055e2:	4ba0      	ldr	r3, [pc, #640]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e8:	4a9e      	ldr	r2, [pc, #632]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80055f2:	4b9c      	ldr	r3, [pc, #624]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fc:	4999      	ldr	r1, [pc, #612]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800560c:	2b00      	cmp	r3, #0
 800560e:	d00a      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005610:	4b94      	ldr	r3, [pc, #592]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005616:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800561e:	4991      	ldr	r1, [pc, #580]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005620:	4313      	orrs	r3, r2
 8005622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005632:	4b8c      	ldr	r3, [pc, #560]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005638:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005640:	4988      	ldr	r1, [pc, #544]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005642:	4313      	orrs	r3, r2
 8005644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00a      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005654:	4b83      	ldr	r3, [pc, #524]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005662:	4980      	ldr	r1, [pc, #512]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00a      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005676:	4b7b      	ldr	r3, [pc, #492]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800567c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005684:	4977      	ldr	r1, [pc, #476]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005686:	4313      	orrs	r3, r2
 8005688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00a      	beq.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005698:	4b72      	ldr	r3, [pc, #456]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569e:	f023 0203 	bic.w	r2, r3, #3
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a6:	496f      	ldr	r1, [pc, #444]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056a8:	4313      	orrs	r3, r2
 80056aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d00a      	beq.n	80056d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80056ba:	4b6a      	ldr	r3, [pc, #424]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c0:	f023 020c 	bic.w	r2, r3, #12
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056c8:	4966      	ldr	r1, [pc, #408]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d00a      	beq.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80056dc:	4b61      	ldr	r3, [pc, #388]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056ea:	495e      	ldr	r1, [pc, #376]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ec:	4313      	orrs	r3, r2
 80056ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00a      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80056fe:	4b59      	ldr	r3, [pc, #356]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005704:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800570c:	4955      	ldr	r1, [pc, #340]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00a      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005720:	4b50      	ldr	r3, [pc, #320]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800572e:	494d      	ldr	r1, [pc, #308]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005730:	4313      	orrs	r3, r2
 8005732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00a      	beq.n	8005758 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005742:	4b48      	ldr	r3, [pc, #288]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005750:	4944      	ldr	r1, [pc, #272]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005752:	4313      	orrs	r3, r2
 8005754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00a      	beq.n	800577a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005764:	4b3f      	ldr	r3, [pc, #252]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005772:	493c      	ldr	r1, [pc, #240]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005774:	4313      	orrs	r3, r2
 8005776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00a      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005786:	4b37      	ldr	r3, [pc, #220]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005794:	4933      	ldr	r1, [pc, #204]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00a      	beq.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80057a8:	4b2e      	ldr	r3, [pc, #184]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057b6:	492b      	ldr	r1, [pc, #172]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80057ca:	4b26      	ldr	r3, [pc, #152]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057d8:	4922      	ldr	r1, [pc, #136]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057da:	4313      	orrs	r3, r2
 80057dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057e8:	d101      	bne.n	80057ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80057ea:	2301      	movs	r3, #1
 80057ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0308 	and.w	r3, r3, #8
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d001      	beq.n	80057fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80057fa:	2301      	movs	r3, #1
 80057fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800580a:	4b16      	ldr	r3, [pc, #88]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005810:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005818:	4912      	ldr	r1, [pc, #72]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800581a:	4313      	orrs	r3, r2
 800581c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800582c:	4b0d      	ldr	r3, [pc, #52]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800582e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005832:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800583c:	4909      	ldr	r1, [pc, #36]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800583e:	4313      	orrs	r3, r2
 8005840:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d006      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005852:	2b00      	cmp	r3, #0
 8005854:	f000 80d9 	beq.w	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005858:	4b02      	ldr	r3, [pc, #8]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a01      	ldr	r2, [pc, #4]	; (8005864 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800585e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005862:	e001      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005864:	40023800 	.word	0x40023800
 8005868:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800586a:	f7fc ff4f 	bl	800270c <HAL_GetTick>
 800586e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005870:	e008      	b.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005872:	f7fc ff4b 	bl	800270c <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d901      	bls.n	8005884 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e194      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005884:	4b6c      	ldr	r3, [pc, #432]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1f0      	bne.n	8005872 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f003 0301 	and.w	r3, r3, #1
 8005898:	2b00      	cmp	r3, #0
 800589a:	d021      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d11d      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058a4:	4b64      	ldr	r3, [pc, #400]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	f003 0303 	and.w	r3, r3, #3
 80058b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80058b2:	4b61      	ldr	r3, [pc, #388]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058b8:	0e1b      	lsrs	r3, r3, #24
 80058ba:	f003 030f 	and.w	r3, r3, #15
 80058be:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	019a      	lsls	r2, r3, #6
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	041b      	lsls	r3, r3, #16
 80058ca:	431a      	orrs	r2, r3
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	061b      	lsls	r3, r3, #24
 80058d0:	431a      	orrs	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	071b      	lsls	r3, r3, #28
 80058d8:	4957      	ldr	r1, [pc, #348]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d004      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058f4:	d00a      	beq.n	800590c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d02e      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800590a:	d129      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800590c:	4b4a      	ldr	r3, [pc, #296]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800590e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005912:	0c1b      	lsrs	r3, r3, #16
 8005914:	f003 0303 	and.w	r3, r3, #3
 8005918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800591c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005920:	0f1b      	lsrs	r3, r3, #28
 8005922:	f003 0307 	and.w	r3, r3, #7
 8005926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	019a      	lsls	r2, r3, #6
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	041b      	lsls	r3, r3, #16
 8005932:	431a      	orrs	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	061b      	lsls	r3, r3, #24
 800593a:	431a      	orrs	r2, r3
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	071b      	lsls	r3, r3, #28
 8005940:	493d      	ldr	r1, [pc, #244]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005948:	4b3b      	ldr	r3, [pc, #236]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800594a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800594e:	f023 021f 	bic.w	r2, r3, #31
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005956:	3b01      	subs	r3, #1
 8005958:	4937      	ldr	r1, [pc, #220]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d01d      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800596c:	4b32      	ldr	r3, [pc, #200]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800596e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005972:	0e1b      	lsrs	r3, r3, #24
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800597a:	4b2f      	ldr	r3, [pc, #188]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800597c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005980:	0f1b      	lsrs	r3, r3, #28
 8005982:	f003 0307 	and.w	r3, r3, #7
 8005986:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	019a      	lsls	r2, r3, #6
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	041b      	lsls	r3, r3, #16
 8005994:	431a      	orrs	r2, r3
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	061b      	lsls	r3, r3, #24
 800599a:	431a      	orrs	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	071b      	lsls	r3, r3, #28
 80059a0:	4925      	ldr	r1, [pc, #148]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d011      	beq.n	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	019a      	lsls	r2, r3, #6
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	691b      	ldr	r3, [r3, #16]
 80059be:	041b      	lsls	r3, r3, #16
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	68db      	ldr	r3, [r3, #12]
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	689b      	ldr	r3, [r3, #8]
 80059ce:	071b      	lsls	r3, r3, #28
 80059d0:	4919      	ldr	r1, [pc, #100]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059d8:	4b17      	ldr	r3, [pc, #92]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4a16      	ldr	r2, [pc, #88]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059de:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80059e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059e4:	f7fc fe92 	bl	800270c <HAL_GetTick>
 80059e8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ea:	e008      	b.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059ec:	f7fc fe8e 	bl	800270c <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b64      	cmp	r3, #100	; 0x64
 80059f8:	d901      	bls.n	80059fe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e0d7      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059fe:	4b0e      	ldr	r3, [pc, #56]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	f040 80cd 	bne.w	8005bac <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a08      	ldr	r2, [pc, #32]	; (8005a38 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a1c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a1e:	f7fc fe75 	bl	800270c <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a24:	e00a      	b.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a26:	f7fc fe71 	bl	800270c <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b64      	cmp	r3, #100	; 0x64
 8005a32:	d903      	bls.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e0ba      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a38:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a3c:	4b5e      	ldr	r3, [pc, #376]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a48:	d0ed      	beq.n	8005a26 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d003      	beq.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d02e      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d12a      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005a72:	4b51      	ldr	r3, [pc, #324]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a78:	0c1b      	lsrs	r3, r3, #16
 8005a7a:	f003 0303 	and.w	r3, r3, #3
 8005a7e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a80:	4b4d      	ldr	r3, [pc, #308]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a86:	0f1b      	lsrs	r3, r3, #28
 8005a88:	f003 0307 	and.w	r3, r3, #7
 8005a8c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	019a      	lsls	r2, r3, #6
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	041b      	lsls	r3, r3, #16
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	061b      	lsls	r3, r3, #24
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	071b      	lsls	r3, r3, #28
 8005aa6:	4944      	ldr	r1, [pc, #272]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005aae:	4b42      	ldr	r3, [pc, #264]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ab0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ab4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005abc:	3b01      	subs	r3, #1
 8005abe:	021b      	lsls	r3, r3, #8
 8005ac0:	493d      	ldr	r1, [pc, #244]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d022      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ad8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005adc:	d11d      	bne.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005ade:	4b36      	ldr	r3, [pc, #216]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae4:	0e1b      	lsrs	r3, r3, #24
 8005ae6:	f003 030f 	and.w	r3, r3, #15
 8005aea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005aec:	4b32      	ldr	r3, [pc, #200]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	0f1b      	lsrs	r3, r3, #28
 8005af4:	f003 0307 	and.w	r3, r3, #7
 8005af8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	019a      	lsls	r2, r3, #6
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	041b      	lsls	r3, r3, #16
 8005b06:	431a      	orrs	r2, r3
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	061b      	lsls	r3, r3, #24
 8005b0c:	431a      	orrs	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	071b      	lsls	r3, r3, #28
 8005b12:	4929      	ldr	r1, [pc, #164]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d028      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b26:	4b24      	ldr	r3, [pc, #144]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	0e1b      	lsrs	r3, r3, #24
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b34:	4b20      	ldr	r3, [pc, #128]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	0c1b      	lsrs	r3, r3, #16
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	019a      	lsls	r2, r3, #6
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	041b      	lsls	r3, r3, #16
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	061b      	lsls	r3, r3, #24
 8005b52:	431a      	orrs	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	4917      	ldr	r1, [pc, #92]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005b62:	4b15      	ldr	r3, [pc, #84]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b68:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b70:	4911      	ldr	r1, [pc, #68]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005b78:	4b0f      	ldr	r3, [pc, #60]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a0e      	ldr	r2, [pc, #56]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fc fdc2 	bl	800270c <HAL_GetTick>
 8005b88:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005b8c:	f7fc fdbe 	bl	800270c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b64      	cmp	r3, #100	; 0x64
 8005b98:	d901      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e007      	b.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005b9e:	4b06      	ldr	r3, [pc, #24]	; (8005bb8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ba6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005baa:	d1ef      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40023800 	.word	0x40023800

08005bbc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d101      	bne.n	8005bce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	e022      	b.n	8005c14 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d105      	bne.n	8005be6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fb fa6f 	bl	80010c4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2203      	movs	r2, #3
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f814 	bl	8005c1c <HAL_SD_InitCard>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d001      	beq.n	8005bfe <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e00a      	b.n	8005c14 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3708      	adds	r7, #8
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005c1c:	b5b0      	push	{r4, r5, r7, lr}
 8005c1e:	b08e      	sub	sp, #56	; 0x38
 8005c20:	af04      	add	r7, sp, #16
 8005c22:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005c24:	2300      	movs	r3, #0
 8005c26:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005c30:	2300      	movs	r3, #0
 8005c32:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8005c38:	2376      	movs	r3, #118	; 0x76
 8005c3a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681d      	ldr	r5, [r3, #0]
 8005c40:	466c      	mov	r4, sp
 8005c42:	f107 0314 	add.w	r3, r7, #20
 8005c46:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005c4a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005c4e:	f107 0308 	add.w	r3, r7, #8
 8005c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c54:	4628      	mov	r0, r5
 8005c56:	f001 fdf9 	bl	800784c <SDMMC_Init>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005c60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e059      	b.n	8005d20 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c7a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 fe1c 	bl	80078be <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c94:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8005c96:	2002      	movs	r0, #2
 8005c98:	f7fc fd44 	bl	8002724 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fb51 	bl	8006344 <SD_PowerON>
 8005ca2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00b      	beq.n	8005cc2 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2201      	movs	r2, #1
 8005cae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e02e      	b.n	8005d20 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fa70 	bl	80061a8 <SD_InitCard>
 8005cc8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00b      	beq.n	8005ce8 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	431a      	orrs	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	e01b      	b.n	8005d20 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f001 fe77 	bl	80079e4 <SDMMC_CmdBlockLength>
 8005cf6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00f      	beq.n	8005d1e <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a09      	ldr	r2, [pc, #36]	; (8005d28 <HAL_SD_InitCard+0x10c>)
 8005d04:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	431a      	orrs	r2, r3
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e000      	b.n	8005d20 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3728      	adds	r7, #40	; 0x28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bdb0      	pop	{r4, r5, r7, pc}
 8005d28:	004005ff 	.word	0x004005ff

08005d2c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d3a:	0f9b      	lsrs	r3, r3, #30
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d46:	0e9b      	lsrs	r3, r3, #26
 8005d48:	b2db      	uxtb	r3, r3
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	b2da      	uxtb	r2, r3
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d58:	0e1b      	lsrs	r3, r3, #24
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	f003 0303 	and.w	r3, r3, #3
 8005d60:	b2da      	uxtb	r2, r3
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6a:	0c1b      	lsrs	r3, r3, #16
 8005d6c:	b2da      	uxtb	r2, r3
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d76:	0a1b      	lsrs	r3, r3, #8
 8005d78:	b2da      	uxtb	r2, r3
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d82:	b2da      	uxtb	r2, r3
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d8c:	0d1b      	lsrs	r3, r3, #20
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	b2db      	uxtb	r3, r3
 8005d9c:	f003 030f 	and.w	r3, r3, #15
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005daa:	0bdb      	lsrs	r3, r3, #15
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dbc:	0b9b      	lsrs	r3, r3, #14
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005dce:	0b5b      	lsrs	r3, r3, #13
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005de0:	0b1b      	lsrs	r3, r3, #12
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	b2da      	uxtb	r2, r3
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2200      	movs	r2, #0
 8005df2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d163      	bne.n	8005ec4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005e00:	009a      	lsls	r2, r3, #2
 8005e02:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005e06:	4013      	ands	r3, r2
 8005e08:	687a      	ldr	r2, [r7, #4]
 8005e0a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005e0c:	0f92      	lsrs	r2, r2, #30
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e18:	0edb      	lsrs	r3, r3, #27
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	f003 0307 	and.w	r3, r3, #7
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e2a:	0e1b      	lsrs	r3, r3, #24
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	f003 0307 	and.w	r3, r3, #7
 8005e32:	b2da      	uxtb	r2, r3
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e3c:	0d5b      	lsrs	r3, r3, #21
 8005e3e:	b2db      	uxtb	r3, r3
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	b2da      	uxtb	r2, r3
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4e:	0c9b      	lsrs	r3, r3, #18
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	b2da      	uxtb	r2, r3
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e60:	0bdb      	lsrs	r3, r3, #15
 8005e62:	b2db      	uxtb	r3, r3
 8005e64:	f003 0307 	and.w	r3, r3, #7
 8005e68:	b2da      	uxtb	r2, r3
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	7e1b      	ldrb	r3, [r3, #24]
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	3302      	adds	r3, #2
 8005e84:	2201      	movs	r2, #1
 8005e86:	fa02 f303 	lsl.w	r3, r2, r3
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005e8e:	fb03 f202 	mul.w	r2, r3, r2
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	7a1b      	ldrb	r3, [r3, #8]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 030f 	and.w	r3, r3, #15
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	409a      	lsls	r2, r3
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005eb0:	0a52      	lsrs	r2, r2, #9
 8005eb2:	fb03 f202 	mul.w	r2, r3, r2
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ec0:	661a      	str	r2, [r3, #96]	; 0x60
 8005ec2:	e031      	b.n	8005f28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d11d      	bne.n	8005f08 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ed0:	041b      	lsls	r3, r3, #16
 8005ed2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	431a      	orrs	r2, r3
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	691b      	ldr	r3, [r3, #16]
 8005ee6:	3301      	adds	r3, #1
 8005ee8:	029a      	lsls	r2, r3, #10
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005efc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	661a      	str	r2, [r3, #96]	; 0x60
 8005f06:	e00f      	b.n	8005f28 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a58      	ldr	r2, [pc, #352]	; (8006070 <HAL_SD_GetCardCSD+0x344>)
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e09d      	b.n	8006064 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2c:	0b9b      	lsrs	r3, r3, #14
 8005f2e:	b2db      	uxtb	r3, r3
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3e:	09db      	lsrs	r3, r3, #7
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f56:	b2da      	uxtb	r2, r3
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	0fdb      	lsrs	r3, r3, #31
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6c:	0f5b      	lsrs	r3, r3, #29
 8005f6e:	b2db      	uxtb	r3, r3
 8005f70:	f003 0303 	and.w	r3, r3, #3
 8005f74:	b2da      	uxtb	r2, r3
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	0e9b      	lsrs	r3, r3, #26
 8005f80:	b2db      	uxtb	r3, r3
 8005f82:	f003 0307 	and.w	r3, r3, #7
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f90:	0d9b      	lsrs	r3, r3, #22
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	f003 030f 	and.w	r3, r3, #15
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa2:	0d5b      	lsrs	r3, r3, #21
 8005fa4:	b2db      	uxtb	r3, r3
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	b2da      	uxtb	r2, r3
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fbe:	0c1b      	lsrs	r3, r3, #16
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0301 	and.w	r3, r3, #1
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	0bdb      	lsrs	r3, r3, #15
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	0b9b      	lsrs	r3, r3, #14
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	b2da      	uxtb	r2, r3
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ffa:	0b5b      	lsrs	r3, r3, #13
 8005ffc:	b2db      	uxtb	r3, r3
 8005ffe:	f003 0301 	and.w	r3, r3, #1
 8006002:	b2da      	uxtb	r2, r3
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800600e:	0b1b      	lsrs	r3, r3, #12
 8006010:	b2db      	uxtb	r3, r3
 8006012:	f003 0301 	and.w	r3, r3, #1
 8006016:	b2da      	uxtb	r2, r3
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006022:	0a9b      	lsrs	r3, r3, #10
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f003 0303 	and.w	r3, r3, #3
 800602a:	b2da      	uxtb	r2, r3
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f003 0303 	and.w	r3, r3, #3
 800603e:	b2da      	uxtb	r2, r3
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006052:	b2da      	uxtb	r2, r3
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006062:	2300      	movs	r3, #0
}
 8006064:	4618      	mov	r0, r3
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr
 8006070:	004005ff 	.word	0x004005ff

08006074 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006074:	b5b0      	push	{r4, r5, r7, lr}
 8006076:	b08e      	sub	sp, #56	; 0x38
 8006078:	af04      	add	r7, sp, #16
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800607e:	2300      	movs	r3, #0
 8006080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2203      	movs	r2, #3
 8006088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006090:	2b03      	cmp	r3, #3
 8006092:	d02e      	beq.n	80060f2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800609a:	d106      	bne.n	80060aa <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38
 80060a8:	e029      	b.n	80060fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060b0:	d10a      	bne.n	80060c8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f9d4 	bl	8006460 <SD_WideBus_Enable>
 80060b8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060be:	6a3b      	ldr	r3, [r7, #32]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	639a      	str	r2, [r3, #56]	; 0x38
 80060c6:	e01a      	b.n	80060fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10a      	bne.n	80060e4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fa11 	bl	80064f6 <SD_WideBus_Disable>
 80060d4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	639a      	str	r2, [r3, #56]	; 0x38
 80060e2:	e00c      	b.n	80060fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	639a      	str	r2, [r3, #56]	; 0x38
 80060f0:	e005      	b.n	80060fe <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00b      	beq.n	800611e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a26      	ldr	r2, [pc, #152]	; (80061a4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800610c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800611c:	e01f      	b.n	800615e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681d      	ldr	r5, [r3, #0]
 8006144:	466c      	mov	r4, sp
 8006146:	f107 0314 	add.w	r3, r7, #20
 800614a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800614e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006152:	f107 0308 	add.w	r3, r7, #8
 8006156:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006158:	4628      	mov	r0, r5
 800615a:	f001 fb77 	bl	800784c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006166:	4618      	mov	r0, r3
 8006168:	f001 fc3c 	bl	80079e4 <SDMMC_CmdBlockLength>
 800616c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800616e:	6a3b      	ldr	r3, [r7, #32]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00c      	beq.n	800618e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a0a      	ldr	r2, [pc, #40]	; (80061a4 <HAL_SD_ConfigWideBusOperation+0x130>)
 800617a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006180:	6a3b      	ldr	r3, [r7, #32]
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006196:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800619a:	4618      	mov	r0, r3
 800619c:	3728      	adds	r7, #40	; 0x28
 800619e:	46bd      	mov	sp, r7
 80061a0:	bdb0      	pop	{r4, r5, r7, pc}
 80061a2:	bf00      	nop
 80061a4:	004005ff 	.word	0x004005ff

080061a8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b094      	sub	sp, #80	; 0x50
 80061ac:	af04      	add	r7, sp, #16
 80061ae:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80061b0:	2301      	movs	r3, #1
 80061b2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f001 fb8e 	bl	80078da <SDMMC_GetPowerState>
 80061be:	4603      	mov	r3, r0
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80061c4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80061c8:	e0b8      	b.n	800633c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ce:	2b03      	cmp	r3, #3
 80061d0:	d02f      	beq.n	8006232 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4618      	mov	r0, r3
 80061d8:	f001 fd0f 	bl	8007bfa <SDMMC_CmdSendCID>
 80061dc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d001      	beq.n	80061e8 <SD_InitCard+0x40>
    {
      return errorstate;
 80061e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061e6:	e0a9      	b.n	800633c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f001 fbb9 	bl	8007966 <SDMMC_GetResponse>
 80061f4:	4602      	mov	r2, r0
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2104      	movs	r1, #4
 8006200:	4618      	mov	r0, r3
 8006202:	f001 fbb0 	bl	8007966 <SDMMC_GetResponse>
 8006206:	4602      	mov	r2, r0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2108      	movs	r1, #8
 8006212:	4618      	mov	r0, r3
 8006214:	f001 fba7 	bl	8007966 <SDMMC_GetResponse>
 8006218:	4602      	mov	r2, r0
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	210c      	movs	r1, #12
 8006224:	4618      	mov	r0, r3
 8006226:	f001 fb9e 	bl	8007966 <SDMMC_GetResponse>
 800622a:	4602      	mov	r2, r0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006236:	2b03      	cmp	r3, #3
 8006238:	d00d      	beq.n	8006256 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f107 020e 	add.w	r2, r7, #14
 8006242:	4611      	mov	r1, r2
 8006244:	4618      	mov	r0, r3
 8006246:	f001 fd15 	bl	8007c74 <SDMMC_CmdSetRelAdd>
 800624a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800624c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <SD_InitCard+0xae>
    {
      return errorstate;
 8006252:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006254:	e072      	b.n	800633c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625a:	2b03      	cmp	r3, #3
 800625c:	d036      	beq.n	80062cc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800625e:	89fb      	ldrh	r3, [r7, #14]
 8006260:	461a      	mov	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	4619      	mov	r1, r3
 8006272:	4610      	mov	r0, r2
 8006274:	f001 fcdf 	bl	8007c36 <SDMMC_CmdSendCSD>
 8006278:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d001      	beq.n	8006284 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006280:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006282:	e05b      	b.n	800633c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2100      	movs	r1, #0
 800628a:	4618      	mov	r0, r3
 800628c:	f001 fb6b 	bl	8007966 <SDMMC_GetResponse>
 8006290:	4602      	mov	r2, r0
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2104      	movs	r1, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f001 fb62 	bl	8007966 <SDMMC_GetResponse>
 80062a2:	4602      	mov	r2, r0
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2108      	movs	r1, #8
 80062ae:	4618      	mov	r0, r3
 80062b0:	f001 fb59 	bl	8007966 <SDMMC_GetResponse>
 80062b4:	4602      	mov	r2, r0
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	210c      	movs	r1, #12
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 fb50 	bl	8007966 <SDMMC_GetResponse>
 80062c6:	4602      	mov	r2, r0
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2104      	movs	r1, #4
 80062d2:	4618      	mov	r0, r3
 80062d4:	f001 fb47 	bl	8007966 <SDMMC_GetResponse>
 80062d8:	4603      	mov	r3, r0
 80062da:	0d1a      	lsrs	r2, r3, #20
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80062e0:	f107 0310 	add.w	r3, r7, #16
 80062e4:	4619      	mov	r1, r3
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f7ff fd20 	bl	8005d2c <HAL_SD_GetCardCSD>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062f2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062f6:	e021      	b.n	800633c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6819      	ldr	r1, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006300:	041b      	lsls	r3, r3, #16
 8006302:	2200      	movs	r2, #0
 8006304:	461c      	mov	r4, r3
 8006306:	4615      	mov	r5, r2
 8006308:	4622      	mov	r2, r4
 800630a:	462b      	mov	r3, r5
 800630c:	4608      	mov	r0, r1
 800630e:	f001 fb8b 	bl	8007a28 <SDMMC_CmdSelDesel>
 8006312:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006316:	2b00      	cmp	r3, #0
 8006318:	d001      	beq.n	800631e <SD_InitCard+0x176>
  {
    return errorstate;
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	e00e      	b.n	800633c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681d      	ldr	r5, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	466c      	mov	r4, sp
 8006326:	f103 0210 	add.w	r2, r3, #16
 800632a:	ca07      	ldmia	r2, {r0, r1, r2}
 800632c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006330:	3304      	adds	r3, #4
 8006332:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006334:	4628      	mov	r0, r5
 8006336:	f001 fa89 	bl	800784c <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3740      	adds	r7, #64	; 0x40
 8006340:	46bd      	mov	sp, r7
 8006342:	bdb0      	pop	{r4, r5, r7, pc}

08006344 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b086      	sub	sp, #24
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800634c:	2300      	movs	r3, #0
 800634e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	617b      	str	r3, [r7, #20]
 8006354:	2300      	movs	r3, #0
 8006356:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fb86 	bl	8007a6e <SDMMC_CmdGoIdleState>
 8006362:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d001      	beq.n	800636e <SD_PowerON+0x2a>
  {
    return errorstate;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	e072      	b.n	8006454 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4618      	mov	r0, r3
 8006374:	f001 fb99 	bl	8007aaa <SDMMC_CmdOperCond>
 8006378:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d00d      	beq.n	800639c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4618      	mov	r0, r3
 800638c:	f001 fb6f 	bl	8007a6e <SDMMC_CmdGoIdleState>
 8006390:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	e05b      	b.n	8006454 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d137      	bne.n	800641a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f001 fb99 	bl	8007ae8 <SDMMC_CmdAppCommand>
 80063b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d02d      	beq.n	800641a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063c2:	e047      	b.n	8006454 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f001 fb8c 	bl	8007ae8 <SDMMC_CmdAppCommand>
 80063d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d001      	beq.n	80063dc <SD_PowerON+0x98>
    {
      return errorstate;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	e03b      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	491e      	ldr	r1, [pc, #120]	; (800645c <SD_PowerON+0x118>)
 80063e2:	4618      	mov	r0, r3
 80063e4:	f001 fba2 	bl	8007b2c <SDMMC_CmdAppOperCommand>
 80063e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d002      	beq.n	80063f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063f4:	e02e      	b.n	8006454 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2100      	movs	r1, #0
 80063fc:	4618      	mov	r0, r3
 80063fe:	f001 fab2 	bl	8007966 <SDMMC_GetResponse>
 8006402:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	0fdb      	lsrs	r3, r3, #31
 8006408:	2b01      	cmp	r3, #1
 800640a:	d101      	bne.n	8006410 <SD_PowerON+0xcc>
 800640c:	2301      	movs	r3, #1
 800640e:	e000      	b.n	8006412 <SD_PowerON+0xce>
 8006410:	2300      	movs	r3, #0
 8006412:	613b      	str	r3, [r7, #16]

    count++;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	3301      	adds	r3, #1
 8006418:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006420:	4293      	cmp	r3, r2
 8006422:	d802      	bhi.n	800642a <SD_PowerON+0xe6>
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d0cc      	beq.n	80063c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006430:	4293      	cmp	r3, r2
 8006432:	d902      	bls.n	800643a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006434:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006438:	e00c      	b.n	8006454 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d003      	beq.n	800644c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2201      	movs	r2, #1
 8006448:	645a      	str	r2, [r3, #68]	; 0x44
 800644a:	e002      	b.n	8006452 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}
 800645c:	c1100000 	.word	0xc1100000

08006460 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b086      	sub	sp, #24
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006468:	2300      	movs	r3, #0
 800646a:	60fb      	str	r3, [r7, #12]
 800646c:	2300      	movs	r3, #0
 800646e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	2100      	movs	r1, #0
 8006476:	4618      	mov	r0, r3
 8006478:	f001 fa75 	bl	8007966 <SDMMC_GetResponse>
 800647c:	4603      	mov	r3, r0
 800647e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006486:	d102      	bne.n	800648e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800648c:	e02f      	b.n	80064ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800648e:	f107 030c 	add.w	r3, r7, #12
 8006492:	4619      	mov	r1, r3
 8006494:	6878      	ldr	r0, [r7, #4]
 8006496:	f000 f879 	bl	800658c <SD_FindSCR>
 800649a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d001      	beq.n	80064a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	e023      	b.n	80064ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01c      	beq.n	80064ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064b8:	041b      	lsls	r3, r3, #16
 80064ba:	4619      	mov	r1, r3
 80064bc:	4610      	mov	r0, r2
 80064be:	f001 fb13 	bl	8007ae8 <SDMMC_CmdAppCommand>
 80064c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d001      	beq.n	80064ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	e00f      	b.n	80064ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	2102      	movs	r1, #2
 80064d4:	4618      	mov	r0, r3
 80064d6:	f001 fb4d 	bl	8007b74 <SDMMC_CmdBusWidth>
 80064da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	e003      	b.n	80064ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e001      	b.n	80064ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064ea:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	3718      	adds	r7, #24
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}

080064f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80064f6:	b580      	push	{r7, lr}
 80064f8:	b086      	sub	sp, #24
 80064fa:	af00      	add	r7, sp, #0
 80064fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2100      	movs	r1, #0
 800650c:	4618      	mov	r0, r3
 800650e:	f001 fa2a 	bl	8007966 <SDMMC_GetResponse>
 8006512:	4603      	mov	r3, r0
 8006514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006518:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800651c:	d102      	bne.n	8006524 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800651e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006522:	e02f      	b.n	8006584 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006524:	f107 030c 	add.w	r3, r7, #12
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f82e 	bl	800658c <SD_FindSCR>
 8006530:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d001      	beq.n	800653c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	e023      	b.n	8006584 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800653c:	693b      	ldr	r3, [r7, #16]
 800653e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01c      	beq.n	8006580 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800654e:	041b      	lsls	r3, r3, #16
 8006550:	4619      	mov	r1, r3
 8006552:	4610      	mov	r0, r2
 8006554:	f001 fac8 	bl	8007ae8 <SDMMC_CmdAppCommand>
 8006558:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	e00f      	b.n	8006584 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	2100      	movs	r1, #0
 800656a:	4618      	mov	r0, r3
 800656c:	f001 fb02 	bl	8007b74 <SDMMC_CmdBusWidth>
 8006570:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d001      	beq.n	800657c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006578:	697b      	ldr	r3, [r7, #20]
 800657a:	e003      	b.n	8006584 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800657c:	2300      	movs	r3, #0
 800657e:	e001      	b.n	8006584 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006580:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	3718      	adds	r7, #24
 8006588:	46bd      	mov	sp, r7
 800658a:	bd80      	pop	{r7, pc}

0800658c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800658c:	b590      	push	{r4, r7, lr}
 800658e:	b08f      	sub	sp, #60	; 0x3c
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006596:	f7fc f8b9 	bl	800270c <HAL_GetTick>
 800659a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800659c:	2300      	movs	r3, #0
 800659e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065a0:	2300      	movs	r3, #0
 80065a2:	60bb      	str	r3, [r7, #8]
 80065a4:	2300      	movs	r3, #0
 80065a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	2108      	movs	r1, #8
 80065b2:	4618      	mov	r0, r3
 80065b4:	f001 fa16 	bl	80079e4 <SDMMC_CmdBlockLength>
 80065b8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d001      	beq.n	80065c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80065c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c2:	e0b2      	b.n	800672a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065cc:	041b      	lsls	r3, r3, #16
 80065ce:	4619      	mov	r1, r3
 80065d0:	4610      	mov	r0, r2
 80065d2:	f001 fa89 	bl	8007ae8 <SDMMC_CmdAppCommand>
 80065d6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80065de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e0:	e0a3      	b.n	800672a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065e2:	f04f 33ff 	mov.w	r3, #4294967295
 80065e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80065e8:	2308      	movs	r3, #8
 80065ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80065ec:	2330      	movs	r3, #48	; 0x30
 80065ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80065f0:	2302      	movs	r3, #2
 80065f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80065f4:	2300      	movs	r3, #0
 80065f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80065f8:	2301      	movs	r3, #1
 80065fa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f107 0210 	add.w	r2, r7, #16
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f9c0 	bl	800798c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f001 fad1 	bl	8007bb8 <SDMMC_CmdSendSCR>
 8006616:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02a      	beq.n	8006674 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	e083      	b.n	800672a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800662c:	2b00      	cmp	r3, #0
 800662e:	d00f      	beq.n	8006650 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6819      	ldr	r1, [r3, #0]
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	f107 0208 	add.w	r2, r7, #8
 800663c:	18d4      	adds	r4, r2, r3
 800663e:	4608      	mov	r0, r1
 8006640:	f001 f930 	bl	80078a4 <SDMMC_ReadFIFO>
 8006644:	4603      	mov	r3, r0
 8006646:	6023      	str	r3, [r4, #0]
      index++;
 8006648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664a:	3301      	adds	r3, #1
 800664c:	637b      	str	r3, [r7, #52]	; 0x34
 800664e:	e006      	b.n	800665e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d012      	beq.n	8006684 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800665e:	f7fc f855 	bl	800270c <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d102      	bne.n	8006674 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800666e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006672:	e05a      	b.n	800672a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800667e:	2b00      	cmp	r3, #0
 8006680:	d0cf      	beq.n	8006622 <SD_FindSCR+0x96>
 8006682:	e000      	b.n	8006686 <SD_FindSCR+0xfa>
      break;
 8006684:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800668c:	f003 0308 	and.w	r3, r3, #8
 8006690:	2b00      	cmp	r3, #0
 8006692:	d005      	beq.n	80066a0 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2208      	movs	r2, #8
 800669a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800669c:	2308      	movs	r3, #8
 800669e:	e044      	b.n	800672a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066a6:	f003 0302 	and.w	r3, r3, #2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2202      	movs	r2, #2
 80066b4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066b6:	2302      	movs	r3, #2
 80066b8:	e037      	b.n	800672a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c0:	f003 0320 	and.w	r3, r3, #32
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d005      	beq.n	80066d4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2220      	movs	r2, #32
 80066ce:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066d0:	2320      	movs	r3, #32
 80066d2:	e02a      	b.n	800672a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f240 523a 	movw	r2, #1338	; 0x53a
 80066dc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	061a      	lsls	r2, r3, #24
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	021b      	lsls	r3, r3, #8
 80066e6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066ea:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066f4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	0e1b      	lsrs	r3, r3, #24
 80066fa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066fe:	601a      	str	r2, [r3, #0]
    scr++;
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	3304      	adds	r3, #4
 8006704:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	061a      	lsls	r2, r3, #24
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006712:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	0a1b      	lsrs	r3, r3, #8
 8006718:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800671c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	0e1b      	lsrs	r3, r3, #24
 8006722:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006726:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	373c      	adds	r7, #60	; 0x3c
 800672e:	46bd      	mov	sp, r7
 8006730:	bd90      	pop	{r4, r7, pc}

08006732 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	60b9      	str	r1, [r7, #8]
 800673c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e038      	b.n	80067ba <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b00      	cmp	r3, #0
 8006752:	d106      	bne.n	8006762 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2200      	movs	r2, #0
 8006758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7fa febd 	bl	80014dc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	3308      	adds	r3, #8
 800676a:	4619      	mov	r1, r3
 800676c:	4610      	mov	r0, r2
 800676e:	f000 ff55 	bl	800761c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6818      	ldr	r0, [r3, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	461a      	mov	r2, r3
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	f000 ffdd 	bl	800773c <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6858      	ldr	r0, [r3, #4]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689a      	ldr	r2, [r3, #8]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678e:	6879      	ldr	r1, [r7, #4]
 8006790:	f001 f824 	bl	80077dc <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	6892      	ldr	r2, [r2, #8]
 800679c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	68fa      	ldr	r2, [r7, #12]
 80067a6:	6892      	ldr	r2, [r2, #8]
 80067a8:	f041 0101 	orr.w	r1, r1, #1
 80067ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	2201      	movs	r2, #1
 80067b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}

080067c2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80067c2:	b580      	push	{r7, lr}
 80067c4:	b082      	sub	sp, #8
 80067c6:	af00      	add	r7, sp, #0
 80067c8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d101      	bne.n	80067d4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	e049      	b.n	8006868 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fa fcf1 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2202      	movs	r2, #2
 80067f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	3304      	adds	r3, #4
 80067fe:	4619      	mov	r1, r3
 8006800:	4610      	mov	r0, r2
 8006802:	f000 f877 	bl	80068f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2201      	movs	r2, #1
 800680a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2201      	movs	r2, #1
 8006812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2201      	movs	r2, #1
 800681a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3708      	adds	r7, #8
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b082      	sub	sp, #8
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006880:	2b01      	cmp	r3, #1
 8006882:	d101      	bne.n	8006888 <HAL_TIM_SlaveConfigSynchro+0x18>
 8006884:	2302      	movs	r3, #2
 8006886:	e031      	b.n	80068ec <HAL_TIM_SlaveConfigSynchro+0x7c>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2201      	movs	r2, #1
 800688c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8006898:	6839      	ldr	r1, [r7, #0]
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f8ca 	bl	8006a34 <TIM_SlaveTimer_SetConfig>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d009      	beq.n	80068ba <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80068b6:	2301      	movs	r3, #1
 80068b8:	e018      	b.n	80068ec <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068c8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068d8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2201      	movs	r2, #1
 80068de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3708      	adds	r7, #8
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b085      	sub	sp, #20
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a40      	ldr	r2, [pc, #256]	; (8006a08 <TIM_Base_SetConfig+0x114>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d013      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006912:	d00f      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a3d      	ldr	r2, [pc, #244]	; (8006a0c <TIM_Base_SetConfig+0x118>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d00b      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a3c      	ldr	r2, [pc, #240]	; (8006a10 <TIM_Base_SetConfig+0x11c>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d007      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3b      	ldr	r2, [pc, #236]	; (8006a14 <TIM_Base_SetConfig+0x120>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3a      	ldr	r2, [pc, #232]	; (8006a18 <TIM_Base_SetConfig+0x124>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d108      	bne.n	8006946 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	68fa      	ldr	r2, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a2f      	ldr	r2, [pc, #188]	; (8006a08 <TIM_Base_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d02b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006954:	d027      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2c      	ldr	r2, [pc, #176]	; (8006a0c <TIM_Base_SetConfig+0x118>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d023      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2b      	ldr	r2, [pc, #172]	; (8006a10 <TIM_Base_SetConfig+0x11c>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d01f      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2a      	ldr	r2, [pc, #168]	; (8006a14 <TIM_Base_SetConfig+0x120>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d01b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a29      	ldr	r2, [pc, #164]	; (8006a18 <TIM_Base_SetConfig+0x124>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d017      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a28      	ldr	r2, [pc, #160]	; (8006a1c <TIM_Base_SetConfig+0x128>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d013      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a27      	ldr	r2, [pc, #156]	; (8006a20 <TIM_Base_SetConfig+0x12c>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d00f      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a26      	ldr	r2, [pc, #152]	; (8006a24 <TIM_Base_SetConfig+0x130>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d00b      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a25      	ldr	r2, [pc, #148]	; (8006a28 <TIM_Base_SetConfig+0x134>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d007      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a24      	ldr	r2, [pc, #144]	; (8006a2c <TIM_Base_SetConfig+0x138>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d003      	beq.n	80069a6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a23      	ldr	r2, [pc, #140]	; (8006a30 <TIM_Base_SetConfig+0x13c>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d108      	bne.n	80069b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	68db      	ldr	r3, [r3, #12]
 80069b2:	68fa      	ldr	r2, [r7, #12]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	689a      	ldr	r2, [r3, #8]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	4a0a      	ldr	r2, [pc, #40]	; (8006a08 <TIM_Base_SetConfig+0x114>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d003      	beq.n	80069ec <TIM_Base_SetConfig+0xf8>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a0c      	ldr	r2, [pc, #48]	; (8006a18 <TIM_Base_SetConfig+0x124>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d103      	bne.n	80069f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	691a      	ldr	r2, [r3, #16]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	615a      	str	r2, [r3, #20]
}
 80069fa:	bf00      	nop
 80069fc:	3714      	adds	r7, #20
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop
 8006a08:	40010000 	.word	0x40010000
 8006a0c:	40000400 	.word	0x40000400
 8006a10:	40000800 	.word	0x40000800
 8006a14:	40000c00 	.word	0x40000c00
 8006a18:	40010400 	.word	0x40010400
 8006a1c:	40014000 	.word	0x40014000
 8006a20:	40014400 	.word	0x40014400
 8006a24:	40014800 	.word	0x40014800
 8006a28:	40001800 	.word	0x40001800
 8006a2c:	40001c00 	.word	0x40001c00
 8006a30:	40002000 	.word	0x40002000

08006a34 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a4a:	693b      	ldr	r3, [r7, #16]
 8006a4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a50:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4b3e      	ldr	r3, [pc, #248]	; (8006b58 <TIM_SlaveTimer_SetConfig+0x124>)
 8006a60:	4013      	ands	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	693a      	ldr	r2, [r7, #16]
 8006a74:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	685b      	ldr	r3, [r3, #4]
 8006a7a:	2b70      	cmp	r3, #112	; 0x70
 8006a7c:	d01a      	beq.n	8006ab4 <TIM_SlaveTimer_SetConfig+0x80>
 8006a7e:	2b70      	cmp	r3, #112	; 0x70
 8006a80:	d860      	bhi.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
 8006a82:	2b60      	cmp	r3, #96	; 0x60
 8006a84:	d054      	beq.n	8006b30 <TIM_SlaveTimer_SetConfig+0xfc>
 8006a86:	2b60      	cmp	r3, #96	; 0x60
 8006a88:	d85c      	bhi.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
 8006a8a:	2b50      	cmp	r3, #80	; 0x50
 8006a8c:	d046      	beq.n	8006b1c <TIM_SlaveTimer_SetConfig+0xe8>
 8006a8e:	2b50      	cmp	r3, #80	; 0x50
 8006a90:	d858      	bhi.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d019      	beq.n	8006aca <TIM_SlaveTimer_SetConfig+0x96>
 8006a96:	2b40      	cmp	r3, #64	; 0x40
 8006a98:	d854      	bhi.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
 8006a9a:	2b30      	cmp	r3, #48	; 0x30
 8006a9c:	d055      	beq.n	8006b4a <TIM_SlaveTimer_SetConfig+0x116>
 8006a9e:	2b30      	cmp	r3, #48	; 0x30
 8006aa0:	d850      	bhi.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	d051      	beq.n	8006b4a <TIM_SlaveTimer_SetConfig+0x116>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d84c      	bhi.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d04d      	beq.n	8006b4a <TIM_SlaveTimer_SetConfig+0x116>
 8006aae:	2b10      	cmp	r3, #16
 8006ab0:	d04b      	beq.n	8006b4a <TIM_SlaveTimer_SetConfig+0x116>
 8006ab2:	e047      	b.n	8006b44 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8006ac4:	f000 f8a9 	bl	8006c1a <TIM_ETR_SetConfig>
      break;
 8006ac8:	e040      	b.n	8006b4c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b05      	cmp	r3, #5
 8006ad0:	d101      	bne.n	8006ad6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e03b      	b.n	8006b4e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	6a1a      	ldr	r2, [r3, #32]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f022 0201 	bic.w	r2, r2, #1
 8006aec:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	699b      	ldr	r3, [r3, #24]
 8006af4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006afc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	691b      	ldr	r3, [r3, #16]
 8006b02:	011b      	lsls	r3, r3, #4
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	621a      	str	r2, [r3, #32]
      break;
 8006b1a:	e017      	b.n	8006b4c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f000 f817 	bl	8006b5c <TIM_TI1_ConfigInputStage>
      break;
 8006b2e:	e00d      	b.n	8006b4c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	f000 f83c 	bl	8006bba <TIM_TI2_ConfigInputStage>
      break;
 8006b42:	e003      	b.n	8006b4c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	75fb      	strb	r3, [r7, #23]
      break;
 8006b48:	e000      	b.n	8006b4c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006b4a:	bf00      	nop
  }

  return status;
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	fffefff8 	.word	0xfffefff8

08006b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	6a1b      	ldr	r3, [r3, #32]
 8006b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6a1b      	ldr	r3, [r3, #32]
 8006b72:	f023 0201 	bic.w	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f023 030a 	bic.w	r3, r3, #10
 8006b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	693a      	ldr	r2, [r7, #16]
 8006ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	697a      	ldr	r2, [r7, #20]
 8006bac:	621a      	str	r2, [r3, #32]
}
 8006bae:	bf00      	nop
 8006bb0:	371c      	adds	r7, #28
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b087      	sub	sp, #28
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	60f8      	str	r0, [r7, #12]
 8006bc2:	60b9      	str	r1, [r7, #8]
 8006bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	f023 0210 	bic.w	r2, r3, #16
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6a1b      	ldr	r3, [r3, #32]
 8006bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	031b      	lsls	r3, r3, #12
 8006bea:	697a      	ldr	r2, [r7, #20]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	011b      	lsls	r3, r3, #4
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	621a      	str	r2, [r3, #32]
}
 8006c0e:	bf00      	nop
 8006c10:	371c      	adds	r7, #28
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b087      	sub	sp, #28
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	60f8      	str	r0, [r7, #12]
 8006c22:	60b9      	str	r1, [r7, #8]
 8006c24:	607a      	str	r2, [r7, #4]
 8006c26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006c34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	021a      	lsls	r2, r3, #8
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	4313      	orrs	r3, r2
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	609a      	str	r2, [r3, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	371c      	adds	r7, #28
 8006c52:	46bd      	mov	sp, r7
 8006c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c58:	4770      	bx	lr
	...

08006c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d101      	bne.n	8006c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c70:	2302      	movs	r3, #2
 8006c72:	e06d      	b.n	8006d50 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	685b      	ldr	r3, [r3, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a30      	ldr	r2, [pc, #192]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d004      	beq.n	8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a2f      	ldr	r2, [pc, #188]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d108      	bne.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006cae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	68fa      	ldr	r2, [r7, #12]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	68fa      	ldr	r2, [r7, #12]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d022      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ce6:	d01d      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d018      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a1c      	ldr	r2, [pc, #112]	; (8006d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d013      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a1a      	ldr	r2, [pc, #104]	; (8006d6c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d00e      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d009      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a16      	ldr	r2, [pc, #88]	; (8006d70 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d004      	beq.n	8006d24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a15      	ldr	r2, [pc, #84]	; (8006d74 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d10c      	bne.n	8006d3e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d2a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	689b      	ldr	r3, [r3, #8]
 8006d30:	68ba      	ldr	r2, [r7, #8]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68ba      	ldr	r2, [r7, #8]
 8006d3c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2201      	movs	r2, #1
 8006d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3714      	adds	r7, #20
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	40010000 	.word	0x40010000
 8006d60:	40010400 	.word	0x40010400
 8006d64:	40000400 	.word	0x40000400
 8006d68:	40000800 	.word	0x40000800
 8006d6c:	40000c00 	.word	0x40000c00
 8006d70:	40014000 	.word	0x40014000
 8006d74:	40001800 	.word	0x40001800

08006d78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d101      	bne.n	8006d8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	e040      	b.n	8006e0c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d106      	bne.n	8006da0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f7fa fa8c 	bl	80012b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2224      	movs	r2, #36	; 0x24
 8006da4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0201 	bic.w	r2, r2, #1
 8006db4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f82c 	bl	8006e14 <UART_SetConfig>
 8006dbc:	4603      	mov	r3, r0
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e022      	b.n	8006e0c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fa84 	bl	80072dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006de2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006df2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f042 0201 	orr.w	r2, r2, #1
 8006e02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb0b 	bl	8007420 <UART_CheckIdleState>
 8006e0a:	4603      	mov	r3, r0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3708      	adds	r7, #8
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689a      	ldr	r2, [r3, #8]
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	691b      	ldr	r3, [r3, #16]
 8006e28:	431a      	orrs	r2, r3
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	695b      	ldr	r3, [r3, #20]
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	69db      	ldr	r3, [r3, #28]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	681a      	ldr	r2, [r3, #0]
 8006e3e:	4ba6      	ldr	r3, [pc, #664]	; (80070d8 <UART_SetConfig+0x2c4>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	6812      	ldr	r2, [r2, #0]
 8006e46:	6979      	ldr	r1, [r7, #20]
 8006e48:	430b      	orrs	r3, r1
 8006e4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	430a      	orrs	r2, r1
 8006e60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	699b      	ldr	r3, [r3, #24]
 8006e66:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	697a      	ldr	r2, [r7, #20]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	697a      	ldr	r2, [r7, #20]
 8006e82:	430a      	orrs	r2, r1
 8006e84:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a94      	ldr	r2, [pc, #592]	; (80070dc <UART_SetConfig+0x2c8>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d120      	bne.n	8006ed2 <UART_SetConfig+0xbe>
 8006e90:	4b93      	ldr	r3, [pc, #588]	; (80070e0 <UART_SetConfig+0x2cc>)
 8006e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d816      	bhi.n	8006ecc <UART_SetConfig+0xb8>
 8006e9e:	a201      	add	r2, pc, #4	; (adr r2, 8006ea4 <UART_SetConfig+0x90>)
 8006ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea4:	08006eb5 	.word	0x08006eb5
 8006ea8:	08006ec1 	.word	0x08006ec1
 8006eac:	08006ebb 	.word	0x08006ebb
 8006eb0:	08006ec7 	.word	0x08006ec7
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	77fb      	strb	r3, [r7, #31]
 8006eb8:	e150      	b.n	800715c <UART_SetConfig+0x348>
 8006eba:	2302      	movs	r3, #2
 8006ebc:	77fb      	strb	r3, [r7, #31]
 8006ebe:	e14d      	b.n	800715c <UART_SetConfig+0x348>
 8006ec0:	2304      	movs	r3, #4
 8006ec2:	77fb      	strb	r3, [r7, #31]
 8006ec4:	e14a      	b.n	800715c <UART_SetConfig+0x348>
 8006ec6:	2308      	movs	r3, #8
 8006ec8:	77fb      	strb	r3, [r7, #31]
 8006eca:	e147      	b.n	800715c <UART_SetConfig+0x348>
 8006ecc:	2310      	movs	r3, #16
 8006ece:	77fb      	strb	r3, [r7, #31]
 8006ed0:	e144      	b.n	800715c <UART_SetConfig+0x348>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	4a83      	ldr	r2, [pc, #524]	; (80070e4 <UART_SetConfig+0x2d0>)
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d132      	bne.n	8006f42 <UART_SetConfig+0x12e>
 8006edc:	4b80      	ldr	r3, [pc, #512]	; (80070e0 <UART_SetConfig+0x2cc>)
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee2:	f003 030c 	and.w	r3, r3, #12
 8006ee6:	2b0c      	cmp	r3, #12
 8006ee8:	d828      	bhi.n	8006f3c <UART_SetConfig+0x128>
 8006eea:	a201      	add	r2, pc, #4	; (adr r2, 8006ef0 <UART_SetConfig+0xdc>)
 8006eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef0:	08006f25 	.word	0x08006f25
 8006ef4:	08006f3d 	.word	0x08006f3d
 8006ef8:	08006f3d 	.word	0x08006f3d
 8006efc:	08006f3d 	.word	0x08006f3d
 8006f00:	08006f31 	.word	0x08006f31
 8006f04:	08006f3d 	.word	0x08006f3d
 8006f08:	08006f3d 	.word	0x08006f3d
 8006f0c:	08006f3d 	.word	0x08006f3d
 8006f10:	08006f2b 	.word	0x08006f2b
 8006f14:	08006f3d 	.word	0x08006f3d
 8006f18:	08006f3d 	.word	0x08006f3d
 8006f1c:	08006f3d 	.word	0x08006f3d
 8006f20:	08006f37 	.word	0x08006f37
 8006f24:	2300      	movs	r3, #0
 8006f26:	77fb      	strb	r3, [r7, #31]
 8006f28:	e118      	b.n	800715c <UART_SetConfig+0x348>
 8006f2a:	2302      	movs	r3, #2
 8006f2c:	77fb      	strb	r3, [r7, #31]
 8006f2e:	e115      	b.n	800715c <UART_SetConfig+0x348>
 8006f30:	2304      	movs	r3, #4
 8006f32:	77fb      	strb	r3, [r7, #31]
 8006f34:	e112      	b.n	800715c <UART_SetConfig+0x348>
 8006f36:	2308      	movs	r3, #8
 8006f38:	77fb      	strb	r3, [r7, #31]
 8006f3a:	e10f      	b.n	800715c <UART_SetConfig+0x348>
 8006f3c:	2310      	movs	r3, #16
 8006f3e:	77fb      	strb	r3, [r7, #31]
 8006f40:	e10c      	b.n	800715c <UART_SetConfig+0x348>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a68      	ldr	r2, [pc, #416]	; (80070e8 <UART_SetConfig+0x2d4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d120      	bne.n	8006f8e <UART_SetConfig+0x17a>
 8006f4c:	4b64      	ldr	r3, [pc, #400]	; (80070e0 <UART_SetConfig+0x2cc>)
 8006f4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f56:	2b30      	cmp	r3, #48	; 0x30
 8006f58:	d013      	beq.n	8006f82 <UART_SetConfig+0x16e>
 8006f5a:	2b30      	cmp	r3, #48	; 0x30
 8006f5c:	d814      	bhi.n	8006f88 <UART_SetConfig+0x174>
 8006f5e:	2b20      	cmp	r3, #32
 8006f60:	d009      	beq.n	8006f76 <UART_SetConfig+0x162>
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	d810      	bhi.n	8006f88 <UART_SetConfig+0x174>
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <UART_SetConfig+0x15c>
 8006f6a:	2b10      	cmp	r3, #16
 8006f6c:	d006      	beq.n	8006f7c <UART_SetConfig+0x168>
 8006f6e:	e00b      	b.n	8006f88 <UART_SetConfig+0x174>
 8006f70:	2300      	movs	r3, #0
 8006f72:	77fb      	strb	r3, [r7, #31]
 8006f74:	e0f2      	b.n	800715c <UART_SetConfig+0x348>
 8006f76:	2302      	movs	r3, #2
 8006f78:	77fb      	strb	r3, [r7, #31]
 8006f7a:	e0ef      	b.n	800715c <UART_SetConfig+0x348>
 8006f7c:	2304      	movs	r3, #4
 8006f7e:	77fb      	strb	r3, [r7, #31]
 8006f80:	e0ec      	b.n	800715c <UART_SetConfig+0x348>
 8006f82:	2308      	movs	r3, #8
 8006f84:	77fb      	strb	r3, [r7, #31]
 8006f86:	e0e9      	b.n	800715c <UART_SetConfig+0x348>
 8006f88:	2310      	movs	r3, #16
 8006f8a:	77fb      	strb	r3, [r7, #31]
 8006f8c:	e0e6      	b.n	800715c <UART_SetConfig+0x348>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a56      	ldr	r2, [pc, #344]	; (80070ec <UART_SetConfig+0x2d8>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d120      	bne.n	8006fda <UART_SetConfig+0x1c6>
 8006f98:	4b51      	ldr	r3, [pc, #324]	; (80070e0 <UART_SetConfig+0x2cc>)
 8006f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fa2:	2bc0      	cmp	r3, #192	; 0xc0
 8006fa4:	d013      	beq.n	8006fce <UART_SetConfig+0x1ba>
 8006fa6:	2bc0      	cmp	r3, #192	; 0xc0
 8006fa8:	d814      	bhi.n	8006fd4 <UART_SetConfig+0x1c0>
 8006faa:	2b80      	cmp	r3, #128	; 0x80
 8006fac:	d009      	beq.n	8006fc2 <UART_SetConfig+0x1ae>
 8006fae:	2b80      	cmp	r3, #128	; 0x80
 8006fb0:	d810      	bhi.n	8006fd4 <UART_SetConfig+0x1c0>
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <UART_SetConfig+0x1a8>
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d006      	beq.n	8006fc8 <UART_SetConfig+0x1b4>
 8006fba:	e00b      	b.n	8006fd4 <UART_SetConfig+0x1c0>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	77fb      	strb	r3, [r7, #31]
 8006fc0:	e0cc      	b.n	800715c <UART_SetConfig+0x348>
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	77fb      	strb	r3, [r7, #31]
 8006fc6:	e0c9      	b.n	800715c <UART_SetConfig+0x348>
 8006fc8:	2304      	movs	r3, #4
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e0c6      	b.n	800715c <UART_SetConfig+0x348>
 8006fce:	2308      	movs	r3, #8
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e0c3      	b.n	800715c <UART_SetConfig+0x348>
 8006fd4:	2310      	movs	r3, #16
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e0c0      	b.n	800715c <UART_SetConfig+0x348>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4a44      	ldr	r2, [pc, #272]	; (80070f0 <UART_SetConfig+0x2dc>)
 8006fe0:	4293      	cmp	r3, r2
 8006fe2:	d125      	bne.n	8007030 <UART_SetConfig+0x21c>
 8006fe4:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <UART_SetConfig+0x2cc>)
 8006fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ff2:	d017      	beq.n	8007024 <UART_SetConfig+0x210>
 8006ff4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ff8:	d817      	bhi.n	800702a <UART_SetConfig+0x216>
 8006ffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ffe:	d00b      	beq.n	8007018 <UART_SetConfig+0x204>
 8007000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007004:	d811      	bhi.n	800702a <UART_SetConfig+0x216>
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <UART_SetConfig+0x1fe>
 800700a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800700e:	d006      	beq.n	800701e <UART_SetConfig+0x20a>
 8007010:	e00b      	b.n	800702a <UART_SetConfig+0x216>
 8007012:	2300      	movs	r3, #0
 8007014:	77fb      	strb	r3, [r7, #31]
 8007016:	e0a1      	b.n	800715c <UART_SetConfig+0x348>
 8007018:	2302      	movs	r3, #2
 800701a:	77fb      	strb	r3, [r7, #31]
 800701c:	e09e      	b.n	800715c <UART_SetConfig+0x348>
 800701e:	2304      	movs	r3, #4
 8007020:	77fb      	strb	r3, [r7, #31]
 8007022:	e09b      	b.n	800715c <UART_SetConfig+0x348>
 8007024:	2308      	movs	r3, #8
 8007026:	77fb      	strb	r3, [r7, #31]
 8007028:	e098      	b.n	800715c <UART_SetConfig+0x348>
 800702a:	2310      	movs	r3, #16
 800702c:	77fb      	strb	r3, [r7, #31]
 800702e:	e095      	b.n	800715c <UART_SetConfig+0x348>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	4a2f      	ldr	r2, [pc, #188]	; (80070f4 <UART_SetConfig+0x2e0>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d125      	bne.n	8007086 <UART_SetConfig+0x272>
 800703a:	4b29      	ldr	r3, [pc, #164]	; (80070e0 <UART_SetConfig+0x2cc>)
 800703c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007040:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007044:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007048:	d017      	beq.n	800707a <UART_SetConfig+0x266>
 800704a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800704e:	d817      	bhi.n	8007080 <UART_SetConfig+0x26c>
 8007050:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007054:	d00b      	beq.n	800706e <UART_SetConfig+0x25a>
 8007056:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705a:	d811      	bhi.n	8007080 <UART_SetConfig+0x26c>
 800705c:	2b00      	cmp	r3, #0
 800705e:	d003      	beq.n	8007068 <UART_SetConfig+0x254>
 8007060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007064:	d006      	beq.n	8007074 <UART_SetConfig+0x260>
 8007066:	e00b      	b.n	8007080 <UART_SetConfig+0x26c>
 8007068:	2301      	movs	r3, #1
 800706a:	77fb      	strb	r3, [r7, #31]
 800706c:	e076      	b.n	800715c <UART_SetConfig+0x348>
 800706e:	2302      	movs	r3, #2
 8007070:	77fb      	strb	r3, [r7, #31]
 8007072:	e073      	b.n	800715c <UART_SetConfig+0x348>
 8007074:	2304      	movs	r3, #4
 8007076:	77fb      	strb	r3, [r7, #31]
 8007078:	e070      	b.n	800715c <UART_SetConfig+0x348>
 800707a:	2308      	movs	r3, #8
 800707c:	77fb      	strb	r3, [r7, #31]
 800707e:	e06d      	b.n	800715c <UART_SetConfig+0x348>
 8007080:	2310      	movs	r3, #16
 8007082:	77fb      	strb	r3, [r7, #31]
 8007084:	e06a      	b.n	800715c <UART_SetConfig+0x348>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a1b      	ldr	r2, [pc, #108]	; (80070f8 <UART_SetConfig+0x2e4>)
 800708c:	4293      	cmp	r3, r2
 800708e:	d138      	bne.n	8007102 <UART_SetConfig+0x2ee>
 8007090:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <UART_SetConfig+0x2cc>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800709a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800709e:	d017      	beq.n	80070d0 <UART_SetConfig+0x2bc>
 80070a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80070a4:	d82a      	bhi.n	80070fc <UART_SetConfig+0x2e8>
 80070a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070aa:	d00b      	beq.n	80070c4 <UART_SetConfig+0x2b0>
 80070ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070b0:	d824      	bhi.n	80070fc <UART_SetConfig+0x2e8>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d003      	beq.n	80070be <UART_SetConfig+0x2aa>
 80070b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070ba:	d006      	beq.n	80070ca <UART_SetConfig+0x2b6>
 80070bc:	e01e      	b.n	80070fc <UART_SetConfig+0x2e8>
 80070be:	2300      	movs	r3, #0
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e04b      	b.n	800715c <UART_SetConfig+0x348>
 80070c4:	2302      	movs	r3, #2
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e048      	b.n	800715c <UART_SetConfig+0x348>
 80070ca:	2304      	movs	r3, #4
 80070cc:	77fb      	strb	r3, [r7, #31]
 80070ce:	e045      	b.n	800715c <UART_SetConfig+0x348>
 80070d0:	2308      	movs	r3, #8
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e042      	b.n	800715c <UART_SetConfig+0x348>
 80070d6:	bf00      	nop
 80070d8:	efff69f3 	.word	0xefff69f3
 80070dc:	40011000 	.word	0x40011000
 80070e0:	40023800 	.word	0x40023800
 80070e4:	40004400 	.word	0x40004400
 80070e8:	40004800 	.word	0x40004800
 80070ec:	40004c00 	.word	0x40004c00
 80070f0:	40005000 	.word	0x40005000
 80070f4:	40011400 	.word	0x40011400
 80070f8:	40007800 	.word	0x40007800
 80070fc:	2310      	movs	r3, #16
 80070fe:	77fb      	strb	r3, [r7, #31]
 8007100:	e02c      	b.n	800715c <UART_SetConfig+0x348>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4a72      	ldr	r2, [pc, #456]	; (80072d0 <UART_SetConfig+0x4bc>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d125      	bne.n	8007158 <UART_SetConfig+0x344>
 800710c:	4b71      	ldr	r3, [pc, #452]	; (80072d4 <UART_SetConfig+0x4c0>)
 800710e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007112:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007116:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800711a:	d017      	beq.n	800714c <UART_SetConfig+0x338>
 800711c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007120:	d817      	bhi.n	8007152 <UART_SetConfig+0x33e>
 8007122:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007126:	d00b      	beq.n	8007140 <UART_SetConfig+0x32c>
 8007128:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800712c:	d811      	bhi.n	8007152 <UART_SetConfig+0x33e>
 800712e:	2b00      	cmp	r3, #0
 8007130:	d003      	beq.n	800713a <UART_SetConfig+0x326>
 8007132:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007136:	d006      	beq.n	8007146 <UART_SetConfig+0x332>
 8007138:	e00b      	b.n	8007152 <UART_SetConfig+0x33e>
 800713a:	2300      	movs	r3, #0
 800713c:	77fb      	strb	r3, [r7, #31]
 800713e:	e00d      	b.n	800715c <UART_SetConfig+0x348>
 8007140:	2302      	movs	r3, #2
 8007142:	77fb      	strb	r3, [r7, #31]
 8007144:	e00a      	b.n	800715c <UART_SetConfig+0x348>
 8007146:	2304      	movs	r3, #4
 8007148:	77fb      	strb	r3, [r7, #31]
 800714a:	e007      	b.n	800715c <UART_SetConfig+0x348>
 800714c:	2308      	movs	r3, #8
 800714e:	77fb      	strb	r3, [r7, #31]
 8007150:	e004      	b.n	800715c <UART_SetConfig+0x348>
 8007152:	2310      	movs	r3, #16
 8007154:	77fb      	strb	r3, [r7, #31]
 8007156:	e001      	b.n	800715c <UART_SetConfig+0x348>
 8007158:	2310      	movs	r3, #16
 800715a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007164:	d15b      	bne.n	800721e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007166:	7ffb      	ldrb	r3, [r7, #31]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d828      	bhi.n	80071be <UART_SetConfig+0x3aa>
 800716c:	a201      	add	r2, pc, #4	; (adr r2, 8007174 <UART_SetConfig+0x360>)
 800716e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007172:	bf00      	nop
 8007174:	08007199 	.word	0x08007199
 8007178:	080071a1 	.word	0x080071a1
 800717c:	080071a9 	.word	0x080071a9
 8007180:	080071bf 	.word	0x080071bf
 8007184:	080071af 	.word	0x080071af
 8007188:	080071bf 	.word	0x080071bf
 800718c:	080071bf 	.word	0x080071bf
 8007190:	080071bf 	.word	0x080071bf
 8007194:	080071b7 	.word	0x080071b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007198:	f7fe f8f8 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 800719c:	61b8      	str	r0, [r7, #24]
        break;
 800719e:	e013      	b.n	80071c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe f908 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 80071a4:	61b8      	str	r0, [r7, #24]
        break;
 80071a6:	e00f      	b.n	80071c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a8:	4b4b      	ldr	r3, [pc, #300]	; (80072d8 <UART_SetConfig+0x4c4>)
 80071aa:	61bb      	str	r3, [r7, #24]
        break;
 80071ac:	e00c      	b.n	80071c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ae:	f7fd ffdd 	bl	800516c <HAL_RCC_GetSysClockFreq>
 80071b2:	61b8      	str	r0, [r7, #24]
        break;
 80071b4:	e008      	b.n	80071c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071ba:	61bb      	str	r3, [r7, #24]
        break;
 80071bc:	e004      	b.n	80071c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80071be:	2300      	movs	r3, #0
 80071c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	77bb      	strb	r3, [r7, #30]
        break;
 80071c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d074      	beq.n	80072b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	005a      	lsls	r2, r3, #1
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	685b      	ldr	r3, [r3, #4]
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	441a      	add	r2, r3
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	fbb2 f3f3 	udiv	r3, r2, r3
 80071e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	d916      	bls.n	8007218 <UART_SetConfig+0x404>
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f0:	d212      	bcs.n	8007218 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f023 030f 	bic.w	r3, r3, #15
 80071fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	085b      	lsrs	r3, r3, #1
 8007200:	b29b      	uxth	r3, r3
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	b29a      	uxth	r2, r3
 8007208:	89fb      	ldrh	r3, [r7, #14]
 800720a:	4313      	orrs	r3, r2
 800720c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	89fa      	ldrh	r2, [r7, #14]
 8007214:	60da      	str	r2, [r3, #12]
 8007216:	e04f      	b.n	80072b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	77bb      	strb	r3, [r7, #30]
 800721c:	e04c      	b.n	80072b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721e:	7ffb      	ldrb	r3, [r7, #31]
 8007220:	2b08      	cmp	r3, #8
 8007222:	d828      	bhi.n	8007276 <UART_SetConfig+0x462>
 8007224:	a201      	add	r2, pc, #4	; (adr r2, 800722c <UART_SetConfig+0x418>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007251 	.word	0x08007251
 8007230:	08007259 	.word	0x08007259
 8007234:	08007261 	.word	0x08007261
 8007238:	08007277 	.word	0x08007277
 800723c:	08007267 	.word	0x08007267
 8007240:	08007277 	.word	0x08007277
 8007244:	08007277 	.word	0x08007277
 8007248:	08007277 	.word	0x08007277
 800724c:	0800726f 	.word	0x0800726f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fe f89c 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8007254:	61b8      	str	r0, [r7, #24]
        break;
 8007256:	e013      	b.n	8007280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007258:	f7fe f8ac 	bl	80053b4 <HAL_RCC_GetPCLK2Freq>
 800725c:	61b8      	str	r0, [r7, #24]
        break;
 800725e:	e00f      	b.n	8007280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007260:	4b1d      	ldr	r3, [pc, #116]	; (80072d8 <UART_SetConfig+0x4c4>)
 8007262:	61bb      	str	r3, [r7, #24]
        break;
 8007264:	e00c      	b.n	8007280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fd ff81 	bl	800516c <HAL_RCC_GetSysClockFreq>
 800726a:	61b8      	str	r0, [r7, #24]
        break;
 800726c:	e008      	b.n	8007280 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007272:	61bb      	str	r3, [r7, #24]
        break;
 8007274:	e004      	b.n	8007280 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	77bb      	strb	r3, [r7, #30]
        break;
 800727e:	bf00      	nop
    }

    if (pclk != 0U)
 8007280:	69bb      	ldr	r3, [r7, #24]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d018      	beq.n	80072b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	085a      	lsrs	r2, r3, #1
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	441a      	add	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	fbb2 f3f3 	udiv	r3, r2, r3
 8007298:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b0f      	cmp	r3, #15
 800729e:	d909      	bls.n	80072b4 <UART_SetConfig+0x4a0>
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a6:	d205      	bcs.n	80072b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	b29a      	uxth	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	60da      	str	r2, [r3, #12]
 80072b2:	e001      	b.n	80072b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80072c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3720      	adds	r7, #32
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40007c00 	.word	0x40007c00
 80072d4:	40023800 	.word	0x40023800
 80072d8:	00f42400 	.word	0x00f42400

080072dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e8:	f003 0301 	and.w	r3, r3, #1
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00a      	beq.n	8007306 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	430a      	orrs	r2, r1
 8007304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800730a:	f003 0302 	and.w	r3, r3, #2
 800730e:	2b00      	cmp	r3, #0
 8007310:	d00a      	beq.n	8007328 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	430a      	orrs	r2, r1
 8007326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732c:	f003 0304 	and.w	r3, r3, #4
 8007330:	2b00      	cmp	r3, #0
 8007332:	d00a      	beq.n	800734a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	430a      	orrs	r2, r1
 8007348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d00a      	beq.n	800736c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	430a      	orrs	r2, r1
 800736a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007370:	f003 0310 	and.w	r3, r3, #16
 8007374:	2b00      	cmp	r3, #0
 8007376:	d00a      	beq.n	800738e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	430a      	orrs	r2, r1
 800738c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d01a      	beq.n	80073f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	430a      	orrs	r2, r1
 80073d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073da:	d10a      	bne.n	80073f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	430a      	orrs	r2, r1
 80073f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d00a      	beq.n	8007414 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	430a      	orrs	r2, r1
 8007412:	605a      	str	r2, [r3, #4]
  }
}
 8007414:	bf00      	nop
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b086      	sub	sp, #24
 8007424:	af02      	add	r7, sp, #8
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007430:	f7fb f96c 	bl	800270c <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0308 	and.w	r3, r3, #8
 8007440:	2b08      	cmp	r3, #8
 8007442:	d10e      	bne.n	8007462 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007444:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f81b 	bl	800748e <UART_WaitOnFlagUntilTimeout>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d001      	beq.n	8007462 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800745e:	2303      	movs	r3, #3
 8007460:	e011      	b.n	8007486 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2220      	movs	r2, #32
 800746c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b09c      	sub	sp, #112	; 0x70
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	603b      	str	r3, [r7, #0]
 800749a:	4613      	mov	r3, r2
 800749c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800749e:	e0a7      	b.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074a6:	f000 80a3 	beq.w	80075f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074aa:	f7fb f92f 	bl	800270c <HAL_GetTick>
 80074ae:	4602      	mov	r2, r0
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	1ad3      	subs	r3, r2, r3
 80074b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80074b6:	429a      	cmp	r2, r3
 80074b8:	d302      	bcc.n	80074c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80074ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d13f      	bne.n	8007540 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c8:	e853 3f00 	ldrex	r3, [r3]
 80074cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80074ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80074d4:	667b      	str	r3, [r7, #100]	; 0x64
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	461a      	mov	r2, r3
 80074dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80074de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80074e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80074e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80074ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e6      	bne.n	80074c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007504:	f023 0301 	bic.w	r3, r3, #1
 8007508:	663b      	str	r3, [r7, #96]	; 0x60
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3308      	adds	r3, #8
 8007510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007512:	64ba      	str	r2, [r7, #72]	; 0x48
 8007514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e5      	bne.n	80074f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2220      	movs	r2, #32
 800752a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2220      	movs	r2, #32
 8007530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800753c:	2303      	movs	r3, #3
 800753e:	e068      	b.n	8007612 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f003 0304 	and.w	r3, r3, #4
 800754a:	2b00      	cmp	r3, #0
 800754c:	d050      	beq.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	69db      	ldr	r3, [r3, #28]
 8007554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800755c:	d148      	bne.n	80075f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007566:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007578:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800757c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	461a      	mov	r2, r3
 8007584:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
 8007588:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800758c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800758e:	e841 2300 	strex	r3, r2, [r1]
 8007592:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e6      	bne.n	8007568 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	3308      	adds	r3, #8
 80075a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	e853 3f00 	ldrex	r3, [r3]
 80075a8:	613b      	str	r3, [r7, #16]
   return(result);
 80075aa:	693b      	ldr	r3, [r7, #16]
 80075ac:	f023 0301 	bic.w	r3, r3, #1
 80075b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	3308      	adds	r3, #8
 80075b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80075ba:	623a      	str	r2, [r7, #32]
 80075bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075be:	69f9      	ldr	r1, [r7, #28]
 80075c0:	6a3a      	ldr	r2, [r7, #32]
 80075c2:	e841 2300 	strex	r3, r2, [r1]
 80075c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1e5      	bne.n	800759a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2220      	movs	r2, #32
 80075d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2220      	movs	r2, #32
 80075d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2220      	movs	r2, #32
 80075e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2200      	movs	r2, #0
 80075e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80075ec:	2303      	movs	r3, #3
 80075ee:	e010      	b.n	8007612 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	69da      	ldr	r2, [r3, #28]
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	4013      	ands	r3, r2
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	bf0c      	ite	eq
 8007600:	2301      	moveq	r3, #1
 8007602:	2300      	movne	r3, #0
 8007604:	b2db      	uxtb	r3, r3
 8007606:	461a      	mov	r2, r3
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	429a      	cmp	r2, r3
 800760c:	f43f af48 	beq.w	80074a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3770      	adds	r7, #112	; 0x70
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
	...

0800761c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800761c:	b480      	push	{r7}
 800761e:	b087      	sub	sp, #28
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007630:	683a      	ldr	r2, [r7, #0]
 8007632:	6812      	ldr	r2, [r2, #0]
 8007634:	f023 0101 	bic.w	r1, r3, #1
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	2b08      	cmp	r3, #8
 8007644:	d102      	bne.n	800764c <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007646:	2340      	movs	r3, #64	; 0x40
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	e001      	b.n	8007650 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800764c:	2300      	movs	r3, #0
 800764e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800765c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007662:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007668:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800766e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007674:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007676:	683b      	ldr	r3, [r7, #0]
 8007678:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800767a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007680:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007686:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800768c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007692:	4313      	orrs	r3, r2
 8007694:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a4:	693a      	ldr	r2, [r7, #16]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	693a      	ldr	r2, [r7, #16]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80076b4:	4b20      	ldr	r3, [pc, #128]	; (8007738 <FMC_NORSRAM_Init+0x11c>)
 80076b6:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076be:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80076c6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80076ce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	43db      	mvns	r3, r3
 80076de:	ea02 0103 	and.w	r1, r2, r3
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	681a      	ldr	r2, [r3, #0]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	4319      	orrs	r1, r3
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f8:	d10c      	bne.n	8007714 <FMC_NORSRAM_Init+0xf8>
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d008      	beq.n	8007714 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800770a:	683b      	ldr	r3, [r7, #0]
 800770c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800770e:	431a      	orrs	r2, r3
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d006      	beq.n	800772a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681a      	ldr	r2, [r3, #0]
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007724:	431a      	orrs	r2, r3
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	371c      	adds	r7, #28
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr
 8007738:	0008fb7f 	.word	0x0008fb7f

0800773c <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800773c:	b480      	push	{r7}
 800773e:	b087      	sub	sp, #28
 8007740:	af00      	add	r7, sp, #0
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	1c5a      	adds	r2, r3, #1
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007752:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	011b      	lsls	r3, r3, #4
 8007760:	431a      	orrs	r2, r3
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	689b      	ldr	r3, [r3, #8]
 8007766:	021b      	lsls	r3, r3, #8
 8007768:	431a      	orrs	r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	68db      	ldr	r3, [r3, #12]
 800776e:	041b      	lsls	r3, r3, #16
 8007770:	431a      	orrs	r2, r3
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691b      	ldr	r3, [r3, #16]
 8007776:	3b01      	subs	r3, #1
 8007778:	051b      	lsls	r3, r3, #20
 800777a:	431a      	orrs	r2, r3
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	3b02      	subs	r3, #2
 8007782:	061b      	lsls	r3, r3, #24
 8007784:	431a      	orrs	r2, r3
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	699b      	ldr	r3, [r3, #24]
 800778a:	4313      	orrs	r3, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	3201      	adds	r2, #1
 8007790:	4319      	orrs	r1, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80077a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80077a4:	d113      	bne.n	80077ce <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077ae:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	3b01      	subs	r3, #1
 80077b6:	051b      	lsls	r3, r3, #20
 80077b8:	697a      	ldr	r2, [r7, #20]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	431a      	orrs	r2, r3
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80077ce:	2300      	movs	r3, #0
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr

080077dc <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80077dc:	b480      	push	{r7}
 80077de:	b085      	sub	sp, #20
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
 80077e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077f0:	d11d      	bne.n	800782e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	687a      	ldr	r2, [r7, #4]
 80077f6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077fa:	4b13      	ldr	r3, [pc, #76]	; (8007848 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	6811      	ldr	r1, [r2, #0]
 8007802:	68ba      	ldr	r2, [r7, #8]
 8007804:	6852      	ldr	r2, [r2, #4]
 8007806:	0112      	lsls	r2, r2, #4
 8007808:	4311      	orrs	r1, r2
 800780a:	68ba      	ldr	r2, [r7, #8]
 800780c:	6892      	ldr	r2, [r2, #8]
 800780e:	0212      	lsls	r2, r2, #8
 8007810:	4311      	orrs	r1, r2
 8007812:	68ba      	ldr	r2, [r7, #8]
 8007814:	6992      	ldr	r2, [r2, #24]
 8007816:	4311      	orrs	r1, r2
 8007818:	68ba      	ldr	r2, [r7, #8]
 800781a:	68d2      	ldr	r2, [r2, #12]
 800781c:	0412      	lsls	r2, r2, #16
 800781e:	430a      	orrs	r2, r1
 8007820:	ea43 0102 	orr.w	r1, r3, r2
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800782c:	e005      	b.n	800783a <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8007836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	cff00000 	.word	0xcff00000

0800784c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800784c:	b084      	sub	sp, #16
 800784e:	b480      	push	{r7}
 8007850:	b085      	sub	sp, #20
 8007852:	af00      	add	r7, sp, #0
 8007854:	6078      	str	r0, [r7, #4]
 8007856:	f107 001c 	add.w	r0, r7, #28
 800785a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007862:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007864:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007866:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800786a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800786c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800786e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8007872:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8007876:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <SDMMC_Init+0x54>)
 8007884:	4013      	ands	r3, r2
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	431a      	orrs	r2, r3
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3714      	adds	r7, #20
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	b004      	add	sp, #16
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	ffff8100 	.word	0xffff8100

080078a4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr

080078be <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 80078be:	b480      	push	{r7}
 80078c0:	b083      	sub	sp, #12
 80078c2:	af00      	add	r7, sp, #0
 80078c4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2203      	movs	r2, #3
 80078ca:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr

080078da <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80078da:	b480      	push	{r7}
 80078dc:	b083      	sub	sp, #12
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f003 0303 	and.w	r3, r3, #3
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	370c      	adds	r7, #12
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007916:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800791c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8007922:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8007924:	68fa      	ldr	r2, [r7, #12]
 8007926:	4313      	orrs	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	68da      	ldr	r2, [r3, #12]
 800792e:	4b06      	ldr	r3, [pc, #24]	; (8007948 <SDMMC_SendCommand+0x50>)
 8007930:	4013      	ands	r3, r2
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	431a      	orrs	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3714      	adds	r7, #20
 8007940:	46bd      	mov	sp, r7
 8007942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007946:	4770      	bx	lr
 8007948:	fffff000 	.word	0xfffff000

0800794c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	691b      	ldr	r3, [r3, #16]
 8007958:	b2db      	uxtb	r3, r3
}
 800795a:	4618      	mov	r0, r3
 800795c:	370c      	adds	r7, #12
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr

08007966 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8007966:	b480      	push	{r7}
 8007968:	b085      	sub	sp, #20
 800796a:	af00      	add	r7, sp, #0
 800796c:	6078      	str	r0, [r7, #4]
 800796e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3314      	adds	r3, #20
 8007974:	461a      	mov	r2, r3
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	4413      	add	r3, r2
 800797a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
}  
 8007980:	4618      	mov	r0, r3
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr

0800798c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800798c:	b480      	push	{r7}
 800798e:	b085      	sub	sp, #20
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	681a      	ldr	r2, [r3, #0]
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	685a      	ldr	r2, [r3, #4]
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80079b2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80079b8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80079be:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4313      	orrs	r3, r2
 80079c4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ca:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	431a      	orrs	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80079d6:	2300      	movs	r3, #0

}
 80079d8:	4618      	mov	r0, r3
 80079da:	3714      	adds	r7, #20
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
 80079ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80079f2:	2310      	movs	r3, #16
 80079f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80079f6:	2340      	movs	r3, #64	; 0x40
 80079f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80079fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a04:	f107 0308 	add.w	r3, r7, #8
 8007a08:	4619      	mov	r1, r3
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff ff74 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8007a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a14:	2110      	movs	r1, #16
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f000 f94e 	bl	8007cb8 <SDMMC_GetCmdResp1>
 8007a1c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007a1e:	69fb      	ldr	r3, [r7, #28]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3720      	adds	r7, #32
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	60f8      	str	r0, [r7, #12]
 8007a30:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007a38:	2307      	movs	r3, #7
 8007a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007a3c:	2340      	movs	r3, #64	; 0x40
 8007a3e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a40:	2300      	movs	r3, #0
 8007a42:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a48:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a4a:	f107 0310 	add.w	r3, r7, #16
 8007a4e:	4619      	mov	r1, r3
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f7ff ff51 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8007a56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a5a:	2107      	movs	r1, #7
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 f92b 	bl	8007cb8 <SDMMC_GetCmdResp1>
 8007a62:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3728      	adds	r7, #40	; 0x28
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b088      	sub	sp, #32
 8007a72:	af00      	add	r7, sp, #0
 8007a74:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8007a76:	2300      	movs	r3, #0
 8007a78:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007a82:	2300      	movs	r3, #0
 8007a84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007a8c:	f107 0308 	add.w	r3, r7, #8
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f7ff ff30 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f000 fb45 	bl	8008128 <SDMMC_GetCmdError>
 8007a9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007aa0:	69fb      	ldr	r3, [r7, #28]
}
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	3720      	adds	r7, #32
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}

08007aaa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b088      	sub	sp, #32
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8007ab2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8007ab6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8007ab8:	2308      	movs	r3, #8
 8007aba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007abc:	2340      	movs	r3, #64	; 0x40
 8007abe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ac8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f7ff ff11 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 fad8 	bl	800808c <SDMMC_GetCmdResp7>
 8007adc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007ade:	69fb      	ldr	r3, [r7, #28]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3720      	adds	r7, #32
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b088      	sub	sp, #32
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007af6:	2337      	movs	r3, #55	; 0x37
 8007af8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007afa:	2340      	movs	r3, #64	; 0x40
 8007afc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007afe:	2300      	movs	r3, #0
 8007b00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b06:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b08:	f107 0308 	add.w	r3, r7, #8
 8007b0c:	4619      	mov	r1, r3
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f7ff fef2 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8007b14:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b18:	2137      	movs	r1, #55	; 0x37
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 f8cc 	bl	8007cb8 <SDMMC_GetCmdResp1>
 8007b20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b22:	69fb      	ldr	r3, [r7, #28]
}
 8007b24:	4618      	mov	r0, r3
 8007b26:	3720      	adds	r7, #32
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}

08007b2c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b088      	sub	sp, #32
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007b36:	683a      	ldr	r2, [r7, #0]
 8007b38:	4b0d      	ldr	r3, [pc, #52]	; (8007b70 <SDMMC_CmdAppOperCommand+0x44>)
 8007b3a:	4313      	orrs	r3, r2
 8007b3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8007b3e:	2329      	movs	r3, #41	; 0x29
 8007b40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b42:	2340      	movs	r3, #64	; 0x40
 8007b44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b46:	2300      	movs	r3, #0
 8007b48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b50:	f107 0308 	add.w	r3, r7, #8
 8007b54:	4619      	mov	r1, r3
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7ff fece 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f9e1 	bl	8007f24 <SDMMC_GetCmdResp3>
 8007b62:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007b64:	69fb      	ldr	r3, [r7, #28]
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	3720      	adds	r7, #32
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	80100000 	.word	0x80100000

08007b74 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8007b82:	2306      	movs	r3, #6
 8007b84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007b86:	2340      	movs	r3, #64	; 0x40
 8007b88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007b94:	f107 0308 	add.w	r3, r7, #8
 8007b98:	4619      	mov	r1, r3
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7ff feac 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8007ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ba4:	2106      	movs	r1, #6
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f886 	bl	8007cb8 <SDMMC_GetCmdResp1>
 8007bac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bae:	69fb      	ldr	r3, [r7, #28]
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3720      	adds	r7, #32
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}

08007bb8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b088      	sub	sp, #32
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8007bc4:	2333      	movs	r3, #51	; 0x33
 8007bc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007bc8:	2340      	movs	r3, #64	; 0x40
 8007bca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007bd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007bd6:	f107 0308 	add.w	r3, r7, #8
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f7ff fe8b 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8007be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007be6:	2133      	movs	r1, #51	; 0x33
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f000 f865 	bl	8007cb8 <SDMMC_GetCmdResp1>
 8007bee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}

08007bfa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b088      	sub	sp, #32
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8007c02:	2300      	movs	r3, #0
 8007c04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007c06:	2302      	movs	r3, #2
 8007c08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007c0a:	23c0      	movs	r3, #192	; 0xc0
 8007c0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c18:	f107 0308 	add.w	r3, r7, #8
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff fe6a 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f935 	bl	8007e94 <SDMMC_GetCmdResp2>
 8007c2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c2c:	69fb      	ldr	r3, [r7, #28]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3720      	adds	r7, #32
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b088      	sub	sp, #32
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8007c44:	2309      	movs	r3, #9
 8007c46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8007c48:	23c0      	movs	r3, #192	; 0xc0
 8007c4a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c54:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c56:	f107 0308 	add.w	r3, r7, #8
 8007c5a:	4619      	mov	r1, r3
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	f7ff fe4b 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	f000 f916 	bl	8007e94 <SDMMC_GetCmdResp2>
 8007c68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007c6a:	69fb      	ldr	r3, [r7, #28]
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3720      	adds	r7, #32
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007c82:	2303      	movs	r3, #3
 8007c84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8007c86:	2340      	movs	r3, #64	; 0x40
 8007c88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8007c8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007c92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8007c94:	f107 0308 	add.w	r3, r7, #8
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fe2c 	bl	80078f8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007ca0:	683a      	ldr	r2, [r7, #0]
 8007ca2:	2103      	movs	r1, #3
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 f97b 	bl	8007fa0 <SDMMC_GetCmdResp6>
 8007caa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007cac:	69fb      	ldr	r3, [r7, #28]
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	3720      	adds	r7, #32
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	bd80      	pop	{r7, pc}
	...

08007cb8 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b088      	sub	sp, #32
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007cc6:	4b70      	ldr	r3, [pc, #448]	; (8007e88 <SDMMC_GetCmdResp1+0x1d0>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a70      	ldr	r2, [pc, #448]	; (8007e8c <SDMMC_GetCmdResp1+0x1d4>)
 8007ccc:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd0:	0a5a      	lsrs	r2, r3, #9
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	fb02 f303 	mul.w	r3, r2, r3
 8007cd8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	1e5a      	subs	r2, r3, #1
 8007cde:	61fa      	str	r2, [r7, #28]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d102      	bne.n	8007cea <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ce8:	e0c9      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d0ef      	beq.n	8007cda <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007cfa:	69bb      	ldr	r3, [r7, #24]
 8007cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1ea      	bne.n	8007cda <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d08:	f003 0304 	and.w	r3, r3, #4
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d004      	beq.n	8007d1a <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2204      	movs	r2, #4
 8007d14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007d16:	2304      	movs	r3, #4
 8007d18:	e0b1      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d1e:	f003 0301 	and.w	r3, r3, #1
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e0a6      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	22c5      	movs	r2, #197	; 0xc5
 8007d34:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fe08 	bl	800794c <SDMMC_GetCommandResponse>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	461a      	mov	r2, r3
 8007d40:	7afb      	ldrb	r3, [r7, #11]
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d001      	beq.n	8007d4a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007d46:	2301      	movs	r3, #1
 8007d48:	e099      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8007d4a:	2100      	movs	r1, #0
 8007d4c:	68f8      	ldr	r0, [r7, #12]
 8007d4e:	f7ff fe0a 	bl	8007966 <SDMMC_GetResponse>
 8007d52:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	4b4e      	ldr	r3, [pc, #312]	; (8007e90 <SDMMC_GetCmdResp1+0x1d8>)
 8007d58:	4013      	ands	r3, r2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d101      	bne.n	8007d62 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007d5e:	2300      	movs	r3, #0
 8007d60:	e08d      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	da02      	bge.n	8007d6e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007d68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007d6c:	e087      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d001      	beq.n	8007d7c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007d78:	2340      	movs	r3, #64	; 0x40
 8007d7a:	e080      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007d86:	2380      	movs	r3, #128	; 0x80
 8007d88:	e079      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007d8a:	697b      	ldr	r3, [r7, #20]
 8007d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d002      	beq.n	8007d9a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007d94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d98:	e071      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007d9a:	697b      	ldr	r3, [r7, #20]
 8007d9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d002      	beq.n	8007daa <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007da4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007da8:	e069      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d002      	beq.n	8007dba <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007db4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007db8:	e061      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d002      	beq.n	8007dca <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007dc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007dc8:	e059      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d002      	beq.n	8007dda <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007dd4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007dd8:	e051      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d002      	beq.n	8007dea <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007de8:	e049      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007df4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007df8:	e041      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d002      	beq.n	8007e0a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8007e04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e08:	e039      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d002      	beq.n	8007e1a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007e14:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007e18:	e031      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007e1a:	697b      	ldr	r3, [r7, #20]
 8007e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d002      	beq.n	8007e2a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007e24:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e28:	e029      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007e34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007e38:	e021      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d002      	beq.n	8007e4a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007e44:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007e48:	e019      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d002      	beq.n	8007e5a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007e54:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007e58:	e011      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d002      	beq.n	8007e6a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007e64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e68:	e009      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	f003 0308 	and.w	r3, r3, #8
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d002      	beq.n	8007e7a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007e74:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007e78:	e001      	b.n	8007e7e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007e7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3720      	adds	r7, #32
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000000 	.word	0x20000000
 8007e8c:	10624dd3 	.word	0x10624dd3
 8007e90:	fdffe008 	.word	0xfdffe008

08007e94 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007e9c:	4b1f      	ldr	r3, [pc, #124]	; (8007f1c <SDMMC_GetCmdResp2+0x88>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a1f      	ldr	r2, [pc, #124]	; (8007f20 <SDMMC_GetCmdResp2+0x8c>)
 8007ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ea6:	0a5b      	lsrs	r3, r3, #9
 8007ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eac:	fb02 f303 	mul.w	r3, r2, r3
 8007eb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1e5a      	subs	r2, r3, #1
 8007eb6:	60fa      	str	r2, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d102      	bne.n	8007ec2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007ebc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ec0:	e026      	b.n	8007f10 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0ef      	beq.n	8007eb2 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d1ea      	bne.n	8007eb2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee0:	f003 0304 	and.w	r3, r3, #4
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d004      	beq.n	8007ef2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2204      	movs	r2, #4
 8007eec:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007eee:	2304      	movs	r3, #4
 8007ef0:	e00e      	b.n	8007f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef6:	f003 0301 	and.w	r3, r3, #1
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d004      	beq.n	8007f08 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	2201      	movs	r2, #1
 8007f02:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e003      	b.n	8007f10 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	22c5      	movs	r2, #197	; 0xc5
 8007f0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007f0e:	2300      	movs	r3, #0
}
 8007f10:	4618      	mov	r0, r3
 8007f12:	3714      	adds	r7, #20
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr
 8007f1c:	20000000 	.word	0x20000000
 8007f20:	10624dd3 	.word	0x10624dd3

08007f24 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b085      	sub	sp, #20
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007f2c:	4b1a      	ldr	r3, [pc, #104]	; (8007f98 <SDMMC_GetCmdResp3+0x74>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a1a      	ldr	r2, [pc, #104]	; (8007f9c <SDMMC_GetCmdResp3+0x78>)
 8007f32:	fba2 2303 	umull	r2, r3, r2, r3
 8007f36:	0a5b      	lsrs	r3, r3, #9
 8007f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3c:	fb02 f303 	mul.w	r3, r2, r3
 8007f40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	1e5a      	subs	r2, r3, #1
 8007f46:	60fa      	str	r2, [r7, #12]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d102      	bne.n	8007f52 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007f4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f50:	e01b      	b.n	8007f8a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d0ef      	beq.n	8007f42 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d1ea      	bne.n	8007f42 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d004      	beq.n	8007f82 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2204      	movs	r2, #4
 8007f7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007f7e:	2304      	movs	r3, #4
 8007f80:	e003      	b.n	8007f8a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	22c5      	movs	r2, #197	; 0xc5
 8007f86:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3714      	adds	r7, #20
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr
 8007f96:	bf00      	nop
 8007f98:	20000000 	.word	0x20000000
 8007f9c:	10624dd3 	.word	0x10624dd3

08007fa0 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b088      	sub	sp, #32
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	607a      	str	r2, [r7, #4]
 8007fac:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007fae:	4b35      	ldr	r3, [pc, #212]	; (8008084 <SDMMC_GetCmdResp6+0xe4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a35      	ldr	r2, [pc, #212]	; (8008088 <SDMMC_GetCmdResp6+0xe8>)
 8007fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8007fb8:	0a5b      	lsrs	r3, r3, #9
 8007fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fbe:	fb02 f303 	mul.w	r3, r2, r3
 8007fc2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	1e5a      	subs	r2, r3, #1
 8007fc8:	61fa      	str	r2, [r7, #28]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d102      	bne.n	8007fd4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007fce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007fd2:	e052      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d0ef      	beq.n	8007fc4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8007fe4:	69bb      	ldr	r3, [r7, #24]
 8007fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d1ea      	bne.n	8007fc4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ff2:	f003 0304 	and.w	r3, r3, #4
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d004      	beq.n	8008004 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008000:	2304      	movs	r3, #4
 8008002:	e03a      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008008:	f003 0301 	and.w	r3, r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	d004      	beq.n	800801a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008016:	2301      	movs	r3, #1
 8008018:	e02f      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f7ff fc96 	bl	800794c <SDMMC_GetCommandResponse>
 8008020:	4603      	mov	r3, r0
 8008022:	461a      	mov	r2, r3
 8008024:	7afb      	ldrb	r3, [r7, #11]
 8008026:	4293      	cmp	r3, r2
 8008028:	d001      	beq.n	800802e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800802a:	2301      	movs	r3, #1
 800802c:	e025      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	22c5      	movs	r2, #197	; 0xc5
 8008032:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008034:	2100      	movs	r1, #0
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f7ff fc95 	bl	8007966 <SDMMC_GetResponse>
 800803c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d106      	bne.n	8008056 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	0c1b      	lsrs	r3, r3, #16
 800804c:	b29a      	uxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008052:	2300      	movs	r3, #0
 8008054:	e011      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800805c:	2b00      	cmp	r3, #0
 800805e:	d002      	beq.n	8008066 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008060:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008064:	e009      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800806c:	2b00      	cmp	r3, #0
 800806e:	d002      	beq.n	8008076 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008070:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008074:	e001      	b.n	800807a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008076:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800807a:	4618      	mov	r0, r3
 800807c:	3720      	adds	r7, #32
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	20000000 	.word	0x20000000
 8008088:	10624dd3 	.word	0x10624dd3

0800808c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008094:	4b22      	ldr	r3, [pc, #136]	; (8008120 <SDMMC_GetCmdResp7+0x94>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a22      	ldr	r2, [pc, #136]	; (8008124 <SDMMC_GetCmdResp7+0x98>)
 800809a:	fba2 2303 	umull	r2, r3, r2, r3
 800809e:	0a5b      	lsrs	r3, r3, #9
 80080a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80080a4:	fb02 f303 	mul.w	r3, r2, r3
 80080a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	1e5a      	subs	r2, r3, #1
 80080ae:	60fa      	str	r2, [r7, #12]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d102      	bne.n	80080ba <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80080b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80080b8:	e02c      	b.n	8008114 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0ef      	beq.n	80080aa <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1ea      	bne.n	80080aa <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d8:	f003 0304 	and.w	r3, r3, #4
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d004      	beq.n	80080ea <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2204      	movs	r2, #4
 80080e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80080e6:	2304      	movs	r3, #4
 80080e8:	e014      	b.n	8008114 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	f003 0301 	and.w	r3, r3, #1
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d004      	beq.n	8008100 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80080fc:	2301      	movs	r3, #1
 80080fe:	e009      	b.n	8008114 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008108:	2b00      	cmp	r3, #0
 800810a:	d002      	beq.n	8008112 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2240      	movs	r2, #64	; 0x40
 8008110:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008112:	2300      	movs	r3, #0
  
}
 8008114:	4618      	mov	r0, r3
 8008116:	3714      	adds	r7, #20
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr
 8008120:	20000000 	.word	0x20000000
 8008124:	10624dd3 	.word	0x10624dd3

08008128 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008128:	b480      	push	{r7}
 800812a:	b085      	sub	sp, #20
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008130:	4b11      	ldr	r3, [pc, #68]	; (8008178 <SDMMC_GetCmdError+0x50>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a11      	ldr	r2, [pc, #68]	; (800817c <SDMMC_GetCmdError+0x54>)
 8008136:	fba2 2303 	umull	r2, r3, r2, r3
 800813a:	0a5b      	lsrs	r3, r3, #9
 800813c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008140:	fb02 f303 	mul.w	r3, r2, r3
 8008144:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	60fa      	str	r2, [r7, #12]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d102      	bne.n	8008156 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008150:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008154:	e009      	b.n	800816a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800815a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f1      	beq.n	8008146 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	22c5      	movs	r2, #197	; 0xc5
 8008166:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3714      	adds	r7, #20
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
 8008176:	bf00      	nop
 8008178:	20000000 	.word	0x20000000
 800817c:	10624dd3 	.word	0x10624dd3

08008180 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008180:	b084      	sub	sp, #16
 8008182:	b580      	push	{r7, lr}
 8008184:	b084      	sub	sp, #16
 8008186:	af00      	add	r7, sp, #0
 8008188:	6078      	str	r0, [r7, #4]
 800818a:	f107 001c 	add.w	r0, r7, #28
 800818e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	2b01      	cmp	r3, #1
 8008196:	d120      	bne.n	80081da <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800819c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	68da      	ldr	r2, [r3, #12]
 80081a8:	4b20      	ldr	r3, [pc, #128]	; (800822c <USB_CoreInit+0xac>)
 80081aa:	4013      	ands	r3, r2
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80081bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d105      	bne.n	80081ce <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	68db      	ldr	r3, [r3, #12]
 80081c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 fbee 	bl	80099b0 <USB_CoreReset>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73fb      	strb	r3, [r7, #15]
 80081d8:	e010      	b.n	80081fc <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	68db      	ldr	r3, [r3, #12]
 80081de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f001 fbe2 	bl	80099b0 <USB_CoreReset>
 80081ec:	4603      	mov	r3, r0
 80081ee:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80081fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d10b      	bne.n	800821a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	689b      	ldr	r3, [r3, #8]
 8008206:	f043 0206 	orr.w	r2, r3, #6
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	689b      	ldr	r3, [r3, #8]
 8008212:	f043 0220 	orr.w	r2, r3, #32
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800821a:	7bfb      	ldrb	r3, [r7, #15]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3710      	adds	r7, #16
 8008220:	46bd      	mov	sp, r7
 8008222:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008226:	b004      	add	sp, #16
 8008228:	4770      	bx	lr
 800822a:	bf00      	nop
 800822c:	ffbdffbf 	.word	0xffbdffbf

08008230 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008230:	b480      	push	{r7}
 8008232:	b087      	sub	sp, #28
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	4613      	mov	r3, r2
 800823c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800823e:	79fb      	ldrb	r3, [r7, #7]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d165      	bne.n	8008310 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	4a41      	ldr	r2, [pc, #260]	; (800834c <USB_SetTurnaroundTime+0x11c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d906      	bls.n	800825a <USB_SetTurnaroundTime+0x2a>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	4a40      	ldr	r2, [pc, #256]	; (8008350 <USB_SetTurnaroundTime+0x120>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d202      	bcs.n	800825a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008254:	230f      	movs	r3, #15
 8008256:	617b      	str	r3, [r7, #20]
 8008258:	e062      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	4a3c      	ldr	r2, [pc, #240]	; (8008350 <USB_SetTurnaroundTime+0x120>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d306      	bcc.n	8008270 <USB_SetTurnaroundTime+0x40>
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	4a3b      	ldr	r2, [pc, #236]	; (8008354 <USB_SetTurnaroundTime+0x124>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d202      	bcs.n	8008270 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800826a:	230e      	movs	r3, #14
 800826c:	617b      	str	r3, [r7, #20]
 800826e:	e057      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	4a38      	ldr	r2, [pc, #224]	; (8008354 <USB_SetTurnaroundTime+0x124>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d306      	bcc.n	8008286 <USB_SetTurnaroundTime+0x56>
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	4a37      	ldr	r2, [pc, #220]	; (8008358 <USB_SetTurnaroundTime+0x128>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d202      	bcs.n	8008286 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008280:	230d      	movs	r3, #13
 8008282:	617b      	str	r3, [r7, #20]
 8008284:	e04c      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008286:	68bb      	ldr	r3, [r7, #8]
 8008288:	4a33      	ldr	r2, [pc, #204]	; (8008358 <USB_SetTurnaroundTime+0x128>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d306      	bcc.n	800829c <USB_SetTurnaroundTime+0x6c>
 800828e:	68bb      	ldr	r3, [r7, #8]
 8008290:	4a32      	ldr	r2, [pc, #200]	; (800835c <USB_SetTurnaroundTime+0x12c>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d802      	bhi.n	800829c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008296:	230c      	movs	r3, #12
 8008298:	617b      	str	r3, [r7, #20]
 800829a:	e041      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	4a2f      	ldr	r2, [pc, #188]	; (800835c <USB_SetTurnaroundTime+0x12c>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d906      	bls.n	80082b2 <USB_SetTurnaroundTime+0x82>
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	4a2e      	ldr	r2, [pc, #184]	; (8008360 <USB_SetTurnaroundTime+0x130>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d802      	bhi.n	80082b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80082ac:	230b      	movs	r3, #11
 80082ae:	617b      	str	r3, [r7, #20]
 80082b0:	e036      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	4a2a      	ldr	r2, [pc, #168]	; (8008360 <USB_SetTurnaroundTime+0x130>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d906      	bls.n	80082c8 <USB_SetTurnaroundTime+0x98>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	4a29      	ldr	r2, [pc, #164]	; (8008364 <USB_SetTurnaroundTime+0x134>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d802      	bhi.n	80082c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80082c2:	230a      	movs	r3, #10
 80082c4:	617b      	str	r3, [r7, #20]
 80082c6:	e02b      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	4a26      	ldr	r2, [pc, #152]	; (8008364 <USB_SetTurnaroundTime+0x134>)
 80082cc:	4293      	cmp	r3, r2
 80082ce:	d906      	bls.n	80082de <USB_SetTurnaroundTime+0xae>
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4a25      	ldr	r2, [pc, #148]	; (8008368 <USB_SetTurnaroundTime+0x138>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d202      	bcs.n	80082de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80082d8:	2309      	movs	r3, #9
 80082da:	617b      	str	r3, [r7, #20]
 80082dc:	e020      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	4a21      	ldr	r2, [pc, #132]	; (8008368 <USB_SetTurnaroundTime+0x138>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d306      	bcc.n	80082f4 <USB_SetTurnaroundTime+0xc4>
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	4a20      	ldr	r2, [pc, #128]	; (800836c <USB_SetTurnaroundTime+0x13c>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d802      	bhi.n	80082f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80082ee:	2308      	movs	r3, #8
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	e015      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	4a1d      	ldr	r2, [pc, #116]	; (800836c <USB_SetTurnaroundTime+0x13c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d906      	bls.n	800830a <USB_SetTurnaroundTime+0xda>
 80082fc:	68bb      	ldr	r3, [r7, #8]
 80082fe:	4a1c      	ldr	r2, [pc, #112]	; (8008370 <USB_SetTurnaroundTime+0x140>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d202      	bcs.n	800830a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008304:	2307      	movs	r3, #7
 8008306:	617b      	str	r3, [r7, #20]
 8008308:	e00a      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800830a:	2306      	movs	r3, #6
 800830c:	617b      	str	r3, [r7, #20]
 800830e:	e007      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008310:	79fb      	ldrb	r3, [r7, #7]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d102      	bne.n	800831c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008316:	2309      	movs	r3, #9
 8008318:	617b      	str	r3, [r7, #20]
 800831a:	e001      	b.n	8008320 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800831c:	2309      	movs	r3, #9
 800831e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	029b      	lsls	r3, r3, #10
 8008334:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008338:	431a      	orrs	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	371c      	adds	r7, #28
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr
 800834c:	00d8acbf 	.word	0x00d8acbf
 8008350:	00e4e1c0 	.word	0x00e4e1c0
 8008354:	00f42400 	.word	0x00f42400
 8008358:	01067380 	.word	0x01067380
 800835c:	011a499f 	.word	0x011a499f
 8008360:	01312cff 	.word	0x01312cff
 8008364:	014ca43f 	.word	0x014ca43f
 8008368:	016e3600 	.word	0x016e3600
 800836c:	01a6ab1f 	.word	0x01a6ab1f
 8008370:	01e84800 	.word	0x01e84800

08008374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	f043 0201 	orr.w	r2, r3, #1
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008388:	2300      	movs	r3, #0
}
 800838a:	4618      	mov	r0, r3
 800838c:	370c      	adds	r7, #12
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008396:	b480      	push	{r7}
 8008398:	b083      	sub	sp, #12
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f023 0201 	bic.w	r2, r3, #1
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	370c      	adds	r7, #12
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b084      	sub	sp, #16
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	460b      	mov	r3, r1
 80083c2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80083d4:	78fb      	ldrb	r3, [r7, #3]
 80083d6:	2b01      	cmp	r3, #1
 80083d8:	d115      	bne.n	8008406 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	68db      	ldr	r3, [r3, #12]
 80083de:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80083e6:	2001      	movs	r0, #1
 80083e8:	f7fa f99c 	bl	8002724 <HAL_Delay>
      ms++;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	3301      	adds	r3, #1
 80083f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	f001 fa4b 	bl	800988e <USB_GetMode>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b01      	cmp	r3, #1
 80083fc:	d01e      	beq.n	800843c <USB_SetCurrentMode+0x84>
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2b31      	cmp	r3, #49	; 0x31
 8008402:	d9f0      	bls.n	80083e6 <USB_SetCurrentMode+0x2e>
 8008404:	e01a      	b.n	800843c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008406:	78fb      	ldrb	r3, [r7, #3]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d115      	bne.n	8008438 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	68db      	ldr	r3, [r3, #12]
 8008410:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008418:	2001      	movs	r0, #1
 800841a:	f7fa f983 	bl	8002724 <HAL_Delay>
      ms++;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	3301      	adds	r3, #1
 8008422:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f001 fa32 	bl	800988e <USB_GetMode>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <USB_SetCurrentMode+0x84>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2b31      	cmp	r3, #49	; 0x31
 8008434:	d9f0      	bls.n	8008418 <USB_SetCurrentMode+0x60>
 8008436:	e001      	b.n	800843c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008438:	2301      	movs	r3, #1
 800843a:	e005      	b.n	8008448 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2b32      	cmp	r3, #50	; 0x32
 8008440:	d101      	bne.n	8008446 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008442:	2301      	movs	r3, #1
 8008444:	e000      	b.n	8008448 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	4618      	mov	r0, r3
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008450:	b084      	sub	sp, #16
 8008452:	b580      	push	{r7, lr}
 8008454:	b086      	sub	sp, #24
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
 800845a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800845e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800846a:	2300      	movs	r3, #0
 800846c:	613b      	str	r3, [r7, #16]
 800846e:	e009      	b.n	8008484 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	3340      	adds	r3, #64	; 0x40
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	4413      	add	r3, r2
 800847a:	2200      	movs	r2, #0
 800847c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800847e:	693b      	ldr	r3, [r7, #16]
 8008480:	3301      	adds	r3, #1
 8008482:	613b      	str	r3, [r7, #16]
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	2b0e      	cmp	r3, #14
 8008488:	d9f2      	bls.n	8008470 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800848a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800848c:	2b00      	cmp	r3, #0
 800848e:	d11c      	bne.n	80084ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008496:	685b      	ldr	r3, [r3, #4]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	601a      	str	r2, [r3, #0]
 80084c8:	e005      	b.n	80084d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80084dc:	461a      	mov	r2, r3
 80084de:	2300      	movs	r3, #0
 80084e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084e8:	4619      	mov	r1, r3
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f0:	461a      	mov	r2, r3
 80084f2:	680b      	ldr	r3, [r1, #0]
 80084f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80084f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d10c      	bne.n	8008516 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80084fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008502:	2100      	movs	r1, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f000 f965 	bl	80087d4 <USB_SetDevSpeed>
 800850a:	e008      	b.n	800851e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800850c:	2101      	movs	r1, #1
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f960 	bl	80087d4 <USB_SetDevSpeed>
 8008514:	e003      	b.n	800851e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008516:	2103      	movs	r1, #3
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f95b 	bl	80087d4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800851e:	2110      	movs	r1, #16
 8008520:	6878      	ldr	r0, [r7, #4]
 8008522:	f000 f8f3 	bl	800870c <USB_FlushTxFifo>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d001      	beq.n	8008530 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008530:	6878      	ldr	r0, [r7, #4]
 8008532:	f000 f91f 	bl	8008774 <USB_FlushRxFifo>
 8008536:	4603      	mov	r3, r0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d001      	beq.n	8008540 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008546:	461a      	mov	r2, r3
 8008548:	2300      	movs	r3, #0
 800854a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008552:	461a      	mov	r2, r3
 8008554:	2300      	movs	r3, #0
 8008556:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800855e:	461a      	mov	r2, r3
 8008560:	2300      	movs	r3, #0
 8008562:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008564:	2300      	movs	r3, #0
 8008566:	613b      	str	r3, [r7, #16]
 8008568:	e043      	b.n	80085f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800857c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008580:	d118      	bne.n	80085b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10a      	bne.n	800859e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	015a      	lsls	r2, r3, #5
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4413      	add	r3, r2
 8008590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008594:	461a      	mov	r2, r3
 8008596:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800859a:	6013      	str	r3, [r2, #0]
 800859c:	e013      	b.n	80085c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800859e:	693b      	ldr	r3, [r7, #16]
 80085a0:	015a      	lsls	r2, r3, #5
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	4413      	add	r3, r2
 80085a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085aa:	461a      	mov	r2, r3
 80085ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	e008      	b.n	80085c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085c0:	461a      	mov	r2, r3
 80085c2:	2300      	movs	r3, #0
 80085c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80085c6:	693b      	ldr	r3, [r7, #16]
 80085c8:	015a      	lsls	r2, r3, #5
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	4413      	add	r3, r2
 80085ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085d2:	461a      	mov	r2, r3
 80085d4:	2300      	movs	r3, #0
 80085d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	015a      	lsls	r2, r3, #5
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085e4:	461a      	mov	r2, r3
 80085e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	3301      	adds	r3, #1
 80085f0:	613b      	str	r3, [r7, #16]
 80085f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d3b7      	bcc.n	800856a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	e043      	b.n	8008688 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	015a      	lsls	r2, r3, #5
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	4413      	add	r3, r2
 8008608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008616:	d118      	bne.n	800864a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800861e:	693b      	ldr	r3, [r7, #16]
 8008620:	015a      	lsls	r2, r3, #5
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	4413      	add	r3, r2
 8008626:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800862a:	461a      	mov	r2, r3
 800862c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008630:	6013      	str	r3, [r2, #0]
 8008632:	e013      	b.n	800865c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008634:	693b      	ldr	r3, [r7, #16]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4413      	add	r3, r2
 800863c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008640:	461a      	mov	r2, r3
 8008642:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008646:	6013      	str	r3, [r2, #0]
 8008648:	e008      	b.n	800865c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008656:	461a      	mov	r2, r3
 8008658:	2300      	movs	r3, #0
 800865a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	015a      	lsls	r2, r3, #5
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	4413      	add	r3, r2
 8008664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008668:	461a      	mov	r2, r3
 800866a:	2300      	movs	r3, #0
 800866c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800867a:	461a      	mov	r2, r3
 800867c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008680:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	3301      	adds	r3, #1
 8008686:	613b      	str	r3, [r7, #16]
 8008688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	429a      	cmp	r2, r3
 800868e:	d3b7      	bcc.n	8008600 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	68fa      	ldr	r2, [r7, #12]
 800869a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800869e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086a2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2200      	movs	r2, #0
 80086a8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80086b0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f043 0210 	orr.w	r2, r3, #16
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699a      	ldr	r2, [r3, #24]
 80086c8:	4b0e      	ldr	r3, [pc, #56]	; (8008704 <USB_DevInit+0x2b4>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80086d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d005      	beq.n	80086e2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	f043 0208 	orr.w	r2, r3, #8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80086e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086e4:	2b01      	cmp	r3, #1
 80086e6:	d105      	bne.n	80086f4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	699a      	ldr	r2, [r3, #24]
 80086ec:	4b06      	ldr	r3, [pc, #24]	; (8008708 <USB_DevInit+0x2b8>)
 80086ee:	4313      	orrs	r3, r2
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086f6:	4618      	mov	r0, r3
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008700:	b004      	add	sp, #16
 8008702:	4770      	bx	lr
 8008704:	803c3800 	.word	0x803c3800
 8008708:	40000004 	.word	0x40000004

0800870c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008716:	2300      	movs	r3, #0
 8008718:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	3301      	adds	r3, #1
 800871e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	4a13      	ldr	r2, [pc, #76]	; (8008770 <USB_FlushTxFifo+0x64>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d901      	bls.n	800872c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008728:	2303      	movs	r3, #3
 800872a:	e01b      	b.n	8008764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	691b      	ldr	r3, [r3, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	daf2      	bge.n	800871a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	019b      	lsls	r3, r3, #6
 800873c:	f043 0220 	orr.w	r2, r3, #32
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	3301      	adds	r3, #1
 8008748:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4a08      	ldr	r2, [pc, #32]	; (8008770 <USB_FlushTxFifo+0x64>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d901      	bls.n	8008756 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008752:	2303      	movs	r3, #3
 8008754:	e006      	b.n	8008764 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f003 0320 	and.w	r3, r3, #32
 800875e:	2b20      	cmp	r3, #32
 8008760:	d0f0      	beq.n	8008744 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008762:	2300      	movs	r3, #0
}
 8008764:	4618      	mov	r0, r3
 8008766:	3714      	adds	r7, #20
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr
 8008770:	00030d40 	.word	0x00030d40

08008774 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008774:	b480      	push	{r7}
 8008776:	b085      	sub	sp, #20
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	3301      	adds	r3, #1
 8008784:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	4a11      	ldr	r2, [pc, #68]	; (80087d0 <USB_FlushRxFifo+0x5c>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d901      	bls.n	8008792 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e018      	b.n	80087c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	2b00      	cmp	r3, #0
 8008798:	daf2      	bge.n	8008780 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2210      	movs	r2, #16
 80087a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	3301      	adds	r3, #1
 80087a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	4a08      	ldr	r2, [pc, #32]	; (80087d0 <USB_FlushRxFifo+0x5c>)
 80087ae:	4293      	cmp	r3, r2
 80087b0:	d901      	bls.n	80087b6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087b2:	2303      	movs	r3, #3
 80087b4:	e006      	b.n	80087c4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	691b      	ldr	r3, [r3, #16]
 80087ba:	f003 0310 	and.w	r3, r3, #16
 80087be:	2b10      	cmp	r3, #16
 80087c0:	d0f0      	beq.n	80087a4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	00030d40 	.word	0x00030d40

080087d4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b085      	sub	sp, #20
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
 80087dc:	460b      	mov	r3, r1
 80087de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087ea:	681a      	ldr	r2, [r3, #0]
 80087ec:	78fb      	ldrb	r3, [r7, #3]
 80087ee:	68f9      	ldr	r1, [r7, #12]
 80087f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087f4:	4313      	orrs	r3, r2
 80087f6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f003 0306 	and.w	r3, r3, #6
 800881e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d102      	bne.n	800882c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008826:	2300      	movs	r3, #0
 8008828:	75fb      	strb	r3, [r7, #23]
 800882a:	e00a      	b.n	8008842 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2b02      	cmp	r3, #2
 8008830:	d002      	beq.n	8008838 <USB_GetDevSpeed+0x32>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2b06      	cmp	r3, #6
 8008836:	d102      	bne.n	800883e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008838:	2302      	movs	r3, #2
 800883a:	75fb      	strb	r3, [r7, #23]
 800883c:	e001      	b.n	8008842 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800883e:	230f      	movs	r3, #15
 8008840:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008842:	7dfb      	ldrb	r3, [r7, #23]
}
 8008844:	4618      	mov	r0, r3
 8008846:	371c      	adds	r7, #28
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
 8008858:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800885e:	683b      	ldr	r3, [r7, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d139      	bne.n	80088e0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008872:	69da      	ldr	r2, [r3, #28]
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	781b      	ldrb	r3, [r3, #0]
 8008878:	f003 030f 	and.w	r3, r3, #15
 800887c:	2101      	movs	r1, #1
 800887e:	fa01 f303 	lsl.w	r3, r1, r3
 8008882:	b29b      	uxth	r3, r3
 8008884:	68f9      	ldr	r1, [r7, #12]
 8008886:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800888a:	4313      	orrs	r3, r2
 800888c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d153      	bne.n	800894c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	015a      	lsls	r2, r3, #5
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	4413      	add	r3, r2
 80088ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	68db      	ldr	r3, [r3, #12]
 80088b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	791b      	ldrb	r3, [r3, #4]
 80088be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	059b      	lsls	r3, r3, #22
 80088c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80088c8:	431a      	orrs	r2, r3
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	0159      	lsls	r1, r3, #5
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	440b      	add	r3, r1
 80088d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088d6:	4619      	mov	r1, r3
 80088d8:	4b20      	ldr	r3, [pc, #128]	; (800895c <USB_ActivateEndpoint+0x10c>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	600b      	str	r3, [r1, #0]
 80088de:	e035      	b.n	800894c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e6:	69da      	ldr	r2, [r3, #28]
 80088e8:	683b      	ldr	r3, [r7, #0]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	f003 030f 	and.w	r3, r3, #15
 80088f0:	2101      	movs	r1, #1
 80088f2:	fa01 f303 	lsl.w	r3, r1, r3
 80088f6:	041b      	lsls	r3, r3, #16
 80088f8:	68f9      	ldr	r1, [r7, #12]
 80088fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088fe:	4313      	orrs	r3, r2
 8008900:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008902:	68bb      	ldr	r3, [r7, #8]
 8008904:	015a      	lsls	r2, r3, #5
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	4413      	add	r3, r2
 800890a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d119      	bne.n	800894c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	015a      	lsls	r2, r3, #5
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4413      	add	r3, r2
 8008920:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	68db      	ldr	r3, [r3, #12]
 800892a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800892e:	683b      	ldr	r3, [r7, #0]
 8008930:	791b      	ldrb	r3, [r3, #4]
 8008932:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008934:	430b      	orrs	r3, r1
 8008936:	431a      	orrs	r2, r3
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	0159      	lsls	r1, r3, #5
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	440b      	add	r3, r1
 8008940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008944:	4619      	mov	r1, r3
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <USB_ActivateEndpoint+0x10c>)
 8008948:	4313      	orrs	r3, r2
 800894a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800894c:	2300      	movs	r3, #0
}
 800894e:	4618      	mov	r0, r3
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
 800895a:	bf00      	nop
 800895c:	10008000 	.word	0x10008000

08008960 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008960:	b480      	push	{r7}
 8008962:	b085      	sub	sp, #20
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
 8008968:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	781b      	ldrb	r3, [r3, #0]
 8008972:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	2b01      	cmp	r3, #1
 800897a:	d161      	bne.n	8008a40 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	4413      	add	r3, r2
 8008984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800898e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008992:	d11f      	bne.n	80089d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	0151      	lsls	r1, r2, #5
 80089a6:	68fa      	ldr	r2, [r7, #12]
 80089a8:	440a      	add	r2, r1
 80089aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80089b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	68ba      	ldr	r2, [r7, #8]
 80089c4:	0151      	lsls	r1, r2, #5
 80089c6:	68fa      	ldr	r2, [r7, #12]
 80089c8:	440a      	add	r2, r1
 80089ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80089d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	781b      	ldrb	r3, [r3, #0]
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	2101      	movs	r1, #1
 80089e6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	43db      	mvns	r3, r3
 80089ee:	68f9      	ldr	r1, [r7, #12]
 80089f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089f4:	4013      	ands	r3, r2
 80089f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089fe:	69da      	ldr	r2, [r3, #28]
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 030f 	and.w	r3, r3, #15
 8008a08:	2101      	movs	r1, #1
 8008a0a:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0e:	b29b      	uxth	r3, r3
 8008a10:	43db      	mvns	r3, r3
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a18:	4013      	ands	r3, r2
 8008a1a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	015a      	lsls	r2, r3, #5
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	4413      	add	r3, r2
 8008a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	0159      	lsls	r1, r3, #5
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	440b      	add	r3, r1
 8008a32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a36:	4619      	mov	r1, r3
 8008a38:	4b35      	ldr	r3, [pc, #212]	; (8008b10 <USB_DeactivateEndpoint+0x1b0>)
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	600b      	str	r3, [r1, #0]
 8008a3e:	e060      	b.n	8008b02 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a56:	d11f      	bne.n	8008a98 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	68ba      	ldr	r2, [r7, #8]
 8008a68:	0151      	lsls	r1, r2, #5
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	440a      	add	r2, r1
 8008a6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a76:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	015a      	lsls	r2, r3, #5
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	4413      	add	r3, r2
 8008a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	0151      	lsls	r1, r2, #5
 8008a8a:	68fa      	ldr	r2, [r7, #12]
 8008a8c:	440a      	add	r2, r1
 8008a8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	781b      	ldrb	r3, [r3, #0]
 8008aa4:	f003 030f 	and.w	r3, r3, #15
 8008aa8:	2101      	movs	r1, #1
 8008aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8008aae:	041b      	lsls	r3, r3, #16
 8008ab0:	43db      	mvns	r3, r3
 8008ab2:	68f9      	ldr	r1, [r7, #12]
 8008ab4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ab8:	4013      	ands	r3, r2
 8008aba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac2:	69da      	ldr	r2, [r3, #28]
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	781b      	ldrb	r3, [r3, #0]
 8008ac8:	f003 030f 	and.w	r3, r3, #15
 8008acc:	2101      	movs	r1, #1
 8008ace:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad2:	041b      	lsls	r3, r3, #16
 8008ad4:	43db      	mvns	r3, r3
 8008ad6:	68f9      	ldr	r1, [r7, #12]
 8008ad8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008adc:	4013      	ands	r3, r2
 8008ade:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	015a      	lsls	r2, r3, #5
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4413      	add	r3, r2
 8008ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aec:	681a      	ldr	r2, [r3, #0]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	0159      	lsls	r1, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	440b      	add	r3, r1
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	4619      	mov	r1, r3
 8008afc:	4b05      	ldr	r3, [pc, #20]	; (8008b14 <USB_DeactivateEndpoint+0x1b4>)
 8008afe:	4013      	ands	r3, r2
 8008b00:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008b02:	2300      	movs	r3, #0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr
 8008b10:	ec337800 	.word	0xec337800
 8008b14:	eff37800 	.word	0xeff37800

08008b18 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b08a      	sub	sp, #40	; 0x28
 8008b1c:	af02      	add	r7, sp, #8
 8008b1e:	60f8      	str	r0, [r7, #12]
 8008b20:	60b9      	str	r1, [r7, #8]
 8008b22:	4613      	mov	r3, r2
 8008b24:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	785b      	ldrb	r3, [r3, #1]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	f040 8163 	bne.w	8008e00 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	699b      	ldr	r3, [r3, #24]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d132      	bne.n	8008ba8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	015a      	lsls	r2, r3, #5
 8008b46:	69fb      	ldr	r3, [r7, #28]
 8008b48:	4413      	add	r3, r2
 8008b4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4e:	691a      	ldr	r2, [r3, #16]
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	0159      	lsls	r1, r3, #5
 8008b54:	69fb      	ldr	r3, [r7, #28]
 8008b56:	440b      	add	r3, r1
 8008b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	4ba5      	ldr	r3, [pc, #660]	; (8008df4 <USB_EPStartXfer+0x2dc>)
 8008b60:	4013      	ands	r3, r2
 8008b62:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b64:	69bb      	ldr	r3, [r7, #24]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b70:	691b      	ldr	r3, [r3, #16]
 8008b72:	69ba      	ldr	r2, [r7, #24]
 8008b74:	0151      	lsls	r1, r2, #5
 8008b76:	69fa      	ldr	r2, [r7, #28]
 8008b78:	440a      	add	r2, r1
 8008b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	015a      	lsls	r2, r3, #5
 8008b88:	69fb      	ldr	r3, [r7, #28]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b90:	691a      	ldr	r2, [r3, #16]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	0159      	lsls	r1, r3, #5
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	440b      	add	r3, r1
 8008b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4b95      	ldr	r3, [pc, #596]	; (8008df8 <USB_EPStartXfer+0x2e0>)
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	610b      	str	r3, [r1, #16]
 8008ba6:	e074      	b.n	8008c92 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008ba8:	69bb      	ldr	r3, [r7, #24]
 8008baa:	015a      	lsls	r2, r3, #5
 8008bac:	69fb      	ldr	r3, [r7, #28]
 8008bae:	4413      	add	r3, r2
 8008bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb4:	691a      	ldr	r2, [r3, #16]
 8008bb6:	69bb      	ldr	r3, [r7, #24]
 8008bb8:	0159      	lsls	r1, r3, #5
 8008bba:	69fb      	ldr	r3, [r7, #28]
 8008bbc:	440b      	add	r3, r1
 8008bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	4b8c      	ldr	r3, [pc, #560]	; (8008df8 <USB_EPStartXfer+0x2e0>)
 8008bc6:	4013      	ands	r3, r2
 8008bc8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	69fb      	ldr	r3, [r7, #28]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bd6:	691a      	ldr	r2, [r3, #16]
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	0159      	lsls	r1, r3, #5
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	440b      	add	r3, r1
 8008be0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be4:	4619      	mov	r1, r3
 8008be6:	4b83      	ldr	r3, [pc, #524]	; (8008df4 <USB_EPStartXfer+0x2dc>)
 8008be8:	4013      	ands	r3, r2
 8008bea:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008bec:	69bb      	ldr	r3, [r7, #24]
 8008bee:	015a      	lsls	r2, r3, #5
 8008bf0:	69fb      	ldr	r3, [r7, #28]
 8008bf2:	4413      	add	r3, r2
 8008bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bf8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	6999      	ldr	r1, [r3, #24]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	440b      	add	r3, r1
 8008c04:	1e59      	subs	r1, r3, #1
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	68db      	ldr	r3, [r3, #12]
 8008c0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008c0e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008c10:	4b7a      	ldr	r3, [pc, #488]	; (8008dfc <USB_EPStartXfer+0x2e4>)
 8008c12:	400b      	ands	r3, r1
 8008c14:	69b9      	ldr	r1, [r7, #24]
 8008c16:	0148      	lsls	r0, r1, #5
 8008c18:	69f9      	ldr	r1, [r7, #28]
 8008c1a:	4401      	add	r1, r0
 8008c1c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c20:	4313      	orrs	r3, r2
 8008c22:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c24:	69bb      	ldr	r3, [r7, #24]
 8008c26:	015a      	lsls	r2, r3, #5
 8008c28:	69fb      	ldr	r3, [r7, #28]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c30:	691a      	ldr	r2, [r3, #16]
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	699b      	ldr	r3, [r3, #24]
 8008c36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c3a:	69b9      	ldr	r1, [r7, #24]
 8008c3c:	0148      	lsls	r0, r1, #5
 8008c3e:	69f9      	ldr	r1, [r7, #28]
 8008c40:	4401      	add	r1, r0
 8008c42:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c46:	4313      	orrs	r3, r2
 8008c48:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	791b      	ldrb	r3, [r3, #4]
 8008c4e:	2b01      	cmp	r3, #1
 8008c50:	d11f      	bne.n	8008c92 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008c52:	69bb      	ldr	r3, [r7, #24]
 8008c54:	015a      	lsls	r2, r3, #5
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	4413      	add	r3, r2
 8008c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5e:	691b      	ldr	r3, [r3, #16]
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	0151      	lsls	r1, r2, #5
 8008c64:	69fa      	ldr	r2, [r7, #28]
 8008c66:	440a      	add	r2, r1
 8008c68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c6c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008c70:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008c72:	69bb      	ldr	r3, [r7, #24]
 8008c74:	015a      	lsls	r2, r3, #5
 8008c76:	69fb      	ldr	r3, [r7, #28]
 8008c78:	4413      	add	r3, r2
 8008c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	0151      	lsls	r1, r2, #5
 8008c84:	69fa      	ldr	r2, [r7, #28]
 8008c86:	440a      	add	r2, r1
 8008c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c90:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008c92:	79fb      	ldrb	r3, [r7, #7]
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d14b      	bne.n	8008d30 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	695b      	ldr	r3, [r3, #20]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d009      	beq.n	8008cb4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008ca0:	69bb      	ldr	r3, [r7, #24]
 8008ca2:	015a      	lsls	r2, r3, #5
 8008ca4:	69fb      	ldr	r3, [r7, #28]
 8008ca6:	4413      	add	r3, r2
 8008ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cac:	461a      	mov	r2, r3
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	791b      	ldrb	r3, [r3, #4]
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d128      	bne.n	8008d0e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008cbc:	69fb      	ldr	r3, [r7, #28]
 8008cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d110      	bne.n	8008cee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	015a      	lsls	r2, r3, #5
 8008cd0:	69fb      	ldr	r3, [r7, #28]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	0151      	lsls	r1, r2, #5
 8008cde:	69fa      	ldr	r2, [r7, #28]
 8008ce0:	440a      	add	r2, r1
 8008ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ce6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	e00f      	b.n	8008d0e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	015a      	lsls	r2, r3, #5
 8008cf2:	69fb      	ldr	r3, [r7, #28]
 8008cf4:	4413      	add	r3, r2
 8008cf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	69ba      	ldr	r2, [r7, #24]
 8008cfe:	0151      	lsls	r1, r2, #5
 8008d00:	69fa      	ldr	r2, [r7, #28]
 8008d02:	440a      	add	r2, r1
 8008d04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d0c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	015a      	lsls	r2, r3, #5
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	4413      	add	r3, r2
 8008d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	69ba      	ldr	r2, [r7, #24]
 8008d1e:	0151      	lsls	r1, r2, #5
 8008d20:	69fa      	ldr	r2, [r7, #28]
 8008d22:	440a      	add	r2, r1
 8008d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d28:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d2c:	6013      	str	r3, [r2, #0]
 8008d2e:	e137      	b.n	8008fa0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d30:	69bb      	ldr	r3, [r7, #24]
 8008d32:	015a      	lsls	r2, r3, #5
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	4413      	add	r3, r2
 8008d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	69ba      	ldr	r2, [r7, #24]
 8008d40:	0151      	lsls	r1, r2, #5
 8008d42:	69fa      	ldr	r2, [r7, #28]
 8008d44:	440a      	add	r2, r1
 8008d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d4e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	791b      	ldrb	r3, [r3, #4]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d015      	beq.n	8008d84 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	699b      	ldr	r3, [r3, #24]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	f000 811f 	beq.w	8008fa0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008d62:	69fb      	ldr	r3, [r7, #28]
 8008d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008d6a:	68bb      	ldr	r3, [r7, #8]
 8008d6c:	781b      	ldrb	r3, [r3, #0]
 8008d6e:	f003 030f 	and.w	r3, r3, #15
 8008d72:	2101      	movs	r1, #1
 8008d74:	fa01 f303 	lsl.w	r3, r1, r3
 8008d78:	69f9      	ldr	r1, [r7, #28]
 8008d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	634b      	str	r3, [r1, #52]	; 0x34
 8008d82:	e10d      	b.n	8008fa0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d110      	bne.n	8008db6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	e00f      	b.n	8008dd6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	015a      	lsls	r2, r3, #5
 8008dba:	69fb      	ldr	r3, [r7, #28]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	69ba      	ldr	r2, [r7, #24]
 8008dc6:	0151      	lsls	r1, r2, #5
 8008dc8:	69fa      	ldr	r2, [r7, #28]
 8008dca:	440a      	add	r2, r1
 8008dcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008dd6:	68bb      	ldr	r3, [r7, #8]
 8008dd8:	6919      	ldr	r1, [r3, #16]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	781a      	ldrb	r2, [r3, #0]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	699b      	ldr	r3, [r3, #24]
 8008de2:	b298      	uxth	r0, r3
 8008de4:	79fb      	ldrb	r3, [r7, #7]
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4603      	mov	r3, r0
 8008dea:	68f8      	ldr	r0, [r7, #12]
 8008dec:	f000 faea 	bl	80093c4 <USB_WritePacket>
 8008df0:	e0d6      	b.n	8008fa0 <USB_EPStartXfer+0x488>
 8008df2:	bf00      	nop
 8008df4:	e007ffff 	.word	0xe007ffff
 8008df8:	fff80000 	.word	0xfff80000
 8008dfc:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e00:	69bb      	ldr	r3, [r7, #24]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	69fb      	ldr	r3, [r7, #28]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e0c:	691a      	ldr	r2, [r3, #16]
 8008e0e:	69bb      	ldr	r3, [r7, #24]
 8008e10:	0159      	lsls	r1, r3, #5
 8008e12:	69fb      	ldr	r3, [r7, #28]
 8008e14:	440b      	add	r3, r1
 8008e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	4b63      	ldr	r3, [pc, #396]	; (8008fac <USB_EPStartXfer+0x494>)
 8008e1e:	4013      	ands	r3, r2
 8008e20:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69fb      	ldr	r3, [r7, #28]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	0159      	lsls	r1, r3, #5
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	440b      	add	r3, r1
 8008e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	4b5c      	ldr	r3, [pc, #368]	; (8008fb0 <USB_EPStartXfer+0x498>)
 8008e40:	4013      	ands	r3, r2
 8008e42:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	699b      	ldr	r3, [r3, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d123      	bne.n	8008e94 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e4c:	69bb      	ldr	r3, [r7, #24]
 8008e4e:	015a      	lsls	r2, r3, #5
 8008e50:	69fb      	ldr	r3, [r7, #28]
 8008e52:	4413      	add	r3, r2
 8008e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e58:	691a      	ldr	r2, [r3, #16]
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e62:	69b9      	ldr	r1, [r7, #24]
 8008e64:	0148      	lsls	r0, r1, #5
 8008e66:	69f9      	ldr	r1, [r7, #28]
 8008e68:	4401      	add	r1, r0
 8008e6a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008e72:	69bb      	ldr	r3, [r7, #24]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	69fa      	ldr	r2, [r7, #28]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e90:	6113      	str	r3, [r2, #16]
 8008e92:	e037      	b.n	8008f04 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	699a      	ldr	r2, [r3, #24]
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	4413      	add	r3, r2
 8008e9e:	1e5a      	subs	r2, r3, #1
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	68db      	ldr	r3, [r3, #12]
 8008ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ea8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	8afa      	ldrh	r2, [r7, #22]
 8008eb0:	fb03 f202 	mul.w	r2, r3, r2
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	015a      	lsls	r2, r3, #5
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	4413      	add	r3, r2
 8008ec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ec4:	691a      	ldr	r2, [r3, #16]
 8008ec6:	8afb      	ldrh	r3, [r7, #22]
 8008ec8:	04d9      	lsls	r1, r3, #19
 8008eca:	4b3a      	ldr	r3, [pc, #232]	; (8008fb4 <USB_EPStartXfer+0x49c>)
 8008ecc:	400b      	ands	r3, r1
 8008ece:	69b9      	ldr	r1, [r7, #24]
 8008ed0:	0148      	lsls	r0, r1, #5
 8008ed2:	69f9      	ldr	r1, [r7, #28]
 8008ed4:	4401      	add	r1, r0
 8008ed6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008eda:	4313      	orrs	r3, r2
 8008edc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eea:	691a      	ldr	r2, [r3, #16]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	69db      	ldr	r3, [r3, #28]
 8008ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ef4:	69b9      	ldr	r1, [r7, #24]
 8008ef6:	0148      	lsls	r0, r1, #5
 8008ef8:	69f9      	ldr	r1, [r7, #28]
 8008efa:	4401      	add	r1, r0
 8008efc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f00:	4313      	orrs	r3, r2
 8008f02:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d10d      	bne.n	8008f26 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	691b      	ldr	r3, [r3, #16]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d009      	beq.n	8008f26 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008f12:	68bb      	ldr	r3, [r7, #8]
 8008f14:	6919      	ldr	r1, [r3, #16]
 8008f16:	69bb      	ldr	r3, [r7, #24]
 8008f18:	015a      	lsls	r2, r3, #5
 8008f1a:	69fb      	ldr	r3, [r7, #28]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f22:	460a      	mov	r2, r1
 8008f24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f26:	68bb      	ldr	r3, [r7, #8]
 8008f28:	791b      	ldrb	r3, [r3, #4]
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	d128      	bne.n	8008f80 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f2e:	69fb      	ldr	r3, [r7, #28]
 8008f30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d110      	bne.n	8008f60 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f3e:	69bb      	ldr	r3, [r7, #24]
 8008f40:	015a      	lsls	r2, r3, #5
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	4413      	add	r3, r2
 8008f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	69ba      	ldr	r2, [r7, #24]
 8008f4e:	0151      	lsls	r1, r2, #5
 8008f50:	69fa      	ldr	r2, [r7, #28]
 8008f52:	440a      	add	r2, r1
 8008f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f5c:	6013      	str	r3, [r2, #0]
 8008f5e:	e00f      	b.n	8008f80 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f60:	69bb      	ldr	r3, [r7, #24]
 8008f62:	015a      	lsls	r2, r3, #5
 8008f64:	69fb      	ldr	r3, [r7, #28]
 8008f66:	4413      	add	r3, r2
 8008f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69ba      	ldr	r2, [r7, #24]
 8008f70:	0151      	lsls	r1, r2, #5
 8008f72:	69fa      	ldr	r2, [r7, #28]
 8008f74:	440a      	add	r2, r1
 8008f76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f80:	69bb      	ldr	r3, [r7, #24]
 8008f82:	015a      	lsls	r2, r3, #5
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69ba      	ldr	r2, [r7, #24]
 8008f90:	0151      	lsls	r1, r2, #5
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	440a      	add	r2, r1
 8008f96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f9a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fa0:	2300      	movs	r3, #0
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	fff80000 	.word	0xfff80000
 8008fb0:	e007ffff 	.word	0xe007ffff
 8008fb4:	1ff80000 	.word	0x1ff80000

08008fb8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b087      	sub	sp, #28
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	60f8      	str	r0, [r7, #12]
 8008fc0:	60b9      	str	r1, [r7, #8]
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 80ce 	bne.w	8009176 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	699b      	ldr	r3, [r3, #24]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d132      	bne.n	8009048 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	691a      	ldr	r2, [r3, #16]
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	0159      	lsls	r1, r3, #5
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	440b      	add	r3, r1
 8008ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	4b9a      	ldr	r3, [pc, #616]	; (8009268 <USB_EP0StartXfer+0x2b0>)
 8009000:	4013      	ands	r3, r2
 8009002:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	693a      	ldr	r2, [r7, #16]
 8009014:	0151      	lsls	r1, r2, #5
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	440a      	add	r2, r1
 800901a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800901e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009022:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009024:	693b      	ldr	r3, [r7, #16]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	4413      	add	r3, r2
 800902c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009030:	691a      	ldr	r2, [r3, #16]
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	0159      	lsls	r1, r3, #5
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	440b      	add	r3, r1
 800903a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800903e:	4619      	mov	r1, r3
 8009040:	4b8a      	ldr	r3, [pc, #552]	; (800926c <USB_EP0StartXfer+0x2b4>)
 8009042:	4013      	ands	r3, r2
 8009044:	610b      	str	r3, [r1, #16]
 8009046:	e04e      	b.n	80090e6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	0159      	lsls	r1, r3, #5
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	440b      	add	r3, r1
 800905e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009062:	4619      	mov	r1, r3
 8009064:	4b81      	ldr	r3, [pc, #516]	; (800926c <USB_EP0StartXfer+0x2b4>)
 8009066:	4013      	ands	r3, r2
 8009068:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009076:	691a      	ldr	r2, [r3, #16]
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	0159      	lsls	r1, r3, #5
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	440b      	add	r3, r1
 8009080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009084:	4619      	mov	r1, r3
 8009086:	4b78      	ldr	r3, [pc, #480]	; (8009268 <USB_EP0StartXfer+0x2b0>)
 8009088:	4013      	ands	r3, r2
 800908a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	699a      	ldr	r2, [r3, #24]
 8009090:	68bb      	ldr	r3, [r7, #8]
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	429a      	cmp	r2, r3
 8009096:	d903      	bls.n	80090a0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	68da      	ldr	r2, [r3, #12]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	697a      	ldr	r2, [r7, #20]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	697b      	ldr	r3, [r7, #20]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d6:	6939      	ldr	r1, [r7, #16]
 80090d8:	0148      	lsls	r0, r1, #5
 80090da:	6979      	ldr	r1, [r7, #20]
 80090dc:	4401      	add	r1, r0
 80090de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090e2:	4313      	orrs	r3, r2
 80090e4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	2b01      	cmp	r3, #1
 80090ea:	d11e      	bne.n	800912a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	695b      	ldr	r3, [r3, #20]
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d009      	beq.n	8009108 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009100:	461a      	mov	r2, r3
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	695b      	ldr	r3, [r3, #20]
 8009106:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009108:	693b      	ldr	r3, [r7, #16]
 800910a:	015a      	lsls	r2, r3, #5
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	4413      	add	r3, r2
 8009110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	693a      	ldr	r2, [r7, #16]
 8009118:	0151      	lsls	r1, r2, #5
 800911a:	697a      	ldr	r2, [r7, #20]
 800911c:	440a      	add	r2, r1
 800911e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009122:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009126:	6013      	str	r3, [r2, #0]
 8009128:	e097      	b.n	800925a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	015a      	lsls	r2, r3, #5
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	4413      	add	r3, r2
 8009132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	0151      	lsls	r1, r2, #5
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	440a      	add	r2, r1
 8009140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009144:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009148:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	699b      	ldr	r3, [r3, #24]
 800914e:	2b00      	cmp	r3, #0
 8009150:	f000 8083 	beq.w	800925a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800915a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	2101      	movs	r1, #1
 8009166:	fa01 f303 	lsl.w	r3, r1, r3
 800916a:	6979      	ldr	r1, [r7, #20]
 800916c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009170:	4313      	orrs	r3, r2
 8009172:	634b      	str	r3, [r1, #52]	; 0x34
 8009174:	e071      	b.n	800925a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009176:	693b      	ldr	r3, [r7, #16]
 8009178:	015a      	lsls	r2, r3, #5
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	4413      	add	r3, r2
 800917e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	693b      	ldr	r3, [r7, #16]
 8009186:	0159      	lsls	r1, r3, #5
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	440b      	add	r3, r1
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	4619      	mov	r1, r3
 8009192:	4b36      	ldr	r3, [pc, #216]	; (800926c <USB_EP0StartXfer+0x2b4>)
 8009194:	4013      	ands	r3, r2
 8009196:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	015a      	lsls	r2, r3, #5
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	4413      	add	r3, r2
 80091a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a4:	691a      	ldr	r2, [r3, #16]
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	0159      	lsls	r1, r3, #5
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	440b      	add	r3, r1
 80091ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b2:	4619      	mov	r1, r3
 80091b4:	4b2c      	ldr	r3, [pc, #176]	; (8009268 <USB_EP0StartXfer+0x2b0>)
 80091b6:	4013      	ands	r3, r2
 80091b8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	699b      	ldr	r3, [r3, #24]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d003      	beq.n	80091ca <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	68da      	ldr	r2, [r3, #12]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	68da      	ldr	r2, [r3, #12]
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	015a      	lsls	r2, r3, #5
 80091d6:	697b      	ldr	r3, [r7, #20]
 80091d8:	4413      	add	r3, r2
 80091da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	0151      	lsls	r1, r2, #5
 80091e4:	697a      	ldr	r2, [r7, #20]
 80091e6:	440a      	add	r2, r1
 80091e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	015a      	lsls	r2, r3, #5
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	4413      	add	r3, r2
 80091fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091fe:	691a      	ldr	r2, [r3, #16]
 8009200:	68bb      	ldr	r3, [r7, #8]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009208:	6939      	ldr	r1, [r7, #16]
 800920a:	0148      	lsls	r0, r1, #5
 800920c:	6979      	ldr	r1, [r7, #20]
 800920e:	4401      	add	r1, r0
 8009210:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009214:	4313      	orrs	r3, r2
 8009216:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009218:	79fb      	ldrb	r3, [r7, #7]
 800921a:	2b01      	cmp	r3, #1
 800921c:	d10d      	bne.n	800923a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d009      	beq.n	800923a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	6919      	ldr	r1, [r3, #16]
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	015a      	lsls	r2, r3, #5
 800922e:	697b      	ldr	r3, [r7, #20]
 8009230:	4413      	add	r3, r2
 8009232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009236:	460a      	mov	r2, r1
 8009238:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	015a      	lsls	r2, r3, #5
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	4413      	add	r3, r2
 8009242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	693a      	ldr	r2, [r7, #16]
 800924a:	0151      	lsls	r1, r2, #5
 800924c:	697a      	ldr	r2, [r7, #20]
 800924e:	440a      	add	r2, r1
 8009250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009254:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009258:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800925a:	2300      	movs	r3, #0
}
 800925c:	4618      	mov	r0, r3
 800925e:	371c      	adds	r7, #28
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr
 8009268:	e007ffff 	.word	0xe007ffff
 800926c:	fff80000 	.word	0xfff80000

08009270 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800927e:	2300      	movs	r3, #0
 8009280:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	785b      	ldrb	r3, [r3, #1]
 800928a:	2b01      	cmp	r3, #1
 800928c:	d14a      	bne.n	8009324 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	781b      	ldrb	r3, [r3, #0]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	693b      	ldr	r3, [r7, #16]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092a6:	f040 8086 	bne.w	80093b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	015a      	lsls	r2, r3, #5
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	4413      	add	r3, r2
 80092b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	683a      	ldr	r2, [r7, #0]
 80092bc:	7812      	ldrb	r2, [r2, #0]
 80092be:	0151      	lsls	r1, r2, #5
 80092c0:	693a      	ldr	r2, [r7, #16]
 80092c2:	440a      	add	r2, r1
 80092c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80092cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80092ce:	683b      	ldr	r3, [r7, #0]
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	015a      	lsls	r2, r3, #5
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	4413      	add	r3, r2
 80092d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	683a      	ldr	r2, [r7, #0]
 80092e0:	7812      	ldrb	r2, [r2, #0]
 80092e2:	0151      	lsls	r1, r2, #5
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	440a      	add	r2, r1
 80092e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3301      	adds	r3, #1
 80092f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80092fe:	4293      	cmp	r3, r2
 8009300:	d902      	bls.n	8009308 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	75fb      	strb	r3, [r7, #23]
          break;
 8009306:	e056      	b.n	80093b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	781b      	ldrb	r3, [r3, #0]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800931c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009320:	d0e7      	beq.n	80092f2 <USB_EPStopXfer+0x82>
 8009322:	e048      	b.n	80093b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	781b      	ldrb	r3, [r3, #0]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009338:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800933c:	d13b      	bne.n	80093b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	015a      	lsls	r2, r3, #5
 8009344:	693b      	ldr	r3, [r7, #16]
 8009346:	4413      	add	r3, r2
 8009348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	7812      	ldrb	r2, [r2, #0]
 8009352:	0151      	lsls	r1, r2, #5
 8009354:	693a      	ldr	r2, [r7, #16]
 8009356:	440a      	add	r2, r1
 8009358:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800935c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009360:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	781b      	ldrb	r3, [r3, #0]
 8009366:	015a      	lsls	r2, r3, #5
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	4413      	add	r3, r2
 800936c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	683a      	ldr	r2, [r7, #0]
 8009374:	7812      	ldrb	r2, [r2, #0]
 8009376:	0151      	lsls	r1, r2, #5
 8009378:	693a      	ldr	r2, [r7, #16]
 800937a:	440a      	add	r2, r1
 800937c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009384:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	3301      	adds	r3, #1
 800938a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009392:	4293      	cmp	r3, r2
 8009394:	d902      	bls.n	800939c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	75fb      	strb	r3, [r7, #23]
          break;
 800939a:	e00c      	b.n	80093b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	781b      	ldrb	r3, [r3, #0]
 80093a0:	015a      	lsls	r2, r3, #5
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	4413      	add	r3, r2
 80093a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093b4:	d0e7      	beq.n	8009386 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093b8:	4618      	mov	r0, r3
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr

080093c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80093c4:	b480      	push	{r7}
 80093c6:	b089      	sub	sp, #36	; 0x24
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4611      	mov	r1, r2
 80093d0:	461a      	mov	r2, r3
 80093d2:	460b      	mov	r3, r1
 80093d4:	71fb      	strb	r3, [r7, #7]
 80093d6:	4613      	mov	r3, r2
 80093d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80093e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d123      	bne.n	8009432 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80093ea:	88bb      	ldrh	r3, [r7, #4]
 80093ec:	3303      	adds	r3, #3
 80093ee:	089b      	lsrs	r3, r3, #2
 80093f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80093f2:	2300      	movs	r3, #0
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	e018      	b.n	800942a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80093f8:	79fb      	ldrb	r3, [r7, #7]
 80093fa:	031a      	lsls	r2, r3, #12
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009404:	461a      	mov	r2, r3
 8009406:	69fb      	ldr	r3, [r7, #28]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	3301      	adds	r3, #1
 8009410:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009412:	69fb      	ldr	r3, [r7, #28]
 8009414:	3301      	adds	r3, #1
 8009416:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009418:	69fb      	ldr	r3, [r7, #28]
 800941a:	3301      	adds	r3, #1
 800941c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800941e:	69fb      	ldr	r3, [r7, #28]
 8009420:	3301      	adds	r3, #1
 8009422:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009424:	69bb      	ldr	r3, [r7, #24]
 8009426:	3301      	adds	r3, #1
 8009428:	61bb      	str	r3, [r7, #24]
 800942a:	69ba      	ldr	r2, [r7, #24]
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	429a      	cmp	r2, r3
 8009430:	d3e2      	bcc.n	80093f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3724      	adds	r7, #36	; 0x24
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009440:	b480      	push	{r7}
 8009442:	b08b      	sub	sp, #44	; 0x2c
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	60b9      	str	r1, [r7, #8]
 800944a:	4613      	mov	r3, r2
 800944c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009456:	88fb      	ldrh	r3, [r7, #6]
 8009458:	089b      	lsrs	r3, r3, #2
 800945a:	b29b      	uxth	r3, r3
 800945c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800945e:	88fb      	ldrh	r3, [r7, #6]
 8009460:	f003 0303 	and.w	r3, r3, #3
 8009464:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009466:	2300      	movs	r3, #0
 8009468:	623b      	str	r3, [r7, #32]
 800946a:	e014      	b.n	8009496 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800946c:	69bb      	ldr	r3, [r7, #24]
 800946e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009472:	681a      	ldr	r2, [r3, #0]
 8009474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009476:	601a      	str	r2, [r3, #0]
    pDest++;
 8009478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800947a:	3301      	adds	r3, #1
 800947c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800947e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009480:	3301      	adds	r3, #1
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009486:	3301      	adds	r3, #1
 8009488:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800948a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800948c:	3301      	adds	r3, #1
 800948e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	3301      	adds	r3, #1
 8009494:	623b      	str	r3, [r7, #32]
 8009496:	6a3a      	ldr	r2, [r7, #32]
 8009498:	697b      	ldr	r3, [r7, #20]
 800949a:	429a      	cmp	r2, r3
 800949c:	d3e6      	bcc.n	800946c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800949e:	8bfb      	ldrh	r3, [r7, #30]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01e      	beq.n	80094e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80094a4:	2300      	movs	r3, #0
 80094a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80094a8:	69bb      	ldr	r3, [r7, #24]
 80094aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80094ae:	461a      	mov	r2, r3
 80094b0:	f107 0310 	add.w	r3, r7, #16
 80094b4:	6812      	ldr	r2, [r2, #0]
 80094b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80094b8:	693a      	ldr	r2, [r7, #16]
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	b2db      	uxtb	r3, r3
 80094be:	00db      	lsls	r3, r3, #3
 80094c0:	fa22 f303 	lsr.w	r3, r2, r3
 80094c4:	b2da      	uxtb	r2, r3
 80094c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094c8:	701a      	strb	r2, [r3, #0]
      i++;
 80094ca:	6a3b      	ldr	r3, [r7, #32]
 80094cc:	3301      	adds	r3, #1
 80094ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80094d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d2:	3301      	adds	r3, #1
 80094d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80094d6:	8bfb      	ldrh	r3, [r7, #30]
 80094d8:	3b01      	subs	r3, #1
 80094da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80094dc:	8bfb      	ldrh	r3, [r7, #30]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1ea      	bne.n	80094b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80094e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	372c      	adds	r7, #44	; 0x2c
 80094e8:	46bd      	mov	sp, r7
 80094ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ee:	4770      	bx	lr

080094f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b085      	sub	sp, #20
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
 80094f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	781b      	ldrb	r3, [r3, #0]
 8009502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d12c      	bne.n	8009566 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	015a      	lsls	r2, r3, #5
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	db12      	blt.n	8009544 <USB_EPSetStall+0x54>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00f      	beq.n	8009544 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	015a      	lsls	r2, r3, #5
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4413      	add	r3, r2
 800952c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	0151      	lsls	r1, r2, #5
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	440a      	add	r2, r1
 800953a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800953e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009542:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	015a      	lsls	r2, r3, #5
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	4413      	add	r3, r2
 800954c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68ba      	ldr	r2, [r7, #8]
 8009554:	0151      	lsls	r1, r2, #5
 8009556:	68fa      	ldr	r2, [r7, #12]
 8009558:	440a      	add	r2, r1
 800955a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800955e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	e02b      	b.n	80095be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	015a      	lsls	r2, r3, #5
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	4413      	add	r3, r2
 800956e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2b00      	cmp	r3, #0
 8009576:	db12      	blt.n	800959e <USB_EPSetStall+0xae>
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d00f      	beq.n	800959e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	015a      	lsls	r2, r3, #5
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	4413      	add	r3, r2
 8009586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	0151      	lsls	r1, r2, #5
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	440a      	add	r2, r1
 8009594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009598:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800959c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	68ba      	ldr	r2, [r7, #8]
 80095ae:	0151      	lsls	r1, r2, #5
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	440a      	add	r2, r1
 80095b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80095bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80095be:	2300      	movs	r3, #0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3714      	adds	r7, #20
 80095c4:	46bd      	mov	sp, r7
 80095c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ca:	4770      	bx	lr

080095cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b085      	sub	sp, #20
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	781b      	ldrb	r3, [r3, #0]
 80095de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	785b      	ldrb	r3, [r3, #1]
 80095e4:	2b01      	cmp	r3, #1
 80095e6:	d128      	bne.n	800963a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80095e8:	68bb      	ldr	r3, [r7, #8]
 80095ea:	015a      	lsls	r2, r3, #5
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	4413      	add	r3, r2
 80095f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	0151      	lsls	r1, r2, #5
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	440a      	add	r2, r1
 80095fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009602:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009606:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	791b      	ldrb	r3, [r3, #4]
 800960c:	2b03      	cmp	r3, #3
 800960e:	d003      	beq.n	8009618 <USB_EPClearStall+0x4c>
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	791b      	ldrb	r3, [r3, #4]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d138      	bne.n	800968a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009636:	6013      	str	r3, [r2, #0]
 8009638:	e027      	b.n	800968a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	015a      	lsls	r2, r3, #5
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	4413      	add	r3, r2
 8009642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	0151      	lsls	r1, r2, #5
 800964c:	68fa      	ldr	r2, [r7, #12]
 800964e:	440a      	add	r2, r1
 8009650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009654:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009658:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800965a:	683b      	ldr	r3, [r7, #0]
 800965c:	791b      	ldrb	r3, [r3, #4]
 800965e:	2b03      	cmp	r3, #3
 8009660:	d003      	beq.n	800966a <USB_EPClearStall+0x9e>
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	791b      	ldrb	r3, [r3, #4]
 8009666:	2b02      	cmp	r3, #2
 8009668:	d10f      	bne.n	800968a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	015a      	lsls	r2, r3, #5
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	4413      	add	r3, r2
 8009672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68ba      	ldr	r2, [r7, #8]
 800967a:	0151      	lsls	r1, r2, #5
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	440a      	add	r2, r1
 8009680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009688:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800968a:	2300      	movs	r3, #0
}
 800968c:	4618      	mov	r0, r3
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	460b      	mov	r3, r1
 80096a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	68fa      	ldr	r2, [r7, #12]
 80096b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80096ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096c2:	681a      	ldr	r2, [r3, #0]
 80096c4:	78fb      	ldrb	r3, [r7, #3]
 80096c6:	011b      	lsls	r3, r3, #4
 80096c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80096cc:	68f9      	ldr	r1, [r7, #12]
 80096ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096d2:	4313      	orrs	r3, r2
 80096d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80096d6:	2300      	movs	r3, #0
}
 80096d8:	4618      	mov	r0, r3
 80096da:	3714      	adds	r7, #20
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b085      	sub	sp, #20
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096fe:	f023 0303 	bic.w	r3, r3, #3
 8009702:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970a:	685b      	ldr	r3, [r3, #4]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009712:	f023 0302 	bic.w	r3, r3, #2
 8009716:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	3714      	adds	r7, #20
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr

08009726 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009726:	b480      	push	{r7}
 8009728:	b085      	sub	sp, #20
 800972a:	af00      	add	r7, sp, #0
 800972c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	68fa      	ldr	r2, [r7, #12]
 800973c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009740:	f023 0303 	bic.w	r3, r3, #3
 8009744:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	68fa      	ldr	r2, [r7, #12]
 8009750:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009754:	f043 0302 	orr.w	r3, r3, #2
 8009758:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3714      	adds	r7, #20
 8009760:	46bd      	mov	sp, r7
 8009762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009766:	4770      	bx	lr

08009768 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	699b      	ldr	r3, [r3, #24]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	4013      	ands	r3, r2
 800977e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009780:	68fb      	ldr	r3, [r7, #12]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3714      	adds	r7, #20
 8009786:	46bd      	mov	sp, r7
 8009788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978c:	4770      	bx	lr

0800978e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800978e:	b480      	push	{r7}
 8009790:	b085      	sub	sp, #20
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097a0:	699b      	ldr	r3, [r3, #24]
 80097a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097aa:	69db      	ldr	r3, [r3, #28]
 80097ac:	68ba      	ldr	r2, [r7, #8]
 80097ae:	4013      	ands	r3, r2
 80097b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	0c1b      	lsrs	r3, r3, #16
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3714      	adds	r7, #20
 80097ba:	46bd      	mov	sp, r7
 80097bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c0:	4770      	bx	lr

080097c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80097c2:	b480      	push	{r7}
 80097c4:	b085      	sub	sp, #20
 80097c6:	af00      	add	r7, sp, #0
 80097c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80097de:	69db      	ldr	r3, [r3, #28]
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	4013      	ands	r3, r2
 80097e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	b29b      	uxth	r3, r3
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr

080097f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80097f6:	b480      	push	{r7}
 80097f8:	b085      	sub	sp, #20
 80097fa:	af00      	add	r7, sp, #0
 80097fc:	6078      	str	r0, [r7, #4]
 80097fe:	460b      	mov	r3, r1
 8009800:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009806:	78fb      	ldrb	r3, [r7, #3]
 8009808:	015a      	lsls	r2, r3, #5
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	4413      	add	r3, r2
 800980e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800981c:	695b      	ldr	r3, [r3, #20]
 800981e:	68ba      	ldr	r2, [r7, #8]
 8009820:	4013      	ands	r3, r2
 8009822:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009824:	68bb      	ldr	r3, [r7, #8]
}
 8009826:	4618      	mov	r0, r3
 8009828:	3714      	adds	r7, #20
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009832:	b480      	push	{r7}
 8009834:	b087      	sub	sp, #28
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	460b      	mov	r3, r1
 800983c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800984c:	697b      	ldr	r3, [r7, #20]
 800984e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009854:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009856:	78fb      	ldrb	r3, [r7, #3]
 8009858:	f003 030f 	and.w	r3, r3, #15
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	fa22 f303 	lsr.w	r3, r2, r3
 8009862:	01db      	lsls	r3, r3, #7
 8009864:	b2db      	uxtb	r3, r3
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	4313      	orrs	r3, r2
 800986a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800986c:	78fb      	ldrb	r3, [r7, #3]
 800986e:	015a      	lsls	r2, r3, #5
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	4413      	add	r3, r2
 8009874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009878:	689b      	ldr	r3, [r3, #8]
 800987a:	693a      	ldr	r2, [r7, #16]
 800987c:	4013      	ands	r3, r2
 800987e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009880:	68bb      	ldr	r3, [r7, #8]
}
 8009882:	4618      	mov	r0, r3
 8009884:	371c      	adds	r7, #28
 8009886:	46bd      	mov	sp, r7
 8009888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988c:	4770      	bx	lr

0800988e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800988e:	b480      	push	{r7}
 8009890:	b083      	sub	sp, #12
 8009892:	af00      	add	r7, sp, #0
 8009894:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	f003 0301 	and.w	r3, r3, #1
}
 800989e:	4618      	mov	r0, r3
 80098a0:	370c      	adds	r7, #12
 80098a2:	46bd      	mov	sp, r7
 80098a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a8:	4770      	bx	lr
	...

080098ac <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098be:	681a      	ldr	r2, [r3, #0]
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098c6:	4619      	mov	r1, r3
 80098c8:	4b09      	ldr	r3, [pc, #36]	; (80098f0 <USB_ActivateSetup+0x44>)
 80098ca:	4013      	ands	r3, r2
 80098cc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	68fa      	ldr	r2, [r7, #12]
 80098d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80098e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098e2:	2300      	movs	r3, #0
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3714      	adds	r7, #20
 80098e8:	46bd      	mov	sp, r7
 80098ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ee:	4770      	bx	lr
 80098f0:	fffff800 	.word	0xfffff800

080098f4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80098f4:	b480      	push	{r7}
 80098f6:	b087      	sub	sp, #28
 80098f8:	af00      	add	r7, sp, #0
 80098fa:	60f8      	str	r0, [r7, #12]
 80098fc:	460b      	mov	r3, r1
 80098fe:	607a      	str	r2, [r7, #4]
 8009900:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	333c      	adds	r3, #60	; 0x3c
 800990a:	3304      	adds	r3, #4
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	4a26      	ldr	r2, [pc, #152]	; (80099ac <USB_EP0_OutStart+0xb8>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d90a      	bls.n	800992e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009928:	d101      	bne.n	800992e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	e037      	b.n	800999e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009934:	461a      	mov	r2, r3
 8009936:	2300      	movs	r3, #0
 8009938:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009948:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800994c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009954:	691b      	ldr	r3, [r3, #16]
 8009956:	697a      	ldr	r2, [r7, #20]
 8009958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800995c:	f043 0318 	orr.w	r3, r3, #24
 8009960:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009970:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009974:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	2b01      	cmp	r3, #1
 800997a:	d10f      	bne.n	800999c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800997c:	697b      	ldr	r3, [r7, #20]
 800997e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009988:	697b      	ldr	r3, [r7, #20]
 800998a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	697a      	ldr	r2, [r7, #20]
 8009992:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009996:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800999a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800999c:	2300      	movs	r3, #0
}
 800999e:	4618      	mov	r0, r3
 80099a0:	371c      	adds	r7, #28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr
 80099aa:	bf00      	nop
 80099ac:	4f54300a 	.word	0x4f54300a

080099b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099b8:	2300      	movs	r3, #0
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	3301      	adds	r3, #1
 80099c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	4a13      	ldr	r2, [pc, #76]	; (8009a14 <USB_CoreReset+0x64>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d901      	bls.n	80099ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80099ca:	2303      	movs	r3, #3
 80099cc:	e01b      	b.n	8009a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	daf2      	bge.n	80099bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80099d6:	2300      	movs	r3, #0
 80099d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	691b      	ldr	r3, [r3, #16]
 80099de:	f043 0201 	orr.w	r2, r3, #1
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	3301      	adds	r3, #1
 80099ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4a09      	ldr	r2, [pc, #36]	; (8009a14 <USB_CoreReset+0x64>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d901      	bls.n	80099f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80099f4:	2303      	movs	r3, #3
 80099f6:	e006      	b.n	8009a06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	691b      	ldr	r3, [r3, #16]
 80099fc:	f003 0301 	and.w	r3, r3, #1
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d0f0      	beq.n	80099e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a04:	2300      	movs	r3, #0
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	00030d40 	.word	0x00030d40

08009a18 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009a24:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009a28:	f002 fcfe 	bl	800c428 <malloc>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	32b0      	adds	r2, #176	; 0xb0
 8009a40:	2100      	movs	r1, #0
 8009a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009a46:	2302      	movs	r3, #2
 8009a48:	e0d4      	b.n	8009bf4 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009a4a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009a4e:	2100      	movs	r1, #0
 8009a50:	68f8      	ldr	r0, [r7, #12]
 8009a52:	f002 fda5 	bl	800c5a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	32b0      	adds	r2, #176	; 0xb0
 8009a60:	68f9      	ldr	r1, [r7, #12]
 8009a62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	32b0      	adds	r2, #176	; 0xb0
 8009a70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	7c1b      	ldrb	r3, [r3, #16]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d138      	bne.n	8009af4 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009a82:	4b5e      	ldr	r3, [pc, #376]	; (8009bfc <USBD_CDC_Init+0x1e4>)
 8009a84:	7819      	ldrb	r1, [r3, #0]
 8009a86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f002 fb28 	bl	800c0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009a92:	4b5a      	ldr	r3, [pc, #360]	; (8009bfc <USBD_CDC_Init+0x1e4>)
 8009a94:	781b      	ldrb	r3, [r3, #0]
 8009a96:	f003 020f 	and.w	r2, r3, #15
 8009a9a:	6879      	ldr	r1, [r7, #4]
 8009a9c:	4613      	mov	r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4413      	add	r3, r2
 8009aa2:	009b      	lsls	r3, r3, #2
 8009aa4:	440b      	add	r3, r1
 8009aa6:	3324      	adds	r3, #36	; 0x24
 8009aa8:	2201      	movs	r2, #1
 8009aaa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009aac:	4b54      	ldr	r3, [pc, #336]	; (8009c00 <USBD_CDC_Init+0x1e8>)
 8009aae:	7819      	ldrb	r1, [r3, #0]
 8009ab0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009ab4:	2202      	movs	r2, #2
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f002 fb13 	bl	800c0e2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009abc:	4b50      	ldr	r3, [pc, #320]	; (8009c00 <USBD_CDC_Init+0x1e8>)
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	f003 020f 	and.w	r2, r3, #15
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	4613      	mov	r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	4413      	add	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	440b      	add	r3, r1
 8009ad0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ad4:	2201      	movs	r2, #1
 8009ad6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009ad8:	4b4a      	ldr	r3, [pc, #296]	; (8009c04 <USBD_CDC_Init+0x1ec>)
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	f003 020f 	and.w	r2, r3, #15
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4613      	mov	r3, r2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	009b      	lsls	r3, r3, #2
 8009aea:	440b      	add	r3, r1
 8009aec:	3326      	adds	r3, #38	; 0x26
 8009aee:	2210      	movs	r2, #16
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	e035      	b.n	8009b60 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009af4:	4b41      	ldr	r3, [pc, #260]	; (8009bfc <USBD_CDC_Init+0x1e4>)
 8009af6:	7819      	ldrb	r1, [r3, #0]
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	2202      	movs	r2, #2
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f002 faf0 	bl	800c0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009b02:	4b3e      	ldr	r3, [pc, #248]	; (8009bfc <USBD_CDC_Init+0x1e4>)
 8009b04:	781b      	ldrb	r3, [r3, #0]
 8009b06:	f003 020f 	and.w	r2, r3, #15
 8009b0a:	6879      	ldr	r1, [r7, #4]
 8009b0c:	4613      	mov	r3, r2
 8009b0e:	009b      	lsls	r3, r3, #2
 8009b10:	4413      	add	r3, r2
 8009b12:	009b      	lsls	r3, r3, #2
 8009b14:	440b      	add	r3, r1
 8009b16:	3324      	adds	r3, #36	; 0x24
 8009b18:	2201      	movs	r2, #1
 8009b1a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009b1c:	4b38      	ldr	r3, [pc, #224]	; (8009c00 <USBD_CDC_Init+0x1e8>)
 8009b1e:	7819      	ldrb	r1, [r3, #0]
 8009b20:	2340      	movs	r3, #64	; 0x40
 8009b22:	2202      	movs	r2, #2
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f002 fadc 	bl	800c0e2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009b2a:	4b35      	ldr	r3, [pc, #212]	; (8009c00 <USBD_CDC_Init+0x1e8>)
 8009b2c:	781b      	ldrb	r3, [r3, #0]
 8009b2e:	f003 020f 	and.w	r2, r3, #15
 8009b32:	6879      	ldr	r1, [r7, #4]
 8009b34:	4613      	mov	r3, r2
 8009b36:	009b      	lsls	r3, r3, #2
 8009b38:	4413      	add	r3, r2
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	440b      	add	r3, r1
 8009b3e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009b42:	2201      	movs	r2, #1
 8009b44:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009b46:	4b2f      	ldr	r3, [pc, #188]	; (8009c04 <USBD_CDC_Init+0x1ec>)
 8009b48:	781b      	ldrb	r3, [r3, #0]
 8009b4a:	f003 020f 	and.w	r2, r3, #15
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	4613      	mov	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	4413      	add	r3, r2
 8009b56:	009b      	lsls	r3, r3, #2
 8009b58:	440b      	add	r3, r1
 8009b5a:	3326      	adds	r3, #38	; 0x26
 8009b5c:	2210      	movs	r2, #16
 8009b5e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009b60:	4b28      	ldr	r3, [pc, #160]	; (8009c04 <USBD_CDC_Init+0x1ec>)
 8009b62:	7819      	ldrb	r1, [r3, #0]
 8009b64:	2308      	movs	r3, #8
 8009b66:	2203      	movs	r2, #3
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f002 faba 	bl	800c0e2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009b6e:	4b25      	ldr	r3, [pc, #148]	; (8009c04 <USBD_CDC_Init+0x1ec>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	f003 020f 	and.w	r2, r3, #15
 8009b76:	6879      	ldr	r1, [r7, #4]
 8009b78:	4613      	mov	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	4413      	add	r3, r2
 8009b7e:	009b      	lsls	r3, r3, #2
 8009b80:	440b      	add	r3, r1
 8009b82:	3324      	adds	r3, #36	; 0x24
 8009b84:	2201      	movs	r2, #1
 8009b86:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009b96:	687a      	ldr	r2, [r7, #4]
 8009b98:	33b0      	adds	r3, #176	; 0xb0
 8009b9a:	009b      	lsls	r3, r3, #2
 8009b9c:	4413      	add	r3, r2
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d101      	bne.n	8009bc2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	e018      	b.n	8009bf4 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	7c1b      	ldrb	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d10a      	bne.n	8009be0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009bca:	4b0d      	ldr	r3, [pc, #52]	; (8009c00 <USBD_CDC_Init+0x1e8>)
 8009bcc:	7819      	ldrb	r1, [r3, #0]
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f002 fb71 	bl	800c2c0 <USBD_LL_PrepareReceive>
 8009bde:	e008      	b.n	8009bf2 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009be0:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <USBD_CDC_Init+0x1e8>)
 8009be2:	7819      	ldrb	r1, [r3, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009bea:	2340      	movs	r3, #64	; 0x40
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f002 fb67 	bl	800c2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3710      	adds	r7, #16
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20000093 	.word	0x20000093
 8009c00:	20000094 	.word	0x20000094
 8009c04:	20000095 	.word	0x20000095

08009c08 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b082      	sub	sp, #8
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	460b      	mov	r3, r1
 8009c12:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009c14:	4b3a      	ldr	r3, [pc, #232]	; (8009d00 <USBD_CDC_DeInit+0xf8>)
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	6878      	ldr	r0, [r7, #4]
 8009c1c:	f002 fa87 	bl	800c12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009c20:	4b37      	ldr	r3, [pc, #220]	; (8009d00 <USBD_CDC_DeInit+0xf8>)
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	f003 020f 	and.w	r2, r3, #15
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4413      	add	r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	3324      	adds	r3, #36	; 0x24
 8009c36:	2200      	movs	r2, #0
 8009c38:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009c3a:	4b32      	ldr	r3, [pc, #200]	; (8009d04 <USBD_CDC_DeInit+0xfc>)
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	4619      	mov	r1, r3
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f002 fa74 	bl	800c12e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009c46:	4b2f      	ldr	r3, [pc, #188]	; (8009d04 <USBD_CDC_DeInit+0xfc>)
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 020f 	and.w	r2, r3, #15
 8009c4e:	6879      	ldr	r1, [r7, #4]
 8009c50:	4613      	mov	r3, r2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	440b      	add	r3, r1
 8009c5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c5e:	2200      	movs	r2, #0
 8009c60:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009c62:	4b29      	ldr	r3, [pc, #164]	; (8009d08 <USBD_CDC_DeInit+0x100>)
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	4619      	mov	r1, r3
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f002 fa60 	bl	800c12e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009c6e:	4b26      	ldr	r3, [pc, #152]	; (8009d08 <USBD_CDC_DeInit+0x100>)
 8009c70:	781b      	ldrb	r3, [r3, #0]
 8009c72:	f003 020f 	and.w	r2, r3, #15
 8009c76:	6879      	ldr	r1, [r7, #4]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4413      	add	r3, r2
 8009c7e:	009b      	lsls	r3, r3, #2
 8009c80:	440b      	add	r3, r1
 8009c82:	3324      	adds	r3, #36	; 0x24
 8009c84:	2200      	movs	r2, #0
 8009c86:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009c88:	4b1f      	ldr	r3, [pc, #124]	; (8009d08 <USBD_CDC_DeInit+0x100>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	f003 020f 	and.w	r2, r3, #15
 8009c90:	6879      	ldr	r1, [r7, #4]
 8009c92:	4613      	mov	r3, r2
 8009c94:	009b      	lsls	r3, r3, #2
 8009c96:	4413      	add	r3, r2
 8009c98:	009b      	lsls	r3, r3, #2
 8009c9a:	440b      	add	r3, r1
 8009c9c:	3326      	adds	r3, #38	; 0x26
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	32b0      	adds	r2, #176	; 0xb0
 8009cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d01f      	beq.n	8009cf4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	33b0      	adds	r3, #176	; 0xb0
 8009cbe:	009b      	lsls	r3, r3, #2
 8009cc0:	4413      	add	r3, r2
 8009cc2:	685b      	ldr	r3, [r3, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	32b0      	adds	r2, #176	; 0xb0
 8009cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f002 fbae 	bl	800c438 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	32b0      	adds	r2, #176	; 0xb0
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009cf4:	2300      	movs	r3, #0
}
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	20000093 	.word	0x20000093
 8009d04:	20000094 	.word	0x20000094
 8009d08:	20000095 	.word	0x20000095

08009d0c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b086      	sub	sp, #24
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	32b0      	adds	r2, #176	; 0xb0
 8009d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d24:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009d26:	2300      	movs	r3, #0
 8009d28:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d101      	bne.n	8009d3c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009d38:	2303      	movs	r3, #3
 8009d3a:	e0bf      	b.n	8009ebc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009d3c:	683b      	ldr	r3, [r7, #0]
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d050      	beq.n	8009dea <USBD_CDC_Setup+0xde>
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	f040 80af 	bne.w	8009eac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	88db      	ldrh	r3, [r3, #6]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d03a      	beq.n	8009dcc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	781b      	ldrb	r3, [r3, #0]
 8009d5a:	b25b      	sxtb	r3, r3
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	da1b      	bge.n	8009d98 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	33b0      	adds	r3, #176	; 0xb0
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	685b      	ldr	r3, [r3, #4]
 8009d70:	689b      	ldr	r3, [r3, #8]
 8009d72:	683a      	ldr	r2, [r7, #0]
 8009d74:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009d76:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009d78:	683a      	ldr	r2, [r7, #0]
 8009d7a:	88d2      	ldrh	r2, [r2, #6]
 8009d7c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	88db      	ldrh	r3, [r3, #6]
 8009d82:	2b07      	cmp	r3, #7
 8009d84:	bf28      	it	cs
 8009d86:	2307      	movcs	r3, #7
 8009d88:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009d8a:	693b      	ldr	r3, [r7, #16]
 8009d8c:	89fa      	ldrh	r2, [r7, #14]
 8009d8e:	4619      	mov	r1, r3
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f001 fd6d 	bl	800b870 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009d96:	e090      	b.n	8009eba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	785a      	ldrb	r2, [r3, #1]
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	88db      	ldrh	r3, [r3, #6]
 8009da6:	2b3f      	cmp	r3, #63	; 0x3f
 8009da8:	d803      	bhi.n	8009db2 <USBD_CDC_Setup+0xa6>
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	88db      	ldrh	r3, [r3, #6]
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	e000      	b.n	8009db4 <USBD_CDC_Setup+0xa8>
 8009db2:	2240      	movs	r2, #64	; 0x40
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009dba:	6939      	ldr	r1, [r7, #16]
 8009dbc:	693b      	ldr	r3, [r7, #16]
 8009dbe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009dc2:	461a      	mov	r2, r3
 8009dc4:	6878      	ldr	r0, [r7, #4]
 8009dc6:	f001 fd7f 	bl	800b8c8 <USBD_CtlPrepareRx>
      break;
 8009dca:	e076      	b.n	8009eba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009dd2:	687a      	ldr	r2, [r7, #4]
 8009dd4:	33b0      	adds	r3, #176	; 0xb0
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	685b      	ldr	r3, [r3, #4]
 8009ddc:	689b      	ldr	r3, [r3, #8]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	7850      	ldrb	r0, [r2, #1]
 8009de2:	2200      	movs	r2, #0
 8009de4:	6839      	ldr	r1, [r7, #0]
 8009de6:	4798      	blx	r3
      break;
 8009de8:	e067      	b.n	8009eba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	785b      	ldrb	r3, [r3, #1]
 8009dee:	2b0b      	cmp	r3, #11
 8009df0:	d851      	bhi.n	8009e96 <USBD_CDC_Setup+0x18a>
 8009df2:	a201      	add	r2, pc, #4	; (adr r2, 8009df8 <USBD_CDC_Setup+0xec>)
 8009df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009df8:	08009e29 	.word	0x08009e29
 8009dfc:	08009ea5 	.word	0x08009ea5
 8009e00:	08009e97 	.word	0x08009e97
 8009e04:	08009e97 	.word	0x08009e97
 8009e08:	08009e97 	.word	0x08009e97
 8009e0c:	08009e97 	.word	0x08009e97
 8009e10:	08009e97 	.word	0x08009e97
 8009e14:	08009e97 	.word	0x08009e97
 8009e18:	08009e97 	.word	0x08009e97
 8009e1c:	08009e97 	.word	0x08009e97
 8009e20:	08009e53 	.word	0x08009e53
 8009e24:	08009e7d 	.word	0x08009e7d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e2e:	b2db      	uxtb	r3, r3
 8009e30:	2b03      	cmp	r3, #3
 8009e32:	d107      	bne.n	8009e44 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009e34:	f107 030a 	add.w	r3, r7, #10
 8009e38:	2202      	movs	r2, #2
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f001 fd17 	bl	800b870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e42:	e032      	b.n	8009eaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e44:	6839      	ldr	r1, [r7, #0]
 8009e46:	6878      	ldr	r0, [r7, #4]
 8009e48:	f001 fca1 	bl	800b78e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e4c:	2303      	movs	r3, #3
 8009e4e:	75fb      	strb	r3, [r7, #23]
          break;
 8009e50:	e02b      	b.n	8009eaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e58:	b2db      	uxtb	r3, r3
 8009e5a:	2b03      	cmp	r3, #3
 8009e5c:	d107      	bne.n	8009e6e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009e5e:	f107 030d 	add.w	r3, r7, #13
 8009e62:	2201      	movs	r2, #1
 8009e64:	4619      	mov	r1, r3
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f001 fd02 	bl	800b870 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009e6c:	e01d      	b.n	8009eaa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009e6e:	6839      	ldr	r1, [r7, #0]
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f001 fc8c 	bl	800b78e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e76:	2303      	movs	r3, #3
 8009e78:	75fb      	strb	r3, [r7, #23]
          break;
 8009e7a:	e016      	b.n	8009eaa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009e82:	b2db      	uxtb	r3, r3
 8009e84:	2b03      	cmp	r3, #3
 8009e86:	d00f      	beq.n	8009ea8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009e88:	6839      	ldr	r1, [r7, #0]
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f001 fc7f 	bl	800b78e <USBD_CtlError>
            ret = USBD_FAIL;
 8009e90:	2303      	movs	r3, #3
 8009e92:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009e94:	e008      	b.n	8009ea8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009e96:	6839      	ldr	r1, [r7, #0]
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f001 fc78 	bl	800b78e <USBD_CtlError>
          ret = USBD_FAIL;
 8009e9e:	2303      	movs	r3, #3
 8009ea0:	75fb      	strb	r3, [r7, #23]
          break;
 8009ea2:	e002      	b.n	8009eaa <USBD_CDC_Setup+0x19e>
          break;
 8009ea4:	bf00      	nop
 8009ea6:	e008      	b.n	8009eba <USBD_CDC_Setup+0x1ae>
          break;
 8009ea8:	bf00      	nop
      }
      break;
 8009eaa:	e006      	b.n	8009eba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009eac:	6839      	ldr	r1, [r7, #0]
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f001 fc6d 	bl	800b78e <USBD_CtlError>
      ret = USBD_FAIL;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8009eb8:	bf00      	nop
  }

  return (uint8_t)ret;
 8009eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3718      	adds	r7, #24
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	460b      	mov	r3, r1
 8009ece:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009ed6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	32b0      	adds	r2, #176	; 0xb0
 8009ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d101      	bne.n	8009eee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009eea:	2303      	movs	r3, #3
 8009eec:	e065      	b.n	8009fba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	32b0      	adds	r2, #176	; 0xb0
 8009ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009efc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009efe:	78fb      	ldrb	r3, [r7, #3]
 8009f00:	f003 020f 	and.w	r2, r3, #15
 8009f04:	6879      	ldr	r1, [r7, #4]
 8009f06:	4613      	mov	r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	4413      	add	r3, r2
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	440b      	add	r3, r1
 8009f10:	3318      	adds	r3, #24
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d02f      	beq.n	8009f78 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009f18:	78fb      	ldrb	r3, [r7, #3]
 8009f1a:	f003 020f 	and.w	r2, r3, #15
 8009f1e:	6879      	ldr	r1, [r7, #4]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	3318      	adds	r3, #24
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	78fb      	ldrb	r3, [r7, #3]
 8009f30:	f003 010f 	and.w	r1, r3, #15
 8009f34:	68f8      	ldr	r0, [r7, #12]
 8009f36:	460b      	mov	r3, r1
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	440b      	add	r3, r1
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	4403      	add	r3, r0
 8009f40:	3348      	adds	r3, #72	; 0x48
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	fbb2 f1f3 	udiv	r1, r2, r3
 8009f48:	fb01 f303 	mul.w	r3, r1, r3
 8009f4c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d112      	bne.n	8009f78 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009f52:	78fb      	ldrb	r3, [r7, #3]
 8009f54:	f003 020f 	and.w	r2, r3, #15
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	3318      	adds	r3, #24
 8009f66:	2200      	movs	r2, #0
 8009f68:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009f6a:	78f9      	ldrb	r1, [r7, #3]
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	2200      	movs	r2, #0
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f002 f984 	bl	800c27e <USBD_LL_Transmit>
 8009f76:	e01f      	b.n	8009fb8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	33b0      	adds	r3, #176	; 0xb0
 8009f8a:	009b      	lsls	r3, r3, #2
 8009f8c:	4413      	add	r3, r2
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d010      	beq.n	8009fb8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	33b0      	adds	r3, #176	; 0xb0
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	4413      	add	r3, r2
 8009fa4:	685b      	ldr	r3, [r3, #4]
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	68ba      	ldr	r2, [r7, #8]
 8009faa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009fb4:	78fa      	ldrb	r2, [r7, #3]
 8009fb6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b084      	sub	sp, #16
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	32b0      	adds	r2, #176	; 0xb0
 8009fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fdc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	32b0      	adds	r2, #176	; 0xb0
 8009fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d101      	bne.n	8009ff4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009ff0:	2303      	movs	r3, #3
 8009ff2:	e01a      	b.n	800a02a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ff4:	78fb      	ldrb	r3, [r7, #3]
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f002 f982 	bl	800c302 <USBD_LL_GetRxDataSize>
 8009ffe:	4602      	mov	r2, r0
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a00c:	687a      	ldr	r2, [r7, #4]
 800a00e:	33b0      	adds	r3, #176	; 0xb0
 800a010:	009b      	lsls	r3, r3, #2
 800a012:	4413      	add	r3, r2
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a01e:	68fa      	ldr	r2, [r7, #12]
 800a020:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a024:	4611      	mov	r1, r2
 800a026:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3710      	adds	r7, #16
 800a02e:	46bd      	mov	sp, r7
 800a030:	bd80      	pop	{r7, pc}

0800a032 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a032:	b580      	push	{r7, lr}
 800a034:	b084      	sub	sp, #16
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	32b0      	adds	r2, #176	; 0xb0
 800a044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a048:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d101      	bne.n	800a054 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a050:	2303      	movs	r3, #3
 800a052:	e025      	b.n	800a0a0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	33b0      	adds	r3, #176	; 0xb0
 800a05e:	009b      	lsls	r3, r3, #2
 800a060:	4413      	add	r3, r2
 800a062:	685b      	ldr	r3, [r3, #4]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d01a      	beq.n	800a09e <USBD_CDC_EP0_RxReady+0x6c>
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a06e:	2bff      	cmp	r3, #255	; 0xff
 800a070:	d015      	beq.n	800a09e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a078:	687a      	ldr	r2, [r7, #4]
 800a07a:	33b0      	adds	r3, #176	; 0xb0
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	4413      	add	r3, r2
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	68fa      	ldr	r2, [r7, #12]
 800a086:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a08a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a08c:	68fa      	ldr	r2, [r7, #12]
 800a08e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a092:	b292      	uxth	r2, r2
 800a094:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	22ff      	movs	r2, #255	; 0xff
 800a09a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b086      	sub	sp, #24
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a0b0:	2182      	movs	r1, #130	; 0x82
 800a0b2:	4818      	ldr	r0, [pc, #96]	; (800a114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0b4:	f000 fd09 	bl	800aaca <USBD_GetEpDesc>
 800a0b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	4815      	ldr	r0, [pc, #84]	; (800a114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0be:	f000 fd04 	bl	800aaca <USBD_GetEpDesc>
 800a0c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0c4:	2181      	movs	r1, #129	; 0x81
 800a0c6:	4813      	ldr	r0, [pc, #76]	; (800a114 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a0c8:	f000 fcff 	bl	800aaca <USBD_GetEpDesc>
 800a0cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d002      	beq.n	800a0da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	2210      	movs	r2, #16
 800a0d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0da:	693b      	ldr	r3, [r7, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d006      	beq.n	800a0ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0e8:	711a      	strb	r2, [r3, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d006      	beq.n	800a102 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a0fc:	711a      	strb	r2, [r3, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2243      	movs	r2, #67	; 0x43
 800a106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a108:	4b02      	ldr	r3, [pc, #8]	; (800a114 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3718      	adds	r7, #24
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	20000050 	.word	0x20000050

0800a118 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b086      	sub	sp, #24
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a120:	2182      	movs	r1, #130	; 0x82
 800a122:	4818      	ldr	r0, [pc, #96]	; (800a184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a124:	f000 fcd1 	bl	800aaca <USBD_GetEpDesc>
 800a128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a12a:	2101      	movs	r1, #1
 800a12c:	4815      	ldr	r0, [pc, #84]	; (800a184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a12e:	f000 fccc 	bl	800aaca <USBD_GetEpDesc>
 800a132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a134:	2181      	movs	r1, #129	; 0x81
 800a136:	4813      	ldr	r0, [pc, #76]	; (800a184 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a138:	f000 fcc7 	bl	800aaca <USBD_GetEpDesc>
 800a13c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d002      	beq.n	800a14a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a144:	697b      	ldr	r3, [r7, #20]
 800a146:	2210      	movs	r2, #16
 800a148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a14a:	693b      	ldr	r3, [r7, #16]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d006      	beq.n	800a15e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a150:	693b      	ldr	r3, [r7, #16]
 800a152:	2200      	movs	r2, #0
 800a154:	711a      	strb	r2, [r3, #4]
 800a156:	2200      	movs	r2, #0
 800a158:	f042 0202 	orr.w	r2, r2, #2
 800a15c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d006      	beq.n	800a172 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2200      	movs	r2, #0
 800a168:	711a      	strb	r2, [r3, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f042 0202 	orr.w	r2, r2, #2
 800a170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2243      	movs	r2, #67	; 0x43
 800a176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a178:	4b02      	ldr	r3, [pc, #8]	; (800a184 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3718      	adds	r7, #24
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20000050 	.word	0x20000050

0800a188 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b086      	sub	sp, #24
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a190:	2182      	movs	r1, #130	; 0x82
 800a192:	4818      	ldr	r0, [pc, #96]	; (800a1f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a194:	f000 fc99 	bl	800aaca <USBD_GetEpDesc>
 800a198:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a19a:	2101      	movs	r1, #1
 800a19c:	4815      	ldr	r0, [pc, #84]	; (800a1f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a19e:	f000 fc94 	bl	800aaca <USBD_GetEpDesc>
 800a1a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a1a4:	2181      	movs	r1, #129	; 0x81
 800a1a6:	4813      	ldr	r0, [pc, #76]	; (800a1f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a1a8:	f000 fc8f 	bl	800aaca <USBD_GetEpDesc>
 800a1ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d002      	beq.n	800a1ba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2210      	movs	r2, #16
 800a1b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1c0:	693b      	ldr	r3, [r7, #16]
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1c8:	711a      	strb	r2, [r3, #4]
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d006      	beq.n	800a1e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a1dc:	711a      	strb	r2, [r3, #4]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2243      	movs	r2, #67	; 0x43
 800a1e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a1e8:	4b02      	ldr	r3, [pc, #8]	; (800a1f4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3718      	adds	r7, #24
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bd80      	pop	{r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	20000050 	.word	0x20000050

0800a1f8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	220a      	movs	r2, #10
 800a204:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a206:	4b03      	ldr	r3, [pc, #12]	; (800a214 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a208:	4618      	mov	r0, r3
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	2000000c 	.word	0x2000000c

0800a218 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a218:	b480      	push	{r7}
 800a21a:	b083      	sub	sp, #12
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a222:	683b      	ldr	r3, [r7, #0]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d101      	bne.n	800a22c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a228:	2303      	movs	r3, #3
 800a22a:	e009      	b.n	800a240 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	33b0      	adds	r3, #176	; 0xb0
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4413      	add	r3, r2
 800a23a:	683a      	ldr	r2, [r7, #0]
 800a23c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a23e:	2300      	movs	r3, #0
}
 800a240:	4618      	mov	r0, r3
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	60f8      	str	r0, [r7, #12]
 800a254:	60b9      	str	r1, [r7, #8]
 800a256:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	32b0      	adds	r2, #176	; 0xb0
 800a262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a266:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a268:	697b      	ldr	r3, [r7, #20]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d101      	bne.n	800a272 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a26e:	2303      	movs	r3, #3
 800a270:	e008      	b.n	800a284 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	371c      	adds	r7, #28
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	32b0      	adds	r2, #176	; 0xb0
 800a2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d101      	bne.n	800a2b4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	e004      	b.n	800a2be <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	683a      	ldr	r2, [r7, #0]
 800a2b8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3714      	adds	r7, #20
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
	...

0800a2cc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b084      	sub	sp, #16
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	32b0      	adds	r2, #176	; 0xb0
 800a2de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2e2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	32b0      	adds	r2, #176	; 0xb0
 800a2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d101      	bne.n	800a2fa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	e018      	b.n	800a32c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	7c1b      	ldrb	r3, [r3, #16]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a302:	4b0c      	ldr	r3, [pc, #48]	; (800a334 <USBD_CDC_ReceivePacket+0x68>)
 800a304:	7819      	ldrb	r1, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a30c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f001 ffd5 	bl	800c2c0 <USBD_LL_PrepareReceive>
 800a316:	e008      	b.n	800a32a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a318:	4b06      	ldr	r3, [pc, #24]	; (800a334 <USBD_CDC_ReceivePacket+0x68>)
 800a31a:	7819      	ldrb	r1, [r3, #0]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a322:	2340      	movs	r3, #64	; 0x40
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f001 ffcb 	bl	800c2c0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3710      	adds	r7, #16
 800a330:	46bd      	mov	sp, r7
 800a332:	bd80      	pop	{r7, pc}
 800a334:	20000094 	.word	0x20000094

0800a338 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b086      	sub	sp, #24
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	4613      	mov	r3, r2
 800a344:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	d101      	bne.n	800a350 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a34c:	2303      	movs	r3, #3
 800a34e:	e01f      	b.n	800a390 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2200      	movs	r2, #0
 800a35c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2200      	movs	r2, #0
 800a364:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d003      	beq.n	800a376 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	68ba      	ldr	r2, [r7, #8]
 800a372:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2201      	movs	r2, #1
 800a37a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	79fa      	ldrb	r2, [r7, #7]
 800a382:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a384:	68f8      	ldr	r0, [r7, #12]
 800a386:	f001 fe3f 	bl	800c008 <USBD_LL_Init>
 800a38a:	4603      	mov	r3, r0
 800a38c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a38e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3718      	adds	r7, #24
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b084      	sub	sp, #16
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d101      	bne.n	800a3b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a3ac:	2303      	movs	r3, #3
 800a3ae:	e025      	b.n	800a3fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	683a      	ldr	r2, [r7, #0]
 800a3b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	32ae      	adds	r2, #174	; 0xae
 800a3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00f      	beq.n	800a3ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	32ae      	adds	r2, #174	; 0xae
 800a3d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3dc:	f107 020e 	add.w	r2, r7, #14
 800a3e0:	4610      	mov	r0, r2
 800a3e2:	4798      	blx	r3
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a3f2:	1c5a      	adds	r2, r3, #1
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b082      	sub	sp, #8
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f001 fe4d 	bl	800c0ac <USBD_LL_Start>
 800a412:	4603      	mov	r3, r0
}
 800a414:	4618      	mov	r0, r3
 800a416:	3708      	adds	r7, #8
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd80      	pop	{r7, pc}

0800a41c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a424:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a426:	4618      	mov	r0, r3
 800a428:	370c      	adds	r7, #12
 800a42a:	46bd      	mov	sp, r7
 800a42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a430:	4770      	bx	lr

0800a432 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a432:	b580      	push	{r7, lr}
 800a434:	b084      	sub	sp, #16
 800a436:	af00      	add	r7, sp, #0
 800a438:	6078      	str	r0, [r7, #4]
 800a43a:	460b      	mov	r3, r1
 800a43c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a43e:	2300      	movs	r3, #0
 800a440:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d009      	beq.n	800a460 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	78fa      	ldrb	r2, [r7, #3]
 800a456:	4611      	mov	r1, r2
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	4798      	blx	r3
 800a45c:	4603      	mov	r3, r0
 800a45e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a460:	7bfb      	ldrb	r3, [r7, #15]
}
 800a462:	4618      	mov	r0, r3
 800a464:	3710      	adds	r7, #16
 800a466:	46bd      	mov	sp, r7
 800a468:	bd80      	pop	{r7, pc}

0800a46a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a46a:	b580      	push	{r7, lr}
 800a46c:	b084      	sub	sp, #16
 800a46e:	af00      	add	r7, sp, #0
 800a470:	6078      	str	r0, [r7, #4]
 800a472:	460b      	mov	r3, r1
 800a474:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a476:	2300      	movs	r3, #0
 800a478:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a480:	685b      	ldr	r3, [r3, #4]
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	4611      	mov	r1, r2
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	4798      	blx	r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a490:	2303      	movs	r3, #3
 800a492:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b084      	sub	sp, #16
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
 800a4a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4ae:	6839      	ldr	r1, [r7, #0]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f001 f932 	bl	800b71a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a4c4:	461a      	mov	r2, r3
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a4d2:	f003 031f 	and.w	r3, r3, #31
 800a4d6:	2b02      	cmp	r3, #2
 800a4d8:	d01a      	beq.n	800a510 <USBD_LL_SetupStage+0x72>
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d822      	bhi.n	800a524 <USBD_LL_SetupStage+0x86>
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <USBD_LL_SetupStage+0x4a>
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d00a      	beq.n	800a4fc <USBD_LL_SetupStage+0x5e>
 800a4e6:	e01d      	b.n	800a524 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a4ee:	4619      	mov	r1, r3
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fb5f 	bl	800abb4 <USBD_StdDevReq>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fa:	e020      	b.n	800a53e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a502:	4619      	mov	r1, r3
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fbc7 	bl	800ac98 <USBD_StdItfReq>
 800a50a:	4603      	mov	r3, r0
 800a50c:	73fb      	strb	r3, [r7, #15]
      break;
 800a50e:	e016      	b.n	800a53e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a516:	4619      	mov	r1, r3
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fc29 	bl	800ad70 <USBD_StdEPReq>
 800a51e:	4603      	mov	r3, r0
 800a520:	73fb      	strb	r3, [r7, #15]
      break;
 800a522:	e00c      	b.n	800a53e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a52a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a52e:	b2db      	uxtb	r3, r3
 800a530:	4619      	mov	r1, r3
 800a532:	6878      	ldr	r0, [r7, #4]
 800a534:	f001 fe1a 	bl	800c16c <USBD_LL_StallEP>
 800a538:	4603      	mov	r3, r0
 800a53a:	73fb      	strb	r3, [r7, #15]
      break;
 800a53c:	bf00      	nop
  }

  return ret;
 800a53e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a540:	4618      	mov	r0, r3
 800a542:	3710      	adds	r7, #16
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b086      	sub	sp, #24
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	60f8      	str	r0, [r7, #12]
 800a550:	460b      	mov	r3, r1
 800a552:	607a      	str	r2, [r7, #4]
 800a554:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a556:	2300      	movs	r3, #0
 800a558:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a55a:	7afb      	ldrb	r3, [r7, #11]
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d16e      	bne.n	800a63e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a566:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a56e:	2b03      	cmp	r3, #3
 800a570:	f040 8098 	bne.w	800a6a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	689a      	ldr	r2, [r3, #8]
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	429a      	cmp	r2, r3
 800a57e:	d913      	bls.n	800a5a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	689a      	ldr	r2, [r3, #8]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	68db      	ldr	r3, [r3, #12]
 800a588:	1ad2      	subs	r2, r2, r3
 800a58a:	693b      	ldr	r3, [r7, #16]
 800a58c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	68da      	ldr	r2, [r3, #12]
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	4293      	cmp	r3, r2
 800a598:	bf28      	it	cs
 800a59a:	4613      	movcs	r3, r2
 800a59c:	461a      	mov	r2, r3
 800a59e:	6879      	ldr	r1, [r7, #4]
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f001 f9ae 	bl	800b902 <USBD_CtlContinueRx>
 800a5a6:	e07d      	b.n	800a6a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a5ae:	f003 031f 	and.w	r3, r3, #31
 800a5b2:	2b02      	cmp	r3, #2
 800a5b4:	d014      	beq.n	800a5e0 <USBD_LL_DataOutStage+0x98>
 800a5b6:	2b02      	cmp	r3, #2
 800a5b8:	d81d      	bhi.n	800a5f6 <USBD_LL_DataOutStage+0xae>
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d002      	beq.n	800a5c4 <USBD_LL_DataOutStage+0x7c>
 800a5be:	2b01      	cmp	r3, #1
 800a5c0:	d003      	beq.n	800a5ca <USBD_LL_DataOutStage+0x82>
 800a5c2:	e018      	b.n	800a5f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	75bb      	strb	r3, [r7, #22]
            break;
 800a5c8:	e018      	b.n	800a5fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a5d0:	b2db      	uxtb	r3, r3
 800a5d2:	4619      	mov	r1, r3
 800a5d4:	68f8      	ldr	r0, [r7, #12]
 800a5d6:	f000 fa5e 	bl	800aa96 <USBD_CoreFindIF>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	75bb      	strb	r3, [r7, #22]
            break;
 800a5de:	e00d      	b.n	800a5fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	68f8      	ldr	r0, [r7, #12]
 800a5ec:	f000 fa60 	bl	800aab0 <USBD_CoreFindEP>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	75bb      	strb	r3, [r7, #22]
            break;
 800a5f4:	e002      	b.n	800a5fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	75bb      	strb	r3, [r7, #22]
            break;
 800a5fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a5fc:	7dbb      	ldrb	r3, [r7, #22]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d119      	bne.n	800a636 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b03      	cmp	r3, #3
 800a60c:	d113      	bne.n	800a636 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a60e:	7dba      	ldrb	r2, [r7, #22]
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	32ae      	adds	r2, #174	; 0xae
 800a614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a618:	691b      	ldr	r3, [r3, #16]
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00b      	beq.n	800a636 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a61e:	7dba      	ldrb	r2, [r7, #22]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a626:	7dba      	ldrb	r2, [r7, #22]
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	32ae      	adds	r2, #174	; 0xae
 800a62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a630:	691b      	ldr	r3, [r3, #16]
 800a632:	68f8      	ldr	r0, [r7, #12]
 800a634:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f001 f974 	bl	800b924 <USBD_CtlSendStatus>
 800a63c:	e032      	b.n	800a6a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a63e:	7afb      	ldrb	r3, [r7, #11]
 800a640:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a644:	b2db      	uxtb	r3, r3
 800a646:	4619      	mov	r1, r3
 800a648:	68f8      	ldr	r0, [r7, #12]
 800a64a:	f000 fa31 	bl	800aab0 <USBD_CoreFindEP>
 800a64e:	4603      	mov	r3, r0
 800a650:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a652:	7dbb      	ldrb	r3, [r7, #22]
 800a654:	2bff      	cmp	r3, #255	; 0xff
 800a656:	d025      	beq.n	800a6a4 <USBD_LL_DataOutStage+0x15c>
 800a658:	7dbb      	ldrb	r3, [r7, #22]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d122      	bne.n	800a6a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a664:	b2db      	uxtb	r3, r3
 800a666:	2b03      	cmp	r3, #3
 800a668:	d117      	bne.n	800a69a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a66a:	7dba      	ldrb	r2, [r7, #22]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	32ae      	adds	r2, #174	; 0xae
 800a670:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00f      	beq.n	800a69a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a67a:	7dba      	ldrb	r2, [r7, #22]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a682:	7dba      	ldrb	r2, [r7, #22]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	32ae      	adds	r2, #174	; 0xae
 800a688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	7afa      	ldrb	r2, [r7, #11]
 800a690:	4611      	mov	r1, r2
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	4798      	blx	r3
 800a696:	4603      	mov	r3, r0
 800a698:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a69a:	7dfb      	ldrb	r3, [r7, #23]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d001      	beq.n	800a6a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a6a0:	7dfb      	ldrb	r3, [r7, #23]
 800a6a2:	e000      	b.n	800a6a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b086      	sub	sp, #24
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	607a      	str	r2, [r7, #4]
 800a6ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a6bc:	7afb      	ldrb	r3, [r7, #11]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d16f      	bne.n	800a7a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3314      	adds	r3, #20
 800a6c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6ce:	2b02      	cmp	r3, #2
 800a6d0:	d15a      	bne.n	800a788 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	689a      	ldr	r2, [r3, #8]
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	68db      	ldr	r3, [r3, #12]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d914      	bls.n	800a708 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	689a      	ldr	r2, [r3, #8]
 800a6e2:	693b      	ldr	r3, [r7, #16]
 800a6e4:	68db      	ldr	r3, [r3, #12]
 800a6e6:	1ad2      	subs	r2, r2, r3
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	461a      	mov	r2, r3
 800a6f2:	6879      	ldr	r1, [r7, #4]
 800a6f4:	68f8      	ldr	r0, [r7, #12]
 800a6f6:	f001 f8d6 	bl	800b8a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	2100      	movs	r1, #0
 800a700:	68f8      	ldr	r0, [r7, #12]
 800a702:	f001 fddd 	bl	800c2c0 <USBD_LL_PrepareReceive>
 800a706:	e03f      	b.n	800a788 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	68da      	ldr	r2, [r3, #12]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	429a      	cmp	r2, r3
 800a712:	d11c      	bne.n	800a74e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	685a      	ldr	r2, [r3, #4]
 800a718:	693b      	ldr	r3, [r7, #16]
 800a71a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a71c:	429a      	cmp	r2, r3
 800a71e:	d316      	bcc.n	800a74e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	685a      	ldr	r2, [r3, #4]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a72a:	429a      	cmp	r2, r3
 800a72c:	d20f      	bcs.n	800a74e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a72e:	2200      	movs	r2, #0
 800a730:	2100      	movs	r1, #0
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f001 f8b7 	bl	800b8a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a740:	2300      	movs	r3, #0
 800a742:	2200      	movs	r2, #0
 800a744:	2100      	movs	r1, #0
 800a746:	68f8      	ldr	r0, [r7, #12]
 800a748:	f001 fdba 	bl	800c2c0 <USBD_LL_PrepareReceive>
 800a74c:	e01c      	b.n	800a788 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a754:	b2db      	uxtb	r3, r3
 800a756:	2b03      	cmp	r3, #3
 800a758:	d10f      	bne.n	800a77a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d009      	beq.n	800a77a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2200      	movs	r2, #0
 800a76a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a77a:	2180      	movs	r1, #128	; 0x80
 800a77c:	68f8      	ldr	r0, [r7, #12]
 800a77e:	f001 fcf5 	bl	800c16c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a782:	68f8      	ldr	r0, [r7, #12]
 800a784:	f001 f8e1 	bl	800b94a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d03a      	beq.n	800a808 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a792:	68f8      	ldr	r0, [r7, #12]
 800a794:	f7ff fe42 	bl	800a41c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a7a0:	e032      	b.n	800a808 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a7a2:	7afb      	ldrb	r3, [r7, #11]
 800a7a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a7a8:	b2db      	uxtb	r3, r3
 800a7aa:	4619      	mov	r1, r3
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f000 f97f 	bl	800aab0 <USBD_CoreFindEP>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7b6:	7dfb      	ldrb	r3, [r7, #23]
 800a7b8:	2bff      	cmp	r3, #255	; 0xff
 800a7ba:	d025      	beq.n	800a808 <USBD_LL_DataInStage+0x15a>
 800a7bc:	7dfb      	ldrb	r3, [r7, #23]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d122      	bne.n	800a808 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7c8:	b2db      	uxtb	r3, r3
 800a7ca:	2b03      	cmp	r3, #3
 800a7cc:	d11c      	bne.n	800a808 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a7ce:	7dfa      	ldrb	r2, [r7, #23]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	32ae      	adds	r2, #174	; 0xae
 800a7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d8:	695b      	ldr	r3, [r3, #20]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d014      	beq.n	800a808 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a7de:	7dfa      	ldrb	r2, [r7, #23]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a7e6:	7dfa      	ldrb	r2, [r7, #23]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	32ae      	adds	r2, #174	; 0xae
 800a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f0:	695b      	ldr	r3, [r3, #20]
 800a7f2:	7afa      	ldrb	r2, [r7, #11]
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	68f8      	ldr	r0, [r7, #12]
 800a7f8:	4798      	blx	r3
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a7fe:	7dbb      	ldrb	r3, [r7, #22]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d001      	beq.n	800a808 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a804:	7dbb      	ldrb	r3, [r7, #22]
 800a806:	e000      	b.n	800a80a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a812:	b580      	push	{r7, lr}
 800a814:	b084      	sub	sp, #16
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	2201      	movs	r2, #1
 800a822:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2200      	movs	r2, #0
 800a82a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2200      	movs	r2, #0
 800a832:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d014      	beq.n	800a878 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d00e      	beq.n	800a878 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a860:	685b      	ldr	r3, [r3, #4]
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	6852      	ldr	r2, [r2, #4]
 800a866:	b2d2      	uxtb	r2, r2
 800a868:	4611      	mov	r1, r2
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	4798      	blx	r3
 800a86e:	4603      	mov	r3, r0
 800a870:	2b00      	cmp	r3, #0
 800a872:	d001      	beq.n	800a878 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a874:	2303      	movs	r3, #3
 800a876:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a878:	2340      	movs	r3, #64	; 0x40
 800a87a:	2200      	movs	r2, #0
 800a87c:	2100      	movs	r1, #0
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f001 fc2f 	bl	800c0e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2201      	movs	r2, #1
 800a888:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2240      	movs	r2, #64	; 0x40
 800a890:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a894:	2340      	movs	r3, #64	; 0x40
 800a896:	2200      	movs	r2, #0
 800a898:	2180      	movs	r1, #128	; 0x80
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f001 fc21 	bl	800c0e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2240      	movs	r2, #64	; 0x40
 800a8aa:	621a      	str	r2, [r3, #32]

  return ret;
 800a8ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	3710      	adds	r7, #16
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	bd80      	pop	{r7, pc}

0800a8b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a8b6:	b480      	push	{r7}
 800a8b8:	b083      	sub	sp, #12
 800a8ba:	af00      	add	r7, sp, #0
 800a8bc:	6078      	str	r0, [r7, #4]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	78fa      	ldrb	r2, [r7, #3]
 800a8c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a8c8:	2300      	movs	r3, #0
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	370c      	adds	r7, #12
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr

0800a8d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a8d6:	b480      	push	{r7}
 800a8d8:	b083      	sub	sp, #12
 800a8da:	af00      	add	r7, sp, #0
 800a8dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e4:	b2da      	uxtb	r2, r3
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2204      	movs	r2, #4
 800a8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a8f4:	2300      	movs	r3, #0
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a902:	b480      	push	{r7}
 800a904:	b083      	sub	sp, #12
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a910:	b2db      	uxtb	r3, r3
 800a912:	2b04      	cmp	r3, #4
 800a914:	d106      	bne.n	800a924 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a924:	2300      	movs	r3, #0
}
 800a926:	4618      	mov	r0, r3
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a932:	b580      	push	{r7, lr}
 800a934:	b082      	sub	sp, #8
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a940:	b2db      	uxtb	r3, r3
 800a942:	2b03      	cmp	r3, #3
 800a944:	d110      	bne.n	800a968 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d00b      	beq.n	800a968 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a956:	69db      	ldr	r3, [r3, #28]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d005      	beq.n	800a968 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a962:	69db      	ldr	r3, [r3, #28]
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3708      	adds	r7, #8
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b082      	sub	sp, #8
 800a976:	af00      	add	r7, sp, #0
 800a978:	6078      	str	r0, [r7, #4]
 800a97a:	460b      	mov	r3, r1
 800a97c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	32ae      	adds	r2, #174	; 0xae
 800a988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d101      	bne.n	800a994 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a990:	2303      	movs	r3, #3
 800a992:	e01c      	b.n	800a9ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	2b03      	cmp	r3, #3
 800a99e:	d115      	bne.n	800a9cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	32ae      	adds	r2, #174	; 0xae
 800a9aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00b      	beq.n	800a9cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	32ae      	adds	r2, #174	; 0xae
 800a9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
 800a9c4:	78fa      	ldrb	r2, [r7, #3]
 800a9c6:	4611      	mov	r1, r2
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9cc:	2300      	movs	r3, #0
}
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	3708      	adds	r7, #8
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	bd80      	pop	{r7, pc}

0800a9d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a9d6:	b580      	push	{r7, lr}
 800a9d8:	b082      	sub	sp, #8
 800a9da:	af00      	add	r7, sp, #0
 800a9dc:	6078      	str	r0, [r7, #4]
 800a9de:	460b      	mov	r3, r1
 800a9e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	32ae      	adds	r2, #174	; 0xae
 800a9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d101      	bne.n	800a9f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	e01c      	b.n	800aa32 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b03      	cmp	r3, #3
 800aa02:	d115      	bne.n	800aa30 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	32ae      	adds	r2, #174	; 0xae
 800aa0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00b      	beq.n	800aa30 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32ae      	adds	r2, #174	; 0xae
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa28:	78fa      	ldrb	r2, [r7, #3]
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aa30:	2300      	movs	r3, #0
}
 800aa32:	4618      	mov	r0, r3
 800aa34:	3708      	adds	r7, #8
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aa3a:	b480      	push	{r7}
 800aa3c:	b083      	sub	sp, #12
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aa42:	2300      	movs	r3, #0
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	370c      	adds	r7, #12
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4e:	4770      	bx	lr

0800aa50 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2201      	movs	r2, #1
 800aa60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d00e      	beq.n	800aa8c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa74:	685b      	ldr	r3, [r3, #4]
 800aa76:	687a      	ldr	r2, [r7, #4]
 800aa78:	6852      	ldr	r2, [r2, #4]
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	4611      	mov	r1, r2
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	4798      	blx	r3
 800aa82:	4603      	mov	r3, r0
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d001      	beq.n	800aa8c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aa88:	2303      	movs	r3, #3
 800aa8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa8e:	4618      	mov	r0, r3
 800aa90:	3710      	adds	r7, #16
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}

0800aa96 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b083      	sub	sp, #12
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aaa2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	370c      	adds	r7, #12
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaae:	4770      	bx	lr

0800aab0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aab0:	b480      	push	{r7}
 800aab2:	b083      	sub	sp, #12
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	6078      	str	r0, [r7, #4]
 800aab8:	460b      	mov	r3, r1
 800aaba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aabc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aabe:	4618      	mov	r0, r3
 800aac0:	370c      	adds	r7, #12
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr

0800aaca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aaca:	b580      	push	{r7, lr}
 800aacc:	b086      	sub	sp, #24
 800aace:	af00      	add	r7, sp, #0
 800aad0:	6078      	str	r0, [r7, #4]
 800aad2:	460b      	mov	r3, r1
 800aad4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aade:	2300      	movs	r3, #0
 800aae0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	885b      	ldrh	r3, [r3, #2]
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d920      	bls.n	800ab34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aafa:	e013      	b.n	800ab24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aafc:	f107 030a 	add.w	r3, r7, #10
 800ab00:	4619      	mov	r1, r3
 800ab02:	6978      	ldr	r0, [r7, #20]
 800ab04:	f000 f81b 	bl	800ab3e <USBD_GetNextDesc>
 800ab08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	785b      	ldrb	r3, [r3, #1]
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	d108      	bne.n	800ab24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ab12:	697b      	ldr	r3, [r7, #20]
 800ab14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	789b      	ldrb	r3, [r3, #2]
 800ab1a:	78fa      	ldrb	r2, [r7, #3]
 800ab1c:	429a      	cmp	r2, r3
 800ab1e:	d008      	beq.n	800ab32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ab20:	2300      	movs	r3, #0
 800ab22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	885b      	ldrh	r3, [r3, #2]
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	897b      	ldrh	r3, [r7, #10]
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	d8e5      	bhi.n	800aafc <USBD_GetEpDesc+0x32>
 800ab30:	e000      	b.n	800ab34 <USBD_GetEpDesc+0x6a>
          break;
 800ab32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ab34:	693b      	ldr	r3, [r7, #16]
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	3718      	adds	r7, #24
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}

0800ab3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ab3e:	b480      	push	{r7}
 800ab40:	b085      	sub	sp, #20
 800ab42:	af00      	add	r7, sp, #0
 800ab44:	6078      	str	r0, [r7, #4]
 800ab46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	881a      	ldrh	r2, [r3, #0]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	781b      	ldrb	r3, [r3, #0]
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	4413      	add	r3, r2
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	781b      	ldrb	r3, [r3, #0]
 800ab62:	461a      	mov	r2, r3
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4413      	add	r3, r2
 800ab68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab6a:	68fb      	ldr	r3, [r7, #12]
}
 800ab6c:	4618      	mov	r0, r3
 800ab6e:	3714      	adds	r7, #20
 800ab70:	46bd      	mov	sp, r7
 800ab72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab76:	4770      	bx	lr

0800ab78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab78:	b480      	push	{r7}
 800ab7a:	b087      	sub	sp, #28
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3301      	adds	r3, #1
 800ab8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	781b      	ldrb	r3, [r3, #0]
 800ab94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab96:	8a3b      	ldrh	r3, [r7, #16]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	b21a      	sxth	r2, r3
 800ab9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	b21b      	sxth	r3, r3
 800aba4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800aba6:	89fb      	ldrh	r3, [r7, #14]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	371c      	adds	r7, #28
 800abac:	46bd      	mov	sp, r7
 800abae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb2:	4770      	bx	lr

0800abb4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb4:	b580      	push	{r7, lr}
 800abb6:	b084      	sub	sp, #16
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abbe:	2300      	movs	r3, #0
 800abc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	781b      	ldrb	r3, [r3, #0]
 800abc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800abca:	2b40      	cmp	r3, #64	; 0x40
 800abcc:	d005      	beq.n	800abda <USBD_StdDevReq+0x26>
 800abce:	2b40      	cmp	r3, #64	; 0x40
 800abd0:	d857      	bhi.n	800ac82 <USBD_StdDevReq+0xce>
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00f      	beq.n	800abf6 <USBD_StdDevReq+0x42>
 800abd6:	2b20      	cmp	r3, #32
 800abd8:	d153      	bne.n	800ac82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	32ae      	adds	r2, #174	; 0xae
 800abe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	6839      	ldr	r1, [r7, #0]
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	4798      	blx	r3
 800abf0:	4603      	mov	r3, r0
 800abf2:	73fb      	strb	r3, [r7, #15]
      break;
 800abf4:	e04a      	b.n	800ac8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	785b      	ldrb	r3, [r3, #1]
 800abfa:	2b09      	cmp	r3, #9
 800abfc:	d83b      	bhi.n	800ac76 <USBD_StdDevReq+0xc2>
 800abfe:	a201      	add	r2, pc, #4	; (adr r2, 800ac04 <USBD_StdDevReq+0x50>)
 800ac00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac04:	0800ac59 	.word	0x0800ac59
 800ac08:	0800ac6d 	.word	0x0800ac6d
 800ac0c:	0800ac77 	.word	0x0800ac77
 800ac10:	0800ac63 	.word	0x0800ac63
 800ac14:	0800ac77 	.word	0x0800ac77
 800ac18:	0800ac37 	.word	0x0800ac37
 800ac1c:	0800ac2d 	.word	0x0800ac2d
 800ac20:	0800ac77 	.word	0x0800ac77
 800ac24:	0800ac4f 	.word	0x0800ac4f
 800ac28:	0800ac41 	.word	0x0800ac41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ac2c:	6839      	ldr	r1, [r7, #0]
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 fa3c 	bl	800b0ac <USBD_GetDescriptor>
          break;
 800ac34:	e024      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ac36:	6839      	ldr	r1, [r7, #0]
 800ac38:	6878      	ldr	r0, [r7, #4]
 800ac3a:	f000 fbcb 	bl	800b3d4 <USBD_SetAddress>
          break;
 800ac3e:	e01f      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ac40:	6839      	ldr	r1, [r7, #0]
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fc0a 	bl	800b45c <USBD_SetConfig>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	73fb      	strb	r3, [r7, #15]
          break;
 800ac4c:	e018      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ac4e:	6839      	ldr	r1, [r7, #0]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 fcad 	bl	800b5b0 <USBD_GetConfig>
          break;
 800ac56:	e013      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac58:	6839      	ldr	r1, [r7, #0]
 800ac5a:	6878      	ldr	r0, [r7, #4]
 800ac5c:	f000 fcde 	bl	800b61c <USBD_GetStatus>
          break;
 800ac60:	e00e      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	6878      	ldr	r0, [r7, #4]
 800ac66:	f000 fd0d 	bl	800b684 <USBD_SetFeature>
          break;
 800ac6a:	e009      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fd31 	bl	800b6d6 <USBD_ClrFeature>
          break;
 800ac74:	e004      	b.n	800ac80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac76:	6839      	ldr	r1, [r7, #0]
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f000 fd88 	bl	800b78e <USBD_CtlError>
          break;
 800ac7e:	bf00      	nop
      }
      break;
 800ac80:	e004      	b.n	800ac8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac82:	6839      	ldr	r1, [r7, #0]
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	f000 fd82 	bl	800b78e <USBD_CtlError>
      break;
 800ac8a:	bf00      	nop
  }

  return ret;
 800ac8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac8e:	4618      	mov	r0, r3
 800ac90:	3710      	adds	r7, #16
 800ac92:	46bd      	mov	sp, r7
 800ac94:	bd80      	pop	{r7, pc}
 800ac96:	bf00      	nop

0800ac98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b084      	sub	sp, #16
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800aca2:	2300      	movs	r3, #0
 800aca4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	d005      	beq.n	800acbe <USBD_StdItfReq+0x26>
 800acb2:	2b40      	cmp	r3, #64	; 0x40
 800acb4:	d852      	bhi.n	800ad5c <USBD_StdItfReq+0xc4>
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <USBD_StdItfReq+0x26>
 800acba:	2b20      	cmp	r3, #32
 800acbc:	d14e      	bne.n	800ad5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800acc4:	b2db      	uxtb	r3, r3
 800acc6:	3b01      	subs	r3, #1
 800acc8:	2b02      	cmp	r3, #2
 800acca:	d840      	bhi.n	800ad4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	889b      	ldrh	r3, [r3, #4]
 800acd0:	b2db      	uxtb	r3, r3
 800acd2:	2b01      	cmp	r3, #1
 800acd4:	d836      	bhi.n	800ad44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800acd6:	683b      	ldr	r3, [r7, #0]
 800acd8:	889b      	ldrh	r3, [r3, #4]
 800acda:	b2db      	uxtb	r3, r3
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff fed9 	bl	800aa96 <USBD_CoreFindIF>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2bff      	cmp	r3, #255	; 0xff
 800acec:	d01d      	beq.n	800ad2a <USBD_StdItfReq+0x92>
 800acee:	7bbb      	ldrb	r3, [r7, #14]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11a      	bne.n	800ad2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800acf4:	7bba      	ldrb	r2, [r7, #14]
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	32ae      	adds	r2, #174	; 0xae
 800acfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acfe:	689b      	ldr	r3, [r3, #8]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00f      	beq.n	800ad24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ad04:	7bba      	ldrb	r2, [r7, #14]
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ad0c:	7bba      	ldrb	r2, [r7, #14]
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	32ae      	adds	r2, #174	; 0xae
 800ad12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad16:	689b      	ldr	r3, [r3, #8]
 800ad18:	6839      	ldr	r1, [r7, #0]
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	4798      	blx	r3
 800ad1e:	4603      	mov	r3, r0
 800ad20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad22:	e004      	b.n	800ad2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ad24:	2303      	movs	r3, #3
 800ad26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ad28:	e001      	b.n	800ad2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	88db      	ldrh	r3, [r3, #6]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d110      	bne.n	800ad58 <USBD_StdItfReq+0xc0>
 800ad36:	7bfb      	ldrb	r3, [r7, #15]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d10d      	bne.n	800ad58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 fdf1 	bl	800b924 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ad42:	e009      	b.n	800ad58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800ad44:	6839      	ldr	r1, [r7, #0]
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f000 fd21 	bl	800b78e <USBD_CtlError>
          break;
 800ad4c:	e004      	b.n	800ad58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800ad4e:	6839      	ldr	r1, [r7, #0]
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f000 fd1c 	bl	800b78e <USBD_CtlError>
          break;
 800ad56:	e000      	b.n	800ad5a <USBD_StdItfReq+0xc2>
          break;
 800ad58:	bf00      	nop
      }
      break;
 800ad5a:	e004      	b.n	800ad66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ad5c:	6839      	ldr	r1, [r7, #0]
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fd15 	bl	800b78e <USBD_CtlError>
      break;
 800ad64:	bf00      	nop
  }

  return ret;
 800ad66:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	889b      	ldrh	r3, [r3, #4]
 800ad82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad8c:	2b40      	cmp	r3, #64	; 0x40
 800ad8e:	d007      	beq.n	800ada0 <USBD_StdEPReq+0x30>
 800ad90:	2b40      	cmp	r3, #64	; 0x40
 800ad92:	f200 817f 	bhi.w	800b094 <USBD_StdEPReq+0x324>
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d02a      	beq.n	800adf0 <USBD_StdEPReq+0x80>
 800ad9a:	2b20      	cmp	r3, #32
 800ad9c:	f040 817a 	bne.w	800b094 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ada0:	7bbb      	ldrb	r3, [r7, #14]
 800ada2:	4619      	mov	r1, r3
 800ada4:	6878      	ldr	r0, [r7, #4]
 800ada6:	f7ff fe83 	bl	800aab0 <USBD_CoreFindEP>
 800adaa:	4603      	mov	r3, r0
 800adac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800adae:	7b7b      	ldrb	r3, [r7, #13]
 800adb0:	2bff      	cmp	r3, #255	; 0xff
 800adb2:	f000 8174 	beq.w	800b09e <USBD_StdEPReq+0x32e>
 800adb6:	7b7b      	ldrb	r3, [r7, #13]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f040 8170 	bne.w	800b09e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800adbe:	7b7a      	ldrb	r2, [r7, #13]
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800adc6:	7b7a      	ldrb	r2, [r7, #13]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	32ae      	adds	r2, #174	; 0xae
 800adcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	2b00      	cmp	r3, #0
 800add4:	f000 8163 	beq.w	800b09e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800add8:	7b7a      	ldrb	r2, [r7, #13]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	32ae      	adds	r2, #174	; 0xae
 800adde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade2:	689b      	ldr	r3, [r3, #8]
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	4798      	blx	r3
 800adea:	4603      	mov	r3, r0
 800adec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800adee:	e156      	b.n	800b09e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	785b      	ldrb	r3, [r3, #1]
 800adf4:	2b03      	cmp	r3, #3
 800adf6:	d008      	beq.n	800ae0a <USBD_StdEPReq+0x9a>
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	f300 8145 	bgt.w	800b088 <USBD_StdEPReq+0x318>
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	f000 809b 	beq.w	800af3a <USBD_StdEPReq+0x1ca>
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d03c      	beq.n	800ae82 <USBD_StdEPReq+0x112>
 800ae08:	e13e      	b.n	800b088 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae10:	b2db      	uxtb	r3, r3
 800ae12:	2b02      	cmp	r3, #2
 800ae14:	d002      	beq.n	800ae1c <USBD_StdEPReq+0xac>
 800ae16:	2b03      	cmp	r3, #3
 800ae18:	d016      	beq.n	800ae48 <USBD_StdEPReq+0xd8>
 800ae1a:	e02c      	b.n	800ae76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae1c:	7bbb      	ldrb	r3, [r7, #14]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00d      	beq.n	800ae3e <USBD_StdEPReq+0xce>
 800ae22:	7bbb      	ldrb	r3, [r7, #14]
 800ae24:	2b80      	cmp	r3, #128	; 0x80
 800ae26:	d00a      	beq.n	800ae3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae28:	7bbb      	ldrb	r3, [r7, #14]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f001 f99d 	bl	800c16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae32:	2180      	movs	r1, #128	; 0x80
 800ae34:	6878      	ldr	r0, [r7, #4]
 800ae36:	f001 f999 	bl	800c16c <USBD_LL_StallEP>
 800ae3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae3c:	e020      	b.n	800ae80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ae3e:	6839      	ldr	r1, [r7, #0]
 800ae40:	6878      	ldr	r0, [r7, #4]
 800ae42:	f000 fca4 	bl	800b78e <USBD_CtlError>
              break;
 800ae46:	e01b      	b.n	800ae80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	885b      	ldrh	r3, [r3, #2]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10e      	bne.n	800ae6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ae50:	7bbb      	ldrb	r3, [r7, #14]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <USBD_StdEPReq+0xfe>
 800ae56:	7bbb      	ldrb	r3, [r7, #14]
 800ae58:	2b80      	cmp	r3, #128	; 0x80
 800ae5a:	d008      	beq.n	800ae6e <USBD_StdEPReq+0xfe>
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	88db      	ldrh	r3, [r3, #6]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d104      	bne.n	800ae6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae64:	7bbb      	ldrb	r3, [r7, #14]
 800ae66:	4619      	mov	r1, r3
 800ae68:	6878      	ldr	r0, [r7, #4]
 800ae6a:	f001 f97f 	bl	800c16c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f000 fd58 	bl	800b924 <USBD_CtlSendStatus>

              break;
 800ae74:	e004      	b.n	800ae80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 fc88 	bl	800b78e <USBD_CtlError>
              break;
 800ae7e:	bf00      	nop
          }
          break;
 800ae80:	e107      	b.n	800b092 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae88:	b2db      	uxtb	r3, r3
 800ae8a:	2b02      	cmp	r3, #2
 800ae8c:	d002      	beq.n	800ae94 <USBD_StdEPReq+0x124>
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d016      	beq.n	800aec0 <USBD_StdEPReq+0x150>
 800ae92:	e04b      	b.n	800af2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae94:	7bbb      	ldrb	r3, [r7, #14]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d00d      	beq.n	800aeb6 <USBD_StdEPReq+0x146>
 800ae9a:	7bbb      	ldrb	r3, [r7, #14]
 800ae9c:	2b80      	cmp	r3, #128	; 0x80
 800ae9e:	d00a      	beq.n	800aeb6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800aea0:	7bbb      	ldrb	r3, [r7, #14]
 800aea2:	4619      	mov	r1, r3
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f001 f961 	bl	800c16c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeaa:	2180      	movs	r1, #128	; 0x80
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f001 f95d 	bl	800c16c <USBD_LL_StallEP>
 800aeb2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800aeb4:	e040      	b.n	800af38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800aeb6:	6839      	ldr	r1, [r7, #0]
 800aeb8:	6878      	ldr	r0, [r7, #4]
 800aeba:	f000 fc68 	bl	800b78e <USBD_CtlError>
              break;
 800aebe:	e03b      	b.n	800af38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800aec0:	683b      	ldr	r3, [r7, #0]
 800aec2:	885b      	ldrh	r3, [r3, #2]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d136      	bne.n	800af36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800aec8:	7bbb      	ldrb	r3, [r7, #14]
 800aeca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d004      	beq.n	800aedc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800aed2:	7bbb      	ldrb	r3, [r7, #14]
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f001 f967 	bl	800c1aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f000 fd21 	bl	800b924 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800aee2:	7bbb      	ldrb	r3, [r7, #14]
 800aee4:	4619      	mov	r1, r3
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f7ff fde2 	bl	800aab0 <USBD_CoreFindEP>
 800aeec:	4603      	mov	r3, r0
 800aeee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aef0:	7b7b      	ldrb	r3, [r7, #13]
 800aef2:	2bff      	cmp	r3, #255	; 0xff
 800aef4:	d01f      	beq.n	800af36 <USBD_StdEPReq+0x1c6>
 800aef6:	7b7b      	ldrb	r3, [r7, #13]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d11c      	bne.n	800af36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aefc:	7b7a      	ldrb	r2, [r7, #13]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800af04:	7b7a      	ldrb	r2, [r7, #13]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	32ae      	adds	r2, #174	; 0xae
 800af0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	2b00      	cmp	r3, #0
 800af12:	d010      	beq.n	800af36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800af14:	7b7a      	ldrb	r2, [r7, #13]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	32ae      	adds	r2, #174	; 0xae
 800af1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af1e:	689b      	ldr	r3, [r3, #8]
 800af20:	6839      	ldr	r1, [r7, #0]
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	4798      	blx	r3
 800af26:	4603      	mov	r3, r0
 800af28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800af2a:	e004      	b.n	800af36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800af2c:	6839      	ldr	r1, [r7, #0]
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f000 fc2d 	bl	800b78e <USBD_CtlError>
              break;
 800af34:	e000      	b.n	800af38 <USBD_StdEPReq+0x1c8>
              break;
 800af36:	bf00      	nop
          }
          break;
 800af38:	e0ab      	b.n	800b092 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b02      	cmp	r3, #2
 800af44:	d002      	beq.n	800af4c <USBD_StdEPReq+0x1dc>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d032      	beq.n	800afb0 <USBD_StdEPReq+0x240>
 800af4a:	e097      	b.n	800b07c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d007      	beq.n	800af62 <USBD_StdEPReq+0x1f2>
 800af52:	7bbb      	ldrb	r3, [r7, #14]
 800af54:	2b80      	cmp	r3, #128	; 0x80
 800af56:	d004      	beq.n	800af62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800af58:	6839      	ldr	r1, [r7, #0]
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 fc17 	bl	800b78e <USBD_CtlError>
                break;
 800af60:	e091      	b.n	800b086 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af66:	2b00      	cmp	r3, #0
 800af68:	da0b      	bge.n	800af82 <USBD_StdEPReq+0x212>
 800af6a:	7bbb      	ldrb	r3, [r7, #14]
 800af6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800af70:	4613      	mov	r3, r2
 800af72:	009b      	lsls	r3, r3, #2
 800af74:	4413      	add	r3, r2
 800af76:	009b      	lsls	r3, r3, #2
 800af78:	3310      	adds	r3, #16
 800af7a:	687a      	ldr	r2, [r7, #4]
 800af7c:	4413      	add	r3, r2
 800af7e:	3304      	adds	r3, #4
 800af80:	e00b      	b.n	800af9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af82:	7bbb      	ldrb	r3, [r7, #14]
 800af84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af88:	4613      	mov	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4413      	add	r3, r2
 800af8e:	009b      	lsls	r3, r3, #2
 800af90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	4413      	add	r3, r2
 800af98:	3304      	adds	r3, #4
 800af9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af9c:	68bb      	ldr	r3, [r7, #8]
 800af9e:	2200      	movs	r2, #0
 800afa0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800afa2:	68bb      	ldr	r3, [r7, #8]
 800afa4:	2202      	movs	r2, #2
 800afa6:	4619      	mov	r1, r3
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fc61 	bl	800b870 <USBD_CtlSendData>
              break;
 800afae:	e06a      	b.n	800b086 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800afb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da11      	bge.n	800afdc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	f003 020f 	and.w	r2, r3, #15
 800afbe:	6879      	ldr	r1, [r7, #4]
 800afc0:	4613      	mov	r3, r2
 800afc2:	009b      	lsls	r3, r3, #2
 800afc4:	4413      	add	r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	3324      	adds	r3, #36	; 0x24
 800afcc:	881b      	ldrh	r3, [r3, #0]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d117      	bne.n	800b002 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800afd2:	6839      	ldr	r1, [r7, #0]
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 fbda 	bl	800b78e <USBD_CtlError>
                  break;
 800afda:	e054      	b.n	800b086 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800afdc:	7bbb      	ldrb	r3, [r7, #14]
 800afde:	f003 020f 	and.w	r2, r3, #15
 800afe2:	6879      	ldr	r1, [r7, #4]
 800afe4:	4613      	mov	r3, r2
 800afe6:	009b      	lsls	r3, r3, #2
 800afe8:	4413      	add	r3, r2
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	440b      	add	r3, r1
 800afee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800aff2:	881b      	ldrh	r3, [r3, #0]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d104      	bne.n	800b002 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800aff8:	6839      	ldr	r1, [r7, #0]
 800affa:	6878      	ldr	r0, [r7, #4]
 800affc:	f000 fbc7 	bl	800b78e <USBD_CtlError>
                  break;
 800b000:	e041      	b.n	800b086 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b002:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b006:	2b00      	cmp	r3, #0
 800b008:	da0b      	bge.n	800b022 <USBD_StdEPReq+0x2b2>
 800b00a:	7bbb      	ldrb	r3, [r7, #14]
 800b00c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b010:	4613      	mov	r3, r2
 800b012:	009b      	lsls	r3, r3, #2
 800b014:	4413      	add	r3, r2
 800b016:	009b      	lsls	r3, r3, #2
 800b018:	3310      	adds	r3, #16
 800b01a:	687a      	ldr	r2, [r7, #4]
 800b01c:	4413      	add	r3, r2
 800b01e:	3304      	adds	r3, #4
 800b020:	e00b      	b.n	800b03a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b022:	7bbb      	ldrb	r3, [r7, #14]
 800b024:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b028:	4613      	mov	r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4413      	add	r3, r2
 800b02e:	009b      	lsls	r3, r3, #2
 800b030:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	4413      	add	r3, r2
 800b038:	3304      	adds	r3, #4
 800b03a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b03c:	7bbb      	ldrb	r3, [r7, #14]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d002      	beq.n	800b048 <USBD_StdEPReq+0x2d8>
 800b042:	7bbb      	ldrb	r3, [r7, #14]
 800b044:	2b80      	cmp	r3, #128	; 0x80
 800b046:	d103      	bne.n	800b050 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	2200      	movs	r2, #0
 800b04c:	601a      	str	r2, [r3, #0]
 800b04e:	e00e      	b.n	800b06e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b050:	7bbb      	ldrb	r3, [r7, #14]
 800b052:	4619      	mov	r1, r3
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f001 f8c7 	bl	800c1e8 <USBD_LL_IsStallEP>
 800b05a:	4603      	mov	r3, r0
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d003      	beq.n	800b068 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	2201      	movs	r2, #1
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e002      	b.n	800b06e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	2200      	movs	r2, #0
 800b06c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2202      	movs	r2, #2
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 fbfb 	bl	800b870 <USBD_CtlSendData>
              break;
 800b07a:	e004      	b.n	800b086 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b07c:	6839      	ldr	r1, [r7, #0]
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 fb85 	bl	800b78e <USBD_CtlError>
              break;
 800b084:	bf00      	nop
          }
          break;
 800b086:	e004      	b.n	800b092 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b088:	6839      	ldr	r1, [r7, #0]
 800b08a:	6878      	ldr	r0, [r7, #4]
 800b08c:	f000 fb7f 	bl	800b78e <USBD_CtlError>
          break;
 800b090:	bf00      	nop
      }
      break;
 800b092:	e005      	b.n	800b0a0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b094:	6839      	ldr	r1, [r7, #0]
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 fb79 	bl	800b78e <USBD_CtlError>
      break;
 800b09c:	e000      	b.n	800b0a0 <USBD_StdEPReq+0x330>
      break;
 800b09e:	bf00      	nop
  }

  return ret;
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3710      	adds	r7, #16
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
	...

0800b0ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	885b      	ldrh	r3, [r3, #2]
 800b0c6:	0a1b      	lsrs	r3, r3, #8
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	3b01      	subs	r3, #1
 800b0cc:	2b0e      	cmp	r3, #14
 800b0ce:	f200 8152 	bhi.w	800b376 <USBD_GetDescriptor+0x2ca>
 800b0d2:	a201      	add	r2, pc, #4	; (adr r2, 800b0d8 <USBD_GetDescriptor+0x2c>)
 800b0d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0d8:	0800b149 	.word	0x0800b149
 800b0dc:	0800b161 	.word	0x0800b161
 800b0e0:	0800b1a1 	.word	0x0800b1a1
 800b0e4:	0800b377 	.word	0x0800b377
 800b0e8:	0800b377 	.word	0x0800b377
 800b0ec:	0800b317 	.word	0x0800b317
 800b0f0:	0800b343 	.word	0x0800b343
 800b0f4:	0800b377 	.word	0x0800b377
 800b0f8:	0800b377 	.word	0x0800b377
 800b0fc:	0800b377 	.word	0x0800b377
 800b100:	0800b377 	.word	0x0800b377
 800b104:	0800b377 	.word	0x0800b377
 800b108:	0800b377 	.word	0x0800b377
 800b10c:	0800b377 	.word	0x0800b377
 800b110:	0800b115 	.word	0x0800b115
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b11a:	69db      	ldr	r3, [r3, #28]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d00b      	beq.n	800b138 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b126:	69db      	ldr	r3, [r3, #28]
 800b128:	687a      	ldr	r2, [r7, #4]
 800b12a:	7c12      	ldrb	r2, [r2, #16]
 800b12c:	f107 0108 	add.w	r1, r7, #8
 800b130:	4610      	mov	r0, r2
 800b132:	4798      	blx	r3
 800b134:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b136:	e126      	b.n	800b386 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b138:	6839      	ldr	r1, [r7, #0]
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f000 fb27 	bl	800b78e <USBD_CtlError>
        err++;
 800b140:	7afb      	ldrb	r3, [r7, #11]
 800b142:	3301      	adds	r3, #1
 800b144:	72fb      	strb	r3, [r7, #11]
      break;
 800b146:	e11e      	b.n	800b386 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	7c12      	ldrb	r2, [r2, #16]
 800b154:	f107 0108 	add.w	r1, r7, #8
 800b158:	4610      	mov	r0, r2
 800b15a:	4798      	blx	r3
 800b15c:	60f8      	str	r0, [r7, #12]
      break;
 800b15e:	e112      	b.n	800b386 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	7c1b      	ldrb	r3, [r3, #16]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10d      	bne.n	800b184 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b16e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b170:	f107 0208 	add.w	r2, r7, #8
 800b174:	4610      	mov	r0, r2
 800b176:	4798      	blx	r3
 800b178:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	3301      	adds	r3, #1
 800b17e:	2202      	movs	r2, #2
 800b180:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b182:	e100      	b.n	800b386 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b18a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b18c:	f107 0208 	add.w	r2, r7, #8
 800b190:	4610      	mov	r0, r2
 800b192:	4798      	blx	r3
 800b194:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	3301      	adds	r3, #1
 800b19a:	2202      	movs	r2, #2
 800b19c:	701a      	strb	r2, [r3, #0]
      break;
 800b19e:	e0f2      	b.n	800b386 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b1a0:	683b      	ldr	r3, [r7, #0]
 800b1a2:	885b      	ldrh	r3, [r3, #2]
 800b1a4:	b2db      	uxtb	r3, r3
 800b1a6:	2b05      	cmp	r3, #5
 800b1a8:	f200 80ac 	bhi.w	800b304 <USBD_GetDescriptor+0x258>
 800b1ac:	a201      	add	r2, pc, #4	; (adr r2, 800b1b4 <USBD_GetDescriptor+0x108>)
 800b1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b2:	bf00      	nop
 800b1b4:	0800b1cd 	.word	0x0800b1cd
 800b1b8:	0800b201 	.word	0x0800b201
 800b1bc:	0800b235 	.word	0x0800b235
 800b1c0:	0800b269 	.word	0x0800b269
 800b1c4:	0800b29d 	.word	0x0800b29d
 800b1c8:	0800b2d1 	.word	0x0800b2d1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d00b      	beq.n	800b1f0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b1de:	685b      	ldr	r3, [r3, #4]
 800b1e0:	687a      	ldr	r2, [r7, #4]
 800b1e2:	7c12      	ldrb	r2, [r2, #16]
 800b1e4:	f107 0108 	add.w	r1, r7, #8
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	4798      	blx	r3
 800b1ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1ee:	e091      	b.n	800b314 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f000 facb 	bl	800b78e <USBD_CtlError>
            err++;
 800b1f8:	7afb      	ldrb	r3, [r7, #11]
 800b1fa:	3301      	adds	r3, #1
 800b1fc:	72fb      	strb	r3, [r7, #11]
          break;
 800b1fe:	e089      	b.n	800b314 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b206:	689b      	ldr	r3, [r3, #8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d00b      	beq.n	800b224 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b212:	689b      	ldr	r3, [r3, #8]
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	7c12      	ldrb	r2, [r2, #16]
 800b218:	f107 0108 	add.w	r1, r7, #8
 800b21c:	4610      	mov	r0, r2
 800b21e:	4798      	blx	r3
 800b220:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b222:	e077      	b.n	800b314 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fab1 	bl	800b78e <USBD_CtlError>
            err++;
 800b22c:	7afb      	ldrb	r3, [r7, #11]
 800b22e:	3301      	adds	r3, #1
 800b230:	72fb      	strb	r3, [r7, #11]
          break;
 800b232:	e06f      	b.n	800b314 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d00b      	beq.n	800b258 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b246:	68db      	ldr	r3, [r3, #12]
 800b248:	687a      	ldr	r2, [r7, #4]
 800b24a:	7c12      	ldrb	r2, [r2, #16]
 800b24c:	f107 0108 	add.w	r1, r7, #8
 800b250:	4610      	mov	r0, r2
 800b252:	4798      	blx	r3
 800b254:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b256:	e05d      	b.n	800b314 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b258:	6839      	ldr	r1, [r7, #0]
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 fa97 	bl	800b78e <USBD_CtlError>
            err++;
 800b260:	7afb      	ldrb	r3, [r7, #11]
 800b262:	3301      	adds	r3, #1
 800b264:	72fb      	strb	r3, [r7, #11]
          break;
 800b266:	e055      	b.n	800b314 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b26e:	691b      	ldr	r3, [r3, #16]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d00b      	beq.n	800b28c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b27a:	691b      	ldr	r3, [r3, #16]
 800b27c:	687a      	ldr	r2, [r7, #4]
 800b27e:	7c12      	ldrb	r2, [r2, #16]
 800b280:	f107 0108 	add.w	r1, r7, #8
 800b284:	4610      	mov	r0, r2
 800b286:	4798      	blx	r3
 800b288:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b28a:	e043      	b.n	800b314 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	6878      	ldr	r0, [r7, #4]
 800b290:	f000 fa7d 	bl	800b78e <USBD_CtlError>
            err++;
 800b294:	7afb      	ldrb	r3, [r7, #11]
 800b296:	3301      	adds	r3, #1
 800b298:	72fb      	strb	r3, [r7, #11]
          break;
 800b29a:	e03b      	b.n	800b314 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2a2:	695b      	ldr	r3, [r3, #20]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00b      	beq.n	800b2c0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	687a      	ldr	r2, [r7, #4]
 800b2b2:	7c12      	ldrb	r2, [r2, #16]
 800b2b4:	f107 0108 	add.w	r1, r7, #8
 800b2b8:	4610      	mov	r0, r2
 800b2ba:	4798      	blx	r3
 800b2bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2be:	e029      	b.n	800b314 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	6878      	ldr	r0, [r7, #4]
 800b2c4:	f000 fa63 	bl	800b78e <USBD_CtlError>
            err++;
 800b2c8:	7afb      	ldrb	r3, [r7, #11]
 800b2ca:	3301      	adds	r3, #1
 800b2cc:	72fb      	strb	r3, [r7, #11]
          break;
 800b2ce:	e021      	b.n	800b314 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2d6:	699b      	ldr	r3, [r3, #24]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00b      	beq.n	800b2f4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	7c12      	ldrb	r2, [r2, #16]
 800b2e8:	f107 0108 	add.w	r1, r7, #8
 800b2ec:	4610      	mov	r0, r2
 800b2ee:	4798      	blx	r3
 800b2f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b2f2:	e00f      	b.n	800b314 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b2f4:	6839      	ldr	r1, [r7, #0]
 800b2f6:	6878      	ldr	r0, [r7, #4]
 800b2f8:	f000 fa49 	bl	800b78e <USBD_CtlError>
            err++;
 800b2fc:	7afb      	ldrb	r3, [r7, #11]
 800b2fe:	3301      	adds	r3, #1
 800b300:	72fb      	strb	r3, [r7, #11]
          break;
 800b302:	e007      	b.n	800b314 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f000 fa41 	bl	800b78e <USBD_CtlError>
          err++;
 800b30c:	7afb      	ldrb	r3, [r7, #11]
 800b30e:	3301      	adds	r3, #1
 800b310:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b312:	bf00      	nop
      }
      break;
 800b314:	e037      	b.n	800b386 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	7c1b      	ldrb	r3, [r3, #16]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d109      	bne.n	800b332 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b326:	f107 0208 	add.w	r2, r7, #8
 800b32a:	4610      	mov	r0, r2
 800b32c:	4798      	blx	r3
 800b32e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b330:	e029      	b.n	800b386 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b332:	6839      	ldr	r1, [r7, #0]
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 fa2a 	bl	800b78e <USBD_CtlError>
        err++;
 800b33a:	7afb      	ldrb	r3, [r7, #11]
 800b33c:	3301      	adds	r3, #1
 800b33e:	72fb      	strb	r3, [r7, #11]
      break;
 800b340:	e021      	b.n	800b386 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	7c1b      	ldrb	r3, [r3, #16]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d10d      	bne.n	800b366 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b352:	f107 0208 	add.w	r2, r7, #8
 800b356:	4610      	mov	r0, r2
 800b358:	4798      	blx	r3
 800b35a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3301      	adds	r3, #1
 800b360:	2207      	movs	r2, #7
 800b362:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b364:	e00f      	b.n	800b386 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f000 fa10 	bl	800b78e <USBD_CtlError>
        err++;
 800b36e:	7afb      	ldrb	r3, [r7, #11]
 800b370:	3301      	adds	r3, #1
 800b372:	72fb      	strb	r3, [r7, #11]
      break;
 800b374:	e007      	b.n	800b386 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fa08 	bl	800b78e <USBD_CtlError>
      err++;
 800b37e:	7afb      	ldrb	r3, [r7, #11]
 800b380:	3301      	adds	r3, #1
 800b382:	72fb      	strb	r3, [r7, #11]
      break;
 800b384:	bf00      	nop
  }

  if (err != 0U)
 800b386:	7afb      	ldrb	r3, [r7, #11]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d11e      	bne.n	800b3ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	88db      	ldrh	r3, [r3, #6]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d016      	beq.n	800b3c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b394:	893b      	ldrh	r3, [r7, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00e      	beq.n	800b3b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	88da      	ldrh	r2, [r3, #6]
 800b39e:	893b      	ldrh	r3, [r7, #8]
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	bf28      	it	cs
 800b3a4:	4613      	movcs	r3, r2
 800b3a6:	b29b      	uxth	r3, r3
 800b3a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b3aa:	893b      	ldrh	r3, [r7, #8]
 800b3ac:	461a      	mov	r2, r3
 800b3ae:	68f9      	ldr	r1, [r7, #12]
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 fa5d 	bl	800b870 <USBD_CtlSendData>
 800b3b6:	e009      	b.n	800b3cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b3b8:	6839      	ldr	r1, [r7, #0]
 800b3ba:	6878      	ldr	r0, [r7, #4]
 800b3bc:	f000 f9e7 	bl	800b78e <USBD_CtlError>
 800b3c0:	e004      	b.n	800b3cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f000 faae 	bl	800b924 <USBD_CtlSendStatus>
 800b3c8:	e000      	b.n	800b3cc <USBD_GetDescriptor+0x320>
    return;
 800b3ca:	bf00      	nop
  }
}
 800b3cc:	3710      	adds	r7, #16
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}
 800b3d2:	bf00      	nop

0800b3d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
 800b3dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	889b      	ldrh	r3, [r3, #4]
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d131      	bne.n	800b44a <USBD_SetAddress+0x76>
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	88db      	ldrh	r3, [r3, #6]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d12d      	bne.n	800b44a <USBD_SetAddress+0x76>
 800b3ee:	683b      	ldr	r3, [r7, #0]
 800b3f0:	885b      	ldrh	r3, [r3, #2]
 800b3f2:	2b7f      	cmp	r3, #127	; 0x7f
 800b3f4:	d829      	bhi.n	800b44a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b3f6:	683b      	ldr	r3, [r7, #0]
 800b3f8:	885b      	ldrh	r3, [r3, #2]
 800b3fa:	b2db      	uxtb	r3, r3
 800b3fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b400:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	2b03      	cmp	r3, #3
 800b40c:	d104      	bne.n	800b418 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b40e:	6839      	ldr	r1, [r7, #0]
 800b410:	6878      	ldr	r0, [r7, #4]
 800b412:	f000 f9bc 	bl	800b78e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b416:	e01d      	b.n	800b454 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	7bfa      	ldrb	r2, [r7, #15]
 800b41c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b420:	7bfb      	ldrb	r3, [r7, #15]
 800b422:	4619      	mov	r1, r3
 800b424:	6878      	ldr	r0, [r7, #4]
 800b426:	f000 ff0b 	bl	800c240 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f000 fa7a 	bl	800b924 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b430:	7bfb      	ldrb	r3, [r7, #15]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d004      	beq.n	800b440 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2202      	movs	r2, #2
 800b43a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b43e:	e009      	b.n	800b454 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b448:	e004      	b.n	800b454 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b44a:	6839      	ldr	r1, [r7, #0]
 800b44c:	6878      	ldr	r0, [r7, #4]
 800b44e:	f000 f99e 	bl	800b78e <USBD_CtlError>
  }
}
 800b452:	bf00      	nop
 800b454:	bf00      	nop
 800b456:	3710      	adds	r7, #16
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b084      	sub	sp, #16
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
 800b464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b466:	2300      	movs	r3, #0
 800b468:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	885b      	ldrh	r3, [r3, #2]
 800b46e:	b2da      	uxtb	r2, r3
 800b470:	4b4e      	ldr	r3, [pc, #312]	; (800b5ac <USBD_SetConfig+0x150>)
 800b472:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b474:	4b4d      	ldr	r3, [pc, #308]	; (800b5ac <USBD_SetConfig+0x150>)
 800b476:	781b      	ldrb	r3, [r3, #0]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d905      	bls.n	800b488 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b47c:	6839      	ldr	r1, [r7, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	f000 f985 	bl	800b78e <USBD_CtlError>
    return USBD_FAIL;
 800b484:	2303      	movs	r3, #3
 800b486:	e08c      	b.n	800b5a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b48e:	b2db      	uxtb	r3, r3
 800b490:	2b02      	cmp	r3, #2
 800b492:	d002      	beq.n	800b49a <USBD_SetConfig+0x3e>
 800b494:	2b03      	cmp	r3, #3
 800b496:	d029      	beq.n	800b4ec <USBD_SetConfig+0x90>
 800b498:	e075      	b.n	800b586 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b49a:	4b44      	ldr	r3, [pc, #272]	; (800b5ac <USBD_SetConfig+0x150>)
 800b49c:	781b      	ldrb	r3, [r3, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d020      	beq.n	800b4e4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b4a2:	4b42      	ldr	r3, [pc, #264]	; (800b5ac <USBD_SetConfig+0x150>)
 800b4a4:	781b      	ldrb	r3, [r3, #0]
 800b4a6:	461a      	mov	r2, r3
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b4ac:	4b3f      	ldr	r3, [pc, #252]	; (800b5ac <USBD_SetConfig+0x150>)
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7fe ffbd 	bl	800a432 <USBD_SetClassConfig>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d008      	beq.n	800b4d4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 f962 	bl	800b78e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b4d2:	e065      	b.n	800b5a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 fa25 	bl	800b924 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2203      	movs	r2, #3
 800b4de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b4e2:	e05d      	b.n	800b5a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 fa1d 	bl	800b924 <USBD_CtlSendStatus>
      break;
 800b4ea:	e059      	b.n	800b5a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b4ec:	4b2f      	ldr	r3, [pc, #188]	; (800b5ac <USBD_SetConfig+0x150>)
 800b4ee:	781b      	ldrb	r3, [r3, #0]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d112      	bne.n	800b51a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b4fc:	4b2b      	ldr	r3, [pc, #172]	; (800b5ac <USBD_SetConfig+0x150>)
 800b4fe:	781b      	ldrb	r3, [r3, #0]
 800b500:	461a      	mov	r2, r3
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b506:	4b29      	ldr	r3, [pc, #164]	; (800b5ac <USBD_SetConfig+0x150>)
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	4619      	mov	r1, r3
 800b50c:	6878      	ldr	r0, [r7, #4]
 800b50e:	f7fe ffac 	bl	800a46a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f000 fa06 	bl	800b924 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b518:	e042      	b.n	800b5a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b51a:	4b24      	ldr	r3, [pc, #144]	; (800b5ac <USBD_SetConfig+0x150>)
 800b51c:	781b      	ldrb	r3, [r3, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d02a      	beq.n	800b57e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	685b      	ldr	r3, [r3, #4]
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	4619      	mov	r1, r3
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7fe ff9a 	bl	800a46a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b536:	4b1d      	ldr	r3, [pc, #116]	; (800b5ac <USBD_SetConfig+0x150>)
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	461a      	mov	r2, r3
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b540:	4b1a      	ldr	r3, [pc, #104]	; (800b5ac <USBD_SetConfig+0x150>)
 800b542:	781b      	ldrb	r3, [r3, #0]
 800b544:	4619      	mov	r1, r3
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f7fe ff73 	bl	800a432 <USBD_SetClassConfig>
 800b54c:	4603      	mov	r3, r0
 800b54e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b550:	7bfb      	ldrb	r3, [r7, #15]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d00f      	beq.n	800b576 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f000 f918 	bl	800b78e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	b2db      	uxtb	r3, r3
 800b564:	4619      	mov	r1, r3
 800b566:	6878      	ldr	r0, [r7, #4]
 800b568:	f7fe ff7f 	bl	800a46a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	2202      	movs	r2, #2
 800b570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b574:	e014      	b.n	800b5a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b576:	6878      	ldr	r0, [r7, #4]
 800b578:	f000 f9d4 	bl	800b924 <USBD_CtlSendStatus>
      break;
 800b57c:	e010      	b.n	800b5a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 f9d0 	bl	800b924 <USBD_CtlSendStatus>
      break;
 800b584:	e00c      	b.n	800b5a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b586:	6839      	ldr	r1, [r7, #0]
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f900 	bl	800b78e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b58e:	4b07      	ldr	r3, [pc, #28]	; (800b5ac <USBD_SetConfig+0x150>)
 800b590:	781b      	ldrb	r3, [r3, #0]
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f7fe ff68 	bl	800a46a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b59a:	2303      	movs	r3, #3
 800b59c:	73fb      	strb	r3, [r7, #15]
      break;
 800b59e:	bf00      	nop
  }

  return ret;
 800b5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	3710      	adds	r7, #16
 800b5a6:	46bd      	mov	sp, r7
 800b5a8:	bd80      	pop	{r7, pc}
 800b5aa:	bf00      	nop
 800b5ac:	2000058c 	.word	0x2000058c

0800b5b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5b0:	b580      	push	{r7, lr}
 800b5b2:	b082      	sub	sp, #8
 800b5b4:	af00      	add	r7, sp, #0
 800b5b6:	6078      	str	r0, [r7, #4]
 800b5b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	88db      	ldrh	r3, [r3, #6]
 800b5be:	2b01      	cmp	r3, #1
 800b5c0:	d004      	beq.n	800b5cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b5c2:	6839      	ldr	r1, [r7, #0]
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 f8e2 	bl	800b78e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b5ca:	e023      	b.n	800b614 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5d2:	b2db      	uxtb	r3, r3
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	dc02      	bgt.n	800b5de <USBD_GetConfig+0x2e>
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	dc03      	bgt.n	800b5e4 <USBD_GetConfig+0x34>
 800b5dc:	e015      	b.n	800b60a <USBD_GetConfig+0x5a>
 800b5de:	2b03      	cmp	r3, #3
 800b5e0:	d00b      	beq.n	800b5fa <USBD_GetConfig+0x4a>
 800b5e2:	e012      	b.n	800b60a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	3308      	adds	r3, #8
 800b5ee:	2201      	movs	r2, #1
 800b5f0:	4619      	mov	r1, r3
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f000 f93c 	bl	800b870 <USBD_CtlSendData>
        break;
 800b5f8:	e00c      	b.n	800b614 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	3304      	adds	r3, #4
 800b5fe:	2201      	movs	r2, #1
 800b600:	4619      	mov	r1, r3
 800b602:	6878      	ldr	r0, [r7, #4]
 800b604:	f000 f934 	bl	800b870 <USBD_CtlSendData>
        break;
 800b608:	e004      	b.n	800b614 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b60a:	6839      	ldr	r1, [r7, #0]
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f8be 	bl	800b78e <USBD_CtlError>
        break;
 800b612:	bf00      	nop
}
 800b614:	bf00      	nop
 800b616:	3708      	adds	r7, #8
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b082      	sub	sp, #8
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
 800b624:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b62c:	b2db      	uxtb	r3, r3
 800b62e:	3b01      	subs	r3, #1
 800b630:	2b02      	cmp	r3, #2
 800b632:	d81e      	bhi.n	800b672 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b634:	683b      	ldr	r3, [r7, #0]
 800b636:	88db      	ldrh	r3, [r3, #6]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	d004      	beq.n	800b646 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b63c:	6839      	ldr	r1, [r7, #0]
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	f000 f8a5 	bl	800b78e <USBD_CtlError>
        break;
 800b644:	e01a      	b.n	800b67c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	2201      	movs	r2, #1
 800b64a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b652:	2b00      	cmp	r3, #0
 800b654:	d005      	beq.n	800b662 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	68db      	ldr	r3, [r3, #12]
 800b65a:	f043 0202 	orr.w	r2, r3, #2
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	330c      	adds	r3, #12
 800b666:	2202      	movs	r2, #2
 800b668:	4619      	mov	r1, r3
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f000 f900 	bl	800b870 <USBD_CtlSendData>
      break;
 800b670:	e004      	b.n	800b67c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b672:	6839      	ldr	r1, [r7, #0]
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 f88a 	bl	800b78e <USBD_CtlError>
      break;
 800b67a:	bf00      	nop
  }
}
 800b67c:	bf00      	nop
 800b67e:	3708      	adds	r7, #8
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}

0800b684 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b082      	sub	sp, #8
 800b688:	af00      	add	r7, sp, #0
 800b68a:	6078      	str	r0, [r7, #4]
 800b68c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	885b      	ldrh	r3, [r3, #2]
 800b692:	2b01      	cmp	r3, #1
 800b694:	d107      	bne.n	800b6a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	2201      	movs	r2, #1
 800b69a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 f940 	bl	800b924 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b6a4:	e013      	b.n	800b6ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b6a6:	683b      	ldr	r3, [r7, #0]
 800b6a8:	885b      	ldrh	r3, [r3, #2]
 800b6aa:	2b02      	cmp	r3, #2
 800b6ac:	d10b      	bne.n	800b6c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	889b      	ldrh	r3, [r3, #4]
 800b6b2:	0a1b      	lsrs	r3, r3, #8
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f930 	bl	800b924 <USBD_CtlSendStatus>
}
 800b6c4:	e003      	b.n	800b6ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b6c6:	6839      	ldr	r1, [r7, #0]
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 f860 	bl	800b78e <USBD_CtlError>
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
 800b6de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6e6:	b2db      	uxtb	r3, r3
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	2b02      	cmp	r3, #2
 800b6ec:	d80b      	bhi.n	800b706 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	885b      	ldrh	r3, [r3, #2]
 800b6f2:	2b01      	cmp	r3, #1
 800b6f4:	d10c      	bne.n	800b710 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 f910 	bl	800b924 <USBD_CtlSendStatus>
      }
      break;
 800b704:	e004      	b.n	800b710 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b706:	6839      	ldr	r1, [r7, #0]
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f000 f840 	bl	800b78e <USBD_CtlError>
      break;
 800b70e:	e000      	b.n	800b712 <USBD_ClrFeature+0x3c>
      break;
 800b710:	bf00      	nop
  }
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
 800b722:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	781a      	ldrb	r2, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	3301      	adds	r3, #1
 800b734:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	781a      	ldrb	r2, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	3301      	adds	r3, #1
 800b742:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f7ff fa17 	bl	800ab78 <SWAPBYTE>
 800b74a:	4603      	mov	r3, r0
 800b74c:	461a      	mov	r2, r3
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3301      	adds	r3, #1
 800b756:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	3301      	adds	r3, #1
 800b75c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f7ff fa0a 	bl	800ab78 <SWAPBYTE>
 800b764:	4603      	mov	r3, r0
 800b766:	461a      	mov	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	3301      	adds	r3, #1
 800b770:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	3301      	adds	r3, #1
 800b776:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b778:	68f8      	ldr	r0, [r7, #12]
 800b77a:	f7ff f9fd 	bl	800ab78 <SWAPBYTE>
 800b77e:	4603      	mov	r3, r0
 800b780:	461a      	mov	r2, r3
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	80da      	strh	r2, [r3, #6]
}
 800b786:	bf00      	nop
 800b788:	3710      	adds	r7, #16
 800b78a:	46bd      	mov	sp, r7
 800b78c:	bd80      	pop	{r7, pc}

0800b78e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b78e:	b580      	push	{r7, lr}
 800b790:	b082      	sub	sp, #8
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b798:	2180      	movs	r1, #128	; 0x80
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 fce6 	bl	800c16c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b7a0:	2100      	movs	r1, #0
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f000 fce2 	bl	800c16c <USBD_LL_StallEP>
}
 800b7a8:	bf00      	nop
 800b7aa:	3708      	adds	r7, #8
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b7b0:	b580      	push	{r7, lr}
 800b7b2:	b086      	sub	sp, #24
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	60f8      	str	r0, [r7, #12]
 800b7b8:	60b9      	str	r1, [r7, #8]
 800b7ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b7bc:	2300      	movs	r3, #0
 800b7be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d036      	beq.n	800b834 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b7ca:	6938      	ldr	r0, [r7, #16]
 800b7cc:	f000 f836 	bl	800b83c <USBD_GetLen>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	3301      	adds	r3, #1
 800b7d4:	b29b      	uxth	r3, r3
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	b29a      	uxth	r2, r3
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b7de:	7dfb      	ldrb	r3, [r7, #23]
 800b7e0:	68ba      	ldr	r2, [r7, #8]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	687a      	ldr	r2, [r7, #4]
 800b7e6:	7812      	ldrb	r2, [r2, #0]
 800b7e8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7ea:	7dfb      	ldrb	r3, [r7, #23]
 800b7ec:	3301      	adds	r3, #1
 800b7ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b7f0:	7dfb      	ldrb	r3, [r7, #23]
 800b7f2:	68ba      	ldr	r2, [r7, #8]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	2203      	movs	r2, #3
 800b7f8:	701a      	strb	r2, [r3, #0]
  idx++;
 800b7fa:	7dfb      	ldrb	r3, [r7, #23]
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b800:	e013      	b.n	800b82a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b802:	7dfb      	ldrb	r3, [r7, #23]
 800b804:	68ba      	ldr	r2, [r7, #8]
 800b806:	4413      	add	r3, r2
 800b808:	693a      	ldr	r2, [r7, #16]
 800b80a:	7812      	ldrb	r2, [r2, #0]
 800b80c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b80e:	693b      	ldr	r3, [r7, #16]
 800b810:	3301      	adds	r3, #1
 800b812:	613b      	str	r3, [r7, #16]
    idx++;
 800b814:	7dfb      	ldrb	r3, [r7, #23]
 800b816:	3301      	adds	r3, #1
 800b818:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b81a:	7dfb      	ldrb	r3, [r7, #23]
 800b81c:	68ba      	ldr	r2, [r7, #8]
 800b81e:	4413      	add	r3, r2
 800b820:	2200      	movs	r2, #0
 800b822:	701a      	strb	r2, [r3, #0]
    idx++;
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	3301      	adds	r3, #1
 800b828:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d1e7      	bne.n	800b802 <USBD_GetString+0x52>
 800b832:	e000      	b.n	800b836 <USBD_GetString+0x86>
    return;
 800b834:	bf00      	nop
  }
}
 800b836:	3718      	adds	r7, #24
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}

0800b83c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b83c:	b480      	push	{r7}
 800b83e:	b085      	sub	sp, #20
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b84c:	e005      	b.n	800b85a <USBD_GetLen+0x1e>
  {
    len++;
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
 800b850:	3301      	adds	r3, #1
 800b852:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b854:	68bb      	ldr	r3, [r7, #8]
 800b856:	3301      	adds	r3, #1
 800b858:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b85a:	68bb      	ldr	r3, [r7, #8]
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d1f5      	bne.n	800b84e <USBD_GetLen+0x12>
  }

  return len;
 800b862:	7bfb      	ldrb	r3, [r7, #15]
}
 800b864:	4618      	mov	r0, r3
 800b866:	3714      	adds	r7, #20
 800b868:	46bd      	mov	sp, r7
 800b86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86e:	4770      	bx	lr

0800b870 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	60f8      	str	r0, [r7, #12]
 800b878:	60b9      	str	r1, [r7, #8]
 800b87a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2202      	movs	r2, #2
 800b880:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	687a      	ldr	r2, [r7, #4]
 800b88e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	2100      	movs	r1, #0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 fcf1 	bl	800c27e <USBD_LL_Transmit>

  return USBD_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b084      	sub	sp, #16
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	60f8      	str	r0, [r7, #12]
 800b8ae:	60b9      	str	r1, [r7, #8]
 800b8b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	68ba      	ldr	r2, [r7, #8]
 800b8b6:	2100      	movs	r1, #0
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f000 fce0 	bl	800c27e <USBD_LL_Transmit>

  return USBD_OK;
 800b8be:	2300      	movs	r3, #0
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3710      	adds	r7, #16
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	bd80      	pop	{r7, pc}

0800b8c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b084      	sub	sp, #16
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	60f8      	str	r0, [r7, #12]
 800b8d0:	60b9      	str	r1, [r7, #8]
 800b8d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	2203      	movs	r2, #3
 800b8d8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	687a      	ldr	r2, [r7, #4]
 800b8e0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	687a      	ldr	r2, [r7, #4]
 800b8e8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	68ba      	ldr	r2, [r7, #8]
 800b8f0:	2100      	movs	r1, #0
 800b8f2:	68f8      	ldr	r0, [r7, #12]
 800b8f4:	f000 fce4 	bl	800c2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8f8:	2300      	movs	r3, #0
}
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	3710      	adds	r7, #16
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}

0800b902 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b902:	b580      	push	{r7, lr}
 800b904:	b084      	sub	sp, #16
 800b906:	af00      	add	r7, sp, #0
 800b908:	60f8      	str	r0, [r7, #12]
 800b90a:	60b9      	str	r1, [r7, #8]
 800b90c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	2100      	movs	r1, #0
 800b914:	68f8      	ldr	r0, [r7, #12]
 800b916:	f000 fcd3 	bl	800c2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b91a:	2300      	movs	r3, #0
}
 800b91c:	4618      	mov	r0, r3
 800b91e:	3710      	adds	r7, #16
 800b920:	46bd      	mov	sp, r7
 800b922:	bd80      	pop	{r7, pc}

0800b924 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2204      	movs	r2, #4
 800b930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b934:	2300      	movs	r3, #0
 800b936:	2200      	movs	r2, #0
 800b938:	2100      	movs	r1, #0
 800b93a:	6878      	ldr	r0, [r7, #4]
 800b93c:	f000 fc9f 	bl	800c27e <USBD_LL_Transmit>

  return USBD_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3708      	adds	r7, #8
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2205      	movs	r2, #5
 800b956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b95a:	2300      	movs	r3, #0
 800b95c:	2200      	movs	r2, #0
 800b95e:	2100      	movs	r1, #0
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 fcad 	bl	800c2c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b966:	2300      	movs	r3, #0
}
 800b968:	4618      	mov	r0, r3
 800b96a:	3708      	adds	r7, #8
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}

0800b970 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b970:	b580      	push	{r7, lr}
 800b972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800b974:	2201      	movs	r2, #1
 800b976:	4912      	ldr	r1, [pc, #72]	; (800b9c0 <MX_USB_DEVICE_Init+0x50>)
 800b978:	4812      	ldr	r0, [pc, #72]	; (800b9c4 <MX_USB_DEVICE_Init+0x54>)
 800b97a:	f7fe fcdd 	bl	800a338 <USBD_Init>
 800b97e:	4603      	mov	r3, r0
 800b980:	2b00      	cmp	r3, #0
 800b982:	d001      	beq.n	800b988 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b984:	f7f5 fa42 	bl	8000e0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800b988:	490f      	ldr	r1, [pc, #60]	; (800b9c8 <MX_USB_DEVICE_Init+0x58>)
 800b98a:	480e      	ldr	r0, [pc, #56]	; (800b9c4 <MX_USB_DEVICE_Init+0x54>)
 800b98c:	f7fe fd04 	bl	800a398 <USBD_RegisterClass>
 800b990:	4603      	mov	r3, r0
 800b992:	2b00      	cmp	r3, #0
 800b994:	d001      	beq.n	800b99a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b996:	f7f5 fa39 	bl	8000e0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800b99a:	490c      	ldr	r1, [pc, #48]	; (800b9cc <MX_USB_DEVICE_Init+0x5c>)
 800b99c:	4809      	ldr	r0, [pc, #36]	; (800b9c4 <MX_USB_DEVICE_Init+0x54>)
 800b99e:	f7fe fc3b 	bl	800a218 <USBD_CDC_RegisterInterface>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d001      	beq.n	800b9ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b9a8:	f7f5 fa30 	bl	8000e0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800b9ac:	4805      	ldr	r0, [pc, #20]	; (800b9c4 <MX_USB_DEVICE_Init+0x54>)
 800b9ae:	f7fe fd29 	bl	800a404 <USBD_Start>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b9b8:	f7f5 fa28 	bl	8000e0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b9bc:	bf00      	nop
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	200000ac 	.word	0x200000ac
 800b9c4:	20000590 	.word	0x20000590
 800b9c8:	20000018 	.word	0x20000018
 800b9cc:	20000098 	.word	0x20000098

0800b9d0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	4905      	ldr	r1, [pc, #20]	; (800b9ec <CDC_Init_HS+0x1c>)
 800b9d8:	4805      	ldr	r0, [pc, #20]	; (800b9f0 <CDC_Init_HS+0x20>)
 800b9da:	f7fe fc37 	bl	800a24c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800b9de:	4905      	ldr	r1, [pc, #20]	; (800b9f4 <CDC_Init_HS+0x24>)
 800b9e0:	4803      	ldr	r0, [pc, #12]	; (800b9f0 <CDC_Init_HS+0x20>)
 800b9e2:	f7fe fc55 	bl	800a290 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b9e6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	bd80      	pop	{r7, pc}
 800b9ec:	2000106c 	.word	0x2000106c
 800b9f0:	20000590 	.word	0x20000590
 800b9f4:	2000086c 	.word	0x2000086c

0800b9f8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800b9f8:	b480      	push	{r7}
 800b9fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800b9fc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	46bd      	mov	sp, r7
 800ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba06:	4770      	bx	lr

0800ba08 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ba08:	b480      	push	{r7}
 800ba0a:	b083      	sub	sp, #12
 800ba0c:	af00      	add	r7, sp, #0
 800ba0e:	4603      	mov	r3, r0
 800ba10:	6039      	str	r1, [r7, #0]
 800ba12:	71fb      	strb	r3, [r7, #7]
 800ba14:	4613      	mov	r3, r2
 800ba16:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800ba18:	79fb      	ldrb	r3, [r7, #7]
 800ba1a:	2b23      	cmp	r3, #35	; 0x23
 800ba1c:	d84a      	bhi.n	800bab4 <CDC_Control_HS+0xac>
 800ba1e:	a201      	add	r2, pc, #4	; (adr r2, 800ba24 <CDC_Control_HS+0x1c>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800bab5 	.word	0x0800bab5
 800ba28:	0800bab5 	.word	0x0800bab5
 800ba2c:	0800bab5 	.word	0x0800bab5
 800ba30:	0800bab5 	.word	0x0800bab5
 800ba34:	0800bab5 	.word	0x0800bab5
 800ba38:	0800bab5 	.word	0x0800bab5
 800ba3c:	0800bab5 	.word	0x0800bab5
 800ba40:	0800bab5 	.word	0x0800bab5
 800ba44:	0800bab5 	.word	0x0800bab5
 800ba48:	0800bab5 	.word	0x0800bab5
 800ba4c:	0800bab5 	.word	0x0800bab5
 800ba50:	0800bab5 	.word	0x0800bab5
 800ba54:	0800bab5 	.word	0x0800bab5
 800ba58:	0800bab5 	.word	0x0800bab5
 800ba5c:	0800bab5 	.word	0x0800bab5
 800ba60:	0800bab5 	.word	0x0800bab5
 800ba64:	0800bab5 	.word	0x0800bab5
 800ba68:	0800bab5 	.word	0x0800bab5
 800ba6c:	0800bab5 	.word	0x0800bab5
 800ba70:	0800bab5 	.word	0x0800bab5
 800ba74:	0800bab5 	.word	0x0800bab5
 800ba78:	0800bab5 	.word	0x0800bab5
 800ba7c:	0800bab5 	.word	0x0800bab5
 800ba80:	0800bab5 	.word	0x0800bab5
 800ba84:	0800bab5 	.word	0x0800bab5
 800ba88:	0800bab5 	.word	0x0800bab5
 800ba8c:	0800bab5 	.word	0x0800bab5
 800ba90:	0800bab5 	.word	0x0800bab5
 800ba94:	0800bab5 	.word	0x0800bab5
 800ba98:	0800bab5 	.word	0x0800bab5
 800ba9c:	0800bab5 	.word	0x0800bab5
 800baa0:	0800bab5 	.word	0x0800bab5
 800baa4:	0800bab5 	.word	0x0800bab5
 800baa8:	0800bab5 	.word	0x0800bab5
 800baac:	0800bab5 	.word	0x0800bab5
 800bab0:	0800bab5 	.word	0x0800bab5
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bab4:	bf00      	nop
  }

  return (USBD_OK);
 800bab6:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bab8:	4618      	mov	r0, r3
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
 800bacc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	4805      	ldr	r0, [pc, #20]	; (800bae8 <CDC_Receive_HS+0x24>)
 800bad2:	f7fe fbdd 	bl	800a290 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bad6:	4804      	ldr	r0, [pc, #16]	; (800bae8 <CDC_Receive_HS+0x24>)
 800bad8:	f7fe fbf8 	bl	800a2cc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800badc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3708      	adds	r7, #8
 800bae2:	46bd      	mov	sp, r7
 800bae4:	bd80      	pop	{r7, pc}
 800bae6:	bf00      	nop
 800bae8:	20000590 	.word	0x20000590

0800baec <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800baec:	b480      	push	{r7}
 800baee:	b087      	sub	sp, #28
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	60f8      	str	r0, [r7, #12]
 800baf4:	60b9      	str	r1, [r7, #8]
 800baf6:	4613      	mov	r3, r2
 800baf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bafa:	2300      	movs	r3, #0
 800bafc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800bafe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	371c      	adds	r7, #28
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
	...

0800bb10 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb10:	b480      	push	{r7}
 800bb12:	b083      	sub	sp, #12
 800bb14:	af00      	add	r7, sp, #0
 800bb16:	4603      	mov	r3, r0
 800bb18:	6039      	str	r1, [r7, #0]
 800bb1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	2212      	movs	r2, #18
 800bb20:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bb22:	4b03      	ldr	r3, [pc, #12]	; (800bb30 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bb24:	4618      	mov	r0, r3
 800bb26:	370c      	adds	r7, #12
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr
 800bb30:	200000cc 	.word	0x200000cc

0800bb34 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b083      	sub	sp, #12
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	6039      	str	r1, [r7, #0]
 800bb3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb40:	683b      	ldr	r3, [r7, #0]
 800bb42:	2204      	movs	r2, #4
 800bb44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb46:	4b03      	ldr	r3, [pc, #12]	; (800bb54 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	370c      	adds	r7, #12
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	200000ec 	.word	0x200000ec

0800bb58 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb58:	b580      	push	{r7, lr}
 800bb5a:	b082      	sub	sp, #8
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	4603      	mov	r3, r0
 800bb60:	6039      	str	r1, [r7, #0]
 800bb62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb64:	79fb      	ldrb	r3, [r7, #7]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d105      	bne.n	800bb76 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bb6a:	683a      	ldr	r2, [r7, #0]
 800bb6c:	4907      	ldr	r1, [pc, #28]	; (800bb8c <USBD_HS_ProductStrDescriptor+0x34>)
 800bb6e:	4808      	ldr	r0, [pc, #32]	; (800bb90 <USBD_HS_ProductStrDescriptor+0x38>)
 800bb70:	f7ff fe1e 	bl	800b7b0 <USBD_GetString>
 800bb74:	e004      	b.n	800bb80 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bb76:	683a      	ldr	r2, [r7, #0]
 800bb78:	4904      	ldr	r1, [pc, #16]	; (800bb8c <USBD_HS_ProductStrDescriptor+0x34>)
 800bb7a:	4805      	ldr	r0, [pc, #20]	; (800bb90 <USBD_HS_ProductStrDescriptor+0x38>)
 800bb7c:	f7ff fe18 	bl	800b7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb80:	4b02      	ldr	r3, [pc, #8]	; (800bb8c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bb82:	4618      	mov	r0, r3
 800bb84:	3708      	adds	r7, #8
 800bb86:	46bd      	mov	sp, r7
 800bb88:	bd80      	pop	{r7, pc}
 800bb8a:	bf00      	nop
 800bb8c:	2000186c 	.word	0x2000186c
 800bb90:	0800c700 	.word	0x0800c700

0800bb94 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb94:	b580      	push	{r7, lr}
 800bb96:	b082      	sub	sp, #8
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	6039      	str	r1, [r7, #0]
 800bb9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bba0:	683a      	ldr	r2, [r7, #0]
 800bba2:	4904      	ldr	r1, [pc, #16]	; (800bbb4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bba4:	4804      	ldr	r0, [pc, #16]	; (800bbb8 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bba6:	f7ff fe03 	bl	800b7b0 <USBD_GetString>
  return USBD_StrDesc;
 800bbaa:	4b02      	ldr	r3, [pc, #8]	; (800bbb4 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3708      	adds	r7, #8
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	2000186c 	.word	0x2000186c
 800bbb8:	0800c718 	.word	0x0800c718

0800bbbc <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b082      	sub	sp, #8
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	6039      	str	r1, [r7, #0]
 800bbc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	221a      	movs	r2, #26
 800bbcc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bbce:	f000 f855 	bl	800bc7c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bbd2:	4b02      	ldr	r3, [pc, #8]	; (800bbdc <USBD_HS_SerialStrDescriptor+0x20>)
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}
 800bbdc:	200000f0 	.word	0x200000f0

0800bbe0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	6039      	str	r1, [r7, #0]
 800bbea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbec:	79fb      	ldrb	r3, [r7, #7]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d105      	bne.n	800bbfe <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4907      	ldr	r1, [pc, #28]	; (800bc14 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bbf6:	4808      	ldr	r0, [pc, #32]	; (800bc18 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bbf8:	f7ff fdda 	bl	800b7b0 <USBD_GetString>
 800bbfc:	e004      	b.n	800bc08 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4904      	ldr	r1, [pc, #16]	; (800bc14 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bc02:	4805      	ldr	r0, [pc, #20]	; (800bc18 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bc04:	f7ff fdd4 	bl	800b7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc08:	4b02      	ldr	r3, [pc, #8]	; (800bc14 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	3708      	adds	r7, #8
 800bc0e:	46bd      	mov	sp, r7
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	bf00      	nop
 800bc14:	2000186c 	.word	0x2000186c
 800bc18:	0800c72c 	.word	0x0800c72c

0800bc1c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	4603      	mov	r3, r0
 800bc24:	6039      	str	r1, [r7, #0]
 800bc26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bc28:	79fb      	ldrb	r3, [r7, #7]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d105      	bne.n	800bc3a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bc2e:	683a      	ldr	r2, [r7, #0]
 800bc30:	4907      	ldr	r1, [pc, #28]	; (800bc50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bc32:	4808      	ldr	r0, [pc, #32]	; (800bc54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bc34:	f7ff fdbc 	bl	800b7b0 <USBD_GetString>
 800bc38:	e004      	b.n	800bc44 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bc3a:	683a      	ldr	r2, [r7, #0]
 800bc3c:	4904      	ldr	r1, [pc, #16]	; (800bc50 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bc3e:	4805      	ldr	r0, [pc, #20]	; (800bc54 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bc40:	f7ff fdb6 	bl	800b7b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc44:	4b02      	ldr	r3, [pc, #8]	; (800bc50 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	2000186c 	.word	0x2000186c
 800bc54:	0800c738 	.word	0x0800c738

0800bc58 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	4603      	mov	r3, r0
 800bc60:	6039      	str	r1, [r7, #0]
 800bc62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	220c      	movs	r2, #12
 800bc68:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800bc6a:	4b03      	ldr	r3, [pc, #12]	; (800bc78 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	370c      	adds	r7, #12
 800bc70:	46bd      	mov	sp, r7
 800bc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc76:	4770      	bx	lr
 800bc78:	200000e0 	.word	0x200000e0

0800bc7c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b084      	sub	sp, #16
 800bc80:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc82:	4b0f      	ldr	r3, [pc, #60]	; (800bcc0 <Get_SerialNum+0x44>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc88:	4b0e      	ldr	r3, [pc, #56]	; (800bcc4 <Get_SerialNum+0x48>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc8e:	4b0e      	ldr	r3, [pc, #56]	; (800bcc8 <Get_SerialNum+0x4c>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4413      	add	r3, r2
 800bc9a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d009      	beq.n	800bcb6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bca2:	2208      	movs	r2, #8
 800bca4:	4909      	ldr	r1, [pc, #36]	; (800bccc <Get_SerialNum+0x50>)
 800bca6:	68f8      	ldr	r0, [r7, #12]
 800bca8:	f000 f814 	bl	800bcd4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bcac:	2204      	movs	r2, #4
 800bcae:	4908      	ldr	r1, [pc, #32]	; (800bcd0 <Get_SerialNum+0x54>)
 800bcb0:	68b8      	ldr	r0, [r7, #8]
 800bcb2:	f000 f80f 	bl	800bcd4 <IntToUnicode>
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3710      	adds	r7, #16
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	1ff0f420 	.word	0x1ff0f420
 800bcc4:	1ff0f424 	.word	0x1ff0f424
 800bcc8:	1ff0f428 	.word	0x1ff0f428
 800bccc:	200000f2 	.word	0x200000f2
 800bcd0:	20000102 	.word	0x20000102

0800bcd4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b087      	sub	sp, #28
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	60f8      	str	r0, [r7, #12]
 800bcdc:	60b9      	str	r1, [r7, #8]
 800bcde:	4613      	mov	r3, r2
 800bce0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bce2:	2300      	movs	r3, #0
 800bce4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bce6:	2300      	movs	r3, #0
 800bce8:	75fb      	strb	r3, [r7, #23]
 800bcea:	e027      	b.n	800bd3c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	0f1b      	lsrs	r3, r3, #28
 800bcf0:	2b09      	cmp	r3, #9
 800bcf2:	d80b      	bhi.n	800bd0c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	0f1b      	lsrs	r3, r3, #28
 800bcf8:	b2da      	uxtb	r2, r3
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
 800bcfc:	005b      	lsls	r3, r3, #1
 800bcfe:	4619      	mov	r1, r3
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	440b      	add	r3, r1
 800bd04:	3230      	adds	r2, #48	; 0x30
 800bd06:	b2d2      	uxtb	r2, r2
 800bd08:	701a      	strb	r2, [r3, #0]
 800bd0a:	e00a      	b.n	800bd22 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	0f1b      	lsrs	r3, r3, #28
 800bd10:	b2da      	uxtb	r2, r3
 800bd12:	7dfb      	ldrb	r3, [r7, #23]
 800bd14:	005b      	lsls	r3, r3, #1
 800bd16:	4619      	mov	r1, r3
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	440b      	add	r3, r1
 800bd1c:	3237      	adds	r2, #55	; 0x37
 800bd1e:	b2d2      	uxtb	r2, r2
 800bd20:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	011b      	lsls	r3, r3, #4
 800bd26:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bd28:	7dfb      	ldrb	r3, [r7, #23]
 800bd2a:	005b      	lsls	r3, r3, #1
 800bd2c:	3301      	adds	r3, #1
 800bd2e:	68ba      	ldr	r2, [r7, #8]
 800bd30:	4413      	add	r3, r2
 800bd32:	2200      	movs	r2, #0
 800bd34:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bd36:	7dfb      	ldrb	r3, [r7, #23]
 800bd38:	3301      	adds	r3, #1
 800bd3a:	75fb      	strb	r3, [r7, #23]
 800bd3c:	7dfa      	ldrb	r2, [r7, #23]
 800bd3e:	79fb      	ldrb	r3, [r7, #7]
 800bd40:	429a      	cmp	r2, r3
 800bd42:	d3d3      	bcc.n	800bcec <IntToUnicode+0x18>
  }
}
 800bd44:	bf00      	nop
 800bd46:	bf00      	nop
 800bd48:	371c      	adds	r7, #28
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd50:	4770      	bx	lr
	...

0800bd54 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b0aa      	sub	sp, #168	; 0xa8
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd5c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800bd60:	2200      	movs	r2, #0
 800bd62:	601a      	str	r2, [r3, #0]
 800bd64:	605a      	str	r2, [r3, #4]
 800bd66:	609a      	str	r2, [r3, #8]
 800bd68:	60da      	str	r2, [r3, #12]
 800bd6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800bd6c:	f107 0310 	add.w	r3, r7, #16
 800bd70:	2284      	movs	r2, #132	; 0x84
 800bd72:	2100      	movs	r1, #0
 800bd74:	4618      	mov	r0, r3
 800bd76:	f000 fc13 	bl	800c5a0 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4a26      	ldr	r2, [pc, #152]	; (800be18 <HAL_PCD_MspInit+0xc4>)
 800bd80:	4293      	cmp	r3, r2
 800bd82:	d145      	bne.n	800be10 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800bd84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bd88:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bd90:	f107 0310 	add.w	r3, r7, #16
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7f9 fb21 	bl	80053dc <HAL_RCCEx_PeriphCLKConfig>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d001      	beq.n	800bda4 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bda0:	f7f5 f834 	bl	8000e0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bda4:	4b1d      	ldr	r3, [pc, #116]	; (800be1c <HAL_PCD_MspInit+0xc8>)
 800bda6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda8:	4a1c      	ldr	r2, [pc, #112]	; (800be1c <HAL_PCD_MspInit+0xc8>)
 800bdaa:	f043 0302 	orr.w	r3, r3, #2
 800bdae:	6313      	str	r3, [r2, #48]	; 0x30
 800bdb0:	4b1a      	ldr	r3, [pc, #104]	; (800be1c <HAL_PCD_MspInit+0xc8>)
 800bdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	60fb      	str	r3, [r7, #12]
 800bdba:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800bdbc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bdc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdc4:	2302      	movs	r3, #2
 800bdc6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdca:	2300      	movs	r3, #0
 800bdcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bdd0:	2303      	movs	r3, #3
 800bdd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bdd6:	230c      	movs	r3, #12
 800bdd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bddc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800bde0:	4619      	mov	r1, r3
 800bde2:	480f      	ldr	r0, [pc, #60]	; (800be20 <HAL_PCD_MspInit+0xcc>)
 800bde4:	f7f7 f964 	bl	80030b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bde8:	4b0c      	ldr	r3, [pc, #48]	; (800be1c <HAL_PCD_MspInit+0xc8>)
 800bdea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdec:	4a0b      	ldr	r2, [pc, #44]	; (800be1c <HAL_PCD_MspInit+0xc8>)
 800bdee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bdf2:	6313      	str	r3, [r2, #48]	; 0x30
 800bdf4:	4b09      	ldr	r3, [pc, #36]	; (800be1c <HAL_PCD_MspInit+0xc8>)
 800bdf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdf8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bdfc:	60bb      	str	r3, [r7, #8]
 800bdfe:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800be00:	2200      	movs	r2, #0
 800be02:	2100      	movs	r1, #0
 800be04:	204d      	movs	r0, #77	; 0x4d
 800be06:	f7f7 f91c 	bl	8003042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800be0a:	204d      	movs	r0, #77	; 0x4d
 800be0c:	f7f7 f935 	bl	800307a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800be10:	bf00      	nop
 800be12:	37a8      	adds	r7, #168	; 0xa8
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	40040000 	.word	0x40040000
 800be1c:	40023800 	.word	0x40023800
 800be20:	40020400 	.word	0x40020400

0800be24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be24:	b580      	push	{r7, lr}
 800be26:	b082      	sub	sp, #8
 800be28:	af00      	add	r7, sp, #0
 800be2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800be38:	4619      	mov	r1, r3
 800be3a:	4610      	mov	r0, r2
 800be3c:	f7fe fb2f 	bl	800a49e <USBD_LL_SetupStage>
}
 800be40:	bf00      	nop
 800be42:	3708      	adds	r7, #8
 800be44:	46bd      	mov	sp, r7
 800be46:	bd80      	pop	{r7, pc}

0800be48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be48:	b580      	push	{r7, lr}
 800be4a:	b082      	sub	sp, #8
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	6078      	str	r0, [r7, #4]
 800be50:	460b      	mov	r3, r1
 800be52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800be5a:	78fa      	ldrb	r2, [r7, #3]
 800be5c:	6879      	ldr	r1, [r7, #4]
 800be5e:	4613      	mov	r3, r2
 800be60:	00db      	lsls	r3, r3, #3
 800be62:	4413      	add	r3, r2
 800be64:	009b      	lsls	r3, r3, #2
 800be66:	440b      	add	r3, r1
 800be68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800be6c:	681a      	ldr	r2, [r3, #0]
 800be6e:	78fb      	ldrb	r3, [r7, #3]
 800be70:	4619      	mov	r1, r3
 800be72:	f7fe fb69 	bl	800a548 <USBD_LL_DataOutStage>
}
 800be76:	bf00      	nop
 800be78:	3708      	adds	r7, #8
 800be7a:	46bd      	mov	sp, r7
 800be7c:	bd80      	pop	{r7, pc}

0800be7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be7e:	b580      	push	{r7, lr}
 800be80:	b082      	sub	sp, #8
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
 800be86:	460b      	mov	r3, r1
 800be88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800be90:	78fa      	ldrb	r2, [r7, #3]
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	4613      	mov	r3, r2
 800be96:	00db      	lsls	r3, r3, #3
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	440b      	add	r3, r1
 800be9e:	334c      	adds	r3, #76	; 0x4c
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	4619      	mov	r1, r3
 800bea6:	f7fe fc02 	bl	800a6ae <USBD_LL_DataInStage>
}
 800beaa:	bf00      	nop
 800beac:	3708      	adds	r7, #8
 800beae:	46bd      	mov	sp, r7
 800beb0:	bd80      	pop	{r7, pc}

0800beb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800beb2:	b580      	push	{r7, lr}
 800beb4:	b082      	sub	sp, #8
 800beb6:	af00      	add	r7, sp, #0
 800beb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bec0:	4618      	mov	r0, r3
 800bec2:	f7fe fd36 	bl	800a932 <USBD_LL_SOF>
}
 800bec6:	bf00      	nop
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800bed6:	2301      	movs	r3, #1
 800bed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68db      	ldr	r3, [r3, #12]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d102      	bne.n	800bee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800bee2:	2300      	movs	r3, #0
 800bee4:	73fb      	strb	r3, [r7, #15]
 800bee6:	e008      	b.n	800befa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	2b02      	cmp	r3, #2
 800beee:	d102      	bne.n	800bef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800bef0:	2301      	movs	r3, #1
 800bef2:	73fb      	strb	r3, [r7, #15]
 800bef4:	e001      	b.n	800befa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800bef6:	f7f4 ff89 	bl	8000e0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bf00:	7bfa      	ldrb	r2, [r7, #15]
 800bf02:	4611      	mov	r1, r2
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe fcd6 	bl	800a8b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bf10:	4618      	mov	r0, r3
 800bf12:	f7fe fc7e 	bl	800a812 <USBD_LL_Reset>
}
 800bf16:	bf00      	nop
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
	...

0800bf20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf20:	b580      	push	{r7, lr}
 800bf22:	b082      	sub	sp, #8
 800bf24:	af00      	add	r7, sp, #0
 800bf26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bf2e:	4618      	mov	r0, r3
 800bf30:	f7fe fcd1 	bl	800a8d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	6812      	ldr	r2, [r2, #0]
 800bf42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf46:	f043 0301 	orr.w	r3, r3, #1
 800bf4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6a1b      	ldr	r3, [r3, #32]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d005      	beq.n	800bf60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bf54:	4b04      	ldr	r3, [pc, #16]	; (800bf68 <HAL_PCD_SuspendCallback+0x48>)
 800bf56:	691b      	ldr	r3, [r3, #16]
 800bf58:	4a03      	ldr	r2, [pc, #12]	; (800bf68 <HAL_PCD_SuspendCallback+0x48>)
 800bf5a:	f043 0306 	orr.w	r3, r3, #6
 800bf5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bf60:	bf00      	nop
 800bf62:	3708      	adds	r7, #8
 800bf64:	46bd      	mov	sp, r7
 800bf66:	bd80      	pop	{r7, pc}
 800bf68:	e000ed00 	.word	0xe000ed00

0800bf6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b082      	sub	sp, #8
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fcc1 	bl	800a902 <USBD_LL_Resume>
}
 800bf80:	bf00      	nop
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
 800bf90:	460b      	mov	r3, r1
 800bf92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bf9a:	78fa      	ldrb	r2, [r7, #3]
 800bf9c:	4611      	mov	r1, r2
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f7fe fd19 	bl	800a9d6 <USBD_LL_IsoOUTIncomplete>
}
 800bfa4:	bf00      	nop
 800bfa6:	3708      	adds	r7, #8
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bfbe:	78fa      	ldrb	r2, [r7, #3]
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe fcd5 	bl	800a972 <USBD_LL_IsoINIncomplete>
}
 800bfc8:	bf00      	nop
 800bfca:	3708      	adds	r7, #8
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b082      	sub	sp, #8
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bfde:	4618      	mov	r0, r3
 800bfe0:	f7fe fd2b 	bl	800aa3a <USBD_LL_DevConnected>
}
 800bfe4:	bf00      	nop
 800bfe6:	3708      	adds	r7, #8
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b082      	sub	sp, #8
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800bffa:	4618      	mov	r0, r3
 800bffc:	f7fe fd28 	bl	800aa50 <USBD_LL_DevDisconnected>
}
 800c000:	bf00      	nop
 800c002:	3708      	adds	r7, #8
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	2b01      	cmp	r3, #1
 800c016:	d140      	bne.n	800c09a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c018:	4a22      	ldr	r2, [pc, #136]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a20      	ldr	r2, [pc, #128]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c024:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c028:	4b1e      	ldr	r3, [pc, #120]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c02a:	4a1f      	ldr	r2, [pc, #124]	; (800c0a8 <USBD_LL_Init+0xa0>)
 800c02c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800c02e:	4b1d      	ldr	r3, [pc, #116]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c030:	2208      	movs	r2, #8
 800c032:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c034:	4b1b      	ldr	r3, [pc, #108]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c036:	2202      	movs	r2, #2
 800c038:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c03a:	4b1a      	ldr	r3, [pc, #104]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c03c:	2200      	movs	r2, #0
 800c03e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c040:	4b18      	ldr	r3, [pc, #96]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c042:	2202      	movs	r2, #2
 800c044:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c046:	4b17      	ldr	r3, [pc, #92]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c048:	2200      	movs	r2, #0
 800c04a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c04c:	4b15      	ldr	r3, [pc, #84]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c04e:	2200      	movs	r2, #0
 800c050:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c052:	4b14      	ldr	r3, [pc, #80]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c054:	2200      	movs	r2, #0
 800c056:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c058:	4b12      	ldr	r3, [pc, #72]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c05a:	2200      	movs	r2, #0
 800c05c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c05e:	4b11      	ldr	r3, [pc, #68]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c060:	2200      	movs	r2, #0
 800c062:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c064:	4b0f      	ldr	r3, [pc, #60]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c066:	2200      	movs	r2, #0
 800c068:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c06a:	480e      	ldr	r0, [pc, #56]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c06c:	f7f7 f9e5 	bl	800343a <HAL_PCD_Init>
 800c070:	4603      	mov	r3, r0
 800c072:	2b00      	cmp	r3, #0
 800c074:	d001      	beq.n	800c07a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c076:	f7f4 fec9 	bl	8000e0c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c07a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c07e:	4809      	ldr	r0, [pc, #36]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c080:	f7f8 fc5f 	bl	8004942 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c084:	2280      	movs	r2, #128	; 0x80
 800c086:	2100      	movs	r1, #0
 800c088:	4806      	ldr	r0, [pc, #24]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c08a:	f7f8 fc13 	bl	80048b4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c08e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c092:	2101      	movs	r1, #1
 800c094:	4803      	ldr	r0, [pc, #12]	; (800c0a4 <USBD_LL_Init+0x9c>)
 800c096:	f7f8 fc0d 	bl	80048b4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3708      	adds	r7, #8
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	bd80      	pop	{r7, pc}
 800c0a4:	20001a6c 	.word	0x20001a6c
 800c0a8:	40040000 	.word	0x40040000

0800c0ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c0ac:	b580      	push	{r7, lr}
 800c0ae:	b084      	sub	sp, #16
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	f7f7 fadd 	bl	8003682 <HAL_PCD_Start>
 800c0c8:	4603      	mov	r3, r0
 800c0ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0cc:	7bfb      	ldrb	r3, [r7, #15]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f000 f97e 	bl	800c3d0 <USBD_Get_USB_Status>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0da:	4618      	mov	r0, r3
 800c0dc:	3710      	adds	r7, #16
 800c0de:	46bd      	mov	sp, r7
 800c0e0:	bd80      	pop	{r7, pc}

0800c0e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c0e2:	b580      	push	{r7, lr}
 800c0e4:	b084      	sub	sp, #16
 800c0e6:	af00      	add	r7, sp, #0
 800c0e8:	6078      	str	r0, [r7, #4]
 800c0ea:	4608      	mov	r0, r1
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	4603      	mov	r3, r0
 800c0f2:	70fb      	strb	r3, [r7, #3]
 800c0f4:	460b      	mov	r3, r1
 800c0f6:	70bb      	strb	r3, [r7, #2]
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c100:	2300      	movs	r3, #0
 800c102:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c10a:	78bb      	ldrb	r3, [r7, #2]
 800c10c:	883a      	ldrh	r2, [r7, #0]
 800c10e:	78f9      	ldrb	r1, [r7, #3]
 800c110:	f7f7 ffca 	bl	80040a8 <HAL_PCD_EP_Open>
 800c114:	4603      	mov	r3, r0
 800c116:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c118:	7bfb      	ldrb	r3, [r7, #15]
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f958 	bl	800c3d0 <USBD_Get_USB_Status>
 800c120:	4603      	mov	r3, r0
 800c122:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c124:	7bbb      	ldrb	r3, [r7, #14]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	460b      	mov	r3, r1
 800c138:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c148:	78fa      	ldrb	r2, [r7, #3]
 800c14a:	4611      	mov	r1, r2
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7f8 f813 	bl	8004178 <HAL_PCD_EP_Close>
 800c152:	4603      	mov	r3, r0
 800c154:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c156:	7bfb      	ldrb	r3, [r7, #15]
 800c158:	4618      	mov	r0, r3
 800c15a:	f000 f939 	bl	800c3d0 <USBD_Get_USB_Status>
 800c15e:	4603      	mov	r3, r0
 800c160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c162:	7bbb      	ldrb	r3, [r7, #14]
}
 800c164:	4618      	mov	r0, r3
 800c166:	3710      	adds	r7, #16
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	460b      	mov	r3, r1
 800c176:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c178:	2300      	movs	r3, #0
 800c17a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c17c:	2300      	movs	r3, #0
 800c17e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c186:	78fa      	ldrb	r2, [r7, #3]
 800c188:	4611      	mov	r1, r2
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7f8 f8eb 	bl	8004366 <HAL_PCD_EP_SetStall>
 800c190:	4603      	mov	r3, r0
 800c192:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f91a 	bl	800c3d0 <USBD_Get_USB_Status>
 800c19c:	4603      	mov	r3, r0
 800c19e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3710      	adds	r7, #16
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}

0800c1aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1aa:	b580      	push	{r7, lr}
 800c1ac:	b084      	sub	sp, #16
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1c4:	78fa      	ldrb	r2, [r7, #3]
 800c1c6:	4611      	mov	r1, r2
 800c1c8:	4618      	mov	r0, r3
 800c1ca:	f7f8 f930 	bl	800442e <HAL_PCD_EP_ClrStall>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1d2:	7bfb      	ldrb	r3, [r7, #15]
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f000 f8fb 	bl	800c3d0 <USBD_Get_USB_Status>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1de:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3710      	adds	r7, #16
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b085      	sub	sp, #20
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c1fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c200:	2b00      	cmp	r3, #0
 800c202:	da0b      	bge.n	800c21c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c204:	78fb      	ldrb	r3, [r7, #3]
 800c206:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c20a:	68f9      	ldr	r1, [r7, #12]
 800c20c:	4613      	mov	r3, r2
 800c20e:	00db      	lsls	r3, r3, #3
 800c210:	4413      	add	r3, r2
 800c212:	009b      	lsls	r3, r3, #2
 800c214:	440b      	add	r3, r1
 800c216:	333e      	adds	r3, #62	; 0x3e
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	e00b      	b.n	800c234 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c222:	68f9      	ldr	r1, [r7, #12]
 800c224:	4613      	mov	r3, r2
 800c226:	00db      	lsls	r3, r3, #3
 800c228:	4413      	add	r3, r2
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	440b      	add	r3, r1
 800c22e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c232:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c234:	4618      	mov	r0, r3
 800c236:	3714      	adds	r7, #20
 800c238:	46bd      	mov	sp, r7
 800c23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23e:	4770      	bx	lr

0800c240 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
 800c248:	460b      	mov	r3, r1
 800c24a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c24c:	2300      	movs	r3, #0
 800c24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c250:	2300      	movs	r3, #0
 800c252:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c25a:	78fa      	ldrb	r2, [r7, #3]
 800c25c:	4611      	mov	r1, r2
 800c25e:	4618      	mov	r0, r3
 800c260:	f7f7 fefd 	bl	800405e <HAL_PCD_SetAddress>
 800c264:	4603      	mov	r3, r0
 800c266:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f000 f8b0 	bl	800c3d0 <USBD_Get_USB_Status>
 800c270:	4603      	mov	r3, r0
 800c272:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c274:	7bbb      	ldrb	r3, [r7, #14]
}
 800c276:	4618      	mov	r0, r3
 800c278:	3710      	adds	r7, #16
 800c27a:	46bd      	mov	sp, r7
 800c27c:	bd80      	pop	{r7, pc}

0800c27e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b086      	sub	sp, #24
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	603b      	str	r3, [r7, #0]
 800c28a:	460b      	mov	r3, r1
 800c28c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28e:	2300      	movs	r3, #0
 800c290:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c29c:	7af9      	ldrb	r1, [r7, #11]
 800c29e:	683b      	ldr	r3, [r7, #0]
 800c2a0:	687a      	ldr	r2, [r7, #4]
 800c2a2:	f7f8 f816 	bl	80042d2 <HAL_PCD_EP_Transmit>
 800c2a6:	4603      	mov	r3, r0
 800c2a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2aa:	7dfb      	ldrb	r3, [r7, #23]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f000 f88f 	bl	800c3d0 <USBD_Get_USB_Status>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2b6:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3718      	adds	r7, #24
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	60f8      	str	r0, [r7, #12]
 800c2c8:	607a      	str	r2, [r7, #4]
 800c2ca:	603b      	str	r3, [r7, #0]
 800c2cc:	460b      	mov	r3, r1
 800c2ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c2de:	7af9      	ldrb	r1, [r7, #11]
 800c2e0:	683b      	ldr	r3, [r7, #0]
 800c2e2:	687a      	ldr	r2, [r7, #4]
 800c2e4:	f7f7 ff92 	bl	800420c <HAL_PCD_EP_Receive>
 800c2e8:	4603      	mov	r3, r0
 800c2ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2ec:	7dfb      	ldrb	r3, [r7, #23]
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f000 f86e 	bl	800c3d0 <USBD_Get_USB_Status>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c2f8:	7dbb      	ldrb	r3, [r7, #22]
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	460b      	mov	r3, r1
 800c30c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c314:	78fa      	ldrb	r2, [r7, #3]
 800c316:	4611      	mov	r1, r2
 800c318:	4618      	mov	r0, r3
 800c31a:	f7f7 ffc2 	bl	80042a2 <HAL_PCD_EP_GetRxCount>
 800c31e:	4603      	mov	r3, r0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3708      	adds	r7, #8
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
 800c330:	460b      	mov	r3, r1
 800c332:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c334:	78fb      	ldrb	r3, [r7, #3]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d002      	beq.n	800c340 <HAL_PCDEx_LPM_Callback+0x18>
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d01f      	beq.n	800c37e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c33e:	e03b      	b.n	800c3b8 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6a1b      	ldr	r3, [r3, #32]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d007      	beq.n	800c358 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c348:	f000 f83c 	bl	800c3c4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c34c:	4b1c      	ldr	r3, [pc, #112]	; (800c3c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c34e:	691b      	ldr	r3, [r3, #16]
 800c350:	4a1b      	ldr	r2, [pc, #108]	; (800c3c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c352:	f023 0306 	bic.w	r3, r3, #6
 800c356:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	687a      	ldr	r2, [r7, #4]
 800c364:	6812      	ldr	r2, [r2, #0]
 800c366:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c36a:	f023 0301 	bic.w	r3, r3, #1
 800c36e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c376:	4618      	mov	r0, r3
 800c378:	f7fe fac3 	bl	800a902 <USBD_LL_Resume>
    break;
 800c37c:	e01c      	b.n	800c3b8 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	6812      	ldr	r2, [r2, #0]
 800c38c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c390:	f043 0301 	orr.w	r3, r3, #1
 800c394:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7fe fa9a 	bl	800a8d6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a1b      	ldr	r3, [r3, #32]
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c3aa:	4b05      	ldr	r3, [pc, #20]	; (800c3c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c3ac:	691b      	ldr	r3, [r3, #16]
 800c3ae:	4a04      	ldr	r2, [pc, #16]	; (800c3c0 <HAL_PCDEx_LPM_Callback+0x98>)
 800c3b0:	f043 0306 	orr.w	r3, r3, #6
 800c3b4:	6113      	str	r3, [r2, #16]
    break;
 800c3b6:	bf00      	nop
}
 800c3b8:	bf00      	nop
 800c3ba:	3708      	adds	r7, #8
 800c3bc:	46bd      	mov	sp, r7
 800c3be:	bd80      	pop	{r7, pc}
 800c3c0:	e000ed00 	.word	0xe000ed00

0800c3c4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c3c8:	f7f4 f94a 	bl	8000660 <SystemClock_Config>
}
 800c3cc:	bf00      	nop
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b085      	sub	sp, #20
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d817      	bhi.n	800c414 <USBD_Get_USB_Status+0x44>
 800c3e4:	a201      	add	r2, pc, #4	; (adr r2, 800c3ec <USBD_Get_USB_Status+0x1c>)
 800c3e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ea:	bf00      	nop
 800c3ec:	0800c3fd 	.word	0x0800c3fd
 800c3f0:	0800c403 	.word	0x0800c403
 800c3f4:	0800c409 	.word	0x0800c409
 800c3f8:	0800c40f 	.word	0x0800c40f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	73fb      	strb	r3, [r7, #15]
    break;
 800c400:	e00b      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c402:	2303      	movs	r3, #3
 800c404:	73fb      	strb	r3, [r7, #15]
    break;
 800c406:	e008      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c408:	2301      	movs	r3, #1
 800c40a:	73fb      	strb	r3, [r7, #15]
    break;
 800c40c:	e005      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c40e:	2303      	movs	r3, #3
 800c410:	73fb      	strb	r3, [r7, #15]
    break;
 800c412:	e002      	b.n	800c41a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c414:	2303      	movs	r3, #3
 800c416:	73fb      	strb	r3, [r7, #15]
    break;
 800c418:	bf00      	nop
  }
  return usb_status;
 800c41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3714      	adds	r7, #20
 800c420:	46bd      	mov	sp, r7
 800c422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c426:	4770      	bx	lr

0800c428 <malloc>:
 800c428:	4b02      	ldr	r3, [pc, #8]	; (800c434 <malloc+0xc>)
 800c42a:	4601      	mov	r1, r0
 800c42c:	6818      	ldr	r0, [r3, #0]
 800c42e:	f000 b82b 	b.w	800c488 <_malloc_r>
 800c432:	bf00      	nop
 800c434:	20000158 	.word	0x20000158

0800c438 <free>:
 800c438:	4b02      	ldr	r3, [pc, #8]	; (800c444 <free+0xc>)
 800c43a:	4601      	mov	r1, r0
 800c43c:	6818      	ldr	r0, [r3, #0]
 800c43e:	f000 b8f3 	b.w	800c628 <_free_r>
 800c442:	bf00      	nop
 800c444:	20000158 	.word	0x20000158

0800c448 <sbrk_aligned>:
 800c448:	b570      	push	{r4, r5, r6, lr}
 800c44a:	4e0e      	ldr	r6, [pc, #56]	; (800c484 <sbrk_aligned+0x3c>)
 800c44c:	460c      	mov	r4, r1
 800c44e:	6831      	ldr	r1, [r6, #0]
 800c450:	4605      	mov	r5, r0
 800c452:	b911      	cbnz	r1, 800c45a <sbrk_aligned+0x12>
 800c454:	f000 f8ac 	bl	800c5b0 <_sbrk_r>
 800c458:	6030      	str	r0, [r6, #0]
 800c45a:	4621      	mov	r1, r4
 800c45c:	4628      	mov	r0, r5
 800c45e:	f000 f8a7 	bl	800c5b0 <_sbrk_r>
 800c462:	1c43      	adds	r3, r0, #1
 800c464:	d00a      	beq.n	800c47c <sbrk_aligned+0x34>
 800c466:	1cc4      	adds	r4, r0, #3
 800c468:	f024 0403 	bic.w	r4, r4, #3
 800c46c:	42a0      	cmp	r0, r4
 800c46e:	d007      	beq.n	800c480 <sbrk_aligned+0x38>
 800c470:	1a21      	subs	r1, r4, r0
 800c472:	4628      	mov	r0, r5
 800c474:	f000 f89c 	bl	800c5b0 <_sbrk_r>
 800c478:	3001      	adds	r0, #1
 800c47a:	d101      	bne.n	800c480 <sbrk_aligned+0x38>
 800c47c:	f04f 34ff 	mov.w	r4, #4294967295
 800c480:	4620      	mov	r0, r4
 800c482:	bd70      	pop	{r4, r5, r6, pc}
 800c484:	20001f78 	.word	0x20001f78

0800c488 <_malloc_r>:
 800c488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c48c:	1ccd      	adds	r5, r1, #3
 800c48e:	f025 0503 	bic.w	r5, r5, #3
 800c492:	3508      	adds	r5, #8
 800c494:	2d0c      	cmp	r5, #12
 800c496:	bf38      	it	cc
 800c498:	250c      	movcc	r5, #12
 800c49a:	2d00      	cmp	r5, #0
 800c49c:	4607      	mov	r7, r0
 800c49e:	db01      	blt.n	800c4a4 <_malloc_r+0x1c>
 800c4a0:	42a9      	cmp	r1, r5
 800c4a2:	d905      	bls.n	800c4b0 <_malloc_r+0x28>
 800c4a4:	230c      	movs	r3, #12
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c584 <_malloc_r+0xfc>
 800c4b4:	f000 f868 	bl	800c588 <__malloc_lock>
 800c4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800c4bc:	461c      	mov	r4, r3
 800c4be:	bb5c      	cbnz	r4, 800c518 <_malloc_r+0x90>
 800c4c0:	4629      	mov	r1, r5
 800c4c2:	4638      	mov	r0, r7
 800c4c4:	f7ff ffc0 	bl	800c448 <sbrk_aligned>
 800c4c8:	1c43      	adds	r3, r0, #1
 800c4ca:	4604      	mov	r4, r0
 800c4cc:	d155      	bne.n	800c57a <_malloc_r+0xf2>
 800c4ce:	f8d8 4000 	ldr.w	r4, [r8]
 800c4d2:	4626      	mov	r6, r4
 800c4d4:	2e00      	cmp	r6, #0
 800c4d6:	d145      	bne.n	800c564 <_malloc_r+0xdc>
 800c4d8:	2c00      	cmp	r4, #0
 800c4da:	d048      	beq.n	800c56e <_malloc_r+0xe6>
 800c4dc:	6823      	ldr	r3, [r4, #0]
 800c4de:	4631      	mov	r1, r6
 800c4e0:	4638      	mov	r0, r7
 800c4e2:	eb04 0903 	add.w	r9, r4, r3
 800c4e6:	f000 f863 	bl	800c5b0 <_sbrk_r>
 800c4ea:	4581      	cmp	r9, r0
 800c4ec:	d13f      	bne.n	800c56e <_malloc_r+0xe6>
 800c4ee:	6821      	ldr	r1, [r4, #0]
 800c4f0:	1a6d      	subs	r5, r5, r1
 800c4f2:	4629      	mov	r1, r5
 800c4f4:	4638      	mov	r0, r7
 800c4f6:	f7ff ffa7 	bl	800c448 <sbrk_aligned>
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	d037      	beq.n	800c56e <_malloc_r+0xe6>
 800c4fe:	6823      	ldr	r3, [r4, #0]
 800c500:	442b      	add	r3, r5
 800c502:	6023      	str	r3, [r4, #0]
 800c504:	f8d8 3000 	ldr.w	r3, [r8]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d038      	beq.n	800c57e <_malloc_r+0xf6>
 800c50c:	685a      	ldr	r2, [r3, #4]
 800c50e:	42a2      	cmp	r2, r4
 800c510:	d12b      	bne.n	800c56a <_malloc_r+0xe2>
 800c512:	2200      	movs	r2, #0
 800c514:	605a      	str	r2, [r3, #4]
 800c516:	e00f      	b.n	800c538 <_malloc_r+0xb0>
 800c518:	6822      	ldr	r2, [r4, #0]
 800c51a:	1b52      	subs	r2, r2, r5
 800c51c:	d41f      	bmi.n	800c55e <_malloc_r+0xd6>
 800c51e:	2a0b      	cmp	r2, #11
 800c520:	d917      	bls.n	800c552 <_malloc_r+0xca>
 800c522:	1961      	adds	r1, r4, r5
 800c524:	42a3      	cmp	r3, r4
 800c526:	6025      	str	r5, [r4, #0]
 800c528:	bf18      	it	ne
 800c52a:	6059      	strne	r1, [r3, #4]
 800c52c:	6863      	ldr	r3, [r4, #4]
 800c52e:	bf08      	it	eq
 800c530:	f8c8 1000 	streq.w	r1, [r8]
 800c534:	5162      	str	r2, [r4, r5]
 800c536:	604b      	str	r3, [r1, #4]
 800c538:	4638      	mov	r0, r7
 800c53a:	f104 060b 	add.w	r6, r4, #11
 800c53e:	f000 f829 	bl	800c594 <__malloc_unlock>
 800c542:	f026 0607 	bic.w	r6, r6, #7
 800c546:	1d23      	adds	r3, r4, #4
 800c548:	1af2      	subs	r2, r6, r3
 800c54a:	d0ae      	beq.n	800c4aa <_malloc_r+0x22>
 800c54c:	1b9b      	subs	r3, r3, r6
 800c54e:	50a3      	str	r3, [r4, r2]
 800c550:	e7ab      	b.n	800c4aa <_malloc_r+0x22>
 800c552:	42a3      	cmp	r3, r4
 800c554:	6862      	ldr	r2, [r4, #4]
 800c556:	d1dd      	bne.n	800c514 <_malloc_r+0x8c>
 800c558:	f8c8 2000 	str.w	r2, [r8]
 800c55c:	e7ec      	b.n	800c538 <_malloc_r+0xb0>
 800c55e:	4623      	mov	r3, r4
 800c560:	6864      	ldr	r4, [r4, #4]
 800c562:	e7ac      	b.n	800c4be <_malloc_r+0x36>
 800c564:	4634      	mov	r4, r6
 800c566:	6876      	ldr	r6, [r6, #4]
 800c568:	e7b4      	b.n	800c4d4 <_malloc_r+0x4c>
 800c56a:	4613      	mov	r3, r2
 800c56c:	e7cc      	b.n	800c508 <_malloc_r+0x80>
 800c56e:	230c      	movs	r3, #12
 800c570:	603b      	str	r3, [r7, #0]
 800c572:	4638      	mov	r0, r7
 800c574:	f000 f80e 	bl	800c594 <__malloc_unlock>
 800c578:	e797      	b.n	800c4aa <_malloc_r+0x22>
 800c57a:	6025      	str	r5, [r4, #0]
 800c57c:	e7dc      	b.n	800c538 <_malloc_r+0xb0>
 800c57e:	605b      	str	r3, [r3, #4]
 800c580:	deff      	udf	#255	; 0xff
 800c582:	bf00      	nop
 800c584:	20001f74 	.word	0x20001f74

0800c588 <__malloc_lock>:
 800c588:	4801      	ldr	r0, [pc, #4]	; (800c590 <__malloc_lock+0x8>)
 800c58a:	f000 b84b 	b.w	800c624 <__retarget_lock_acquire_recursive>
 800c58e:	bf00      	nop
 800c590:	200020b8 	.word	0x200020b8

0800c594 <__malloc_unlock>:
 800c594:	4801      	ldr	r0, [pc, #4]	; (800c59c <__malloc_unlock+0x8>)
 800c596:	f000 b846 	b.w	800c626 <__retarget_lock_release_recursive>
 800c59a:	bf00      	nop
 800c59c:	200020b8 	.word	0x200020b8

0800c5a0 <memset>:
 800c5a0:	4402      	add	r2, r0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	4293      	cmp	r3, r2
 800c5a6:	d100      	bne.n	800c5aa <memset+0xa>
 800c5a8:	4770      	bx	lr
 800c5aa:	f803 1b01 	strb.w	r1, [r3], #1
 800c5ae:	e7f9      	b.n	800c5a4 <memset+0x4>

0800c5b0 <_sbrk_r>:
 800c5b0:	b538      	push	{r3, r4, r5, lr}
 800c5b2:	4d06      	ldr	r5, [pc, #24]	; (800c5cc <_sbrk_r+0x1c>)
 800c5b4:	2300      	movs	r3, #0
 800c5b6:	4604      	mov	r4, r0
 800c5b8:	4608      	mov	r0, r1
 800c5ba:	602b      	str	r3, [r5, #0]
 800c5bc:	f7f4 ffcc 	bl	8001558 <_sbrk>
 800c5c0:	1c43      	adds	r3, r0, #1
 800c5c2:	d102      	bne.n	800c5ca <_sbrk_r+0x1a>
 800c5c4:	682b      	ldr	r3, [r5, #0]
 800c5c6:	b103      	cbz	r3, 800c5ca <_sbrk_r+0x1a>
 800c5c8:	6023      	str	r3, [r4, #0]
 800c5ca:	bd38      	pop	{r3, r4, r5, pc}
 800c5cc:	200020b4 	.word	0x200020b4

0800c5d0 <__errno>:
 800c5d0:	4b01      	ldr	r3, [pc, #4]	; (800c5d8 <__errno+0x8>)
 800c5d2:	6818      	ldr	r0, [r3, #0]
 800c5d4:	4770      	bx	lr
 800c5d6:	bf00      	nop
 800c5d8:	20000158 	.word	0x20000158

0800c5dc <__libc_init_array>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4d0d      	ldr	r5, [pc, #52]	; (800c614 <__libc_init_array+0x38>)
 800c5e0:	4c0d      	ldr	r4, [pc, #52]	; (800c618 <__libc_init_array+0x3c>)
 800c5e2:	1b64      	subs	r4, r4, r5
 800c5e4:	10a4      	asrs	r4, r4, #2
 800c5e6:	2600      	movs	r6, #0
 800c5e8:	42a6      	cmp	r6, r4
 800c5ea:	d109      	bne.n	800c600 <__libc_init_array+0x24>
 800c5ec:	4d0b      	ldr	r5, [pc, #44]	; (800c61c <__libc_init_array+0x40>)
 800c5ee:	4c0c      	ldr	r4, [pc, #48]	; (800c620 <__libc_init_array+0x44>)
 800c5f0:	f000 f866 	bl	800c6c0 <_init>
 800c5f4:	1b64      	subs	r4, r4, r5
 800c5f6:	10a4      	asrs	r4, r4, #2
 800c5f8:	2600      	movs	r6, #0
 800c5fa:	42a6      	cmp	r6, r4
 800c5fc:	d105      	bne.n	800c60a <__libc_init_array+0x2e>
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}
 800c600:	f855 3b04 	ldr.w	r3, [r5], #4
 800c604:	4798      	blx	r3
 800c606:	3601      	adds	r6, #1
 800c608:	e7ee      	b.n	800c5e8 <__libc_init_array+0xc>
 800c60a:	f855 3b04 	ldr.w	r3, [r5], #4
 800c60e:	4798      	blx	r3
 800c610:	3601      	adds	r6, #1
 800c612:	e7f2      	b.n	800c5fa <__libc_init_array+0x1e>
 800c614:	08019b7c 	.word	0x08019b7c
 800c618:	08019b7c 	.word	0x08019b7c
 800c61c:	08019b7c 	.word	0x08019b7c
 800c620:	08019b80 	.word	0x08019b80

0800c624 <__retarget_lock_acquire_recursive>:
 800c624:	4770      	bx	lr

0800c626 <__retarget_lock_release_recursive>:
 800c626:	4770      	bx	lr

0800c628 <_free_r>:
 800c628:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c62a:	2900      	cmp	r1, #0
 800c62c:	d044      	beq.n	800c6b8 <_free_r+0x90>
 800c62e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c632:	9001      	str	r0, [sp, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	f1a1 0404 	sub.w	r4, r1, #4
 800c63a:	bfb8      	it	lt
 800c63c:	18e4      	addlt	r4, r4, r3
 800c63e:	f7ff ffa3 	bl	800c588 <__malloc_lock>
 800c642:	4a1e      	ldr	r2, [pc, #120]	; (800c6bc <_free_r+0x94>)
 800c644:	9801      	ldr	r0, [sp, #4]
 800c646:	6813      	ldr	r3, [r2, #0]
 800c648:	b933      	cbnz	r3, 800c658 <_free_r+0x30>
 800c64a:	6063      	str	r3, [r4, #4]
 800c64c:	6014      	str	r4, [r2, #0]
 800c64e:	b003      	add	sp, #12
 800c650:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c654:	f7ff bf9e 	b.w	800c594 <__malloc_unlock>
 800c658:	42a3      	cmp	r3, r4
 800c65a:	d908      	bls.n	800c66e <_free_r+0x46>
 800c65c:	6825      	ldr	r5, [r4, #0]
 800c65e:	1961      	adds	r1, r4, r5
 800c660:	428b      	cmp	r3, r1
 800c662:	bf01      	itttt	eq
 800c664:	6819      	ldreq	r1, [r3, #0]
 800c666:	685b      	ldreq	r3, [r3, #4]
 800c668:	1949      	addeq	r1, r1, r5
 800c66a:	6021      	streq	r1, [r4, #0]
 800c66c:	e7ed      	b.n	800c64a <_free_r+0x22>
 800c66e:	461a      	mov	r2, r3
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	b10b      	cbz	r3, 800c678 <_free_r+0x50>
 800c674:	42a3      	cmp	r3, r4
 800c676:	d9fa      	bls.n	800c66e <_free_r+0x46>
 800c678:	6811      	ldr	r1, [r2, #0]
 800c67a:	1855      	adds	r5, r2, r1
 800c67c:	42a5      	cmp	r5, r4
 800c67e:	d10b      	bne.n	800c698 <_free_r+0x70>
 800c680:	6824      	ldr	r4, [r4, #0]
 800c682:	4421      	add	r1, r4
 800c684:	1854      	adds	r4, r2, r1
 800c686:	42a3      	cmp	r3, r4
 800c688:	6011      	str	r1, [r2, #0]
 800c68a:	d1e0      	bne.n	800c64e <_free_r+0x26>
 800c68c:	681c      	ldr	r4, [r3, #0]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	6053      	str	r3, [r2, #4]
 800c692:	440c      	add	r4, r1
 800c694:	6014      	str	r4, [r2, #0]
 800c696:	e7da      	b.n	800c64e <_free_r+0x26>
 800c698:	d902      	bls.n	800c6a0 <_free_r+0x78>
 800c69a:	230c      	movs	r3, #12
 800c69c:	6003      	str	r3, [r0, #0]
 800c69e:	e7d6      	b.n	800c64e <_free_r+0x26>
 800c6a0:	6825      	ldr	r5, [r4, #0]
 800c6a2:	1961      	adds	r1, r4, r5
 800c6a4:	428b      	cmp	r3, r1
 800c6a6:	bf04      	itt	eq
 800c6a8:	6819      	ldreq	r1, [r3, #0]
 800c6aa:	685b      	ldreq	r3, [r3, #4]
 800c6ac:	6063      	str	r3, [r4, #4]
 800c6ae:	bf04      	itt	eq
 800c6b0:	1949      	addeq	r1, r1, r5
 800c6b2:	6021      	streq	r1, [r4, #0]
 800c6b4:	6054      	str	r4, [r2, #4]
 800c6b6:	e7ca      	b.n	800c64e <_free_r+0x26>
 800c6b8:	b003      	add	sp, #12
 800c6ba:	bd30      	pop	{r4, r5, pc}
 800c6bc:	20001f74 	.word	0x20001f74

0800c6c0 <_init>:
 800c6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6c2:	bf00      	nop
 800c6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6c6:	bc08      	pop	{r3}
 800c6c8:	469e      	mov	lr, r3
 800c6ca:	4770      	bx	lr

0800c6cc <_fini>:
 800c6cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ce:	bf00      	nop
 800c6d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6d2:	bc08      	pop	{r3}
 800c6d4:	469e      	mov	lr, r3
 800c6d6:	4770      	bx	lr
