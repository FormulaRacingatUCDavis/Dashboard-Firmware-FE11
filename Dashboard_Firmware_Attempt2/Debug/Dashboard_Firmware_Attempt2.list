
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009464  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f61c  08009634  08009634  00019634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08018c50  08018c50  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  08018c50  08018c50  00028c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08018c58  08018c58  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08018c58  08018c58  00028c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08018c5c  08018c5c  00028c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  08018c60  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000740  200000ec  08018d4c  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  08018d4c  0003082c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bcd0  00000000  00000000  0003015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000386f  00000000  00000000  0004be2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001968  00000000  00000000  0004f6a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013aa  00000000  00000000  00051008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b30f  00000000  00000000  000523b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e34d  00000000  00000000  0007d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00104869  00000000  00000000  0009ba0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007240  00000000  00000000  001a0278  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001a74b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800961c 	.word	0x0800961c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f0 	.word	0x200000f0
 800020c:	0800961c 	.word	0x0800961c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_uldivmod>:
 8000aec:	b953      	cbnz	r3, 8000b04 <__aeabi_uldivmod+0x18>
 8000aee:	b94a      	cbnz	r2, 8000b04 <__aeabi_uldivmod+0x18>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	bf08      	it	eq
 8000af4:	2800      	cmpeq	r0, #0
 8000af6:	bf1c      	itt	ne
 8000af8:	f04f 31ff 	movne.w	r1, #4294967295
 8000afc:	f04f 30ff 	movne.w	r0, #4294967295
 8000b00:	f000 b970 	b.w	8000de4 <__aeabi_idiv0>
 8000b04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b0c:	f000 f806 	bl	8000b1c <__udivmoddi4>
 8000b10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b18:	b004      	add	sp, #16
 8000b1a:	4770      	bx	lr

08000b1c <__udivmoddi4>:
 8000b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b20:	9e08      	ldr	r6, [sp, #32]
 8000b22:	460d      	mov	r5, r1
 8000b24:	4604      	mov	r4, r0
 8000b26:	460f      	mov	r7, r1
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d14a      	bne.n	8000bc2 <__udivmoddi4+0xa6>
 8000b2c:	428a      	cmp	r2, r1
 8000b2e:	4694      	mov	ip, r2
 8000b30:	d965      	bls.n	8000bfe <__udivmoddi4+0xe2>
 8000b32:	fab2 f382 	clz	r3, r2
 8000b36:	b143      	cbz	r3, 8000b4a <__udivmoddi4+0x2e>
 8000b38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b3c:	f1c3 0220 	rsb	r2, r3, #32
 8000b40:	409f      	lsls	r7, r3
 8000b42:	fa20 f202 	lsr.w	r2, r0, r2
 8000b46:	4317      	orrs	r7, r2
 8000b48:	409c      	lsls	r4, r3
 8000b4a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b4e:	fa1f f58c 	uxth.w	r5, ip
 8000b52:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b56:	0c22      	lsrs	r2, r4, #16
 8000b58:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b5c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b60:	fb01 f005 	mul.w	r0, r1, r5
 8000b64:	4290      	cmp	r0, r2
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x62>
 8000b68:	eb1c 0202 	adds.w	r2, ip, r2
 8000b6c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b70:	f080 811c 	bcs.w	8000dac <__udivmoddi4+0x290>
 8000b74:	4290      	cmp	r0, r2
 8000b76:	f240 8119 	bls.w	8000dac <__udivmoddi4+0x290>
 8000b7a:	3902      	subs	r1, #2
 8000b7c:	4462      	add	r2, ip
 8000b7e:	1a12      	subs	r2, r2, r0
 8000b80:	b2a4      	uxth	r4, r4
 8000b82:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b86:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b8a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b8e:	fb00 f505 	mul.w	r5, r0, r5
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	d90a      	bls.n	8000bac <__udivmoddi4+0x90>
 8000b96:	eb1c 0404 	adds.w	r4, ip, r4
 8000b9a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x294>
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x294>
 8000ba8:	4464      	add	r4, ip
 8000baa:	3802      	subs	r0, #2
 8000bac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bb0:	1b64      	subs	r4, r4, r5
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	b11e      	cbz	r6, 8000bbe <__udivmoddi4+0xa2>
 8000bb6:	40dc      	lsrs	r4, r3
 8000bb8:	2300      	movs	r3, #0
 8000bba:	e9c6 4300 	strd	r4, r3, [r6]
 8000bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d908      	bls.n	8000bd8 <__udivmoddi4+0xbc>
 8000bc6:	2e00      	cmp	r6, #0
 8000bc8:	f000 80ed 	beq.w	8000da6 <__udivmoddi4+0x28a>
 8000bcc:	2100      	movs	r1, #0
 8000bce:	e9c6 0500 	strd	r0, r5, [r6]
 8000bd2:	4608      	mov	r0, r1
 8000bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd8:	fab3 f183 	clz	r1, r3
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d149      	bne.n	8000c74 <__udivmoddi4+0x158>
 8000be0:	42ab      	cmp	r3, r5
 8000be2:	d302      	bcc.n	8000bea <__udivmoddi4+0xce>
 8000be4:	4282      	cmp	r2, r0
 8000be6:	f200 80f8 	bhi.w	8000dda <__udivmoddi4+0x2be>
 8000bea:	1a84      	subs	r4, r0, r2
 8000bec:	eb65 0203 	sbc.w	r2, r5, r3
 8000bf0:	2001      	movs	r0, #1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	2e00      	cmp	r6, #0
 8000bf6:	d0e2      	beq.n	8000bbe <__udivmoddi4+0xa2>
 8000bf8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bfc:	e7df      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000bfe:	b902      	cbnz	r2, 8000c02 <__udivmoddi4+0xe6>
 8000c00:	deff      	udf	#255	; 0xff
 8000c02:	fab2 f382 	clz	r3, r2
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f040 8090 	bne.w	8000d2c <__udivmoddi4+0x210>
 8000c0c:	1a8a      	subs	r2, r1, r2
 8000c0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c12:	fa1f fe8c 	uxth.w	lr, ip
 8000c16:	2101      	movs	r1, #1
 8000c18:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c1c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c20:	0c22      	lsrs	r2, r4, #16
 8000c22:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c26:	fb0e f005 	mul.w	r0, lr, r5
 8000c2a:	4290      	cmp	r0, r2
 8000c2c:	d908      	bls.n	8000c40 <__udivmoddi4+0x124>
 8000c2e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c32:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c36:	d202      	bcs.n	8000c3e <__udivmoddi4+0x122>
 8000c38:	4290      	cmp	r0, r2
 8000c3a:	f200 80cb 	bhi.w	8000dd4 <__udivmoddi4+0x2b8>
 8000c3e:	4645      	mov	r5, r8
 8000c40:	1a12      	subs	r2, r2, r0
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c48:	fb07 2210 	mls	r2, r7, r0, r2
 8000c4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c50:	fb0e fe00 	mul.w	lr, lr, r0
 8000c54:	45a6      	cmp	lr, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x14e>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c60:	d202      	bcs.n	8000c68 <__udivmoddi4+0x14c>
 8000c62:	45a6      	cmp	lr, r4
 8000c64:	f200 80bb 	bhi.w	8000dde <__udivmoddi4+0x2c2>
 8000c68:	4610      	mov	r0, r2
 8000c6a:	eba4 040e 	sub.w	r4, r4, lr
 8000c6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c72:	e79f      	b.n	8000bb4 <__udivmoddi4+0x98>
 8000c74:	f1c1 0720 	rsb	r7, r1, #32
 8000c78:	408b      	lsls	r3, r1
 8000c7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c82:	fa05 f401 	lsl.w	r4, r5, r1
 8000c86:	fa20 f307 	lsr.w	r3, r0, r7
 8000c8a:	40fd      	lsrs	r5, r7
 8000c8c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c90:	4323      	orrs	r3, r4
 8000c92:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c96:	fa1f fe8c 	uxth.w	lr, ip
 8000c9a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c9e:	0c1c      	lsrs	r4, r3, #16
 8000ca0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ca8:	42a5      	cmp	r5, r4
 8000caa:	fa02 f201 	lsl.w	r2, r2, r1
 8000cae:	fa00 f001 	lsl.w	r0, r0, r1
 8000cb2:	d90b      	bls.n	8000ccc <__udivmoddi4+0x1b0>
 8000cb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cbc:	f080 8088 	bcs.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc0:	42a5      	cmp	r5, r4
 8000cc2:	f240 8085 	bls.w	8000dd0 <__udivmoddi4+0x2b4>
 8000cc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cca:	4464      	add	r4, ip
 8000ccc:	1b64      	subs	r4, r4, r5
 8000cce:	b29d      	uxth	r5, r3
 8000cd0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cd4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cdc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ce0:	45a6      	cmp	lr, r4
 8000ce2:	d908      	bls.n	8000cf6 <__udivmoddi4+0x1da>
 8000ce4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ce8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cec:	d26c      	bcs.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cee:	45a6      	cmp	lr, r4
 8000cf0:	d96a      	bls.n	8000dc8 <__udivmoddi4+0x2ac>
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	4464      	add	r4, ip
 8000cf6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cfa:	fba3 9502 	umull	r9, r5, r3, r2
 8000cfe:	eba4 040e 	sub.w	r4, r4, lr
 8000d02:	42ac      	cmp	r4, r5
 8000d04:	46c8      	mov	r8, r9
 8000d06:	46ae      	mov	lr, r5
 8000d08:	d356      	bcc.n	8000db8 <__udivmoddi4+0x29c>
 8000d0a:	d053      	beq.n	8000db4 <__udivmoddi4+0x298>
 8000d0c:	b156      	cbz	r6, 8000d24 <__udivmoddi4+0x208>
 8000d0e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d12:	eb64 040e 	sbc.w	r4, r4, lr
 8000d16:	fa04 f707 	lsl.w	r7, r4, r7
 8000d1a:	40ca      	lsrs	r2, r1
 8000d1c:	40cc      	lsrs	r4, r1
 8000d1e:	4317      	orrs	r7, r2
 8000d20:	e9c6 7400 	strd	r7, r4, [r6]
 8000d24:	4618      	mov	r0, r3
 8000d26:	2100      	movs	r1, #0
 8000d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2c:	f1c3 0120 	rsb	r1, r3, #32
 8000d30:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d34:	fa20 f201 	lsr.w	r2, r0, r1
 8000d38:	fa25 f101 	lsr.w	r1, r5, r1
 8000d3c:	409d      	lsls	r5, r3
 8000d3e:	432a      	orrs	r2, r5
 8000d40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d44:	fa1f fe8c 	uxth.w	lr, ip
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d50:	0c11      	lsrs	r1, r2, #16
 8000d52:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d56:	fb00 f50e 	mul.w	r5, r0, lr
 8000d5a:	428d      	cmp	r5, r1
 8000d5c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x258>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d6a:	d22f      	bcs.n	8000dcc <__udivmoddi4+0x2b0>
 8000d6c:	428d      	cmp	r5, r1
 8000d6e:	d92d      	bls.n	8000dcc <__udivmoddi4+0x2b0>
 8000d70:	3802      	subs	r0, #2
 8000d72:	4461      	add	r1, ip
 8000d74:	1b49      	subs	r1, r1, r5
 8000d76:	b292      	uxth	r2, r2
 8000d78:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d7c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d84:	fb05 f10e 	mul.w	r1, r5, lr
 8000d88:	4291      	cmp	r1, r2
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x282>
 8000d8c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d90:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d94:	d216      	bcs.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d96:	4291      	cmp	r1, r2
 8000d98:	d914      	bls.n	8000dc4 <__udivmoddi4+0x2a8>
 8000d9a:	3d02      	subs	r5, #2
 8000d9c:	4462      	add	r2, ip
 8000d9e:	1a52      	subs	r2, r2, r1
 8000da0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000da4:	e738      	b.n	8000c18 <__udivmoddi4+0xfc>
 8000da6:	4631      	mov	r1, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e708      	b.n	8000bbe <__udivmoddi4+0xa2>
 8000dac:	4639      	mov	r1, r7
 8000dae:	e6e6      	b.n	8000b7e <__udivmoddi4+0x62>
 8000db0:	4610      	mov	r0, r2
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x90>
 8000db4:	4548      	cmp	r0, r9
 8000db6:	d2a9      	bcs.n	8000d0c <__udivmoddi4+0x1f0>
 8000db8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dbc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	e7a3      	b.n	8000d0c <__udivmoddi4+0x1f0>
 8000dc4:	4645      	mov	r5, r8
 8000dc6:	e7ea      	b.n	8000d9e <__udivmoddi4+0x282>
 8000dc8:	462b      	mov	r3, r5
 8000dca:	e794      	b.n	8000cf6 <__udivmoddi4+0x1da>
 8000dcc:	4640      	mov	r0, r8
 8000dce:	e7d1      	b.n	8000d74 <__udivmoddi4+0x258>
 8000dd0:	46d0      	mov	r8, sl
 8000dd2:	e77b      	b.n	8000ccc <__udivmoddi4+0x1b0>
 8000dd4:	3d02      	subs	r5, #2
 8000dd6:	4462      	add	r2, ip
 8000dd8:	e732      	b.n	8000c40 <__udivmoddi4+0x124>
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e70a      	b.n	8000bf4 <__udivmoddi4+0xd8>
 8000dde:	4464      	add	r4, ip
 8000de0:	3802      	subs	r0, #2
 8000de2:	e742      	b.n	8000c6a <__udivmoddi4+0x14e>

08000de4 <__aeabi_idiv0>:
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop

08000de8 <HAL_CAN_RxFifo0MsgPendingCallback>:

CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de8:	b590      	push	{r4, r7, lr}
 8000dea:	b087      	sub	sp, #28
 8000dec:	af04      	add	r7, sp, #16
 8000dee:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000df2:	4a0b      	ldr	r2, [pc, #44]	; (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000df4:	2100      	movs	r1, #0
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f004 fc24 	bl	8005644 <HAL_CAN_GetRxMessage>
	save_can_rx_data(RxHeader, RxData);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000dfe:	4a07      	ldr	r2, [pc, #28]	; (8000e1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e00:	9203      	str	r2, [sp, #12]
 8000e02:	466c      	mov	r4, sp
 8000e04:	f103 0210 	add.w	r2, r3, #16
 8000e08:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e10:	f000 f808 	bl	8000e24 <save_can_rx_data>
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd90      	pop	{r4, r7, pc}
 8000e1c:	20000138 	.word	0x20000138
 8000e20:	2000011c 	.word	0x2000011c

08000e24 <save_can_rx_data>:


/************ CAN RX ************/

void save_can_rx_data(CAN_RxHeaderTypeDef RxHeader, uint8_t RxData[]) {
 8000e24:	b084      	sub	sp, #16
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	f107 0c10 	add.w	ip, r7, #16
 8000e30:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // gets message and updates values
	switch (RxHeader.StdId) {
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	f240 4273 	movw	r2, #1139	; 0x473
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	f200 80d5 	bhi.w	8000fea <save_can_rx_data+0x1c6>
 8000e40:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000e44:	d218      	bcs.n	8000e78 <save_can_rx_data+0x54>
 8000e46:	f240 3287 	movw	r2, #903	; 0x387
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d066      	beq.n	8000f1c <save_can_rx_data+0xf8>
 8000e4e:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 8000e52:	f080 80ca 	bcs.w	8000fea <save_can_rx_data+0x1c6>
 8000e56:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000e5a:	d01d      	beq.n	8000e98 <save_can_rx_data+0x74>
 8000e5c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000e60:	f200 80c3 	bhi.w	8000fea <save_can_rx_data+0x1c6>
 8000e64:	2bab      	cmp	r3, #171	; 0xab
 8000e66:	d05e      	beq.n	8000f26 <save_can_rx_data+0x102>
 8000e68:	2bab      	cmp	r3, #171	; 0xab
 8000e6a:	f200 80be 	bhi.w	8000fea <save_can_rx_data+0x1c6>
 8000e6e:	2ba7      	cmp	r3, #167	; 0xa7
 8000e70:	d030      	beq.n	8000ed4 <save_can_rx_data+0xb0>
 8000e72:	2baa      	cmp	r3, #170	; 0xaa
 8000e74:	d041      	beq.n	8000efa <save_can_rx_data+0xd6>
			back_left_wheel_speed = (RxData[0] << 8) ;
			back_left_wheel_speed += RxData[1];
			break;
		default:
			// no valid input received
			break;
 8000e76:	e0b8      	b.n	8000fea <save_can_rx_data+0x1c6>
	switch (RxHeader.StdId) {
 8000e78:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	f200 80b4 	bhi.w	8000fea <save_can_rx_data+0x1c6>
 8000e82:	a201      	add	r2, pc, #4	; (adr r2, 8000e88 <save_can_rx_data+0x64>)
 8000e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e88:	08000f79 	.word	0x08000f79
 8000e8c:	08000f53 	.word	0x08000f53
 8000e90:	08000fc5 	.word	0x08000fc5
 8000e94:	08000f9f 	.word	0x08000f9f
			PACK_TEMP = RxData[0];
 8000e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	4b57      	ldr	r3, [pc, #348]	; (8000ffc <save_can_rx_data+0x1d8>)
 8000e9e:	701a      	strb	r2, [r3, #0]
			soc = RxData[1];
 8000ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea2:	785a      	ldrb	r2, [r3, #1]
 8000ea4:	4b56      	ldr	r3, [pc, #344]	; (8001000 <save_can_rx_data+0x1dc>)
 8000ea6:	701a      	strb	r2, [r3, #0]
			bms_status = (RxData[2] << 8);
 8000ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eaa:	3302      	adds	r3, #2
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	021b      	lsls	r3, r3, #8
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	4b53      	ldr	r3, [pc, #332]	; (8001004 <save_can_rx_data+0x1e0>)
 8000eb6:	801a      	strh	r2, [r3, #0]
			bms_status += RxData[3];
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	3303      	adds	r3, #3
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b50      	ldr	r3, [pc, #320]	; (8001004 <save_can_rx_data+0x1e0>)
 8000ec2:	881b      	ldrh	r3, [r3, #0]
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29a      	uxth	r2, r3
 8000eca:	4b4e      	ldr	r3, [pc, #312]	; (8001004 <save_can_rx_data+0x1e0>)
 8000ecc:	801a      	strh	r2, [r3, #0]
			temp_attenuate();
 8000ece:	f001 fe0d 	bl	8002aec <temp_attenuate>
			break;
 8000ed2:	e08b      	b.n	8000fec <save_can_rx_data+0x1c8>
			capacitor_volt = (RxData[0] << 8); // upper bits
 8000ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	021b      	lsls	r3, r3, #8
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b4a      	ldr	r3, [pc, #296]	; (8001008 <save_can_rx_data+0x1e4>)
 8000ee0:	801a      	strh	r2, [r3, #0]
			capacitor_volt += RxData[1]; // lower bits
 8000ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee4:	3301      	adds	r3, #1
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	4b47      	ldr	r3, [pc, #284]	; (8001008 <save_can_rx_data+0x1e4>)
 8000eec:	881b      	ldrh	r3, [r3, #0]
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	4b44      	ldr	r3, [pc, #272]	; (8001008 <save_can_rx_data+0x1e4>)
 8000ef6:	801a      	strh	r2, [r3, #0]
			break;
 8000ef8:	e078      	b.n	8000fec <save_can_rx_data+0x1c8>
			mc_lockout = RxData[6] & 0b1000000;
 8000efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000efc:	3306      	adds	r3, #6
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	4b41      	ldr	r3, [pc, #260]	; (800100c <save_can_rx_data+0x1e8>)
 8000f08:	701a      	strb	r2, [r3, #0]
			mc_enabled = RxData[6] & 0b1;
 8000f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f0c:	3306      	adds	r3, #6
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <save_can_rx_data+0x1ec>)
 8000f18:	701a      	strb	r2, [r3, #0]
			break;
 8000f1a:	e067      	b.n	8000fec <save_can_rx_data+0x1c8>
			shutdown_flags = RxData[2];
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	789a      	ldrb	r2, [r3, #2]
 8000f20:	4b3c      	ldr	r3, [pc, #240]	; (8001014 <save_can_rx_data+0x1f0>)
 8000f22:	701a      	strb	r2, [r3, #0]
			break;
 8000f24:	e062      	b.n	8000fec <save_can_rx_data+0x1c8>
			for (uint8_t i = 0; i < 8; i++) {
 8000f26:	2300      	movs	r3, #0
 8000f28:	71fb      	strb	r3, [r7, #7]
 8000f2a:	e00f      	b.n	8000f4c <save_can_rx_data+0x128>
				if (RxData[i] > 0) {
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f30:	4413      	add	r3, r2
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <save_can_rx_data+0x11c>
					mc_fault = 1;
 8000f38:	4b37      	ldr	r3, [pc, #220]	; (8001018 <save_can_rx_data+0x1f4>)
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	701a      	strb	r2, [r3, #0]
					break;
 8000f3e:	e008      	b.n	8000f52 <save_can_rx_data+0x12e>
					mc_fault = 0;
 8000f40:	4b35      	ldr	r3, [pc, #212]	; (8001018 <save_can_rx_data+0x1f4>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 8000f46:	79fb      	ldrb	r3, [r7, #7]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	71fb      	strb	r3, [r7, #7]
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	2b07      	cmp	r3, #7
 8000f50:	d9ec      	bls.n	8000f2c <save_can_rx_data+0x108>
			front_right_wheel_speed = (RxData[0] << 8) ;
 8000f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b29b      	uxth	r3, r3
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	b29a      	uxth	r2, r3
 8000f5c:	4b2f      	ldr	r3, [pc, #188]	; (800101c <save_can_rx_data+0x1f8>)
 8000f5e:	801a      	strh	r2, [r3, #0]
			front_right_wheel_speed += RxData[1];
 8000f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f62:	3301      	adds	r3, #1
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b29a      	uxth	r2, r3
 8000f68:	4b2c      	ldr	r3, [pc, #176]	; (800101c <save_can_rx_data+0x1f8>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4413      	add	r3, r2
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4b2a      	ldr	r3, [pc, #168]	; (800101c <save_can_rx_data+0x1f8>)
 8000f74:	801a      	strh	r2, [r3, #0]
			break;
 8000f76:	e039      	b.n	8000fec <save_can_rx_data+0x1c8>
			front_left_wheel_speed = (RxData[0] << 8) ;
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	b29a      	uxth	r2, r3
 8000f82:	4b27      	ldr	r3, [pc, #156]	; (8001020 <save_can_rx_data+0x1fc>)
 8000f84:	801a      	strh	r2, [r3, #0]
			front_left_wheel_speed += RxData[1];
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	3301      	adds	r3, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b29a      	uxth	r2, r3
 8000f8e:	4b24      	ldr	r3, [pc, #144]	; (8001020 <save_can_rx_data+0x1fc>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	4413      	add	r3, r2
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <save_can_rx_data+0x1fc>)
 8000f9a:	801a      	strh	r2, [r3, #0]
			break;
 8000f9c:	e026      	b.n	8000fec <save_can_rx_data+0x1c8>
			back_right_wheel_speed = (RxData[0] << 8) ;
 8000f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa0:	781b      	ldrb	r3, [r3, #0]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	4b1e      	ldr	r3, [pc, #120]	; (8001024 <save_can_rx_data+0x200>)
 8000faa:	801a      	strh	r2, [r3, #0]
			back_right_wheel_speed += RxData[1];
 8000fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fae:	3301      	adds	r3, #1
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <save_can_rx_data+0x200>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	4413      	add	r3, r2
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	4b19      	ldr	r3, [pc, #100]	; (8001024 <save_can_rx_data+0x200>)
 8000fc0:	801a      	strh	r2, [r3, #0]
			break;
 8000fc2:	e013      	b.n	8000fec <save_can_rx_data+0x1c8>
			back_left_wheel_speed = (RxData[0] << 8) ;
 8000fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b29b      	uxth	r3, r3
 8000fca:	021b      	lsls	r3, r3, #8
 8000fcc:	b29a      	uxth	r2, r3
 8000fce:	4b16      	ldr	r3, [pc, #88]	; (8001028 <save_can_rx_data+0x204>)
 8000fd0:	801a      	strh	r2, [r3, #0]
			back_left_wheel_speed += RxData[1];
 8000fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	b29a      	uxth	r2, r3
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <save_can_rx_data+0x204>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	b29b      	uxth	r3, r3
 8000fe0:	4413      	add	r3, r2
 8000fe2:	b29a      	uxth	r2, r3
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <save_can_rx_data+0x204>)
 8000fe6:	801a      	strh	r2, [r3, #0]
			break;
 8000fe8:	e000      	b.n	8000fec <save_can_rx_data+0x1c8>
			break;
 8000fea:	bf00      	nop
	}

}
 8000fec:	bf00      	nop
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ff6:	b004      	add	sp, #16
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2000010d 	.word	0x2000010d
 8001000:	2000010f 	.word	0x2000010f
 8001004:	20000110 	.word	0x20000110
 8001008:	2000010a 	.word	0x2000010a
 800100c:	20000108 	.word	0x20000108
 8001010:	20000109 	.word	0x20000109
 8001014:	20000000 	.word	0x20000000
 8001018:	2000010e 	.word	0x2000010e
 800101c:	20000112 	.word	0x20000112
 8001020:	20000114 	.word	0x20000114
 8001024:	20000116 	.word	0x20000116
 8001028:	20000118 	.word	0x20000118

0800102c <can_tx_vcu_state>:

CAN_TxHeaderTypeDef   TxHeader;
uint32_t              TxMailbox;

//  transmit state
void can_tx_vcu_state(CAN_HandleTypeDef *hcan){
 800102c:	b580      	push	{r7, lr}
 800102e:	b084      	sub	sp, #16
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <can_tx_vcu_state+0x70>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = VEHICLE_STATE;
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <can_tx_vcu_state+0x70>)
 800103c:	f240 7266 	movw	r2, #1894	; 0x766
 8001040:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001042:	4b16      	ldr	r3, [pc, #88]	; (800109c <can_tx_vcu_state+0x70>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 6;
 8001048:	4b14      	ldr	r3, [pc, #80]	; (800109c <can_tx_vcu_state+0x70>)
 800104a:	2206      	movs	r2, #6
 800104c:	611a      	str	r2, [r3, #16]
	uint8_t data_tx_state[6] = {
 800104e:	2300      	movs	r3, #0
 8001050:	723b      	strb	r3, [r7, #8]
        0,
        hv_requested(),
 8001052:	f000 fd49 	bl	8001ae8 <hv_requested>
 8001056:	4603      	mov	r3, r0
	uint8_t data_tx_state[6] = {
 8001058:	727b      	strb	r3, [r7, #9]
        throttle1.percent,
 800105a:	4b11      	ldr	r3, [pc, #68]	; (80010a0 <can_tx_vcu_state+0x74>)
 800105c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 800105e:	b2db      	uxtb	r3, r3
 8001060:	72bb      	strb	r3, [r7, #10]
        throttle2.percent,
 8001062:	4b10      	ldr	r3, [pc, #64]	; (80010a4 <can_tx_vcu_state+0x78>)
 8001064:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 8001066:	b2db      	uxtb	r3, r3
 8001068:	72fb      	strb	r3, [r7, #11]
		brake.percent,
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <can_tx_vcu_state+0x7c>)
 800106c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 800106e:	b2db      	uxtb	r3, r3
 8001070:	733b      	strb	r3, [r7, #12]
        one_byte_state(),
 8001072:	f000 fd67 	bl	8001b44 <one_byte_state>
 8001076:	4603      	mov	r3, r0
	uint8_t data_tx_state[6] = {
 8001078:	737b      	strb	r3, [r7, #13]

    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_state, &TxMailbox) != HAL_OK)
 800107a:	f107 0208 	add.w	r2, r7, #8
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <can_tx_vcu_state+0x80>)
 8001080:	4906      	ldr	r1, [pc, #24]	; (800109c <can_tx_vcu_state+0x70>)
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f004 fa0e 	bl	80054a4 <HAL_CAN_AddTxMessage>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <can_tx_vcu_state+0x68>
	{
	  print("CAN Tx failed\r\n");
 800108e:	4808      	ldr	r0, [pc, #32]	; (80010b0 <can_tx_vcu_state+0x84>)
 8001090:	f001 fe4b 	bl	8002d2a <print>
	}
}
 8001094:	bf00      	nop
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000140 	.word	0x20000140
 80010a0:	2000069c 	.word	0x2000069c
 80010a4:	200006a8 	.word	0x200006a8
 80010a8:	200006b4 	.word	0x200006b4
 80010ac:	20000158 	.word	0x20000158
 80010b0:	08009634 	.word	0x08009634

080010b4 <can_tx_torque_request>:


// transmit torque request
void can_tx_torque_request(CAN_HandleTypeDef *hcan){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80010bc:	4b26      	ldr	r3, [pc, #152]	; (8001158 <can_tx_torque_request+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TORQUE_REQUEST;
 80010c2:	4b25      	ldr	r3, [pc, #148]	; (8001158 <can_tx_torque_request+0xa4>)
 80010c4:	22c0      	movs	r2, #192	; 0xc0
 80010c6:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80010c8:	4b23      	ldr	r3, [pc, #140]	; (8001158 <can_tx_torque_request+0xa4>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80010ce:	4b22      	ldr	r3, [pc, #136]	; (8001158 <can_tx_torque_request+0xa4>)
 80010d0:	2208      	movs	r2, #8
 80010d2:	611a      	str	r2, [r3, #16]

    uint16_t throttle_msg_byte = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	82fb      	strh	r3, [r7, #22]
    if (state == DRIVE) {
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <can_tx_torque_request+0xa8>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d108      	bne.n	80010f4 <can_tx_torque_request+0x40>
        throttle_msg_byte = requested_throttle() - TC_torque_adjustment;
 80010e2:	f001 fcd3 	bl	8002a8c <requested_throttle>
 80010e6:	4603      	mov	r3, r0
 80010e8:	461a      	mov	r2, r3
 80010ea:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <can_tx_torque_request+0xac>)
 80010ec:	881b      	ldrh	r3, [r3, #0]
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	82fb      	strh	r3, [r7, #22]
    }

    uint8_t byte5 = 0b010;   //speed mode | discharge_enable | inverter enable
 80010f4:	2302      	movs	r3, #2
 80010f6:	757b      	strb	r3, [r7, #21]
    byte5 |= (hv_requested() & 0x01);  //set inverter enable bit
 80010f8:	f000 fcf6 	bl	8001ae8 <hv_requested>
 80010fc:	4603      	mov	r3, r0
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	b25a      	sxtb	r2, r3
 8001104:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001108:	4313      	orrs	r3, r2
 800110a:	b25b      	sxtb	r3, r3
 800110c:	757b      	strb	r3, [r7, #21]

    uint8_t data_tx_torque[8] = {
        (uint8_t)(throttle_msg_byte & 0xff), // 0 - torque command lower (Nm*10)
 800110e:	8afb      	ldrh	r3, [r7, #22]
 8001110:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 8001112:	733b      	strb	r3, [r7, #12]
        (uint8_t)(throttle_msg_byte >> 8) & 0xFF, // 1 - torque command upper (Nm*10)
 8001114:	8afb      	ldrh	r3, [r7, #22]
 8001116:	0a1b      	lsrs	r3, r3, #8
 8001118:	b29b      	uxth	r3, r3
 800111a:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 800111c:	737b      	strb	r3, [r7, #13]
 800111e:	2300      	movs	r3, #0
 8001120:	73bb      	strb	r3, [r7, #14]
 8001122:	2300      	movs	r3, #0
 8001124:	73fb      	strb	r3, [r7, #15]
 8001126:	2301      	movs	r3, #1
 8001128:	743b      	strb	r3, [r7, #16]
 800112a:	7d7b      	ldrb	r3, [r7, #21]
 800112c:	747b      	strb	r3, [r7, #17]
 800112e:	2300      	movs	r3, #0
 8001130:	74bb      	strb	r3, [r7, #18]
 8001132:	2300      	movs	r3, #0
 8001134:	74fb      	strb	r3, [r7, #19]
        byte5, // 5 - speed mode | discharge_enable | inverter enable
        0, // 6 - torque limit lower (if 0, default EEPROM value used)
        0 // 7 - torque limit upper (if 0, default EEPROM value used)
    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
 8001136:	f107 020c 	add.w	r2, r7, #12
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <can_tx_torque_request+0xb0>)
 800113c:	4906      	ldr	r1, [pc, #24]	; (8001158 <can_tx_torque_request+0xa4>)
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f004 f9b0 	bl	80054a4 <HAL_CAN_AddTxMessage>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <can_tx_torque_request+0x9c>
	{
	  print("CAN Tx failed\r\n");
 800114a:	4807      	ldr	r0, [pc, #28]	; (8001168 <can_tx_torque_request+0xb4>)
 800114c:	f001 fded 	bl	8002d2a <print>
	}
}
 8001150:	bf00      	nop
 8001152:	3718      	adds	r7, #24
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	20000140 	.word	0x20000140
 800115c:	2000008d 	.word	0x2000008d
 8001160:	200006d2 	.word	0x200006d2
 8001164:	20000158 	.word	0x20000158
 8001168:	08009634 	.word	0x08009634

0800116c <can_tx_disable_MC>:


void can_tx_disable_MC(CAN_HandleTypeDef *hcan) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001174:	4b11      	ldr	r3, [pc, #68]	; (80011bc <can_tx_disable_MC+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TORQUE_REQUEST;
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <can_tx_disable_MC+0x50>)
 800117c:	22c0      	movs	r2, #192	; 0xc0
 800117e:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001180:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <can_tx_disable_MC+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 8001186:	4b0d      	ldr	r3, [pc, #52]	; (80011bc <can_tx_disable_MC+0x50>)
 8001188:	2208      	movs	r2, #8
 800118a:	611a      	str	r2, [r3, #16]

	uint8_t data_tx_torque[8] = {0,0,0,0,0,0,0,0};
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <can_tx_disable_MC+0x54>)
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001196:	e883 0003 	stmia.w	r3, {r0, r1}

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
 800119a:	f107 0208 	add.w	r2, r7, #8
 800119e:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <can_tx_disable_MC+0x58>)
 80011a0:	4906      	ldr	r1, [pc, #24]	; (80011bc <can_tx_disable_MC+0x50>)
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f004 f97e 	bl	80054a4 <HAL_CAN_AddTxMessage>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d002      	beq.n	80011b4 <can_tx_disable_MC+0x48>
	{
	  print("CAN Tx failed\r\n");
 80011ae:	4806      	ldr	r0, [pc, #24]	; (80011c8 <can_tx_disable_MC+0x5c>)
 80011b0:	f001 fdbb 	bl	8002d2a <print>
	}
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000140 	.word	0x20000140
 80011c0:	08009644 	.word	0x08009644
 80011c4:	20000158 	.word	0x20000158
 80011c8:	08009634 	.word	0x08009634

080011cc <can_clear_fault>:

void can_clear_fault(CAN_HandleTypeDef *hcan) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
    uint8_t msg[] = {throttle1.raw << 8, 0xFF & throttle1.raw ,throttle2.raw << 8, 0xFF & throttle2.raw,brake.raw << 8, 0xFF & brake.raw,0};
 80011d4:	2300      	movs	r3, #0
 80011d6:	723b      	strb	r3, [r7, #8]
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <can_clear_fault+0x6c>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	727b      	strb	r3, [r7, #9]
 80011e0:	2300      	movs	r3, #0
 80011e2:	72bb      	strb	r3, [r7, #10]
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <can_clear_fault+0x70>)
 80011e6:	881b      	ldrh	r3, [r3, #0]
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	72fb      	strb	r3, [r7, #11]
 80011ec:	2300      	movs	r3, #0
 80011ee:	733b      	strb	r3, [r7, #12]
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <can_clear_fault+0x74>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	737b      	strb	r3, [r7, #13]
 80011f8:	2300      	movs	r3, #0
 80011fa:	73bb      	strb	r3, [r7, #14]

    TxHeader.IDE = CAN_ID_STD;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <can_clear_fault+0x78>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = 0x111;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <can_clear_fault+0x78>)
 8001204:	f240 1211 	movw	r2, #273	; 0x111
 8001208:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <can_clear_fault+0x78>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <can_clear_fault+0x78>)
 8001212:	2208      	movs	r2, #8
 8001214:	611a      	str	r2, [r3, #16]

	 if (HAL_CAN_AddTxMessage(hcan, &TxHeader, msg, &TxMailbox) != HAL_OK)
 8001216:	f107 0208 	add.w	r2, r7, #8
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <can_clear_fault+0x7c>)
 800121c:	4909      	ldr	r1, [pc, #36]	; (8001244 <can_clear_fault+0x78>)
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f004 f940 	bl	80054a4 <HAL_CAN_AddTxMessage>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <can_clear_fault+0x64>
	{
	  print("CAN Tx failed\r\n");
 800122a:	4808      	ldr	r0, [pc, #32]	; (800124c <can_clear_fault+0x80>)
 800122c:	f001 fd7d 	bl	8002d2a <print>
//
//	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
//	{
//	  print("CAN Tx failed\r\n");
//	}
}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	2000069c 	.word	0x2000069c
 800123c:	200006a8 	.word	0x200006a8
 8001240:	200006b4 	.word	0x200006b4
 8001244:	20000140 	.word	0x20000140
 8001248:	20000158 	.word	0x20000158
 800124c:	08009634 	.word	0x08009634

08001250 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
	SSD1963_Init();
 8001254:	f002 ffc6 	bl	80041e4 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 8001258:	f44f 7388 	mov.w	r3, #272	; 0x110
 800125c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001260:	490b      	ldr	r1, [pc, #44]	; (8001290 <Display_Init+0x40>)
 8001262:	480c      	ldr	r0, [pc, #48]	; (8001294 <Display_Init+0x44>)
 8001264:	f002 fa42 	bl	80036ec <UG_Init>

	UG_FontSetVSpace(0);
 8001268:	2000      	movs	r0, #0
 800126a:	f002 fce3 	bl	8003c34 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 800126e:	2000      	movs	r0, #0
 8001270:	f002 fccc 	bl	8003c0c <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 8001274:	4908      	ldr	r1, [pc, #32]	; (8001298 <Display_Init+0x48>)
 8001276:	2001      	movs	r0, #1
 8001278:	f002 ff88 	bl	800418c <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 800127c:	4907      	ldr	r1, [pc, #28]	; (800129c <Display_Init+0x4c>)
 800127e:	2000      	movs	r0, #0
 8001280:	f002 ff84 	bl	800418c <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 8001284:	4906      	ldr	r1, [pc, #24]	; (80012a0 <Display_Init+0x50>)
 8001286:	2003      	movs	r0, #3
 8001288:	f002 ff80 	bl	800418c <UG_DriverRegister>
}
 800128c:	bf00      	nop
 800128e:	bd80      	pop	{r7, pc}
 8001290:	080043a7 	.word	0x080043a7
 8001294:	2000018c 	.word	0x2000018c
 8001298:	08004431 	.word	0x08004431
 800129c:	080044fb 	.word	0x080044fb
 80012a0:	080045af 	.word	0x080045af

080012a4 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 80012aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012ae:	f002 fac9 	bl	8003844 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 80012b2:	231f      	movs	r3, #31
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012ba:	220a      	movs	r2, #10
 80012bc:	f44f 7183 	mov.w	r1, #262	; 0x106
 80012c0:	2000      	movs	r0, #0
 80012c2:	f002 fae1 	bl	8003888 <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 80012c6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	230a      	movs	r3, #10
 80012ce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012d2:	2100      	movs	r1, #0
 80012d4:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80012d8:	f002 fad6 	bl	8003888 <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 80012dc:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80012e0:	9300      	str	r3, [sp, #0]
 80012e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012e6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012ea:	f44f 7183 	mov.w	r1, #262	; 0x106
 80012ee:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80012f2:	f002 fac9 	bl	8003888 <UG_FillFrame>
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <Display_DriveTemplate>:
    // setup textbox configs

}

void Display_DriveTemplate()
{
 80012fc:	b5b0      	push	{r4, r5, r7, lr}
 80012fe:	af00      	add	r7, sp, #0
    debug_mode = false;
 8001300:	4b43      	ldr	r3, [pc, #268]	; (8001410 <Display_DriveTemplate+0x114>)
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]

    // clear screen
    UG_FillScreen(C_BLACK);
 8001306:	2000      	movs	r0, #0
 8001308:	f002 fa9c 	bl	8003844 <UG_FillScreen>

    // draw labels
    UG_PutString(68, 10, "PACK SOC");
 800130c:	4a41      	ldr	r2, [pc, #260]	; (8001414 <Display_DriveTemplate+0x118>)
 800130e:	210a      	movs	r1, #10
 8001310:	2044      	movs	r0, #68	; 0x44
 8001312:	f002 fb29 	bl	8003968 <UG_PutString>
    UG_PutString(297, 10, "MAX PACK T");
 8001316:	4a40      	ldr	r2, [pc, #256]	; (8001418 <Display_DriveTemplate+0x11c>)
 8001318:	210a      	movs	r1, #10
 800131a:	f240 1029 	movw	r0, #297	; 0x129
 800131e:	f002 fb23 	bl	8003968 <UG_PutString>
    UG_PutString(30, 180, "STATE:");
 8001322:	4a3e      	ldr	r2, [pc, #248]	; (800141c <Display_DriveTemplate+0x120>)
 8001324:	21b4      	movs	r1, #180	; 0xb4
 8001326:	201e      	movs	r0, #30
 8001328:	f002 fb1e 	bl	8003968 <UG_PutString>
    UG_PutString(275, 180, "GLV V:");
 800132c:	4a3c      	ldr	r2, [pc, #240]	; (8001420 <Display_DriveTemplate+0x124>)
 800132e:	21b4      	movs	r1, #180	; 0xb4
 8001330:	f240 1013 	movw	r0, #275	; 0x113
 8001334:	f002 fb18 	bl	8003968 <UG_PutString>

    // setup textbox configs
    soc_box.box_x1 = 30;
 8001338:	4b3a      	ldr	r3, [pc, #232]	; (8001424 <Display_DriveTemplate+0x128>)
 800133a:	221e      	movs	r2, #30
 800133c:	801a      	strh	r2, [r3, #0]
    soc_box.box_y1 = 35;
 800133e:	4b39      	ldr	r3, [pc, #228]	; (8001424 <Display_DriveTemplate+0x128>)
 8001340:	2223      	movs	r2, #35	; 0x23
 8001342:	805a      	strh	r2, [r3, #2]
    soc_box.box_x2 = 210;
 8001344:	4b37      	ldr	r3, [pc, #220]	; (8001424 <Display_DriveTemplate+0x128>)
 8001346:	22d2      	movs	r2, #210	; 0xd2
 8001348:	809a      	strh	r2, [r3, #4]
    soc_box.box_y2 = 170;
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <Display_DriveTemplate+0x128>)
 800134c:	22aa      	movs	r2, #170	; 0xaa
 800134e:	80da      	strh	r2, [r3, #6]
    soc_box.font = FONT_32X53;
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <Display_DriveTemplate+0x128>)
 8001352:	4a35      	ldr	r2, [pc, #212]	; (8001428 <Display_DriveTemplate+0x12c>)
 8001354:	f103 0410 	add.w	r4, r3, #16
 8001358:	4615      	mov	r5, r2
 800135a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800135c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800135e:	682b      	ldr	r3, [r5, #0]
 8001360:	6023      	str	r3, [r4, #0]
    soc_box.last_color = C_BLACK;  // force box redraw
 8001362:	4b30      	ldr	r3, [pc, #192]	; (8001424 <Display_DriveTemplate+0x128>)
 8001364:	2200      	movs	r2, #0
 8001366:	849a      	strh	r2, [r3, #36]	; 0x24
    soc_box.last_value = 255;
 8001368:	4b2e      	ldr	r3, [pc, #184]	; (8001424 <Display_DriveTemplate+0x128>)
 800136a:	22ff      	movs	r2, #255	; 0xff
 800136c:	84da      	strh	r2, [r3, #38]	; 0x26

    bms_temp_box.box_x1 = 270;
 800136e:	4b2f      	ldr	r3, [pc, #188]	; (800142c <Display_DriveTemplate+0x130>)
 8001370:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001374:	801a      	strh	r2, [r3, #0]
	bms_temp_box.box_y1 = 35;
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <Display_DriveTemplate+0x130>)
 8001378:	2223      	movs	r2, #35	; 0x23
 800137a:	805a      	strh	r2, [r3, #2]
	bms_temp_box.box_x2 = 450;
 800137c:	4b2b      	ldr	r3, [pc, #172]	; (800142c <Display_DriveTemplate+0x130>)
 800137e:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001382:	809a      	strh	r2, [r3, #4]
	bms_temp_box.box_y2 = 170;
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <Display_DriveTemplate+0x130>)
 8001386:	22aa      	movs	r2, #170	; 0xaa
 8001388:	80da      	strh	r2, [r3, #6]
	bms_temp_box.font = FONT_32X53;
 800138a:	4b28      	ldr	r3, [pc, #160]	; (800142c <Display_DriveTemplate+0x130>)
 800138c:	4a26      	ldr	r2, [pc, #152]	; (8001428 <Display_DriveTemplate+0x12c>)
 800138e:	f103 0410 	add.w	r4, r3, #16
 8001392:	4615      	mov	r5, r2
 8001394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001398:	682b      	ldr	r3, [r5, #0]
 800139a:	6023      	str	r3, [r4, #0]
	bms_temp_box.last_color = C_BLACK;  // force box redraw
 800139c:	4b23      	ldr	r3, [pc, #140]	; (800142c <Display_DriveTemplate+0x130>)
 800139e:	2200      	movs	r2, #0
 80013a0:	849a      	strh	r2, [r3, #36]	; 0x24
	bms_temp_box.last_value = 255;
 80013a2:	4b22      	ldr	r3, [pc, #136]	; (800142c <Display_DriveTemplate+0x130>)
 80013a4:	22ff      	movs	r2, #255	; 0xff
 80013a6:	84da      	strh	r2, [r3, #38]	; 0x26

	state_box.box_x1 = 30;
 80013a8:	4b21      	ldr	r3, [pc, #132]	; (8001430 <Display_DriveTemplate+0x134>)
 80013aa:	221e      	movs	r2, #30
 80013ac:	801a      	strh	r2, [r3, #0]
	state_box.box_y1 = 200;
 80013ae:	4b20      	ldr	r3, [pc, #128]	; (8001430 <Display_DriveTemplate+0x134>)
 80013b0:	22c8      	movs	r2, #200	; 0xc8
 80013b2:	805a      	strh	r2, [r3, #2]
	state_box.box_x2 = 210;
 80013b4:	4b1e      	ldr	r3, [pc, #120]	; (8001430 <Display_DriveTemplate+0x134>)
 80013b6:	22d2      	movs	r2, #210	; 0xd2
 80013b8:	809a      	strh	r2, [r3, #4]
	state_box.box_y2 = 230;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <Display_DriveTemplate+0x134>)
 80013bc:	22e6      	movs	r2, #230	; 0xe6
 80013be:	80da      	strh	r2, [r3, #6]
	state_box.font = FONT_12X16;
 80013c0:	4b1b      	ldr	r3, [pc, #108]	; (8001430 <Display_DriveTemplate+0x134>)
 80013c2:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <Display_DriveTemplate+0x138>)
 80013c4:	f103 0410 	add.w	r4, r3, #16
 80013c8:	4615      	mov	r5, r2
 80013ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013ce:	682b      	ldr	r3, [r5, #0]
 80013d0:	6023      	str	r3, [r4, #0]
	state_box.last_color = C_BLACK;  // force box redraw
 80013d2:	4b17      	ldr	r3, [pc, #92]	; (8001430 <Display_DriveTemplate+0x134>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	849a      	strh	r2, [r3, #36]	; 0x24

	glv_v_box.box_x1 = 270;
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <Display_DriveTemplate+0x13c>)
 80013da:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80013de:	801a      	strh	r2, [r3, #0]
	glv_v_box.box_y1 = 200;
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <Display_DriveTemplate+0x13c>)
 80013e2:	22c8      	movs	r2, #200	; 0xc8
 80013e4:	805a      	strh	r2, [r3, #2]
	glv_v_box.box_x2 = 450;
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <Display_DriveTemplate+0x13c>)
 80013e8:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80013ec:	809a      	strh	r2, [r3, #4]
	glv_v_box.box_y2 = 230;
 80013ee:	4b12      	ldr	r3, [pc, #72]	; (8001438 <Display_DriveTemplate+0x13c>)
 80013f0:	22e6      	movs	r2, #230	; 0xe6
 80013f2:	80da      	strh	r2, [r3, #6]
	glv_v_box.font = FONT_12X16;
 80013f4:	4b10      	ldr	r3, [pc, #64]	; (8001438 <Display_DriveTemplate+0x13c>)
 80013f6:	4a0f      	ldr	r2, [pc, #60]	; (8001434 <Display_DriveTemplate+0x138>)
 80013f8:	f103 0410 	add.w	r4, r3, #16
 80013fc:	4615      	mov	r5, r2
 80013fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001400:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001402:	682b      	ldr	r3, [r5, #0]
 8001404:	6023      	str	r3, [r4, #0]
	glv_v_box.last_color = C_BLACK;  // force box redraw
 8001406:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <Display_DriveTemplate+0x13c>)
 8001408:	2200      	movs	r2, #0
 800140a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800140c:	bf00      	nop
 800140e:	bdb0      	pop	{r4, r5, r7, pc}
 8001410:	20000188 	.word	0x20000188
 8001414:	080096a0 	.word	0x080096a0
 8001418:	080096ac 	.word	0x080096ac
 800141c:	08009664 	.word	0x08009664
 8001420:	08009674 	.word	0x08009674
 8001424:	20000004 	.word	0x20000004
 8001428:	08018c00 	.word	0x08018c00
 800142c:	20000030 	.word	0x20000030
 8001430:	2000015c 	.word	0x2000015c
 8001434:	08018bec 	.word	0x08018bec
 8001438:	2000005c 	.word	0x2000005c

0800143c <Display_Update>:

void Display_Update()
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
	static uint32_t glv_v = 99999;
//	soc = soc+1 ;
//	glv_v+=1;

    draw_soc(soc);
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <Display_Update+0x44>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	b2db      	uxtb	r3, r3
 8001446:	b29b      	uxth	r3, r3
 8001448:	4618      	mov	r0, r3
 800144a:	f000 f823 	bl	8001494 <draw_soc>
    draw_bms_temp(PACK_TEMP);
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <Display_Update+0x48>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	b2db      	uxtb	r3, r3
 8001454:	b29b      	uxth	r3, r3
 8001456:	4618      	mov	r0, r3
 8001458:	f000 f82c 	bl	80014b4 <draw_bms_temp>
    draw_state(state, bms_status);
 800145c:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <Display_Update+0x4c>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4a0a      	ldr	r2, [pc, #40]	; (800148c <Display_Update+0x50>)
 8001464:	8812      	ldrh	r2, [r2, #0]
 8001466:	b292      	uxth	r2, r2
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f832 	bl	80014d4 <draw_state>
    draw_glv_v(glv_v);
 8001470:	4b07      	ldr	r3, [pc, #28]	; (8001490 <Display_Update+0x54>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4618      	mov	r0, r3
 8001476:	f000 f9e7 	bl	8001848 <draw_glv_v>
}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	2000010f 	.word	0x2000010f
 8001484:	2000010d 	.word	0x2000010d
 8001488:	2000008d 	.word	0x2000008d
 800148c:	20000110 	.word	0x20000110
 8001490:	20000088 	.word	0x20000088

08001494 <draw_soc>:


void draw_soc(uint16_t soc)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&soc_box, soc);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	4619      	mov	r1, r3
 80014a2:	4803      	ldr	r0, [pc, #12]	; (80014b0 <draw_soc+0x1c>)
 80014a4:	f000 fa50 	bl	8001948 <draw_value_textbox>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000004 	.word	0x20000004

080014b4 <draw_bms_temp>:

void draw_bms_temp(uint16_t temp)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&bms_temp_box, temp);
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4619      	mov	r1, r3
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <draw_bms_temp+0x1c>)
 80014c4:	f000 fa40 	bl	8001948 <draw_value_textbox>
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000030 	.word	0x20000030

080014d4 <draw_state>:

void draw_state(uint8_t state, uint16_t bms_status)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	460a      	mov	r2, r1
 80014de:	71fb      	strb	r3, [r7, #7]
 80014e0:	4613      	mov	r3, r2
 80014e2:	80bb      	strh	r3, [r7, #4]
    static uint8_t last_state = 255;
    static uint16_t last_bms_status;

    if((state == last_state) && (bms_status == last_bms_status))  // skip function if value is the same
 80014e4:	4ba9      	ldr	r3, [pc, #676]	; (800178c <draw_state+0x2b8>)
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	79fa      	ldrb	r2, [r7, #7]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d105      	bne.n	80014fa <draw_state+0x26>
 80014ee:	4ba8      	ldr	r3, [pc, #672]	; (8001790 <draw_state+0x2bc>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	88ba      	ldrh	r2, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	f000 819b 	beq.w	8001830 <draw_state+0x35c>
    }

    UG_COLOR color;
    char string[15];

    switch(bms_status)  // BMS faults more important than VCU faults
 80014fa:	88bb      	ldrh	r3, [r7, #4]
 80014fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001500:	d052      	beq.n	80015a8 <draw_state+0xd4>
 8001502:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001506:	dc59      	bgt.n	80015bc <draw_state+0xe8>
 8001508:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800150c:	d03f      	beq.n	800158e <draw_state+0xba>
 800150e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001512:	dc53      	bgt.n	80015bc <draw_state+0xe8>
 8001514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001518:	d02f      	beq.n	800157a <draw_state+0xa6>
 800151a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151e:	dc4d      	bgt.n	80015bc <draw_state+0xe8>
 8001520:	2b40      	cmp	r3, #64	; 0x40
 8001522:	d020      	beq.n	8001566 <draw_state+0x92>
 8001524:	2b40      	cmp	r3, #64	; 0x40
 8001526:	dc49      	bgt.n	80015bc <draw_state+0xe8>
 8001528:	2b10      	cmp	r3, #16
 800152a:	d012      	beq.n	8001552 <draw_state+0x7e>
 800152c:	2b10      	cmp	r3, #16
 800152e:	dc45      	bgt.n	80015bc <draw_state+0xe8>
 8001530:	2b02      	cmp	r3, #2
 8001532:	d001      	beq.n	8001538 <draw_state+0x64>
 8001534:	2b08      	cmp	r3, #8
 8001536:	d141      	bne.n	80015bc <draw_state+0xe8>
    {
        case PACK_TEMP_OVER:
        case PACK_TEMP_UNDER:
            color = C_RED;
 8001538:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800153c:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " BMS TEMP ");
 800153e:	f107 030c 	add.w	r3, r7, #12
 8001542:	4a94      	ldr	r2, [pc, #592]	; (8001794 <draw_state+0x2c0>)
 8001544:	ca07      	ldmia	r2, {r0, r1, r2}
 8001546:	c303      	stmia	r3!, {r0, r1}
 8001548:	801a      	strh	r2, [r3, #0]
 800154a:	3302      	adds	r3, #2
 800154c:	0c12      	lsrs	r2, r2, #16
 800154e:	701a      	strb	r2, [r3, #0]
            break;
 8001550:	e166      	b.n	8001820 <draw_state+0x34c>
        case LOW_SOC:
            color = C_RED;
 8001552:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001556:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " LOW SOC ");
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	4a8e      	ldr	r2, [pc, #568]	; (8001798 <draw_state+0x2c4>)
 800155e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001560:	c303      	stmia	r3!, {r0, r1}
 8001562:	801a      	strh	r2, [r3, #0]
            break;
 8001564:	e15c      	b.n	8001820 <draw_state+0x34c>
        case IMBALANCE:
            color = C_RED;
 8001566:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800156a:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "IMBALANCE");
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4a8a      	ldr	r2, [pc, #552]	; (800179c <draw_state+0x2c8>)
 8001572:	ca07      	ldmia	r2, {r0, r1, r2}
 8001574:	c303      	stmia	r3!, {r0, r1}
 8001576:	801a      	strh	r2, [r3, #0]
            break;
 8001578:	e152      	b.n	8001820 <draw_state+0x34c>
        case SPI_FAULT:
            color = C_RED;
 800157a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800157e:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "SPI FAULT");
 8001580:	f107 030c 	add.w	r3, r7, #12
 8001584:	4a86      	ldr	r2, [pc, #536]	; (80017a0 <draw_state+0x2cc>)
 8001586:	ca07      	ldmia	r2, {r0, r1, r2}
 8001588:	c303      	stmia	r3!, {r0, r1}
 800158a:	801a      	strh	r2, [r3, #0]
            break;
 800158c:	e148      	b.n	8001820 <draw_state+0x34c>
        case CELL_VOLT_OVER:
            color = C_RED;
 800158e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001592:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " OVERVOLT ");
 8001594:	f107 030c 	add.w	r3, r7, #12
 8001598:	4a82      	ldr	r2, [pc, #520]	; (80017a4 <draw_state+0x2d0>)
 800159a:	ca07      	ldmia	r2, {r0, r1, r2}
 800159c:	c303      	stmia	r3!, {r0, r1}
 800159e:	801a      	strh	r2, [r3, #0]
 80015a0:	3302      	adds	r3, #2
 80015a2:	0c12      	lsrs	r2, r2, #16
 80015a4:	701a      	strb	r2, [r3, #0]
            break;
 80015a6:	e13b      	b.n	8001820 <draw_state+0x34c>
        case CELL_VOLT_UNDER:
            color = C_RED;
 80015a8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015ac:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "UNDERVOLT");
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	4a7d      	ldr	r2, [pc, #500]	; (80017a8 <draw_state+0x2d4>)
 80015b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015b6:	c303      	stmia	r3!, {r0, r1}
 80015b8:	801a      	strh	r2, [r3, #0]
            break;
 80015ba:	e131      	b.n	8001820 <draw_state+0x34c>
        default:
            // check fault bit
            if (state & 0x80) {
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f280 80be 	bge.w	8001742 <draw_state+0x26e>
                // *************** FAULTS ***************
                uint8_t fault = state & 0x7f; // mask off fault bit
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015cc:	777b      	strb	r3, [r7, #29]
                switch(fault)
 80015ce:	7f7b      	ldrb	r3, [r7, #29]
 80015d0:	2b0a      	cmp	r3, #10
 80015d2:	dc1d      	bgt.n	8001610 <draw_state+0x13c>
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f340 80aa 	ble.w	800172e <draw_state+0x25a>
 80015da:	3b01      	subs	r3, #1
 80015dc:	2b09      	cmp	r3, #9
 80015de:	f200 80a6 	bhi.w	800172e <draw_state+0x25a>
 80015e2:	a201      	add	r2, pc, #4	; (adr r2, 80015e8 <draw_state+0x114>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	08001631 	.word	0x08001631
 80015ec:	0800164b 	.word	0x0800164b
 80015f0:	08001665 	.word	0x08001665
 80015f4:	0800167f 	.word	0x0800167f
 80015f8:	08001699 	.word	0x08001699
 80015fc:	080016b3 	.word	0x080016b3
 8001600:	080016cd 	.word	0x080016cd
 8001604:	080016e7 	.word	0x080016e7
 8001608:	08001701 	.word	0x08001701
 800160c:	08001715 	.word	0x08001715
 8001610:	2bff      	cmp	r3, #255	; 0xff
 8001612:	f040 808c 	bne.w	800172e <draw_state+0x25a>
                {
//                    case NONE: // STARTUP (effectively)
                	case 255:
                        // not obtainable via CAN
                        // would only show when hardcoded on startup
                        color = C_YELLOW;
 8001616:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800161a:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " STARTUP  ");
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4a62      	ldr	r2, [pc, #392]	; (80017ac <draw_state+0x2d8>)
 8001622:	ca07      	ldmia	r2, {r0, r1, r2}
 8001624:	c303      	stmia	r3!, {r0, r1}
 8001626:	801a      	strh	r2, [r3, #0]
 8001628:	3302      	adds	r3, #2
 800162a:	0c12      	lsrs	r2, r2, #16
 800162c:	701a      	strb	r2, [r3, #0]
                        break;
 800162e:	e0f7      	b.n	8001820 <draw_state+0x34c>
                    case DRIVE_REQUEST_FROM_LV:
                        color = C_RED;
 8001630:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001634:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "DRV FRM LV");
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	4a5d      	ldr	r2, [pc, #372]	; (80017b0 <draw_state+0x2dc>)
 800163c:	ca07      	ldmia	r2, {r0, r1, r2}
 800163e:	c303      	stmia	r3!, {r0, r1}
 8001640:	801a      	strh	r2, [r3, #0]
 8001642:	3302      	adds	r3, #2
 8001644:	0c12      	lsrs	r2, r2, #16
 8001646:	701a      	strb	r2, [r3, #0]
                        break;
 8001648:	e0ea      	b.n	8001820 <draw_state+0x34c>
                    case CONSERVATIVE_TIMER_MAXED:
                        color = C_RED;
 800164a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800164e:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "PRE TM OUT");
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4a57      	ldr	r2, [pc, #348]	; (80017b4 <draw_state+0x2e0>)
 8001656:	ca07      	ldmia	r2, {r0, r1, r2}
 8001658:	c303      	stmia	r3!, {r0, r1}
 800165a:	801a      	strh	r2, [r3, #0]
 800165c:	3302      	adds	r3, #2
 800165e:	0c12      	lsrs	r2, r2, #16
 8001660:	701a      	strb	r2, [r3, #0]
                        break;
 8001662:	e0dd      	b.n	8001820 <draw_state+0x34c>
                    case BRAKE_NOT_PRESSED:
                        color = C_RED;
 8001664:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001668:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BR NOT PRS");
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4a52      	ldr	r2, [pc, #328]	; (80017b8 <draw_state+0x2e4>)
 8001670:	ca07      	ldmia	r2, {r0, r1, r2}
 8001672:	c303      	stmia	r3!, {r0, r1}
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	3302      	adds	r3, #2
 8001678:	0c12      	lsrs	r2, r2, #16
 800167a:	701a      	strb	r2, [r3, #0]
                        break;
 800167c:	e0d0      	b.n	8001820 <draw_state+0x34c>
                    case HV_DISABLED_WHILE_DRIVING:
                        color = C_RED;
 800167e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001682:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HV OFF DRV");
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4a4c      	ldr	r2, [pc, #304]	; (80017bc <draw_state+0x2e8>)
 800168a:	ca07      	ldmia	r2, {r0, r1, r2}
 800168c:	c303      	stmia	r3!, {r0, r1}
 800168e:	801a      	strh	r2, [r3, #0]
 8001690:	3302      	adds	r3, #2
 8001692:	0c12      	lsrs	r2, r2, #16
 8001694:	701a      	strb	r2, [r3, #0]
                        break;
 8001696:	e0c3      	b.n	8001820 <draw_state+0x34c>
                    case SENSOR_DISCREPANCY:
                        color = C_RED;
 8001698:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800169c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SNSR DSCRP");
 800169e:	f107 030c 	add.w	r3, r7, #12
 80016a2:	4a47      	ldr	r2, [pc, #284]	; (80017c0 <draw_state+0x2ec>)
 80016a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016a6:	c303      	stmia	r3!, {r0, r1}
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	3302      	adds	r3, #2
 80016ac:	0c12      	lsrs	r2, r2, #16
 80016ae:	701a      	strb	r2, [r3, #0]
                        break;
 80016b0:	e0b6      	b.n	8001820 <draw_state+0x34c>
                    case BRAKE_IMPLAUSIBLE:
                        color = C_YELLOW;
 80016b2:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80016b6:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BSPD TRIPD");
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	4a41      	ldr	r2, [pc, #260]	; (80017c4 <draw_state+0x2f0>)
 80016be:	ca07      	ldmia	r2, {r0, r1, r2}
 80016c0:	c303      	stmia	r3!, {r0, r1}
 80016c2:	801a      	strh	r2, [r3, #0]
 80016c4:	3302      	adds	r3, #2
 80016c6:	0c12      	lsrs	r2, r2, #16
 80016c8:	701a      	strb	r2, [r3, #0]
                        break;
 80016ca:	e0a9      	b.n	8001820 <draw_state+0x34c>
                    case SHUTDOWN_CIRCUIT_OPEN:
                        color = C_RED;
 80016cc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016d0:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SHTDWN OPN");
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	4a3c      	ldr	r2, [pc, #240]	; (80017c8 <draw_state+0x2f4>)
 80016d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80016da:	c303      	stmia	r3!, {r0, r1}
 80016dc:	801a      	strh	r2, [r3, #0]
 80016de:	3302      	adds	r3, #2
 80016e0:	0c12      	lsrs	r2, r2, #16
 80016e2:	701a      	strb	r2, [r3, #0]
                        break;
 80016e4:	e09c      	b.n	8001820 <draw_state+0x34c>
                    case UNCALIBRATED:
                        color = C_RED;
 80016e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016ea:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "UNCALIBRTD");
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4a36      	ldr	r2, [pc, #216]	; (80017cc <draw_state+0x2f8>)
 80016f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f4:	c303      	stmia	r3!, {r0, r1}
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	3302      	adds	r3, #2
 80016fa:	0c12      	lsrs	r2, r2, #16
 80016fc:	701a      	strb	r2, [r3, #0]
                        break;
 80016fe:	e08f      	b.n	8001820 <draw_state+0x34c>
                    case HARD_BSPD:
                        color = C_RED;
 8001700:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001704:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HARD BSPD");
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4a31      	ldr	r2, [pc, #196]	; (80017d0 <draw_state+0x2fc>)
 800170c:	ca07      	ldmia	r2, {r0, r1, r2}
 800170e:	c303      	stmia	r3!, {r0, r1}
 8001710:	801a      	strh	r2, [r3, #0]
                        break;
 8001712:	e085      	b.n	8001820 <draw_state+0x34c>
                    case MC_FAULT:
                        color = C_RED;
 8001714:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001718:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " MC FAULT ");
 800171a:	f107 030c 	add.w	r3, r7, #12
 800171e:	4a2d      	ldr	r2, [pc, #180]	; (80017d4 <draw_state+0x300>)
 8001720:	ca07      	ldmia	r2, {r0, r1, r2}
 8001722:	c303      	stmia	r3!, {r0, r1}
 8001724:	801a      	strh	r2, [r3, #0]
 8001726:	3302      	adds	r3, #2
 8001728:	0c12      	lsrs	r2, r2, #16
 800172a:	701a      	strb	r2, [r3, #0]
                        break;
 800172c:	e078      	b.n	8001820 <draw_state+0x34c>
                    default:
                        color = C_RED;
 800172e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001732:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " YO WTF? ");
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4a27      	ldr	r2, [pc, #156]	; (80017d8 <draw_state+0x304>)
 800173a:	ca07      	ldmia	r2, {r0, r1, r2}
 800173c:	c303      	stmia	r3!, {r0, r1}
 800173e:	801a      	strh	r2, [r3, #0]
                        break;
 8001740:	e06e      	b.n	8001820 <draw_state+0x34c>
                }
            }
            else
            {
                // *************** NO FAULTS ***************
                color = C_GREEN;
 8001742:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001746:	83fb      	strh	r3, [r7, #30]
                switch(state)
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d85e      	bhi.n	800180c <draw_state+0x338>
 800174e:	a201      	add	r2, pc, #4	; (adr r2, 8001754 <draw_state+0x280>)
 8001750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001754:	08001765 	.word	0x08001765
 8001758:	08001779 	.word	0x08001779
 800175c:	080017e5 	.word	0x080017e5
 8001760:	080017f9 	.word	0x080017f9
                {
                    case LV:
                        strcpy(string, "    LV    ");
 8001764:	f107 030c 	add.w	r3, r7, #12
 8001768:	4a1c      	ldr	r2, [pc, #112]	; (80017dc <draw_state+0x308>)
 800176a:	ca07      	ldmia	r2, {r0, r1, r2}
 800176c:	c303      	stmia	r3!, {r0, r1}
 800176e:	801a      	strh	r2, [r3, #0]
 8001770:	3302      	adds	r3, #2
 8001772:	0c12      	lsrs	r2, r2, #16
 8001774:	701a      	strb	r2, [r3, #0]
                        break;
 8001776:	e053      	b.n	8001820 <draw_state+0x34c>
                    case PRECHARGING:
                        strcpy(string, "PRECHARGE ");
 8001778:	f107 030c 	add.w	r3, r7, #12
 800177c:	4a18      	ldr	r2, [pc, #96]	; (80017e0 <draw_state+0x30c>)
 800177e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001780:	c303      	stmia	r3!, {r0, r1}
 8001782:	801a      	strh	r2, [r3, #0]
 8001784:	3302      	adds	r3, #2
 8001786:	0c12      	lsrs	r2, r2, #16
 8001788:	701a      	strb	r2, [r3, #0]
                        break;
 800178a:	e049      	b.n	8001820 <draw_state+0x34c>
 800178c:	2000008c 	.word	0x2000008c
 8001790:	20000210 	.word	0x20000210
 8001794:	080096b8 	.word	0x080096b8
 8001798:	080096c4 	.word	0x080096c4
 800179c:	080096d0 	.word	0x080096d0
 80017a0:	080096dc 	.word	0x080096dc
 80017a4:	080096e8 	.word	0x080096e8
 80017a8:	080096f4 	.word	0x080096f4
 80017ac:	08009700 	.word	0x08009700
 80017b0:	0800970c 	.word	0x0800970c
 80017b4:	08009718 	.word	0x08009718
 80017b8:	08009724 	.word	0x08009724
 80017bc:	08009730 	.word	0x08009730
 80017c0:	0800973c 	.word	0x0800973c
 80017c4:	08009748 	.word	0x08009748
 80017c8:	08009754 	.word	0x08009754
 80017cc:	08009760 	.word	0x08009760
 80017d0:	0800976c 	.word	0x0800976c
 80017d4:	08009778 	.word	0x08009778
 80017d8:	08009784 	.word	0x08009784
 80017dc:	08009790 	.word	0x08009790
 80017e0:	0800979c 	.word	0x0800979c
                    case HV_ENABLED:
                        strcpy(string, "HV ENABLED");
 80017e4:	f107 030c 	add.w	r3, r7, #12
 80017e8:	4a13      	ldr	r2, [pc, #76]	; (8001838 <draw_state+0x364>)
 80017ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80017ec:	c303      	stmia	r3!, {r0, r1}
 80017ee:	801a      	strh	r2, [r3, #0]
 80017f0:	3302      	adds	r3, #2
 80017f2:	0c12      	lsrs	r2, r2, #16
 80017f4:	701a      	strb	r2, [r3, #0]
                        break;
 80017f6:	e013      	b.n	8001820 <draw_state+0x34c>
                    case DRIVE:
                        strcpy(string, "  DRIVE   ");
 80017f8:	f107 030c 	add.w	r3, r7, #12
 80017fc:	4a0f      	ldr	r2, [pc, #60]	; (800183c <draw_state+0x368>)
 80017fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001800:	c303      	stmia	r3!, {r0, r1}
 8001802:	801a      	strh	r2, [r3, #0]
 8001804:	3302      	adds	r3, #2
 8001806:	0c12      	lsrs	r2, r2, #16
 8001808:	701a      	strb	r2, [r3, #0]
                        break;
 800180a:	e009      	b.n	8001820 <draw_state+0x34c>
                    default:
						color = C_RED;
 800180c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001810:	83fb      	strh	r3, [r7, #30]
						strcpy(string, " YO WTF? ");
 8001812:	f107 030c 	add.w	r3, r7, #12
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <draw_state+0x36c>)
 8001818:	ca07      	ldmia	r2, {r0, r1, r2}
 800181a:	c303      	stmia	r3!, {r0, r1}
 800181c:	801a      	strh	r2, [r3, #0]
						break;
 800181e:	bf00      	nop
                }
            }
    }

    draw_textbox(&state_box, color, string, 11);
 8001820:	f107 020c 	add.w	r2, r7, #12
 8001824:	8bf9      	ldrh	r1, [r7, #30]
 8001826:	230b      	movs	r3, #11
 8001828:	4806      	ldr	r0, [pc, #24]	; (8001844 <draw_state+0x370>)
 800182a:	f000 f8c7 	bl	80019bc <draw_textbox>
 800182e:	e000      	b.n	8001832 <draw_state+0x35e>
        return;
 8001830:	bf00      	nop
}
 8001832:	3720      	adds	r7, #32
 8001834:	46bd      	mov	sp, r7
 8001836:	bd80      	pop	{r7, pc}
 8001838:	080097a8 	.word	0x080097a8
 800183c:	080097b4 	.word	0x080097b4
 8001840:	08009784 	.word	0x08009784
 8001844:	2000015c 	.word	0x2000015c

08001848 <draw_glv_v>:


void draw_glv_v(uint32_t data) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
    // translate from voltage divider measurement to true voltage
    // y = 0.4295x + 18.254
    data *= 859;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f240 325b 	movw	r2, #859	; 0x35b
 8001856:	fb02 f303 	mul.w	r3, r2, r3
 800185a:	607b      	str	r3, [r7, #4]
    data /= 2000; // 0.4295
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	4a17      	ldr	r2, [pc, #92]	; (80018bc <draw_glv_v+0x74>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	09db      	lsrs	r3, r3, #7
 8001866:	607b      	str	r3, [r7, #4]
    data += 18;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	3312      	adds	r3, #18
 800186c:	607b      	str	r3, [r7, #4]
    UG_COLOR color;
    if (data > 1150) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f240 427e 	movw	r2, #1150	; 0x47e
 8001874:	4293      	cmp	r3, r2
 8001876:	d903      	bls.n	8001880 <draw_glv_v+0x38>
        color = C_GREEN;
 8001878:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800187c:	81fb      	strh	r3, [r7, #14]
 800187e:	e00b      	b.n	8001898 <draw_glv_v+0x50>
    } else if (data > 1100) {
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f240 424c 	movw	r2, #1100	; 0x44c
 8001886:	4293      	cmp	r3, r2
 8001888:	d903      	bls.n	8001892 <draw_glv_v+0x4a>
        color = C_YELLOW;
 800188a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800188e:	81fb      	strh	r3, [r7, #14]
 8001890:	e002      	b.n	8001898 <draw_glv_v+0x50>
    } else {
    	color = C_RED;
 8001892:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001896:	81fb      	strh	r3, [r7, #14]
    }

    char str[6];
    sprintf(str, "%ld", data);
 8001898:	f107 0308 	add.w	r3, r7, #8
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	4908      	ldr	r1, [pc, #32]	; (80018c0 <draw_glv_v+0x78>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f007 fa17 	bl	8008cd4 <siprintf>
    draw_textbox(&glv_v_box, color, str, 11);
 80018a6:	f107 0208 	add.w	r2, r7, #8
 80018aa:	89f9      	ldrh	r1, [r7, #14]
 80018ac:	230b      	movs	r3, #11
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <draw_glv_v+0x7c>)
 80018b0:	f000 f884 	bl	80019bc <draw_textbox>
}
 80018b4:	bf00      	nop
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	10624dd3 	.word	0x10624dd3
 80018c0:	080097c0 	.word	0x080097c0
 80018c4:	2000005c 	.word	0x2000005c

080018c8 <value_to_color>:



UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value)
{
 80018c8:	b084      	sub	sp, #16
 80018ca:	b490      	push	{r4, r7}
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	f107 0408 	add.w	r4, r7, #8
 80018d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(cfg.grn_ylw_cutoff > cfg.ylw_org_cutoff)   // green for large red for small
 80018d6:	8a3a      	ldrh	r2, [r7, #16]
 80018d8:	8a7b      	ldrh	r3, [r7, #18]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d917      	bls.n	800190e <value_to_color+0x46>
    {
        if(value > cfg.grn_ylw_cutoff)
 80018de:	8a3b      	ldrh	r3, [r7, #16]
 80018e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d902      	bls.n	80018ec <value_to_color+0x24>
        {
            return C_GREEN;
 80018e6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018ea:	e027      	b.n	800193c <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 80018ec:	8a7b      	ldrh	r3, [r7, #18]
 80018ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d902      	bls.n	80018fa <value_to_color+0x32>
        {
            return C_YELLOW;
 80018f4:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80018f8:	e020      	b.n	800193c <value_to_color+0x74>
        }
        else if(value > cfg.org_red_cutoff)
 80018fa:	8abb      	ldrh	r3, [r7, #20]
 80018fc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80018fe:	429a      	cmp	r2, r3
 8001900:	d902      	bls.n	8001908 <value_to_color+0x40>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8001902:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8001906:	e019      	b.n	800193c <value_to_color+0x74>
        }
        else
        {
            return C_RED;
 8001908:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800190c:	e016      	b.n	800193c <value_to_color+0x74>
        }
    }
    else  // red for large green for small
    {
        if(value > cfg.org_red_cutoff)
 800190e:	8abb      	ldrh	r3, [r7, #20]
 8001910:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001912:	429a      	cmp	r2, r3
 8001914:	d902      	bls.n	800191c <value_to_color+0x54>
        {
            return C_RED;
 8001916:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800191a:	e00f      	b.n	800193c <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 800191c:	8a7b      	ldrh	r3, [r7, #18]
 800191e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001920:	429a      	cmp	r2, r3
 8001922:	d902      	bls.n	800192a <value_to_color+0x62>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8001924:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8001928:	e008      	b.n	800193c <value_to_color+0x74>
        }
        else if(value > cfg.grn_ylw_cutoff)
 800192a:	8a3b      	ldrh	r3, [r7, #16]
 800192c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800192e:	429a      	cmp	r2, r3
 8001930:	d902      	bls.n	8001938 <value_to_color+0x70>
        {
            return C_YELLOW;
 8001932:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001936:	e001      	b.n	800193c <value_to_color+0x74>
        }
        else
        {
            return C_GREEN;
 8001938:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
        }
    }
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	bc90      	pop	{r4, r7}
 8001942:	b004      	add	sp, #16
 8001944:	4770      	bx	lr
	...

08001948 <draw_value_textbox>:

void draw_value_textbox(TEXTBOX_CONFIG* cfg, uint16_t value)
{
 8001948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800194a:	b08f      	sub	sp, #60	; 0x3c
 800194c:	af08      	add	r7, sp, #32
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
	if(value == cfg->last_value)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	429a      	cmp	r2, r3
 800195c:	d028      	beq.n	80019b0 <draw_value_textbox+0x68>
	{
		return;
	}

	cfg->last_value = value;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	84da      	strh	r2, [r3, #38]	; 0x26

	UG_COLOR color = value_to_color(*cfg, value);
 8001964:	687e      	ldr	r6, [r7, #4]
 8001966:	887b      	ldrh	r3, [r7, #2]
 8001968:	9307      	str	r3, [sp, #28]
 800196a:	466d      	mov	r5, sp
 800196c:	f106 0410 	add.w	r4, r6, #16
 8001970:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001972:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001974:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001978:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800197c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001980:	f7ff ffa2 	bl	80018c8 <value_to_color>
 8001984:	4603      	mov	r3, r0
 8001986:	82fb      	strh	r3, [r7, #22]
	char string[10];
	uint16_t str_len = sprintf(string, "%d%c", value, cfg->units);
 8001988:	887a      	ldrh	r2, [r7, #2]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001990:	f107 0008 	add.w	r0, r7, #8
 8001994:	4908      	ldr	r1, [pc, #32]	; (80019b8 <draw_value_textbox+0x70>)
 8001996:	f007 f99d 	bl	8008cd4 <siprintf>
 800199a:	4603      	mov	r3, r0
 800199c:	82bb      	strh	r3, [r7, #20]

	draw_textbox(cfg, color, string, str_len);
 800199e:	8abb      	ldrh	r3, [r7, #20]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	f107 0208 	add.w	r2, r7, #8
 80019a6:	8af9      	ldrh	r1, [r7, #22]
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f000 f807 	bl	80019bc <draw_textbox>
 80019ae:	e000      	b.n	80019b2 <draw_value_textbox+0x6a>
		return;
 80019b0:	bf00      	nop
}
 80019b2:	371c      	adds	r7, #28
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b8:	080097c4 	.word	0x080097c4

080019bc <draw_textbox>:

void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b089      	sub	sp, #36	; 0x24
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	461a      	mov	r2, r3
 80019c8:	460b      	mov	r3, r1
 80019ca:	817b      	strh	r3, [r7, #10]
 80019cc:	4613      	mov	r3, r2
 80019ce:	727b      	strb	r3, [r7, #9]
    // determine x and y coordinates to center text
    uint16_t text_x = (cfg->box_x2 + cfg->box_x1)/2 - ((str_len * cfg->font.char_width)/2);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	889b      	ldrh	r3, [r3, #4]
 80019d4:	461a      	mov	r2, r3
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	2b00      	cmp	r3, #0
 80019de:	da00      	bge.n	80019e2 <draw_textbox+0x26>
 80019e0:	3301      	adds	r3, #1
 80019e2:	105b      	asrs	r3, r3, #1
 80019e4:	b29a      	uxth	r2, r3
 80019e6:	7a7b      	ldrb	r3, [r7, #9]
 80019e8:	68f9      	ldr	r1, [r7, #12]
 80019ea:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	da00      	bge.n	80019f8 <draw_textbox+0x3c>
 80019f6:	3301      	adds	r3, #1
 80019f8:	105b      	asrs	r3, r3, #1
 80019fa:	425b      	negs	r3, r3
 80019fc:	b29b      	uxth	r3, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	82fb      	strh	r3, [r7, #22]
    uint16_t text_y = (cfg->box_y2 + cfg->box_y1)/2 - (cfg->font.char_height/2);
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	88db      	ldrh	r3, [r3, #6]
 8001a06:	461a      	mov	r2, r3
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	885b      	ldrh	r3, [r3, #2]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da00      	bge.n	8001a14 <draw_textbox+0x58>
 8001a12:	3301      	adds	r3, #1
 8001a14:	105b      	asrs	r3, r3, #1
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	da00      	bge.n	8001a24 <draw_textbox+0x68>
 8001a22:	3301      	adds	r3, #1
 8001a24:	105b      	asrs	r3, r3, #1
 8001a26:	b21b      	sxth	r3, r3
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	82bb      	strh	r3, [r7, #20]

    if(color != cfg->last_color)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001a32:	897a      	ldrh	r2, [r7, #10]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d013      	beq.n	8001a60 <draw_textbox+0xa4>
    {
        UG_FillFrame(cfg->box_x1, cfg->box_y1, cfg->box_x2, cfg->box_y2, color);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	881b      	ldrh	r3, [r3, #0]
 8001a3c:	b218      	sxth	r0, r3
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	885b      	ldrh	r3, [r3, #2]
 8001a42:	b219      	sxth	r1, r3
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	889b      	ldrh	r3, [r3, #4]
 8001a48:	b21a      	sxth	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	88db      	ldrh	r3, [r3, #6]
 8001a4e:	b21c      	sxth	r4, r3
 8001a50:	897b      	ldrh	r3, [r7, #10]
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	4623      	mov	r3, r4
 8001a56:	f001 ff17 	bl	8003888 <UG_FillFrame>
        cfg->last_color = color;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	897a      	ldrh	r2, [r7, #10]
 8001a5e:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    UG_FontSelect(&cfg->font);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	3310      	adds	r3, #16
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 fed7 	bl	8003818 <UG_FontSelect>
    UG_PutColorString(text_x, text_y, string, C_BLACK, color);
 8001a6a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001a6e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001a72:	897b      	ldrh	r3, [r7, #10]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	2300      	movs	r3, #0
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	f001 fffb 	bl	8003a74 <UG_PutColorString>
}
 8001a7e:	bf00      	nop
 8001a80:	371c      	adds	r7, #28
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd90      	pop	{r4, r7, pc}
	...

08001a88 <change_state>:
volatile state_t state = STARTUP;
volatile error_t error = NONE;

/************ States ************/

void change_state(const state_t new_state) {
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	71fb      	strb	r3, [r7, #7]
    // Handle edge cases
    if (state == FAULT && new_state != FAULT) {
 8001a92:	4b0a      	ldr	r3, [pc, #40]	; (8001abc <change_state+0x34>)
 8001a94:	781b      	ldrb	r3, [r3, #0]
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	2b04      	cmp	r3, #4
 8001a9a:	d105      	bne.n	8001aa8 <change_state+0x20>
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	2b04      	cmp	r3, #4
 8001aa0:	d002      	beq.n	8001aa8 <change_state+0x20>
        // Reset the error cause when exiting fault state
        error = NONE;
 8001aa2:	4b07      	ldr	r3, [pc, #28]	; (8001ac0 <change_state+0x38>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	701a      	strb	r2, [r3, #0]
    }

    state = new_state;
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <change_state+0x34>)
 8001aaa:	79fb      	ldrb	r3, [r7, #7]
 8001aac:	7013      	strb	r3, [r2, #0]
}
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	2000008d 	.word	0x2000008d
 8001ac0:	20000212 	.word	0x20000212

08001ac4 <report_fault>:

void report_fault(error_t _error) {
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
    change_state(FAULT);
 8001ace:	2004      	movs	r0, #4
 8001ad0:	f7ff ffda 	bl	8001a88 <change_state>
    // Cause of error
    error = _error;
 8001ad4:	4a03      	ldr	r2, [pc, #12]	; (8001ae4 <report_fault+0x20>)
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	7013      	strb	r3, [r2, #0]
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000212 	.word	0x20000212

08001ae8 <hv_requested>:

uint8_t hv_requested(){
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
    return (state == PRECHARGING)
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <hv_requested+0x54>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	b2db      	uxtb	r3, r3
        || (state == HV_ENABLED)
        || (state == DRIVE)
        || (error == BRAKE_NOT_PRESSED)
        || (error == SENSOR_DISCREPANCY)
        || (error == BRAKE_IMPLAUSIBLE);
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d018      	beq.n	8001b28 <hv_requested+0x40>
        || (state == HV_ENABLED)
 8001af6:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <hv_requested+0x54>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d013      	beq.n	8001b28 <hv_requested+0x40>
        || (state == DRIVE)
 8001b00:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <hv_requested+0x54>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d00e      	beq.n	8001b28 <hv_requested+0x40>
        || (error == BRAKE_NOT_PRESSED)
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <hv_requested+0x58>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	2b03      	cmp	r3, #3
 8001b12:	d009      	beq.n	8001b28 <hv_requested+0x40>
        || (error == SENSOR_DISCREPANCY)
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <hv_requested+0x58>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b05      	cmp	r3, #5
 8001b1c:	d004      	beq.n	8001b28 <hv_requested+0x40>
        || (error == BRAKE_IMPLAUSIBLE);
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <hv_requested+0x58>)
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b06      	cmp	r3, #6
 8001b26:	d101      	bne.n	8001b2c <hv_requested+0x44>
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e000      	b.n	8001b2e <hv_requested+0x46>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	b2db      	uxtb	r3, r3
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	2000008d 	.word	0x2000008d
 8001b40:	20000212 	.word	0x20000212

08001b44 <one_byte_state>:

uint8_t one_byte_state(){
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
    uint8_t state_byte = state;
 8001b4a:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <one_byte_state+0x30>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	71fb      	strb	r3, [r7, #7]
    if (state == FAULT) {
 8001b50:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <one_byte_state+0x30>)
 8001b52:	781b      	ldrb	r3, [r3, #0]
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b04      	cmp	r3, #4
 8001b58:	d104      	bne.n	8001b64 <one_byte_state+0x20>
        state_byte = 0b10000000 + error; // greatest bit = 1 if fault
 8001b5a:	4b07      	ldr	r3, [pc, #28]	; (8001b78 <one_byte_state+0x34>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	b2db      	uxtb	r3, r3
 8001b60:	3b80      	subs	r3, #128	; 0x80
 8001b62:	71fb      	strb	r3, [r7, #7]
    }

    return state_byte;
 8001b64:	79fb      	ldrb	r3, [r7, #7]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	2000008d 	.word	0x2000008d
 8001b78:	20000212 	.word	0x20000212

08001b7c <traction_control_enable>:

uint16_t val1;
uint16_t val2;
uint16_t val3;

uint8_t traction_control_enable() {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
	val1 = HAL_GPIO_ReadPin(GPIOG, BUTTON_1_Pin);
 8001b80:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <traction_control_enable+0x20>)
 8001b86:	f004 fe6d 	bl	8006864 <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <traction_control_enable+0x24>)
 8001b90:	801a      	strh	r2, [r3, #0]
	return val1;
 8001b92:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <traction_control_enable+0x24>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	40021800 	.word	0x40021800
 8001ba0:	2000067c 	.word	0x2000067c

08001ba4 <hv_switch>:

uint8_t hv_switch() {
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
	val2 = HAL_GPIO_ReadPin(GPIOG, HV_REQUEST_Pin);
 8001ba8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bac:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <hv_switch+0x20>)
 8001bae:	f004 fe59 	bl	8006864 <HAL_GPIO_ReadPin>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <hv_switch+0x24>)
 8001bb8:	801a      	strh	r2, [r3, #0]
	return val2;
 8001bba:	4b03      	ldr	r3, [pc, #12]	; (8001bc8 <hv_switch+0x24>)
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	b2db      	uxtb	r3, r3
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021800 	.word	0x40021800
 8001bc8:	2000067e 	.word	0x2000067e

08001bcc <drive_switch>:

uint8_t drive_switch() {
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
	val3 = HAL_GPIO_ReadPin(GPIOG, DRIVE_REQUEST_Pin);
 8001bd0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <drive_switch+0x20>)
 8001bd6:	f004 fe45 	bl	8006864 <HAL_GPIO_ReadPin>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b29a      	uxth	r2, r3
 8001bde:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <drive_switch+0x24>)
 8001be0:	801a      	strh	r2, [r3, #0]
	return val3;
 8001be2:	4b03      	ldr	r3, [pc, #12]	; (8001bf0 <drive_switch+0x24>)
 8001be4:	881b      	ldrh	r3, [r3, #0]
 8001be6:	b2db      	uxtb	r3, r3
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	20000680 	.word	0x20000680

08001bf4 <shutdown_closed>:


uint8_t shutdown_closed() {
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
    if (estop_flags) return 0;
 8001bf8:	4b0a      	ldr	r3, [pc, #40]	; (8001c24 <shutdown_closed+0x30>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <shutdown_closed+0x12>
 8001c02:	2300      	movs	r3, #0
 8001c04:	e009      	b.n	8001c1a <shutdown_closed+0x26>
    return (shutdown_flags & 0b00111000) == 0b00111000;
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <shutdown_closed+0x34>)
 8001c08:	781b      	ldrb	r3, [r3, #0]
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c10:	2b38      	cmp	r3, #56	; 0x38
 8001c12:	bf0c      	ite	eq
 8001c14:	2301      	moveq	r3, #1
 8001c16:	2300      	movne	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	2000010c 	.word	0x2000010c
 8001c28:	20000000 	.word	0x20000000

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c30:	f002 fd9d 	bl	800476e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c34:	f000 f9be 	bl	8001fb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c38:	f000 fd5a 	bl	80026f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c3c:	f000 fcd0 	bl	80025e0 <MX_DMA_Init>
  MX_CAN2_Init();
 8001c40:	f000 fb24 	bl	800228c <MX_CAN2_Init>
  //MX_SDMMC1_SD_Init();
  MX_ADC1_Init();
 8001c44:	f000 fa22 	bl	800208c <MX_ADC1_Init>
  MX_ADC3_Init();
 8001c48:	f000 fa5a 	bl	8002100 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001c4c:	f000 fb54 	bl	80022f8 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c50:	f000 fba8 	bl	80023a4 <MX_TIM4_Init>
  MX_UART4_Init();
 8001c54:	f000 fc34 	bl	80024c0 <MX_UART4_Init>
  MX_UART7_Init();
 8001c58:	f000 fc62 	bl	8002520 <MX_UART7_Init>
  MX_FMC_Init();
 8001c5c:	f000 fce6 	bl	800262c <MX_FMC_Init>
  MX_CAN1_Init();
 8001c60:	f000 faac 	bl	80021bc <MX_CAN1_Init>
  MX_TIM6_Init();
 8001c64:	f000 fbf4 	bl	8002450 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001c68:	f000 fc8a 	bl	8002580 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADC_Start_DMA(&hadc1, ADC_buf, ADC_BUFLEN);

  init_sensors();
 8001c6c:	f000 fe08 	bl	8002880 <init_sensors>

  Display_Init();
 8001c70:	f7ff faee 	bl	8001250 <Display_Init>
  UG_FontSelect(&FONT_12X16);
 8001c74:	48bf      	ldr	r0, [pc, #764]	; (8001f74 <main+0x348>)
 8001c76:	f001 fdcf 	bl	8003818 <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 8001c7a:	2000      	movs	r0, #0
 8001c7c:	f001 ffb4 	bl	8003be8 <UG_SetBackcolor>
  UG_SetForecolor(C_YELLOW);
 8001c80:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8001c84:	f001 ff9e 	bl	8003bc4 <UG_SetForecolor>
  Display_CalibrateScreen();
 8001c88:	f7ff fb0c 	bl	80012a4 <Display_CalibrateScreen>
  Display_DriveTemplate();
 8001c8c:	f7ff fb36 	bl	80012fc <Display_DriveTemplate>

  HAL_TIM_Base_Start(&htim6);
 8001c90:	48b9      	ldr	r0, [pc, #740]	; (8001f78 <main+0x34c>)
 8001c92:	f005 ffc1 	bl	8007c18 <HAL_TIM_Base_Start>

  // TEST

  TxHeader2.IDE = CAN_ID_STD;
 8001c96:	4bb9      	ldr	r3, [pc, #740]	; (8001f7c <main+0x350>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
	TxHeader2.StdId = 0x66;
 8001c9c:	4bb7      	ldr	r3, [pc, #732]	; (8001f7c <main+0x350>)
 8001c9e:	2266      	movs	r2, #102	; 0x66
 8001ca0:	601a      	str	r2, [r3, #0]
	TxHeader2.RTR = CAN_RTR_DATA;
 8001ca2:	4bb6      	ldr	r3, [pc, #728]	; (8001f7c <main+0x350>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	60da      	str	r2, [r3, #12]
	TxHeader2.DLC = 8;
 8001ca8:	4bb4      	ldr	r3, [pc, #720]	; (8001f7c <main+0x350>)
 8001caa:	2208      	movs	r2, #8
 8001cac:	611a      	str	r2, [r3, #16]
//		  sprintf(str, "adc: %lu", conversion);
//		  UG_PutColorString(10, 10, str, C_BLACK, C_GREEN);
//
//	}

	can_clear_fault(&hcan1);
 8001cae:	48b4      	ldr	r0, [pc, #720]	; (8001f80 <main+0x354>)
 8001cb0:	f7ff fa8c 	bl	80011cc <can_clear_fault>

	  // TEST END



	  Display_Update();
 8001cb4:	f7ff fbc2 	bl	800143c <Display_Update>

	  update_sensor_vals(&hadc1, &hadc3);
 8001cb8:	49b2      	ldr	r1, [pc, #712]	; (8001f84 <main+0x358>)
 8001cba:	48b3      	ldr	r0, [pc, #716]	; (8001f88 <main+0x35c>)
 8001cbc:	f000 fe98 	bl	80029f0 <update_sensor_vals>

	  can_tx_vcu_state(&hcan1);
 8001cc0:	48af      	ldr	r0, [pc, #700]	; (8001f80 <main+0x354>)
 8001cc2:	f7ff f9b3 	bl	800102c <can_tx_vcu_state>

	  if (!mc_lockout) {
 8001cc6:	4bb1      	ldr	r3, [pc, #708]	; (8001f8c <main+0x360>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <main+0xaa>
		  can_tx_torque_request(&hcan1);
 8001cd0:	48ab      	ldr	r0, [pc, #684]	; (8001f80 <main+0x354>)
 8001cd2:	f7ff f9ef 	bl	80010b4 <can_tx_torque_request>
	  }

	  // Traction control
	  if (traction_control_enable()) {
 8001cd6:	f7ff ff51 	bl	8001b7c <traction_control_enable>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <main+0xb8>
		  traction_control_PID();
 8001ce0:	f001 fc34 	bl	800354c <traction_control_PID>
	  }

	  // If shutdown circuit opens in any state
	  if (!shutdown_closed()) {
 8001ce4:	f7ff ff86 	bl	8001bf4 <shutdown_closed>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <main+0xc8>
		  report_fault(SHUTDOWN_CIRCUIT_OPEN);
 8001cee:	2007      	movs	r0, #7
 8001cf0:	f7ff fee8 	bl	8001ac4 <report_fault>

//	  if (mc_fault) {
//		  report_fault(MC_FAULT);
//	  }

	  if (state != DRIVE) can_tx_disable_MC(&hcan1);
 8001cf4:	4ba6      	ldr	r3, [pc, #664]	; (8001f90 <main+0x364>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b03      	cmp	r3, #3
 8001cfc:	d002      	beq.n	8001d04 <main+0xd8>
 8001cfe:	48a0      	ldr	r0, [pc, #640]	; (8001f80 <main+0x354>)
 8001d00:	f7ff fa34 	bl	800116c <can_tx_disable_MC>

	  switch (state) {
 8001d04:	4ba2      	ldr	r3, [pc, #648]	; (8001f90 <main+0x364>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	b2db      	uxtb	r3, r3
 8001d0a:	2b05      	cmp	r3, #5
 8001d0c:	d8d2      	bhi.n	8001cb4 <main+0x88>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <main+0xe8>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d51 	.word	0x08001d51
 8001d18:	08001d8d 	.word	0x08001d8d
 8001d1c:	08001dc9 	.word	0x08001dc9
 8001d20:	08001e01 	.word	0x08001e01
 8001d24:	08001e49 	.word	0x08001e49
 8001d28:	08001d2d 	.word	0x08001d2d
		  case STARTUP:
			  run_calibration();
 8001d2c:	f000 fe4c 	bl	80029c8 <run_calibration>

			  if (!hv_switch() && !drive_switch()) {
 8001d30:	f7ff ff38 	bl	8001ba4 <hv_switch>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	f040 8119 	bne.w	8001f6e <main+0x342>
 8001d3c:	f7ff ff46 	bl	8001bcc <drive_switch>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8113 	bne.w	8001f6e <main+0x342>
				  change_state(LV);
 8001d48:	2000      	movs	r0, #0
 8001d4a:	f7ff fe9d 	bl	8001a88 <change_state>
			  }
			  break;
 8001d4e:	e10e      	b.n	8001f6e <main+0x342>
		  case LV:
			  run_calibration();
 8001d50:	f000 fe3a 	bl	80029c8 <run_calibration>

			  if (drive_switch()) {
 8001d54:	f7ff ff3a 	bl	8001bcc <drive_switch>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <main+0x13a>
				  // Drive switch should not be enabled during LV
				  report_fault(DRIVE_REQUEST_FROM_LV);
 8001d5e:	2001      	movs	r0, #1
 8001d60:	f7ff feb0 	bl	8001ac4 <report_fault>
				  break;
 8001d64:	e124      	b.n	8001fb0 <main+0x384>
			  }

			  if (hv_switch()) {
 8001d66:	f7ff ff1d 	bl	8001ba4 <hv_switch>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 8117 	beq.w	8001fa0 <main+0x374>
				  // HV switch was flipped
				  // check if APPS pedal was calibrated
				  if (sensors_calibrated()) {
 8001d72:	f000 fee7 	bl	8002b44 <sensors_calibrated>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d003      	beq.n	8001d84 <main+0x158>
					  // Start charging the car to high voltage state
					  change_state(PRECHARGING);
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff fe83 	bl	8001a88 <change_state>
				  } else {
					  report_fault(UNCALIBRATED);
				  }
			  }

			  break;
 8001d82:	e10d      	b.n	8001fa0 <main+0x374>
					  report_fault(UNCALIBRATED);
 8001d84:	2008      	movs	r0, #8
 8001d86:	f7ff fe9d 	bl	8001ac4 <report_fault>
			  break;
 8001d8a:	e109      	b.n	8001fa0 <main+0x374>
		  case PRECHARGING:
			  if (capacitor_volt > PRECHARGE_THRESHOLD) {
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <main+0x368>)
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29b      	uxth	r3, r3
 8001d92:	f241 3270 	movw	r2, #4976	; 0x1370
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d903      	bls.n	8001da2 <main+0x176>
				  // Finished charging to HV on time
				  change_state(HV_ENABLED);
 8001d9a:	2002      	movs	r0, #2
 8001d9c:	f7ff fe74 	bl	8001a88 <change_state>
				  break;
 8001da0:	e106      	b.n	8001fb0 <main+0x384>
			  }
			  if (!hv_switch()) {
 8001da2:	f7ff feff 	bl	8001ba4 <hv_switch>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d103      	bne.n	8001db4 <main+0x188>
				  // Driver flipped off HV switch
				  change_state(LV);
 8001dac:	2000      	movs	r0, #0
 8001dae:	f7ff fe6b 	bl	8001a88 <change_state>
				  break;
 8001db2:	e0fd      	b.n	8001fb0 <main+0x384>
			  }
			  if (drive_switch()) {
 8001db4:	f7ff ff0a 	bl	8001bcc <drive_switch>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f000 80f2 	beq.w	8001fa4 <main+0x378>
				  // Drive switch should not be enabled during PRECHARGING
				  report_fault(DRIVE_REQUEST_FROM_LV);
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	f7ff fe7f 	bl	8001ac4 <report_fault>
				  break;
 8001dc6:	e0f3      	b.n	8001fb0 <main+0x384>
			  }
			  break;
		  case HV_ENABLED:
			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules
 8001dc8:	f7ff feec 	bl	8001ba4 <hv_switch>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <main+0x1ae>
				  // Driver flipped off HV switch
				  change_state(LV);
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	f7ff fe58 	bl	8001a88 <change_state>
				  break;
 8001dd8:	e0ea      	b.n	8001fb0 <main+0x384>
			  }

			  if (drive_switch()) {
 8001dda:	f7ff fef7 	bl	8001bcc <drive_switch>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 80e1 	beq.w	8001fa8 <main+0x37c>
				  // Driver flipped on drive switch
				  // Need to press on pedal at the same time to go to drive

				  if (brake_mashed()) {
 8001de6:	f000 fec7 	bl	8002b78 <brake_mashed>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <main+0x1cc>
					  change_state(DRIVE);
 8001df0:	2003      	movs	r0, #3
 8001df2:	f7ff fe49 	bl	8001a88 <change_state>
					  // Driver didn't press pedal
					  report_fault(BRAKE_NOT_PRESSED);
				  }
			  }

			  break;
 8001df6:	e0d7      	b.n	8001fa8 <main+0x37c>
					  report_fault(BRAKE_NOT_PRESSED);
 8001df8:	2003      	movs	r0, #3
 8001dfa:	f7ff fe63 	bl	8001ac4 <report_fault>
			  break;
 8001dfe:	e0d3      	b.n	8001fa8 <main+0x37c>
		  case DRIVE:
			  // CM200 safety feature: starts in lockout mode, disable message must be sent before enable (torque requests)
			  if (mc_lockout) {
 8001e00:	4b62      	ldr	r3, [pc, #392]	; (8001f8c <main+0x360>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d002      	beq.n	8001e10 <main+0x1e4>
				  can_tx_disable_MC(&hcan1);
 8001e0a:	485d      	ldr	r0, [pc, #372]	; (8001f80 <main+0x354>)
 8001e0c:	f7ff f9ae 	bl	800116c <can_tx_disable_MC>
			  }

			  if (!drive_switch()) {
 8001e10:	f7ff fedc 	bl	8001bcc <drive_switch>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d103      	bne.n	8001e22 <main+0x1f6>
				  // Drive switch was flipped off
				  // Revert to HV
				  change_state(HV_ENABLED);
 8001e1a:	2002      	movs	r0, #2
 8001e1c:	f7ff fe34 	bl	8001a88 <change_state>
				 break;
 8001e20:	e0c6      	b.n	8001fb0 <main+0x384>
			  }

			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules || capacitor_volt < PRECHARGE_THRESHOLD) {
 8001e22:	f7ff febf 	bl	8001ba4 <hv_switch>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d103      	bne.n	8001e34 <main+0x208>
				  // HV switched flipped off, so can't drive
				  // or capacitor dropped below threshold
				  report_fault(HV_DISABLED_WHILE_DRIVING);
 8001e2c:	2004      	movs	r0, #4
 8001e2e:	f7ff fe49 	bl	8001ac4 <report_fault>
				  break;
 8001e32:	e0bd      	b.n	8001fb0 <main+0x384>
			  }

			  if (brake_implausible()) {
 8001e34:	f000 fee4 	bl	8002c00 <brake_implausible>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f000 80b6 	beq.w	8001fac <main+0x380>
				  report_fault(BRAKE_IMPLAUSIBLE);
 8001e40:	2006      	movs	r0, #6
 8001e42:	f7ff fe3f 	bl	8001ac4 <report_fault>
			  }

			  break;
 8001e46:	e0b1      	b.n	8001fac <main+0x380>
		  case FAULT:
			  switch (error) {
 8001e48:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <main+0x36c>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	3b03      	subs	r3, #3
 8001e50:	2b06      	cmp	r3, #6
 8001e52:	d872      	bhi.n	8001f3a <main+0x30e>
 8001e54:	a201      	add	r2, pc, #4	; (adr r2, 8001e5c <main+0x230>)
 8001e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5a:	bf00      	nop
 8001e5c:	08001e79 	.word	0x08001e79
 8001e60:	08001f3b 	.word	0x08001f3b
 8001e64:	08001e9b 	.word	0x08001e9b
 8001e68:	08001ec3 	.word	0x08001ec3
 8001e6c:	08001f29 	.word	0x08001f29
 8001e70:	08001f3b 	.word	0x08001f3b
 8001e74:	08001f57 	.word	0x08001f57
				  case BRAKE_NOT_PRESSED:
					  if (!hv_switch())
 8001e78:	f7ff fe94 	bl	8001ba4 <hv_switch>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <main+0x25c>
						  change_state(LV);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fe00 	bl	8001a88 <change_state>

					  if (!drive_switch()) {
 8001e88:	f7ff fea0 	bl	8001bcc <drive_switch>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d163      	bne.n	8001f5a <main+0x32e>
						  // reset drive switch and try again
						  change_state(HV_ENABLED);
 8001e92:	2002      	movs	r0, #2
 8001e94:	f7ff fdf8 	bl	8001a88 <change_state>
					  }
					  break;
 8001e98:	e05f      	b.n	8001f5a <main+0x32e>
				  case SENSOR_DISCREPANCY:
					  // stop power to motors if discrepancy persists for >100ms
					  // see rule T.4.2.5 in FSAE 2022 rulebook
					  if (!drive_switch()) {
 8001e9a:	f7ff fe97 	bl	8001bcc <drive_switch>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d105      	bne.n	8001eb0 <main+0x284>
						  discrepancy_timer_ms = 0;
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <main+0x370>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
						  change_state(HV_ENABLED);
 8001eaa:	2002      	movs	r0, #2
 8001eac:	f7ff fdec 	bl	8001a88 <change_state>
					  }

					  if (!hv_switch())
 8001eb0:	f7ff fe78 	bl	8001ba4 <hv_switch>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d151      	bne.n	8001f5e <main+0x332>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 8001eba:	2004      	movs	r0, #4
 8001ebc:	f7ff fe02 	bl	8001ac4 <report_fault>

					  break;
 8001ec0:	e04d      	b.n	8001f5e <main+0x332>
				  case BRAKE_IMPLAUSIBLE:
					  if (!brake_implausible() && hv_switch() && drive_switch())
 8001ec2:	f000 fe9d 	bl	8002c00 <brake_implausible>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	f083 0301 	eor.w	r3, r3, #1
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00c      	beq.n	8001eec <main+0x2c0>
 8001ed2:	f7ff fe67 	bl	8001ba4 <hv_switch>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d007      	beq.n	8001eec <main+0x2c0>
 8001edc:	f7ff fe76 	bl	8001bcc <drive_switch>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d002      	beq.n	8001eec <main+0x2c0>
						  change_state(DRIVE);
 8001ee6:	2003      	movs	r0, #3
 8001ee8:	f7ff fdce 	bl	8001a88 <change_state>

					  if (!hv_switch() && !drive_switch())
 8001eec:	f7ff fe5a 	bl	8001ba4 <hv_switch>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d107      	bne.n	8001f06 <main+0x2da>
 8001ef6:	f7ff fe69 	bl	8001bcc <drive_switch>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <main+0x2da>
						  change_state(LV);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7ff fdc1 	bl	8001a88 <change_state>

					  if (!drive_switch())
 8001f06:	f7ff fe61 	bl	8001bcc <drive_switch>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <main+0x2ea>
						  change_state(HV_ENABLED);
 8001f10:	2002      	movs	r0, #2
 8001f12:	f7ff fdb9 	bl	8001a88 <change_state>

					  if (!hv_switch())
 8001f16:	f7ff fe45 	bl	8001ba4 <hv_switch>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d120      	bne.n	8001f62 <main+0x336>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 8001f20:	2004      	movs	r0, #4
 8001f22:	f7ff fdcf 	bl	8001ac4 <report_fault>

					  break;
 8001f26:	e01c      	b.n	8001f62 <main+0x336>
				  case SHUTDOWN_CIRCUIT_OPEN:
					  if (shutdown_closed()) {
 8001f28:	f7ff fe64 	bl	8001bf4 <shutdown_closed>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d019      	beq.n	8001f66 <main+0x33a>
						  change_state(LV);
 8001f32:	2000      	movs	r0, #0
 8001f34:	f7ff fda8 	bl	8001a88 <change_state>
					  }
					  break;
 8001f38:	e015      	b.n	8001f66 <main+0x33a>
 //					  if (!HAL_GPIO_ReadPin(BSPD_LATCH) {
 //						  change_state(LV);
 //			  		  }
					  break;
				  default:  //UNCALIBRATED, DRIVE_REQUEST_FROM_LV, CONSERVATIVE_TIMER_MAXED, HV_DISABLED_WHILE_DRIVING, MC FAULT
					  if (!hv_switch() && !drive_switch()) {
 8001f3a:	f7ff fe33 	bl	8001ba4 <hv_switch>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d112      	bne.n	8001f6a <main+0x33e>
 8001f44:	f7ff fe42 	bl	8001bcc <drive_switch>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d10d      	bne.n	8001f6a <main+0x33e>
						  change_state(LV);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7ff fd9a 	bl	8001a88 <change_state>
					  }
					  break;
 8001f54:	e009      	b.n	8001f6a <main+0x33e>
					  break;
 8001f56:	bf00      	nop
 8001f58:	e02a      	b.n	8001fb0 <main+0x384>
					  break;
 8001f5a:	bf00      	nop
 8001f5c:	e028      	b.n	8001fb0 <main+0x384>
					  break;
 8001f5e:	bf00      	nop
 8001f60:	e026      	b.n	8001fb0 <main+0x384>
					  break;
 8001f62:	bf00      	nop
 8001f64:	e024      	b.n	8001fb0 <main+0x384>
					  break;
 8001f66:	bf00      	nop
 8001f68:	e022      	b.n	8001fb0 <main+0x384>
					  break;
 8001f6a:	bf00      	nop
			  }
			  break;
 8001f6c:	e020      	b.n	8001fb0 <main+0x384>
			  break;
 8001f6e:	bf00      	nop
 8001f70:	e6a0      	b.n	8001cb4 <main+0x88>
 8001f72:	bf00      	nop
 8001f74:	08018bec 	.word	0x08018bec
 8001f78:	2000044c 	.word	0x2000044c
 8001f7c:	20000684 	.word	0x20000684
 8001f80:	20000364 	.word	0x20000364
 8001f84:	2000025c 	.word	0x2000025c
 8001f88:	20000214 	.word	0x20000214
 8001f8c:	20000108 	.word	0x20000108
 8001f90:	2000008d 	.word	0x2000008d
 8001f94:	2000010a 	.word	0x2000010a
 8001f98:	20000212 	.word	0x20000212
 8001f9c:	200006c0 	.word	0x200006c0
			  break;
 8001fa0:	bf00      	nop
 8001fa2:	e687      	b.n	8001cb4 <main+0x88>
			  break;
 8001fa4:	bf00      	nop
 8001fa6:	e685      	b.n	8001cb4 <main+0x88>
			  break;
 8001fa8:	bf00      	nop
 8001faa:	e683      	b.n	8001cb4 <main+0x88>
			  break;
 8001fac:	bf00      	nop
 8001fae:	e681      	b.n	8001cb4 <main+0x88>
	  Display_Update();
 8001fb0:	e680      	b.n	8001cb4 <main+0x88>
 8001fb2:	bf00      	nop

08001fb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b094      	sub	sp, #80	; 0x50
 8001fb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fba:	f107 0320 	add.w	r3, r7, #32
 8001fbe:	2230      	movs	r2, #48	; 0x30
 8001fc0:	2100      	movs	r1, #0
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	f006 fea6 	bl	8008d14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fc8:	f107 030c 	add.w	r3, r7, #12
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd8:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <SystemClock_Config+0xd0>)
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	4a29      	ldr	r2, [pc, #164]	; (8002084 <SystemClock_Config+0xd0>)
 8001fde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fe4:	4b27      	ldr	r3, [pc, #156]	; (8002084 <SystemClock_Config+0xd0>)
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fec:	60bb      	str	r3, [r7, #8]
 8001fee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ff0:	4b25      	ldr	r3, [pc, #148]	; (8002088 <SystemClock_Config+0xd4>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a24      	ldr	r2, [pc, #144]	; (8002088 <SystemClock_Config+0xd4>)
 8001ff6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	4b22      	ldr	r3, [pc, #136]	; (8002088 <SystemClock_Config+0xd4>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002004:	607b      	str	r3, [r7, #4]
 8002006:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002008:	2301      	movs	r3, #1
 800200a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800200c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002010:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002012:	2302      	movs	r3, #2
 8002014:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002016:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800201a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800201c:	2308      	movs	r3, #8
 800201e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002020:	23d8      	movs	r3, #216	; 0xd8
 8002022:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002024:	2302      	movs	r3, #2
 8002026:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002028:	2309      	movs	r3, #9
 800202a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202c:	f107 0320 	add.w	r3, r7, #32
 8002030:	4618      	mov	r0, r3
 8002032:	f004 fc99 	bl	8006968 <HAL_RCC_OscConfig>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800203c:	f000 fc1a 	bl	8002874 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002040:	f004 fc42 	bl	80068c8 <HAL_PWREx_EnableOverDrive>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800204a:	f000 fc13 	bl	8002874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800204e:	230f      	movs	r3, #15
 8002050:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002052:	2302      	movs	r3, #2
 8002054:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800205a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800205e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002064:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	2107      	movs	r1, #7
 800206c:	4618      	mov	r0, r3
 800206e:	f004 ff1f 	bl	8006eb0 <HAL_RCC_ClockConfig>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002078:	f000 fbfc 	bl	8002874 <Error_Handler>
  }
}
 800207c:	bf00      	nop
 800207e:	3750      	adds	r7, #80	; 0x50
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	40023800 	.word	0x40023800
 8002088:	40007000 	.word	0x40007000

0800208c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002090:	4b18      	ldr	r3, [pc, #96]	; (80020f4 <MX_ADC1_Init+0x68>)
 8002092:	4a19      	ldr	r2, [pc, #100]	; (80020f8 <MX_ADC1_Init+0x6c>)
 8002094:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002096:	4b17      	ldr	r3, [pc, #92]	; (80020f4 <MX_ADC1_Init+0x68>)
 8002098:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800209c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020b0:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020c0:	4a0e      	ldr	r2, [pc, #56]	; (80020fc <MX_ADC1_Init+0x70>)
 80020c2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020c4:	4b0b      	ldr	r3, [pc, #44]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80020ca:	4b0a      	ldr	r3, [pc, #40]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020cc:	2203      	movs	r2, #3
 80020ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020d8:	4b06      	ldr	r3, [pc, #24]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020da:	2201      	movs	r2, #1
 80020dc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020de:	4805      	ldr	r0, [pc, #20]	; (80020f4 <MX_ADC1_Init+0x68>)
 80020e0:	f002 fbc6 	bl	8004870 <HAL_ADC_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_ADC1_Init+0x62>
  {
    Error_Handler();
 80020ea:	f000 fbc3 	bl	8002874 <Error_Handler>
//  }
//  /* USER CODE BEGIN ADC1_Init 2 */
//
//  /* USER CODE END ADC1_Init 2 */

}
 80020ee:	bf00      	nop
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	20000214 	.word	0x20000214
 80020f8:	40012000 	.word	0x40012000
 80020fc:	0f000001 	.word	0x0f000001

08002100 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002106:	463b      	mov	r3, r7
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002112:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002114:	4a27      	ldr	r2, [pc, #156]	; (80021b4 <MX_ADC3_Init+0xb4>)
 8002116:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002118:	4b25      	ldr	r3, [pc, #148]	; (80021b0 <MX_ADC3_Init+0xb0>)
 800211a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800211e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002120:	4b23      	ldr	r3, [pc, #140]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002126:	4b22      	ldr	r3, [pc, #136]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002128:	2201      	movs	r2, #1
 800212a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800212c:	4b20      	ldr	r3, [pc, #128]	; (80021b0 <MX_ADC3_Init+0xb0>)
 800212e:	2200      	movs	r2, #0
 8002130:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002132:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002134:	2200      	movs	r2, #0
 8002136:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800213a:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <MX_ADC3_Init+0xb0>)
 800213c:	2200      	movs	r2, #0
 800213e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002140:	4b1b      	ldr	r3, [pc, #108]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002142:	4a1d      	ldr	r2, [pc, #116]	; (80021b8 <MX_ADC3_Init+0xb8>)
 8002144:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002146:	4b1a      	ldr	r3, [pc, #104]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002148:	2200      	movs	r2, #0
 800214a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 800214c:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <MX_ADC3_Init+0xb0>)
 800214e:	2202      	movs	r2, #2
 8002150:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8002152:	4b17      	ldr	r3, [pc, #92]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002154:	2200      	movs	r2, #0
 8002156:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <MX_ADC3_Init+0xb0>)
 800215c:	2201      	movs	r2, #1
 800215e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002160:	4813      	ldr	r0, [pc, #76]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002162:	f002 fb85 	bl	8004870 <HAL_ADC_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800216c:	f000 fb82 	bl	8002874 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002170:	2308      	movs	r3, #8
 8002172:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002174:	2301      	movs	r3, #1
 8002176:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002178:	2300      	movs	r3, #0
 800217a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800217c:	463b      	mov	r3, r7
 800217e:	4619      	mov	r1, r3
 8002180:	480b      	ldr	r0, [pc, #44]	; (80021b0 <MX_ADC3_Init+0xb0>)
 8002182:	f002 fd1f 	bl	8004bc4 <HAL_ADC_ConfigChannel>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800218c:	f000 fb72 	bl	8002874 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002190:	2302      	movs	r3, #2
 8002192:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002194:	463b      	mov	r3, r7
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	; (80021b0 <MX_ADC3_Init+0xb0>)
 800219a:	f002 fd13 	bl	8004bc4 <HAL_ADC_ConfigChannel>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 80021a4:	f000 fb66 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	2000025c 	.word	0x2000025c
 80021b4:	40012200 	.word	0x40012200
 80021b8:	0f000001 	.word	0x0f000001

080021bc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80021c2:	4b30      	ldr	r3, [pc, #192]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021c4:	4a30      	ldr	r2, [pc, #192]	; (8002288 <MX_CAN1_Init+0xcc>)
 80021c6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021ca:	2212      	movs	r2, #18
 80021cc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80021ce:	4b2d      	ldr	r3, [pc, #180]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021d4:	4b2b      	ldr	r3, [pc, #172]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80021da:	4b2a      	ldr	r3, [pc, #168]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021e4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021e8:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80021f6:	4b23      	ldr	r3, [pc, #140]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021fc:	4b21      	ldr	r3, [pc, #132]	; (8002284 <MX_CAN1_Init+0xc8>)
 80021fe:	2200      	movs	r2, #0
 8002200:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002202:	4b20      	ldr	r3, [pc, #128]	; (8002284 <MX_CAN1_Init+0xc8>)
 8002204:	2200      	movs	r2, #0
 8002206:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002208:	4b1e      	ldr	r3, [pc, #120]	; (8002284 <MX_CAN1_Init+0xc8>)
 800220a:	2200      	movs	r2, #0
 800220c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800220e:	481d      	ldr	r0, [pc, #116]	; (8002284 <MX_CAN1_Init+0xc8>)
 8002210:	f002 ff28 	bl	8005064 <HAL_CAN_Init>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 800221a:	f000 fb2b 	bl	8002874 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /*##-2- Configure the CAN Filter ###########################################*/
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800221e:	2301      	movs	r3, #1
 8002220:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 8002222:	2312      	movs	r3, #18
 8002224:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0;
 800222a:	2300      	movs	r3, #0
 800222c:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0;
 800222e:	2300      	movs	r3, #0
 8002230:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800223a:	2300      	movs	r3, #0
 800223c:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800223e:	2301      	movs	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 8002242:	2314      	movs	r3, #20
 8002244:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 8002246:	463b      	mov	r3, r7
 8002248:	4619      	mov	r1, r3
 800224a:	480e      	ldr	r0, [pc, #56]	; (8002284 <MX_CAN1_Init+0xc8>)
 800224c:	f003 f806 	bl	800525c <HAL_CAN_ConfigFilter>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_CAN1_Init+0x9e>
  	{
  	  /* Filter configuration Error */
  	  Error_Handler();
 8002256:	f000 fb0d 	bl	8002874 <Error_Handler>
  	}

  	/*##-3- Start the CAN peripheral ###########################################*/
  	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 800225a:	480a      	ldr	r0, [pc, #40]	; (8002284 <MX_CAN1_Init+0xc8>)
 800225c:	f003 f8de 	bl	800541c <HAL_CAN_Start>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_CAN1_Init+0xae>
  	{
  	  /* Start Error */
  	  Error_Handler();
 8002266:	f000 fb05 	bl	8002874 <Error_Handler>
  	}

  	/*##-4- Activate CAN RX notification #######################################*/
  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 800226a:	2102      	movs	r1, #2
 800226c:	4805      	ldr	r0, [pc, #20]	; (8002284 <MX_CAN1_Init+0xc8>)
 800226e:	f003 fafb 	bl	8005868 <HAL_CAN_ActivateNotification>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_CAN1_Init+0xc0>
  	{
  	  /* Notification Error */
  	  Error_Handler();
 8002278:	f000 fafc 	bl	8002874 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 800227c:	bf00      	nop
 800227e:	3728      	adds	r7, #40	; 0x28
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	20000364 	.word	0x20000364
 8002288:	40006400 	.word	0x40006400

0800228c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002290:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <MX_CAN2_Init+0x64>)
 8002292:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <MX_CAN2_Init+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 8002296:	4b16      	ldr	r3, [pc, #88]	; (80022f0 <MX_CAN2_Init+0x64>)
 8002298:	2212      	movs	r2, #18
 800229a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <MX_CAN2_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022a2:	4b13      	ldr	r3, [pc, #76]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80022a8:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80022ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80022b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022be:	4b0c      	ldr	r3, [pc, #48]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022ca:	4b09      	ldr	r3, [pc, #36]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022d6:	4b06      	ldr	r3, [pc, #24]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	; (80022f0 <MX_CAN2_Init+0x64>)
 80022de:	f002 fec1 	bl	8005064 <HAL_CAN_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80022e8:	f000 fac4 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	2000038c 	.word	0x2000038c
 80022f4:	40006800 	.word	0x40006800

080022f8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80022fe:	f107 030c 	add.w	r3, r7, #12
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
 800230c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230e:	463b      	mov	r3, r7
 8002310:	2200      	movs	r2, #0
 8002312:	601a      	str	r2, [r3, #0]
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002318:	4b21      	ldr	r3, [pc, #132]	; (80023a0 <MX_TIM2_Init+0xa8>)
 800231a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800231e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002320:	4b1f      	ldr	r3, [pc, #124]	; (80023a0 <MX_TIM2_Init+0xa8>)
 8002322:	2200      	movs	r2, #0
 8002324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002326:	4b1e      	ldr	r3, [pc, #120]	; (80023a0 <MX_TIM2_Init+0xa8>)
 8002328:	2200      	movs	r2, #0
 800232a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800232c:	4b1c      	ldr	r3, [pc, #112]	; (80023a0 <MX_TIM2_Init+0xa8>)
 800232e:	f04f 32ff 	mov.w	r2, #4294967295
 8002332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <MX_TIM2_Init+0xa8>)
 8002336:	2200      	movs	r2, #0
 8002338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <MX_TIM2_Init+0xa8>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002340:	4817      	ldr	r0, [pc, #92]	; (80023a0 <MX_TIM2_Init+0xa8>)
 8002342:	f005 fc11 	bl	8007b68 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 800234c:	f000 fa92 	bl	8002874 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002350:	2307      	movs	r3, #7
 8002352:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002354:	2370      	movs	r3, #112	; 0x70
 8002356:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002358:	2300      	movs	r3, #0
 800235a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800235c:	2300      	movs	r3, #0
 800235e:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002364:	f107 030c 	add.w	r3, r7, #12
 8002368:	4619      	mov	r1, r3
 800236a:	480d      	ldr	r0, [pc, #52]	; (80023a0 <MX_TIM2_Init+0xa8>)
 800236c:	f005 fcc4 	bl	8007cf8 <HAL_TIM_SlaveConfigSynchro>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002376:	f000 fa7d 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800237a:	2300      	movs	r3, #0
 800237c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002382:	463b      	mov	r3, r7
 8002384:	4619      	mov	r1, r3
 8002386:	4806      	ldr	r0, [pc, #24]	; (80023a0 <MX_TIM2_Init+0xa8>)
 8002388:	f005 feac 	bl	80080e4 <HAL_TIMEx_MasterConfigSynchronization>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8002392:	f000 fa6f 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	3720      	adds	r7, #32
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	200003b4 	.word	0x200003b4

080023a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	2200      	movs	r2, #0
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	605a      	str	r2, [r3, #4]
 80023b4:	609a      	str	r2, [r3, #8]
 80023b6:	60da      	str	r2, [r3, #12]
 80023b8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023ba:	463b      	mov	r3, r7
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80023c4:	4b20      	ldr	r3, [pc, #128]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023c6:	4a21      	ldr	r2, [pc, #132]	; (800244c <MX_TIM4_Init+0xa8>)
 80023c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80023ca:	4b1f      	ldr	r3, [pc, #124]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d0:	4b1d      	ldr	r3, [pc, #116]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80023d6:	4b1c      	ldr	r3, [pc, #112]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023de:	4b1a      	ldr	r3, [pc, #104]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023e0:	2200      	movs	r2, #0
 80023e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e4:	4b18      	ldr	r3, [pc, #96]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80023ea:	4817      	ldr	r0, [pc, #92]	; (8002448 <MX_TIM4_Init+0xa4>)
 80023ec:	f005 fbbc 	bl	8007b68 <HAL_TIM_Base_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80023f6:	f000 fa3d 	bl	8002874 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80023fa:	2307      	movs	r3, #7
 80023fc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80023fe:	2370      	movs	r3, #112	; 0x70
 8002400:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800240e:	f107 030c 	add.w	r3, r7, #12
 8002412:	4619      	mov	r1, r3
 8002414:	480c      	ldr	r0, [pc, #48]	; (8002448 <MX_TIM4_Init+0xa4>)
 8002416:	f005 fc6f 	bl	8007cf8 <HAL_TIM_SlaveConfigSynchro>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d001      	beq.n	8002424 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002420:	f000 fa28 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002424:	2300      	movs	r3, #0
 8002426:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800242c:	463b      	mov	r3, r7
 800242e:	4619      	mov	r1, r3
 8002430:	4805      	ldr	r0, [pc, #20]	; (8002448 <MX_TIM4_Init+0xa4>)
 8002432:	f005 fe57 	bl	80080e4 <HAL_TIMEx_MasterConfigSynchronization>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d001      	beq.n	8002440 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800243c:	f000 fa1a 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002440:	bf00      	nop
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	20000400 	.word	0x20000400
 800244c:	40000800 	.word	0x40000800

08002450 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b084      	sub	sp, #16
 8002454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002456:	1d3b      	adds	r3, r7, #4
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002460:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <MX_TIM6_Init+0x68>)
 8002462:	4a16      	ldr	r2, [pc, #88]	; (80024bc <MX_TIM6_Init+0x6c>)
 8002464:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 8002466:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <MX_TIM6_Init+0x68>)
 8002468:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800246c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <MX_TIM6_Init+0x68>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002474:	4b10      	ldr	r3, [pc, #64]	; (80024b8 <MX_TIM6_Init+0x68>)
 8002476:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800247a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <MX_TIM6_Init+0x68>)
 800247e:	2280      	movs	r2, #128	; 0x80
 8002480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002482:	480d      	ldr	r0, [pc, #52]	; (80024b8 <MX_TIM6_Init+0x68>)
 8002484:	f005 fb70 	bl	8007b68 <HAL_TIM_Base_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800248e:	f000 f9f1 	bl	8002874 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002492:	2320      	movs	r3, #32
 8002494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	; (80024b8 <MX_TIM6_Init+0x68>)
 80024a0:	f005 fe20 	bl	80080e4 <HAL_TIMEx_MasterConfigSynchronization>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80024aa:	f000 f9e3 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	2000044c 	.word	0x2000044c
 80024bc:	40001000 	.word	0x40001000

080024c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <MX_UART4_Init+0x58>)
 80024c6:	4a15      	ldr	r2, [pc, #84]	; (800251c <MX_UART4_Init+0x5c>)
 80024c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024ca:	4b13      	ldr	r3, [pc, #76]	; (8002518 <MX_UART4_Init+0x58>)
 80024cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <MX_UART4_Init+0x58>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <MX_UART4_Init+0x58>)
 80024da:	2200      	movs	r2, #0
 80024dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <MX_UART4_Init+0x58>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <MX_UART4_Init+0x58>)
 80024e6:	220c      	movs	r2, #12
 80024e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ea:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <MX_UART4_Init+0x58>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f0:	4b09      	ldr	r3, [pc, #36]	; (8002518 <MX_UART4_Init+0x58>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f6:	4b08      	ldr	r3, [pc, #32]	; (8002518 <MX_UART4_Init+0x58>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024fc:	4b06      	ldr	r3, [pc, #24]	; (8002518 <MX_UART4_Init+0x58>)
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002502:	4805      	ldr	r0, [pc, #20]	; (8002518 <MX_UART4_Init+0x58>)
 8002504:	f005 fe7c 	bl	8008200 <HAL_UART_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800250e:	f000 f9b1 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	20000498 	.word	0x20000498
 800251c:	40004c00 	.word	0x40004c00

08002520 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002524:	4b14      	ldr	r3, [pc, #80]	; (8002578 <MX_UART7_Init+0x58>)
 8002526:	4a15      	ldr	r2, [pc, #84]	; (800257c <MX_UART7_Init+0x5c>)
 8002528:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800252a:	4b13      	ldr	r3, [pc, #76]	; (8002578 <MX_UART7_Init+0x58>)
 800252c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002530:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002532:	4b11      	ldr	r3, [pc, #68]	; (8002578 <MX_UART7_Init+0x58>)
 8002534:	2200      	movs	r2, #0
 8002536:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002538:	4b0f      	ldr	r3, [pc, #60]	; (8002578 <MX_UART7_Init+0x58>)
 800253a:	2200      	movs	r2, #0
 800253c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800253e:	4b0e      	ldr	r3, [pc, #56]	; (8002578 <MX_UART7_Init+0x58>)
 8002540:	2200      	movs	r2, #0
 8002542:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <MX_UART7_Init+0x58>)
 8002546:	220c      	movs	r2, #12
 8002548:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254a:	4b0b      	ldr	r3, [pc, #44]	; (8002578 <MX_UART7_Init+0x58>)
 800254c:	2200      	movs	r2, #0
 800254e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002550:	4b09      	ldr	r3, [pc, #36]	; (8002578 <MX_UART7_Init+0x58>)
 8002552:	2200      	movs	r2, #0
 8002554:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002556:	4b08      	ldr	r3, [pc, #32]	; (8002578 <MX_UART7_Init+0x58>)
 8002558:	2200      	movs	r2, #0
 800255a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800255c:	4b06      	ldr	r3, [pc, #24]	; (8002578 <MX_UART7_Init+0x58>)
 800255e:	2200      	movs	r2, #0
 8002560:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002562:	4805      	ldr	r0, [pc, #20]	; (8002578 <MX_UART7_Init+0x58>)
 8002564:	f005 fe4c 	bl	8008200 <HAL_UART_Init>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800256e:	f000 f981 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002572:	bf00      	nop
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	20000520 	.word	0x20000520
 800257c:	40007800 	.word	0x40007800

08002580 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002584:	4b14      	ldr	r3, [pc, #80]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 8002586:	4a15      	ldr	r2, [pc, #84]	; (80025dc <MX_USART3_UART_Init+0x5c>)
 8002588:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800258a:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 800258c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002590:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002592:	4b11      	ldr	r3, [pc, #68]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002598:	4b0f      	ldr	r3, [pc, #60]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800259e:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80025a4:	4b0c      	ldr	r3, [pc, #48]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025a6:	220c      	movs	r2, #12
 80025a8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025aa:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b0:	4b09      	ldr	r3, [pc, #36]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025bc:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025be:	2200      	movs	r2, #0
 80025c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80025c2:	4805      	ldr	r0, [pc, #20]	; (80025d8 <MX_USART3_UART_Init+0x58>)
 80025c4:	f005 fe1c 	bl	8008200 <HAL_UART_Init>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80025ce:	f000 f951 	bl	8002874 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200005a8 	.word	0x200005a8
 80025dc:	40004800 	.word	0x40004800

080025e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <MX_DMA_Init+0x48>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	4a0f      	ldr	r2, [pc, #60]	; (8002628 <MX_DMA_Init+0x48>)
 80025ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025f0:	6313      	str	r3, [r2, #48]	; 0x30
 80025f2:	4b0d      	ldr	r3, [pc, #52]	; (8002628 <MX_DMA_Init+0x48>)
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	607b      	str	r3, [r7, #4]
 80025fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2100      	movs	r1, #0
 8002602:	2038      	movs	r0, #56	; 0x38
 8002604:	f003 fc61 	bl	8005eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002608:	2038      	movs	r0, #56	; 0x38
 800260a:	f003 fc7a 	bl	8005f02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800260e:	2200      	movs	r2, #0
 8002610:	2100      	movs	r1, #0
 8002612:	2039      	movs	r0, #57	; 0x39
 8002614:	f003 fc59 	bl	8005eca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002618:	2039      	movs	r0, #57	; 0x39
 800261a:	f003 fc72 	bl	8005f02 <HAL_NVIC_EnableIRQ>

}
 800261e:	bf00      	nop
 8002620:	3708      	adds	r7, #8
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	bf00      	nop
 8002628:	40023800 	.word	0x40023800

0800262c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	605a      	str	r2, [r3, #4]
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	60da      	str	r2, [r3, #12]
 800263e:	611a      	str	r2, [r3, #16]
 8002640:	615a      	str	r2, [r3, #20]
 8002642:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002644:	4b28      	ldr	r3, [pc, #160]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002646:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800264a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <MX_FMC_Init+0xbc>)
 800264e:	4a27      	ldr	r2, [pc, #156]	; (80026ec <MX_FMC_Init+0xc0>)
 8002650:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002658:	4b23      	ldr	r3, [pc, #140]	; (80026e8 <MX_FMC_Init+0xbc>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002660:	2200      	movs	r2, #0
 8002662:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002664:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002666:	2210      	movs	r2, #16
 8002668:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800266a:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <MX_FMC_Init+0xbc>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002670:	4b1d      	ldr	r3, [pc, #116]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002676:	4b1c      	ldr	r3, [pc, #112]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <MX_FMC_Init+0xbc>)
 800267e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002682:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002684:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002686:	2200      	movs	r2, #0
 8002688:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800268a:	4b17      	ldr	r3, [pc, #92]	; (80026e8 <MX_FMC_Init+0xbc>)
 800268c:	2200      	movs	r2, #0
 800268e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002690:	4b15      	ldr	r3, [pc, #84]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002692:	2200      	movs	r2, #0
 8002694:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <MX_FMC_Init+0xbc>)
 8002698:	2200      	movs	r2, #0
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800269c:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <MX_FMC_Init+0xbc>)
 800269e:	2200      	movs	r2, #0
 80026a0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80026a2:	4b11      	ldr	r3, [pc, #68]	; (80026e8 <MX_FMC_Init+0xbc>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80026a8:	4b0f      	ldr	r3, [pc, #60]	; (80026e8 <MX_FMC_Init+0xbc>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80026ae:	230f      	movs	r3, #15
 80026b0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80026b2:	230f      	movs	r3, #15
 80026b4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80026b6:	23ff      	movs	r3, #255	; 0xff
 80026b8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80026ba:	230f      	movs	r3, #15
 80026bc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80026be:	2310      	movs	r3, #16
 80026c0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80026c2:	2311      	movs	r3, #17
 80026c4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80026ca:	1d3b      	adds	r3, r7, #4
 80026cc:	2200      	movs	r2, #0
 80026ce:	4619      	mov	r1, r3
 80026d0:	4805      	ldr	r0, [pc, #20]	; (80026e8 <MX_FMC_Init+0xbc>)
 80026d2:	f005 fa01 	bl	8007ad8 <HAL_SRAM_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 80026dc:	f000 f8ca 	bl	8002874 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80026e0:	bf00      	nop
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	20000630 	.word	0x20000630
 80026ec:	a0000104 	.word	0xa0000104

080026f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08e      	sub	sp, #56	; 0x38
 80026f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
 80026fe:	605a      	str	r2, [r3, #4]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	60da      	str	r2, [r3, #12]
 8002704:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002706:	4b55      	ldr	r3, [pc, #340]	; (800285c <MX_GPIO_Init+0x16c>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	4a54      	ldr	r2, [pc, #336]	; (800285c <MX_GPIO_Init+0x16c>)
 800270c:	f043 0320 	orr.w	r3, r3, #32
 8002710:	6313      	str	r3, [r2, #48]	; 0x30
 8002712:	4b52      	ldr	r3, [pc, #328]	; (800285c <MX_GPIO_Init+0x16c>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	623b      	str	r3, [r7, #32]
 800271c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800271e:	4b4f      	ldr	r3, [pc, #316]	; (800285c <MX_GPIO_Init+0x16c>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002722:	4a4e      	ldr	r2, [pc, #312]	; (800285c <MX_GPIO_Init+0x16c>)
 8002724:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002728:	6313      	str	r3, [r2, #48]	; 0x30
 800272a:	4b4c      	ldr	r3, [pc, #304]	; (800285c <MX_GPIO_Init+0x16c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	4b49      	ldr	r3, [pc, #292]	; (800285c <MX_GPIO_Init+0x16c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	4a48      	ldr	r2, [pc, #288]	; (800285c <MX_GPIO_Init+0x16c>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	6313      	str	r3, [r2, #48]	; 0x30
 8002742:	4b46      	ldr	r3, [pc, #280]	; (800285c <MX_GPIO_Init+0x16c>)
 8002744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	61bb      	str	r3, [r7, #24]
 800274c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	4b43      	ldr	r3, [pc, #268]	; (800285c <MX_GPIO_Init+0x16c>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002752:	4a42      	ldr	r2, [pc, #264]	; (800285c <MX_GPIO_Init+0x16c>)
 8002754:	f043 0301 	orr.w	r3, r3, #1
 8002758:	6313      	str	r3, [r2, #48]	; 0x30
 800275a:	4b40      	ldr	r3, [pc, #256]	; (800285c <MX_GPIO_Init+0x16c>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002766:	4b3d      	ldr	r3, [pc, #244]	; (800285c <MX_GPIO_Init+0x16c>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <MX_GPIO_Init+0x16c>)
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	6313      	str	r3, [r2, #48]	; 0x30
 8002772:	4b3a      	ldr	r3, [pc, #232]	; (800285c <MX_GPIO_Init+0x16c>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	4b37      	ldr	r3, [pc, #220]	; (800285c <MX_GPIO_Init+0x16c>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	4a36      	ldr	r2, [pc, #216]	; (800285c <MX_GPIO_Init+0x16c>)
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	6313      	str	r3, [r2, #48]	; 0x30
 800278a:	4b34      	ldr	r3, [pc, #208]	; (800285c <MX_GPIO_Init+0x16c>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002796:	4b31      	ldr	r3, [pc, #196]	; (800285c <MX_GPIO_Init+0x16c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a30      	ldr	r2, [pc, #192]	; (800285c <MX_GPIO_Init+0x16c>)
 800279c:	f043 0308 	orr.w	r3, r3, #8
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b2e      	ldr	r3, [pc, #184]	; (800285c <MX_GPIO_Init+0x16c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80027ae:	4b2b      	ldr	r3, [pc, #172]	; (800285c <MX_GPIO_Init+0x16c>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	4a2a      	ldr	r2, [pc, #168]	; (800285c <MX_GPIO_Init+0x16c>)
 80027b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027b8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ba:	4b28      	ldr	r3, [pc, #160]	; (800285c <MX_GPIO_Init+0x16c>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	2108      	movs	r1, #8
 80027ca:	4825      	ldr	r0, [pc, #148]	; (8002860 <MX_GPIO_Init+0x170>)
 80027cc:	f004 f862 	bl	8006894 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS2_Pin;
 80027d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027d6:	2300      	movs	r3, #0
 80027d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027da:	2300      	movs	r3, #0
 80027dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS2_GPIO_Port, &GPIO_InitStruct);
 80027de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027e2:	4619      	mov	r1, r3
 80027e4:	481f      	ldr	r0, [pc, #124]	; (8002864 <MX_GPIO_Init+0x174>)
 80027e6:	f003 fe91 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 80027ea:	2302      	movs	r3, #2
 80027ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ee:	2300      	movs	r3, #0
 80027f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 80027f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027fa:	4619      	mov	r1, r3
 80027fc:	481a      	ldr	r0, [pc, #104]	; (8002868 <MX_GPIO_Init+0x178>)
 80027fe:	f003 fe85 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8002802:	2308      	movs	r3, #8
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002806:	2301      	movs	r3, #1
 8002808:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280a:	2300      	movs	r3, #0
 800280c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280e:	2300      	movs	r3, #0
 8002810:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8002812:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002816:	4619      	mov	r1, r3
 8002818:	4811      	ldr	r0, [pc, #68]	; (8002860 <MX_GPIO_Init+0x170>)
 800281a:	f003 fe77 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pins : SHORTED_TO_PB11_Pin SHORTED_TO_PB10_Pin BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = SHORTED_TO_PB11_Pin|SHORTED_TO_PB10_Pin|BAT_12V_MEASURE_Pin;
 800281e:	f24c 0308 	movw	r3, #49160	; 0xc008
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002824:	2300      	movs	r3, #0
 8002826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002828:	2300      	movs	r3, #0
 800282a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800282c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002830:	4619      	mov	r1, r3
 8002832:	480e      	ldr	r0, [pc, #56]	; (800286c <MX_GPIO_Init+0x17c>)
 8002834:	f003 fe6a 	bl	800650c <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin BUTTON_2_Pin BUTTON_1_Pin
                           HV_REQUEST_Pin DRIVE_REQUEST_Pin GASP_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_1_Pin
 8002838:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800283c:	627b      	str	r3, [r7, #36]	; 0x24
                          |HV_REQUEST_Pin|DRIVE_REQUEST_Pin|GASP_INTERRUPT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283e:	2300      	movs	r3, #0
 8002840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800284a:	4619      	mov	r1, r3
 800284c:	4808      	ldr	r0, [pc, #32]	; (8002870 <MX_GPIO_Init+0x180>)
 800284e:	f003 fe5d 	bl	800650c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002852:	bf00      	nop
 8002854:	3738      	adds	r7, #56	; 0x38
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	40023800 	.word	0x40023800
 8002860:	40020000 	.word	0x40020000
 8002864:	40021400 	.word	0x40021400
 8002868:	40020800 	.word	0x40020800
 800286c:	40020400 	.word	0x40020400
 8002870:	40021800 	.word	0x40021800

08002874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002878:	b672      	cpsid	i
}
 800287a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800287c:	e7fe      	b.n	800287c <Error_Handler+0x8>
	...

08002880 <init_sensors>:

/************ Timer ************/
unsigned int discrepancy_timer_ms = 0;


void init_sensors(){
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <init_sensors+0x4c>)
 8002886:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800288a:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 800288c:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <init_sensors+0x4c>)
 800288e:	2200      	movs	r2, #0
 8002890:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <init_sensors+0x4c>)
 8002894:	2201      	movs	r2, #1
 8002896:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 8002898:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <init_sensors+0x50>)
 800289a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800289e:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 80028a0:	4b0b      	ldr	r3, [pc, #44]	; (80028d0 <init_sensors+0x50>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <init_sensors+0x50>)
 80028a8:	2201      	movs	r2, #1
 80028aa:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 80028ac:	4b09      	ldr	r3, [pc, #36]	; (80028d4 <init_sensors+0x54>)
 80028ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80028b2:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 80028b4:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <init_sensors+0x54>)
 80028b6:	2200      	movs	r2, #0
 80028b8:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 80028ba:	4b06      	ldr	r3, [pc, #24]	; (80028d4 <init_sensors+0x54>)
 80028bc:	2201      	movs	r2, #1
 80028be:	80da      	strh	r2, [r3, #6]
}
 80028c0:	bf00      	nop
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	2000069c 	.word	0x2000069c
 80028d0:	200006a8 	.word	0x200006a8
 80028d4:	200006b4 	.word	0x200006b4

080028d8 <select_adc_channel>:
// APPS
uint8_t THROTTLE_MULTIPLIER = 100;
const uint8_t THROTTLE_MAP[8] = { 95, 71, 59, 47, 35, 23, 11, 5 };

void select_adc_channel(ADC_HandleTypeDef *hadc, ADC_CHAN channel)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 80028e4:	f107 0308 	add.w	r3, r7, #8
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]
 80028f0:	60da      	str	r2, [r3, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
    switch (channel)
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	2b04      	cmp	r3, #4
 80028fa:	d844      	bhi.n	8002986 <select_adc_channel+0xae>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <select_adc_channel+0x2c>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002919 	.word	0x08002919
 8002908:	0800292f 	.word	0x0800292f
 800290c:	08002945 	.word	0x08002945
 8002910:	0800295b 	.word	0x0800295b
 8002914:	08002971 	.word	0x08002971
    {
        case APPS1:
            sConfig.Channel = ADC_CHANNEL_10;
 8002918:	230a      	movs	r3, #10
 800291a:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800291c:	2301      	movs	r3, #1
 800291e:	60fb      	str	r3, [r7, #12]

			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002920:	f107 0308 	add.w	r3, r7, #8
 8002924:	4619      	mov	r1, r3
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f002 f94c 	bl	8004bc4 <HAL_ADC_ConfigChannel>
			{
			}
			break;
 800292c:	e02c      	b.n	8002988 <select_adc_channel+0xb0>

        case APPS2:
			sConfig.Channel = ADC_CHANNEL_8;
 800292e:	2308      	movs	r3, #8
 8002930:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002932:	2301      	movs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f002 f941 	bl	8004bc4 <HAL_ADC_ConfigChannel>
			{
			}
			break;
 8002942:	e021      	b.n	8002988 <select_adc_channel+0xb0>
        case BSE:
			sConfig.Channel = ADC_CHANNEL_15;
 8002944:	230f      	movs	r3, #15
 8002946:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002948:	2301      	movs	r3, #1
 800294a:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 800294c:	f107 0308 	add.w	r3, r7, #8
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f002 f936 	bl	8004bc4 <HAL_ADC_ConfigChannel>
			{
			}
			break;
 8002958:	e016      	b.n	8002988 <select_adc_channel+0xb0>
        case KNOB1:
			sConfig.Channel = ADC_CHANNEL_13;
 800295a:	230d      	movs	r3, #13
 800295c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 800295e:	2301      	movs	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	4619      	mov	r1, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f002 f92b 	bl	8004bc4 <HAL_ADC_ConfigChannel>
			{
			}
			break;
 800296e:	e00b      	b.n	8002988 <select_adc_channel+0xb0>
        case KNOB2:
			sConfig.Channel = ADC_CHANNEL_12;
 8002970:	230c      	movs	r3, #12
 8002972:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002974:	2301      	movs	r3, #1
 8002976:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f002 f920 	bl	8004bc4 <HAL_ADC_ConfigChannel>
			{
			}
			break;
 8002984:	e000      	b.n	8002988 <select_adc_channel+0xb0>
        default:
            break;
 8002986:	bf00      	nop
    }
}
 8002988:	bf00      	nop
 800298a:	3718      	adds	r7, #24
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <get_adc_conversion>:

uint32_t get_adc_conversion(ADC_HandleTypeDef *hadc, ADC_CHAN channel) {
 8002990:	b580      	push	{r7, lr}
 8002992:	b084      	sub	sp, #16
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	460b      	mov	r3, r1
 800299a:	70fb      	strb	r3, [r7, #3]

	select_adc_channel(hadc, channel);
 800299c:	78fb      	ldrb	r3, [r7, #3]
 800299e:	4619      	mov	r1, r3
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7ff ff99 	bl	80028d8 <select_adc_channel>

	uint32_t conversion;

	HAL_ADC_Start(hadc);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f001 ffa6 	bl	80048f8 <HAL_ADC_Start>

	// Wait for the conversion to complete
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 80029ac:	f04f 31ff 	mov.w	r1, #4294967295
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f002 f86f 	bl	8004a94 <HAL_ADC_PollForConversion>

	// Get the ADC value
	conversion = HAL_ADC_GetValue(hadc);
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f002 f8f7 	bl	8004baa <HAL_ADC_GetValue>
 80029bc:	60f8      	str	r0, [r7, #12]

	return conversion;
 80029be:	68fb      	ldr	r3, [r7, #12]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <run_calibration>:


// Update sensors

void run_calibration() {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    update_minmax(&throttle1);
 80029cc:	4805      	ldr	r0, [pc, #20]	; (80029e4 <run_calibration+0x1c>)
 80029ce:	f000 f963 	bl	8002c98 <update_minmax>
    update_minmax(&throttle2);
 80029d2:	4805      	ldr	r0, [pc, #20]	; (80029e8 <run_calibration+0x20>)
 80029d4:	f000 f960 	bl	8002c98 <update_minmax>
    update_minmax(&brake);
 80029d8:	4804      	ldr	r0, [pc, #16]	; (80029ec <run_calibration+0x24>)
 80029da:	f000 f95d 	bl	8002c98 <update_minmax>
}
 80029de:	bf00      	nop
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	2000069c 	.word	0x2000069c
 80029e8:	200006a8 	.word	0x200006a8
 80029ec:	200006b4 	.word	0x200006b4

080029f0 <update_sensor_vals>:

void update_sensor_vals(ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc3) {
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
    throttle1.raw = get_adc_conversion(hadc1, APPS1);
 80029fa:	2100      	movs	r1, #0
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	f7ff ffc7 	bl	8002990 <get_adc_conversion>
 8002a02:	4603      	mov	r3, r0
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	4b1c      	ldr	r3, [pc, #112]	; (8002a78 <update_sensor_vals+0x88>)
 8002a08:	801a      	strh	r2, [r3, #0]
    update_percent(&throttle1);
 8002a0a:	481b      	ldr	r0, [pc, #108]	; (8002a78 <update_sensor_vals+0x88>)
 8002a0c:	f000 f922 	bl	8002c54 <update_percent>
    throttle2.raw = get_adc_conversion(hadc3, APPS2);
 8002a10:	2101      	movs	r1, #1
 8002a12:	6838      	ldr	r0, [r7, #0]
 8002a14:	f7ff ffbc 	bl	8002990 <get_adc_conversion>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <update_sensor_vals+0x8c>)
 8002a1e:	801a      	strh	r2, [r3, #0]
    update_percent(&throttle2);
 8002a20:	4816      	ldr	r0, [pc, #88]	; (8002a7c <update_sensor_vals+0x8c>)
 8002a22:	f000 f917 	bl	8002c54 <update_percent>
    brake.raw = get_adc_conversion(hadc3, BSE);
 8002a26:	2102      	movs	r1, #2
 8002a28:	6838      	ldr	r0, [r7, #0]
 8002a2a:	f7ff ffb1 	bl	8002990 <get_adc_conversion>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	b29a      	uxth	r2, r3
 8002a32:	4b13      	ldr	r3, [pc, #76]	; (8002a80 <update_sensor_vals+0x90>)
 8002a34:	801a      	strh	r2, [r3, #0]
    update_percent(&brake);
 8002a36:	4812      	ldr	r0, [pc, #72]	; (8002a80 <update_sensor_vals+0x90>)
 8002a38:	f000 f90c 	bl	8002c54 <update_percent>
     * be immediately stopped completely.
     *
     * It is not necessary to Open the Shutdown Circuit, the motor
     * controller(s) stopping the power to the Motor(s) is sufficient.
     */
    if (has_discrepancy()) {
 8002a3c:	f000 f8ae 	bl	8002b9c <has_discrepancy>
 8002a40:	4603      	mov	r3, r0
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d011      	beq.n	8002a6a <update_sensor_vals+0x7a>
        discrepancy_timer_ms += TMR1_PERIOD_MS;
 8002a46:	4b0f      	ldr	r3, [pc, #60]	; (8002a84 <update_sensor_vals+0x94>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	3314      	adds	r3, #20
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	; (8002a84 <update_sensor_vals+0x94>)
 8002a4e:	6013      	str	r3, [r2, #0]
        if (discrepancy_timer_ms > MAX_DISCREPANCY_MS && state == DRIVE) {
 8002a50:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <update_sensor_vals+0x94>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b64      	cmp	r3, #100	; 0x64
 8002a56:	d90b      	bls.n	8002a70 <update_sensor_vals+0x80>
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <update_sensor_vals+0x98>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b03      	cmp	r3, #3
 8002a60:	d106      	bne.n	8002a70 <update_sensor_vals+0x80>
            report_fault(SENSOR_DISCREPANCY);
 8002a62:	2005      	movs	r0, #5
 8002a64:	f7ff f82e 	bl	8001ac4 <report_fault>
        }
    } else {
        discrepancy_timer_ms = 0;
    }
}
 8002a68:	e002      	b.n	8002a70 <update_sensor_vals+0x80>
        discrepancy_timer_ms = 0;
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <update_sensor_vals+0x94>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	601a      	str	r2, [r3, #0]
}
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	2000069c 	.word	0x2000069c
 8002a7c:	200006a8 	.word	0x200006a8
 8002a80:	200006b4 	.word	0x200006b4
 8002a84:	200006c0 	.word	0x200006c0
 8002a88:	2000008d 	.word	0x2000008d

08002a8c <requested_throttle>:

uint16_t requested_throttle(){
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
    temp_attenuate();
 8002a92:	f000 f82b 	bl	8002aec <temp_attenuate>


    uint32_t throttle = ((uint32_t)throttle1.percent * MAX_TORQUE) / 100;  //upscale for MC code
 8002a96:	4b12      	ldr	r3, [pc, #72]	; (8002ae0 <requested_throttle+0x54>)
 8002a98:	891b      	ldrh	r3, [r3, #8]
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002aa0:	fb02 f303 	mul.w	r3, r2, r3
 8002aa4:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <requested_throttle+0x58>)
 8002aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	607b      	str	r3, [r7, #4]

    throttle = (throttle * THROTTLE_MULTIPLIER) / 100;       //attenuate for temperature
 8002aae:	4b0e      	ldr	r3, [pc, #56]	; (8002ae8 <requested_throttle+0x5c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	fb02 f303 	mul.w	r3, r2, r3
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <requested_throttle+0x58>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	607b      	str	r3, [r7, #4]

    if (throttle >= 5.0) {			//case 1: if the pedal is actually being pressed return on a 1:1 scale
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2b04      	cmp	r3, #4
 8002ac8:	d902      	bls.n	8002ad0 <requested_throttle+0x44>
    	return (uint16_t)throttle;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	e003      	b.n	8002ad8 <requested_throttle+0x4c>
    } else {						//case 2: if we don't know if it's being pressed or just car shaking
    	return (uint16_t)throttle / 2;	//return on 1:1/2 scale
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	b29b      	uxth	r3, r3
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	b29b      	uxth	r3, r3
    }
	return 1;
}
 8002ad8:	4618      	mov	r0, r3
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	2000069c 	.word	0x2000069c
 8002ae4:	51eb851f 	.word	0x51eb851f
 8002ae8:	2000008e 	.word	0x2000008e

08002aec <temp_attenuate>:

void temp_attenuate() {
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
    int t = PACK_TEMP - 50;
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <temp_attenuate+0x4c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	b2db      	uxtb	r3, r3
 8002af8:	3b32      	subs	r3, #50	; 0x32
 8002afa:	607b      	str	r3, [r7, #4]
    if (t < 0) {
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	da03      	bge.n	8002b0a <temp_attenuate+0x1e>
        THROTTLE_MULTIPLIER = 100;
 8002b02:	4b0e      	ldr	r3, [pc, #56]	; (8002b3c <temp_attenuate+0x50>)
 8002b04:	2264      	movs	r2, #100	; 0x64
 8002b06:	701a      	strb	r2, [r3, #0]
    } else if (t < 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
    } else if (t >= 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
    }
}
 8002b08:	e00f      	b.n	8002b2a <temp_attenuate+0x3e>
    } else if (t < 8) {
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b07      	cmp	r3, #7
 8002b0e:	dc06      	bgt.n	8002b1e <temp_attenuate+0x32>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
 8002b10:	4a0b      	ldr	r2, [pc, #44]	; (8002b40 <temp_attenuate+0x54>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	781a      	ldrb	r2, [r3, #0]
 8002b18:	4b08      	ldr	r3, [pc, #32]	; (8002b3c <temp_attenuate+0x50>)
 8002b1a:	701a      	strb	r2, [r3, #0]
}
 8002b1c:	e005      	b.n	8002b2a <temp_attenuate+0x3e>
    } else if (t >= 8) {
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2b07      	cmp	r3, #7
 8002b22:	dd02      	ble.n	8002b2a <temp_attenuate+0x3e>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
 8002b24:	2205      	movs	r2, #5
 8002b26:	4b05      	ldr	r3, [pc, #20]	; (8002b3c <temp_attenuate+0x50>)
 8002b28:	701a      	strb	r2, [r3, #0]
}
 8002b2a:	bf00      	nop
 8002b2c:	370c      	adds	r7, #12
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	2000010d 	.word	0x2000010d
 8002b3c:	2000008e 	.word	0x2000008e
 8002b40:	080097cc 	.word	0x080097cc

08002b44 <sensors_calibrated>:

bool sensors_calibrated(){
 8002b44:	b480      	push	{r7}
 8002b46:	af00      	add	r7, sp, #0
    if(throttle2.range < APPS1_MIN_RANGE) return 0;
 8002b48:	4b09      	ldr	r3, [pc, #36]	; (8002b70 <sensors_calibrated+0x2c>)
 8002b4a:	88db      	ldrh	r3, [r3, #6]
 8002b4c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002b50:	d201      	bcs.n	8002b56 <sensors_calibrated+0x12>
 8002b52:	2300      	movs	r3, #0
 8002b54:	e007      	b.n	8002b66 <sensors_calibrated+0x22>
    if(brake.range < BRAKE_MIN_RANGE) return 0;
 8002b56:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <sensors_calibrated+0x30>)
 8002b58:	88db      	ldrh	r3, [r3, #6]
 8002b5a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8002b5e:	d201      	bcs.n	8002b64 <sensors_calibrated+0x20>
 8002b60:	2300      	movs	r3, #0
 8002b62:	e000      	b.n	8002b66 <sensors_calibrated+0x22>

    return 1;
 8002b64:	2301      	movs	r3, #1
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	200006a8 	.word	0x200006a8
 8002b74:	200006b4 	.word	0x200006b4

08002b78 <brake_mashed>:

bool braking(){
    return brake.raw > BRAKE_LIGHT_THRESHOLD;
}

bool brake_mashed(){
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0
    return brake.raw > RTD_BRAKE_THRESHOLD;
 8002b7c:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <brake_mashed+0x20>)
 8002b7e:	881b      	ldrh	r3, [r3, #0]
 8002b80:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b84:	bf8c      	ite	hi
 8002b86:	2301      	movhi	r3, #1
 8002b88:	2300      	movls	r3, #0
 8002b8a:	b2db      	uxtb	r3, r3
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	200006b4 	.word	0x200006b4

08002b9c <has_discrepancy>:

// check differential between the throttle sensors
// returns true only if the sensor discrepancy is > 10%
// Note: after verifying there's no discrepancy, can use either sensor(1 or 2) for remaining checks
bool has_discrepancy() {
 8002b9c:	b480      	push	{r7}
 8002b9e:	af00      	add	r7, sp, #0
    if(abs((int)throttle1.percent - (int)throttle2.percent) > 10) return 1;  //percentage discrepancy
 8002ba0:	4b15      	ldr	r3, [pc, #84]	; (8002bf8 <has_discrepancy+0x5c>)
 8002ba2:	891b      	ldrh	r3, [r3, #8]
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <has_discrepancy+0x60>)
 8002ba8:	891b      	ldrh	r3, [r3, #8]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bfb8      	it	lt
 8002bb0:	425b      	neglt	r3, r3
 8002bb2:	2b0a      	cmp	r3, #10
 8002bb4:	dd01      	ble.n	8002bba <has_discrepancy+0x1e>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e019      	b.n	8002bee <has_discrepancy+0x52>

    return (throttle1.raw < APPS_OPEN_THRESH)
 8002bba:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <has_discrepancy+0x5c>)
 8002bbc:	881b      	ldrh	r3, [r3, #0]
        || (throttle1.raw > APPS_SHORT_THRESH)
        || (throttle2.raw < APPS_OPEN_THRESH)
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 8002bbe:	2bc7      	cmp	r3, #199	; 0xc7
 8002bc0:	d90f      	bls.n	8002be2 <has_discrepancy+0x46>
        || (throttle1.raw > APPS_SHORT_THRESH)
 8002bc2:	4b0d      	ldr	r3, [pc, #52]	; (8002bf8 <has_discrepancy+0x5c>)
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d809      	bhi.n	8002be2 <has_discrepancy+0x46>
        || (throttle2.raw < APPS_OPEN_THRESH)
 8002bce:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <has_discrepancy+0x60>)
 8002bd0:	881b      	ldrh	r3, [r3, #0]
 8002bd2:	2bc7      	cmp	r3, #199	; 0xc7
 8002bd4:	d905      	bls.n	8002be2 <has_discrepancy+0x46>
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <has_discrepancy+0x60>)
 8002bd8:	881b      	ldrh	r3, [r3, #0]
 8002bda:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d901      	bls.n	8002be6 <has_discrepancy+0x4a>
 8002be2:	2301      	movs	r3, #1
 8002be4:	e000      	b.n	8002be8 <has_discrepancy+0x4c>
 8002be6:	2300      	movs	r3, #0
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	b2db      	uxtb	r3, r3
	return false;

}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr
 8002bf8:	2000069c 	.word	0x2000069c
 8002bfc:	200006a8 	.word	0x200006a8

08002c00 <brake_implausible>:

// check for soft BSPD
// see EV.5.7 of FSAE 2022 rulebook
bool brake_implausible() {
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0
    if (error == BRAKE_IMPLAUSIBLE) {
 8002c04:	4b10      	ldr	r3, [pc, #64]	; (8002c48 <brake_implausible+0x48>)
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d107      	bne.n	8002c1e <brake_implausible+0x1e>
        // once brake implausibility detected,
        // can only revert to normal if throttle unapplied
        return !(throttle1.percent <= APPS1_BSPD_RESET);
 8002c0e:	4b0f      	ldr	r3, [pc, #60]	; (8002c4c <brake_implausible+0x4c>)
 8002c10:	891b      	ldrh	r3, [r3, #8]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	bf8c      	ite	hi
 8002c16:	2301      	movhi	r3, #1
 8002c18:	2300      	movls	r3, #0
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	e00e      	b.n	8002c3c <brake_implausible+0x3c>
    }

    // if both brake and throttle applied, brake implausible
    //return (temp_brake > 0 && temp_throttle > throttle_range * 0.25);
    return (brake.raw >= BRAKE_BSPD_THRESHOLD && throttle1.percent > APPS1_BSPD_THRESHOLD);
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <brake_implausible+0x50>)
 8002c20:	881b      	ldrh	r3, [r3, #0]
 8002c22:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002c26:	d305      	bcc.n	8002c34 <brake_implausible+0x34>
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <brake_implausible+0x4c>)
 8002c2a:	891b      	ldrh	r3, [r3, #8]
 8002c2c:	2b19      	cmp	r3, #25
 8002c2e:	d901      	bls.n	8002c34 <brake_implausible+0x34>
 8002c30:	2301      	movs	r3, #1
 8002c32:	e000      	b.n	8002c36 <brake_implausible+0x36>
 8002c34:	2300      	movs	r3, #0
 8002c36:	f003 0301 	and.w	r3, r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
	return false;
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	20000212 	.word	0x20000212
 8002c4c:	2000069c 	.word	0x2000069c
 8002c50:	200006b4 	.word	0x200006b4

08002c54 <update_percent>:

void update_percent(CALIBRATED_SENSOR_t* sensor){
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    uint32_t raw = (uint32_t)clamp(sensor->raw, sensor->min, sensor->max);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	8818      	ldrh	r0, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	8859      	ldrh	r1, [r3, #2]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	889b      	ldrh	r3, [r3, #4]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f000 f842 	bl	8002cf2 <clamp>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	60fb      	str	r3, [r7, #12]
    sensor->percent = (uint16_t)((100*(raw-sensor->min))/((sensor->range)));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	885b      	ldrh	r3, [r3, #2]
 8002c76:	461a      	mov	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	2264      	movs	r2, #100	; 0x64
 8002c7e:	fb02 f303 	mul.w	r3, r2, r3
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	88d2      	ldrh	r2, [r2, #6]
 8002c86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	811a      	strh	r2, [r3, #8]
}
 8002c90:	bf00      	nop
 8002c92:	3710      	adds	r7, #16
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <update_minmax>:

void update_minmax(CALIBRATED_SENSOR_t* sensor){
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
    if (sensor->raw > sensor->max) sensor->max = sensor->raw;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	881a      	ldrh	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	889b      	ldrh	r3, [r3, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d904      	bls.n	8002cb6 <update_minmax+0x1e>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	881a      	ldrh	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	809a      	strh	r2, [r3, #4]
 8002cb4:	e009      	b.n	8002cca <update_minmax+0x32>
    else if (sensor->raw < sensor->min) sensor->min = sensor->raw;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	881a      	ldrh	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	885b      	ldrh	r3, [r3, #2]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d203      	bcs.n	8002cca <update_minmax+0x32>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	881a      	ldrh	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	805a      	strh	r2, [r3, #2]
    if(sensor->max > sensor->min) sensor->range = sensor->max - sensor->min;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	889a      	ldrh	r2, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	885b      	ldrh	r3, [r3, #2]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d907      	bls.n	8002ce6 <update_minmax+0x4e>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	889a      	ldrh	r2, [r3, #4]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	885b      	ldrh	r3, [r3, #2]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	80da      	strh	r2, [r3, #6]
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr

08002cf2 <clamp>:

uint16_t clamp(uint16_t in, uint16_t min, uint16_t max){
 8002cf2:	b480      	push	{r7}
 8002cf4:	b083      	sub	sp, #12
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	80fb      	strh	r3, [r7, #6]
 8002cfc:	460b      	mov	r3, r1
 8002cfe:	80bb      	strh	r3, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	807b      	strh	r3, [r7, #2]
    if(in > max) return max;
 8002d04:	88fa      	ldrh	r2, [r7, #6]
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d901      	bls.n	8002d10 <clamp+0x1e>
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	e006      	b.n	8002d1e <clamp+0x2c>
    if(in < min) return min;
 8002d10:	88fa      	ldrh	r2, [r7, #6]
 8002d12:	88bb      	ldrh	r3, [r7, #4]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d201      	bcs.n	8002d1c <clamp+0x2a>
 8002d18:	88bb      	ldrh	r3, [r7, #4]
 8002d1a:	e000      	b.n	8002d1e <clamp+0x2c>
    return in;
 8002d1c:	88fb      	ldrh	r3, [r7, #6]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr

08002d2a <print>:
#include "serial_print.h"

void print(char *str) {
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
	...

08002d40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_MspInit+0x44>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	4a0e      	ldr	r2, [pc, #56]	; (8002d84 <HAL_MspInit+0x44>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6413      	str	r3, [r2, #64]	; 0x40
 8002d52:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_MspInit+0x44>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	607b      	str	r3, [r7, #4]
 8002d5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_MspInit+0x44>)
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_MspInit+0x44>)
 8002d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d68:	6453      	str	r3, [r2, #68]	; 0x44
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_MspInit+0x44>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b08c      	sub	sp, #48	; 0x30
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d90:	f107 031c 	add.w	r3, r7, #28
 8002d94:	2200      	movs	r2, #0
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	605a      	str	r2, [r3, #4]
 8002d9a:	609a      	str	r2, [r3, #8]
 8002d9c:	60da      	str	r2, [r3, #12]
 8002d9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a5b      	ldr	r2, [pc, #364]	; (8002f14 <HAL_ADC_MspInit+0x18c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d154      	bne.n	8002e54 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002daa:	4b5b      	ldr	r3, [pc, #364]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dae:	4a5a      	ldr	r2, [pc, #360]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6453      	str	r3, [r2, #68]	; 0x44
 8002db6:	4b58      	ldr	r3, [pc, #352]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dc2:	4b55      	ldr	r3, [pc, #340]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	4a54      	ldr	r2, [pc, #336]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002dc8:	f043 0304 	orr.w	r3, r3, #4
 8002dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dce:	4b52      	ldr	r3, [pc, #328]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 8002dda:	230d      	movs	r3, #13
 8002ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002dde:	2303      	movs	r3, #3
 8002de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de6:	f107 031c 	add.w	r3, r7, #28
 8002dea:	4619      	mov	r1, r3
 8002dec:	484b      	ldr	r0, [pc, #300]	; (8002f1c <HAL_ADC_MspInit+0x194>)
 8002dee:	f003 fb8d 	bl	800650c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002df2:	4b4b      	ldr	r3, [pc, #300]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002df4:	4a4b      	ldr	r2, [pc, #300]	; (8002f24 <HAL_ADC_MspInit+0x19c>)
 8002df6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002df8:	4b49      	ldr	r3, [pc, #292]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dfe:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e04:	4b46      	ldr	r3, [pc, #280]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002e0a:	4b45      	ldr	r3, [pc, #276]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e12:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002e22:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e28:	4b3d      	ldr	r3, [pc, #244]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002e2e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e30:	4b3b      	ldr	r3, [pc, #236]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002e36:	483a      	ldr	r0, [pc, #232]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e38:	f003 f87e 	bl	8005f38 <HAL_DMA_Init>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d001      	beq.n	8002e46 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002e42:	f7ff fd17 	bl	8002874 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a35      	ldr	r2, [pc, #212]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8002e4c:	4a34      	ldr	r2, [pc, #208]	; (8002f20 <HAL_ADC_MspInit+0x198>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002e52:	e05b      	b.n	8002f0c <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a33      	ldr	r2, [pc, #204]	; (8002f28 <HAL_ADC_MspInit+0x1a0>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d156      	bne.n	8002f0c <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002e5e:	4b2e      	ldr	r3, [pc, #184]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a2d      	ldr	r2, [pc, #180]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002e64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b2b      	ldr	r3, [pc, #172]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	613b      	str	r3, [r7, #16]
 8002e74:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e76:	4b28      	ldr	r3, [pc, #160]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	4a27      	ldr	r2, [pc, #156]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002e7c:	f043 0320 	orr.w	r3, r3, #32
 8002e80:	6313      	str	r3, [r2, #48]	; 0x30
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_ADC_MspInit+0x190>)
 8002e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSE_Pin|APP2_Pin;
 8002e8e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e94:	2303      	movs	r3, #3
 8002e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002e9c:	f107 031c 	add.w	r3, r7, #28
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4822      	ldr	r0, [pc, #136]	; (8002f2c <HAL_ADC_MspInit+0x1a4>)
 8002ea4:	f003 fb32 	bl	800650c <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8002ea8:	4b21      	ldr	r3, [pc, #132]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002eaa:	4a22      	ldr	r2, [pc, #136]	; (8002f34 <HAL_ADC_MspInit+0x1ac>)
 8002eac:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8002eae:	4b20      	ldr	r3, [pc, #128]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002eb0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002eb4:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb6:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002ec4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ec8:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002eca:	4b19      	ldr	r3, [pc, #100]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002ecc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ed0:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002ed4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ed8:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002eda:	4b15      	ldr	r3, [pc, #84]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ee0:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002ee2:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002ee4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ee8:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002eea:	4b11      	ldr	r3, [pc, #68]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002ef0:	480f      	ldr	r0, [pc, #60]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002ef2:	f003 f821 	bl	8005f38 <HAL_DMA_Init>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d001      	beq.n	8002f00 <HAL_ADC_MspInit+0x178>
      Error_Handler();
 8002efc:	f7ff fcba 	bl	8002874 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a0b      	ldr	r2, [pc, #44]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
 8002f06:	4a0a      	ldr	r2, [pc, #40]	; (8002f30 <HAL_ADC_MspInit+0x1a8>)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002f0c:	bf00      	nop
 8002f0e:	3730      	adds	r7, #48	; 0x30
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40012000 	.word	0x40012000
 8002f18:	40023800 	.word	0x40023800
 8002f1c:	40020800 	.word	0x40020800
 8002f20:	200002a4 	.word	0x200002a4
 8002f24:	40026410 	.word	0x40026410
 8002f28:	40012200 	.word	0x40012200
 8002f2c:	40021400 	.word	0x40021400
 8002f30:	20000304 	.word	0x20000304
 8002f34:	40026428 	.word	0x40026428

08002f38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b08c      	sub	sp, #48	; 0x30
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f40:	f107 031c 	add.w	r3, r7, #28
 8002f44:	2200      	movs	r2, #0
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	605a      	str	r2, [r3, #4]
 8002f4a:	609a      	str	r2, [r3, #8]
 8002f4c:	60da      	str	r2, [r3, #12]
 8002f4e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a42      	ldr	r2, [pc, #264]	; (8003060 <HAL_CAN_MspInit+0x128>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d13a      	bne.n	8002fd0 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002f5a:	4b42      	ldr	r3, [pc, #264]	; (8003064 <HAL_CAN_MspInit+0x12c>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	4a40      	ldr	r2, [pc, #256]	; (8003064 <HAL_CAN_MspInit+0x12c>)
 8002f62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002f64:	4b3f      	ldr	r3, [pc, #252]	; (8003064 <HAL_CAN_MspInit+0x12c>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10b      	bne.n	8002f84 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002f6c:	4b3e      	ldr	r3, [pc, #248]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	4a3d      	ldr	r2, [pc, #244]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002f72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002f76:	6413      	str	r3, [r2, #64]	; 0x40
 8002f78:	4b3b      	ldr	r3, [pc, #236]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f80:	61bb      	str	r3, [r7, #24]
 8002f82:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f84:	4b38      	ldr	r3, [pc, #224]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f88:	4a37      	ldr	r2, [pc, #220]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002f8a:	f043 0301 	orr.w	r3, r3, #1
 8002f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f90:	4b35      	ldr	r3, [pc, #212]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	617b      	str	r3, [r7, #20]
 8002f9a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8002f9c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002faa:	2303      	movs	r3, #3
 8002fac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002fae:	2309      	movs	r3, #9
 8002fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb2:	f107 031c 	add.w	r3, r7, #28
 8002fb6:	4619      	mov	r1, r3
 8002fb8:	482c      	ldr	r0, [pc, #176]	; (800306c <HAL_CAN_MspInit+0x134>)
 8002fba:	f003 faa7 	bl	800650c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	2014      	movs	r0, #20
 8002fc4:	f002 ff81 	bl	8005eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002fc8:	2014      	movs	r0, #20
 8002fca:	f002 ff9a 	bl	8005f02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002fce:	e042      	b.n	8003056 <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a26      	ldr	r2, [pc, #152]	; (8003070 <HAL_CAN_MspInit+0x138>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d13d      	bne.n	8003056 <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002fda:	4b23      	ldr	r3, [pc, #140]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fde:	4a22      	ldr	r2, [pc, #136]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002fe0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fe4:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe6:	4b20      	ldr	r3, [pc, #128]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8002fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fee:	613b      	str	r3, [r7, #16]
 8002ff0:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <HAL_CAN_MspInit+0x12c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	4a1a      	ldr	r2, [pc, #104]	; (8003064 <HAL_CAN_MspInit+0x12c>)
 8002ffa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002ffc:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_CAN_MspInit+0x12c>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10b      	bne.n	800301c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003004:	4b18      	ldr	r3, [pc, #96]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	4a17      	ldr	r2, [pc, #92]	; (8003068 <HAL_CAN_MspInit+0x130>)
 800300a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800300e:	6413      	str	r3, [r2, #64]	; 0x40
 8003010:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800301c:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_CAN_MspInit+0x130>)
 800301e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003020:	4a11      	ldr	r2, [pc, #68]	; (8003068 <HAL_CAN_MspInit+0x130>)
 8003022:	f043 0302 	orr.w	r3, r3, #2
 8003026:	6313      	str	r3, [r2, #48]	; 0x30
 8003028:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_CAN_MspInit+0x130>)
 800302a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	60bb      	str	r3, [r7, #8]
 8003032:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 8003034:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2302      	movs	r3, #2
 800303c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303e:	2300      	movs	r3, #0
 8003040:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003042:	2303      	movs	r3, #3
 8003044:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003046:	2309      	movs	r3, #9
 8003048:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800304a:	f107 031c 	add.w	r3, r7, #28
 800304e:	4619      	mov	r1, r3
 8003050:	4808      	ldr	r0, [pc, #32]	; (8003074 <HAL_CAN_MspInit+0x13c>)
 8003052:	f003 fa5b 	bl	800650c <HAL_GPIO_Init>
}
 8003056:	bf00      	nop
 8003058:	3730      	adds	r7, #48	; 0x30
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40006400 	.word	0x40006400
 8003064:	200006c4 	.word	0x200006c4
 8003068:	40023800 	.word	0x40023800
 800306c:	40020000 	.word	0x40020000
 8003070:	40006800 	.word	0x40006800
 8003074:	40020400 	.word	0x40020400

08003078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b08c      	sub	sp, #48	; 0x30
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003080:	f107 031c 	add.w	r3, r7, #28
 8003084:	2200      	movs	r2, #0
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	605a      	str	r2, [r3, #4]
 800308a:	609a      	str	r2, [r3, #8]
 800308c:	60da      	str	r2, [r3, #12]
 800308e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d129      	bne.n	80030ee <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800309a:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	4a35      	ldr	r2, [pc, #212]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030a0:	f043 0301 	orr.w	r3, r3, #1
 80030a4:	6413      	str	r3, [r2, #64]	; 0x40
 80030a6:	4b33      	ldr	r3, [pc, #204]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030aa:	f003 0301 	and.w	r3, r3, #1
 80030ae:	61bb      	str	r3, [r7, #24]
 80030b0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030b2:	4b30      	ldr	r3, [pc, #192]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a2f      	ldr	r2, [pc, #188]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b2d      	ldr	r3, [pc, #180]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80030ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030d0:	2302      	movs	r3, #2
 80030d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d4:	2300      	movs	r3, #0
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d8:	2300      	movs	r3, #0
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030dc:	2301      	movs	r3, #1
 80030de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e0:	f107 031c 	add.w	r3, r7, #28
 80030e4:	4619      	mov	r1, r3
 80030e6:	4824      	ldr	r0, [pc, #144]	; (8003178 <HAL_TIM_Base_MspInit+0x100>)
 80030e8:	f003 fa10 	bl	800650c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80030ec:	e03e      	b.n	800316c <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM4)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a22      	ldr	r2, [pc, #136]	; (800317c <HAL_TIM_Base_MspInit+0x104>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d128      	bne.n	800314a <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	4a1d      	ldr	r2, [pc, #116]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6413      	str	r3, [r2, #64]	; 0x40
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4a17      	ldr	r2, [pc, #92]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 8003116:	f043 0310 	orr.w	r3, r3, #16
 800311a:	6313      	str	r3, [r2, #48]	; 0x30
 800311c:	4b15      	ldr	r3, [pc, #84]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	f003 0310 	and.w	r3, r3, #16
 8003124:	60fb      	str	r3, [r7, #12]
 8003126:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003128:	2301      	movs	r3, #1
 800312a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312c:	2302      	movs	r3, #2
 800312e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003134:	2300      	movs	r3, #0
 8003136:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003138:	2302      	movs	r3, #2
 800313a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	4619      	mov	r1, r3
 8003142:	480f      	ldr	r0, [pc, #60]	; (8003180 <HAL_TIM_Base_MspInit+0x108>)
 8003144:	f003 f9e2 	bl	800650c <HAL_GPIO_Init>
}
 8003148:	e010      	b.n	800316c <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM6)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a0d      	ldr	r2, [pc, #52]	; (8003184 <HAL_TIM_Base_MspInit+0x10c>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d10b      	bne.n	800316c <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003154:	4b07      	ldr	r3, [pc, #28]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	4a06      	ldr	r2, [pc, #24]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 800315a:	f043 0310 	orr.w	r3, r3, #16
 800315e:	6413      	str	r3, [r2, #64]	; 0x40
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <HAL_TIM_Base_MspInit+0xfc>)
 8003162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	60bb      	str	r3, [r7, #8]
 800316a:	68bb      	ldr	r3, [r7, #8]
}
 800316c:	bf00      	nop
 800316e:	3730      	adds	r7, #48	; 0x30
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000
 800317c:	40000800 	.word	0x40000800
 8003180:	40021000 	.word	0x40021000
 8003184:	40001000 	.word	0x40001000

08003188 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b0ae      	sub	sp, #184	; 0xb8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003190:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]
 8003198:	605a      	str	r2, [r3, #4]
 800319a:	609a      	str	r2, [r3, #8]
 800319c:	60da      	str	r2, [r3, #12]
 800319e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031a0:	f107 0320 	add.w	r3, r7, #32
 80031a4:	2284      	movs	r2, #132	; 0x84
 80031a6:	2100      	movs	r1, #0
 80031a8:	4618      	mov	r0, r3
 80031aa:	f005 fdb3 	bl	8008d14 <memset>
  if(huart->Instance==UART4)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a64      	ldr	r2, [pc, #400]	; (8003344 <HAL_UART_MspInit+0x1bc>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d13c      	bne.n	8003232 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80031b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031bc:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80031be:	2300      	movs	r3, #0
 80031c0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031c2:	f107 0320 	add.w	r3, r7, #32
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 f896 	bl	80072f8 <HAL_RCCEx_PeriphCLKConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80031d2:	f7ff fb4f 	bl	8002874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80031d6:	4b5c      	ldr	r3, [pc, #368]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a5b      	ldr	r2, [pc, #364]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80031dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b59      	ldr	r3, [pc, #356]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	4b56      	ldr	r3, [pc, #344]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	4a55      	ldr	r2, [pc, #340]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80031f4:	f043 0301 	orr.w	r3, r3, #1
 80031f8:	6313      	str	r3, [r2, #48]	; 0x30
 80031fa:	4b53      	ldr	r3, [pc, #332]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	61bb      	str	r3, [r7, #24]
 8003204:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 8003206:	2303      	movs	r3, #3
 8003208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800320c:	2302      	movs	r3, #2
 800320e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003218:	2303      	movs	r3, #3
 800321a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800321e:	2308      	movs	r3, #8
 8003220:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003224:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003228:	4619      	mov	r1, r3
 800322a:	4848      	ldr	r0, [pc, #288]	; (800334c <HAL_UART_MspInit+0x1c4>)
 800322c:	f003 f96e 	bl	800650c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003230:	e083      	b.n	800333a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a46      	ldr	r2, [pc, #280]	; (8003350 <HAL_UART_MspInit+0x1c8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d13c      	bne.n	80032b6 <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800323c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003240:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003242:	2300      	movs	r3, #0
 8003244:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003246:	f107 0320 	add.w	r3, r7, #32
 800324a:	4618      	mov	r0, r3
 800324c:	f004 f854 	bl	80072f8 <HAL_RCCEx_PeriphCLKConfig>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003256:	f7ff fb0d 	bl	8002874 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800325a:	4b3b      	ldr	r3, [pc, #236]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	4a3a      	ldr	r2, [pc, #232]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 8003260:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003264:	6413      	str	r3, [r2, #64]	; 0x40
 8003266:	4b38      	ldr	r3, [pc, #224]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800326e:	617b      	str	r3, [r7, #20]
 8003270:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003272:	4b35      	ldr	r3, [pc, #212]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 8003274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003276:	4a34      	ldr	r2, [pc, #208]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 8003278:	f043 0320 	orr.w	r3, r3, #32
 800327c:	6313      	str	r3, [r2, #48]	; 0x30
 800327e:	4b32      	ldr	r3, [pc, #200]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 8003280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003282:	f003 0320 	and.w	r3, r3, #32
 8003286:	613b      	str	r3, [r7, #16]
 8003288:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 800328a:	23c0      	movs	r3, #192	; 0xc0
 800328c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003290:	2302      	movs	r3, #2
 8003292:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800329c:	2303      	movs	r3, #3
 800329e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80032a2:	2308      	movs	r3, #8
 80032a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80032a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80032ac:	4619      	mov	r1, r3
 80032ae:	4829      	ldr	r0, [pc, #164]	; (8003354 <HAL_UART_MspInit+0x1cc>)
 80032b0:	f003 f92c 	bl	800650c <HAL_GPIO_Init>
}
 80032b4:	e041      	b.n	800333a <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a27      	ldr	r2, [pc, #156]	; (8003358 <HAL_UART_MspInit+0x1d0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d13c      	bne.n	800333a <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80032c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80032c6:	2300      	movs	r3, #0
 80032c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032ca:	f107 0320 	add.w	r3, r7, #32
 80032ce:	4618      	mov	r0, r3
 80032d0:	f004 f812 	bl	80072f8 <HAL_RCCEx_PeriphCLKConfig>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_UART_MspInit+0x156>
      Error_Handler();
 80032da:	f7ff facb 	bl	8002874 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80032de:	4b1a      	ldr	r3, [pc, #104]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	4a19      	ldr	r2, [pc, #100]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80032e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ea:	4b17      	ldr	r3, [pc, #92]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032f2:	60fb      	str	r3, [r7, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032f6:	4b14      	ldr	r3, [pc, #80]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	4a13      	ldr	r2, [pc, #76]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 80032fc:	f043 0302 	orr.w	r3, r3, #2
 8003300:	6313      	str	r3, [r2, #48]	; 0x30
 8003302:	4b11      	ldr	r3, [pc, #68]	; (8003348 <HAL_UART_MspInit+0x1c0>)
 8003304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800330e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003312:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003316:	2302      	movs	r3, #2
 8003318:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003322:	2303      	movs	r3, #3
 8003324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003328:	2307      	movs	r3, #7
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800332e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003332:	4619      	mov	r1, r3
 8003334:	4809      	ldr	r0, [pc, #36]	; (800335c <HAL_UART_MspInit+0x1d4>)
 8003336:	f003 f8e9 	bl	800650c <HAL_GPIO_Init>
}
 800333a:	bf00      	nop
 800333c:	37b8      	adds	r7, #184	; 0xb8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	40004c00 	.word	0x40004c00
 8003348:	40023800 	.word	0x40023800
 800334c:	40020000 	.word	0x40020000
 8003350:	40007800 	.word	0x40007800
 8003354:	40021400 	.word	0x40021400
 8003358:	40004800 	.word	0x40004800
 800335c:	40020400 	.word	0x40020400

08003360 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003366:	1d3b      	adds	r3, r7, #4
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	605a      	str	r2, [r3, #4]
 800336e:	609a      	str	r2, [r3, #8]
 8003370:	60da      	str	r2, [r3, #12]
 8003372:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003374:	4b23      	ldr	r3, [pc, #140]	; (8003404 <HAL_FMC_MspInit+0xa4>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d13f      	bne.n	80033fc <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 800337c:	4b21      	ldr	r3, [pc, #132]	; (8003404 <HAL_FMC_MspInit+0xa4>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003382:	4b21      	ldr	r3, [pc, #132]	; (8003408 <HAL_FMC_MspInit+0xa8>)
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	4a20      	ldr	r2, [pc, #128]	; (8003408 <HAL_FMC_MspInit+0xa8>)
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	6393      	str	r3, [r2, #56]	; 0x38
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <HAL_FMC_MspInit+0xa8>)
 8003390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	603b      	str	r3, [r7, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800339a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800339e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033a0:	2302      	movs	r3, #2
 80033a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ac:	230c      	movs	r3, #12
 80033ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80033b0:	1d3b      	adds	r3, r7, #4
 80033b2:	4619      	mov	r1, r3
 80033b4:	4815      	ldr	r0, [pc, #84]	; (800340c <HAL_FMC_MspInit+0xac>)
 80033b6:	f003 f8a9 	bl	800650c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80033ba:	f64f 7380 	movw	r3, #65408	; 0xff80
 80033be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033c0:	2302      	movs	r3, #2
 80033c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033c8:	2303      	movs	r3, #3
 80033ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033cc:	230c      	movs	r3, #12
 80033ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033d0:	1d3b      	adds	r3, r7, #4
 80033d2:	4619      	mov	r1, r3
 80033d4:	480e      	ldr	r0, [pc, #56]	; (8003410 <HAL_FMC_MspInit+0xb0>)
 80033d6:	f003 f899 	bl	800650c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80033da:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80033de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033e0:	2302      	movs	r3, #2
 80033e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033e8:	2303      	movs	r3, #3
 80033ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80033ec:	230c      	movs	r3, #12
 80033ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80033f0:	1d3b      	adds	r3, r7, #4
 80033f2:	4619      	mov	r1, r3
 80033f4:	4807      	ldr	r0, [pc, #28]	; (8003414 <HAL_FMC_MspInit+0xb4>)
 80033f6:	f003 f889 	bl	800650c <HAL_GPIO_Init>
 80033fa:	e000      	b.n	80033fe <HAL_FMC_MspInit+0x9e>
    return;
 80033fc:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80033fe:	3718      	adds	r7, #24
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	200006c8 	.word	0x200006c8
 8003408:	40023800 	.word	0x40023800
 800340c:	40021400 	.word	0x40021400
 8003410:	40021000 	.word	0x40021000
 8003414:	40020c00 	.word	0x40020c00

08003418 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003420:	f7ff ff9e 	bl	8003360 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003424:	bf00      	nop
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003430:	e7fe      	b.n	8003430 <NMI_Handler+0x4>

08003432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003432:	b480      	push	{r7}
 8003434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003436:	e7fe      	b.n	8003436 <HardFault_Handler+0x4>

08003438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003438:	b480      	push	{r7}
 800343a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800343c:	e7fe      	b.n	800343c <MemManage_Handler+0x4>

0800343e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800343e:	b480      	push	{r7}
 8003440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003442:	e7fe      	b.n	8003442 <BusFault_Handler+0x4>

08003444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003448:	e7fe      	b.n	8003448 <UsageFault_Handler+0x4>

0800344a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003458:	b480      	push	{r7}
 800345a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003466:	b480      	push	{r7}
 8003468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800346a:	bf00      	nop
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003478:	f001 f9b6 	bl	80047e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	bd80      	pop	{r7, pc}

08003480 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003484:	4802      	ldr	r0, [pc, #8]	; (8003490 <CAN1_RX0_IRQHandler+0x10>)
 8003486:	f002 fa15 	bl	80058b4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800348a:	bf00      	nop
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	20000364 	.word	0x20000364

08003494 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003498:	4802      	ldr	r0, [pc, #8]	; (80034a4 <DMA2_Stream0_IRQHandler+0x10>)
 800349a:	f002 fdfb 	bl	8006094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200002a4 	.word	0x200002a4

080034a8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80034ac:	4802      	ldr	r0, [pc, #8]	; (80034b8 <DMA2_Stream1_IRQHandler+0x10>)
 80034ae:	f002 fdf1 	bl	8006094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000304 	.word	0x20000304

080034bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <_sbrk+0x5c>)
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <_sbrk+0x60>)
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <_sbrk+0x64>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <_sbrk+0x64>)
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <_sbrk+0x68>)
 80034dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d207      	bcs.n	80034fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034ec:	f005 fc1a 	bl	8008d24 <__errno>
 80034f0:	4603      	mov	r3, r0
 80034f2:	220c      	movs	r2, #12
 80034f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295
 80034fa:	e009      	b.n	8003510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <_sbrk+0x64>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <_sbrk+0x64>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4413      	add	r3, r2
 800350a:	4a05      	ldr	r2, [pc, #20]	; (8003520 <_sbrk+0x64>)
 800350c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	4618      	mov	r0, r3
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20050000 	.word	0x20050000
 800351c:	00000400 	.word	0x00000400
 8003520:	200006cc 	.word	0x200006cc
 8003524:	20000830 	.word	0x20000830

08003528 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003528:	b480      	push	{r7}
 800352a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <SystemInit+0x20>)
 800352e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003532:	4a05      	ldr	r2, [pc, #20]	; (8003548 <SystemInit+0x20>)
 8003534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800353c:	bf00      	nop
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	e000ed00 	.word	0xe000ed00

0800354c <traction_control_PID>:
const uint8_t kI = 0;
const uint8_t kD = 0;

const uint16_t TC_torque_limit = 100;

void traction_control_PID(){
 800354c:	b580      	push	{r7, lr}
 800354e:	b084      	sub	sp, #16
 8003550:	af00      	add	r7, sp, #0
    if (state != DRIVE) return;
 8003552:	4b59      	ldr	r3, [pc, #356]	; (80036b8 <traction_control_PID+0x16c>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b03      	cmp	r3, #3
 800355a:	f040 80a8 	bne.w	80036ae <traction_control_PID+0x162>

    // note: wheel speeds are in units of pulses/20ms
    const float avg_front_wheel_speed = (front_right_wheel_speed + front_left_wheel_speed)/2.0;
 800355e:	4b57      	ldr	r3, [pc, #348]	; (80036bc <traction_control_PID+0x170>)
 8003560:	881b      	ldrh	r3, [r3, #0]
 8003562:	b29b      	uxth	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	4b56      	ldr	r3, [pc, #344]	; (80036c0 <traction_control_PID+0x174>)
 8003568:	881b      	ldrh	r3, [r3, #0]
 800356a:	b29b      	uxth	r3, r3
 800356c:	4413      	add	r3, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f7fc fff0 	bl	8000554 <__aeabi_i2d>
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800357c:	f7fd f97e 	bl	800087c <__aeabi_ddiv>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4610      	mov	r0, r2
 8003586:	4619      	mov	r1, r3
 8003588:	f7fd fa60 	bl	8000a4c <__aeabi_d2f>
 800358c:	4603      	mov	r3, r0
 800358e:	60fb      	str	r3, [r7, #12]
    const float avg_back_wheel_speed = (back_right_wheel_speed + back_left_wheel_speed)/2.0;
 8003590:	4b4c      	ldr	r3, [pc, #304]	; (80036c4 <traction_control_PID+0x178>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	b29b      	uxth	r3, r3
 8003596:	461a      	mov	r2, r3
 8003598:	4b4b      	ldr	r3, [pc, #300]	; (80036c8 <traction_control_PID+0x17c>)
 800359a:	881b      	ldrh	r3, [r3, #0]
 800359c:	b29b      	uxth	r3, r3
 800359e:	4413      	add	r3, r2
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fc ffd7 	bl	8000554 <__aeabi_i2d>
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035ae:	f7fd f965 	bl	800087c <__aeabi_ddiv>
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	f7fd fa47 	bl	8000a4c <__aeabi_d2f>
 80035be:	4603      	mov	r3, r0
 80035c0:	60bb      	str	r3, [r7, #8]
    const float conversion_factor = (2*pi*wheel_radius)/pulses_per_rev;
 80035c2:	eddf 7a42 	vldr	s15, [pc, #264]	; 80036cc <traction_control_PID+0x180>
 80035c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80035ca:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80035ce:	ee67 6a87 	vmul.f32	s13, s15, s14
 80035d2:	233c      	movs	r3, #60	; 0x3c
 80035d4:	ee07 3a90 	vmov	s15, r3
 80035d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035e0:	edc7 7a01 	vstr	s15, [r7, #4]
    const float current_slip_ratio = (avg_back_wheel_speed*conversion_factor) / (avg_front_wheel_speed*conversion_factor);
 80035e4:	ed97 7a02 	vldr	s14, [r7, #8]
 80035e8:	edd7 7a01 	vldr	s15, [r7, #4]
 80035ec:	ee67 6a27 	vmul.f32	s13, s14, s15
 80035f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80035f4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003600:	edc7 7a00 	vstr	s15, [r7]

    // if target slip ratio has been achieved
//    if (current_slip_ratio < target_slip_ratio + 0.001 || current_slip_ratio > target_slip_ratio - 0.001) return;

    pid_error = target_slip_ratio - current_slip_ratio;
 8003604:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80036d0 <traction_control_PID+0x184>
 8003608:	edd7 7a00 	vldr	s15, [r7]
 800360c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003614:	ee17 3a90 	vmov	r3, s15
 8003618:	b29a      	uxth	r2, r3
 800361a:	4b2e      	ldr	r3, [pc, #184]	; (80036d4 <traction_control_PID+0x188>)
 800361c:	801a      	strh	r2, [r3, #0]
    integral = integral + pid_error;
 800361e:	4b2e      	ldr	r3, [pc, #184]	; (80036d8 <traction_control_PID+0x18c>)
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	b29a      	uxth	r2, r3
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <traction_control_PID+0x188>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	b29b      	uxth	r3, r3
 800362a:	4413      	add	r3, r2
 800362c:	b29a      	uxth	r2, r3
 800362e:	4b2a      	ldr	r3, [pc, #168]	; (80036d8 <traction_control_PID+0x18c>)
 8003630:	801a      	strh	r2, [r3, #0]
    derivative = pid_error - prev_pid_error;
 8003632:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <traction_control_PID+0x188>)
 8003634:	881b      	ldrh	r3, [r3, #0]
 8003636:	b29a      	uxth	r2, r3
 8003638:	4b28      	ldr	r3, [pc, #160]	; (80036dc <traction_control_PID+0x190>)
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	b29b      	uxth	r3, r3
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	b29a      	uxth	r2, r3
 8003642:	4b27      	ldr	r3, [pc, #156]	; (80036e0 <traction_control_PID+0x194>)
 8003644:	801a      	strh	r2, [r3, #0]

    TC_control_var = (kP * pid_error) + (kI * integral) + (kD * derivative);
 8003646:	2300      	movs	r3, #0
 8003648:	b29a      	uxth	r2, r3
 800364a:	4b22      	ldr	r3, [pc, #136]	; (80036d4 <traction_control_PID+0x188>)
 800364c:	881b      	ldrh	r3, [r3, #0]
 800364e:	b29b      	uxth	r3, r3
 8003650:	fb12 f303 	smulbb	r3, r2, r3
 8003654:	b29a      	uxth	r2, r3
 8003656:	2300      	movs	r3, #0
 8003658:	b299      	uxth	r1, r3
 800365a:	4b1f      	ldr	r3, [pc, #124]	; (80036d8 <traction_control_PID+0x18c>)
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	b29b      	uxth	r3, r3
 8003660:	fb11 f303 	smulbb	r3, r1, r3
 8003664:	b29b      	uxth	r3, r3
 8003666:	4413      	add	r3, r2
 8003668:	b29a      	uxth	r2, r3
 800366a:	2300      	movs	r3, #0
 800366c:	b299      	uxth	r1, r3
 800366e:	4b1c      	ldr	r3, [pc, #112]	; (80036e0 <traction_control_PID+0x194>)
 8003670:	881b      	ldrh	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	fb11 f303 	smulbb	r3, r1, r3
 8003678:	b29b      	uxth	r3, r3
 800367a:	4413      	add	r3, r2
 800367c:	b29a      	uxth	r2, r3
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <traction_control_PID+0x198>)
 8003680:	801a      	strh	r2, [r3, #0]

    // limit PID torque request
    if (TC_control_var > TC_torque_limit) TC_control_var = TC_torque_limit;
 8003682:	4b18      	ldr	r3, [pc, #96]	; (80036e4 <traction_control_PID+0x198>)
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	b29b      	uxth	r3, r3
 8003688:	2264      	movs	r2, #100	; 0x64
 800368a:	4293      	cmp	r3, r2
 800368c:	d902      	bls.n	8003694 <traction_control_PID+0x148>
 800368e:	2264      	movs	r2, #100	; 0x64
 8003690:	4b14      	ldr	r3, [pc, #80]	; (80036e4 <traction_control_PID+0x198>)
 8003692:	801a      	strh	r2, [r3, #0]
    if (TC_control_var < 0) TC_control_var = 0; // not the best way but works for now
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <traction_control_PID+0x198>)
 8003696:	881b      	ldrh	r3, [r3, #0]

    TC_torque_adjustment = TC_control_var;
 8003698:	4b12      	ldr	r3, [pc, #72]	; (80036e4 <traction_control_PID+0x198>)
 800369a:	881b      	ldrh	r3, [r3, #0]
 800369c:	b29a      	uxth	r2, r3
 800369e:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <traction_control_PID+0x19c>)
 80036a0:	801a      	strh	r2, [r3, #0]

    prev_pid_error = pid_error;
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <traction_control_PID+0x188>)
 80036a4:	881b      	ldrh	r3, [r3, #0]
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	4b0c      	ldr	r3, [pc, #48]	; (80036dc <traction_control_PID+0x190>)
 80036aa:	801a      	strh	r2, [r3, #0]
 80036ac:	e000      	b.n	80036b0 <traction_control_PID+0x164>
    if (state != DRIVE) return;
 80036ae:	bf00      	nop
}
 80036b0:	3710      	adds	r7, #16
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000008d 	.word	0x2000008d
 80036bc:	20000112 	.word	0x20000112
 80036c0:	20000114 	.word	0x20000114
 80036c4:	20000116 	.word	0x20000116
 80036c8:	20000118 	.word	0x20000118
 80036cc:	4048f5c3 	.word	0x4048f5c3
 80036d0:	3dcccccd 	.word	0x3dcccccd
 80036d4:	200006d4 	.word	0x200006d4
 80036d8:	200006d8 	.word	0x200006d8
 80036dc:	200006d6 	.word	0x200006d6
 80036e0:	200006da 	.word	0x200006da
 80036e4:	200006d0 	.word	0x200006d0
 80036e8:	200006d2 	.word	0x200006d2

080036ec <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 80036ec:	b480      	push	{r7}
 80036ee:	b087      	sub	sp, #28
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	60f8      	str	r0, [r7, #12]
 80036f4:	60b9      	str	r1, [r7, #8]
 80036f6:	4611      	mov	r1, r2
 80036f8:	461a      	mov	r2, r3
 80036fa:	460b      	mov	r3, r1
 80036fc:	80fb      	strh	r3, [r7, #6]
 80036fe:	4613      	mov	r3, r2
 8003700:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	88ba      	ldrh	r2, [r7, #4]
 8003712:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2204      	movs	r2, #4
 8003718:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2204      	movs	r2, #4
 800371e:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003726:	b29a      	uxth	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800372e:	b29b      	uxth	r3, r3
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	b29b      	uxth	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b29b      	uxth	r3, r3
 8003738:	b21a      	sxth	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003744:	b29a      	uxth	r2, r3
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800374c:	b29b      	uxth	r3, r3
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29b      	uxth	r3, r3
 8003756:	b21a      	sxth	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2201      	movs	r2, #1
 800377c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80037aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]
 80037d6:	e010      	b.n	80037fa <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 80037d8:	7dfb      	ldrb	r3, [r7, #23]
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	3309      	adds	r3, #9
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	4413      	add	r3, r2
 80037e2:	2200      	movs	r2, #0
 80037e4:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80037e6:	7dfb      	ldrb	r3, [r7, #23]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	3309      	adds	r3, #9
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	2200      	movs	r2, #0
 80037f2:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80037f4:	7dfb      	ldrb	r3, [r7, #23]
 80037f6:	3301      	adds	r3, #1
 80037f8:	75fb      	strb	r3, [r7, #23]
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	2b06      	cmp	r3, #6
 80037fe:	d9eb      	bls.n	80037d8 <UG_Init+0xec>
   }

   gui = g;
 8003800:	4a04      	ldr	r2, [pc, #16]	; (8003814 <UG_Init+0x128>)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6013      	str	r3, [r2, #0]
   return 1;
 8003806:	2301      	movs	r3, #1
}
 8003808:	4618      	mov	r0, r3
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	200006dc 	.word	0x200006dc

08003818 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8003818:	b4b0      	push	{r4, r5, r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 8003820:	4b07      	ldr	r3, [pc, #28]	; (8003840 <UG_FontSelect+0x28>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800382a:	4615      	mov	r5, r2
 800382c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800382e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003830:	682b      	ldr	r3, [r5, #0]
 8003832:	6023      	str	r3, [r4, #0]
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	bcb0      	pop	{r4, r5, r7}
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	200006dc 	.word	0x200006dc

08003844 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af02      	add	r7, sp, #8
 800384a:	4603      	mov	r3, r0
 800384c:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 800384e:	4b0d      	ldr	r3, [pc, #52]	; (8003884 <UG_FillScreen+0x40>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29b      	uxth	r3, r3
 800385c:	b21a      	sxth	r2, r3
 800385e:	4b09      	ldr	r3, [pc, #36]	; (8003884 <UG_FillScreen+0x40>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003866:	b29b      	uxth	r3, r3
 8003868:	3b01      	subs	r3, #1
 800386a:	b29b      	uxth	r3, r3
 800386c:	b219      	sxth	r1, r3
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	460b      	mov	r3, r1
 8003874:	2100      	movs	r1, #0
 8003876:	2000      	movs	r0, #0
 8003878:	f000 f806 	bl	8003888 <UG_FillFrame>
}
 800387c:	bf00      	nop
 800387e:	3708      	adds	r7, #8
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	200006dc 	.word	0x200006dc

08003888 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8003888:	b5b0      	push	{r4, r5, r7, lr}
 800388a:	b086      	sub	sp, #24
 800388c:	af02      	add	r7, sp, #8
 800388e:	4604      	mov	r4, r0
 8003890:	4608      	mov	r0, r1
 8003892:	4611      	mov	r1, r2
 8003894:	461a      	mov	r2, r3
 8003896:	4623      	mov	r3, r4
 8003898:	80fb      	strh	r3, [r7, #6]
 800389a:	4603      	mov	r3, r0
 800389c:	80bb      	strh	r3, [r7, #4]
 800389e:	460b      	mov	r3, r1
 80038a0:	807b      	strh	r3, [r7, #2]
 80038a2:	4613      	mov	r3, r2
 80038a4:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80038a6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80038aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038ae:	429a      	cmp	r2, r3
 80038b0:	da05      	bge.n	80038be <UG_FillFrame+0x36>
   {
      n = x2;
 80038b2:	887b      	ldrh	r3, [r7, #2]
 80038b4:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80038b6:	88fb      	ldrh	r3, [r7, #6]
 80038b8:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80038ba:	89fb      	ldrh	r3, [r7, #14]
 80038bc:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80038be:	f9b7 2000 	ldrsh.w	r2, [r7]
 80038c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80038c6:	429a      	cmp	r2, r3
 80038c8:	da05      	bge.n	80038d6 <UG_FillFrame+0x4e>
   {
      n = y2;
 80038ca:	883b      	ldrh	r3, [r7, #0]
 80038cc:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80038ce:	88bb      	ldrh	r3, [r7, #4]
 80038d0:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80038d2:	89fb      	ldrh	r3, [r7, #14]
 80038d4:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80038d6:	4b23      	ldr	r3, [pc, #140]	; (8003964 <UG_FillFrame+0xdc>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038de:	f003 0302 	and.w	r3, r3, #2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80038e6:	4b1f      	ldr	r3, [pc, #124]	; (8003964 <UG_FillFrame+0xdc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	461d      	mov	r5, r3
 80038ee:	f9b7 4000 	ldrsh.w	r4, [r7]
 80038f2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80038f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80038fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80038fe:	8c3b      	ldrh	r3, [r7, #32]
 8003900:	9300      	str	r3, [sp, #0]
 8003902:	4623      	mov	r3, r4
 8003904:	47a8      	blx	r5
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d027      	beq.n	800395c <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 800390c:	88bb      	ldrh	r3, [r7, #4]
 800390e:	81bb      	strh	r3, [r7, #12]
 8003910:	e01d      	b.n	800394e <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	81fb      	strh	r3, [r7, #14]
 8003916:	e00e      	b.n	8003936 <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8003918:	4b12      	ldr	r3, [pc, #72]	; (8003964 <UG_FillFrame+0xdc>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	8c3a      	ldrh	r2, [r7, #32]
 8003920:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003924:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003928:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800392a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800392e:	b29b      	uxth	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	b29b      	uxth	r3, r3
 8003934:	81fb      	strh	r3, [r7, #14]
 8003936:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800393a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800393e:	429a      	cmp	r2, r3
 8003940:	ddea      	ble.n	8003918 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8003942:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003946:	b29b      	uxth	r3, r3
 8003948:	3301      	adds	r3, #1
 800394a:	b29b      	uxth	r3, r3
 800394c:	81bb      	strh	r3, [r7, #12]
 800394e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003952:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003956:	429a      	cmp	r2, r3
 8003958:	dddb      	ble.n	8003912 <UG_FillFrame+0x8a>
 800395a:	e000      	b.n	800395e <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800395c:	bf00      	nop
      }
   }
}
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bdb0      	pop	{r4, r5, r7, pc}
 8003964:	200006dc 	.word	0x200006dc

08003968 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8003968:	b590      	push	{r4, r7, lr}
 800396a:	b087      	sub	sp, #28
 800396c:	af02      	add	r7, sp, #8
 800396e:	4603      	mov	r3, r0
 8003970:	603a      	str	r2, [r7, #0]
 8003972:	80fb      	strh	r3, [r7, #6]
 8003974:	460b      	mov	r3, r1
 8003976:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8003978:	88fb      	ldrh	r3, [r7, #6]
 800397a:	81fb      	strh	r3, [r7, #14]
   yp=y;
 800397c:	88bb      	ldrh	r3, [r7, #4]
 800397e:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8003980:	e06d      	b.n	8003a5e <UG_PutString+0xf6>
   {
      chr = *str++;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	1c5a      	adds	r2, r3, #1
 8003986:	603a      	str	r2, [r7, #0]
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 800398c:	7afb      	ldrb	r3, [r7, #11]
 800398e:	b29a      	uxth	r2, r3
 8003990:	4b37      	ldr	r3, [pc, #220]	; (8003a70 <UG_PutString+0x108>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003996:	429a      	cmp	r2, r3
 8003998:	d361      	bcc.n	8003a5e <UG_PutString+0xf6>
 800399a:	7afb      	ldrb	r3, [r7, #11]
 800399c:	b29a      	uxth	r2, r3
 800399e:	4b34      	ldr	r3, [pc, #208]	; (8003a70 <UG_PutString+0x108>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d900      	bls.n	80039aa <UG_PutString+0x42>
 80039a8:	e059      	b.n	8003a5e <UG_PutString+0xf6>
      if ( chr == '\n' )
 80039aa:	7afb      	ldrb	r3, [r7, #11]
 80039ac:	2b0a      	cmp	r3, #10
 80039ae:	d104      	bne.n	80039ba <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 80039b0:	4b2f      	ldr	r3, [pc, #188]	; (8003a70 <UG_PutString+0x108>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	889b      	ldrh	r3, [r3, #4]
 80039b6:	81fb      	strh	r3, [r7, #14]
         continue;
 80039b8:	e051      	b.n	8003a5e <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80039ba:	4b2d      	ldr	r3, [pc, #180]	; (8003a70 <UG_PutString+0x108>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00a      	beq.n	80039da <UG_PutString+0x72>
 80039c4:	4b2a      	ldr	r3, [pc, #168]	; (8003a70 <UG_PutString+0x108>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ca:	7afa      	ldrb	r2, [r7, #11]
 80039cc:	4928      	ldr	r1, [pc, #160]	; (8003a70 <UG_PutString+0x108>)
 80039ce:	6809      	ldr	r1, [r1, #0]
 80039d0:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80039d2:	1a52      	subs	r2, r2, r1
 80039d4:	4413      	add	r3, r2
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	e004      	b.n	80039e4 <UG_PutString+0x7c>
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <UG_PutString+0x108>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 80039e6:	4b22      	ldr	r3, [pc, #136]	; (8003a70 <UG_PutString+0x108>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80039ee:	4619      	mov	r1, r3
 80039f0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80039f4:	7abb      	ldrb	r3, [r7, #10]
 80039f6:	4413      	add	r3, r2
 80039f8:	4299      	cmp	r1, r3
 80039fa:	dc11      	bgt.n	8003a20 <UG_PutString+0xb8>
      {
         xp = x;
 80039fc:	88fb      	ldrh	r3, [r7, #6]
 80039fe:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <UG_PutString+0x108>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003a08:	b29a      	uxth	r2, r3
 8003a0a:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <UG_PutString+0x108>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	4413      	add	r3, r2
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	89bb      	ldrh	r3, [r7, #12]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8003a20:	4b13      	ldr	r3, [pc, #76]	; (8003a70 <UG_PutString+0x108>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8003a28:	4b11      	ldr	r3, [pc, #68]	; (8003a70 <UG_PutString+0x108>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003a30:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003a34:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003a38:	7af8      	ldrb	r0, [r7, #11]
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	4623      	mov	r3, r4
 8003a3e:	f000 f89d 	bl	8003b7c <UG_PutChar>

      xp += cw + gui->char_h_space;
 8003a42:	7abb      	ldrb	r3, [r7, #10]
 8003a44:	b21a      	sxth	r2, r3
 8003a46:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <UG_PutString+0x108>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8003a4e:	b21b      	sxth	r3, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	b21b      	sxth	r3, r3
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	89fb      	ldrh	r3, [r7, #14]
 8003a58:	4413      	add	r3, r2
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d18d      	bne.n	8003982 <UG_PutString+0x1a>
   }
}
 8003a66:	bf00      	nop
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd90      	pop	{r4, r7, pc}
 8003a70:	200006dc 	.word	0x200006dc

08003a74 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8003a74:	b590      	push	{r4, r7, lr}
 8003a76:	b089      	sub	sp, #36	; 0x24
 8003a78:	af02      	add	r7, sp, #8
 8003a7a:	60ba      	str	r2, [r7, #8]
 8003a7c:	461a      	mov	r2, r3
 8003a7e:	4603      	mov	r3, r0
 8003a80:	81fb      	strh	r3, [r7, #14]
 8003a82:	460b      	mov	r3, r1
 8003a84:	81bb      	strh	r3, [r7, #12]
 8003a86:	4613      	mov	r3, r2
 8003a88:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8003a8a:	89fb      	ldrh	r3, [r7, #14]
 8003a8c:	82fb      	strh	r3, [r7, #22]
   yp=y;
 8003a8e:	89bb      	ldrh	r3, [r7, #12]
 8003a90:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 8003a92:	e067      	b.n	8003b64 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	1c5a      	adds	r2, r3, #1
 8003a98:	60ba      	str	r2, [r7, #8]
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8003a9e:	7cfb      	ldrb	r3, [r7, #19]
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	4b35      	ldr	r3, [pc, #212]	; (8003b78 <UG_PutColorString+0x104>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d35b      	bcc.n	8003b64 <UG_PutColorString+0xf0>
 8003aac:	7cfb      	ldrb	r3, [r7, #19]
 8003aae:	b29a      	uxth	r2, r3
 8003ab0:	4b31      	ldr	r3, [pc, #196]	; (8003b78 <UG_PutColorString+0x104>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d900      	bls.n	8003abc <UG_PutColorString+0x48>
 8003aba:	e053      	b.n	8003b64 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 8003abc:	7cfb      	ldrb	r3, [r7, #19]
 8003abe:	2b0a      	cmp	r3, #10
 8003ac0:	d104      	bne.n	8003acc <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 8003ac2:	4b2d      	ldr	r3, [pc, #180]	; (8003b78 <UG_PutColorString+0x104>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	889b      	ldrh	r3, [r3, #4]
 8003ac8:	82fb      	strh	r3, [r7, #22]
         continue;
 8003aca:	e04b      	b.n	8003b64 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8003acc:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <UG_PutColorString+0x104>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UG_PutColorString+0x78>
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <UG_PutColorString+0x104>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	7cfa      	ldrb	r2, [r7, #19]
 8003ade:	4926      	ldr	r1, [pc, #152]	; (8003b78 <UG_PutColorString+0x104>)
 8003ae0:	6809      	ldr	r1, [r1, #0]
 8003ae2:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8003ae4:	1a52      	subs	r2, r2, r1
 8003ae6:	4413      	add	r3, r2
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	e004      	b.n	8003af6 <UG_PutColorString+0x82>
 8003aec:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <UG_PutColorString+0x104>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003af4:	b2db      	uxtb	r3, r3
 8003af6:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 8003af8:	4b1f      	ldr	r3, [pc, #124]	; (8003b78 <UG_PutColorString+0x104>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003b00:	4619      	mov	r1, r3
 8003b02:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8003b06:	7cbb      	ldrb	r3, [r7, #18]
 8003b08:	4413      	add	r3, r2
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	dc11      	bgt.n	8003b32 <UG_PutColorString+0xbe>
      {
         xp = x;
 8003b0e:	89fb      	ldrh	r3, [r7, #14]
 8003b10:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 8003b12:	4b19      	ldr	r3, [pc, #100]	; (8003b78 <UG_PutColorString+0x104>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	4b16      	ldr	r3, [pc, #88]	; (8003b78 <UG_PutColorString+0x104>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	4413      	add	r3, r2
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	8abb      	ldrh	r3, [r7, #20]
 8003b2c:	4413      	add	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 8003b32:	88fc      	ldrh	r4, [r7, #6]
 8003b34:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003b38:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8003b3c:	7cf8      	ldrb	r0, [r7, #19]
 8003b3e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003b40:	9300      	str	r3, [sp, #0]
 8003b42:	4623      	mov	r3, r4
 8003b44:	f000 f81a 	bl	8003b7c <UG_PutChar>

      xp += cw + gui->char_h_space;
 8003b48:	7cbb      	ldrb	r3, [r7, #18]
 8003b4a:	b21a      	sxth	r2, r3
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <UG_PutColorString+0x104>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8003b54:	b21b      	sxth	r3, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	b21b      	sxth	r3, r3
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	8afb      	ldrh	r3, [r7, #22]
 8003b5e:	4413      	add	r3, r2
 8003b60:	b29b      	uxth	r3, r3
 8003b62:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d193      	bne.n	8003a94 <UG_PutColorString+0x20>
   }
}
 8003b6c:	bf00      	nop
 8003b6e:	bf00      	nop
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd90      	pop	{r4, r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200006dc 	.word	0x200006dc

08003b7c <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8003b7c:	b590      	push	{r4, r7, lr}
 8003b7e:	b085      	sub	sp, #20
 8003b80:	af02      	add	r7, sp, #8
 8003b82:	4604      	mov	r4, r0
 8003b84:	4608      	mov	r0, r1
 8003b86:	4611      	mov	r1, r2
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	71fb      	strb	r3, [r7, #7]
 8003b8e:	4603      	mov	r3, r0
 8003b90:	80bb      	strh	r3, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	807b      	strh	r3, [r7, #2]
 8003b96:	4613      	mov	r3, r2
 8003b98:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8003b9a:	4b09      	ldr	r3, [pc, #36]	; (8003bc0 <UG_PutChar+0x44>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	332c      	adds	r3, #44	; 0x2c
 8003ba0:	883c      	ldrh	r4, [r7, #0]
 8003ba2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003ba6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003baa:	79f8      	ldrb	r0, [r7, #7]
 8003bac:	9301      	str	r3, [sp, #4]
 8003bae:	8b3b      	ldrh	r3, [r7, #24]
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f000 f852 	bl	8003c5c <_UG_PutChar>
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd90      	pop	{r4, r7, pc}
 8003bc0:	200006dc 	.word	0x200006dc

08003bc4 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8003bce:	4b05      	ldr	r3, [pc, #20]	; (8003be4 <UG_SetForecolor+0x20>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	88fa      	ldrh	r2, [r7, #6]
 8003bd4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	200006dc 	.word	0x200006dc

08003be8 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8003bf2:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <UG_SetBackcolor+0x20>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	88fa      	ldrh	r2, [r7, #6]
 8003bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	200006dc 	.word	0x200006dc

08003c0c <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b083      	sub	sp, #12
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	4603      	mov	r3, r0
 8003c14:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8003c16:	4b06      	ldr	r3, [pc, #24]	; (8003c30 <UG_FontSetHSpace+0x24>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	88fa      	ldrh	r2, [r7, #6]
 8003c1c:	b252      	sxtb	r2, r2
 8003c1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	200006dc 	.word	0x200006dc

08003c34 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8003c3e:	4b06      	ldr	r3, [pc, #24]	; (8003c58 <UG_FontSetVSpace+0x24>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	88fa      	ldrh	r2, [r7, #6]
 8003c44:	b252      	sxtb	r2, r2
 8003c46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8003c4a:	bf00      	nop
 8003c4c:	370c      	adds	r7, #12
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	200006dc 	.word	0x200006dc

08003c5c <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4604      	mov	r4, r0
 8003c64:	4608      	mov	r0, r1
 8003c66:	4611      	mov	r1, r2
 8003c68:	461a      	mov	r2, r3
 8003c6a:	4623      	mov	r3, r4
 8003c6c:	71fb      	strb	r3, [r7, #7]
 8003c6e:	4603      	mov	r3, r0
 8003c70:	80bb      	strh	r3, [r7, #4]
 8003c72:	460b      	mov	r3, r1
 8003c74:	807b      	strh	r3, [r7, #2]
 8003c76:	4613      	mov	r3, r2
 8003c78:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 8003c7a:	79fb      	ldrb	r3, [r7, #7]
 8003c7c:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8003c7e:	7e3b      	ldrb	r3, [r7, #24]
 8003c80:	2bfc      	cmp	r3, #252	; 0xfc
 8003c82:	dc77      	bgt.n	8003d74 <_UG_PutChar+0x118>
 8003c84:	2bd6      	cmp	r3, #214	; 0xd6
 8003c86:	da08      	bge.n	8003c9a <_UG_PutChar+0x3e>
 8003c88:	2bc4      	cmp	r3, #196	; 0xc4
 8003c8a:	d06a      	beq.n	8003d62 <_UG_PutChar+0x106>
 8003c8c:	2bc4      	cmp	r3, #196	; 0xc4
 8003c8e:	dc71      	bgt.n	8003d74 <_UG_PutChar+0x118>
 8003c90:	2bb0      	cmp	r3, #176	; 0xb0
 8003c92:	d06c      	beq.n	8003d6e <_UG_PutChar+0x112>
 8003c94:	2bb5      	cmp	r3, #181	; 0xb5
 8003c96:	d067      	beq.n	8003d68 <_UG_PutChar+0x10c>
 8003c98:	e06c      	b.n	8003d74 <_UG_PutChar+0x118>
 8003c9a:	3bd6      	subs	r3, #214	; 0xd6
 8003c9c:	2b26      	cmp	r3, #38	; 0x26
 8003c9e:	d869      	bhi.n	8003d74 <_UG_PutChar+0x118>
 8003ca0:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <_UG_PutChar+0x4c>)
 8003ca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca6:	bf00      	nop
 8003ca8:	08003d4b 	.word	0x08003d4b
 8003cac:	08003d75 	.word	0x08003d75
 8003cb0:	08003d75 	.word	0x08003d75
 8003cb4:	08003d75 	.word	0x08003d75
 8003cb8:	08003d75 	.word	0x08003d75
 8003cbc:	08003d75 	.word	0x08003d75
 8003cc0:	08003d57 	.word	0x08003d57
 8003cc4:	08003d75 	.word	0x08003d75
 8003cc8:	08003d75 	.word	0x08003d75
 8003ccc:	08003d75 	.word	0x08003d75
 8003cd0:	08003d75 	.word	0x08003d75
 8003cd4:	08003d75 	.word	0x08003d75
 8003cd8:	08003d75 	.word	0x08003d75
 8003cdc:	08003d75 	.word	0x08003d75
 8003ce0:	08003d5d 	.word	0x08003d5d
 8003ce4:	08003d75 	.word	0x08003d75
 8003ce8:	08003d75 	.word	0x08003d75
 8003cec:	08003d75 	.word	0x08003d75
 8003cf0:	08003d75 	.word	0x08003d75
 8003cf4:	08003d75 	.word	0x08003d75
 8003cf8:	08003d75 	.word	0x08003d75
 8003cfc:	08003d75 	.word	0x08003d75
 8003d00:	08003d75 	.word	0x08003d75
 8003d04:	08003d75 	.word	0x08003d75
 8003d08:	08003d75 	.word	0x08003d75
 8003d0c:	08003d75 	.word	0x08003d75
 8003d10:	08003d75 	.word	0x08003d75
 8003d14:	08003d75 	.word	0x08003d75
 8003d18:	08003d75 	.word	0x08003d75
 8003d1c:	08003d75 	.word	0x08003d75
 8003d20:	08003d75 	.word	0x08003d75
 8003d24:	08003d75 	.word	0x08003d75
 8003d28:	08003d45 	.word	0x08003d45
 8003d2c:	08003d75 	.word	0x08003d75
 8003d30:	08003d75 	.word	0x08003d75
 8003d34:	08003d75 	.word	0x08003d75
 8003d38:	08003d75 	.word	0x08003d75
 8003d3c:	08003d75 	.word	0x08003d75
 8003d40:	08003d51 	.word	0x08003d51
   {
      case 0xF6: bt = 0x94; break; // ö
 8003d44:	2394      	movs	r3, #148	; 0x94
 8003d46:	763b      	strb	r3, [r7, #24]
 8003d48:	e014      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 8003d4a:	2399      	movs	r3, #153	; 0x99
 8003d4c:	763b      	strb	r3, [r7, #24]
 8003d4e:	e011      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 8003d50:	2381      	movs	r3, #129	; 0x81
 8003d52:	763b      	strb	r3, [r7, #24]
 8003d54:	e00e      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 8003d56:	239a      	movs	r3, #154	; 0x9a
 8003d58:	763b      	strb	r3, [r7, #24]
 8003d5a:	e00b      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 8003d5c:	2384      	movs	r3, #132	; 0x84
 8003d5e:	763b      	strb	r3, [r7, #24]
 8003d60:	e008      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 8003d62:	238e      	movs	r3, #142	; 0x8e
 8003d64:	763b      	strb	r3, [r7, #24]
 8003d66:	e005      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 8003d68:	23e6      	movs	r3, #230	; 0xe6
 8003d6a:	763b      	strb	r3, [r7, #24]
 8003d6c:	e002      	b.n	8003d74 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 8003d6e:	23f8      	movs	r3, #248	; 0xf8
 8003d70:	763b      	strb	r3, [r7, #24]
 8003d72:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8003d74:	7e3b      	ldrb	r3, [r7, #24]
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d7a:	895b      	ldrh	r3, [r3, #10]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	f0c0 81fc 	bcc.w	800417a <_UG_PutChar+0x51e>
 8003d82:	7e3b      	ldrb	r3, [r7, #24]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d88:	899b      	ldrh	r3, [r3, #12]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	f200 81f5 	bhi.w	800417a <_UG_PutChar+0x51e>

   yo = y;
 8003d90:	887b      	ldrh	r3, [r7, #2]
 8003d92:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003d9a:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8003d9c:	8b7b      	ldrh	r3, [r7, #26]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	f000 81ed 	beq.w	800417e <_UG_PutChar+0x522>
   bn >>= 3;
 8003da4:	8b7b      	ldrh	r3, [r7, #26]
 8003da6:	08db      	lsrs	r3, r3, #3
 8003da8:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8003daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dac:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	f003 0307 	and.w	r3, r3, #7
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <_UG_PutChar+0x166>
 8003dbc:	8b7b      	ldrh	r3, [r7, #26]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8003dc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d009      	beq.n	8003dde <_UG_PutChar+0x182>
 8003dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dcc:	691b      	ldr	r3, [r3, #16]
 8003dce:	7e3a      	ldrb	r2, [r7, #24]
 8003dd0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003dd2:	8949      	ldrh	r1, [r1, #10]
 8003dd4:	1a52      	subs	r2, r2, r1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	e003      	b.n	8003de6 <_UG_PutChar+0x18a>
 8003dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003de4:	b29b      	uxth	r3, r3
 8003de6:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8003de8:	4b93      	ldr	r3, [pc, #588]	; (8004038 <_UG_PutChar+0x3dc>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003df0:	f003 0302 	and.w	r3, r3, #2
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80d8 	beq.w	8003faa <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8003dfa:	4b8f      	ldr	r3, [pc, #572]	; (8004038 <_UG_PutChar+0x3dc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	461d      	mov	r5, r3
 8003e02:	88ba      	ldrh	r2, [r7, #4]
 8003e04:	8a7b      	ldrh	r3, [r7, #18]
 8003e06:	4413      	add	r3, r2
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	b21c      	sxth	r4, r3
 8003e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003e16:	b29a      	uxth	r2, r3
 8003e18:	887b      	ldrh	r3, [r7, #2]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	3b01      	subs	r3, #1
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	b21b      	sxth	r3, r3
 8003e24:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003e28:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003e2c:	4622      	mov	r2, r4
 8003e2e:	47a8      	blx	r5
 8003e30:	4603      	mov	r3, r0
 8003e32:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 8003e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e36:	791b      	ldrb	r3, [r3, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d14d      	bne.n	8003ed8 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8003e3c:	7e3b      	ldrb	r3, [r7, #24]
 8003e3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e40:	8952      	ldrh	r2, [r2, #10]
 8003e42:	1a9b      	subs	r3, r3, r2
 8003e44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	8b7a      	ldrh	r2, [r7, #26]
 8003e50:	fb02 f303 	mul.w	r3, r2, r3
 8003e54:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 8003e56:	2300      	movs	r3, #0
 8003e58:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003e5a:	e036      	b.n	8003eca <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8003e5c:	8a7b      	ldrh	r3, [r7, #18]
 8003e5e:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 8003e60:	2300      	movs	r3, #0
 8003e62:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003e64:	e02a      	b.n	8003ebc <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 8003e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	1c59      	adds	r1, r3, #1
 8003e6e:	6179      	str	r1, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 8003e76:	2300      	movs	r3, #0
 8003e78:	847b      	strh	r3, [r7, #34]	; 0x22
 8003e7a:	e016      	b.n	8003eaa <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8003e7c:	7e7b      	ldrb	r3, [r7, #25]
 8003e7e:	f003 0301 	and.w	r3, r3, #1
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d004      	beq.n	8003e90 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 8003e86:	883a      	ldrh	r2, [r7, #0]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4610      	mov	r0, r2
 8003e8c:	4798      	blx	r3
 8003e8e:	e003      	b.n	8003e98 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8003e90:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4610      	mov	r0, r2
 8003e96:	4798      	blx	r3
				   }
				   b >>= 1;
 8003e98:	7e7b      	ldrb	r3, [r7, #25]
 8003e9a:	085b      	lsrs	r3, r3, #1
 8003e9c:	767b      	strb	r3, [r7, #25]
				   c--;
 8003e9e:	8bbb      	ldrh	r3, [r7, #28]
 8003ea0:	3b01      	subs	r3, #1
 8003ea2:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8003ea4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	847b      	strh	r3, [r7, #34]	; 0x22
 8003eaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003eac:	2b07      	cmp	r3, #7
 8003eae:	d802      	bhi.n	8003eb6 <_UG_PutChar+0x25a>
 8003eb0:	8bbb      	ldrh	r3, [r7, #28]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d1e2      	bne.n	8003e7c <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8003eb6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003eb8:	3301      	adds	r3, #1
 8003eba:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ebe:	8b7b      	ldrh	r3, [r7, #26]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d3d0      	bcc.n	8003e66 <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8003ec4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003eca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ecc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ece:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	dbc2      	blt.n	8003e5c <_UG_PutChar+0x200>
 8003ed6:	e153      	b.n	8004180 <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8003ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eda:	791b      	ldrb	r3, [r3, #4]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	f040 814f 	bne.w	8004180 <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8003ee2:	7e3b      	ldrb	r3, [r7, #24]
 8003ee4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ee6:	8952      	ldrh	r2, [r2, #10]
 8003ee8:	1a9b      	subs	r3, r3, r2
 8003eea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eec:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003ef0:	fb02 f303 	mul.w	r3, r2, r3
 8003ef4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ef6:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003efa:	fb02 f303 	mul.w	r3, r2, r3
 8003efe:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8003f00:	2300      	movs	r3, #0
 8003f02:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f04:	e04a      	b.n	8003f9c <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 8003f06:	2300      	movs	r3, #0
 8003f08:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f0a:	e036      	b.n	8003f7a <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8003f0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	1c59      	adds	r1, r3, #1
 8003f14:	6179      	str	r1, [r7, #20]
 8003f16:	4413      	add	r3, r2
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8003f1c:	883b      	ldrh	r3, [r7, #0]
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	7e7a      	ldrb	r2, [r7, #25]
 8003f22:	fb03 f202 	mul.w	r2, r3, r2
 8003f26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	7e79      	ldrb	r1, [r7, #25]
 8003f2c:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8003f30:	fb01 f303 	mul.w	r3, r1, r3
 8003f34:	4413      	add	r3, r2
 8003f36:	121b      	asrs	r3, r3, #8
 8003f38:	b21b      	sxth	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	b21a      	sxth	r2, r3
 8003f3e:	883b      	ldrh	r3, [r7, #0]
 8003f40:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f44:	7e79      	ldrb	r1, [r7, #25]
 8003f46:	fb03 f101 	mul.w	r1, r3, r1
 8003f4a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003f50:	7e78      	ldrb	r0, [r7, #25]
 8003f52:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8003f56:	fb00 f303 	mul.w	r3, r0, r3
 8003f5a:	440b      	add	r3, r1
 8003f5c:	121b      	asrs	r3, r3, #8
 8003f5e:	b21b      	sxth	r3, r3
 8003f60:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f64:	b21b      	sxth	r3, r3
 8003f66:	4313      	orrs	r3, r2
 8003f68:	b21b      	sxth	r3, r3
 8003f6a:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8003f6c:	8a3a      	ldrh	r2, [r7, #16]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4610      	mov	r0, r2
 8003f72:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8003f74:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f76:	3301      	adds	r3, #1
 8003f78:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003f7a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003f7c:	8a7b      	ldrh	r3, [r7, #18]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3c4      	bcc.n	8003f0c <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 8003f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f84:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003f88:	461a      	mov	r2, r3
 8003f8a:	8a7b      	ldrh	r3, [r7, #18]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	461a      	mov	r2, r3
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	4413      	add	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8003f96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f98:	3301      	adds	r3, #1
 8003f9a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f9e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fa0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	dbae      	blt.n	8003f06 <_UG_PutChar+0x2aa>
 8003fa8:	e0ea      	b.n	8004180 <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	791b      	ldrb	r3, [r3, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d16e      	bne.n	8004090 <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 8003fb2:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003fb6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003fba:	8a7b      	ldrh	r3, [r7, #18]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	461c      	mov	r4, r3
 8003fc2:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003fc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fcc:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3b01      	subs	r3, #1
 8003fd4:	460a      	mov	r2, r1
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	f000 f99c 	bl	8004314 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8003fdc:	f000 fa14 	bl	8004408 <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8003fe0:	7e3b      	ldrb	r3, [r7, #24]
 8003fe2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fe4:	8952      	ldrh	r2, [r2, #10]
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fea:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	8b7a      	ldrh	r2, [r7, #26]
 8003ff4:	fb02 f303 	mul.w	r3, r2, r3
 8003ff8:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ffe:	e040      	b.n	8004082 <_UG_PutChar+0x426>
         {
           xo = x;
 8004000:	88bb      	ldrh	r3, [r7, #4]
 8004002:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8004004:	8a7b      	ldrh	r3, [r7, #18]
 8004006:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 8004008:	2300      	movs	r3, #0
 800400a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800400c:	e02f      	b.n	800406e <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 800400e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	1c59      	adds	r1, r3, #1
 8004016:	6179      	str	r1, [r7, #20]
 8004018:	4413      	add	r3, r2
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 800401e:	2300      	movs	r3, #0
 8004020:	847b      	strh	r3, [r7, #34]	; 0x22
 8004022:	e01b      	b.n	800405c <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8004024:	7e7b      	ldrb	r3, [r7, #25]
 8004026:	f003 0301 	and.w	r3, r3, #1
 800402a:	2b00      	cmp	r3, #0
 800402c:	d006      	beq.n	800403c <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 800402e:	883b      	ldrh	r3, [r7, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f000 f9f0 	bl	8004416 <SSD1963_ConsecutivePSet>
 8004036:	e005      	b.n	8004044 <_UG_PutChar+0x3e8>
 8004038:	200006dc 	.word	0x200006dc
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 800403c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800403e:	4618      	mov	r0, r3
 8004040:	f000 f9e9 	bl	8004416 <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 8004044:	7e7b      	ldrb	r3, [r7, #25]
 8004046:	085b      	lsrs	r3, r3, #1
 8004048:	767b      	strb	r3, [r7, #25]
               xo++;
 800404a:	8c3b      	ldrh	r3, [r7, #32]
 800404c:	3301      	adds	r3, #1
 800404e:	843b      	strh	r3, [r7, #32]
               c--;
 8004050:	8bbb      	ldrh	r3, [r7, #28]
 8004052:	3b01      	subs	r3, #1
 8004054:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8004056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004058:	3301      	adds	r3, #1
 800405a:	847b      	strh	r3, [r7, #34]	; 0x22
 800405c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800405e:	2b07      	cmp	r3, #7
 8004060:	d802      	bhi.n	8004068 <_UG_PutChar+0x40c>
 8004062:	8bbb      	ldrh	r3, [r7, #28]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d1dd      	bne.n	8004024 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 8004068:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800406a:	3301      	adds	r3, #1
 800406c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800406e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004070:	8b7b      	ldrh	r3, [r7, #26]
 8004072:	429a      	cmp	r2, r3
 8004074:	d3cb      	bcc.n	800400e <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 8004076:	8bfb      	ldrh	r3, [r7, #30]
 8004078:	3301      	adds	r3, #1
 800407a:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 800407c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800407e:	3301      	adds	r3, #1
 8004080:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004084:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004086:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800408a:	4293      	cmp	r3, r2
 800408c:	dbb8      	blt.n	8004000 <_UG_PutChar+0x3a4>
 800408e:	e077      	b.n	8004180 <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8004090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004092:	791b      	ldrb	r3, [r3, #4]
 8004094:	2b01      	cmp	r3, #1
 8004096:	d173      	bne.n	8004180 <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8004098:	7e3b      	ldrb	r3, [r7, #24]
 800409a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800409c:	8952      	ldrh	r2, [r2, #10]
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040a2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80040a6:	fb02 f303 	mul.w	r3, r2, r3
 80040aa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040ac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80040b0:	fb02 f303 	mul.w	r3, r2, r3
 80040b4:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 80040b6:	2300      	movs	r3, #0
 80040b8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80040ba:	e057      	b.n	800416c <_UG_PutChar+0x510>
         {
            xo = x;
 80040bc:	88bb      	ldrh	r3, [r7, #4]
 80040be:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 80040c0:	2300      	movs	r3, #0
 80040c2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80040c4:	e03e      	b.n	8004144 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 80040c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040c8:	681a      	ldr	r2, [r3, #0]
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	1c59      	adds	r1, r3, #1
 80040ce:	6179      	str	r1, [r7, #20]
 80040d0:	4413      	add	r3, r2
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 80040d6:	883b      	ldrh	r3, [r7, #0]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	7e7a      	ldrb	r2, [r7, #25]
 80040dc:	fb03 f202 	mul.w	r2, r3, r2
 80040e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	7e79      	ldrb	r1, [r7, #25]
 80040e6:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80040ea:	fb01 f303 	mul.w	r3, r1, r3
 80040ee:	4413      	add	r3, r2
 80040f0:	121b      	asrs	r3, r3, #8
 80040f2:	b21b      	sxth	r3, r3
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	b21a      	sxth	r2, r3
 80040f8:	883b      	ldrh	r3, [r7, #0]
 80040fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80040fe:	7e79      	ldrb	r1, [r7, #25]
 8004100:	fb03 f101 	mul.w	r1, r3, r1
 8004104:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004106:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800410a:	7e78      	ldrb	r0, [r7, #25]
 800410c:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004110:	fb00 f303 	mul.w	r3, r0, r3
 8004114:	440b      	add	r3, r1
 8004116:	121b      	asrs	r3, r3, #8
 8004118:	b21b      	sxth	r3, r3
 800411a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800411e:	b21b      	sxth	r3, r3
 8004120:	4313      	orrs	r3, r2
 8004122:	b21b      	sxth	r3, r3
 8004124:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <_UG_PutChar+0x52c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8004130:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8004134:	8a3a      	ldrh	r2, [r7, #16]
 8004136:	4798      	blx	r3
               xo++;
 8004138:	8c3b      	ldrh	r3, [r7, #32]
 800413a:	3301      	adds	r3, #1
 800413c:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 800413e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004140:	3301      	adds	r3, #1
 8004142:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004144:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004146:	8a7b      	ldrh	r3, [r7, #18]
 8004148:	429a      	cmp	r2, r3
 800414a:	d3bc      	bcc.n	80040c6 <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 800414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004152:	461a      	mov	r2, r3
 8004154:	8a7b      	ldrh	r3, [r7, #18]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	461a      	mov	r2, r3
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	4413      	add	r3, r2
 800415e:	617b      	str	r3, [r7, #20]
            yo++;
 8004160:	8bfb      	ldrh	r3, [r7, #30]
 8004162:	3301      	adds	r3, #1
 8004164:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8004166:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004168:	3301      	adds	r3, #1
 800416a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800416c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800416e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004170:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004174:	4293      	cmp	r3, r2
 8004176:	dba1      	blt.n	80040bc <_UG_PutChar+0x460>
 8004178:	e002      	b.n	8004180 <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <_UG_PutChar+0x524>
   if ( !bn ) return;
 800417e:	bf00      	nop
         }
      }
   }
}
 8004180:	3728      	adds	r7, #40	; 0x28
 8004182:	46bd      	mov	sp, r7
 8004184:	bdb0      	pop	{r4, r5, r7, pc}
 8004186:	bf00      	nop
 8004188:	200006dc 	.word	0x200006dc

0800418c <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	6039      	str	r1, [r7, #0]
 8004196:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8004198:	79fb      	ldrb	r3, [r7, #7]
 800419a:	2b06      	cmp	r3, #6
 800419c:	d810      	bhi.n	80041c0 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 800419e:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <UG_DriverRegister+0x40>)
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	79fb      	ldrb	r3, [r7, #7]
 80041a4:	3309      	adds	r3, #9
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	683a      	ldr	r2, [r7, #0]
 80041ac:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80041ae:	4b07      	ldr	r3, [pc, #28]	; (80041cc <UG_DriverRegister+0x40>)
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	3309      	adds	r3, #9
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	4413      	add	r3, r2
 80041ba:	2203      	movs	r2, #3
 80041bc:	721a      	strb	r2, [r3, #8]
 80041be:	e000      	b.n	80041c2 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80041c0:	bf00      	nop
}
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr
 80041cc:	200006dc 	.word	0x200006dc

080041d0 <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 80041d4:	2001      	movs	r0, #1
 80041d6:	f000 fa3e 	bl	8004656 <write_command>
    HAL_Delay(10);
 80041da:	200a      	movs	r0, #10
 80041dc:	f000 fb24 	bl	8004828 <HAL_Delay>
}
 80041e0:	bf00      	nop
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <SSD1963_Init>:

void SSD1963_Init()
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 80041e8:	f7ff fff2 	bl	80041d0 <SSD1963_Reset>

    write_command(0xe0);
 80041ec:	20e0      	movs	r0, #224	; 0xe0
 80041ee:	f000 fa32 	bl	8004656 <write_command>
    write_data(0x01);            //Enable PLL
 80041f2:	2001      	movs	r0, #1
 80041f4:	f000 fa4a 	bl	800468c <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 80041f8:	20e0      	movs	r0, #224	; 0xe0
 80041fa:	f000 fa2c 	bl	8004656 <write_command>
    write_data(0x03);            //Lock PLL
 80041fe:	2003      	movs	r0, #3
 8004200:	f000 fa44 	bl	800468c <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8004204:	f7ff ffe4 	bl	80041d0 <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8004208:	20b0      	movs	r0, #176	; 0xb0
 800420a:	f000 fa24 	bl	8004656 <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 800420e:	2008      	movs	r0, #8
 8004210:	f000 fa3c 	bl	800468c <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8004214:	2080      	movs	r0, #128	; 0x80
 8004216:	f000 fa39 	bl	800468c <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 800421a:	2001      	movs	r0, #1
 800421c:	f000 fa36 	bl	800468c <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8004220:	20df      	movs	r0, #223	; 0xdf
 8004222:	f000 fa33 	bl	800468c <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8004226:	2001      	movs	r0, #1
 8004228:	f000 fa30 	bl	800468c <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 800422c:	200f      	movs	r0, #15
 800422e:	f000 fa2d 	bl	800468c <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8004232:	2000      	movs	r0, #0
 8004234:	f000 fa2a 	bl	800468c <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8004238:	20f0      	movs	r0, #240	; 0xf0
 800423a:	f000 fa0c 	bl	8004656 <write_command>
    write_data(0x03);
 800423e:	2003      	movs	r0, #3
 8004240:	f000 fa24 	bl	800468c <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8004244:	20e6      	movs	r0, #230	; 0xe6
 8004246:	f000 fa06 	bl	8004656 <write_command>
    write_data(0x01);    //02
 800424a:	2001      	movs	r0, #1
 800424c:	f000 fa1e 	bl	800468c <write_data>
    write_data(0x45);    //ff
 8004250:	2045      	movs	r0, #69	; 0x45
 8004252:	f000 fa1b 	bl	800468c <write_data>
    write_data(0x47);    //ff
 8004256:	2047      	movs	r0, #71	; 0x47
 8004258:	f000 fa18 	bl	800468c <write_data>

    write_command(0xb4); //set HBP
 800425c:	20b4      	movs	r0, #180	; 0xb4
 800425e:	f000 f9fa 	bl	8004656 <write_command>
    write_data(0x02); //set Hsync = 600
 8004262:	2002      	movs	r0, #2
 8004264:	f000 fa12 	bl	800468c <write_data>
    write_data(0x0d);
 8004268:	200d      	movs	r0, #13
 800426a:	f000 fa0f 	bl	800468c <write_data>
    write_data(0x00);    //set HBP 68
 800426e:	2000      	movs	r0, #0
 8004270:	f000 fa0c 	bl	800468c <write_data>
    write_data(0x2b);
 8004274:	202b      	movs	r0, #43	; 0x2b
 8004276:	f000 fa09 	bl	800468c <write_data>
    write_data(0x28);    //set VBP 16
 800427a:	2028      	movs	r0, #40	; 0x28
 800427c:	f000 fa06 	bl	800468c <write_data>
    write_data(0x00);    //Set Hsync start position
 8004280:	2000      	movs	r0, #0
 8004282:	f000 fa03 	bl	800468c <write_data>
    write_data(0x00);
 8004286:	2000      	movs	r0, #0
 8004288:	f000 fa00 	bl	800468c <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 800428c:	2000      	movs	r0, #0
 800428e:	f000 f9fd 	bl	800468c <write_data>

    write_command(0xb6); //set VBP
 8004292:	20b6      	movs	r0, #182	; 0xb6
 8004294:	f000 f9df 	bl	8004656 <write_command>
    write_data(0x01);    //set Vsync total 360
 8004298:	2001      	movs	r0, #1
 800429a:	f000 f9f7 	bl	800468c <write_data>
    write_data(0x1d);
 800429e:	201d      	movs	r0, #29
 80042a0:	f000 f9f4 	bl	800468c <write_data>
    write_data(0x00);    //set VBP = 19
 80042a4:	2000      	movs	r0, #0
 80042a6:	f000 f9f1 	bl	800468c <write_data>
    write_data(0x0c);
 80042aa:	200c      	movs	r0, #12
 80042ac:	f000 f9ee 	bl	800468c <write_data>
    write_data(0x09);    //set Vsync pulse 8
 80042b0:	2009      	movs	r0, #9
 80042b2:	f000 f9eb 	bl	800468c <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 80042b6:	2000      	movs	r0, #0
 80042b8:	f000 f9e8 	bl	800468c <write_data>
    write_data(0x00);
 80042bc:	2000      	movs	r0, #0
 80042be:	f000 f9e5 	bl	800468c <write_data>

    write_command(0x2a); //set column address
 80042c2:	202a      	movs	r0, #42	; 0x2a
 80042c4:	f000 f9c7 	bl	8004656 <write_command>
    write_data(0x00);    //set start column address 0
 80042c8:	2000      	movs	r0, #0
 80042ca:	f000 f9df 	bl	800468c <write_data>
    write_data(0x00);
 80042ce:	2000      	movs	r0, #0
 80042d0:	f000 f9dc 	bl	800468c <write_data>
    write_data(0x01);    //set end column address = 479
 80042d4:	2001      	movs	r0, #1
 80042d6:	f000 f9d9 	bl	800468c <write_data>
    write_data(0xdf);
 80042da:	20df      	movs	r0, #223	; 0xdf
 80042dc:	f000 f9d6 	bl	800468c <write_data>

    write_command(0x2b); //set page address
 80042e0:	202b      	movs	r0, #43	; 0x2b
 80042e2:	f000 f9b8 	bl	8004656 <write_command>
    write_data(0x00);    //set start page address = 0
 80042e6:	2000      	movs	r0, #0
 80042e8:	f000 f9d0 	bl	800468c <write_data>
    write_data(0x00);
 80042ec:	2000      	movs	r0, #0
 80042ee:	f000 f9cd 	bl	800468c <write_data>
    write_data(0x01);    //set end column address = 479
 80042f2:	2001      	movs	r0, #1
 80042f4:	f000 f9ca 	bl	800468c <write_data>
    write_data(0x0f);
 80042f8:	200f      	movs	r0, #15
 80042fa:	f000 f9c7 	bl	800468c <write_data>

    write_command(0x13); //set normal mode
 80042fe:	2013      	movs	r0, #19
 8004300:	f000 f9a9 	bl	8004656 <write_command>
    write_command(0x38); //set normal mode
 8004304:	2038      	movs	r0, #56	; 0x38
 8004306:	f000 f9a6 	bl	8004656 <write_command>
    write_command(0x29); //set display on
 800430a:	2029      	movs	r0, #41	; 0x29
 800430c:	f000 f9a3 	bl	8004656 <write_command>
}
 8004310:	bf00      	nop
 8004312:	bd80      	pop	{r7, pc}

08004314 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
 8004320:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	b29b      	uxth	r3, r3
 8004328:	b2db      	uxtb	r3, r3
 800432a:	b29b      	uxth	r3, r3
 800432c:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	b29b      	uxth	r3, r3
 8004332:	b2db      	uxtb	r3, r3
 8004334:	b29b      	uxth	r3, r3
 8004336:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	0a1b      	lsrs	r3, r3, #8
 800433c:	b29b      	uxth	r3, r3
 800433e:	b2db      	uxtb	r3, r3
 8004340:	b29b      	uxth	r3, r3
 8004342:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	b29b      	uxth	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	b29b      	uxth	r3, r3
 800434c:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 800434e:	202a      	movs	r0, #42	; 0x2a
 8004350:	f000 f981 	bl	8004656 <write_command>
    write_multi_data(data, 4);
 8004354:	f107 0310 	add.w	r3, r7, #16
 8004358:	2104      	movs	r1, #4
 800435a:	4618      	mov	r0, r3
 800435c:	f000 f9b0 	bl	80046c0 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	0a1b      	lsrs	r3, r3, #8
 8004364:	b29b      	uxth	r3, r3
 8004366:	b2db      	uxtb	r3, r3
 8004368:	b29b      	uxth	r3, r3
 800436a:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	b29b      	uxth	r3, r3
 8004370:	b2db      	uxtb	r3, r3
 8004372:	b29b      	uxth	r3, r3
 8004374:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	0a1b      	lsrs	r3, r3, #8
 800437a:	b29b      	uxth	r3, r3
 800437c:	b2db      	uxtb	r3, r3
 800437e:	b29b      	uxth	r3, r3
 8004380:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	b29b      	uxth	r3, r3
 8004386:	b2db      	uxtb	r3, r3
 8004388:	b29b      	uxth	r3, r3
 800438a:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 800438c:	202b      	movs	r0, #43	; 0x2b
 800438e:	f000 f962 	bl	8004656 <write_command>
    write_multi_data(data, 4);
 8004392:	f107 0310 	add.w	r3, r7, #16
 8004396:	2104      	movs	r1, #4
 8004398:	4618      	mov	r0, r3
 800439a:	f000 f991 	bl	80046c0 <write_multi_data>
}
 800439e:	bf00      	nop
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}

080043a6 <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80043a6:	b580      	push	{r7, lr}
 80043a8:	b082      	sub	sp, #8
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	80fb      	strh	r3, [r7, #6]
 80043b0:	460b      	mov	r3, r1
 80043b2:	80bb      	strh	r3, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80043b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	db1f      	blt.n	8004400 <SSD1963_PSet+0x5a>
 80043c0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043c4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80043c8:	da1a      	bge.n	8004400 <SSD1963_PSet+0x5a>
 80043ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	db16      	blt.n	8004400 <SSD1963_PSet+0x5a>
 80043d2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043d6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80043da:	da11      	bge.n	8004400 <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 80043dc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80043e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4619      	mov	r1, r3
 80043e8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80043ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80043f0:	3301      	adds	r3, #1
 80043f2:	f7ff ff8f 	bl	8004314 <SSD1963_WindowSet>
    write_data(c);
 80043f6:	887b      	ldrh	r3, [r7, #2]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f000 f947 	bl	800468c <write_data>
 80043fe:	e000      	b.n	8004402 <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8004400:	bf00      	nop
}
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 8004408:	b580      	push	{r7, lr}
 800440a:	af00      	add	r7, sp, #0
	write_command(0x2c);
 800440c:	202c      	movs	r0, #44	; 0x2c
 800440e:	f000 f922 	bl	8004656 <write_command>
}
 8004412:	bf00      	nop
 8004414:	bd80      	pop	{r7, pc}

08004416 <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	4603      	mov	r3, r0
 800441e:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f932 	bl	800468c <write_data>
}
 8004428:	bf00      	nop
 800442a:	3708      	adds	r7, #8
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8004430:	b590      	push	{r4, r7, lr}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	4604      	mov	r4, r0
 8004438:	4608      	mov	r0, r1
 800443a:	4611      	mov	r1, r2
 800443c:	461a      	mov	r2, r3
 800443e:	4623      	mov	r3, r4
 8004440:	80fb      	strh	r3, [r7, #6]
 8004442:	4603      	mov	r3, r0
 8004444:	80bb      	strh	r3, [r7, #4]
 8004446:	460b      	mov	r3, r1
 8004448:	807b      	strh	r3, [r7, #2]
 800444a:	4613      	mov	r3, r2
 800444c:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800444e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004452:	2b00      	cmp	r3, #0
 8004454:	db0d      	blt.n	8004472 <HW_FillFrame+0x42>
 8004456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800445a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800445e:	da08      	bge.n	8004472 <HW_FillFrame+0x42>
 8004460:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	db04      	blt.n	8004472 <HW_FillFrame+0x42>
 8004468:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800446c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004470:	db02      	blt.n	8004478 <HW_FillFrame+0x48>
 8004472:	f04f 33ff 	mov.w	r3, #4294967295
 8004476:	e03c      	b.n	80044f2 <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004478:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800447c:	2b00      	cmp	r3, #0
 800447e:	db0d      	blt.n	800449c <HW_FillFrame+0x6c>
 8004480:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004484:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004488:	da08      	bge.n	800449c <HW_FillFrame+0x6c>
 800448a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800448e:	2b00      	cmp	r3, #0
 8004490:	db04      	blt.n	800449c <HW_FillFrame+0x6c>
 8004492:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004496:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800449a:	db02      	blt.n	80044a2 <HW_FillFrame+0x72>
 800449c:	f04f 33ff 	mov.w	r3, #4294967295
 80044a0:	e027      	b.n	80044f2 <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 80044a2:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80044a6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80044aa:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80044ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80044b2:	f7ff ff2f 	bl	8004314 <SSD1963_WindowSet>

    write_command(0x2c);
 80044b6:	202c      	movs	r0, #44	; 0x2c
 80044b8:	f000 f8cd 	bl	8004656 <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 80044bc:	88fb      	ldrh	r3, [r7, #6]
 80044be:	81fb      	strh	r3, [r7, #14]
 80044c0:	e011      	b.n	80044e6 <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80044c2:	88bb      	ldrh	r3, [r7, #4]
 80044c4:	81bb      	strh	r3, [r7, #12]
 80044c6:	e006      	b.n	80044d6 <HW_FillFrame+0xa6>
        {
            write_data(c);
 80044c8:	8c3b      	ldrh	r3, [r7, #32]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f8de 	bl	800468c <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80044d0:	89bb      	ldrh	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	81bb      	strh	r3, [r7, #12]
 80044d6:	f9b7 2000 	ldrsh.w	r2, [r7]
 80044da:	89bb      	ldrh	r3, [r7, #12]
 80044dc:	429a      	cmp	r2, r3
 80044de:	daf3      	bge.n	80044c8 <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 80044e0:	89fb      	ldrh	r3, [r7, #14]
 80044e2:	3301      	adds	r3, #1
 80044e4:	81fb      	strh	r3, [r7, #14]
 80044e6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80044ea:	89fb      	ldrh	r3, [r7, #14]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	dae8      	bge.n	80044c2 <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3714      	adds	r7, #20
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd90      	pop	{r4, r7, pc}

080044fa <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 80044fa:	b590      	push	{r4, r7, lr}
 80044fc:	b085      	sub	sp, #20
 80044fe:	af02      	add	r7, sp, #8
 8004500:	4604      	mov	r4, r0
 8004502:	4608      	mov	r0, r1
 8004504:	4611      	mov	r1, r2
 8004506:	461a      	mov	r2, r3
 8004508:	4623      	mov	r3, r4
 800450a:	80fb      	strh	r3, [r7, #6]
 800450c:	4603      	mov	r3, r0
 800450e:	80bb      	strh	r3, [r7, #4]
 8004510:	460b      	mov	r3, r1
 8004512:	807b      	strh	r3, [r7, #2]
 8004514:	4613      	mov	r3, r2
 8004516:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004518:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451c:	2b00      	cmp	r3, #0
 800451e:	db0d      	blt.n	800453c <HW_DrawLine+0x42>
 8004520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004524:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004528:	da08      	bge.n	800453c <HW_DrawLine+0x42>
 800452a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	db04      	blt.n	800453c <HW_DrawLine+0x42>
 8004532:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004536:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800453a:	db02      	blt.n	8004542 <HW_DrawLine+0x48>
 800453c:	f04f 33ff 	mov.w	r3, #4294967295
 8004540:	e031      	b.n	80045a6 <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004542:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004546:	2b00      	cmp	r3, #0
 8004548:	db0d      	blt.n	8004566 <HW_DrawLine+0x6c>
 800454a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800454e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004552:	da08      	bge.n	8004566 <HW_DrawLine+0x6c>
 8004554:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004558:	2b00      	cmp	r3, #0
 800455a:	db04      	blt.n	8004566 <HW_DrawLine+0x6c>
 800455c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004560:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004564:	db02      	blt.n	800456c <HW_DrawLine+0x72>
 8004566:	f04f 33ff 	mov.w	r3, #4294967295
 800456a:	e01c      	b.n	80045a6 <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 800456c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004570:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004574:	429a      	cmp	r2, r3
 8004576:	d005      	beq.n	8004584 <HW_DrawLine+0x8a>
 8004578:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800457c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004580:	429a      	cmp	r2, r3
 8004582:	d10e      	bne.n	80045a2 <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8004584:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004588:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800458c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004590:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004594:	8b3b      	ldrh	r3, [r7, #24]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4623      	mov	r3, r4
 800459a:	f7ff ff49 	bl	8004430 <HW_FillFrame>
        return UG_RESULT_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e001      	b.n	80045a6 <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 80045a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	370c      	adds	r7, #12
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd90      	pop	{r4, r7, pc}

080045ae <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 80045ae:	b590      	push	{r4, r7, lr}
 80045b0:	b083      	sub	sp, #12
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4604      	mov	r4, r0
 80045b6:	4608      	mov	r0, r1
 80045b8:	4611      	mov	r1, r2
 80045ba:	461a      	mov	r2, r3
 80045bc:	4623      	mov	r3, r4
 80045be:	80fb      	strh	r3, [r7, #6]
 80045c0:	4603      	mov	r3, r0
 80045c2:	80bb      	strh	r3, [r7, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	807b      	strh	r3, [r7, #2]
 80045c8:	4613      	mov	r3, r2
 80045ca:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80045cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	db0d      	blt.n	80045f0 <HW_DrawImage+0x42>
 80045d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80045d8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80045dc:	da08      	bge.n	80045f0 <HW_DrawImage+0x42>
 80045de:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	db04      	blt.n	80045f0 <HW_DrawImage+0x42>
 80045e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045ea:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80045ee:	db02      	blt.n	80045f6 <HW_DrawImage+0x48>
 80045f0:	f04f 33ff 	mov.w	r3, #4294967295
 80045f4:	e02b      	b.n	800464e <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80045f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	db0d      	blt.n	800461a <HW_DrawImage+0x6c>
 80045fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004602:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004606:	da08      	bge.n	800461a <HW_DrawImage+0x6c>
 8004608:	f9b7 3000 	ldrsh.w	r3, [r7]
 800460c:	2b00      	cmp	r3, #0
 800460e:	db04      	blt.n	800461a <HW_DrawImage+0x6c>
 8004610:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004614:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004618:	db02      	blt.n	8004620 <HW_DrawImage+0x72>
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
 800461e:	e016      	b.n	800464e <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004620:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004624:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004628:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800462c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004630:	f7ff fe70 	bl	8004314 <SSD1963_WindowSet>

    write_command(0x2c);
 8004634:	202c      	movs	r0, #44	; 0x2c
 8004636:	f000 f80e 	bl	8004656 <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 800463a:	8bbb      	ldrh	r3, [r7, #28]
 800463c:	461a      	mov	r2, r3
 800463e:	0052      	lsls	r2, r2, #1
 8004640:	4413      	add	r3, r2
 8004642:	b29b      	uxth	r3, r3
 8004644:	4619      	mov	r1, r3
 8004646:	69b8      	ldr	r0, [r7, #24]
 8004648:	f000 f83a 	bl	80046c0 <write_multi_data>

    return UG_RESULT_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	bd90      	pop	{r4, r7, pc}

08004656 <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	4603      	mov	r3, r0
 800465e:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 8004660:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004664:	79fa      	ldrb	r2, [r7, #7]
 8004666:	b292      	uxth	r2, r2
 8004668:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 800466a:	2300      	movs	r3, #0
 800466c:	81fb      	strh	r3, [r7, #14]
 800466e:	e002      	b.n	8004676 <write_command+0x20>
 8004670:	89fb      	ldrh	r3, [r7, #14]
 8004672:	3301      	adds	r3, #1
 8004674:	81fb      	strh	r3, [r7, #14]
 8004676:	89fb      	ldrh	r3, [r7, #14]
 8004678:	2b0b      	cmp	r3, #11
 800467a:	d9f9      	bls.n	8004670 <write_command+0x1a>
}
 800467c:	bf00      	nop
 800467e:	bf00      	nop
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <write_data>:


void write_data(DATA_t data)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	4603      	mov	r3, r0
 8004694:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <write_data+0x30>)
 8004698:	88fb      	ldrh	r3, [r7, #6]
 800469a:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 800469c:	2300      	movs	r3, #0
 800469e:	81fb      	strh	r3, [r7, #14]
 80046a0:	e002      	b.n	80046a8 <write_data+0x1c>
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	3301      	adds	r3, #1
 80046a6:	81fb      	strh	r3, [r7, #14]
 80046a8:	89fb      	ldrh	r3, [r7, #14]
 80046aa:	2b0b      	cmp	r3, #11
 80046ac:	d9f9      	bls.n	80046a2 <write_data+0x16>
 }
 80046ae:	bf00      	nop
 80046b0:	bf00      	nop
 80046b2:	3714      	adds	r7, #20
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	60000100 	.word	0x60000100

080046c0 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	460b      	mov	r3, r1
 80046ca:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 80046cc:	2300      	movs	r3, #0
 80046ce:	81fb      	strh	r3, [r7, #14]
 80046d0:	e016      	b.n	8004700 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 80046d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046d6:	005b      	lsls	r3, r3, #1
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	4413      	add	r3, r2
 80046dc:	4a0e      	ldr	r2, [pc, #56]	; (8004718 <write_multi_data+0x58>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80046e2:	2300      	movs	r3, #0
 80046e4:	81bb      	strh	r3, [r7, #12]
 80046e6:	e002      	b.n	80046ee <write_multi_data+0x2e>
 80046e8:	89bb      	ldrh	r3, [r7, #12]
 80046ea:	3301      	adds	r3, #1
 80046ec:	81bb      	strh	r3, [r7, #12]
 80046ee:	89bb      	ldrh	r3, [r7, #12]
 80046f0:	2b0b      	cmp	r3, #11
 80046f2:	d9f9      	bls.n	80046e8 <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 80046f4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	3301      	adds	r3, #1
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	81fb      	strh	r3, [r7, #14]
 8004700:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004704:	887b      	ldrh	r3, [r7, #2]
 8004706:	429a      	cmp	r2, r3
 8004708:	dbe3      	blt.n	80046d2 <write_multi_data+0x12>
    }
}
 800470a:	bf00      	nop
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	60000100 	.word	0x60000100

0800471c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800471c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004720:	480d      	ldr	r0, [pc, #52]	; (8004758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004722:	490e      	ldr	r1, [pc, #56]	; (800475c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004724:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004728:	e002      	b.n	8004730 <LoopCopyDataInit>

0800472a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800472a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800472c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800472e:	3304      	adds	r3, #4

08004730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004734:	d3f9      	bcc.n	800472a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004736:	4a0b      	ldr	r2, [pc, #44]	; (8004764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004738:	4c0b      	ldr	r4, [pc, #44]	; (8004768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800473a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800473c:	e001      	b.n	8004742 <LoopFillZerobss>

0800473e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800473e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004740:	3204      	adds	r2, #4

08004742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004744:	d3fb      	bcc.n	800473e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004746:	f7fe feef 	bl	8003528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800474a:	f004 faf1 	bl	8008d30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800474e:	f7fd fa6d 	bl	8001c2c <main>
  bx  lr    
 8004752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004754:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800475c:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8004760:	08018c60 	.word	0x08018c60
  ldr r2, =_sbss
 8004764:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8004768:	2000082c 	.word	0x2000082c

0800476c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800476c:	e7fe      	b.n	800476c <ADC_IRQHandler>

0800476e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004772:	2003      	movs	r0, #3
 8004774:	f001 fb9e 	bl	8005eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004778:	200f      	movs	r0, #15
 800477a:	f000 f805 	bl	8004788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800477e:	f7fe fadf 	bl	8002d40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	bd80      	pop	{r7, pc}

08004788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <HAL_InitTick+0x54>)
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	4b12      	ldr	r3, [pc, #72]	; (80047e0 <HAL_InitTick+0x58>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	4619      	mov	r1, r3
 800479a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800479e:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	4618      	mov	r0, r3
 80047a8:	f001 fbb9 	bl	8005f1e <HAL_SYSTICK_Config>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d001      	beq.n	80047b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e00e      	b.n	80047d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b0f      	cmp	r3, #15
 80047ba:	d80a      	bhi.n	80047d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80047bc:	2200      	movs	r2, #0
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	f04f 30ff 	mov.w	r0, #4294967295
 80047c4:	f001 fb81 	bl	8005eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <HAL_InitTick+0x5c>)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
 80047d0:	e000      	b.n	80047d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	20000090 	.word	0x20000090
 80047e0:	20000098 	.word	0x20000098
 80047e4:	20000094 	.word	0x20000094

080047e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047ec:	4b06      	ldr	r3, [pc, #24]	; (8004808 <HAL_IncTick+0x20>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_IncTick+0x24>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4413      	add	r3, r2
 80047f8:	4a04      	ldr	r2, [pc, #16]	; (800480c <HAL_IncTick+0x24>)
 80047fa:	6013      	str	r3, [r2, #0]
}
 80047fc:	bf00      	nop
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	20000098 	.word	0x20000098
 800480c:	200006e0 	.word	0x200006e0

08004810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return uwTick;
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_GetTick+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200006e0 	.word	0x200006e0

08004828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004830:	f7ff ffee 	bl	8004810 <HAL_GetTick>
 8004834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004840:	d005      	beq.n	800484e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004842:	4b0a      	ldr	r3, [pc, #40]	; (800486c <HAL_Delay+0x44>)
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800484e:	bf00      	nop
 8004850:	f7ff ffde 	bl	8004810 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	429a      	cmp	r2, r3
 800485e:	d8f7      	bhi.n	8004850 <HAL_Delay+0x28>
  {
  }
}
 8004860:	bf00      	nop
 8004862:	bf00      	nop
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000098 	.word	0x20000098

08004870 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004878:	2300      	movs	r3, #0
 800487a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d101      	bne.n	8004886 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e031      	b.n	80048ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fe fa7a 	bl	8002d88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d116      	bne.n	80048dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048b2:	4b10      	ldr	r3, [pc, #64]	; (80048f4 <HAL_ADC_Init+0x84>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	f043 0202 	orr.w	r2, r3, #2
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fad6 	bl	8004e70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	f043 0201 	orr.w	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	641a      	str	r2, [r3, #64]	; 0x40
 80048da:	e001      	b.n	80048e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	ffffeefd 	.word	0xffffeefd

080048f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004900:	2300      	movs	r3, #0
 8004902:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800490a:	2b01      	cmp	r3, #1
 800490c:	d101      	bne.n	8004912 <HAL_ADC_Start+0x1a>
 800490e:	2302      	movs	r3, #2
 8004910:	e0ad      	b.n	8004a6e <HAL_ADC_Start+0x176>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2201      	movs	r2, #1
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b01      	cmp	r3, #1
 8004926:	d018      	beq.n	800495a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689a      	ldr	r2, [r3, #8]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0201 	orr.w	r2, r2, #1
 8004936:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004938:	4b50      	ldr	r3, [pc, #320]	; (8004a7c <HAL_ADC_Start+0x184>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a50      	ldr	r2, [pc, #320]	; (8004a80 <HAL_ADC_Start+0x188>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	0c9a      	lsrs	r2, r3, #18
 8004944:	4613      	mov	r3, r2
 8004946:	005b      	lsls	r3, r3, #1
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800494c:	e002      	b.n	8004954 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	3b01      	subs	r3, #1
 8004952:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f9      	bne.n	800494e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b01      	cmp	r3, #1
 8004966:	d175      	bne.n	8004a54 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800496c:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <HAL_ADC_Start+0x18c>)
 800496e:	4013      	ands	r3, r2
 8004970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004982:	2b00      	cmp	r3, #0
 8004984:	d007      	beq.n	8004996 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800498e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800499e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049a2:	d106      	bne.n	80049b2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a8:	f023 0206 	bic.w	r2, r3, #6
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	645a      	str	r2, [r3, #68]	; 0x44
 80049b0:	e002      	b.n	80049b8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80049ca:	4b2f      	ldr	r3, [pc, #188]	; (8004a88 <HAL_ADC_Start+0x190>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f003 031f 	and.w	r3, r3, #31
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d10f      	bne.n	80049f6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d143      	bne.n	8004a6c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689a      	ldr	r2, [r3, #8]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80049f2:	609a      	str	r2, [r3, #8]
 80049f4:	e03a      	b.n	8004a6c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a24      	ldr	r2, [pc, #144]	; (8004a8c <HAL_ADC_Start+0x194>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d10e      	bne.n	8004a1e <HAL_ADC_Start+0x126>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	689b      	ldr	r3, [r3, #8]
 8004a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d107      	bne.n	8004a1e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a1c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004a1e:	4b1a      	ldr	r3, [pc, #104]	; (8004a88 <HAL_ADC_Start+0x190>)
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d120      	bne.n	8004a6c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <HAL_ADC_Start+0x198>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d11b      	bne.n	8004a6c <HAL_ADC_Start+0x174>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d114      	bne.n	8004a6c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	e00b      	b.n	8004a6c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f043 0210 	orr.w	r2, r3, #16
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f043 0201 	orr.w	r2, r3, #1
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	20000090 	.word	0x20000090
 8004a80:	431bde83 	.word	0x431bde83
 8004a84:	fffff8fe 	.word	0xfffff8fe
 8004a88:	40012300 	.word	0x40012300
 8004a8c:	40012000 	.word	0x40012000
 8004a90:	40012200 	.word	0x40012200

08004a94 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b084      	sub	sp, #16
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab0:	d113      	bne.n	8004ada <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004abc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ac0:	d10b      	bne.n	8004ada <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f043 0220 	orr.w	r2, r3, #32
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e063      	b.n	8004ba2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004ada:	f7ff fe99 	bl	8004810 <HAL_GetTick>
 8004ade:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ae0:	e021      	b.n	8004b26 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae8:	d01d      	beq.n	8004b26 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d007      	beq.n	8004b00 <HAL_ADC_PollForConversion+0x6c>
 8004af0:	f7ff fe8e 	bl	8004810 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	683a      	ldr	r2, [r7, #0]
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d212      	bcs.n	8004b26 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b02      	cmp	r3, #2
 8004b0c:	d00b      	beq.n	8004b26 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b12:	f043 0204 	orr.w	r2, r3, #4
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e03d      	b.n	8004ba2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0302 	and.w	r3, r3, #2
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d1d6      	bne.n	8004ae2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0212 	mvn.w	r2, #18
 8004b3c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d123      	bne.n	8004ba0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d11f      	bne.n	8004ba0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d006      	beq.n	8004b7c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d111      	bne.n	8004ba0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	f043 0201 	orr.w	r2, r3, #1
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004baa:	b480      	push	{r7}
 8004bac:	b083      	sub	sp, #12
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	370c      	adds	r7, #12
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr

08004bc4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	b085      	sub	sp, #20
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d101      	bne.n	8004be0 <HAL_ADC_ConfigChannel+0x1c>
 8004bdc:	2302      	movs	r3, #2
 8004bde:	e136      	b.n	8004e4e <HAL_ADC_ConfigChannel+0x28a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2b09      	cmp	r3, #9
 8004bee:	d93a      	bls.n	8004c66 <HAL_ADC_ConfigChannel+0xa2>
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bf8:	d035      	beq.n	8004c66 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68d9      	ldr	r1, [r3, #12]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	461a      	mov	r2, r3
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3b1e      	subs	r3, #30
 8004c10:	2207      	movs	r2, #7
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43da      	mvns	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	400a      	ands	r2, r1
 8004c1e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a8d      	ldr	r2, [pc, #564]	; (8004e5c <HAL_ADC_ConfigChannel+0x298>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d10a      	bne.n	8004c40 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68d9      	ldr	r1, [r3, #12]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	061a      	lsls	r2, r3, #24
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c3e:	e035      	b.n	8004cac <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68d9      	ldr	r1, [r3, #12]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	689a      	ldr	r2, [r3, #8]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	4618      	mov	r0, r3
 8004c52:	4603      	mov	r3, r0
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	4403      	add	r3, r0
 8004c58:	3b1e      	subs	r3, #30
 8004c5a:	409a      	lsls	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	430a      	orrs	r2, r1
 8004c62:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c64:	e022      	b.n	8004cac <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6919      	ldr	r1, [r3, #16]
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	4613      	mov	r3, r2
 8004c76:	005b      	lsls	r3, r3, #1
 8004c78:	4413      	add	r3, r2
 8004c7a:	2207      	movs	r2, #7
 8004c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c80:	43da      	mvns	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	400a      	ands	r2, r1
 8004c88:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6919      	ldr	r1, [r3, #16]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	4403      	add	r3, r0
 8004ca2:	409a      	lsls	r2, r3
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	2b06      	cmp	r3, #6
 8004cb2:	d824      	bhi.n	8004cfe <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	685a      	ldr	r2, [r3, #4]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	3b05      	subs	r3, #5
 8004cc6:	221f      	movs	r2, #31
 8004cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ccc:	43da      	mvns	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	400a      	ands	r2, r1
 8004cd4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	3b05      	subs	r3, #5
 8004cf0:	fa00 f203 	lsl.w	r2, r0, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	635a      	str	r2, [r3, #52]	; 0x34
 8004cfc:	e04c      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	2b0c      	cmp	r3, #12
 8004d04:	d824      	bhi.n	8004d50 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	4613      	mov	r3, r2
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	4413      	add	r3, r2
 8004d16:	3b23      	subs	r3, #35	; 0x23
 8004d18:	221f      	movs	r2, #31
 8004d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d1e:	43da      	mvns	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	400a      	ands	r2, r1
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	b29b      	uxth	r3, r3
 8004d34:	4618      	mov	r0, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	685a      	ldr	r2, [r3, #4]
 8004d3a:	4613      	mov	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	4413      	add	r3, r2
 8004d40:	3b23      	subs	r3, #35	; 0x23
 8004d42:	fa00 f203 	lsl.w	r2, r0, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	631a      	str	r2, [r3, #48]	; 0x30
 8004d4e:	e023      	b.n	8004d98 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4413      	add	r3, r2
 8004d60:	3b41      	subs	r3, #65	; 0x41
 8004d62:	221f      	movs	r2, #31
 8004d64:	fa02 f303 	lsl.w	r3, r2, r3
 8004d68:	43da      	mvns	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	400a      	ands	r2, r1
 8004d70:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	4618      	mov	r0, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685a      	ldr	r2, [r3, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	3b41      	subs	r3, #65	; 0x41
 8004d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a30      	ldr	r2, [pc, #192]	; (8004e60 <HAL_ADC_ConfigChannel+0x29c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10a      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x1f4>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004daa:	d105      	bne.n	8004db8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004dac:	4b2d      	ldr	r3, [pc, #180]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	4a2c      	ldr	r2, [pc, #176]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004db2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004db6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a28      	ldr	r2, [pc, #160]	; (8004e60 <HAL_ADC_ConfigChannel+0x29c>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d10f      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x21e>
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b12      	cmp	r3, #18
 8004dc8:	d10b      	bne.n	8004de2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8004dca:	4b26      	ldr	r3, [pc, #152]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4a25      	ldr	r2, [pc, #148]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004dd0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004dd4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004dd6:	4b23      	ldr	r3, [pc, #140]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4a22      	ldr	r2, [pc, #136]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004ddc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004de0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a1e      	ldr	r2, [pc, #120]	; (8004e60 <HAL_ADC_ConfigChannel+0x29c>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d12b      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x280>
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <HAL_ADC_ConfigChannel+0x298>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d003      	beq.n	8004dfe <HAL_ADC_ConfigChannel+0x23a>
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	2b11      	cmp	r3, #17
 8004dfc:	d122      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8004dfe:	4b19      	ldr	r3, [pc, #100]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	4a18      	ldr	r2, [pc, #96]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e04:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8004e08:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004e0a:	4b16      	ldr	r3, [pc, #88]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4a15      	ldr	r2, [pc, #84]	; (8004e64 <HAL_ADC_ConfigChannel+0x2a0>)
 8004e10:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e14:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4a10      	ldr	r2, [pc, #64]	; (8004e5c <HAL_ADC_ConfigChannel+0x298>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d111      	bne.n	8004e44 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004e20:	4b11      	ldr	r3, [pc, #68]	; (8004e68 <HAL_ADC_ConfigChannel+0x2a4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a11      	ldr	r2, [pc, #68]	; (8004e6c <HAL_ADC_ConfigChannel+0x2a8>)
 8004e26:	fba2 2303 	umull	r2, r3, r2, r3
 8004e2a:	0c9a      	lsrs	r2, r3, #18
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004e36:	e002      	b.n	8004e3e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1f9      	bne.n	8004e38 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop
 8004e5c:	10000012 	.word	0x10000012
 8004e60:	40012000 	.word	0x40012000
 8004e64:	40012300 	.word	0x40012300
 8004e68:	20000090 	.word	0x20000090
 8004e6c:	431bde83 	.word	0x431bde83

08004e70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004e78:	4b78      	ldr	r3, [pc, #480]	; (800505c <ADC_Init+0x1ec>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	4a77      	ldr	r2, [pc, #476]	; (800505c <ADC_Init+0x1ec>)
 8004e7e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004e82:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004e84:	4b75      	ldr	r3, [pc, #468]	; (800505c <ADC_Init+0x1ec>)
 8004e86:	685a      	ldr	r2, [r3, #4]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4973      	ldr	r1, [pc, #460]	; (800505c <ADC_Init+0x1ec>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685a      	ldr	r2, [r3, #4]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ea0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	6859      	ldr	r1, [r3, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	021a      	lsls	r2, r3, #8
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004ec4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6859      	ldr	r1, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6899      	ldr	r1, [r3, #8]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	430a      	orrs	r2, r1
 8004ef8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004efe:	4a58      	ldr	r2, [pc, #352]	; (8005060 <ADC_Init+0x1f0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d022      	beq.n	8004f4a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f12:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	6899      	ldr	r1, [r3, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	430a      	orrs	r2, r1
 8004f24:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6899      	ldr	r1, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	e00f      	b.n	8004f6a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689a      	ldr	r2, [r3, #8]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004f58:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689a      	ldr	r2, [r3, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004f68:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f022 0202 	bic.w	r2, r2, #2
 8004f78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6899      	ldr	r1, [r3, #8]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	005a      	lsls	r2, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d01b      	beq.n	8004fd0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004fb6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6859      	ldr	r1, [r3, #4]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	3b01      	subs	r3, #1
 8004fc4:	035a      	lsls	r2, r3, #13
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	605a      	str	r2, [r3, #4]
 8004fce:	e007      	b.n	8004fe0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fde:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	3b01      	subs	r3, #1
 8004ffc:	051a      	lsls	r2, r3, #20
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	430a      	orrs	r2, r1
 8005004:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689a      	ldr	r2, [r3, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6899      	ldr	r1, [r3, #8]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005022:	025a      	lsls	r2, r3, #9
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	430a      	orrs	r2, r1
 800502a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689a      	ldr	r2, [r3, #8]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6899      	ldr	r1, [r3, #8]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	695b      	ldr	r3, [r3, #20]
 8005046:	029a      	lsls	r2, r3, #10
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	430a      	orrs	r2, r1
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	bf00      	nop
 8005052:	370c      	adds	r7, #12
 8005054:	46bd      	mov	sp, r7
 8005056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505a:	4770      	bx	lr
 800505c:	40012300 	.word	0x40012300
 8005060:	0f000001 	.word	0x0f000001

08005064 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d101      	bne.n	8005076 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e0ed      	b.n	8005252 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3020 	ldrb.w	r3, [r3, #32]
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d102      	bne.n	8005088 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f7fd ff58 	bl	8002f38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0201 	orr.w	r2, r2, #1
 8005096:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005098:	f7ff fbba 	bl	8004810 <HAL_GetTick>
 800509c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800509e:	e012      	b.n	80050c6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050a0:	f7ff fbb6 	bl	8004810 <HAL_GetTick>
 80050a4:	4602      	mov	r2, r0
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	2b0a      	cmp	r3, #10
 80050ac:	d90b      	bls.n	80050c6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2205      	movs	r2, #5
 80050be:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e0c5      	b.n	8005252 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d0e5      	beq.n	80050a0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0202 	bic.w	r2, r2, #2
 80050e2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80050e4:	f7ff fb94 	bl	8004810 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80050ea:	e012      	b.n	8005112 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050ec:	f7ff fb90 	bl	8004810 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	2b0a      	cmp	r3, #10
 80050f8:	d90b      	bls.n	8005112 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2205      	movs	r2, #5
 800510a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e09f      	b.n	8005252 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e5      	bne.n	80050ec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	7e1b      	ldrb	r3, [r3, #24]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d108      	bne.n	800513a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681a      	ldr	r2, [r3, #0]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	e007      	b.n	800514a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005148:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	7e5b      	ldrb	r3, [r3, #25]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d108      	bne.n	8005164 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	e007      	b.n	8005174 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005172:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	7e9b      	ldrb	r3, [r3, #26]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d108      	bne.n	800518e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0220 	orr.w	r2, r2, #32
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	e007      	b.n	800519e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681a      	ldr	r2, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 0220 	bic.w	r2, r2, #32
 800519c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	7edb      	ldrb	r3, [r3, #27]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d108      	bne.n	80051b8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0210 	bic.w	r2, r2, #16
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	e007      	b.n	80051c8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0210 	orr.w	r2, r2, #16
 80051c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	7f1b      	ldrb	r3, [r3, #28]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d108      	bne.n	80051e2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f042 0208 	orr.w	r2, r2, #8
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e007      	b.n	80051f2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681a      	ldr	r2, [r3, #0]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f022 0208 	bic.w	r2, r2, #8
 80051f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	7f5b      	ldrb	r3, [r3, #29]
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d108      	bne.n	800520c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f042 0204 	orr.w	r2, r2, #4
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	e007      	b.n	800521c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f022 0204 	bic.w	r2, r2, #4
 800521a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689a      	ldr	r2, [r3, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	431a      	orrs	r2, r3
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695b      	ldr	r3, [r3, #20]
 8005230:	ea42 0103 	orr.w	r1, r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	1e5a      	subs	r2, r3, #1
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	430a      	orrs	r2, r1
 8005240:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	3710      	adds	r7, #16
 8005256:	46bd      	mov	sp, r7
 8005258:	bd80      	pop	{r7, pc}
	...

0800525c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800525c:	b480      	push	{r7}
 800525e:	b087      	sub	sp, #28
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
 8005264:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005272:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005274:	7cfb      	ldrb	r3, [r7, #19]
 8005276:	2b01      	cmp	r3, #1
 8005278:	d003      	beq.n	8005282 <HAL_CAN_ConfigFilter+0x26>
 800527a:	7cfb      	ldrb	r3, [r7, #19]
 800527c:	2b02      	cmp	r3, #2
 800527e:	f040 80be 	bne.w	80053fe <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005282:	4b65      	ldr	r3, [pc, #404]	; (8005418 <HAL_CAN_ConfigFilter+0x1bc>)
 8005284:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800528c:	f043 0201 	orr.w	r2, r3, #1
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800529c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	431a      	orrs	r2, r3
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	f003 031f 	and.w	r3, r3, #31
 80052c2:	2201      	movs	r2, #1
 80052c4:	fa02 f303 	lsl.w	r3, r2, r3
 80052c8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	43db      	mvns	r3, r3
 80052d4:	401a      	ands	r2, r3
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	69db      	ldr	r3, [r3, #28]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d123      	bne.n	800532c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	43db      	mvns	r3, r3
 80052ee:	401a      	ands	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005302:	683a      	ldr	r2, [r7, #0]
 8005304:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005306:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3248      	adds	r2, #72	; 0x48
 800530c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005320:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005322:	6979      	ldr	r1, [r7, #20]
 8005324:	3348      	adds	r3, #72	; 0x48
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	440b      	add	r3, r1
 800532a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	69db      	ldr	r3, [r3, #28]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d122      	bne.n	800537a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	431a      	orrs	r2, r3
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005350:	683a      	ldr	r2, [r7, #0]
 8005352:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005354:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	3248      	adds	r2, #72	; 0x48
 800535a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	68db      	ldr	r3, [r3, #12]
 8005368:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800536e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	3348      	adds	r3, #72	; 0x48
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	440b      	add	r3, r1
 8005378:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d109      	bne.n	8005396 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	43db      	mvns	r3, r3
 800538c:	401a      	ands	r2, r3
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005394:	e007      	b.n	80053a6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	431a      	orrs	r2, r3
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d109      	bne.n	80053c2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	43db      	mvns	r3, r3
 80053b8:	401a      	ands	r2, r3
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80053c0:	e007      	b.n	80053d2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80053d2:	683b      	ldr	r3, [r7, #0]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d107      	bne.n	80053ea <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	431a      	orrs	r2, r3
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80053f0:	f023 0201 	bic.w	r2, r3, #1
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	e006      	b.n	800540c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
  }
}
 800540c:	4618      	mov	r0, r3
 800540e:	371c      	adds	r7, #28
 8005410:	46bd      	mov	sp, r7
 8005412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005416:	4770      	bx	lr
 8005418:	40006400 	.word	0x40006400

0800541c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3020 	ldrb.w	r3, [r3, #32]
 800542a:	b2db      	uxtb	r3, r3
 800542c:	2b01      	cmp	r3, #1
 800542e:	d12e      	bne.n	800548e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2202      	movs	r2, #2
 8005434:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f022 0201 	bic.w	r2, r2, #1
 8005446:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005448:	f7ff f9e2 	bl	8004810 <HAL_GetTick>
 800544c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800544e:	e012      	b.n	8005476 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005450:	f7ff f9de 	bl	8004810 <HAL_GetTick>
 8005454:	4602      	mov	r2, r0
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	2b0a      	cmp	r3, #10
 800545c:	d90b      	bls.n	8005476 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005462:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2205      	movs	r2, #5
 800546e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e012      	b.n	800549c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e5      	bne.n	8005450 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	e006      	b.n	800549c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005492:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
  }
}
 800549c:	4618      	mov	r0, r3
 800549e:	3710      	adds	r7, #16
 80054a0:	46bd      	mov	sp, r7
 80054a2:	bd80      	pop	{r7, pc}

080054a4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b089      	sub	sp, #36	; 0x24
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	607a      	str	r2, [r7, #4]
 80054b0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054b8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80054c2:	7ffb      	ldrb	r3, [r7, #31]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d003      	beq.n	80054d0 <HAL_CAN_AddTxMessage+0x2c>
 80054c8:	7ffb      	ldrb	r3, [r7, #31]
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	f040 80ad 	bne.w	800562a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d10a      	bne.n	80054f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80054e4:	69bb      	ldr	r3, [r7, #24]
 80054e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 8095 	beq.w	800561a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80054f0:	69bb      	ldr	r3, [r7, #24]
 80054f2:	0e1b      	lsrs	r3, r3, #24
 80054f4:	f003 0303 	and.w	r3, r3, #3
 80054f8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80054fa:	2201      	movs	r2, #1
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	409a      	lsls	r2, r3
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10d      	bne.n	8005528 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	6809      	ldr	r1, [r1, #0]
 800551a:	431a      	orrs	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	3318      	adds	r3, #24
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	440b      	add	r3, r1
 8005524:	601a      	str	r2, [r3, #0]
 8005526:	e00f      	b.n	8005548 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005532:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800553c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	3318      	adds	r3, #24
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	440b      	add	r3, r1
 8005546:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6819      	ldr	r1, [r3, #0]
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	3318      	adds	r3, #24
 8005554:	011b      	lsls	r3, r3, #4
 8005556:	440b      	add	r3, r1
 8005558:	3304      	adds	r3, #4
 800555a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	7d1b      	ldrb	r3, [r3, #20]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d111      	bne.n	8005588 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	3318      	adds	r3, #24
 800556c:	011b      	lsls	r3, r3, #4
 800556e:	4413      	add	r3, r2
 8005570:	3304      	adds	r3, #4
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6811      	ldr	r1, [r2, #0]
 8005578:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	3318      	adds	r3, #24
 8005580:	011b      	lsls	r3, r3, #4
 8005582:	440b      	add	r3, r1
 8005584:	3304      	adds	r3, #4
 8005586:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	3307      	adds	r3, #7
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	061a      	lsls	r2, r3, #24
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3306      	adds	r3, #6
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	041b      	lsls	r3, r3, #16
 8005598:	431a      	orrs	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	3305      	adds	r3, #5
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	021b      	lsls	r3, r3, #8
 80055a2:	4313      	orrs	r3, r2
 80055a4:	687a      	ldr	r2, [r7, #4]
 80055a6:	3204      	adds	r2, #4
 80055a8:	7812      	ldrb	r2, [r2, #0]
 80055aa:	4610      	mov	r0, r2
 80055ac:	68fa      	ldr	r2, [r7, #12]
 80055ae:	6811      	ldr	r1, [r2, #0]
 80055b0:	ea43 0200 	orr.w	r2, r3, r0
 80055b4:	697b      	ldr	r3, [r7, #20]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	440b      	add	r3, r1
 80055ba:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80055be:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3303      	adds	r3, #3
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	061a      	lsls	r2, r3, #24
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	3302      	adds	r3, #2
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	041b      	lsls	r3, r3, #16
 80055d0:	431a      	orrs	r2, r3
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	3301      	adds	r3, #1
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	021b      	lsls	r3, r3, #8
 80055da:	4313      	orrs	r3, r2
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	7812      	ldrb	r2, [r2, #0]
 80055e0:	4610      	mov	r0, r2
 80055e2:	68fa      	ldr	r2, [r7, #12]
 80055e4:	6811      	ldr	r1, [r2, #0]
 80055e6:	ea43 0200 	orr.w	r2, r3, r0
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	011b      	lsls	r3, r3, #4
 80055ee:	440b      	add	r3, r1
 80055f0:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80055f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	3318      	adds	r3, #24
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4413      	add	r3, r2
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	6811      	ldr	r1, [r2, #0]
 8005608:	f043 0201 	orr.w	r2, r3, #1
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	3318      	adds	r3, #24
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	440b      	add	r3, r1
 8005614:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	e00e      	b.n	8005638 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005626:	2301      	movs	r3, #1
 8005628:	e006      	b.n	8005638 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
  }
}
 8005638:	4618      	mov	r0, r3
 800563a:	3724      	adds	r7, #36	; 0x24
 800563c:	46bd      	mov	sp, r7
 800563e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005642:	4770      	bx	lr

08005644 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005644:	b480      	push	{r7}
 8005646:	b087      	sub	sp, #28
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
 8005650:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005658:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800565a:	7dfb      	ldrb	r3, [r7, #23]
 800565c:	2b01      	cmp	r3, #1
 800565e:	d003      	beq.n	8005668 <HAL_CAN_GetRxMessage+0x24>
 8005660:	7dfb      	ldrb	r3, [r7, #23]
 8005662:	2b02      	cmp	r3, #2
 8005664:	f040 80f3 	bne.w	800584e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10e      	bne.n	800568c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f003 0303 	and.w	r3, r3, #3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d116      	bne.n	80056aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005680:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e0e7      	b.n	800585c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0303 	and.w	r3, r3, #3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d107      	bne.n	80056aa <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e0d8      	b.n	800585c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	331b      	adds	r3, #27
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	4413      	add	r3, r2
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0204 	and.w	r2, r3, #4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10c      	bne.n	80056e2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	331b      	adds	r3, #27
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	4413      	add	r3, r2
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	0d5b      	lsrs	r3, r3, #21
 80056d8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	601a      	str	r2, [r3, #0]
 80056e0:	e00b      	b.n	80056fa <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	331b      	adds	r3, #27
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	08db      	lsrs	r3, r3, #3
 80056f2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	331b      	adds	r3, #27
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0202 	and.w	r2, r3, #2
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	331b      	adds	r3, #27
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	4413      	add	r3, r2
 800571c:	3304      	adds	r3, #4
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 020f 	and.w	r2, r3, #15
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	331b      	adds	r3, #27
 8005730:	011b      	lsls	r3, r3, #4
 8005732:	4413      	add	r3, r2
 8005734:	3304      	adds	r3, #4
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	0a1b      	lsrs	r3, r3, #8
 800573a:	b2da      	uxtb	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	331b      	adds	r3, #27
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	4413      	add	r3, r2
 800574c:	3304      	adds	r3, #4
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	0c1b      	lsrs	r3, r3, #16
 8005752:	b29a      	uxth	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	011b      	lsls	r3, r3, #4
 8005760:	4413      	add	r3, r2
 8005762:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	b2da      	uxtb	r2, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	011b      	lsls	r3, r3, #4
 8005776:	4413      	add	r3, r2
 8005778:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	0a1a      	lsrs	r2, r3, #8
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	3301      	adds	r3, #1
 8005784:	b2d2      	uxtb	r2, r2
 8005786:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	4413      	add	r3, r2
 8005792:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	0c1a      	lsrs	r2, r3, #16
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	3302      	adds	r3, #2
 800579e:	b2d2      	uxtb	r2, r2
 80057a0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	011b      	lsls	r3, r3, #4
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	0e1a      	lsrs	r2, r3, #24
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	3303      	adds	r3, #3
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	011b      	lsls	r3, r3, #4
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	3304      	adds	r3, #4
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	011b      	lsls	r3, r3, #4
 80057dc:	4413      	add	r3, r2
 80057de:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	0a1a      	lsrs	r2, r3, #8
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	3305      	adds	r3, #5
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	4413      	add	r3, r2
 80057f8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	0c1a      	lsrs	r2, r3, #16
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	3306      	adds	r3, #6
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	4413      	add	r3, r2
 8005812:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	0e1a      	lsrs	r2, r3, #24
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	3307      	adds	r3, #7
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d108      	bne.n	800583a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68da      	ldr	r2, [r3, #12]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0220 	orr.w	r2, r2, #32
 8005836:	60da      	str	r2, [r3, #12]
 8005838:	e007      	b.n	800584a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	691a      	ldr	r2, [r3, #16]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0220 	orr.w	r2, r2, #32
 8005848:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800584a:	2300      	movs	r3, #0
 800584c:	e006      	b.n	800585c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005852:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
  }
}
 800585c:	4618      	mov	r0, r3
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005878:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800587a:	7bfb      	ldrb	r3, [r7, #15]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d002      	beq.n	8005886 <HAL_CAN_ActivateNotification+0x1e>
 8005880:	7bfb      	ldrb	r3, [r7, #15]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d109      	bne.n	800589a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	6959      	ldr	r1, [r3, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	430a      	orrs	r2, r1
 8005894:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005896:	2300      	movs	r3, #0
 8005898:	e006      	b.n	80058a8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b08a      	sub	sp, #40	; 0x28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80058bc:	2300      	movs	r3, #0
 80058be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	699b      	ldr	r3, [r3, #24]
 80058ee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	f003 0301 	and.w	r3, r3, #1
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d07c      	beq.n	80059f4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	f003 0301 	and.w	r3, r3, #1
 8005900:	2b00      	cmp	r3, #0
 8005902:	d023      	beq.n	800594c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	2201      	movs	r2, #1
 800590a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b00      	cmp	r3, #0
 8005914:	d003      	beq.n	800591e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f983 	bl	8005c22 <HAL_CAN_TxMailbox0CompleteCallback>
 800591c:	e016      	b.n	800594c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	f003 0304 	and.w	r3, r3, #4
 8005924:	2b00      	cmp	r3, #0
 8005926:	d004      	beq.n	8005932 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800592a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800592e:	627b      	str	r3, [r7, #36]	; 0x24
 8005930:	e00c      	b.n	800594c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f003 0308 	and.w	r3, r3, #8
 8005938:	2b00      	cmp	r3, #0
 800593a:	d004      	beq.n	8005946 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005942:	627b      	str	r3, [r7, #36]	; 0x24
 8005944:	e002      	b.n	800594c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f989 	bl	8005c5e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	2b00      	cmp	r3, #0
 8005954:	d024      	beq.n	80059a0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800595e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 f963 	bl	8005c36 <HAL_CAN_TxMailbox1CompleteCallback>
 8005970:	e016      	b.n	80059a0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005978:	2b00      	cmp	r3, #0
 800597a:	d004      	beq.n	8005986 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005982:	627b      	str	r3, [r7, #36]	; 0x24
 8005984:	e00c      	b.n	80059a0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800598c:	2b00      	cmp	r3, #0
 800598e:	d004      	beq.n	800599a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005996:	627b      	str	r3, [r7, #36]	; 0x24
 8005998:	e002      	b.n	80059a0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f000 f969 	bl	8005c72 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d024      	beq.n	80059f4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80059b2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80059b4:	69bb      	ldr	r3, [r7, #24]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d003      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f943 	bl	8005c4a <HAL_CAN_TxMailbox2CompleteCallback>
 80059c4:	e016      	b.n	80059f4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80059c6:	69bb      	ldr	r3, [r7, #24]
 80059c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d004      	beq.n	80059da <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80059d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
 80059d8:	e00c      	b.n	80059f4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80059da:	69bb      	ldr	r3, [r7, #24]
 80059dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059ea:	627b      	str	r3, [r7, #36]	; 0x24
 80059ec:	e002      	b.n	80059f4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f949 	bl	8005c86 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80059f4:	6a3b      	ldr	r3, [r7, #32]
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00c      	beq.n	8005a18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f003 0310 	and.w	r3, r3, #16
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d007      	beq.n	8005a18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a0e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2210      	movs	r2, #16
 8005a16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	f003 0304 	and.w	r3, r3, #4
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00b      	beq.n	8005a3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	f003 0308 	and.w	r3, r3, #8
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d006      	beq.n	8005a3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2208      	movs	r2, #8
 8005a32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 f930 	bl	8005c9a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005a3a:	6a3b      	ldr	r3, [r7, #32]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d009      	beq.n	8005a58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f003 0303 	and.w	r3, r3, #3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb f9c8 	bl	8000de8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005a58:	6a3b      	ldr	r3, [r7, #32]
 8005a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d00c      	beq.n	8005a7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2210      	movs	r2, #16
 8005a7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005a7c:	6a3b      	ldr	r3, [r7, #32]
 8005a7e:	f003 0320 	and.w	r3, r3, #32
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00b      	beq.n	8005a9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	f003 0308 	and.w	r3, r3, #8
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d006      	beq.n	8005a9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2208      	movs	r2, #8
 8005a96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f912 	bl	8005cc2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005a9e:	6a3b      	ldr	r3, [r7, #32]
 8005aa0:	f003 0310 	and.w	r3, r3, #16
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	f003 0303 	and.w	r3, r3, #3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d002      	beq.n	8005abc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f8f9 	bl	8005cae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d00b      	beq.n	8005ade <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d006      	beq.n	8005ade <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	2210      	movs	r2, #16
 8005ad6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f8fc 	bl	8005cd6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005ade:	6a3b      	ldr	r3, [r7, #32]
 8005ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00b      	beq.n	8005b00 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d006      	beq.n	8005b00 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2208      	movs	r2, #8
 8005af8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f8f5 	bl	8005cea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d07b      	beq.n	8005c02 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d072      	beq.n	8005bfa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b14:	6a3b      	ldr	r3, [r7, #32]
 8005b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d008      	beq.n	8005b30 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d003      	beq.n	8005b30 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2a:	f043 0301 	orr.w	r3, r3, #1
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b30:	6a3b      	ldr	r3, [r7, #32]
 8005b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f043 0302 	orr.w	r3, r3, #2
 8005b4a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	f043 0304 	orr.w	r3, r3, #4
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d043      	beq.n	8005bfa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d03e      	beq.n	8005bfa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b82:	2b60      	cmp	r3, #96	; 0x60
 8005b84:	d02b      	beq.n	8005bde <HAL_CAN_IRQHandler+0x32a>
 8005b86:	2b60      	cmp	r3, #96	; 0x60
 8005b88:	d82e      	bhi.n	8005be8 <HAL_CAN_IRQHandler+0x334>
 8005b8a:	2b50      	cmp	r3, #80	; 0x50
 8005b8c:	d022      	beq.n	8005bd4 <HAL_CAN_IRQHandler+0x320>
 8005b8e:	2b50      	cmp	r3, #80	; 0x50
 8005b90:	d82a      	bhi.n	8005be8 <HAL_CAN_IRQHandler+0x334>
 8005b92:	2b40      	cmp	r3, #64	; 0x40
 8005b94:	d019      	beq.n	8005bca <HAL_CAN_IRQHandler+0x316>
 8005b96:	2b40      	cmp	r3, #64	; 0x40
 8005b98:	d826      	bhi.n	8005be8 <HAL_CAN_IRQHandler+0x334>
 8005b9a:	2b30      	cmp	r3, #48	; 0x30
 8005b9c:	d010      	beq.n	8005bc0 <HAL_CAN_IRQHandler+0x30c>
 8005b9e:	2b30      	cmp	r3, #48	; 0x30
 8005ba0:	d822      	bhi.n	8005be8 <HAL_CAN_IRQHandler+0x334>
 8005ba2:	2b10      	cmp	r3, #16
 8005ba4:	d002      	beq.n	8005bac <HAL_CAN_IRQHandler+0x2f8>
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	d005      	beq.n	8005bb6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005baa:	e01d      	b.n	8005be8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f043 0308 	orr.w	r3, r3, #8
 8005bb2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bb4:	e019      	b.n	8005bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb8:	f043 0310 	orr.w	r3, r3, #16
 8005bbc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bbe:	e014      	b.n	8005bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc2:	f043 0320 	orr.w	r3, r3, #32
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bc8:	e00f      	b.n	8005bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bd0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bd2:	e00a      	b.n	8005bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005bdc:	e005      	b.n	8005bea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005be6:	e000      	b.n	8005bea <HAL_CAN_IRQHandler+0x336>
            break;
 8005be8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	699a      	ldr	r2, [r3, #24]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005bf8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d008      	beq.n	8005c1a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0e:	431a      	orrs	r2, r3
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f872 	bl	8005cfe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005c1a:	bf00      	nop
 8005c1c:	3728      	adds	r7, #40	; 0x28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr

08005c72 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c72:	b480      	push	{r7}
 8005c74:	b083      	sub	sp, #12
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005c7a:	bf00      	nop
 8005c7c:	370c      	adds	r7, #12
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c84:	4770      	bx	lr

08005c86 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c86:	b480      	push	{r7}
 8005c88:	b083      	sub	sp, #12
 8005c8a:	af00      	add	r7, sp, #0
 8005c8c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005c8e:	bf00      	nop
 8005c90:	370c      	adds	r7, #12
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005cf2:	bf00      	nop
 8005cf4:	370c      	adds	r7, #12
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr

08005cfe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005cfe:	b480      	push	{r7}
 8005d00:	b083      	sub	sp, #12
 8005d02:	af00      	add	r7, sp, #0
 8005d04:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005d06:	bf00      	nop
 8005d08:	370c      	adds	r7, #12
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr
	...

08005d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f003 0307 	and.w	r3, r3, #7
 8005d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d24:	4b0b      	ldr	r3, [pc, #44]	; (8005d54 <__NVIC_SetPriorityGrouping+0x40>)
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d30:	4013      	ands	r3, r2
 8005d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d3c:	4b06      	ldr	r3, [pc, #24]	; (8005d58 <__NVIC_SetPriorityGrouping+0x44>)
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d42:	4a04      	ldr	r2, [pc, #16]	; (8005d54 <__NVIC_SetPriorityGrouping+0x40>)
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	60d3      	str	r3, [r2, #12]
}
 8005d48:	bf00      	nop
 8005d4a:	3714      	adds	r7, #20
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr
 8005d54:	e000ed00 	.word	0xe000ed00
 8005d58:	05fa0000 	.word	0x05fa0000

08005d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d60:	4b04      	ldr	r3, [pc, #16]	; (8005d74 <__NVIC_GetPriorityGrouping+0x18>)
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	0a1b      	lsrs	r3, r3, #8
 8005d66:	f003 0307 	and.w	r3, r3, #7
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	e000ed00 	.word	0xe000ed00

08005d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	4603      	mov	r3, r0
 8005d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	db0b      	blt.n	8005da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d8a:	79fb      	ldrb	r3, [r7, #7]
 8005d8c:	f003 021f 	and.w	r2, r3, #31
 8005d90:	4907      	ldr	r1, [pc, #28]	; (8005db0 <__NVIC_EnableIRQ+0x38>)
 8005d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d96:	095b      	lsrs	r3, r3, #5
 8005d98:	2001      	movs	r0, #1
 8005d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8005d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop
 8005db0:	e000e100 	.word	0xe000e100

08005db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	6039      	str	r1, [r7, #0]
 8005dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	db0a      	blt.n	8005dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	b2da      	uxtb	r2, r3
 8005dcc:	490c      	ldr	r1, [pc, #48]	; (8005e00 <__NVIC_SetPriority+0x4c>)
 8005dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005dd2:	0112      	lsls	r2, r2, #4
 8005dd4:	b2d2      	uxtb	r2, r2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ddc:	e00a      	b.n	8005df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	b2da      	uxtb	r2, r3
 8005de2:	4908      	ldr	r1, [pc, #32]	; (8005e04 <__NVIC_SetPriority+0x50>)
 8005de4:	79fb      	ldrb	r3, [r7, #7]
 8005de6:	f003 030f 	and.w	r3, r3, #15
 8005dea:	3b04      	subs	r3, #4
 8005dec:	0112      	lsls	r2, r2, #4
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	440b      	add	r3, r1
 8005df2:	761a      	strb	r2, [r3, #24]
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	e000e100 	.word	0xe000e100
 8005e04:	e000ed00 	.word	0xe000ed00

08005e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b089      	sub	sp, #36	; 0x24
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	60f8      	str	r0, [r7, #12]
 8005e10:	60b9      	str	r1, [r7, #8]
 8005e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	f1c3 0307 	rsb	r3, r3, #7
 8005e22:	2b04      	cmp	r3, #4
 8005e24:	bf28      	it	cs
 8005e26:	2304      	movcs	r3, #4
 8005e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	3304      	adds	r3, #4
 8005e2e:	2b06      	cmp	r3, #6
 8005e30:	d902      	bls.n	8005e38 <NVIC_EncodePriority+0x30>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	3b03      	subs	r3, #3
 8005e36:	e000      	b.n	8005e3a <NVIC_EncodePriority+0x32>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	fa02 f303 	lsl.w	r3, r2, r3
 8005e46:	43da      	mvns	r2, r3
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	401a      	ands	r2, r3
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e50:	f04f 31ff 	mov.w	r1, #4294967295
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5a:	43d9      	mvns	r1, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e60:	4313      	orrs	r3, r2
         );
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3724      	adds	r7, #36	; 0x24
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr
	...

08005e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b082      	sub	sp, #8
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e80:	d301      	bcc.n	8005e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e82:	2301      	movs	r3, #1
 8005e84:	e00f      	b.n	8005ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e86:	4a0a      	ldr	r2, [pc, #40]	; (8005eb0 <SysTick_Config+0x40>)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	3b01      	subs	r3, #1
 8005e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e8e:	210f      	movs	r1, #15
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	f7ff ff8e 	bl	8005db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e98:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <SysTick_Config+0x40>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e9e:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <SysTick_Config+0x40>)
 8005ea0:	2207      	movs	r2, #7
 8005ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ea4:	2300      	movs	r3, #0
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	e000e010 	.word	0xe000e010

08005eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b082      	sub	sp, #8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f7ff ff29 	bl	8005d14 <__NVIC_SetPriorityGrouping>
}
 8005ec2:	bf00      	nop
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b086      	sub	sp, #24
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	607a      	str	r2, [r7, #4]
 8005ed6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005edc:	f7ff ff3e 	bl	8005d5c <__NVIC_GetPriorityGrouping>
 8005ee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ee2:	687a      	ldr	r2, [r7, #4]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	6978      	ldr	r0, [r7, #20]
 8005ee8:	f7ff ff8e 	bl	8005e08 <NVIC_EncodePriority>
 8005eec:	4602      	mov	r2, r0
 8005eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ef2:	4611      	mov	r1, r2
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff ff5d 	bl	8005db4 <__NVIC_SetPriority>
}
 8005efa:	bf00      	nop
 8005efc:	3718      	adds	r7, #24
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}

08005f02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f02:	b580      	push	{r7, lr}
 8005f04:	b082      	sub	sp, #8
 8005f06:	af00      	add	r7, sp, #0
 8005f08:	4603      	mov	r3, r0
 8005f0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7ff ff31 	bl	8005d78 <__NVIC_EnableIRQ>
}
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f7ff ffa2 	bl	8005e70 <SysTick_Config>
 8005f2c:	4603      	mov	r3, r0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
	...

08005f38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b086      	sub	sp, #24
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005f40:	2300      	movs	r3, #0
 8005f42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005f44:	f7fe fc64 	bl	8004810 <HAL_GetTick>
 8005f48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d101      	bne.n	8005f54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005f50:	2301      	movs	r3, #1
 8005f52:	e099      	b.n	8006088 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f022 0201 	bic.w	r2, r2, #1
 8005f72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f74:	e00f      	b.n	8005f96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f76:	f7fe fc4b 	bl	8004810 <HAL_GetTick>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	1ad3      	subs	r3, r2, r3
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d908      	bls.n	8005f96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2220      	movs	r2, #32
 8005f88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2203      	movs	r2, #3
 8005f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e078      	b.n	8006088 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e8      	bne.n	8005f76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fac:	697a      	ldr	r2, [r7, #20]
 8005fae:	4b38      	ldr	r3, [pc, #224]	; (8006090 <HAL_DMA_Init+0x158>)
 8005fb0:	4013      	ands	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	689b      	ldr	r3, [r3, #8]
 8005fbc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fc2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	691b      	ldr	r3, [r3, #16]
 8005fc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	699b      	ldr	r3, [r3, #24]
 8005fd4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	2b04      	cmp	r3, #4
 8005fee:	d107      	bne.n	8006000 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	f023 0307 	bic.w	r3, r3, #7
 8006016:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800601c:	697a      	ldr	r2, [r7, #20]
 800601e:	4313      	orrs	r3, r2
 8006020:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b04      	cmp	r3, #4
 8006028:	d117      	bne.n	800605a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800602e:	697a      	ldr	r2, [r7, #20]
 8006030:	4313      	orrs	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d00e      	beq.n	800605a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	f000 f9e9 	bl	8006414 <DMA_CheckFifoParam>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d008      	beq.n	800605a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2240      	movs	r2, #64	; 0x40
 800604c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006056:	2301      	movs	r3, #1
 8006058:	e016      	b.n	8006088 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	697a      	ldr	r2, [r7, #20]
 8006060:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9a0 	bl	80063a8 <DMA_CalcBaseAndBitshift>
 8006068:	4603      	mov	r3, r0
 800606a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	223f      	movs	r2, #63	; 0x3f
 8006072:	409a      	lsls	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3718      	adds	r7, #24
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	f010803f 	.word	0xf010803f

08006094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b086      	sub	sp, #24
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 800609c:	2300      	movs	r3, #0
 800609e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80060a0:	4b8e      	ldr	r3, [pc, #568]	; (80062dc <HAL_DMA_IRQHandler+0x248>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a8e      	ldr	r2, [pc, #568]	; (80062e0 <HAL_DMA_IRQHandler+0x24c>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	0a9b      	lsrs	r3, r3, #10
 80060ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060be:	2208      	movs	r2, #8
 80060c0:	409a      	lsls	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4013      	ands	r3, r2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d01a      	beq.n	8006100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f003 0304 	and.w	r3, r3, #4
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d013      	beq.n	8006100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ec:	2208      	movs	r2, #8
 80060ee:	409a      	lsls	r2, r3
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060f8:	f043 0201 	orr.w	r2, r3, #1
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006104:	2201      	movs	r2, #1
 8006106:	409a      	lsls	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4013      	ands	r3, r2
 800610c:	2b00      	cmp	r3, #0
 800610e:	d012      	beq.n	8006136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006122:	2201      	movs	r2, #1
 8006124:	409a      	lsls	r2, r3
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	f043 0202 	orr.w	r2, r3, #2
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613a:	2204      	movs	r2, #4
 800613c:	409a      	lsls	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4013      	ands	r3, r2
 8006142:	2b00      	cmp	r3, #0
 8006144:	d012      	beq.n	800616c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0302 	and.w	r3, r3, #2
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006158:	2204      	movs	r2, #4
 800615a:	409a      	lsls	r2, r3
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006170:	2210      	movs	r2, #16
 8006172:	409a      	lsls	r2, r3
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	4013      	ands	r3, r2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d043      	beq.n	8006204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0308 	and.w	r3, r3, #8
 8006186:	2b00      	cmp	r3, #0
 8006188:	d03c      	beq.n	8006204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618e:	2210      	movs	r2, #16
 8006190:	409a      	lsls	r2, r3
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d018      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d108      	bne.n	80061c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d024      	beq.n	8006204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
 80061c2:	e01f      	b.n	8006204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d01b      	beq.n	8006204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
 80061d4:	e016      	b.n	8006204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d107      	bne.n	80061f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0208 	bic.w	r2, r2, #8
 80061f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006208:	2220      	movs	r2, #32
 800620a:	409a      	lsls	r2, r3
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 808f 	beq.w	8006334 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0310 	and.w	r3, r3, #16
 8006220:	2b00      	cmp	r3, #0
 8006222:	f000 8087 	beq.w	8006334 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622a:	2220      	movs	r2, #32
 800622c:	409a      	lsls	r2, r3
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006238:	b2db      	uxtb	r3, r3
 800623a:	2b05      	cmp	r3, #5
 800623c:	d136      	bne.n	80062ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f022 0216 	bic.w	r2, r2, #22
 800624c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	695a      	ldr	r2, [r3, #20]
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800625c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	2b00      	cmp	r3, #0
 8006264:	d103      	bne.n	800626e <HAL_DMA_IRQHandler+0x1da>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0208 	bic.w	r2, r2, #8
 800627c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006282:	223f      	movs	r2, #63	; 0x3f
 8006284:	409a      	lsls	r2, r3
 8006286:	693b      	ldr	r3, [r7, #16]
 8006288:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d07e      	beq.n	80063a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	4798      	blx	r3
        }
        return;
 80062aa:	e079      	b.n	80063a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d01d      	beq.n	80062f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10d      	bne.n	80062e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d031      	beq.n	8006334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	4798      	blx	r3
 80062d8:	e02c      	b.n	8006334 <HAL_DMA_IRQHandler+0x2a0>
 80062da:	bf00      	nop
 80062dc:	20000090 	.word	0x20000090
 80062e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d023      	beq.n	8006334 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	4798      	blx	r3
 80062f4:	e01e      	b.n	8006334 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006300:	2b00      	cmp	r3, #0
 8006302:	d10f      	bne.n	8006324 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f022 0210 	bic.w	r2, r2, #16
 8006312:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2201      	movs	r2, #1
 8006318:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006328:	2b00      	cmp	r3, #0
 800632a:	d003      	beq.n	8006334 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006338:	2b00      	cmp	r3, #0
 800633a:	d032      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d022      	beq.n	800638e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2205      	movs	r2, #5
 800634c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f022 0201 	bic.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	3301      	adds	r3, #1
 8006364:	60bb      	str	r3, [r7, #8]
 8006366:	697a      	ldr	r2, [r7, #20]
 8006368:	429a      	cmp	r2, r3
 800636a:	d307      	bcc.n	800637c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d1f2      	bne.n	8006360 <HAL_DMA_IRQHandler+0x2cc>
 800637a:	e000      	b.n	800637e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800637c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006392:	2b00      	cmp	r3, #0
 8006394:	d005      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	e000      	b.n	80063a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80063a0:	bf00      	nop
    }
  }
}
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b085      	sub	sp, #20
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	3b10      	subs	r3, #16
 80063b8:	4a13      	ldr	r2, [pc, #76]	; (8006408 <DMA_CalcBaseAndBitshift+0x60>)
 80063ba:	fba2 2303 	umull	r2, r3, r2, r3
 80063be:	091b      	lsrs	r3, r3, #4
 80063c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80063c2:	4a12      	ldr	r2, [pc, #72]	; (800640c <DMA_CalcBaseAndBitshift+0x64>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4413      	add	r3, r2
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b03      	cmp	r3, #3
 80063d4:	d908      	bls.n	80063e8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	4b0c      	ldr	r3, [pc, #48]	; (8006410 <DMA_CalcBaseAndBitshift+0x68>)
 80063de:	4013      	ands	r3, r2
 80063e0:	1d1a      	adds	r2, r3, #4
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	659a      	str	r2, [r3, #88]	; 0x58
 80063e6:	e006      	b.n	80063f6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	4b08      	ldr	r3, [pc, #32]	; (8006410 <DMA_CalcBaseAndBitshift+0x68>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr
 8006406:	bf00      	nop
 8006408:	aaaaaaab 	.word	0xaaaaaaab
 800640c:	08018c14 	.word	0x08018c14
 8006410:	fffffc00 	.word	0xfffffc00

08006414 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006414:	b480      	push	{r7}
 8006416:	b085      	sub	sp, #20
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800641c:	2300      	movs	r3, #0
 800641e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006424:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d11f      	bne.n	800646e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	2b03      	cmp	r3, #3
 8006432:	d856      	bhi.n	80064e2 <DMA_CheckFifoParam+0xce>
 8006434:	a201      	add	r2, pc, #4	; (adr r2, 800643c <DMA_CheckFifoParam+0x28>)
 8006436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800643a:	bf00      	nop
 800643c:	0800644d 	.word	0x0800644d
 8006440:	0800645f 	.word	0x0800645f
 8006444:	0800644d 	.word	0x0800644d
 8006448:	080064e3 	.word	0x080064e3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006454:	2b00      	cmp	r3, #0
 8006456:	d046      	beq.n	80064e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006458:	2301      	movs	r3, #1
 800645a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800645c:	e043      	b.n	80064e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006462:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006466:	d140      	bne.n	80064ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800646c:	e03d      	b.n	80064ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006476:	d121      	bne.n	80064bc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006478:	68bb      	ldr	r3, [r7, #8]
 800647a:	2b03      	cmp	r3, #3
 800647c:	d837      	bhi.n	80064ee <DMA_CheckFifoParam+0xda>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <DMA_CheckFifoParam+0x70>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	08006495 	.word	0x08006495
 8006488:	0800649b 	.word	0x0800649b
 800648c:	08006495 	.word	0x08006495
 8006490:	080064ad 	.word	0x080064ad
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006494:	2301      	movs	r3, #1
 8006496:	73fb      	strb	r3, [r7, #15]
      break;
 8006498:	e030      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d025      	beq.n	80064f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064aa:	e022      	b.n	80064f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064b4:	d11f      	bne.n	80064f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80064ba:	e01c      	b.n	80064f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d903      	bls.n	80064ca <DMA_CheckFifoParam+0xb6>
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	d003      	beq.n	80064d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80064c8:	e018      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	73fb      	strb	r3, [r7, #15]
      break;
 80064ce:	e015      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
      break;
 80064e0:	e00b      	b.n	80064fa <DMA_CheckFifoParam+0xe6>
      break;
 80064e2:	bf00      	nop
 80064e4:	e00a      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      break;
 80064e6:	bf00      	nop
 80064e8:	e008      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      break;
 80064ea:	bf00      	nop
 80064ec:	e006      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      break;
 80064ee:	bf00      	nop
 80064f0:	e004      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      break;
 80064f2:	bf00      	nop
 80064f4:	e002      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      break;   
 80064f6:	bf00      	nop
 80064f8:	e000      	b.n	80064fc <DMA_CheckFifoParam+0xe8>
      break;
 80064fa:	bf00      	nop
    }
  } 
  
  return status; 
 80064fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
 800650a:	bf00      	nop

0800650c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800651e:	2300      	movs	r3, #0
 8006520:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006522:	2300      	movs	r3, #0
 8006524:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006526:	2300      	movs	r3, #0
 8006528:	61fb      	str	r3, [r7, #28]
 800652a:	e175      	b.n	8006818 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800652c:	2201      	movs	r2, #1
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	fa02 f303 	lsl.w	r3, r2, r3
 8006534:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	4013      	ands	r3, r2
 800653e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	429a      	cmp	r2, r3
 8006546:	f040 8164 	bne.w	8006812 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800654a:	683b      	ldr	r3, [r7, #0]
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	f003 0303 	and.w	r3, r3, #3
 8006552:	2b01      	cmp	r3, #1
 8006554:	d005      	beq.n	8006562 <HAL_GPIO_Init+0x56>
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	f003 0303 	and.w	r3, r3, #3
 800655e:	2b02      	cmp	r3, #2
 8006560:	d130      	bne.n	80065c4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	005b      	lsls	r3, r3, #1
 800656c:	2203      	movs	r2, #3
 800656e:	fa02 f303 	lsl.w	r3, r2, r3
 8006572:	43db      	mvns	r3, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4013      	ands	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68da      	ldr	r2, [r3, #12]
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	69ba      	ldr	r2, [r7, #24]
 8006588:	4313      	orrs	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	69ba      	ldr	r2, [r7, #24]
 8006590:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006598:	2201      	movs	r2, #1
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	43db      	mvns	r3, r3
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	4013      	ands	r3, r2
 80065a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	091b      	lsrs	r3, r3, #4
 80065ae:	f003 0201 	and.w	r2, r3, #1
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	fa02 f303 	lsl.w	r3, r2, r3
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	4313      	orrs	r3, r2
 80065bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	69ba      	ldr	r2, [r7, #24]
 80065c2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	f003 0303 	and.w	r3, r3, #3
 80065cc:	2b03      	cmp	r3, #3
 80065ce:	d017      	beq.n	8006600 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80065d6:	69fb      	ldr	r3, [r7, #28]
 80065d8:	005b      	lsls	r3, r3, #1
 80065da:	2203      	movs	r2, #3
 80065dc:	fa02 f303 	lsl.w	r3, r2, r3
 80065e0:	43db      	mvns	r3, r3
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	4013      	ands	r3, r2
 80065e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	689a      	ldr	r2, [r3, #8]
 80065ec:	69fb      	ldr	r3, [r7, #28]
 80065ee:	005b      	lsls	r3, r3, #1
 80065f0:	fa02 f303 	lsl.w	r3, r2, r3
 80065f4:	69ba      	ldr	r2, [r7, #24]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	69ba      	ldr	r2, [r7, #24]
 80065fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	f003 0303 	and.w	r3, r3, #3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d123      	bne.n	8006654 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800660c:	69fb      	ldr	r3, [r7, #28]
 800660e:	08da      	lsrs	r2, r3, #3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	3208      	adds	r2, #8
 8006614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	220f      	movs	r2, #15
 8006624:	fa02 f303 	lsl.w	r3, r2, r3
 8006628:	43db      	mvns	r3, r3
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	4013      	ands	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	691a      	ldr	r2, [r3, #16]
 8006634:	69fb      	ldr	r3, [r7, #28]
 8006636:	f003 0307 	and.w	r3, r3, #7
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	fa02 f303 	lsl.w	r3, r2, r3
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	4313      	orrs	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	08da      	lsrs	r2, r3, #3
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	3208      	adds	r2, #8
 800664e:	69b9      	ldr	r1, [r7, #24]
 8006650:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	2203      	movs	r2, #3
 8006660:	fa02 f303 	lsl.w	r3, r2, r3
 8006664:	43db      	mvns	r3, r3
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	4013      	ands	r3, r2
 800666a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0203 	and.w	r2, r3, #3
 8006674:	69fb      	ldr	r3, [r7, #28]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	fa02 f303 	lsl.w	r3, r2, r3
 800667c:	69ba      	ldr	r2, [r7, #24]
 800667e:	4313      	orrs	r3, r2
 8006680:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	69ba      	ldr	r2, [r7, #24]
 8006686:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006690:	2b00      	cmp	r3, #0
 8006692:	f000 80be 	beq.w	8006812 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006696:	4b66      	ldr	r3, [pc, #408]	; (8006830 <HAL_GPIO_Init+0x324>)
 8006698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800669a:	4a65      	ldr	r2, [pc, #404]	; (8006830 <HAL_GPIO_Init+0x324>)
 800669c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066a0:	6453      	str	r3, [r2, #68]	; 0x44
 80066a2:	4b63      	ldr	r3, [pc, #396]	; (8006830 <HAL_GPIO_Init+0x324>)
 80066a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80066ae:	4a61      	ldr	r2, [pc, #388]	; (8006834 <HAL_GPIO_Init+0x328>)
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	089b      	lsrs	r3, r3, #2
 80066b4:	3302      	adds	r3, #2
 80066b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80066bc:	69fb      	ldr	r3, [r7, #28]
 80066be:	f003 0303 	and.w	r3, r3, #3
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	220f      	movs	r2, #15
 80066c6:	fa02 f303 	lsl.w	r3, r2, r3
 80066ca:	43db      	mvns	r3, r3
 80066cc:	69ba      	ldr	r2, [r7, #24]
 80066ce:	4013      	ands	r3, r2
 80066d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	4a58      	ldr	r2, [pc, #352]	; (8006838 <HAL_GPIO_Init+0x32c>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d037      	beq.n	800674a <HAL_GPIO_Init+0x23e>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	4a57      	ldr	r2, [pc, #348]	; (800683c <HAL_GPIO_Init+0x330>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d031      	beq.n	8006746 <HAL_GPIO_Init+0x23a>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a56      	ldr	r2, [pc, #344]	; (8006840 <HAL_GPIO_Init+0x334>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d02b      	beq.n	8006742 <HAL_GPIO_Init+0x236>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a55      	ldr	r2, [pc, #340]	; (8006844 <HAL_GPIO_Init+0x338>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d025      	beq.n	800673e <HAL_GPIO_Init+0x232>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a54      	ldr	r2, [pc, #336]	; (8006848 <HAL_GPIO_Init+0x33c>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d01f      	beq.n	800673a <HAL_GPIO_Init+0x22e>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a53      	ldr	r2, [pc, #332]	; (800684c <HAL_GPIO_Init+0x340>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d019      	beq.n	8006736 <HAL_GPIO_Init+0x22a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a52      	ldr	r2, [pc, #328]	; (8006850 <HAL_GPIO_Init+0x344>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d013      	beq.n	8006732 <HAL_GPIO_Init+0x226>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a51      	ldr	r2, [pc, #324]	; (8006854 <HAL_GPIO_Init+0x348>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d00d      	beq.n	800672e <HAL_GPIO_Init+0x222>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a50      	ldr	r2, [pc, #320]	; (8006858 <HAL_GPIO_Init+0x34c>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d007      	beq.n	800672a <HAL_GPIO_Init+0x21e>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a4f      	ldr	r2, [pc, #316]	; (800685c <HAL_GPIO_Init+0x350>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d101      	bne.n	8006726 <HAL_GPIO_Init+0x21a>
 8006722:	2309      	movs	r3, #9
 8006724:	e012      	b.n	800674c <HAL_GPIO_Init+0x240>
 8006726:	230a      	movs	r3, #10
 8006728:	e010      	b.n	800674c <HAL_GPIO_Init+0x240>
 800672a:	2308      	movs	r3, #8
 800672c:	e00e      	b.n	800674c <HAL_GPIO_Init+0x240>
 800672e:	2307      	movs	r3, #7
 8006730:	e00c      	b.n	800674c <HAL_GPIO_Init+0x240>
 8006732:	2306      	movs	r3, #6
 8006734:	e00a      	b.n	800674c <HAL_GPIO_Init+0x240>
 8006736:	2305      	movs	r3, #5
 8006738:	e008      	b.n	800674c <HAL_GPIO_Init+0x240>
 800673a:	2304      	movs	r3, #4
 800673c:	e006      	b.n	800674c <HAL_GPIO_Init+0x240>
 800673e:	2303      	movs	r3, #3
 8006740:	e004      	b.n	800674c <HAL_GPIO_Init+0x240>
 8006742:	2302      	movs	r3, #2
 8006744:	e002      	b.n	800674c <HAL_GPIO_Init+0x240>
 8006746:	2301      	movs	r3, #1
 8006748:	e000      	b.n	800674c <HAL_GPIO_Init+0x240>
 800674a:	2300      	movs	r3, #0
 800674c:	69fa      	ldr	r2, [r7, #28]
 800674e:	f002 0203 	and.w	r2, r2, #3
 8006752:	0092      	lsls	r2, r2, #2
 8006754:	4093      	lsls	r3, r2
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	4313      	orrs	r3, r2
 800675a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800675c:	4935      	ldr	r1, [pc, #212]	; (8006834 <HAL_GPIO_Init+0x328>)
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	089b      	lsrs	r3, r3, #2
 8006762:	3302      	adds	r3, #2
 8006764:	69ba      	ldr	r2, [r7, #24]
 8006766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800676a:	4b3d      	ldr	r3, [pc, #244]	; (8006860 <HAL_GPIO_Init+0x354>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	43db      	mvns	r3, r3
 8006774:	69ba      	ldr	r2, [r7, #24]
 8006776:	4013      	ands	r3, r2
 8006778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	4313      	orrs	r3, r2
 800678c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800678e:	4a34      	ldr	r2, [pc, #208]	; (8006860 <HAL_GPIO_Init+0x354>)
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006794:	4b32      	ldr	r3, [pc, #200]	; (8006860 <HAL_GPIO_Init+0x354>)
 8006796:	68db      	ldr	r3, [r3, #12]
 8006798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	43db      	mvns	r3, r3
 800679e:	69ba      	ldr	r2, [r7, #24]
 80067a0:	4013      	ands	r3, r2
 80067a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80067b8:	4a29      	ldr	r2, [pc, #164]	; (8006860 <HAL_GPIO_Init+0x354>)
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80067be:	4b28      	ldr	r3, [pc, #160]	; (8006860 <HAL_GPIO_Init+0x354>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	43db      	mvns	r3, r3
 80067c8:	69ba      	ldr	r2, [r7, #24]
 80067ca:	4013      	ands	r3, r2
 80067cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80067da:	69ba      	ldr	r2, [r7, #24]
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80067e2:	4a1f      	ldr	r2, [pc, #124]	; (8006860 <HAL_GPIO_Init+0x354>)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067e8:	4b1d      	ldr	r3, [pc, #116]	; (8006860 <HAL_GPIO_Init+0x354>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800680c:	4a14      	ldr	r2, [pc, #80]	; (8006860 <HAL_GPIO_Init+0x354>)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	3301      	adds	r3, #1
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	69fb      	ldr	r3, [r7, #28]
 800681a:	2b0f      	cmp	r3, #15
 800681c:	f67f ae86 	bls.w	800652c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	3724      	adds	r7, #36	; 0x24
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	40023800 	.word	0x40023800
 8006834:	40013800 	.word	0x40013800
 8006838:	40020000 	.word	0x40020000
 800683c:	40020400 	.word	0x40020400
 8006840:	40020800 	.word	0x40020800
 8006844:	40020c00 	.word	0x40020c00
 8006848:	40021000 	.word	0x40021000
 800684c:	40021400 	.word	0x40021400
 8006850:	40021800 	.word	0x40021800
 8006854:	40021c00 	.word	0x40021c00
 8006858:	40022000 	.word	0x40022000
 800685c:	40022400 	.word	0x40022400
 8006860:	40013c00 	.word	0x40013c00

08006864 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	691a      	ldr	r2, [r3, #16]
 8006874:	887b      	ldrh	r3, [r7, #2]
 8006876:	4013      	ands	r3, r2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800687c:	2301      	movs	r3, #1
 800687e:	73fb      	strb	r3, [r7, #15]
 8006880:	e001      	b.n	8006886 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006882:	2300      	movs	r3, #0
 8006884:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006886:	7bfb      	ldrb	r3, [r7, #15]
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	807b      	strh	r3, [r7, #2]
 80068a0:	4613      	mov	r3, r2
 80068a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068a4:	787b      	ldrb	r3, [r7, #1]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068aa:	887a      	ldrh	r2, [r7, #2]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80068b0:	e003      	b.n	80068ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80068b2:	887b      	ldrh	r3, [r7, #2]
 80068b4:	041a      	lsls	r2, r3, #16
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	619a      	str	r2, [r3, #24]
}
 80068ba:	bf00      	nop
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
	...

080068c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b082      	sub	sp, #8
 80068cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80068d2:	4b23      	ldr	r3, [pc, #140]	; (8006960 <HAL_PWREx_EnableOverDrive+0x98>)
 80068d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d6:	4a22      	ldr	r2, [pc, #136]	; (8006960 <HAL_PWREx_EnableOverDrive+0x98>)
 80068d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068dc:	6413      	str	r3, [r2, #64]	; 0x40
 80068de:	4b20      	ldr	r3, [pc, #128]	; (8006960 <HAL_PWREx_EnableOverDrive+0x98>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80068ea:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4a1d      	ldr	r2, [pc, #116]	; (8006964 <HAL_PWREx_EnableOverDrive+0x9c>)
 80068f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068f6:	f7fd ff8b 	bl	8004810 <HAL_GetTick>
 80068fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80068fc:	e009      	b.n	8006912 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80068fe:	f7fd ff87 	bl	8004810 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800690c:	d901      	bls.n	8006912 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800690e:	2303      	movs	r3, #3
 8006910:	e022      	b.n	8006958 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006912:	4b14      	ldr	r3, [pc, #80]	; (8006964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800691a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800691e:	d1ee      	bne.n	80068fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	4a0f      	ldr	r2, [pc, #60]	; (8006964 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800692a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800692c:	f7fd ff70 	bl	8004810 <HAL_GetTick>
 8006930:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006932:	e009      	b.n	8006948 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006934:	f7fd ff6c 	bl	8004810 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	1ad3      	subs	r3, r2, r3
 800693e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006942:	d901      	bls.n	8006948 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006944:	2303      	movs	r3, #3
 8006946:	e007      	b.n	8006958 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <HAL_PWREx_EnableOverDrive+0x9c>)
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006950:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006954:	d1ee      	bne.n	8006934 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006956:	2300      	movs	r3, #0
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40023800 	.word	0x40023800
 8006964:	40007000 	.word	0x40007000

08006968 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006970:	2300      	movs	r3, #0
 8006972:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d101      	bne.n	800697e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	e291      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	2b00      	cmp	r3, #0
 8006988:	f000 8087 	beq.w	8006a9a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800698c:	4b96      	ldr	r3, [pc, #600]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	f003 030c 	and.w	r3, r3, #12
 8006994:	2b04      	cmp	r3, #4
 8006996:	d00c      	beq.n	80069b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006998:	4b93      	ldr	r3, [pc, #588]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d112      	bne.n	80069ca <HAL_RCC_OscConfig+0x62>
 80069a4:	4b90      	ldr	r3, [pc, #576]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069b0:	d10b      	bne.n	80069ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069b2:	4b8d      	ldr	r3, [pc, #564]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d06c      	beq.n	8006a98 <HAL_RCC_OscConfig+0x130>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d168      	bne.n	8006a98 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e26b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d2:	d106      	bne.n	80069e2 <HAL_RCC_OscConfig+0x7a>
 80069d4:	4b84      	ldr	r3, [pc, #528]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a83      	ldr	r2, [pc, #524]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	e02e      	b.n	8006a40 <HAL_RCC_OscConfig+0xd8>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10c      	bne.n	8006a04 <HAL_RCC_OscConfig+0x9c>
 80069ea:	4b7f      	ldr	r3, [pc, #508]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4a7e      	ldr	r2, [pc, #504]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f4:	6013      	str	r3, [r2, #0]
 80069f6:	4b7c      	ldr	r3, [pc, #496]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a7b      	ldr	r2, [pc, #492]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 80069fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a00:	6013      	str	r3, [r2, #0]
 8006a02:	e01d      	b.n	8006a40 <HAL_RCC_OscConfig+0xd8>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a0c:	d10c      	bne.n	8006a28 <HAL_RCC_OscConfig+0xc0>
 8006a0e:	4b76      	ldr	r3, [pc, #472]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a75      	ldr	r2, [pc, #468]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a18:	6013      	str	r3, [r2, #0]
 8006a1a:	4b73      	ldr	r3, [pc, #460]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	4a72      	ldr	r2, [pc, #456]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e00b      	b.n	8006a40 <HAL_RCC_OscConfig+0xd8>
 8006a28:	4b6f      	ldr	r3, [pc, #444]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a6e      	ldr	r2, [pc, #440]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a32:	6013      	str	r3, [r2, #0]
 8006a34:	4b6c      	ldr	r3, [pc, #432]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a6b      	ldr	r2, [pc, #428]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	685b      	ldr	r3, [r3, #4]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d013      	beq.n	8006a70 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a48:	f7fd fee2 	bl	8004810 <HAL_GetTick>
 8006a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a4e:	e008      	b.n	8006a62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a50:	f7fd fede 	bl	8004810 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	2b64      	cmp	r3, #100	; 0x64
 8006a5c:	d901      	bls.n	8006a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006a5e:	2303      	movs	r3, #3
 8006a60:	e21f      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006a62:	4b61      	ldr	r3, [pc, #388]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d0f0      	beq.n	8006a50 <HAL_RCC_OscConfig+0xe8>
 8006a6e:	e014      	b.n	8006a9a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a70:	f7fd fece 	bl	8004810 <HAL_GetTick>
 8006a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a76:	e008      	b.n	8006a8a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a78:	f7fd feca 	bl	8004810 <HAL_GetTick>
 8006a7c:	4602      	mov	r2, r0
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	2b64      	cmp	r3, #100	; 0x64
 8006a84:	d901      	bls.n	8006a8a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006a86:	2303      	movs	r3, #3
 8006a88:	e20b      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006a8a:	4b57      	ldr	r3, [pc, #348]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d1f0      	bne.n	8006a78 <HAL_RCC_OscConfig+0x110>
 8006a96:	e000      	b.n	8006a9a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0302 	and.w	r3, r3, #2
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d069      	beq.n	8006b7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006aa6:	4b50      	ldr	r3, [pc, #320]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	f003 030c 	and.w	r3, r3, #12
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00b      	beq.n	8006aca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ab2:	4b4d      	ldr	r3, [pc, #308]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b08      	cmp	r3, #8
 8006abc:	d11c      	bne.n	8006af8 <HAL_RCC_OscConfig+0x190>
 8006abe:	4b4a      	ldr	r3, [pc, #296]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d116      	bne.n	8006af8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006aca:	4b47      	ldr	r3, [pc, #284]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0302 	and.w	r3, r3, #2
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x17a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d001      	beq.n	8006ae2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e1df      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ae2:	4b41      	ldr	r3, [pc, #260]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	493d      	ldr	r1, [pc, #244]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006af6:	e040      	b.n	8006b7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d023      	beq.n	8006b48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b00:	4b39      	ldr	r3, [pc, #228]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a38      	ldr	r2, [pc, #224]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fd fe80 	bl	8004810 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fd fe7c 	bl	8004810 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e1bd      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b26:	4b30      	ldr	r3, [pc, #192]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0f0      	beq.n	8006b14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b32:	4b2d      	ldr	r3, [pc, #180]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	4929      	ldr	r1, [pc, #164]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b42:	4313      	orrs	r3, r2
 8006b44:	600b      	str	r3, [r1, #0]
 8006b46:	e018      	b.n	8006b7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b48:	4b27      	ldr	r3, [pc, #156]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a26      	ldr	r2, [pc, #152]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b4e:	f023 0301 	bic.w	r3, r3, #1
 8006b52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b54:	f7fd fe5c 	bl	8004810 <HAL_GetTick>
 8006b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5a:	e008      	b.n	8006b6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b5c:	f7fd fe58 	bl	8004810 <HAL_GetTick>
 8006b60:	4602      	mov	r2, r0
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	1ad3      	subs	r3, r2, r3
 8006b66:	2b02      	cmp	r3, #2
 8006b68:	d901      	bls.n	8006b6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e199      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b6e:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1f0      	bne.n	8006b5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f003 0308 	and.w	r3, r3, #8
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d038      	beq.n	8006bf8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	695b      	ldr	r3, [r3, #20]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d019      	beq.n	8006bc2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006b8e:	4b16      	ldr	r3, [pc, #88]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b92:	4a15      	ldr	r2, [pc, #84]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006b94:	f043 0301 	orr.w	r3, r3, #1
 8006b98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b9a:	f7fd fe39 	bl	8004810 <HAL_GetTick>
 8006b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ba0:	e008      	b.n	8006bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006ba2:	f7fd fe35 	bl	8004810 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	2b02      	cmp	r3, #2
 8006bae:	d901      	bls.n	8006bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006bb0:	2303      	movs	r3, #3
 8006bb2:	e176      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d0f0      	beq.n	8006ba2 <HAL_RCC_OscConfig+0x23a>
 8006bc0:	e01a      	b.n	8006bf8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bc2:	4b09      	ldr	r3, [pc, #36]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006bc4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bc6:	4a08      	ldr	r2, [pc, #32]	; (8006be8 <HAL_RCC_OscConfig+0x280>)
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bce:	f7fd fe1f 	bl	8004810 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bd6:	f7fd fe1b 	bl	8004810 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d903      	bls.n	8006bec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e15c      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
 8006be8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006bec:	4b91      	ldr	r3, [pc, #580]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006bee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ee      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	f000 80a4 	beq.w	8006d4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006c06:	4b8b      	ldr	r3, [pc, #556]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d10d      	bne.n	8006c2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c12:	4b88      	ldr	r3, [pc, #544]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c16:	4a87      	ldr	r2, [pc, #540]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c1e:	4b85      	ldr	r3, [pc, #532]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c26:	60bb      	str	r3, [r7, #8]
 8006c28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c2e:	4b82      	ldr	r3, [pc, #520]	; (8006e38 <HAL_RCC_OscConfig+0x4d0>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d118      	bne.n	8006c6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006c3a:	4b7f      	ldr	r3, [pc, #508]	; (8006e38 <HAL_RCC_OscConfig+0x4d0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a7e      	ldr	r2, [pc, #504]	; (8006e38 <HAL_RCC_OscConfig+0x4d0>)
 8006c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c46:	f7fd fde3 	bl	8004810 <HAL_GetTick>
 8006c4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c4c:	e008      	b.n	8006c60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c4e:	f7fd fddf 	bl	8004810 <HAL_GetTick>
 8006c52:	4602      	mov	r2, r0
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	1ad3      	subs	r3, r2, r3
 8006c58:	2b64      	cmp	r3, #100	; 0x64
 8006c5a:	d901      	bls.n	8006c60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006c5c:	2303      	movs	r3, #3
 8006c5e:	e120      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006c60:	4b75      	ldr	r3, [pc, #468]	; (8006e38 <HAL_RCC_OscConfig+0x4d0>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0f0      	beq.n	8006c4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d106      	bne.n	8006c82 <HAL_RCC_OscConfig+0x31a>
 8006c74:	4b6f      	ldr	r3, [pc, #444]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c78:	4a6e      	ldr	r2, [pc, #440]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c7a:	f043 0301 	orr.w	r3, r3, #1
 8006c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006c80:	e02d      	b.n	8006cde <HAL_RCC_OscConfig+0x376>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d10c      	bne.n	8006ca4 <HAL_RCC_OscConfig+0x33c>
 8006c8a:	4b6a      	ldr	r3, [pc, #424]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a69      	ldr	r2, [pc, #420]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c90:	f023 0301 	bic.w	r3, r3, #1
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
 8006c96:	4b67      	ldr	r3, [pc, #412]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a66      	ldr	r2, [pc, #408]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006c9c:	f023 0304 	bic.w	r3, r3, #4
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ca2:	e01c      	b.n	8006cde <HAL_RCC_OscConfig+0x376>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d10c      	bne.n	8006cc6 <HAL_RCC_OscConfig+0x35e>
 8006cac:	4b61      	ldr	r3, [pc, #388]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cb0:	4a60      	ldr	r2, [pc, #384]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cb2:	f043 0304 	orr.w	r3, r3, #4
 8006cb6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cb8:	4b5e      	ldr	r3, [pc, #376]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	4a5d      	ldr	r2, [pc, #372]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cbe:	f043 0301 	orr.w	r3, r3, #1
 8006cc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006cc4:	e00b      	b.n	8006cde <HAL_RCC_OscConfig+0x376>
 8006cc6:	4b5b      	ldr	r3, [pc, #364]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cca:	4a5a      	ldr	r2, [pc, #360]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006ccc:	f023 0301 	bic.w	r3, r3, #1
 8006cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8006cd2:	4b58      	ldr	r3, [pc, #352]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	4a57      	ldr	r2, [pc, #348]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006cd8:	f023 0304 	bic.w	r3, r3, #4
 8006cdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	689b      	ldr	r3, [r3, #8]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d015      	beq.n	8006d12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ce6:	f7fd fd93 	bl	8004810 <HAL_GetTick>
 8006cea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cec:	e00a      	b.n	8006d04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006cee:	f7fd fd8f 	bl	8004810 <HAL_GetTick>
 8006cf2:	4602      	mov	r2, r0
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d901      	bls.n	8006d04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006d00:	2303      	movs	r3, #3
 8006d02:	e0ce      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006d04:	4b4b      	ldr	r3, [pc, #300]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d0ee      	beq.n	8006cee <HAL_RCC_OscConfig+0x386>
 8006d10:	e014      	b.n	8006d3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d12:	f7fd fd7d 	bl	8004810 <HAL_GetTick>
 8006d16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d18:	e00a      	b.n	8006d30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d1a:	f7fd fd79 	bl	8004810 <HAL_GetTick>
 8006d1e:	4602      	mov	r2, r0
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	1ad3      	subs	r3, r2, r3
 8006d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e0b8      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006d30:	4b40      	ldr	r3, [pc, #256]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1ee      	bne.n	8006d1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d105      	bne.n	8006d4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006d42:	4b3c      	ldr	r3, [pc, #240]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	4a3b      	ldr	r2, [pc, #236]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	699b      	ldr	r3, [r3, #24]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 80a4 	beq.w	8006ea0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d58:	4b36      	ldr	r3, [pc, #216]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f003 030c 	and.w	r3, r3, #12
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d06b      	beq.n	8006e3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	699b      	ldr	r3, [r3, #24]
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d149      	bne.n	8006e00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d6c:	4b31      	ldr	r3, [pc, #196]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a30      	ldr	r2, [pc, #192]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d78:	f7fd fd4a 	bl	8004810 <HAL_GetTick>
 8006d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d7e:	e008      	b.n	8006d92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006d80:	f7fd fd46 	bl	8004810 <HAL_GetTick>
 8006d84:	4602      	mov	r2, r0
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	1ad3      	subs	r3, r2, r3
 8006d8a:	2b02      	cmp	r3, #2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e087      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d92:	4b28      	ldr	r3, [pc, #160]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1f0      	bne.n	8006d80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	69da      	ldr	r2, [r3, #28]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	431a      	orrs	r2, r3
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dac:	019b      	lsls	r3, r3, #6
 8006dae:	431a      	orrs	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db4:	085b      	lsrs	r3, r3, #1
 8006db6:	3b01      	subs	r3, #1
 8006db8:	041b      	lsls	r3, r3, #16
 8006dba:	431a      	orrs	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dc0:	061b      	lsls	r3, r3, #24
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	4a1b      	ldr	r2, [pc, #108]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006dca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dcc:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a18      	ldr	r2, [pc, #96]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006dd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006dd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dd8:	f7fd fd1a 	bl	8004810 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dde:	e008      	b.n	8006df2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006de0:	f7fd fd16 	bl	8004810 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	2b02      	cmp	r3, #2
 8006dec:	d901      	bls.n	8006df2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006dee:	2303      	movs	r3, #3
 8006df0:	e057      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006df2:	4b10      	ldr	r3, [pc, #64]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d0f0      	beq.n	8006de0 <HAL_RCC_OscConfig+0x478>
 8006dfe:	e04f      	b.n	8006ea0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e00:	4b0c      	ldr	r3, [pc, #48]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	4a0b      	ldr	r2, [pc, #44]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006e06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e0c:	f7fd fd00 	bl	8004810 <HAL_GetTick>
 8006e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e12:	e008      	b.n	8006e26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e14:	f7fd fcfc 	bl	8004810 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d901      	bls.n	8006e26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006e22:	2303      	movs	r3, #3
 8006e24:	e03d      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e26:	4b03      	ldr	r3, [pc, #12]	; (8006e34 <HAL_RCC_OscConfig+0x4cc>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d1f0      	bne.n	8006e14 <HAL_RCC_OscConfig+0x4ac>
 8006e32:	e035      	b.n	8006ea0 <HAL_RCC_OscConfig+0x538>
 8006e34:	40023800 	.word	0x40023800
 8006e38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006e3c:	4b1b      	ldr	r3, [pc, #108]	; (8006eac <HAL_RCC_OscConfig+0x544>)
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	699b      	ldr	r3, [r3, #24]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d028      	beq.n	8006e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e54:	429a      	cmp	r2, r3
 8006e56:	d121      	bne.n	8006e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d11a      	bne.n	8006e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006e6c:	4013      	ands	r3, r2
 8006e6e:	687a      	ldr	r2, [r7, #4]
 8006e70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006e72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d111      	bne.n	8006e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e82:	085b      	lsrs	r3, r3, #1
 8006e84:	3b01      	subs	r3, #1
 8006e86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d107      	bne.n	8006e9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d001      	beq.n	8006ea0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	e000      	b.n	8006ea2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3718      	adds	r7, #24
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40023800 	.word	0x40023800

08006eb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d101      	bne.n	8006ec8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	e0d0      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ec8:	4b6a      	ldr	r3, [pc, #424]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 030f 	and.w	r3, r3, #15
 8006ed0:	683a      	ldr	r2, [r7, #0]
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d910      	bls.n	8006ef8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ed6:	4b67      	ldr	r3, [pc, #412]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f023 020f 	bic.w	r2, r3, #15
 8006ede:	4965      	ldr	r1, [pc, #404]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	4b63      	ldr	r3, [pc, #396]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e0b8      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0302 	and.w	r3, r3, #2
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d020      	beq.n	8006f46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d005      	beq.n	8006f1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006f10:	4b59      	ldr	r3, [pc, #356]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f12:	689b      	ldr	r3, [r3, #8]
 8006f14:	4a58      	ldr	r2, [pc, #352]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006f1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006f28:	4b53      	ldr	r3, [pc, #332]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	4a52      	ldr	r2, [pc, #328]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006f32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006f34:	4b50      	ldr	r3, [pc, #320]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	494d      	ldr	r1, [pc, #308]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f42:	4313      	orrs	r3, r2
 8006f44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f003 0301 	and.w	r3, r3, #1
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d040      	beq.n	8006fd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	685b      	ldr	r3, [r3, #4]
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d107      	bne.n	8006f6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006f5a:	4b47      	ldr	r3, [pc, #284]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d115      	bne.n	8006f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f66:	2301      	movs	r3, #1
 8006f68:	e07f      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2b02      	cmp	r3, #2
 8006f70:	d107      	bne.n	8006f82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f72:	4b41      	ldr	r3, [pc, #260]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	e073      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006f82:	4b3d      	ldr	r3, [pc, #244]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f003 0302 	and.w	r3, r3, #2
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d101      	bne.n	8006f92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e06b      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006f92:	4b39      	ldr	r3, [pc, #228]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f023 0203 	bic.w	r2, r3, #3
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	4936      	ldr	r1, [pc, #216]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006fa0:	4313      	orrs	r3, r2
 8006fa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa4:	f7fd fc34 	bl	8004810 <HAL_GetTick>
 8006fa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006faa:	e00a      	b.n	8006fc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006fac:	f7fd fc30 	bl	8004810 <HAL_GetTick>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	1ad3      	subs	r3, r2, r3
 8006fb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e053      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006fc2:	4b2d      	ldr	r3, [pc, #180]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	f003 020c 	and.w	r2, r3, #12
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d1eb      	bne.n	8006fac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006fd4:	4b27      	ldr	r3, [pc, #156]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f003 030f 	and.w	r3, r3, #15
 8006fdc:	683a      	ldr	r2, [r7, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d210      	bcs.n	8007004 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006fe2:	4b24      	ldr	r3, [pc, #144]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	f023 020f 	bic.w	r2, r3, #15
 8006fea:	4922      	ldr	r1, [pc, #136]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ff2:	4b20      	ldr	r3, [pc, #128]	; (8007074 <HAL_RCC_ClockConfig+0x1c4>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	683a      	ldr	r2, [r7, #0]
 8006ffc:	429a      	cmp	r2, r3
 8006ffe:	d001      	beq.n	8007004 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007000:	2301      	movs	r3, #1
 8007002:	e032      	b.n	800706a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d008      	beq.n	8007022 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007010:	4b19      	ldr	r3, [pc, #100]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	4916      	ldr	r1, [pc, #88]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 800701e:	4313      	orrs	r3, r2
 8007020:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f003 0308 	and.w	r3, r3, #8
 800702a:	2b00      	cmp	r3, #0
 800702c:	d009      	beq.n	8007042 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800702e:	4b12      	ldr	r3, [pc, #72]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	00db      	lsls	r3, r3, #3
 800703c:	490e      	ldr	r1, [pc, #56]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 800703e:	4313      	orrs	r3, r2
 8007040:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007042:	f000 f821 	bl	8007088 <HAL_RCC_GetSysClockFreq>
 8007046:	4602      	mov	r2, r0
 8007048:	4b0b      	ldr	r3, [pc, #44]	; (8007078 <HAL_RCC_ClockConfig+0x1c8>)
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	091b      	lsrs	r3, r3, #4
 800704e:	f003 030f 	and.w	r3, r3, #15
 8007052:	490a      	ldr	r1, [pc, #40]	; (800707c <HAL_RCC_ClockConfig+0x1cc>)
 8007054:	5ccb      	ldrb	r3, [r1, r3]
 8007056:	fa22 f303 	lsr.w	r3, r2, r3
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <HAL_RCC_ClockConfig+0x1d0>)
 800705c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <HAL_RCC_ClockConfig+0x1d4>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	4618      	mov	r0, r3
 8007064:	f7fd fb90 	bl	8004788 <HAL_InitTick>

  return HAL_OK;
 8007068:	2300      	movs	r3, #0
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	40023c00 	.word	0x40023c00
 8007078:	40023800 	.word	0x40023800
 800707c:	080097d4 	.word	0x080097d4
 8007080:	20000090 	.word	0x20000090
 8007084:	20000094 	.word	0x20000094

08007088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007088:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800708c:	b094      	sub	sp, #80	; 0x50
 800708e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007090:	2300      	movs	r3, #0
 8007092:	647b      	str	r3, [r7, #68]	; 0x44
 8007094:	2300      	movs	r3, #0
 8007096:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007098:	2300      	movs	r3, #0
 800709a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800709c:	2300      	movs	r3, #0
 800709e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80070a0:	4b79      	ldr	r3, [pc, #484]	; (8007288 <HAL_RCC_GetSysClockFreq+0x200>)
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	f003 030c 	and.w	r3, r3, #12
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d00d      	beq.n	80070c8 <HAL_RCC_GetSysClockFreq+0x40>
 80070ac:	2b08      	cmp	r3, #8
 80070ae:	f200 80e1 	bhi.w	8007274 <HAL_RCC_GetSysClockFreq+0x1ec>
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_RCC_GetSysClockFreq+0x34>
 80070b6:	2b04      	cmp	r3, #4
 80070b8:	d003      	beq.n	80070c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80070ba:	e0db      	b.n	8007274 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80070bc:	4b73      	ldr	r3, [pc, #460]	; (800728c <HAL_RCC_GetSysClockFreq+0x204>)
 80070be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070c0:	e0db      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80070c2:	4b72      	ldr	r3, [pc, #456]	; (800728c <HAL_RCC_GetSysClockFreq+0x204>)
 80070c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80070c6:	e0d8      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80070c8:	4b6f      	ldr	r3, [pc, #444]	; (8007288 <HAL_RCC_GetSysClockFreq+0x200>)
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80070d0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80070d2:	4b6d      	ldr	r3, [pc, #436]	; (8007288 <HAL_RCC_GetSysClockFreq+0x200>)
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d063      	beq.n	80071a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80070de:	4b6a      	ldr	r3, [pc, #424]	; (8007288 <HAL_RCC_GetSysClockFreq+0x200>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	099b      	lsrs	r3, r3, #6
 80070e4:	2200      	movs	r2, #0
 80070e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80070e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80070ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f0:	633b      	str	r3, [r7, #48]	; 0x30
 80070f2:	2300      	movs	r3, #0
 80070f4:	637b      	str	r3, [r7, #52]	; 0x34
 80070f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80070fa:	4622      	mov	r2, r4
 80070fc:	462b      	mov	r3, r5
 80070fe:	f04f 0000 	mov.w	r0, #0
 8007102:	f04f 0100 	mov.w	r1, #0
 8007106:	0159      	lsls	r1, r3, #5
 8007108:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800710c:	0150      	lsls	r0, r2, #5
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4621      	mov	r1, r4
 8007114:	1a51      	subs	r1, r2, r1
 8007116:	6139      	str	r1, [r7, #16]
 8007118:	4629      	mov	r1, r5
 800711a:	eb63 0301 	sbc.w	r3, r3, r1
 800711e:	617b      	str	r3, [r7, #20]
 8007120:	f04f 0200 	mov.w	r2, #0
 8007124:	f04f 0300 	mov.w	r3, #0
 8007128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800712c:	4659      	mov	r1, fp
 800712e:	018b      	lsls	r3, r1, #6
 8007130:	4651      	mov	r1, sl
 8007132:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007136:	4651      	mov	r1, sl
 8007138:	018a      	lsls	r2, r1, #6
 800713a:	4651      	mov	r1, sl
 800713c:	ebb2 0801 	subs.w	r8, r2, r1
 8007140:	4659      	mov	r1, fp
 8007142:	eb63 0901 	sbc.w	r9, r3, r1
 8007146:	f04f 0200 	mov.w	r2, #0
 800714a:	f04f 0300 	mov.w	r3, #0
 800714e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007152:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007156:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800715a:	4690      	mov	r8, r2
 800715c:	4699      	mov	r9, r3
 800715e:	4623      	mov	r3, r4
 8007160:	eb18 0303 	adds.w	r3, r8, r3
 8007164:	60bb      	str	r3, [r7, #8]
 8007166:	462b      	mov	r3, r5
 8007168:	eb49 0303 	adc.w	r3, r9, r3
 800716c:	60fb      	str	r3, [r7, #12]
 800716e:	f04f 0200 	mov.w	r2, #0
 8007172:	f04f 0300 	mov.w	r3, #0
 8007176:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800717a:	4629      	mov	r1, r5
 800717c:	028b      	lsls	r3, r1, #10
 800717e:	4621      	mov	r1, r4
 8007180:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007184:	4621      	mov	r1, r4
 8007186:	028a      	lsls	r2, r1, #10
 8007188:	4610      	mov	r0, r2
 800718a:	4619      	mov	r1, r3
 800718c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800718e:	2200      	movs	r2, #0
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
 8007192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007194:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007198:	f7f9 fca8 	bl	8000aec <__aeabi_uldivmod>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4613      	mov	r3, r2
 80071a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071a4:	e058      	b.n	8007258 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071a6:	4b38      	ldr	r3, [pc, #224]	; (8007288 <HAL_RCC_GetSysClockFreq+0x200>)
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	099b      	lsrs	r3, r3, #6
 80071ac:	2200      	movs	r2, #0
 80071ae:	4618      	mov	r0, r3
 80071b0:	4611      	mov	r1, r2
 80071b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80071b6:	623b      	str	r3, [r7, #32]
 80071b8:	2300      	movs	r3, #0
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
 80071bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80071c0:	4642      	mov	r2, r8
 80071c2:	464b      	mov	r3, r9
 80071c4:	f04f 0000 	mov.w	r0, #0
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	0159      	lsls	r1, r3, #5
 80071ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80071d2:	0150      	lsls	r0, r2, #5
 80071d4:	4602      	mov	r2, r0
 80071d6:	460b      	mov	r3, r1
 80071d8:	4641      	mov	r1, r8
 80071da:	ebb2 0a01 	subs.w	sl, r2, r1
 80071de:	4649      	mov	r1, r9
 80071e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80071e4:	f04f 0200 	mov.w	r2, #0
 80071e8:	f04f 0300 	mov.w	r3, #0
 80071ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80071f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80071f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80071f8:	ebb2 040a 	subs.w	r4, r2, sl
 80071fc:	eb63 050b 	sbc.w	r5, r3, fp
 8007200:	f04f 0200 	mov.w	r2, #0
 8007204:	f04f 0300 	mov.w	r3, #0
 8007208:	00eb      	lsls	r3, r5, #3
 800720a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800720e:	00e2      	lsls	r2, r4, #3
 8007210:	4614      	mov	r4, r2
 8007212:	461d      	mov	r5, r3
 8007214:	4643      	mov	r3, r8
 8007216:	18e3      	adds	r3, r4, r3
 8007218:	603b      	str	r3, [r7, #0]
 800721a:	464b      	mov	r3, r9
 800721c:	eb45 0303 	adc.w	r3, r5, r3
 8007220:	607b      	str	r3, [r7, #4]
 8007222:	f04f 0200 	mov.w	r2, #0
 8007226:	f04f 0300 	mov.w	r3, #0
 800722a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800722e:	4629      	mov	r1, r5
 8007230:	028b      	lsls	r3, r1, #10
 8007232:	4621      	mov	r1, r4
 8007234:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007238:	4621      	mov	r1, r4
 800723a:	028a      	lsls	r2, r1, #10
 800723c:	4610      	mov	r0, r2
 800723e:	4619      	mov	r1, r3
 8007240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007242:	2200      	movs	r2, #0
 8007244:	61bb      	str	r3, [r7, #24]
 8007246:	61fa      	str	r2, [r7, #28]
 8007248:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800724c:	f7f9 fc4e 	bl	8000aec <__aeabi_uldivmod>
 8007250:	4602      	mov	r2, r0
 8007252:	460b      	mov	r3, r1
 8007254:	4613      	mov	r3, r2
 8007256:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007258:	4b0b      	ldr	r3, [pc, #44]	; (8007288 <HAL_RCC_GetSysClockFreq+0x200>)
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	f003 0303 	and.w	r3, r3, #3
 8007262:	3301      	adds	r3, #1
 8007264:	005b      	lsls	r3, r3, #1
 8007266:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007268:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800726a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007272:	e002      	b.n	800727a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007274:	4b05      	ldr	r3, [pc, #20]	; (800728c <HAL_RCC_GetSysClockFreq+0x204>)
 8007276:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007278:	bf00      	nop
    }
  }
  return sysclockfreq;
 800727a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800727c:	4618      	mov	r0, r3
 800727e:	3750      	adds	r7, #80	; 0x50
 8007280:	46bd      	mov	sp, r7
 8007282:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007286:	bf00      	nop
 8007288:	40023800 	.word	0x40023800
 800728c:	00f42400 	.word	0x00f42400

08007290 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007290:	b480      	push	{r7}
 8007292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007294:	4b03      	ldr	r3, [pc, #12]	; (80072a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007296:	681b      	ldr	r3, [r3, #0]
}
 8007298:	4618      	mov	r0, r3
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	20000090 	.word	0x20000090

080072a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072ac:	f7ff fff0 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80072b0:	4602      	mov	r2, r0
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	0a9b      	lsrs	r3, r3, #10
 80072b8:	f003 0307 	and.w	r3, r3, #7
 80072bc:	4903      	ldr	r1, [pc, #12]	; (80072cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80072be:	5ccb      	ldrb	r3, [r1, r3]
 80072c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	bd80      	pop	{r7, pc}
 80072c8:	40023800 	.word	0x40023800
 80072cc:	080097e4 	.word	0x080097e4

080072d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072d4:	f7ff ffdc 	bl	8007290 <HAL_RCC_GetHCLKFreq>
 80072d8:	4602      	mov	r2, r0
 80072da:	4b05      	ldr	r3, [pc, #20]	; (80072f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	0b5b      	lsrs	r3, r3, #13
 80072e0:	f003 0307 	and.w	r3, r3, #7
 80072e4:	4903      	ldr	r1, [pc, #12]	; (80072f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80072e6:	5ccb      	ldrb	r3, [r1, r3]
 80072e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	40023800 	.word	0x40023800
 80072f4:	080097e4 	.word	0x080097e4

080072f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b088      	sub	sp, #32
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007300:	2300      	movs	r3, #0
 8007302:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007304:	2300      	movs	r3, #0
 8007306:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007308:	2300      	movs	r3, #0
 800730a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800730c:	2300      	movs	r3, #0
 800730e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f003 0301 	and.w	r3, r3, #1
 800731c:	2b00      	cmp	r3, #0
 800731e:	d012      	beq.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007320:	4b69      	ldr	r3, [pc, #420]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	4a68      	ldr	r2, [pc, #416]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007326:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800732a:	6093      	str	r3, [r2, #8]
 800732c:	4b66      	ldr	r3, [pc, #408]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800732e:	689a      	ldr	r2, [r3, #8]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007334:	4964      	ldr	r1, [pc, #400]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007336:	4313      	orrs	r3, r2
 8007338:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007342:	2301      	movs	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d017      	beq.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007352:	4b5d      	ldr	r3, [pc, #372]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007354:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007358:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007360:	4959      	ldr	r1, [pc, #356]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007362:	4313      	orrs	r3, r2
 8007364:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007370:	d101      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007372:	2301      	movs	r3, #1
 8007374:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737a:	2b00      	cmp	r3, #0
 800737c:	d101      	bne.n	8007382 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800737e:	2301      	movs	r3, #1
 8007380:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d017      	beq.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800738e:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007394:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739c:	494a      	ldr	r1, [pc, #296]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ac:	d101      	bne.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80073ae:	2301      	movs	r3, #1
 80073b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d101      	bne.n	80073be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80073ba:	2301      	movs	r3, #1
 80073bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d001      	beq.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80073ca:	2301      	movs	r3, #1
 80073cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 0320 	and.w	r3, r3, #32
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	f000 808b 	beq.w	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80073dc:	4b3a      	ldr	r3, [pc, #232]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e0:	4a39      	ldr	r2, [pc, #228]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e6:	6413      	str	r3, [r2, #64]	; 0x40
 80073e8:	4b37      	ldr	r3, [pc, #220]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80073ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80073f4:	4b35      	ldr	r3, [pc, #212]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a34      	ldr	r2, [pc, #208]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80073fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007400:	f7fd fa06 	bl	8004810 <HAL_GetTick>
 8007404:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007406:	e008      	b.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007408:	f7fd fa02 	bl	8004810 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	697b      	ldr	r3, [r7, #20]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	2b64      	cmp	r3, #100	; 0x64
 8007414:	d901      	bls.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e357      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800741a:	4b2c      	ldr	r3, [pc, #176]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007422:	2b00      	cmp	r3, #0
 8007424:	d0f0      	beq.n	8007408 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007426:	4b28      	ldr	r3, [pc, #160]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800742e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d035      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800743e:	693a      	ldr	r2, [r7, #16]
 8007440:	429a      	cmp	r2, r3
 8007442:	d02e      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007444:	4b20      	ldr	r3, [pc, #128]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007446:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800744c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800744e:	4b1e      	ldr	r3, [pc, #120]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007452:	4a1d      	ldr	r2, [pc, #116]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007458:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800745a:	4b1b      	ldr	r3, [pc, #108]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745e:	4a1a      	ldr	r2, [pc, #104]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007460:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007464:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007466:	4a18      	ldr	r2, [pc, #96]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800746c:	4b16      	ldr	r3, [pc, #88]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800746e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b01      	cmp	r3, #1
 8007476:	d114      	bne.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007478:	f7fd f9ca 	bl	8004810 <HAL_GetTick>
 800747c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800747e:	e00a      	b.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007480:	f7fd f9c6 	bl	8004810 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	f241 3288 	movw	r2, #5000	; 0x1388
 800748e:	4293      	cmp	r3, r2
 8007490:	d901      	bls.n	8007496 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007492:	2303      	movs	r3, #3
 8007494:	e319      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007496:	4b0c      	ldr	r3, [pc, #48]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800749a:	f003 0302 	and.w	r3, r3, #2
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d0ee      	beq.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074ae:	d111      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80074b0:	4b05      	ldr	r3, [pc, #20]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80074bc:	4b04      	ldr	r3, [pc, #16]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80074be:	400b      	ands	r3, r1
 80074c0:	4901      	ldr	r1, [pc, #4]	; (80074c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80074c2:	4313      	orrs	r3, r2
 80074c4:	608b      	str	r3, [r1, #8]
 80074c6:	e00b      	b.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80074c8:	40023800 	.word	0x40023800
 80074cc:	40007000 	.word	0x40007000
 80074d0:	0ffffcff 	.word	0x0ffffcff
 80074d4:	4baa      	ldr	r3, [pc, #680]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	4aa9      	ldr	r2, [pc, #676]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80074de:	6093      	str	r3, [r2, #8]
 80074e0:	4ba7      	ldr	r3, [pc, #668]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80074ec:	49a4      	ldr	r1, [pc, #656]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80074ee:	4313      	orrs	r3, r2
 80074f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f003 0310 	and.w	r3, r3, #16
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d010      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074fe:	4ba0      	ldr	r3, [pc, #640]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007500:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007504:	4a9e      	ldr	r2, [pc, #632]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800750a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800750e:	4b9c      	ldr	r3, [pc, #624]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007510:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007518:	4999      	ldr	r1, [pc, #612]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800751a:	4313      	orrs	r3, r2
 800751c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800752c:	4b94      	ldr	r3, [pc, #592]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800752e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007532:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800753a:	4991      	ldr	r1, [pc, #580]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800753c:	4313      	orrs	r3, r2
 800753e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00a      	beq.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800754e:	4b8c      	ldr	r3, [pc, #560]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007554:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800755c:	4988      	ldr	r1, [pc, #544]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800755e:	4313      	orrs	r3, r2
 8007560:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007570:	4b83      	ldr	r3, [pc, #524]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007576:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800757e:	4980      	ldr	r1, [pc, #512]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007580:	4313      	orrs	r3, r2
 8007582:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00a      	beq.n	80075a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007592:	4b7b      	ldr	r3, [pc, #492]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007598:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a0:	4977      	ldr	r1, [pc, #476]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075a2:	4313      	orrs	r3, r2
 80075a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00a      	beq.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80075b4:	4b72      	ldr	r3, [pc, #456]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075ba:	f023 0203 	bic.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075c2:	496f      	ldr	r1, [pc, #444]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d00a      	beq.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80075d6:	4b6a      	ldr	r3, [pc, #424]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075dc:	f023 020c 	bic.w	r2, r3, #12
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80075e4:	4966      	ldr	r1, [pc, #408]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d00a      	beq.n	800760e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80075f8:	4b61      	ldr	r3, [pc, #388]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80075fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007606:	495e      	ldr	r1, [pc, #376]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007608:	4313      	orrs	r3, r2
 800760a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00a      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800761a:	4b59      	ldr	r3, [pc, #356]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007628:	4955      	ldr	r1, [pc, #340]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800762a:	4313      	orrs	r3, r2
 800762c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00a      	beq.n	8007652 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800763c:	4b50      	ldr	r3, [pc, #320]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800763e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007642:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800764a:	494d      	ldr	r1, [pc, #308]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800764c:	4313      	orrs	r3, r2
 800764e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800765a:	2b00      	cmp	r3, #0
 800765c:	d00a      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800765e:	4b48      	ldr	r3, [pc, #288]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007664:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800766c:	4944      	ldr	r1, [pc, #272]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800766e:	4313      	orrs	r3, r2
 8007670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d00a      	beq.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007680:	4b3f      	ldr	r3, [pc, #252]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007686:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800768e:	493c      	ldr	r1, [pc, #240]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007690:	4313      	orrs	r3, r2
 8007692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d00a      	beq.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80076a2:	4b37      	ldr	r3, [pc, #220]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076b0:	4933      	ldr	r1, [pc, #204]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076b2:	4313      	orrs	r3, r2
 80076b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d00a      	beq.n	80076da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80076c4:	4b2e      	ldr	r3, [pc, #184]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d2:	492b      	ldr	r1, [pc, #172]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d011      	beq.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80076e6:	4b26      	ldr	r3, [pc, #152]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076f4:	4922      	ldr	r1, [pc, #136]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80076f6:	4313      	orrs	r3, r2
 80076f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007704:	d101      	bne.n	800770a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007706:	2301      	movs	r3, #1
 8007708:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f003 0308 	and.w	r3, r3, #8
 8007712:	2b00      	cmp	r3, #0
 8007714:	d001      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007716:	2301      	movs	r3, #1
 8007718:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d00a      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007726:	4b16      	ldr	r3, [pc, #88]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800772c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007734:	4912      	ldr	r1, [pc, #72]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007736:	4313      	orrs	r3, r2
 8007738:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00b      	beq.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007748:	4b0d      	ldr	r3, [pc, #52]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800774e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007758:	4909      	ldr	r1, [pc, #36]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800775a:	4313      	orrs	r3, r2
 800775c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d006      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800776e:	2b00      	cmp	r3, #0
 8007770:	f000 80d9 	beq.w	8007926 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007774:	4b02      	ldr	r3, [pc, #8]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a01      	ldr	r2, [pc, #4]	; (8007780 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800777a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800777e:	e001      	b.n	8007784 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007780:	40023800 	.word	0x40023800
 8007784:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007786:	f7fd f843 	bl	8004810 <HAL_GetTick>
 800778a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800778c:	e008      	b.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800778e:	f7fd f83f 	bl	8004810 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b64      	cmp	r3, #100	; 0x64
 800779a:	d901      	bls.n	80077a0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e194      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80077a0:	4b6c      	ldr	r3, [pc, #432]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1f0      	bne.n	800778e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f003 0301 	and.w	r3, r3, #1
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d021      	beq.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x504>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11d      	bne.n	80077fc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80077c0:	4b64      	ldr	r3, [pc, #400]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077c6:	0c1b      	lsrs	r3, r3, #16
 80077c8:	f003 0303 	and.w	r3, r3, #3
 80077cc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80077ce:	4b61      	ldr	r3, [pc, #388]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077d4:	0e1b      	lsrs	r3, r3, #24
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	019a      	lsls	r2, r3, #6
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	041b      	lsls	r3, r3, #16
 80077e6:	431a      	orrs	r2, r3
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	061b      	lsls	r3, r3, #24
 80077ec:	431a      	orrs	r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	071b      	lsls	r3, r3, #28
 80077f4:	4957      	ldr	r1, [pc, #348]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80077f6:	4313      	orrs	r3, r2
 80077f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d004      	beq.n	8007812 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007810:	d00a      	beq.n	8007828 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800781a:	2b00      	cmp	r3, #0
 800781c:	d02e      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007822:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007826:	d129      	bne.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007828:	4b4a      	ldr	r3, [pc, #296]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800782a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800782e:	0c1b      	lsrs	r3, r3, #16
 8007830:	f003 0303 	and.w	r3, r3, #3
 8007834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007836:	4b47      	ldr	r3, [pc, #284]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800783c:	0f1b      	lsrs	r3, r3, #28
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	019a      	lsls	r2, r3, #6
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	041b      	lsls	r3, r3, #16
 800784e:	431a      	orrs	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	061b      	lsls	r3, r3, #24
 8007856:	431a      	orrs	r2, r3
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	071b      	lsls	r3, r3, #28
 800785c:	493d      	ldr	r1, [pc, #244]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800785e:	4313      	orrs	r3, r2
 8007860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007864:	4b3b      	ldr	r3, [pc, #236]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007866:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800786a:	f023 021f 	bic.w	r2, r3, #31
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007872:	3b01      	subs	r3, #1
 8007874:	4937      	ldr	r1, [pc, #220]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007876:	4313      	orrs	r3, r2
 8007878:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007884:	2b00      	cmp	r3, #0
 8007886:	d01d      	beq.n	80078c4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007888:	4b32      	ldr	r3, [pc, #200]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800788a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800788e:	0e1b      	lsrs	r3, r3, #24
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007896:	4b2f      	ldr	r3, [pc, #188]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800789c:	0f1b      	lsrs	r3, r3, #28
 800789e:	f003 0307 	and.w	r3, r3, #7
 80078a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	019a      	lsls	r2, r3, #6
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	041b      	lsls	r3, r3, #16
 80078b0:	431a      	orrs	r2, r3
 80078b2:	693b      	ldr	r3, [r7, #16]
 80078b4:	061b      	lsls	r3, r3, #24
 80078b6:	431a      	orrs	r2, r3
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	071b      	lsls	r3, r3, #28
 80078bc:	4925      	ldr	r1, [pc, #148]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078be:	4313      	orrs	r3, r2
 80078c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d011      	beq.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	685b      	ldr	r3, [r3, #4]
 80078d4:	019a      	lsls	r2, r3, #6
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	041b      	lsls	r3, r3, #16
 80078dc:	431a      	orrs	r2, r3
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	061b      	lsls	r3, r3, #24
 80078e4:	431a      	orrs	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	071b      	lsls	r3, r3, #28
 80078ec:	4919      	ldr	r1, [pc, #100]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078ee:	4313      	orrs	r3, r2
 80078f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80078f4:	4b17      	ldr	r3, [pc, #92]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a16      	ldr	r2, [pc, #88]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80078fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80078fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007900:	f7fc ff86 	bl	8004810 <HAL_GetTick>
 8007904:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007906:	e008      	b.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007908:	f7fc ff82 	bl	8004810 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b64      	cmp	r3, #100	; 0x64
 8007914:	d901      	bls.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e0d7      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800791a:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007922:	2b00      	cmp	r3, #0
 8007924:	d0f0      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b01      	cmp	r3, #1
 800792a:	f040 80cd 	bne.w	8007ac8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800792e:	4b09      	ldr	r3, [pc, #36]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a08      	ldr	r2, [pc, #32]	; (8007954 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007934:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007938:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800793a:	f7fc ff69 	bl	8004810 <HAL_GetTick>
 800793e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007940:	e00a      	b.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007942:	f7fc ff65 	bl	8004810 <HAL_GetTick>
 8007946:	4602      	mov	r2, r0
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	1ad3      	subs	r3, r2, r3
 800794c:	2b64      	cmp	r3, #100	; 0x64
 800794e:	d903      	bls.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007950:	2303      	movs	r3, #3
 8007952:	e0ba      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007954:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007958:	4b5e      	ldr	r3, [pc, #376]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007960:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007964:	d0ed      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007976:	2b00      	cmp	r3, #0
 8007978:	d009      	beq.n	800798e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007982:	2b00      	cmp	r3, #0
 8007984:	d02e      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d12a      	bne.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800798e:	4b51      	ldr	r3, [pc, #324]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007994:	0c1b      	lsrs	r3, r3, #16
 8007996:	f003 0303 	and.w	r3, r3, #3
 800799a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800799c:	4b4d      	ldr	r3, [pc, #308]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800799e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079a2:	0f1b      	lsrs	r3, r3, #28
 80079a4:	f003 0307 	and.w	r3, r3, #7
 80079a8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	019a      	lsls	r2, r3, #6
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	041b      	lsls	r3, r3, #16
 80079b4:	431a      	orrs	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	699b      	ldr	r3, [r3, #24]
 80079ba:	061b      	lsls	r3, r3, #24
 80079bc:	431a      	orrs	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	071b      	lsls	r3, r3, #28
 80079c2:	4944      	ldr	r1, [pc, #272]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079c4:	4313      	orrs	r3, r2
 80079c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80079ca:	4b42      	ldr	r3, [pc, #264]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079d0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	3b01      	subs	r3, #1
 80079da:	021b      	lsls	r3, r3, #8
 80079dc:	493d      	ldr	r1, [pc, #244]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d022      	beq.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079f8:	d11d      	bne.n	8007a36 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80079fa:	4b36      	ldr	r3, [pc, #216]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80079fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a00:	0e1b      	lsrs	r3, r3, #24
 8007a02:	f003 030f 	and.w	r3, r3, #15
 8007a06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007a08:	4b32      	ldr	r3, [pc, #200]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a0e:	0f1b      	lsrs	r3, r3, #28
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	019a      	lsls	r2, r3, #6
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	041b      	lsls	r3, r3, #16
 8007a22:	431a      	orrs	r2, r3
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	061b      	lsls	r3, r3, #24
 8007a28:	431a      	orrs	r2, r3
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	071b      	lsls	r3, r3, #28
 8007a2e:	4929      	ldr	r1, [pc, #164]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a30:	4313      	orrs	r3, r2
 8007a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d028      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007a42:	4b24      	ldr	r3, [pc, #144]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a48:	0e1b      	lsrs	r3, r3, #24
 8007a4a:	f003 030f 	and.w	r3, r3, #15
 8007a4e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007a50:	4b20      	ldr	r3, [pc, #128]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a56:	0c1b      	lsrs	r3, r3, #16
 8007a58:	f003 0303 	and.w	r3, r3, #3
 8007a5c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	695b      	ldr	r3, [r3, #20]
 8007a62:	019a      	lsls	r2, r3, #6
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	041b      	lsls	r3, r3, #16
 8007a68:	431a      	orrs	r2, r3
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	061b      	lsls	r3, r3, #24
 8007a6e:	431a      	orrs	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	69db      	ldr	r3, [r3, #28]
 8007a74:	071b      	lsls	r3, r3, #28
 8007a76:	4917      	ldr	r1, [pc, #92]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007a7e:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8c:	4911      	ldr	r1, [pc, #68]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007a94:	4b0f      	ldr	r3, [pc, #60]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a0e      	ldr	r2, [pc, #56]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007a9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa0:	f7fc feb6 	bl	8004810 <HAL_GetTick>
 8007aa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007aa8:	f7fc feb2 	bl	8004810 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e007      	b.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007aba:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ac2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ac6:	d1ef      	bne.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007ac8:	2300      	movs	r3, #0
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	40023800 	.word	0x40023800

08007ad8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b084      	sub	sp, #16
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	60f8      	str	r0, [r7, #12]
 8007ae0:	60b9      	str	r1, [r7, #8]
 8007ae2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d101      	bne.n	8007aee <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007aea:	2301      	movs	r3, #1
 8007aec:	e038      	b.n	8007b60 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007af4:	b2db      	uxtb	r3, r3
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d106      	bne.n	8007b08 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007b02:	68f8      	ldr	r0, [r7, #12]
 8007b04:	f7fb fc88 	bl	8003418 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3308      	adds	r3, #8
 8007b10:	4619      	mov	r1, r3
 8007b12:	4610      	mov	r0, r2
 8007b14:	f000 ffc6 	bl	8008aa4 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6818      	ldr	r0, [r3, #0]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	461a      	mov	r2, r3
 8007b22:	68b9      	ldr	r1, [r7, #8]
 8007b24:	f001 f84e 	bl	8008bc4 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6858      	ldr	r0, [r3, #4]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	689a      	ldr	r2, [r3, #8]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	6879      	ldr	r1, [r7, #4]
 8007b36:	f001 f895 	bl	8008c64 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68fa      	ldr	r2, [r7, #12]
 8007b40:	6892      	ldr	r2, [r2, #8]
 8007b42:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	6892      	ldr	r2, [r2, #8]
 8007b4e:	f041 0101 	orr.w	r1, r1, #1
 8007b52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3710      	adds	r7, #16
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e049      	b.n	8007c0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d106      	bne.n	8007b94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f7fb fa72 	bl	8003078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2202      	movs	r2, #2
 8007b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	4610      	mov	r0, r2
 8007ba8:	f000 f8e8 	bl	8007d7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2201      	movs	r2, #1
 8007bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2201      	movs	r2, #1
 8007be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2201      	movs	r2, #1
 8007be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2201      	movs	r2, #1
 8007bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	2201      	movs	r2, #1
 8007bf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2201      	movs	r2, #1
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007c0c:	2300      	movs	r3, #0
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3708      	adds	r7, #8
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
	...

08007c18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b085      	sub	sp, #20
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d001      	beq.n	8007c30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	e04c      	b.n	8007cca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2202      	movs	r2, #2
 8007c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	4a26      	ldr	r2, [pc, #152]	; (8007cd8 <HAL_TIM_Base_Start+0xc0>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d022      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4a:	d01d      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	4a22      	ldr	r2, [pc, #136]	; (8007cdc <HAL_TIM_Base_Start+0xc4>)
 8007c52:	4293      	cmp	r3, r2
 8007c54:	d018      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a21      	ldr	r2, [pc, #132]	; (8007ce0 <HAL_TIM_Base_Start+0xc8>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d013      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a1f      	ldr	r2, [pc, #124]	; (8007ce4 <HAL_TIM_Base_Start+0xcc>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00e      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a1e      	ldr	r2, [pc, #120]	; (8007ce8 <HAL_TIM_Base_Start+0xd0>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d009      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a1c      	ldr	r2, [pc, #112]	; (8007cec <HAL_TIM_Base_Start+0xd4>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_TIM_Base_Start+0x70>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a1b      	ldr	r2, [pc, #108]	; (8007cf0 <HAL_TIM_Base_Start+0xd8>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d115      	bne.n	8007cb4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	4b19      	ldr	r3, [pc, #100]	; (8007cf4 <HAL_TIM_Base_Start+0xdc>)
 8007c90:	4013      	ands	r3, r2
 8007c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b06      	cmp	r3, #6
 8007c98:	d015      	beq.n	8007cc6 <HAL_TIM_Base_Start+0xae>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ca0:	d011      	beq.n	8007cc6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681a      	ldr	r2, [r3, #0]
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f042 0201 	orr.w	r2, r2, #1
 8007cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb2:	e008      	b.n	8007cc6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f042 0201 	orr.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]
 8007cc4:	e000      	b.n	8007cc8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cc8:	2300      	movs	r3, #0
}
 8007cca:	4618      	mov	r0, r3
 8007ccc:	3714      	adds	r7, #20
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	40010000 	.word	0x40010000
 8007cdc:	40000400 	.word	0x40000400
 8007ce0:	40000800 	.word	0x40000800
 8007ce4:	40000c00 	.word	0x40000c00
 8007ce8:	40010400 	.word	0x40010400
 8007cec:	40014000 	.word	0x40014000
 8007cf0:	40001800 	.word	0x40001800
 8007cf4:	00010007 	.word	0x00010007

08007cf8 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b082      	sub	sp, #8
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d101      	bne.n	8007d10 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e031      	b.n	8007d74 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2202      	movs	r2, #2
 8007d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007d20:	6839      	ldr	r1, [r7, #0]
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f8ca 	bl	8007ebc <TIM_SlaveTimer_SetConfig>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d009      	beq.n	8007d42 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e018      	b.n	8007d74 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68da      	ldr	r2, [r3, #12]
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007d50:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68da      	ldr	r2, [r3, #12]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007d60:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b085      	sub	sp, #20
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a40      	ldr	r2, [pc, #256]	; (8007e90 <TIM_Base_SetConfig+0x114>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d013      	beq.n	8007dbc <TIM_Base_SetConfig+0x40>
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d9a:	d00f      	beq.n	8007dbc <TIM_Base_SetConfig+0x40>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	4a3d      	ldr	r2, [pc, #244]	; (8007e94 <TIM_Base_SetConfig+0x118>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d00b      	beq.n	8007dbc <TIM_Base_SetConfig+0x40>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	4a3c      	ldr	r2, [pc, #240]	; (8007e98 <TIM_Base_SetConfig+0x11c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d007      	beq.n	8007dbc <TIM_Base_SetConfig+0x40>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a3b      	ldr	r2, [pc, #236]	; (8007e9c <TIM_Base_SetConfig+0x120>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d003      	beq.n	8007dbc <TIM_Base_SetConfig+0x40>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a3a      	ldr	r2, [pc, #232]	; (8007ea0 <TIM_Base_SetConfig+0x124>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d108      	bne.n	8007dce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	4313      	orrs	r3, r2
 8007dcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a2f      	ldr	r2, [pc, #188]	; (8007e90 <TIM_Base_SetConfig+0x114>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d02b      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ddc:	d027      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	4a2c      	ldr	r2, [pc, #176]	; (8007e94 <TIM_Base_SetConfig+0x118>)
 8007de2:	4293      	cmp	r3, r2
 8007de4:	d023      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a2b      	ldr	r2, [pc, #172]	; (8007e98 <TIM_Base_SetConfig+0x11c>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d01f      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	4a2a      	ldr	r2, [pc, #168]	; (8007e9c <TIM_Base_SetConfig+0x120>)
 8007df2:	4293      	cmp	r3, r2
 8007df4:	d01b      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	4a29      	ldr	r2, [pc, #164]	; (8007ea0 <TIM_Base_SetConfig+0x124>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d017      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	4a28      	ldr	r2, [pc, #160]	; (8007ea4 <TIM_Base_SetConfig+0x128>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d013      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	4a27      	ldr	r2, [pc, #156]	; (8007ea8 <TIM_Base_SetConfig+0x12c>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d00f      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4a26      	ldr	r2, [pc, #152]	; (8007eac <TIM_Base_SetConfig+0x130>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d00b      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <TIM_Base_SetConfig+0x134>)
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	d007      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	4a24      	ldr	r2, [pc, #144]	; (8007eb4 <TIM_Base_SetConfig+0x138>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d003      	beq.n	8007e2e <TIM_Base_SetConfig+0xb2>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	4a23      	ldr	r2, [pc, #140]	; (8007eb8 <TIM_Base_SetConfig+0x13c>)
 8007e2a:	4293      	cmp	r3, r2
 8007e2c:	d108      	bne.n	8007e40 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	68fa      	ldr	r2, [r7, #12]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	4a0a      	ldr	r2, [pc, #40]	; (8007e90 <TIM_Base_SetConfig+0x114>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d003      	beq.n	8007e74 <TIM_Base_SetConfig+0xf8>
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ea0 <TIM_Base_SetConfig+0x124>)
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d103      	bne.n	8007e7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	691a      	ldr	r2, [r3, #16]
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2201      	movs	r2, #1
 8007e80:	615a      	str	r2, [r3, #20]
}
 8007e82:	bf00      	nop
 8007e84:	3714      	adds	r7, #20
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
 8007e8e:	bf00      	nop
 8007e90:	40010000 	.word	0x40010000
 8007e94:	40000400 	.word	0x40000400
 8007e98:	40000800 	.word	0x40000800
 8007e9c:	40000c00 	.word	0x40000c00
 8007ea0:	40010400 	.word	0x40010400
 8007ea4:	40014000 	.word	0x40014000
 8007ea8:	40014400 	.word	0x40014400
 8007eac:	40014800 	.word	0x40014800
 8007eb0:	40001800 	.word	0x40001800
 8007eb4:	40001c00 	.word	0x40001c00
 8007eb8:	40002000 	.word	0x40002000

08007ebc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b086      	sub	sp, #24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	689b      	ldr	r3, [r3, #8]
 8007ed0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ed8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4b3e      	ldr	r3, [pc, #248]	; (8007fe0 <TIM_SlaveTimer_SetConfig+0x124>)
 8007ee8:	4013      	ands	r3, r2
 8007eea:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	693a      	ldr	r2, [r7, #16]
 8007efc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	2b70      	cmp	r3, #112	; 0x70
 8007f04:	d01a      	beq.n	8007f3c <TIM_SlaveTimer_SetConfig+0x80>
 8007f06:	2b70      	cmp	r3, #112	; 0x70
 8007f08:	d860      	bhi.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
 8007f0a:	2b60      	cmp	r3, #96	; 0x60
 8007f0c:	d054      	beq.n	8007fb8 <TIM_SlaveTimer_SetConfig+0xfc>
 8007f0e:	2b60      	cmp	r3, #96	; 0x60
 8007f10:	d85c      	bhi.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
 8007f12:	2b50      	cmp	r3, #80	; 0x50
 8007f14:	d046      	beq.n	8007fa4 <TIM_SlaveTimer_SetConfig+0xe8>
 8007f16:	2b50      	cmp	r3, #80	; 0x50
 8007f18:	d858      	bhi.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
 8007f1a:	2b40      	cmp	r3, #64	; 0x40
 8007f1c:	d019      	beq.n	8007f52 <TIM_SlaveTimer_SetConfig+0x96>
 8007f1e:	2b40      	cmp	r3, #64	; 0x40
 8007f20:	d854      	bhi.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
 8007f22:	2b30      	cmp	r3, #48	; 0x30
 8007f24:	d055      	beq.n	8007fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f26:	2b30      	cmp	r3, #48	; 0x30
 8007f28:	d850      	bhi.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
 8007f2a:	2b20      	cmp	r3, #32
 8007f2c:	d051      	beq.n	8007fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f2e:	2b20      	cmp	r3, #32
 8007f30:	d84c      	bhi.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d04d      	beq.n	8007fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f36:	2b10      	cmp	r3, #16
 8007f38:	d04b      	beq.n	8007fd2 <TIM_SlaveTimer_SetConfig+0x116>
 8007f3a:	e047      	b.n	8007fcc <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007f4c:	f000 f8a9 	bl	80080a2 <TIM_ETR_SetConfig>
      break;
 8007f50:	e040      	b.n	8007fd4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2b05      	cmp	r3, #5
 8007f58:	d101      	bne.n	8007f5e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e03b      	b.n	8007fd6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	6a1b      	ldr	r3, [r3, #32]
 8007f64:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a1a      	ldr	r2, [r3, #32]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0201 	bic.w	r2, r2, #1
 8007f74:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699b      	ldr	r3, [r3, #24]
 8007f7c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007f84:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	68ba      	ldr	r2, [r7, #8]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	68fa      	ldr	r2, [r7, #12]
 8007fa0:	621a      	str	r2, [r3, #32]
      break;
 8007fa2:	e017      	b.n	8007fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f000 f817 	bl	8007fe4 <TIM_TI1_ConfigInputStage>
      break;
 8007fb6:	e00d      	b.n	8007fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007fc4:	461a      	mov	r2, r3
 8007fc6:	f000 f83c 	bl	8008042 <TIM_TI2_ConfigInputStage>
      break;
 8007fca:	e003      	b.n	8007fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	75fb      	strb	r3, [r7, #23]
      break;
 8007fd0:	e000      	b.n	8007fd4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007fd2:	bf00      	nop
  }

  return status;
 8007fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3718      	adds	r7, #24
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	fffefff8 	.word	0xfffefff8

08007fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	60b9      	str	r1, [r7, #8]
 8007fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	6a1b      	ldr	r3, [r3, #32]
 8007ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6a1b      	ldr	r3, [r3, #32]
 8007ffa:	f023 0201 	bic.w	r2, r3, #1
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	699b      	ldr	r3, [r3, #24]
 8008006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800800e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	011b      	lsls	r3, r3, #4
 8008014:	693a      	ldr	r2, [r7, #16]
 8008016:	4313      	orrs	r3, r2
 8008018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	f023 030a 	bic.w	r3, r3, #10
 8008020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008022:	697a      	ldr	r2, [r7, #20]
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4313      	orrs	r3, r2
 8008028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	693a      	ldr	r2, [r7, #16]
 800802e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	621a      	str	r2, [r3, #32]
}
 8008036:	bf00      	nop
 8008038:	371c      	adds	r7, #28
 800803a:	46bd      	mov	sp, r7
 800803c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008040:	4770      	bx	lr

08008042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008042:	b480      	push	{r7}
 8008044:	b087      	sub	sp, #28
 8008046:	af00      	add	r7, sp, #0
 8008048:	60f8      	str	r0, [r7, #12]
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f023 0210 	bic.w	r2, r3, #16
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	699b      	ldr	r3, [r3, #24]
 800805e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6a1b      	ldr	r3, [r3, #32]
 8008064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800806c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	031b      	lsls	r3, r3, #12
 8008072:	697a      	ldr	r2, [r7, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008078:	693b      	ldr	r3, [r7, #16]
 800807a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800807e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	011b      	lsls	r3, r3, #4
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	4313      	orrs	r3, r2
 8008088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	621a      	str	r2, [r3, #32]
}
 8008096:	bf00      	nop
 8008098:	371c      	adds	r7, #28
 800809a:	46bd      	mov	sp, r7
 800809c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a0:	4770      	bx	lr

080080a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080a2:	b480      	push	{r7}
 80080a4:	b087      	sub	sp, #28
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	60f8      	str	r0, [r7, #12]
 80080aa:	60b9      	str	r1, [r7, #8]
 80080ac:	607a      	str	r2, [r7, #4]
 80080ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	021a      	lsls	r2, r3, #8
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	431a      	orrs	r2, r3
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	4313      	orrs	r3, r2
 80080ca:	697a      	ldr	r2, [r7, #20]
 80080cc:	4313      	orrs	r3, r2
 80080ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	609a      	str	r2, [r3, #8]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr
	...

080080e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b085      	sub	sp, #20
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
 80080ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d101      	bne.n	80080fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80080f8:	2302      	movs	r3, #2
 80080fa:	e06d      	b.n	80081d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2202      	movs	r2, #2
 8008108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a30      	ldr	r2, [pc, #192]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d004      	beq.n	8008130 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4a2f      	ldr	r2, [pc, #188]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d108      	bne.n	8008142 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008136:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	68fa      	ldr	r2, [r7, #12]
 800813e:	4313      	orrs	r3, r2
 8008140:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	68fa      	ldr	r2, [r7, #12]
 8008150:	4313      	orrs	r3, r2
 8008152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68fa      	ldr	r2, [r7, #12]
 800815a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a20      	ldr	r2, [pc, #128]	; (80081e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d022      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800816e:	d01d      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a1d      	ldr	r2, [pc, #116]	; (80081ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d018      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d013      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d00e      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a15      	ldr	r2, [pc, #84]	; (80081e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d009      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a16      	ldr	r2, [pc, #88]	; (80081f8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d004      	beq.n	80081ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a15      	ldr	r2, [pc, #84]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d10c      	bne.n	80081c6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081b2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	4313      	orrs	r3, r2
 80081bc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	2200      	movs	r2, #0
 80081d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081d6:	2300      	movs	r3, #0
}
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40010400 	.word	0x40010400
 80081ec:	40000400 	.word	0x40000400
 80081f0:	40000800 	.word	0x40000800
 80081f4:	40000c00 	.word	0x40000c00
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40001800 	.word	0x40001800

08008200 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b082      	sub	sp, #8
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800820e:	2301      	movs	r3, #1
 8008210:	e040      	b.n	8008294 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008216:	2b00      	cmp	r3, #0
 8008218:	d106      	bne.n	8008228 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f7fa ffb0 	bl	8003188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2224      	movs	r2, #36	; 0x24
 800822c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f022 0201 	bic.w	r2, r2, #1
 800823c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f82c 	bl	800829c <UART_SetConfig>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d101      	bne.n	800824e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	e022      	b.n	8008294 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008252:	2b00      	cmp	r3, #0
 8008254:	d002      	beq.n	800825c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 fa84 	bl	8008764 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	685a      	ldr	r2, [r3, #4]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800826a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800827a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	681a      	ldr	r2, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	f042 0201 	orr.w	r2, r2, #1
 800828a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fb0b 	bl	80088a8 <UART_CheckIdleState>
 8008292:	4603      	mov	r3, r0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3708      	adds	r7, #8
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b088      	sub	sp, #32
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	689a      	ldr	r2, [r3, #8]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	431a      	orrs	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	695b      	ldr	r3, [r3, #20]
 80082b6:	431a      	orrs	r2, r3
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	4313      	orrs	r3, r2
 80082be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	4ba6      	ldr	r3, [pc, #664]	; (8008560 <UART_SetConfig+0x2c4>)
 80082c8:	4013      	ands	r3, r2
 80082ca:	687a      	ldr	r2, [r7, #4]
 80082cc:	6812      	ldr	r2, [r2, #0]
 80082ce:	6979      	ldr	r1, [r7, #20]
 80082d0:	430b      	orrs	r3, r1
 80082d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6a1b      	ldr	r3, [r3, #32]
 80082f4:	697a      	ldr	r2, [r7, #20]
 80082f6:	4313      	orrs	r3, r2
 80082f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	689b      	ldr	r3, [r3, #8]
 8008300:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	430a      	orrs	r2, r1
 800830c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a94      	ldr	r2, [pc, #592]	; (8008564 <UART_SetConfig+0x2c8>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d120      	bne.n	800835a <UART_SetConfig+0xbe>
 8008318:	4b93      	ldr	r3, [pc, #588]	; (8008568 <UART_SetConfig+0x2cc>)
 800831a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800831e:	f003 0303 	and.w	r3, r3, #3
 8008322:	2b03      	cmp	r3, #3
 8008324:	d816      	bhi.n	8008354 <UART_SetConfig+0xb8>
 8008326:	a201      	add	r2, pc, #4	; (adr r2, 800832c <UART_SetConfig+0x90>)
 8008328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800832c:	0800833d 	.word	0x0800833d
 8008330:	08008349 	.word	0x08008349
 8008334:	08008343 	.word	0x08008343
 8008338:	0800834f 	.word	0x0800834f
 800833c:	2301      	movs	r3, #1
 800833e:	77fb      	strb	r3, [r7, #31]
 8008340:	e150      	b.n	80085e4 <UART_SetConfig+0x348>
 8008342:	2302      	movs	r3, #2
 8008344:	77fb      	strb	r3, [r7, #31]
 8008346:	e14d      	b.n	80085e4 <UART_SetConfig+0x348>
 8008348:	2304      	movs	r3, #4
 800834a:	77fb      	strb	r3, [r7, #31]
 800834c:	e14a      	b.n	80085e4 <UART_SetConfig+0x348>
 800834e:	2308      	movs	r3, #8
 8008350:	77fb      	strb	r3, [r7, #31]
 8008352:	e147      	b.n	80085e4 <UART_SetConfig+0x348>
 8008354:	2310      	movs	r3, #16
 8008356:	77fb      	strb	r3, [r7, #31]
 8008358:	e144      	b.n	80085e4 <UART_SetConfig+0x348>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a83      	ldr	r2, [pc, #524]	; (800856c <UART_SetConfig+0x2d0>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d132      	bne.n	80083ca <UART_SetConfig+0x12e>
 8008364:	4b80      	ldr	r3, [pc, #512]	; (8008568 <UART_SetConfig+0x2cc>)
 8008366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836a:	f003 030c 	and.w	r3, r3, #12
 800836e:	2b0c      	cmp	r3, #12
 8008370:	d828      	bhi.n	80083c4 <UART_SetConfig+0x128>
 8008372:	a201      	add	r2, pc, #4	; (adr r2, 8008378 <UART_SetConfig+0xdc>)
 8008374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008378:	080083ad 	.word	0x080083ad
 800837c:	080083c5 	.word	0x080083c5
 8008380:	080083c5 	.word	0x080083c5
 8008384:	080083c5 	.word	0x080083c5
 8008388:	080083b9 	.word	0x080083b9
 800838c:	080083c5 	.word	0x080083c5
 8008390:	080083c5 	.word	0x080083c5
 8008394:	080083c5 	.word	0x080083c5
 8008398:	080083b3 	.word	0x080083b3
 800839c:	080083c5 	.word	0x080083c5
 80083a0:	080083c5 	.word	0x080083c5
 80083a4:	080083c5 	.word	0x080083c5
 80083a8:	080083bf 	.word	0x080083bf
 80083ac:	2300      	movs	r3, #0
 80083ae:	77fb      	strb	r3, [r7, #31]
 80083b0:	e118      	b.n	80085e4 <UART_SetConfig+0x348>
 80083b2:	2302      	movs	r3, #2
 80083b4:	77fb      	strb	r3, [r7, #31]
 80083b6:	e115      	b.n	80085e4 <UART_SetConfig+0x348>
 80083b8:	2304      	movs	r3, #4
 80083ba:	77fb      	strb	r3, [r7, #31]
 80083bc:	e112      	b.n	80085e4 <UART_SetConfig+0x348>
 80083be:	2308      	movs	r3, #8
 80083c0:	77fb      	strb	r3, [r7, #31]
 80083c2:	e10f      	b.n	80085e4 <UART_SetConfig+0x348>
 80083c4:	2310      	movs	r3, #16
 80083c6:	77fb      	strb	r3, [r7, #31]
 80083c8:	e10c      	b.n	80085e4 <UART_SetConfig+0x348>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a68      	ldr	r2, [pc, #416]	; (8008570 <UART_SetConfig+0x2d4>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d120      	bne.n	8008416 <UART_SetConfig+0x17a>
 80083d4:	4b64      	ldr	r3, [pc, #400]	; (8008568 <UART_SetConfig+0x2cc>)
 80083d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80083de:	2b30      	cmp	r3, #48	; 0x30
 80083e0:	d013      	beq.n	800840a <UART_SetConfig+0x16e>
 80083e2:	2b30      	cmp	r3, #48	; 0x30
 80083e4:	d814      	bhi.n	8008410 <UART_SetConfig+0x174>
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d009      	beq.n	80083fe <UART_SetConfig+0x162>
 80083ea:	2b20      	cmp	r3, #32
 80083ec:	d810      	bhi.n	8008410 <UART_SetConfig+0x174>
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d002      	beq.n	80083f8 <UART_SetConfig+0x15c>
 80083f2:	2b10      	cmp	r3, #16
 80083f4:	d006      	beq.n	8008404 <UART_SetConfig+0x168>
 80083f6:	e00b      	b.n	8008410 <UART_SetConfig+0x174>
 80083f8:	2300      	movs	r3, #0
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	e0f2      	b.n	80085e4 <UART_SetConfig+0x348>
 80083fe:	2302      	movs	r3, #2
 8008400:	77fb      	strb	r3, [r7, #31]
 8008402:	e0ef      	b.n	80085e4 <UART_SetConfig+0x348>
 8008404:	2304      	movs	r3, #4
 8008406:	77fb      	strb	r3, [r7, #31]
 8008408:	e0ec      	b.n	80085e4 <UART_SetConfig+0x348>
 800840a:	2308      	movs	r3, #8
 800840c:	77fb      	strb	r3, [r7, #31]
 800840e:	e0e9      	b.n	80085e4 <UART_SetConfig+0x348>
 8008410:	2310      	movs	r3, #16
 8008412:	77fb      	strb	r3, [r7, #31]
 8008414:	e0e6      	b.n	80085e4 <UART_SetConfig+0x348>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a56      	ldr	r2, [pc, #344]	; (8008574 <UART_SetConfig+0x2d8>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d120      	bne.n	8008462 <UART_SetConfig+0x1c6>
 8008420:	4b51      	ldr	r3, [pc, #324]	; (8008568 <UART_SetConfig+0x2cc>)
 8008422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008426:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800842a:	2bc0      	cmp	r3, #192	; 0xc0
 800842c:	d013      	beq.n	8008456 <UART_SetConfig+0x1ba>
 800842e:	2bc0      	cmp	r3, #192	; 0xc0
 8008430:	d814      	bhi.n	800845c <UART_SetConfig+0x1c0>
 8008432:	2b80      	cmp	r3, #128	; 0x80
 8008434:	d009      	beq.n	800844a <UART_SetConfig+0x1ae>
 8008436:	2b80      	cmp	r3, #128	; 0x80
 8008438:	d810      	bhi.n	800845c <UART_SetConfig+0x1c0>
 800843a:	2b00      	cmp	r3, #0
 800843c:	d002      	beq.n	8008444 <UART_SetConfig+0x1a8>
 800843e:	2b40      	cmp	r3, #64	; 0x40
 8008440:	d006      	beq.n	8008450 <UART_SetConfig+0x1b4>
 8008442:	e00b      	b.n	800845c <UART_SetConfig+0x1c0>
 8008444:	2300      	movs	r3, #0
 8008446:	77fb      	strb	r3, [r7, #31]
 8008448:	e0cc      	b.n	80085e4 <UART_SetConfig+0x348>
 800844a:	2302      	movs	r3, #2
 800844c:	77fb      	strb	r3, [r7, #31]
 800844e:	e0c9      	b.n	80085e4 <UART_SetConfig+0x348>
 8008450:	2304      	movs	r3, #4
 8008452:	77fb      	strb	r3, [r7, #31]
 8008454:	e0c6      	b.n	80085e4 <UART_SetConfig+0x348>
 8008456:	2308      	movs	r3, #8
 8008458:	77fb      	strb	r3, [r7, #31]
 800845a:	e0c3      	b.n	80085e4 <UART_SetConfig+0x348>
 800845c:	2310      	movs	r3, #16
 800845e:	77fb      	strb	r3, [r7, #31]
 8008460:	e0c0      	b.n	80085e4 <UART_SetConfig+0x348>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a44      	ldr	r2, [pc, #272]	; (8008578 <UART_SetConfig+0x2dc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d125      	bne.n	80084b8 <UART_SetConfig+0x21c>
 800846c:	4b3e      	ldr	r3, [pc, #248]	; (8008568 <UART_SetConfig+0x2cc>)
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008472:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008476:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800847a:	d017      	beq.n	80084ac <UART_SetConfig+0x210>
 800847c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008480:	d817      	bhi.n	80084b2 <UART_SetConfig+0x216>
 8008482:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008486:	d00b      	beq.n	80084a0 <UART_SetConfig+0x204>
 8008488:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800848c:	d811      	bhi.n	80084b2 <UART_SetConfig+0x216>
 800848e:	2b00      	cmp	r3, #0
 8008490:	d003      	beq.n	800849a <UART_SetConfig+0x1fe>
 8008492:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008496:	d006      	beq.n	80084a6 <UART_SetConfig+0x20a>
 8008498:	e00b      	b.n	80084b2 <UART_SetConfig+0x216>
 800849a:	2300      	movs	r3, #0
 800849c:	77fb      	strb	r3, [r7, #31]
 800849e:	e0a1      	b.n	80085e4 <UART_SetConfig+0x348>
 80084a0:	2302      	movs	r3, #2
 80084a2:	77fb      	strb	r3, [r7, #31]
 80084a4:	e09e      	b.n	80085e4 <UART_SetConfig+0x348>
 80084a6:	2304      	movs	r3, #4
 80084a8:	77fb      	strb	r3, [r7, #31]
 80084aa:	e09b      	b.n	80085e4 <UART_SetConfig+0x348>
 80084ac:	2308      	movs	r3, #8
 80084ae:	77fb      	strb	r3, [r7, #31]
 80084b0:	e098      	b.n	80085e4 <UART_SetConfig+0x348>
 80084b2:	2310      	movs	r3, #16
 80084b4:	77fb      	strb	r3, [r7, #31]
 80084b6:	e095      	b.n	80085e4 <UART_SetConfig+0x348>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a2f      	ldr	r2, [pc, #188]	; (800857c <UART_SetConfig+0x2e0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d125      	bne.n	800850e <UART_SetConfig+0x272>
 80084c2:	4b29      	ldr	r3, [pc, #164]	; (8008568 <UART_SetConfig+0x2cc>)
 80084c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80084cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d0:	d017      	beq.n	8008502 <UART_SetConfig+0x266>
 80084d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80084d6:	d817      	bhi.n	8008508 <UART_SetConfig+0x26c>
 80084d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084dc:	d00b      	beq.n	80084f6 <UART_SetConfig+0x25a>
 80084de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084e2:	d811      	bhi.n	8008508 <UART_SetConfig+0x26c>
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d003      	beq.n	80084f0 <UART_SetConfig+0x254>
 80084e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ec:	d006      	beq.n	80084fc <UART_SetConfig+0x260>
 80084ee:	e00b      	b.n	8008508 <UART_SetConfig+0x26c>
 80084f0:	2301      	movs	r3, #1
 80084f2:	77fb      	strb	r3, [r7, #31]
 80084f4:	e076      	b.n	80085e4 <UART_SetConfig+0x348>
 80084f6:	2302      	movs	r3, #2
 80084f8:	77fb      	strb	r3, [r7, #31]
 80084fa:	e073      	b.n	80085e4 <UART_SetConfig+0x348>
 80084fc:	2304      	movs	r3, #4
 80084fe:	77fb      	strb	r3, [r7, #31]
 8008500:	e070      	b.n	80085e4 <UART_SetConfig+0x348>
 8008502:	2308      	movs	r3, #8
 8008504:	77fb      	strb	r3, [r7, #31]
 8008506:	e06d      	b.n	80085e4 <UART_SetConfig+0x348>
 8008508:	2310      	movs	r3, #16
 800850a:	77fb      	strb	r3, [r7, #31]
 800850c:	e06a      	b.n	80085e4 <UART_SetConfig+0x348>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a1b      	ldr	r2, [pc, #108]	; (8008580 <UART_SetConfig+0x2e4>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d138      	bne.n	800858a <UART_SetConfig+0x2ee>
 8008518:	4b13      	ldr	r3, [pc, #76]	; (8008568 <UART_SetConfig+0x2cc>)
 800851a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800851e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008522:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008526:	d017      	beq.n	8008558 <UART_SetConfig+0x2bc>
 8008528:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800852c:	d82a      	bhi.n	8008584 <UART_SetConfig+0x2e8>
 800852e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008532:	d00b      	beq.n	800854c <UART_SetConfig+0x2b0>
 8008534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008538:	d824      	bhi.n	8008584 <UART_SetConfig+0x2e8>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d003      	beq.n	8008546 <UART_SetConfig+0x2aa>
 800853e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008542:	d006      	beq.n	8008552 <UART_SetConfig+0x2b6>
 8008544:	e01e      	b.n	8008584 <UART_SetConfig+0x2e8>
 8008546:	2300      	movs	r3, #0
 8008548:	77fb      	strb	r3, [r7, #31]
 800854a:	e04b      	b.n	80085e4 <UART_SetConfig+0x348>
 800854c:	2302      	movs	r3, #2
 800854e:	77fb      	strb	r3, [r7, #31]
 8008550:	e048      	b.n	80085e4 <UART_SetConfig+0x348>
 8008552:	2304      	movs	r3, #4
 8008554:	77fb      	strb	r3, [r7, #31]
 8008556:	e045      	b.n	80085e4 <UART_SetConfig+0x348>
 8008558:	2308      	movs	r3, #8
 800855a:	77fb      	strb	r3, [r7, #31]
 800855c:	e042      	b.n	80085e4 <UART_SetConfig+0x348>
 800855e:	bf00      	nop
 8008560:	efff69f3 	.word	0xefff69f3
 8008564:	40011000 	.word	0x40011000
 8008568:	40023800 	.word	0x40023800
 800856c:	40004400 	.word	0x40004400
 8008570:	40004800 	.word	0x40004800
 8008574:	40004c00 	.word	0x40004c00
 8008578:	40005000 	.word	0x40005000
 800857c:	40011400 	.word	0x40011400
 8008580:	40007800 	.word	0x40007800
 8008584:	2310      	movs	r3, #16
 8008586:	77fb      	strb	r3, [r7, #31]
 8008588:	e02c      	b.n	80085e4 <UART_SetConfig+0x348>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	4a72      	ldr	r2, [pc, #456]	; (8008758 <UART_SetConfig+0x4bc>)
 8008590:	4293      	cmp	r3, r2
 8008592:	d125      	bne.n	80085e0 <UART_SetConfig+0x344>
 8008594:	4b71      	ldr	r3, [pc, #452]	; (800875c <UART_SetConfig+0x4c0>)
 8008596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800859a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800859e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085a2:	d017      	beq.n	80085d4 <UART_SetConfig+0x338>
 80085a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80085a8:	d817      	bhi.n	80085da <UART_SetConfig+0x33e>
 80085aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ae:	d00b      	beq.n	80085c8 <UART_SetConfig+0x32c>
 80085b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085b4:	d811      	bhi.n	80085da <UART_SetConfig+0x33e>
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d003      	beq.n	80085c2 <UART_SetConfig+0x326>
 80085ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085be:	d006      	beq.n	80085ce <UART_SetConfig+0x332>
 80085c0:	e00b      	b.n	80085da <UART_SetConfig+0x33e>
 80085c2:	2300      	movs	r3, #0
 80085c4:	77fb      	strb	r3, [r7, #31]
 80085c6:	e00d      	b.n	80085e4 <UART_SetConfig+0x348>
 80085c8:	2302      	movs	r3, #2
 80085ca:	77fb      	strb	r3, [r7, #31]
 80085cc:	e00a      	b.n	80085e4 <UART_SetConfig+0x348>
 80085ce:	2304      	movs	r3, #4
 80085d0:	77fb      	strb	r3, [r7, #31]
 80085d2:	e007      	b.n	80085e4 <UART_SetConfig+0x348>
 80085d4:	2308      	movs	r3, #8
 80085d6:	77fb      	strb	r3, [r7, #31]
 80085d8:	e004      	b.n	80085e4 <UART_SetConfig+0x348>
 80085da:	2310      	movs	r3, #16
 80085dc:	77fb      	strb	r3, [r7, #31]
 80085de:	e001      	b.n	80085e4 <UART_SetConfig+0x348>
 80085e0:	2310      	movs	r3, #16
 80085e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085ec:	d15b      	bne.n	80086a6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80085ee:	7ffb      	ldrb	r3, [r7, #31]
 80085f0:	2b08      	cmp	r3, #8
 80085f2:	d828      	bhi.n	8008646 <UART_SetConfig+0x3aa>
 80085f4:	a201      	add	r2, pc, #4	; (adr r2, 80085fc <UART_SetConfig+0x360>)
 80085f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085fa:	bf00      	nop
 80085fc:	08008621 	.word	0x08008621
 8008600:	08008629 	.word	0x08008629
 8008604:	08008631 	.word	0x08008631
 8008608:	08008647 	.word	0x08008647
 800860c:	08008637 	.word	0x08008637
 8008610:	08008647 	.word	0x08008647
 8008614:	08008647 	.word	0x08008647
 8008618:	08008647 	.word	0x08008647
 800861c:	0800863f 	.word	0x0800863f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008620:	f7fe fe42 	bl	80072a8 <HAL_RCC_GetPCLK1Freq>
 8008624:	61b8      	str	r0, [r7, #24]
        break;
 8008626:	e013      	b.n	8008650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008628:	f7fe fe52 	bl	80072d0 <HAL_RCC_GetPCLK2Freq>
 800862c:	61b8      	str	r0, [r7, #24]
        break;
 800862e:	e00f      	b.n	8008650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008630:	4b4b      	ldr	r3, [pc, #300]	; (8008760 <UART_SetConfig+0x4c4>)
 8008632:	61bb      	str	r3, [r7, #24]
        break;
 8008634:	e00c      	b.n	8008650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008636:	f7fe fd27 	bl	8007088 <HAL_RCC_GetSysClockFreq>
 800863a:	61b8      	str	r0, [r7, #24]
        break;
 800863c:	e008      	b.n	8008650 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800863e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008642:	61bb      	str	r3, [r7, #24]
        break;
 8008644:	e004      	b.n	8008650 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	77bb      	strb	r3, [r7, #30]
        break;
 800864e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d074      	beq.n	8008740 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	005a      	lsls	r2, r3, #1
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	085b      	lsrs	r3, r3, #1
 8008660:	441a      	add	r2, r3
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	fbb2 f3f3 	udiv	r3, r2, r3
 800866a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	2b0f      	cmp	r3, #15
 8008670:	d916      	bls.n	80086a0 <UART_SetConfig+0x404>
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008678:	d212      	bcs.n	80086a0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	b29b      	uxth	r3, r3
 800867e:	f023 030f 	bic.w	r3, r3, #15
 8008682:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008684:	693b      	ldr	r3, [r7, #16]
 8008686:	085b      	lsrs	r3, r3, #1
 8008688:	b29b      	uxth	r3, r3
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	b29a      	uxth	r2, r3
 8008690:	89fb      	ldrh	r3, [r7, #14]
 8008692:	4313      	orrs	r3, r2
 8008694:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	89fa      	ldrh	r2, [r7, #14]
 800869c:	60da      	str	r2, [r3, #12]
 800869e:	e04f      	b.n	8008740 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80086a0:	2301      	movs	r3, #1
 80086a2:	77bb      	strb	r3, [r7, #30]
 80086a4:	e04c      	b.n	8008740 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80086a6:	7ffb      	ldrb	r3, [r7, #31]
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d828      	bhi.n	80086fe <UART_SetConfig+0x462>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x418>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086e1 	.word	0x080086e1
 80086bc:	080086e9 	.word	0x080086e9
 80086c0:	080086ff 	.word	0x080086ff
 80086c4:	080086ef 	.word	0x080086ef
 80086c8:	080086ff 	.word	0x080086ff
 80086cc:	080086ff 	.word	0x080086ff
 80086d0:	080086ff 	.word	0x080086ff
 80086d4:	080086f7 	.word	0x080086f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fe fde6 	bl	80072a8 <HAL_RCC_GetPCLK1Freq>
 80086dc:	61b8      	str	r0, [r7, #24]
        break;
 80086de:	e013      	b.n	8008708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e0:	f7fe fdf6 	bl	80072d0 <HAL_RCC_GetPCLK2Freq>
 80086e4:	61b8      	str	r0, [r7, #24]
        break;
 80086e6:	e00f      	b.n	8008708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e8:	4b1d      	ldr	r3, [pc, #116]	; (8008760 <UART_SetConfig+0x4c4>)
 80086ea:	61bb      	str	r3, [r7, #24]
        break;
 80086ec:	e00c      	b.n	8008708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086ee:	f7fe fccb 	bl	8007088 <HAL_RCC_GetSysClockFreq>
 80086f2:	61b8      	str	r0, [r7, #24]
        break;
 80086f4:	e008      	b.n	8008708 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086fa:	61bb      	str	r3, [r7, #24]
        break;
 80086fc:	e004      	b.n	8008708 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80086fe:	2300      	movs	r3, #0
 8008700:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008702:	2301      	movs	r3, #1
 8008704:	77bb      	strb	r3, [r7, #30]
        break;
 8008706:	bf00      	nop
    }

    if (pclk != 0U)
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d018      	beq.n	8008740 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	085a      	lsrs	r2, r3, #1
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	441a      	add	r2, r3
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008720:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	2b0f      	cmp	r3, #15
 8008726:	d909      	bls.n	800873c <UART_SetConfig+0x4a0>
 8008728:	693b      	ldr	r3, [r7, #16]
 800872a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800872e:	d205      	bcs.n	800873c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	b29a      	uxth	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	60da      	str	r2, [r3, #12]
 800873a:	e001      	b.n	8008740 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800874c:	7fbb      	ldrb	r3, [r7, #30]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	40007c00 	.word	0x40007c00
 800875c:	40023800 	.word	0x40023800
 8008760:	00f42400 	.word	0x00f42400

08008764 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008770:	f003 0301 	and.w	r3, r3, #1
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	430a      	orrs	r2, r1
 800878c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008792:	f003 0302 	and.w	r3, r3, #2
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	430a      	orrs	r2, r1
 80087ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087b4:	f003 0304 	and.w	r3, r3, #4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	430a      	orrs	r2, r1
 80087d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087d6:	f003 0308 	and.w	r3, r3, #8
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	685b      	ldr	r3, [r3, #4]
 80087e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	430a      	orrs	r2, r1
 80087f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	f003 0310 	and.w	r3, r3, #16
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	430a      	orrs	r2, r1
 8008814:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800881a:	f003 0320 	and.w	r3, r3, #32
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	689b      	ldr	r3, [r3, #8]
 8008828:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800883c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008840:	2b00      	cmp	r3, #0
 8008842:	d01a      	beq.n	800887a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	430a      	orrs	r2, r1
 8008858:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008862:	d10a      	bne.n	800887a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	685b      	ldr	r3, [r3, #4]
 800886a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	430a      	orrs	r2, r1
 8008878:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800887e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008882:	2b00      	cmp	r3, #0
 8008884:	d00a      	beq.n	800889c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	685b      	ldr	r3, [r3, #4]
 800888c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	430a      	orrs	r2, r1
 800889a:	605a      	str	r2, [r3, #4]
  }
}
 800889c:	bf00      	nop
 800889e:	370c      	adds	r7, #12
 80088a0:	46bd      	mov	sp, r7
 80088a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a6:	4770      	bx	lr

080088a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b086      	sub	sp, #24
 80088ac:	af02      	add	r7, sp, #8
 80088ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2200      	movs	r2, #0
 80088b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b8:	f7fb ffaa 	bl	8004810 <HAL_GetTick>
 80088bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0308 	and.w	r3, r3, #8
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d10e      	bne.n	80088ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	2200      	movs	r2, #0
 80088d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 f81b 	bl	8008916 <UART_WaitOnFlagUntilTimeout>
 80088e0:	4603      	mov	r3, r0
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e011      	b.n	800890e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2220      	movs	r2, #32
 80088ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b09c      	sub	sp, #112	; 0x70
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	603b      	str	r3, [r7, #0]
 8008922:	4613      	mov	r3, r2
 8008924:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008926:	e0a7      	b.n	8008a78 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008928:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800892a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892e:	f000 80a3 	beq.w	8008a78 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008932:	f7fb ff6d 	bl	8004810 <HAL_GetTick>
 8008936:	4602      	mov	r2, r0
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	1ad3      	subs	r3, r2, r3
 800893c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800893e:	429a      	cmp	r2, r3
 8008940:	d302      	bcc.n	8008948 <UART_WaitOnFlagUntilTimeout+0x32>
 8008942:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008944:	2b00      	cmp	r3, #0
 8008946:	d13f      	bne.n	80089c8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800894e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008950:	e853 3f00 	ldrex	r3, [r3]
 8008954:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008958:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800895c:	667b      	str	r3, [r7, #100]	; 0x64
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008966:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008968:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800896c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800896e:	e841 2300 	strex	r3, r2, [r1]
 8008972:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1e6      	bne.n	8008948 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3308      	adds	r3, #8
 8008980:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008984:	e853 3f00 	ldrex	r3, [r3]
 8008988:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800898a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800898c:	f023 0301 	bic.w	r3, r3, #1
 8008990:	663b      	str	r3, [r7, #96]	; 0x60
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	3308      	adds	r3, #8
 8008998:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800899a:	64ba      	str	r2, [r7, #72]	; 0x48
 800899c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800899e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089a2:	e841 2300 	strex	r3, r2, [r1]
 80089a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1e5      	bne.n	800897a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2220      	movs	r2, #32
 80089b2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2220      	movs	r2, #32
 80089b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2200      	movs	r2, #0
 80089c0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e068      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 0304 	and.w	r3, r3, #4
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d050      	beq.n	8008a78 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69db      	ldr	r3, [r3, #28]
 80089dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089e4:	d148      	bne.n	8008a78 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089ee:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f8:	e853 3f00 	ldrex	r3, [r3]
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a04:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	461a      	mov	r2, r3
 8008a0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a0e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a10:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a16:	e841 2300 	strex	r3, r2, [r1]
 8008a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d1e6      	bne.n	80089f0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	3308      	adds	r3, #8
 8008a28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	e853 3f00 	ldrex	r3, [r3]
 8008a30:	613b      	str	r3, [r7, #16]
   return(result);
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	f023 0301 	bic.w	r3, r3, #1
 8008a38:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a42:	623a      	str	r2, [r7, #32]
 8008a44:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a46:	69f9      	ldr	r1, [r7, #28]
 8008a48:	6a3a      	ldr	r2, [r7, #32]
 8008a4a:	e841 2300 	strex	r3, r2, [r1]
 8008a4e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d1e5      	bne.n	8008a22 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2220      	movs	r2, #32
 8008a5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2220      	movs	r2, #32
 8008a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008a74:	2303      	movs	r3, #3
 8008a76:	e010      	b.n	8008a9a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	69da      	ldr	r2, [r3, #28]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	4013      	ands	r3, r2
 8008a82:	68ba      	ldr	r2, [r7, #8]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	bf0c      	ite	eq
 8008a88:	2301      	moveq	r3, #1
 8008a8a:	2300      	movne	r3, #0
 8008a8c:	b2db      	uxtb	r3, r3
 8008a8e:	461a      	mov	r2, r3
 8008a90:	79fb      	ldrb	r3, [r7, #7]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	f43f af48 	beq.w	8008928 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3770      	adds	r7, #112	; 0x70
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b087      	sub	sp, #28
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	681a      	ldr	r2, [r3, #0]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab8:	683a      	ldr	r2, [r7, #0]
 8008aba:	6812      	ldr	r2, [r2, #0]
 8008abc:	f023 0101 	bic.w	r1, r3, #1
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	689b      	ldr	r3, [r3, #8]
 8008aca:	2b08      	cmp	r3, #8
 8008acc:	d102      	bne.n	8008ad4 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8008ace:	2340      	movs	r3, #64	; 0x40
 8008ad0:	617b      	str	r3, [r7, #20]
 8008ad2:	e001      	b.n	8008ad8 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008ae4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008aea:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8008af0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008af6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008afc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8008b02:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008b08:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8008b0e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008b14:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b22:	693a      	ldr	r2, [r7, #16]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b36:	693a      	ldr	r2, [r7, #16]
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8008b3c:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <FMC_NORSRAM_Init+0x11c>)
 8008b3e:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b46:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b4e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008b56:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008b58:	683b      	ldr	r3, [r7, #0]
 8008b5a:	681a      	ldr	r2, [r3, #0]
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	43db      	mvns	r3, r3
 8008b66:	ea02 0103 	and.w	r1, r2, r3
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	4319      	orrs	r1, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b80:	d10c      	bne.n	8008b9c <FMC_NORSRAM_Init+0xf8>
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d008      	beq.n	8008b9c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b96:	431a      	orrs	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d006      	beq.n	8008bb2 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bac:	431a      	orrs	r2, r3
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	0008fb7f 	.word	0x0008fb7f

08008bc4 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008bda:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	681a      	ldr	r2, [r3, #0]
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	685b      	ldr	r3, [r3, #4]
 8008be6:	011b      	lsls	r3, r3, #4
 8008be8:	431a      	orrs	r2, r3
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	021b      	lsls	r3, r3, #8
 8008bf0:	431a      	orrs	r2, r3
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	041b      	lsls	r3, r3, #16
 8008bf8:	431a      	orrs	r2, r3
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	3b01      	subs	r3, #1
 8008c00:	051b      	lsls	r3, r3, #20
 8008c02:	431a      	orrs	r2, r3
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	695b      	ldr	r3, [r3, #20]
 8008c08:	3b02      	subs	r3, #2
 8008c0a:	061b      	lsls	r3, r3, #24
 8008c0c:	431a      	orrs	r2, r3
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	687a      	ldr	r2, [r7, #4]
 8008c16:	3201      	adds	r2, #1
 8008c18:	4319      	orrs	r1, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c2c:	d113      	bne.n	8008c56 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c36:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8008c38:	68bb      	ldr	r3, [r7, #8]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	051b      	lsls	r3, r3, #20
 8008c40:	697a      	ldr	r2, [r7, #20]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	431a      	orrs	r2, r3
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	371c      	adds	r7, #28
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
 8008c70:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c78:	d11d      	bne.n	8008cb6 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	687a      	ldr	r2, [r7, #4]
 8008c7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008c82:	4b13      	ldr	r3, [pc, #76]	; (8008cd0 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8008c84:	4013      	ands	r3, r2
 8008c86:	68ba      	ldr	r2, [r7, #8]
 8008c88:	6811      	ldr	r1, [r2, #0]
 8008c8a:	68ba      	ldr	r2, [r7, #8]
 8008c8c:	6852      	ldr	r2, [r2, #4]
 8008c8e:	0112      	lsls	r2, r2, #4
 8008c90:	4311      	orrs	r1, r2
 8008c92:	68ba      	ldr	r2, [r7, #8]
 8008c94:	6892      	ldr	r2, [r2, #8]
 8008c96:	0212      	lsls	r2, r2, #8
 8008c98:	4311      	orrs	r1, r2
 8008c9a:	68ba      	ldr	r2, [r7, #8]
 8008c9c:	6992      	ldr	r2, [r2, #24]
 8008c9e:	4311      	orrs	r1, r2
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	68d2      	ldr	r2, [r2, #12]
 8008ca4:	0412      	lsls	r2, r2, #16
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	ea43 0102 	orr.w	r1, r3, r2
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008cb4:	e005      	b.n	8008cc2 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	687a      	ldr	r2, [r7, #4]
 8008cba:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008cbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008cc2:	2300      	movs	r3, #0
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr
 8008cd0:	cff00000 	.word	0xcff00000

08008cd4 <siprintf>:
 8008cd4:	b40e      	push	{r1, r2, r3}
 8008cd6:	b500      	push	{lr}
 8008cd8:	b09c      	sub	sp, #112	; 0x70
 8008cda:	ab1d      	add	r3, sp, #116	; 0x74
 8008cdc:	9002      	str	r0, [sp, #8]
 8008cde:	9006      	str	r0, [sp, #24]
 8008ce0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008ce4:	4809      	ldr	r0, [pc, #36]	; (8008d0c <siprintf+0x38>)
 8008ce6:	9107      	str	r1, [sp, #28]
 8008ce8:	9104      	str	r1, [sp, #16]
 8008cea:	4909      	ldr	r1, [pc, #36]	; (8008d10 <siprintf+0x3c>)
 8008cec:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cf0:	9105      	str	r1, [sp, #20]
 8008cf2:	6800      	ldr	r0, [r0, #0]
 8008cf4:	9301      	str	r3, [sp, #4]
 8008cf6:	a902      	add	r1, sp, #8
 8008cf8:	f000 f992 	bl	8009020 <_svfiprintf_r>
 8008cfc:	9b02      	ldr	r3, [sp, #8]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	701a      	strb	r2, [r3, #0]
 8008d02:	b01c      	add	sp, #112	; 0x70
 8008d04:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d08:	b003      	add	sp, #12
 8008d0a:	4770      	bx	lr
 8008d0c:	200000e8 	.word	0x200000e8
 8008d10:	ffff0208 	.word	0xffff0208

08008d14 <memset>:
 8008d14:	4402      	add	r2, r0
 8008d16:	4603      	mov	r3, r0
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d100      	bne.n	8008d1e <memset+0xa>
 8008d1c:	4770      	bx	lr
 8008d1e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d22:	e7f9      	b.n	8008d18 <memset+0x4>

08008d24 <__errno>:
 8008d24:	4b01      	ldr	r3, [pc, #4]	; (8008d2c <__errno+0x8>)
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	4770      	bx	lr
 8008d2a:	bf00      	nop
 8008d2c:	200000e8 	.word	0x200000e8

08008d30 <__libc_init_array>:
 8008d30:	b570      	push	{r4, r5, r6, lr}
 8008d32:	4d0d      	ldr	r5, [pc, #52]	; (8008d68 <__libc_init_array+0x38>)
 8008d34:	4c0d      	ldr	r4, [pc, #52]	; (8008d6c <__libc_init_array+0x3c>)
 8008d36:	1b64      	subs	r4, r4, r5
 8008d38:	10a4      	asrs	r4, r4, #2
 8008d3a:	2600      	movs	r6, #0
 8008d3c:	42a6      	cmp	r6, r4
 8008d3e:	d109      	bne.n	8008d54 <__libc_init_array+0x24>
 8008d40:	4d0b      	ldr	r5, [pc, #44]	; (8008d70 <__libc_init_array+0x40>)
 8008d42:	4c0c      	ldr	r4, [pc, #48]	; (8008d74 <__libc_init_array+0x44>)
 8008d44:	f000 fc6a 	bl	800961c <_init>
 8008d48:	1b64      	subs	r4, r4, r5
 8008d4a:	10a4      	asrs	r4, r4, #2
 8008d4c:	2600      	movs	r6, #0
 8008d4e:	42a6      	cmp	r6, r4
 8008d50:	d105      	bne.n	8008d5e <__libc_init_array+0x2e>
 8008d52:	bd70      	pop	{r4, r5, r6, pc}
 8008d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d58:	4798      	blx	r3
 8008d5a:	3601      	adds	r6, #1
 8008d5c:	e7ee      	b.n	8008d3c <__libc_init_array+0xc>
 8008d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d62:	4798      	blx	r3
 8008d64:	3601      	adds	r6, #1
 8008d66:	e7f2      	b.n	8008d4e <__libc_init_array+0x1e>
 8008d68:	08018c58 	.word	0x08018c58
 8008d6c:	08018c58 	.word	0x08018c58
 8008d70:	08018c58 	.word	0x08018c58
 8008d74:	08018c5c 	.word	0x08018c5c

08008d78 <__retarget_lock_acquire_recursive>:
 8008d78:	4770      	bx	lr

08008d7a <__retarget_lock_release_recursive>:
 8008d7a:	4770      	bx	lr

08008d7c <_free_r>:
 8008d7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	d044      	beq.n	8008e0c <_free_r+0x90>
 8008d82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d86:	9001      	str	r0, [sp, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d8e:	bfb8      	it	lt
 8008d90:	18e4      	addlt	r4, r4, r3
 8008d92:	f000 f8df 	bl	8008f54 <__malloc_lock>
 8008d96:	4a1e      	ldr	r2, [pc, #120]	; (8008e10 <_free_r+0x94>)
 8008d98:	9801      	ldr	r0, [sp, #4]
 8008d9a:	6813      	ldr	r3, [r2, #0]
 8008d9c:	b933      	cbnz	r3, 8008dac <_free_r+0x30>
 8008d9e:	6063      	str	r3, [r4, #4]
 8008da0:	6014      	str	r4, [r2, #0]
 8008da2:	b003      	add	sp, #12
 8008da4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008da8:	f000 b8da 	b.w	8008f60 <__malloc_unlock>
 8008dac:	42a3      	cmp	r3, r4
 8008dae:	d908      	bls.n	8008dc2 <_free_r+0x46>
 8008db0:	6825      	ldr	r5, [r4, #0]
 8008db2:	1961      	adds	r1, r4, r5
 8008db4:	428b      	cmp	r3, r1
 8008db6:	bf01      	itttt	eq
 8008db8:	6819      	ldreq	r1, [r3, #0]
 8008dba:	685b      	ldreq	r3, [r3, #4]
 8008dbc:	1949      	addeq	r1, r1, r5
 8008dbe:	6021      	streq	r1, [r4, #0]
 8008dc0:	e7ed      	b.n	8008d9e <_free_r+0x22>
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	685b      	ldr	r3, [r3, #4]
 8008dc6:	b10b      	cbz	r3, 8008dcc <_free_r+0x50>
 8008dc8:	42a3      	cmp	r3, r4
 8008dca:	d9fa      	bls.n	8008dc2 <_free_r+0x46>
 8008dcc:	6811      	ldr	r1, [r2, #0]
 8008dce:	1855      	adds	r5, r2, r1
 8008dd0:	42a5      	cmp	r5, r4
 8008dd2:	d10b      	bne.n	8008dec <_free_r+0x70>
 8008dd4:	6824      	ldr	r4, [r4, #0]
 8008dd6:	4421      	add	r1, r4
 8008dd8:	1854      	adds	r4, r2, r1
 8008dda:	42a3      	cmp	r3, r4
 8008ddc:	6011      	str	r1, [r2, #0]
 8008dde:	d1e0      	bne.n	8008da2 <_free_r+0x26>
 8008de0:	681c      	ldr	r4, [r3, #0]
 8008de2:	685b      	ldr	r3, [r3, #4]
 8008de4:	6053      	str	r3, [r2, #4]
 8008de6:	440c      	add	r4, r1
 8008de8:	6014      	str	r4, [r2, #0]
 8008dea:	e7da      	b.n	8008da2 <_free_r+0x26>
 8008dec:	d902      	bls.n	8008df4 <_free_r+0x78>
 8008dee:	230c      	movs	r3, #12
 8008df0:	6003      	str	r3, [r0, #0]
 8008df2:	e7d6      	b.n	8008da2 <_free_r+0x26>
 8008df4:	6825      	ldr	r5, [r4, #0]
 8008df6:	1961      	adds	r1, r4, r5
 8008df8:	428b      	cmp	r3, r1
 8008dfa:	bf04      	itt	eq
 8008dfc:	6819      	ldreq	r1, [r3, #0]
 8008dfe:	685b      	ldreq	r3, [r3, #4]
 8008e00:	6063      	str	r3, [r4, #4]
 8008e02:	bf04      	itt	eq
 8008e04:	1949      	addeq	r1, r1, r5
 8008e06:	6021      	streq	r1, [r4, #0]
 8008e08:	6054      	str	r4, [r2, #4]
 8008e0a:	e7ca      	b.n	8008da2 <_free_r+0x26>
 8008e0c:	b003      	add	sp, #12
 8008e0e:	bd30      	pop	{r4, r5, pc}
 8008e10:	20000824 	.word	0x20000824

08008e14 <sbrk_aligned>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4e0e      	ldr	r6, [pc, #56]	; (8008e50 <sbrk_aligned+0x3c>)
 8008e18:	460c      	mov	r4, r1
 8008e1a:	6831      	ldr	r1, [r6, #0]
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	b911      	cbnz	r1, 8008e26 <sbrk_aligned+0x12>
 8008e20:	f000 fba6 	bl	8009570 <_sbrk_r>
 8008e24:	6030      	str	r0, [r6, #0]
 8008e26:	4621      	mov	r1, r4
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f000 fba1 	bl	8009570 <_sbrk_r>
 8008e2e:	1c43      	adds	r3, r0, #1
 8008e30:	d00a      	beq.n	8008e48 <sbrk_aligned+0x34>
 8008e32:	1cc4      	adds	r4, r0, #3
 8008e34:	f024 0403 	bic.w	r4, r4, #3
 8008e38:	42a0      	cmp	r0, r4
 8008e3a:	d007      	beq.n	8008e4c <sbrk_aligned+0x38>
 8008e3c:	1a21      	subs	r1, r4, r0
 8008e3e:	4628      	mov	r0, r5
 8008e40:	f000 fb96 	bl	8009570 <_sbrk_r>
 8008e44:	3001      	adds	r0, #1
 8008e46:	d101      	bne.n	8008e4c <sbrk_aligned+0x38>
 8008e48:	f04f 34ff 	mov.w	r4, #4294967295
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	bd70      	pop	{r4, r5, r6, pc}
 8008e50:	20000828 	.word	0x20000828

08008e54 <_malloc_r>:
 8008e54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e58:	1ccd      	adds	r5, r1, #3
 8008e5a:	f025 0503 	bic.w	r5, r5, #3
 8008e5e:	3508      	adds	r5, #8
 8008e60:	2d0c      	cmp	r5, #12
 8008e62:	bf38      	it	cc
 8008e64:	250c      	movcc	r5, #12
 8008e66:	2d00      	cmp	r5, #0
 8008e68:	4607      	mov	r7, r0
 8008e6a:	db01      	blt.n	8008e70 <_malloc_r+0x1c>
 8008e6c:	42a9      	cmp	r1, r5
 8008e6e:	d905      	bls.n	8008e7c <_malloc_r+0x28>
 8008e70:	230c      	movs	r3, #12
 8008e72:	603b      	str	r3, [r7, #0]
 8008e74:	2600      	movs	r6, #0
 8008e76:	4630      	mov	r0, r6
 8008e78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e7c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008f50 <_malloc_r+0xfc>
 8008e80:	f000 f868 	bl	8008f54 <__malloc_lock>
 8008e84:	f8d8 3000 	ldr.w	r3, [r8]
 8008e88:	461c      	mov	r4, r3
 8008e8a:	bb5c      	cbnz	r4, 8008ee4 <_malloc_r+0x90>
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	4638      	mov	r0, r7
 8008e90:	f7ff ffc0 	bl	8008e14 <sbrk_aligned>
 8008e94:	1c43      	adds	r3, r0, #1
 8008e96:	4604      	mov	r4, r0
 8008e98:	d155      	bne.n	8008f46 <_malloc_r+0xf2>
 8008e9a:	f8d8 4000 	ldr.w	r4, [r8]
 8008e9e:	4626      	mov	r6, r4
 8008ea0:	2e00      	cmp	r6, #0
 8008ea2:	d145      	bne.n	8008f30 <_malloc_r+0xdc>
 8008ea4:	2c00      	cmp	r4, #0
 8008ea6:	d048      	beq.n	8008f3a <_malloc_r+0xe6>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	4631      	mov	r1, r6
 8008eac:	4638      	mov	r0, r7
 8008eae:	eb04 0903 	add.w	r9, r4, r3
 8008eb2:	f000 fb5d 	bl	8009570 <_sbrk_r>
 8008eb6:	4581      	cmp	r9, r0
 8008eb8:	d13f      	bne.n	8008f3a <_malloc_r+0xe6>
 8008eba:	6821      	ldr	r1, [r4, #0]
 8008ebc:	1a6d      	subs	r5, r5, r1
 8008ebe:	4629      	mov	r1, r5
 8008ec0:	4638      	mov	r0, r7
 8008ec2:	f7ff ffa7 	bl	8008e14 <sbrk_aligned>
 8008ec6:	3001      	adds	r0, #1
 8008ec8:	d037      	beq.n	8008f3a <_malloc_r+0xe6>
 8008eca:	6823      	ldr	r3, [r4, #0]
 8008ecc:	442b      	add	r3, r5
 8008ece:	6023      	str	r3, [r4, #0]
 8008ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d038      	beq.n	8008f4a <_malloc_r+0xf6>
 8008ed8:	685a      	ldr	r2, [r3, #4]
 8008eda:	42a2      	cmp	r2, r4
 8008edc:	d12b      	bne.n	8008f36 <_malloc_r+0xe2>
 8008ede:	2200      	movs	r2, #0
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	e00f      	b.n	8008f04 <_malloc_r+0xb0>
 8008ee4:	6822      	ldr	r2, [r4, #0]
 8008ee6:	1b52      	subs	r2, r2, r5
 8008ee8:	d41f      	bmi.n	8008f2a <_malloc_r+0xd6>
 8008eea:	2a0b      	cmp	r2, #11
 8008eec:	d917      	bls.n	8008f1e <_malloc_r+0xca>
 8008eee:	1961      	adds	r1, r4, r5
 8008ef0:	42a3      	cmp	r3, r4
 8008ef2:	6025      	str	r5, [r4, #0]
 8008ef4:	bf18      	it	ne
 8008ef6:	6059      	strne	r1, [r3, #4]
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	bf08      	it	eq
 8008efc:	f8c8 1000 	streq.w	r1, [r8]
 8008f00:	5162      	str	r2, [r4, r5]
 8008f02:	604b      	str	r3, [r1, #4]
 8008f04:	4638      	mov	r0, r7
 8008f06:	f104 060b 	add.w	r6, r4, #11
 8008f0a:	f000 f829 	bl	8008f60 <__malloc_unlock>
 8008f0e:	f026 0607 	bic.w	r6, r6, #7
 8008f12:	1d23      	adds	r3, r4, #4
 8008f14:	1af2      	subs	r2, r6, r3
 8008f16:	d0ae      	beq.n	8008e76 <_malloc_r+0x22>
 8008f18:	1b9b      	subs	r3, r3, r6
 8008f1a:	50a3      	str	r3, [r4, r2]
 8008f1c:	e7ab      	b.n	8008e76 <_malloc_r+0x22>
 8008f1e:	42a3      	cmp	r3, r4
 8008f20:	6862      	ldr	r2, [r4, #4]
 8008f22:	d1dd      	bne.n	8008ee0 <_malloc_r+0x8c>
 8008f24:	f8c8 2000 	str.w	r2, [r8]
 8008f28:	e7ec      	b.n	8008f04 <_malloc_r+0xb0>
 8008f2a:	4623      	mov	r3, r4
 8008f2c:	6864      	ldr	r4, [r4, #4]
 8008f2e:	e7ac      	b.n	8008e8a <_malloc_r+0x36>
 8008f30:	4634      	mov	r4, r6
 8008f32:	6876      	ldr	r6, [r6, #4]
 8008f34:	e7b4      	b.n	8008ea0 <_malloc_r+0x4c>
 8008f36:	4613      	mov	r3, r2
 8008f38:	e7cc      	b.n	8008ed4 <_malloc_r+0x80>
 8008f3a:	230c      	movs	r3, #12
 8008f3c:	603b      	str	r3, [r7, #0]
 8008f3e:	4638      	mov	r0, r7
 8008f40:	f000 f80e 	bl	8008f60 <__malloc_unlock>
 8008f44:	e797      	b.n	8008e76 <_malloc_r+0x22>
 8008f46:	6025      	str	r5, [r4, #0]
 8008f48:	e7dc      	b.n	8008f04 <_malloc_r+0xb0>
 8008f4a:	605b      	str	r3, [r3, #4]
 8008f4c:	deff      	udf	#255	; 0xff
 8008f4e:	bf00      	nop
 8008f50:	20000824 	.word	0x20000824

08008f54 <__malloc_lock>:
 8008f54:	4801      	ldr	r0, [pc, #4]	; (8008f5c <__malloc_lock+0x8>)
 8008f56:	f7ff bf0f 	b.w	8008d78 <__retarget_lock_acquire_recursive>
 8008f5a:	bf00      	nop
 8008f5c:	20000820 	.word	0x20000820

08008f60 <__malloc_unlock>:
 8008f60:	4801      	ldr	r0, [pc, #4]	; (8008f68 <__malloc_unlock+0x8>)
 8008f62:	f7ff bf0a 	b.w	8008d7a <__retarget_lock_release_recursive>
 8008f66:	bf00      	nop
 8008f68:	20000820 	.word	0x20000820

08008f6c <__ssputs_r>:
 8008f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f70:	688e      	ldr	r6, [r1, #8]
 8008f72:	461f      	mov	r7, r3
 8008f74:	42be      	cmp	r6, r7
 8008f76:	680b      	ldr	r3, [r1, #0]
 8008f78:	4682      	mov	sl, r0
 8008f7a:	460c      	mov	r4, r1
 8008f7c:	4690      	mov	r8, r2
 8008f7e:	d82c      	bhi.n	8008fda <__ssputs_r+0x6e>
 8008f80:	898a      	ldrh	r2, [r1, #12]
 8008f82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f86:	d026      	beq.n	8008fd6 <__ssputs_r+0x6a>
 8008f88:	6965      	ldr	r5, [r4, #20]
 8008f8a:	6909      	ldr	r1, [r1, #16]
 8008f8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008f90:	eba3 0901 	sub.w	r9, r3, r1
 8008f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008f98:	1c7b      	adds	r3, r7, #1
 8008f9a:	444b      	add	r3, r9
 8008f9c:	106d      	asrs	r5, r5, #1
 8008f9e:	429d      	cmp	r5, r3
 8008fa0:	bf38      	it	cc
 8008fa2:	461d      	movcc	r5, r3
 8008fa4:	0553      	lsls	r3, r2, #21
 8008fa6:	d527      	bpl.n	8008ff8 <__ssputs_r+0x8c>
 8008fa8:	4629      	mov	r1, r5
 8008faa:	f7ff ff53 	bl	8008e54 <_malloc_r>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	b360      	cbz	r0, 800900c <__ssputs_r+0xa0>
 8008fb2:	6921      	ldr	r1, [r4, #16]
 8008fb4:	464a      	mov	r2, r9
 8008fb6:	f000 faeb 	bl	8009590 <memcpy>
 8008fba:	89a3      	ldrh	r3, [r4, #12]
 8008fbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fc4:	81a3      	strh	r3, [r4, #12]
 8008fc6:	6126      	str	r6, [r4, #16]
 8008fc8:	6165      	str	r5, [r4, #20]
 8008fca:	444e      	add	r6, r9
 8008fcc:	eba5 0509 	sub.w	r5, r5, r9
 8008fd0:	6026      	str	r6, [r4, #0]
 8008fd2:	60a5      	str	r5, [r4, #8]
 8008fd4:	463e      	mov	r6, r7
 8008fd6:	42be      	cmp	r6, r7
 8008fd8:	d900      	bls.n	8008fdc <__ssputs_r+0x70>
 8008fda:	463e      	mov	r6, r7
 8008fdc:	6820      	ldr	r0, [r4, #0]
 8008fde:	4632      	mov	r2, r6
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	f000 faab 	bl	800953c <memmove>
 8008fe6:	68a3      	ldr	r3, [r4, #8]
 8008fe8:	1b9b      	subs	r3, r3, r6
 8008fea:	60a3      	str	r3, [r4, #8]
 8008fec:	6823      	ldr	r3, [r4, #0]
 8008fee:	4433      	add	r3, r6
 8008ff0:	6023      	str	r3, [r4, #0]
 8008ff2:	2000      	movs	r0, #0
 8008ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff8:	462a      	mov	r2, r5
 8008ffa:	f000 fad7 	bl	80095ac <_realloc_r>
 8008ffe:	4606      	mov	r6, r0
 8009000:	2800      	cmp	r0, #0
 8009002:	d1e0      	bne.n	8008fc6 <__ssputs_r+0x5a>
 8009004:	6921      	ldr	r1, [r4, #16]
 8009006:	4650      	mov	r0, sl
 8009008:	f7ff feb8 	bl	8008d7c <_free_r>
 800900c:	230c      	movs	r3, #12
 800900e:	f8ca 3000 	str.w	r3, [sl]
 8009012:	89a3      	ldrh	r3, [r4, #12]
 8009014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009018:	81a3      	strh	r3, [r4, #12]
 800901a:	f04f 30ff 	mov.w	r0, #4294967295
 800901e:	e7e9      	b.n	8008ff4 <__ssputs_r+0x88>

08009020 <_svfiprintf_r>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	4698      	mov	r8, r3
 8009026:	898b      	ldrh	r3, [r1, #12]
 8009028:	061b      	lsls	r3, r3, #24
 800902a:	b09d      	sub	sp, #116	; 0x74
 800902c:	4607      	mov	r7, r0
 800902e:	460d      	mov	r5, r1
 8009030:	4614      	mov	r4, r2
 8009032:	d50e      	bpl.n	8009052 <_svfiprintf_r+0x32>
 8009034:	690b      	ldr	r3, [r1, #16]
 8009036:	b963      	cbnz	r3, 8009052 <_svfiprintf_r+0x32>
 8009038:	2140      	movs	r1, #64	; 0x40
 800903a:	f7ff ff0b 	bl	8008e54 <_malloc_r>
 800903e:	6028      	str	r0, [r5, #0]
 8009040:	6128      	str	r0, [r5, #16]
 8009042:	b920      	cbnz	r0, 800904e <_svfiprintf_r+0x2e>
 8009044:	230c      	movs	r3, #12
 8009046:	603b      	str	r3, [r7, #0]
 8009048:	f04f 30ff 	mov.w	r0, #4294967295
 800904c:	e0d0      	b.n	80091f0 <_svfiprintf_r+0x1d0>
 800904e:	2340      	movs	r3, #64	; 0x40
 8009050:	616b      	str	r3, [r5, #20]
 8009052:	2300      	movs	r3, #0
 8009054:	9309      	str	r3, [sp, #36]	; 0x24
 8009056:	2320      	movs	r3, #32
 8009058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800905c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009060:	2330      	movs	r3, #48	; 0x30
 8009062:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009208 <_svfiprintf_r+0x1e8>
 8009066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800906a:	f04f 0901 	mov.w	r9, #1
 800906e:	4623      	mov	r3, r4
 8009070:	469a      	mov	sl, r3
 8009072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009076:	b10a      	cbz	r2, 800907c <_svfiprintf_r+0x5c>
 8009078:	2a25      	cmp	r2, #37	; 0x25
 800907a:	d1f9      	bne.n	8009070 <_svfiprintf_r+0x50>
 800907c:	ebba 0b04 	subs.w	fp, sl, r4
 8009080:	d00b      	beq.n	800909a <_svfiprintf_r+0x7a>
 8009082:	465b      	mov	r3, fp
 8009084:	4622      	mov	r2, r4
 8009086:	4629      	mov	r1, r5
 8009088:	4638      	mov	r0, r7
 800908a:	f7ff ff6f 	bl	8008f6c <__ssputs_r>
 800908e:	3001      	adds	r0, #1
 8009090:	f000 80a9 	beq.w	80091e6 <_svfiprintf_r+0x1c6>
 8009094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009096:	445a      	add	r2, fp
 8009098:	9209      	str	r2, [sp, #36]	; 0x24
 800909a:	f89a 3000 	ldrb.w	r3, [sl]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	f000 80a1 	beq.w	80091e6 <_svfiprintf_r+0x1c6>
 80090a4:	2300      	movs	r3, #0
 80090a6:	f04f 32ff 	mov.w	r2, #4294967295
 80090aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090ae:	f10a 0a01 	add.w	sl, sl, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	9307      	str	r3, [sp, #28]
 80090b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ba:	931a      	str	r3, [sp, #104]	; 0x68
 80090bc:	4654      	mov	r4, sl
 80090be:	2205      	movs	r2, #5
 80090c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090c4:	4850      	ldr	r0, [pc, #320]	; (8009208 <_svfiprintf_r+0x1e8>)
 80090c6:	f7f7 f8a3 	bl	8000210 <memchr>
 80090ca:	9a04      	ldr	r2, [sp, #16]
 80090cc:	b9d8      	cbnz	r0, 8009106 <_svfiprintf_r+0xe6>
 80090ce:	06d0      	lsls	r0, r2, #27
 80090d0:	bf44      	itt	mi
 80090d2:	2320      	movmi	r3, #32
 80090d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090d8:	0711      	lsls	r1, r2, #28
 80090da:	bf44      	itt	mi
 80090dc:	232b      	movmi	r3, #43	; 0x2b
 80090de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090e2:	f89a 3000 	ldrb.w	r3, [sl]
 80090e6:	2b2a      	cmp	r3, #42	; 0x2a
 80090e8:	d015      	beq.n	8009116 <_svfiprintf_r+0xf6>
 80090ea:	9a07      	ldr	r2, [sp, #28]
 80090ec:	4654      	mov	r4, sl
 80090ee:	2000      	movs	r0, #0
 80090f0:	f04f 0c0a 	mov.w	ip, #10
 80090f4:	4621      	mov	r1, r4
 80090f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090fa:	3b30      	subs	r3, #48	; 0x30
 80090fc:	2b09      	cmp	r3, #9
 80090fe:	d94d      	bls.n	800919c <_svfiprintf_r+0x17c>
 8009100:	b1b0      	cbz	r0, 8009130 <_svfiprintf_r+0x110>
 8009102:	9207      	str	r2, [sp, #28]
 8009104:	e014      	b.n	8009130 <_svfiprintf_r+0x110>
 8009106:	eba0 0308 	sub.w	r3, r0, r8
 800910a:	fa09 f303 	lsl.w	r3, r9, r3
 800910e:	4313      	orrs	r3, r2
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	46a2      	mov	sl, r4
 8009114:	e7d2      	b.n	80090bc <_svfiprintf_r+0x9c>
 8009116:	9b03      	ldr	r3, [sp, #12]
 8009118:	1d19      	adds	r1, r3, #4
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	9103      	str	r1, [sp, #12]
 800911e:	2b00      	cmp	r3, #0
 8009120:	bfbb      	ittet	lt
 8009122:	425b      	neglt	r3, r3
 8009124:	f042 0202 	orrlt.w	r2, r2, #2
 8009128:	9307      	strge	r3, [sp, #28]
 800912a:	9307      	strlt	r3, [sp, #28]
 800912c:	bfb8      	it	lt
 800912e:	9204      	strlt	r2, [sp, #16]
 8009130:	7823      	ldrb	r3, [r4, #0]
 8009132:	2b2e      	cmp	r3, #46	; 0x2e
 8009134:	d10c      	bne.n	8009150 <_svfiprintf_r+0x130>
 8009136:	7863      	ldrb	r3, [r4, #1]
 8009138:	2b2a      	cmp	r3, #42	; 0x2a
 800913a:	d134      	bne.n	80091a6 <_svfiprintf_r+0x186>
 800913c:	9b03      	ldr	r3, [sp, #12]
 800913e:	1d1a      	adds	r2, r3, #4
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	9203      	str	r2, [sp, #12]
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfb8      	it	lt
 8009148:	f04f 33ff 	movlt.w	r3, #4294967295
 800914c:	3402      	adds	r4, #2
 800914e:	9305      	str	r3, [sp, #20]
 8009150:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009218 <_svfiprintf_r+0x1f8>
 8009154:	7821      	ldrb	r1, [r4, #0]
 8009156:	2203      	movs	r2, #3
 8009158:	4650      	mov	r0, sl
 800915a:	f7f7 f859 	bl	8000210 <memchr>
 800915e:	b138      	cbz	r0, 8009170 <_svfiprintf_r+0x150>
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	eba0 000a 	sub.w	r0, r0, sl
 8009166:	2240      	movs	r2, #64	; 0x40
 8009168:	4082      	lsls	r2, r0
 800916a:	4313      	orrs	r3, r2
 800916c:	3401      	adds	r4, #1
 800916e:	9304      	str	r3, [sp, #16]
 8009170:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009174:	4825      	ldr	r0, [pc, #148]	; (800920c <_svfiprintf_r+0x1ec>)
 8009176:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800917a:	2206      	movs	r2, #6
 800917c:	f7f7 f848 	bl	8000210 <memchr>
 8009180:	2800      	cmp	r0, #0
 8009182:	d038      	beq.n	80091f6 <_svfiprintf_r+0x1d6>
 8009184:	4b22      	ldr	r3, [pc, #136]	; (8009210 <_svfiprintf_r+0x1f0>)
 8009186:	bb1b      	cbnz	r3, 80091d0 <_svfiprintf_r+0x1b0>
 8009188:	9b03      	ldr	r3, [sp, #12]
 800918a:	3307      	adds	r3, #7
 800918c:	f023 0307 	bic.w	r3, r3, #7
 8009190:	3308      	adds	r3, #8
 8009192:	9303      	str	r3, [sp, #12]
 8009194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009196:	4433      	add	r3, r6
 8009198:	9309      	str	r3, [sp, #36]	; 0x24
 800919a:	e768      	b.n	800906e <_svfiprintf_r+0x4e>
 800919c:	fb0c 3202 	mla	r2, ip, r2, r3
 80091a0:	460c      	mov	r4, r1
 80091a2:	2001      	movs	r0, #1
 80091a4:	e7a6      	b.n	80090f4 <_svfiprintf_r+0xd4>
 80091a6:	2300      	movs	r3, #0
 80091a8:	3401      	adds	r4, #1
 80091aa:	9305      	str	r3, [sp, #20]
 80091ac:	4619      	mov	r1, r3
 80091ae:	f04f 0c0a 	mov.w	ip, #10
 80091b2:	4620      	mov	r0, r4
 80091b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091b8:	3a30      	subs	r2, #48	; 0x30
 80091ba:	2a09      	cmp	r2, #9
 80091bc:	d903      	bls.n	80091c6 <_svfiprintf_r+0x1a6>
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d0c6      	beq.n	8009150 <_svfiprintf_r+0x130>
 80091c2:	9105      	str	r1, [sp, #20]
 80091c4:	e7c4      	b.n	8009150 <_svfiprintf_r+0x130>
 80091c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80091ca:	4604      	mov	r4, r0
 80091cc:	2301      	movs	r3, #1
 80091ce:	e7f0      	b.n	80091b2 <_svfiprintf_r+0x192>
 80091d0:	ab03      	add	r3, sp, #12
 80091d2:	9300      	str	r3, [sp, #0]
 80091d4:	462a      	mov	r2, r5
 80091d6:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <_svfiprintf_r+0x1f4>)
 80091d8:	a904      	add	r1, sp, #16
 80091da:	4638      	mov	r0, r7
 80091dc:	f3af 8000 	nop.w
 80091e0:	1c42      	adds	r2, r0, #1
 80091e2:	4606      	mov	r6, r0
 80091e4:	d1d6      	bne.n	8009194 <_svfiprintf_r+0x174>
 80091e6:	89ab      	ldrh	r3, [r5, #12]
 80091e8:	065b      	lsls	r3, r3, #25
 80091ea:	f53f af2d 	bmi.w	8009048 <_svfiprintf_r+0x28>
 80091ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f0:	b01d      	add	sp, #116	; 0x74
 80091f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091f6:	ab03      	add	r3, sp, #12
 80091f8:	9300      	str	r3, [sp, #0]
 80091fa:	462a      	mov	r2, r5
 80091fc:	4b05      	ldr	r3, [pc, #20]	; (8009214 <_svfiprintf_r+0x1f4>)
 80091fe:	a904      	add	r1, sp, #16
 8009200:	4638      	mov	r0, r7
 8009202:	f000 f879 	bl	80092f8 <_printf_i>
 8009206:	e7eb      	b.n	80091e0 <_svfiprintf_r+0x1c0>
 8009208:	08018c1c 	.word	0x08018c1c
 800920c:	08018c26 	.word	0x08018c26
 8009210:	00000000 	.word	0x00000000
 8009214:	08008f6d 	.word	0x08008f6d
 8009218:	08018c22 	.word	0x08018c22

0800921c <_printf_common>:
 800921c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009220:	4616      	mov	r6, r2
 8009222:	4699      	mov	r9, r3
 8009224:	688a      	ldr	r2, [r1, #8]
 8009226:	690b      	ldr	r3, [r1, #16]
 8009228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800922c:	4293      	cmp	r3, r2
 800922e:	bfb8      	it	lt
 8009230:	4613      	movlt	r3, r2
 8009232:	6033      	str	r3, [r6, #0]
 8009234:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009238:	4607      	mov	r7, r0
 800923a:	460c      	mov	r4, r1
 800923c:	b10a      	cbz	r2, 8009242 <_printf_common+0x26>
 800923e:	3301      	adds	r3, #1
 8009240:	6033      	str	r3, [r6, #0]
 8009242:	6823      	ldr	r3, [r4, #0]
 8009244:	0699      	lsls	r1, r3, #26
 8009246:	bf42      	ittt	mi
 8009248:	6833      	ldrmi	r3, [r6, #0]
 800924a:	3302      	addmi	r3, #2
 800924c:	6033      	strmi	r3, [r6, #0]
 800924e:	6825      	ldr	r5, [r4, #0]
 8009250:	f015 0506 	ands.w	r5, r5, #6
 8009254:	d106      	bne.n	8009264 <_printf_common+0x48>
 8009256:	f104 0a19 	add.w	sl, r4, #25
 800925a:	68e3      	ldr	r3, [r4, #12]
 800925c:	6832      	ldr	r2, [r6, #0]
 800925e:	1a9b      	subs	r3, r3, r2
 8009260:	42ab      	cmp	r3, r5
 8009262:	dc26      	bgt.n	80092b2 <_printf_common+0x96>
 8009264:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009268:	1e13      	subs	r3, r2, #0
 800926a:	6822      	ldr	r2, [r4, #0]
 800926c:	bf18      	it	ne
 800926e:	2301      	movne	r3, #1
 8009270:	0692      	lsls	r2, r2, #26
 8009272:	d42b      	bmi.n	80092cc <_printf_common+0xb0>
 8009274:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009278:	4649      	mov	r1, r9
 800927a:	4638      	mov	r0, r7
 800927c:	47c0      	blx	r8
 800927e:	3001      	adds	r0, #1
 8009280:	d01e      	beq.n	80092c0 <_printf_common+0xa4>
 8009282:	6823      	ldr	r3, [r4, #0]
 8009284:	6922      	ldr	r2, [r4, #16]
 8009286:	f003 0306 	and.w	r3, r3, #6
 800928a:	2b04      	cmp	r3, #4
 800928c:	bf02      	ittt	eq
 800928e:	68e5      	ldreq	r5, [r4, #12]
 8009290:	6833      	ldreq	r3, [r6, #0]
 8009292:	1aed      	subeq	r5, r5, r3
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	bf0c      	ite	eq
 8009298:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800929c:	2500      	movne	r5, #0
 800929e:	4293      	cmp	r3, r2
 80092a0:	bfc4      	itt	gt
 80092a2:	1a9b      	subgt	r3, r3, r2
 80092a4:	18ed      	addgt	r5, r5, r3
 80092a6:	2600      	movs	r6, #0
 80092a8:	341a      	adds	r4, #26
 80092aa:	42b5      	cmp	r5, r6
 80092ac:	d11a      	bne.n	80092e4 <_printf_common+0xc8>
 80092ae:	2000      	movs	r0, #0
 80092b0:	e008      	b.n	80092c4 <_printf_common+0xa8>
 80092b2:	2301      	movs	r3, #1
 80092b4:	4652      	mov	r2, sl
 80092b6:	4649      	mov	r1, r9
 80092b8:	4638      	mov	r0, r7
 80092ba:	47c0      	blx	r8
 80092bc:	3001      	adds	r0, #1
 80092be:	d103      	bne.n	80092c8 <_printf_common+0xac>
 80092c0:	f04f 30ff 	mov.w	r0, #4294967295
 80092c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092c8:	3501      	adds	r5, #1
 80092ca:	e7c6      	b.n	800925a <_printf_common+0x3e>
 80092cc:	18e1      	adds	r1, r4, r3
 80092ce:	1c5a      	adds	r2, r3, #1
 80092d0:	2030      	movs	r0, #48	; 0x30
 80092d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80092d6:	4422      	add	r2, r4
 80092d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80092dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80092e0:	3302      	adds	r3, #2
 80092e2:	e7c7      	b.n	8009274 <_printf_common+0x58>
 80092e4:	2301      	movs	r3, #1
 80092e6:	4622      	mov	r2, r4
 80092e8:	4649      	mov	r1, r9
 80092ea:	4638      	mov	r0, r7
 80092ec:	47c0      	blx	r8
 80092ee:	3001      	adds	r0, #1
 80092f0:	d0e6      	beq.n	80092c0 <_printf_common+0xa4>
 80092f2:	3601      	adds	r6, #1
 80092f4:	e7d9      	b.n	80092aa <_printf_common+0x8e>
	...

080092f8 <_printf_i>:
 80092f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092fc:	7e0f      	ldrb	r7, [r1, #24]
 80092fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009300:	2f78      	cmp	r7, #120	; 0x78
 8009302:	4691      	mov	r9, r2
 8009304:	4680      	mov	r8, r0
 8009306:	460c      	mov	r4, r1
 8009308:	469a      	mov	sl, r3
 800930a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800930e:	d807      	bhi.n	8009320 <_printf_i+0x28>
 8009310:	2f62      	cmp	r7, #98	; 0x62
 8009312:	d80a      	bhi.n	800932a <_printf_i+0x32>
 8009314:	2f00      	cmp	r7, #0
 8009316:	f000 80d4 	beq.w	80094c2 <_printf_i+0x1ca>
 800931a:	2f58      	cmp	r7, #88	; 0x58
 800931c:	f000 80c0 	beq.w	80094a0 <_printf_i+0x1a8>
 8009320:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009324:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009328:	e03a      	b.n	80093a0 <_printf_i+0xa8>
 800932a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800932e:	2b15      	cmp	r3, #21
 8009330:	d8f6      	bhi.n	8009320 <_printf_i+0x28>
 8009332:	a101      	add	r1, pc, #4	; (adr r1, 8009338 <_printf_i+0x40>)
 8009334:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009338:	08009391 	.word	0x08009391
 800933c:	080093a5 	.word	0x080093a5
 8009340:	08009321 	.word	0x08009321
 8009344:	08009321 	.word	0x08009321
 8009348:	08009321 	.word	0x08009321
 800934c:	08009321 	.word	0x08009321
 8009350:	080093a5 	.word	0x080093a5
 8009354:	08009321 	.word	0x08009321
 8009358:	08009321 	.word	0x08009321
 800935c:	08009321 	.word	0x08009321
 8009360:	08009321 	.word	0x08009321
 8009364:	080094a9 	.word	0x080094a9
 8009368:	080093d1 	.word	0x080093d1
 800936c:	08009463 	.word	0x08009463
 8009370:	08009321 	.word	0x08009321
 8009374:	08009321 	.word	0x08009321
 8009378:	080094cb 	.word	0x080094cb
 800937c:	08009321 	.word	0x08009321
 8009380:	080093d1 	.word	0x080093d1
 8009384:	08009321 	.word	0x08009321
 8009388:	08009321 	.word	0x08009321
 800938c:	0800946b 	.word	0x0800946b
 8009390:	682b      	ldr	r3, [r5, #0]
 8009392:	1d1a      	adds	r2, r3, #4
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	602a      	str	r2, [r5, #0]
 8009398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800939c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80093a0:	2301      	movs	r3, #1
 80093a2:	e09f      	b.n	80094e4 <_printf_i+0x1ec>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	682b      	ldr	r3, [r5, #0]
 80093a8:	0607      	lsls	r7, r0, #24
 80093aa:	f103 0104 	add.w	r1, r3, #4
 80093ae:	6029      	str	r1, [r5, #0]
 80093b0:	d501      	bpl.n	80093b6 <_printf_i+0xbe>
 80093b2:	681e      	ldr	r6, [r3, #0]
 80093b4:	e003      	b.n	80093be <_printf_i+0xc6>
 80093b6:	0646      	lsls	r6, r0, #25
 80093b8:	d5fb      	bpl.n	80093b2 <_printf_i+0xba>
 80093ba:	f9b3 6000 	ldrsh.w	r6, [r3]
 80093be:	2e00      	cmp	r6, #0
 80093c0:	da03      	bge.n	80093ca <_printf_i+0xd2>
 80093c2:	232d      	movs	r3, #45	; 0x2d
 80093c4:	4276      	negs	r6, r6
 80093c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093ca:	485a      	ldr	r0, [pc, #360]	; (8009534 <_printf_i+0x23c>)
 80093cc:	230a      	movs	r3, #10
 80093ce:	e012      	b.n	80093f6 <_printf_i+0xfe>
 80093d0:	682b      	ldr	r3, [r5, #0]
 80093d2:	6820      	ldr	r0, [r4, #0]
 80093d4:	1d19      	adds	r1, r3, #4
 80093d6:	6029      	str	r1, [r5, #0]
 80093d8:	0605      	lsls	r5, r0, #24
 80093da:	d501      	bpl.n	80093e0 <_printf_i+0xe8>
 80093dc:	681e      	ldr	r6, [r3, #0]
 80093de:	e002      	b.n	80093e6 <_printf_i+0xee>
 80093e0:	0641      	lsls	r1, r0, #25
 80093e2:	d5fb      	bpl.n	80093dc <_printf_i+0xe4>
 80093e4:	881e      	ldrh	r6, [r3, #0]
 80093e6:	4853      	ldr	r0, [pc, #332]	; (8009534 <_printf_i+0x23c>)
 80093e8:	2f6f      	cmp	r7, #111	; 0x6f
 80093ea:	bf0c      	ite	eq
 80093ec:	2308      	moveq	r3, #8
 80093ee:	230a      	movne	r3, #10
 80093f0:	2100      	movs	r1, #0
 80093f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80093f6:	6865      	ldr	r5, [r4, #4]
 80093f8:	60a5      	str	r5, [r4, #8]
 80093fa:	2d00      	cmp	r5, #0
 80093fc:	bfa2      	ittt	ge
 80093fe:	6821      	ldrge	r1, [r4, #0]
 8009400:	f021 0104 	bicge.w	r1, r1, #4
 8009404:	6021      	strge	r1, [r4, #0]
 8009406:	b90e      	cbnz	r6, 800940c <_printf_i+0x114>
 8009408:	2d00      	cmp	r5, #0
 800940a:	d04b      	beq.n	80094a4 <_printf_i+0x1ac>
 800940c:	4615      	mov	r5, r2
 800940e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009412:	fb03 6711 	mls	r7, r3, r1, r6
 8009416:	5dc7      	ldrb	r7, [r0, r7]
 8009418:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800941c:	4637      	mov	r7, r6
 800941e:	42bb      	cmp	r3, r7
 8009420:	460e      	mov	r6, r1
 8009422:	d9f4      	bls.n	800940e <_printf_i+0x116>
 8009424:	2b08      	cmp	r3, #8
 8009426:	d10b      	bne.n	8009440 <_printf_i+0x148>
 8009428:	6823      	ldr	r3, [r4, #0]
 800942a:	07de      	lsls	r6, r3, #31
 800942c:	d508      	bpl.n	8009440 <_printf_i+0x148>
 800942e:	6923      	ldr	r3, [r4, #16]
 8009430:	6861      	ldr	r1, [r4, #4]
 8009432:	4299      	cmp	r1, r3
 8009434:	bfde      	ittt	le
 8009436:	2330      	movle	r3, #48	; 0x30
 8009438:	f805 3c01 	strble.w	r3, [r5, #-1]
 800943c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009440:	1b52      	subs	r2, r2, r5
 8009442:	6122      	str	r2, [r4, #16]
 8009444:	f8cd a000 	str.w	sl, [sp]
 8009448:	464b      	mov	r3, r9
 800944a:	aa03      	add	r2, sp, #12
 800944c:	4621      	mov	r1, r4
 800944e:	4640      	mov	r0, r8
 8009450:	f7ff fee4 	bl	800921c <_printf_common>
 8009454:	3001      	adds	r0, #1
 8009456:	d14a      	bne.n	80094ee <_printf_i+0x1f6>
 8009458:	f04f 30ff 	mov.w	r0, #4294967295
 800945c:	b004      	add	sp, #16
 800945e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009462:	6823      	ldr	r3, [r4, #0]
 8009464:	f043 0320 	orr.w	r3, r3, #32
 8009468:	6023      	str	r3, [r4, #0]
 800946a:	4833      	ldr	r0, [pc, #204]	; (8009538 <_printf_i+0x240>)
 800946c:	2778      	movs	r7, #120	; 0x78
 800946e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009472:	6823      	ldr	r3, [r4, #0]
 8009474:	6829      	ldr	r1, [r5, #0]
 8009476:	061f      	lsls	r7, r3, #24
 8009478:	f851 6b04 	ldr.w	r6, [r1], #4
 800947c:	d402      	bmi.n	8009484 <_printf_i+0x18c>
 800947e:	065f      	lsls	r7, r3, #25
 8009480:	bf48      	it	mi
 8009482:	b2b6      	uxthmi	r6, r6
 8009484:	07df      	lsls	r7, r3, #31
 8009486:	bf48      	it	mi
 8009488:	f043 0320 	orrmi.w	r3, r3, #32
 800948c:	6029      	str	r1, [r5, #0]
 800948e:	bf48      	it	mi
 8009490:	6023      	strmi	r3, [r4, #0]
 8009492:	b91e      	cbnz	r6, 800949c <_printf_i+0x1a4>
 8009494:	6823      	ldr	r3, [r4, #0]
 8009496:	f023 0320 	bic.w	r3, r3, #32
 800949a:	6023      	str	r3, [r4, #0]
 800949c:	2310      	movs	r3, #16
 800949e:	e7a7      	b.n	80093f0 <_printf_i+0xf8>
 80094a0:	4824      	ldr	r0, [pc, #144]	; (8009534 <_printf_i+0x23c>)
 80094a2:	e7e4      	b.n	800946e <_printf_i+0x176>
 80094a4:	4615      	mov	r5, r2
 80094a6:	e7bd      	b.n	8009424 <_printf_i+0x12c>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	6826      	ldr	r6, [r4, #0]
 80094ac:	6961      	ldr	r1, [r4, #20]
 80094ae:	1d18      	adds	r0, r3, #4
 80094b0:	6028      	str	r0, [r5, #0]
 80094b2:	0635      	lsls	r5, r6, #24
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	d501      	bpl.n	80094bc <_printf_i+0x1c4>
 80094b8:	6019      	str	r1, [r3, #0]
 80094ba:	e002      	b.n	80094c2 <_printf_i+0x1ca>
 80094bc:	0670      	lsls	r0, r6, #25
 80094be:	d5fb      	bpl.n	80094b8 <_printf_i+0x1c0>
 80094c0:	8019      	strh	r1, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	6123      	str	r3, [r4, #16]
 80094c6:	4615      	mov	r5, r2
 80094c8:	e7bc      	b.n	8009444 <_printf_i+0x14c>
 80094ca:	682b      	ldr	r3, [r5, #0]
 80094cc:	1d1a      	adds	r2, r3, #4
 80094ce:	602a      	str	r2, [r5, #0]
 80094d0:	681d      	ldr	r5, [r3, #0]
 80094d2:	6862      	ldr	r2, [r4, #4]
 80094d4:	2100      	movs	r1, #0
 80094d6:	4628      	mov	r0, r5
 80094d8:	f7f6 fe9a 	bl	8000210 <memchr>
 80094dc:	b108      	cbz	r0, 80094e2 <_printf_i+0x1ea>
 80094de:	1b40      	subs	r0, r0, r5
 80094e0:	6060      	str	r0, [r4, #4]
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	6123      	str	r3, [r4, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ec:	e7aa      	b.n	8009444 <_printf_i+0x14c>
 80094ee:	6923      	ldr	r3, [r4, #16]
 80094f0:	462a      	mov	r2, r5
 80094f2:	4649      	mov	r1, r9
 80094f4:	4640      	mov	r0, r8
 80094f6:	47d0      	blx	sl
 80094f8:	3001      	adds	r0, #1
 80094fa:	d0ad      	beq.n	8009458 <_printf_i+0x160>
 80094fc:	6823      	ldr	r3, [r4, #0]
 80094fe:	079b      	lsls	r3, r3, #30
 8009500:	d413      	bmi.n	800952a <_printf_i+0x232>
 8009502:	68e0      	ldr	r0, [r4, #12]
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	4298      	cmp	r0, r3
 8009508:	bfb8      	it	lt
 800950a:	4618      	movlt	r0, r3
 800950c:	e7a6      	b.n	800945c <_printf_i+0x164>
 800950e:	2301      	movs	r3, #1
 8009510:	4632      	mov	r2, r6
 8009512:	4649      	mov	r1, r9
 8009514:	4640      	mov	r0, r8
 8009516:	47d0      	blx	sl
 8009518:	3001      	adds	r0, #1
 800951a:	d09d      	beq.n	8009458 <_printf_i+0x160>
 800951c:	3501      	adds	r5, #1
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	9903      	ldr	r1, [sp, #12]
 8009522:	1a5b      	subs	r3, r3, r1
 8009524:	42ab      	cmp	r3, r5
 8009526:	dcf2      	bgt.n	800950e <_printf_i+0x216>
 8009528:	e7eb      	b.n	8009502 <_printf_i+0x20a>
 800952a:	2500      	movs	r5, #0
 800952c:	f104 0619 	add.w	r6, r4, #25
 8009530:	e7f5      	b.n	800951e <_printf_i+0x226>
 8009532:	bf00      	nop
 8009534:	08018c2d 	.word	0x08018c2d
 8009538:	08018c3e 	.word	0x08018c3e

0800953c <memmove>:
 800953c:	4288      	cmp	r0, r1
 800953e:	b510      	push	{r4, lr}
 8009540:	eb01 0402 	add.w	r4, r1, r2
 8009544:	d902      	bls.n	800954c <memmove+0x10>
 8009546:	4284      	cmp	r4, r0
 8009548:	4623      	mov	r3, r4
 800954a:	d807      	bhi.n	800955c <memmove+0x20>
 800954c:	1e43      	subs	r3, r0, #1
 800954e:	42a1      	cmp	r1, r4
 8009550:	d008      	beq.n	8009564 <memmove+0x28>
 8009552:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009556:	f803 2f01 	strb.w	r2, [r3, #1]!
 800955a:	e7f8      	b.n	800954e <memmove+0x12>
 800955c:	4402      	add	r2, r0
 800955e:	4601      	mov	r1, r0
 8009560:	428a      	cmp	r2, r1
 8009562:	d100      	bne.n	8009566 <memmove+0x2a>
 8009564:	bd10      	pop	{r4, pc}
 8009566:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800956a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800956e:	e7f7      	b.n	8009560 <memmove+0x24>

08009570 <_sbrk_r>:
 8009570:	b538      	push	{r3, r4, r5, lr}
 8009572:	4d06      	ldr	r5, [pc, #24]	; (800958c <_sbrk_r+0x1c>)
 8009574:	2300      	movs	r3, #0
 8009576:	4604      	mov	r4, r0
 8009578:	4608      	mov	r0, r1
 800957a:	602b      	str	r3, [r5, #0]
 800957c:	f7f9 ff9e 	bl	80034bc <_sbrk>
 8009580:	1c43      	adds	r3, r0, #1
 8009582:	d102      	bne.n	800958a <_sbrk_r+0x1a>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	b103      	cbz	r3, 800958a <_sbrk_r+0x1a>
 8009588:	6023      	str	r3, [r4, #0]
 800958a:	bd38      	pop	{r3, r4, r5, pc}
 800958c:	2000081c 	.word	0x2000081c

08009590 <memcpy>:
 8009590:	440a      	add	r2, r1
 8009592:	4291      	cmp	r1, r2
 8009594:	f100 33ff 	add.w	r3, r0, #4294967295
 8009598:	d100      	bne.n	800959c <memcpy+0xc>
 800959a:	4770      	bx	lr
 800959c:	b510      	push	{r4, lr}
 800959e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80095a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80095a6:	4291      	cmp	r1, r2
 80095a8:	d1f9      	bne.n	800959e <memcpy+0xe>
 80095aa:	bd10      	pop	{r4, pc}

080095ac <_realloc_r>:
 80095ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b0:	4680      	mov	r8, r0
 80095b2:	4614      	mov	r4, r2
 80095b4:	460e      	mov	r6, r1
 80095b6:	b921      	cbnz	r1, 80095c2 <_realloc_r+0x16>
 80095b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095bc:	4611      	mov	r1, r2
 80095be:	f7ff bc49 	b.w	8008e54 <_malloc_r>
 80095c2:	b92a      	cbnz	r2, 80095d0 <_realloc_r+0x24>
 80095c4:	f7ff fbda 	bl	8008d7c <_free_r>
 80095c8:	4625      	mov	r5, r4
 80095ca:	4628      	mov	r0, r5
 80095cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095d0:	f000 f81b 	bl	800960a <_malloc_usable_size_r>
 80095d4:	4284      	cmp	r4, r0
 80095d6:	4607      	mov	r7, r0
 80095d8:	d802      	bhi.n	80095e0 <_realloc_r+0x34>
 80095da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80095de:	d812      	bhi.n	8009606 <_realloc_r+0x5a>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4640      	mov	r0, r8
 80095e4:	f7ff fc36 	bl	8008e54 <_malloc_r>
 80095e8:	4605      	mov	r5, r0
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d0ed      	beq.n	80095ca <_realloc_r+0x1e>
 80095ee:	42bc      	cmp	r4, r7
 80095f0:	4622      	mov	r2, r4
 80095f2:	4631      	mov	r1, r6
 80095f4:	bf28      	it	cs
 80095f6:	463a      	movcs	r2, r7
 80095f8:	f7ff ffca 	bl	8009590 <memcpy>
 80095fc:	4631      	mov	r1, r6
 80095fe:	4640      	mov	r0, r8
 8009600:	f7ff fbbc 	bl	8008d7c <_free_r>
 8009604:	e7e1      	b.n	80095ca <_realloc_r+0x1e>
 8009606:	4635      	mov	r5, r6
 8009608:	e7df      	b.n	80095ca <_realloc_r+0x1e>

0800960a <_malloc_usable_size_r>:
 800960a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800960e:	1f18      	subs	r0, r3, #4
 8009610:	2b00      	cmp	r3, #0
 8009612:	bfbc      	itt	lt
 8009614:	580b      	ldrlt	r3, [r1, r0]
 8009616:	18c0      	addlt	r0, r0, r3
 8009618:	4770      	bx	lr
	...

0800961c <_init>:
 800961c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800961e:	bf00      	nop
 8009620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009622:	bc08      	pop	{r3}
 8009624:	469e      	mov	lr, r3
 8009626:	4770      	bx	lr

08009628 <_fini>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	bf00      	nop
 800962c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800962e:	bc08      	pop	{r3}
 8009630:	469e      	mov	lr, r3
 8009632:	4770      	bx	lr
