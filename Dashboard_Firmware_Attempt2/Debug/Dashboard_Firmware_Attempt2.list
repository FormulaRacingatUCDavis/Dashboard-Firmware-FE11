
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8b4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f664  0800ea84  0800ea84  0001ea84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e0e8  0801e0e8  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801e0e8  0801e0e8  0002e0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e0f0  0801e0f0  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e0f0  0801e0f0  0002e0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e0f4  0801e0f4  0002e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801e0f8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002058  200001e8  0801e2e0  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002240  0801e2e0  00032240  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025ff0  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000052c5  00000000  00000000  0005624b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020b8  00000000  00000000  0005b510  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001920  00000000  00000000  0005d5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e844  00000000  00000000  0005eee8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a1ff  00000000  00000000  0008d72c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001078e6  00000000  00000000  000b792b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000090e8  00000000  00000000  001bf214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001c82fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea6c 	.word	0x0800ea6c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ea6c 	.word	0x0800ea6c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <HAL_CAN_RxFifo0MsgPendingCallback>:

CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e04:	2100      	movs	r1, #0
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f004 f95b 	bl	80050c2 <HAL_CAN_GetRxMessage>
	save_can_rx_data(RxHeader, RxData);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e10:	9203      	str	r2, [sp, #12]
 8000e12:	466c      	mov	r4, sp
 8000e14:	f103 0210 	add.w	r2, r3, #16
 8000e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	f000 f808 	bl	8000e34 <save_can_rx_data>
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	20000230 	.word	0x20000230
 8000e30:	20000214 	.word	0x20000214

08000e34 <save_can_rx_data>:


/************ CAN RX ************/

void save_can_rx_data(CAN_RxHeaderTypeDef RxHeader, uint8_t RxData[]) {
 8000e34:	b084      	sub	sp, #16
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	f107 0c10 	add.w	ip, r7, #16
 8000e40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // gets message and updates values
	switch (RxHeader.StdId) {
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f240 4273 	movw	r2, #1139	; 0x473
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f200 80be 	bhi.w	8000fcc <save_can_rx_data+0x198>
 8000e50:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000e54:	d218      	bcs.n	8000e88 <save_can_rx_data+0x54>
 8000e56:	f240 3287 	movw	r2, #903	; 0x387
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d04f      	beq.n	8000efe <save_can_rx_data+0xca>
 8000e5e:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 8000e62:	f080 80b3 	bcs.w	8000fcc <save_can_rx_data+0x198>
 8000e66:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000e6a:	d01d      	beq.n	8000ea8 <save_can_rx_data+0x74>
 8000e6c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000e70:	f200 80ac 	bhi.w	8000fcc <save_can_rx_data+0x198>
 8000e74:	2bab      	cmp	r3, #171	; 0xab
 8000e76:	d047      	beq.n	8000f08 <save_can_rx_data+0xd4>
 8000e78:	2bab      	cmp	r3, #171	; 0xab
 8000e7a:	f200 80a7 	bhi.w	8000fcc <save_can_rx_data+0x198>
 8000e7e:	2ba7      	cmp	r3, #167	; 0xa7
 8000e80:	d019      	beq.n	8000eb6 <save_can_rx_data+0x82>
 8000e82:	2baa      	cmp	r3, #170	; 0xaa
 8000e84:	d02a      	beq.n	8000edc <save_can_rx_data+0xa8>
			back_left_wheel_speed = (RxData[0] << 8) ;
			back_left_wheel_speed += RxData[1];
			break;
		default:
			// no valid input received
			break;
 8000e86:	e0a1      	b.n	8000fcc <save_can_rx_data+0x198>
	switch (RxHeader.StdId) {
 8000e88:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000e8c:	2b03      	cmp	r3, #3
 8000e8e:	f200 809d 	bhi.w	8000fcc <save_can_rx_data+0x198>
 8000e92:	a201      	add	r2, pc, #4	; (adr r2, 8000e98 <save_can_rx_data+0x64>)
 8000e94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e98:	08000f5b 	.word	0x08000f5b
 8000e9c:	08000f35 	.word	0x08000f35
 8000ea0:	08000fa7 	.word	0x08000fa7
 8000ea4:	08000f81 	.word	0x08000f81
			PACK_TEMP = RxData[0];
 8000ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eaa:	781a      	ldrb	r2, [r3, #0]
 8000eac:	4b4b      	ldr	r3, [pc, #300]	; (8000fdc <save_can_rx_data+0x1a8>)
 8000eae:	701a      	strb	r2, [r3, #0]
			temp_attenuate();
 8000eb0:	f001 fd0c 	bl	80028cc <temp_attenuate>
			break;
 8000eb4:	e08b      	b.n	8000fce <save_can_rx_data+0x19a>
			capacitor_volt = (RxData[0] << 8); // upper bits
 8000eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	021b      	lsls	r3, r3, #8
 8000ebe:	b29a      	uxth	r2, r3
 8000ec0:	4b47      	ldr	r3, [pc, #284]	; (8000fe0 <save_can_rx_data+0x1ac>)
 8000ec2:	801a      	strh	r2, [r3, #0]
			capacitor_volt += RxData[1]; // lower bits
 8000ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	b29a      	uxth	r2, r3
 8000ecc:	4b44      	ldr	r3, [pc, #272]	; (8000fe0 <save_can_rx_data+0x1ac>)
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <save_can_rx_data+0x1ac>)
 8000ed8:	801a      	strh	r2, [r3, #0]
			break;
 8000eda:	e078      	b.n	8000fce <save_can_rx_data+0x19a>
			mc_lockout = RxData[6] & 0b1000000;
 8000edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ede:	3306      	adds	r3, #6
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <save_can_rx_data+0x1b0>)
 8000eea:	701a      	strb	r2, [r3, #0]
			mc_enabled = RxData[6] & 0b1;
 8000eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eee:	3306      	adds	r3, #6
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <save_can_rx_data+0x1b4>)
 8000efa:	701a      	strb	r2, [r3, #0]
			break;
 8000efc:	e067      	b.n	8000fce <save_can_rx_data+0x19a>
			shutdown_flags = RxData[2];
 8000efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f00:	789a      	ldrb	r2, [r3, #2]
 8000f02:	4b3a      	ldr	r3, [pc, #232]	; (8000fec <save_can_rx_data+0x1b8>)
 8000f04:	701a      	strb	r2, [r3, #0]
			break;
 8000f06:	e062      	b.n	8000fce <save_can_rx_data+0x19a>
			for (uint8_t i = 0; i < 8; i++) {
 8000f08:	2300      	movs	r3, #0
 8000f0a:	71fb      	strb	r3, [r7, #7]
 8000f0c:	e00f      	b.n	8000f2e <save_can_rx_data+0xfa>
				if (RxData[i] > 0) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f12:	4413      	add	r3, r2
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d003      	beq.n	8000f22 <save_can_rx_data+0xee>
					mc_fault = 1;
 8000f1a:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <save_can_rx_data+0x1bc>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
					break;
 8000f20:	e008      	b.n	8000f34 <save_can_rx_data+0x100>
					mc_fault = 0;
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <save_can_rx_data+0x1bc>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	71fb      	strb	r3, [r7, #7]
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b07      	cmp	r3, #7
 8000f32:	d9ec      	bls.n	8000f0e <save_can_rx_data+0xda>
			front_right_wheel_speed = (RxData[0] << 8) ;
 8000f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	021b      	lsls	r3, r3, #8
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ff4 <save_can_rx_data+0x1c0>)
 8000f40:	801a      	strh	r2, [r3, #0]
			front_right_wheel_speed += RxData[1];
 8000f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f44:	3301      	adds	r3, #1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	b29a      	uxth	r2, r3
 8000f4a:	4b2a      	ldr	r3, [pc, #168]	; (8000ff4 <save_can_rx_data+0x1c0>)
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	4413      	add	r3, r2
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b27      	ldr	r3, [pc, #156]	; (8000ff4 <save_can_rx_data+0x1c0>)
 8000f56:	801a      	strh	r2, [r3, #0]
			break;
 8000f58:	e039      	b.n	8000fce <save_can_rx_data+0x19a>
			front_left_wheel_speed = (RxData[0] << 8) ;
 8000f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	021b      	lsls	r3, r3, #8
 8000f62:	b29a      	uxth	r2, r3
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <save_can_rx_data+0x1c4>)
 8000f66:	801a      	strh	r2, [r3, #0]
			front_left_wheel_speed += RxData[1];
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <save_can_rx_data+0x1c4>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	b29b      	uxth	r3, r3
 8000f76:	4413      	add	r3, r2
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <save_can_rx_data+0x1c4>)
 8000f7c:	801a      	strh	r2, [r3, #0]
			break;
 8000f7e:	e026      	b.n	8000fce <save_can_rx_data+0x19a>
			back_right_wheel_speed = (RxData[0] << 8) ;
 8000f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	021b      	lsls	r3, r3, #8
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <save_can_rx_data+0x1c8>)
 8000f8c:	801a      	strh	r2, [r3, #0]
			back_right_wheel_speed += RxData[1];
 8000f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f90:	3301      	adds	r3, #1
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <save_can_rx_data+0x1c8>)
 8000f98:	881b      	ldrh	r3, [r3, #0]
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b29a      	uxth	r2, r3
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <save_can_rx_data+0x1c8>)
 8000fa2:	801a      	strh	r2, [r3, #0]
			break;
 8000fa4:	e013      	b.n	8000fce <save_can_rx_data+0x19a>
			back_left_wheel_speed = (RxData[0] << 8) ;
 8000fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <save_can_rx_data+0x1cc>)
 8000fb2:	801a      	strh	r2, [r3, #0]
			back_left_wheel_speed += RxData[1];
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <save_can_rx_data+0x1cc>)
 8000fbe:	881b      	ldrh	r3, [r3, #0]
 8000fc0:	b29b      	uxth	r3, r3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	b29a      	uxth	r2, r3
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <save_can_rx_data+0x1cc>)
 8000fc8:	801a      	strh	r2, [r3, #0]
			break;
 8000fca:	e000      	b.n	8000fce <save_can_rx_data+0x19a>
			break;
 8000fcc:	bf00      	nop
	}

}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fd8:	b004      	add	sp, #16
 8000fda:	4770      	bx	lr
 8000fdc:	20000209 	.word	0x20000209
 8000fe0:	20000206 	.word	0x20000206
 8000fe4:	20000204 	.word	0x20000204
 8000fe8:	20000205 	.word	0x20000205
 8000fec:	20000000 	.word	0x20000000
 8000ff0:	2000020a 	.word	0x2000020a
 8000ff4:	2000020c 	.word	0x2000020c
 8000ff8:	2000020e 	.word	0x2000020e
 8000ffc:	20000210 	.word	0x20000210
 8001000:	20000212 	.word	0x20000212

08001004 <can_tx_vcu_state>:

CAN_TxHeaderTypeDef   TxHeader;
uint32_t              TxMailbox;

//  transmit state
void can_tx_vcu_state(CAN_HandleTypeDef *hcan){
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800100c:	4b19      	ldr	r3, [pc, #100]	; (8001074 <can_tx_vcu_state+0x70>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = VEHICLE_STATE;
 8001012:	4b18      	ldr	r3, [pc, #96]	; (8001074 <can_tx_vcu_state+0x70>)
 8001014:	f240 7266 	movw	r2, #1894	; 0x766
 8001018:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <can_tx_vcu_state+0x70>)
 800101c:	2200      	movs	r2, #0
 800101e:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 6;
 8001020:	4b14      	ldr	r3, [pc, #80]	; (8001074 <can_tx_vcu_state+0x70>)
 8001022:	2206      	movs	r2, #6
 8001024:	611a      	str	r2, [r3, #16]
	uint8_t data_tx_state[6] = {
 8001026:	2300      	movs	r3, #0
 8001028:	723b      	strb	r3, [r7, #8]
        0,
        hv_requested(),
 800102a:	f000 fd05 	bl	8001a38 <hv_requested>
 800102e:	4603      	mov	r3, r0
	uint8_t data_tx_state[6] = {
 8001030:	727b      	strb	r3, [r7, #9]
        throttle1.percent,
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <can_tx_vcu_state+0x74>)
 8001034:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 8001036:	b2db      	uxtb	r3, r3
 8001038:	72bb      	strb	r3, [r7, #10]
        throttle2.percent,
 800103a:	4b10      	ldr	r3, [pc, #64]	; (800107c <can_tx_vcu_state+0x78>)
 800103c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 800103e:	b2db      	uxtb	r3, r3
 8001040:	72fb      	strb	r3, [r7, #11]
		brake.percent,
 8001042:	4b0f      	ldr	r3, [pc, #60]	; (8001080 <can_tx_vcu_state+0x7c>)
 8001044:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 8001046:	b2db      	uxtb	r3, r3
 8001048:	733b      	strb	r3, [r7, #12]
        one_byte_state(),
 800104a:	f000 fd23 	bl	8001a94 <one_byte_state>
 800104e:	4603      	mov	r3, r0
	uint8_t data_tx_state[6] = {
 8001050:	737b      	strb	r3, [r7, #13]

    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_state, &TxMailbox) != HAL_OK)
 8001052:	f107 0208 	add.w	r2, r7, #8
 8001056:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <can_tx_vcu_state+0x80>)
 8001058:	4906      	ldr	r1, [pc, #24]	; (8001074 <can_tx_vcu_state+0x70>)
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f003 ff61 	bl	8004f22 <HAL_CAN_AddTxMessage>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d002      	beq.n	800106c <can_tx_vcu_state+0x68>
	{
	  print("CAN Tx failed\r\n");
 8001066:	4808      	ldr	r0, [pc, #32]	; (8001088 <can_tx_vcu_state+0x84>)
 8001068:	f001 fd11 	bl	8002a8e <print>
	}
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20000238 	.word	0x20000238
 8001078:	200006c8 	.word	0x200006c8
 800107c:	200006d4 	.word	0x200006d4
 8001080:	200006e0 	.word	0x200006e0
 8001084:	20000250 	.word	0x20000250
 8001088:	0800ea84 	.word	0x0800ea84

0800108c <can_tx_torque_request>:


// transmit torque request
void can_tx_torque_request(CAN_HandleTypeDef *hcan){
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001094:	4b26      	ldr	r3, [pc, #152]	; (8001130 <can_tx_torque_request+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TORQUE_REQUEST;
 800109a:	4b25      	ldr	r3, [pc, #148]	; (8001130 <can_tx_torque_request+0xa4>)
 800109c:	22c0      	movs	r2, #192	; 0xc0
 800109e:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80010a0:	4b23      	ldr	r3, [pc, #140]	; (8001130 <can_tx_torque_request+0xa4>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80010a6:	4b22      	ldr	r3, [pc, #136]	; (8001130 <can_tx_torque_request+0xa4>)
 80010a8:	2208      	movs	r2, #8
 80010aa:	611a      	str	r2, [r3, #16]

    uint16_t throttle_msg_byte = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	82fb      	strh	r3, [r7, #22]
    if (state == DRIVE) {
 80010b0:	4b20      	ldr	r3, [pc, #128]	; (8001134 <can_tx_torque_request+0xa8>)
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d108      	bne.n	80010cc <can_tx_torque_request+0x40>
        throttle_msg_byte = requested_throttle() - TC_torque_adjustment;
 80010ba:	f001 fbd7 	bl	800286c <requested_throttle>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <can_tx_torque_request+0xac>)
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	b29b      	uxth	r3, r3
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	82fb      	strh	r3, [r7, #22]
    }

    uint8_t byte5 = 0b010;   //speed mode | discharge_enable | inverter enable
 80010cc:	2302      	movs	r3, #2
 80010ce:	757b      	strb	r3, [r7, #21]
    byte5 |= (hv_requested() & 0x01);  //set inverter enable bit
 80010d0:	f000 fcb2 	bl	8001a38 <hv_requested>
 80010d4:	4603      	mov	r3, r0
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b25a      	sxtb	r2, r3
 80010dc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	b25b      	sxtb	r3, r3
 80010e4:	757b      	strb	r3, [r7, #21]

    uint8_t data_tx_torque[8] = {
        (uint8_t)(throttle_msg_byte & 0xff), // 0 - torque command lower (Nm*10)
 80010e6:	8afb      	ldrh	r3, [r7, #22]
 80010e8:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 80010ea:	733b      	strb	r3, [r7, #12]
        (uint8_t)(throttle_msg_byte >> 8) & 0xFF, // 1 - torque command upper (Nm*10)
 80010ec:	8afb      	ldrh	r3, [r7, #22]
 80010ee:	0a1b      	lsrs	r3, r3, #8
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 80010f4:	737b      	strb	r3, [r7, #13]
 80010f6:	2300      	movs	r3, #0
 80010f8:	73bb      	strb	r3, [r7, #14]
 80010fa:	2300      	movs	r3, #0
 80010fc:	73fb      	strb	r3, [r7, #15]
 80010fe:	2301      	movs	r3, #1
 8001100:	743b      	strb	r3, [r7, #16]
 8001102:	7d7b      	ldrb	r3, [r7, #21]
 8001104:	747b      	strb	r3, [r7, #17]
 8001106:	2300      	movs	r3, #0
 8001108:	74bb      	strb	r3, [r7, #18]
 800110a:	2300      	movs	r3, #0
 800110c:	74fb      	strb	r3, [r7, #19]
        byte5, // 5 - speed mode | discharge_enable | inverter enable
        0, // 6 - torque limit lower (if 0, default EEPROM value used)
        0 // 7 - torque limit upper (if 0, default EEPROM value used)
    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
 800110e:	f107 020c 	add.w	r2, r7, #12
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <can_tx_torque_request+0xb0>)
 8001114:	4906      	ldr	r1, [pc, #24]	; (8001130 <can_tx_torque_request+0xa4>)
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f003 ff03 	bl	8004f22 <HAL_CAN_AddTxMessage>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d002      	beq.n	8001128 <can_tx_torque_request+0x9c>
	{
	  print("CAN Tx failed\r\n");
 8001122:	4807      	ldr	r0, [pc, #28]	; (8001140 <can_tx_torque_request+0xb4>)
 8001124:	f001 fcb3 	bl	8002a8e <print>
	}
}
 8001128:	bf00      	nop
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000238 	.word	0x20000238
 8001134:	20000089 	.word	0x20000089
 8001138:	200006fe 	.word	0x200006fe
 800113c:	20000250 	.word	0x20000250
 8001140:	0800ea84 	.word	0x0800ea84

08001144 <can_tx_disable_MC>:


void can_tx_disable_MC(CAN_HandleTypeDef *hcan) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <can_tx_disable_MC+0x50>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TORQUE_REQUEST;
 8001152:	4b10      	ldr	r3, [pc, #64]	; (8001194 <can_tx_disable_MC+0x50>)
 8001154:	22c0      	movs	r2, #192	; 0xc0
 8001156:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001158:	4b0e      	ldr	r3, [pc, #56]	; (8001194 <can_tx_disable_MC+0x50>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <can_tx_disable_MC+0x50>)
 8001160:	2208      	movs	r2, #8
 8001162:	611a      	str	r2, [r3, #16]

	uint8_t data_tx_torque[8] = {0,0,0,0,0,0,0,0};
 8001164:	4a0c      	ldr	r2, [pc, #48]	; (8001198 <can_tx_disable_MC+0x54>)
 8001166:	f107 0308 	add.w	r3, r7, #8
 800116a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800116e:	e883 0003 	stmia.w	r3, {r0, r1}

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
 8001172:	f107 0208 	add.w	r2, r7, #8
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <can_tx_disable_MC+0x58>)
 8001178:	4906      	ldr	r1, [pc, #24]	; (8001194 <can_tx_disable_MC+0x50>)
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f003 fed1 	bl	8004f22 <HAL_CAN_AddTxMessage>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d002      	beq.n	800118c <can_tx_disable_MC+0x48>
	{
	  print("CAN Tx failed\r\n");
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <can_tx_disable_MC+0x5c>)
 8001188:	f001 fc81 	bl	8002a8e <print>
	}
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000238 	.word	0x20000238
 8001198:	0800ea94 	.word	0x0800ea94
 800119c:	20000250 	.word	0x20000250
 80011a0:	0800ea84 	.word	0x0800ea84

080011a4 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	SSD1963_Init();
 80011a8:	f002 fe56 	bl	8003e58 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 80011ac:	f44f 7388 	mov.w	r3, #272	; 0x110
 80011b0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80011b4:	490b      	ldr	r1, [pc, #44]	; (80011e4 <Display_Init+0x40>)
 80011b6:	480c      	ldr	r0, [pc, #48]	; (80011e8 <Display_Init+0x44>)
 80011b8:	f002 f8d2 	bl	8003360 <UG_Init>

	UG_FontSetVSpace(0);
 80011bc:	2000      	movs	r0, #0
 80011be:	f002 fb73 	bl	80038a8 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 80011c2:	2000      	movs	r0, #0
 80011c4:	f002 fb5c 	bl	8003880 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80011c8:	4908      	ldr	r1, [pc, #32]	; (80011ec <Display_Init+0x48>)
 80011ca:	2001      	movs	r0, #1
 80011cc:	f002 fe18 	bl	8003e00 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 80011d0:	4907      	ldr	r1, [pc, #28]	; (80011f0 <Display_Init+0x4c>)
 80011d2:	2000      	movs	r0, #0
 80011d4:	f002 fe14 	bl	8003e00 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 80011d8:	4906      	ldr	r1, [pc, #24]	; (80011f4 <Display_Init+0x50>)
 80011da:	2003      	movs	r0, #3
 80011dc:	f002 fe10 	bl	8003e00 <UG_DriverRegister>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	0800401b 	.word	0x0800401b
 80011e8:	20000284 	.word	0x20000284
 80011ec:	080040a5 	.word	0x080040a5
 80011f0:	0800416f 	.word	0x0800416f
 80011f4:	08004223 	.word	0x08004223

080011f8 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 80011fe:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001202:	f002 f959 	bl	80034b8 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 8001206:	231f      	movs	r3, #31
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800120e:	220a      	movs	r2, #10
 8001210:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001214:	2000      	movs	r0, #0
 8001216:	f002 f971 	bl	80034fc <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 800121a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	230a      	movs	r3, #10
 8001222:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001226:	2100      	movs	r1, #0
 8001228:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800122c:	f002 f966 	bl	80034fc <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8001230:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	f44f 7388 	mov.w	r3, #272	; 0x110
 800123a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800123e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001242:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8001246:	f002 f959 	bl	80034fc <UG_FillFrame>
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <Display_DriveTemplate>:
    // setup textbox configs

}

void Display_DriveTemplate()
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	af00      	add	r7, sp, #0
    debug_mode = false;
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <Display_DriveTemplate+0x114>)
 8001256:	2200      	movs	r2, #0
 8001258:	701a      	strb	r2, [r3, #0]

    // clear screen
    UG_FillScreen(C_BLACK);
 800125a:	2000      	movs	r0, #0
 800125c:	f002 f92c 	bl	80034b8 <UG_FillScreen>

    // draw labels
    UG_PutString(68, 10, "PACK SOC");
 8001260:	4a41      	ldr	r2, [pc, #260]	; (8001368 <Display_DriveTemplate+0x118>)
 8001262:	210a      	movs	r1, #10
 8001264:	2044      	movs	r0, #68	; 0x44
 8001266:	f002 f9b9 	bl	80035dc <UG_PutString>
    UG_PutString(297, 10, "MAX PACK T");
 800126a:	4a40      	ldr	r2, [pc, #256]	; (800136c <Display_DriveTemplate+0x11c>)
 800126c:	210a      	movs	r1, #10
 800126e:	f240 1029 	movw	r0, #297	; 0x129
 8001272:	f002 f9b3 	bl	80035dc <UG_PutString>
    UG_PutString(30, 180, "STATE:");
 8001276:	4a3e      	ldr	r2, [pc, #248]	; (8001370 <Display_DriveTemplate+0x120>)
 8001278:	21b4      	movs	r1, #180	; 0xb4
 800127a:	201e      	movs	r0, #30
 800127c:	f002 f9ae 	bl	80035dc <UG_PutString>
    UG_PutString(275, 180, "GLV V:");
 8001280:	4a3c      	ldr	r2, [pc, #240]	; (8001374 <Display_DriveTemplate+0x124>)
 8001282:	21b4      	movs	r1, #180	; 0xb4
 8001284:	f240 1013 	movw	r0, #275	; 0x113
 8001288:	f002 f9a8 	bl	80035dc <UG_PutString>

    // setup textbox configs
    soc_box.box_x1 = 30;
 800128c:	4b3a      	ldr	r3, [pc, #232]	; (8001378 <Display_DriveTemplate+0x128>)
 800128e:	221e      	movs	r2, #30
 8001290:	801a      	strh	r2, [r3, #0]
    soc_box.box_y1 = 35;
 8001292:	4b39      	ldr	r3, [pc, #228]	; (8001378 <Display_DriveTemplate+0x128>)
 8001294:	2223      	movs	r2, #35	; 0x23
 8001296:	805a      	strh	r2, [r3, #2]
    soc_box.box_x2 = 210;
 8001298:	4b37      	ldr	r3, [pc, #220]	; (8001378 <Display_DriveTemplate+0x128>)
 800129a:	22d2      	movs	r2, #210	; 0xd2
 800129c:	809a      	strh	r2, [r3, #4]
    soc_box.box_y2 = 170;
 800129e:	4b36      	ldr	r3, [pc, #216]	; (8001378 <Display_DriveTemplate+0x128>)
 80012a0:	22aa      	movs	r2, #170	; 0xaa
 80012a2:	80da      	strh	r2, [r3, #6]
    soc_box.font = FONT_32X53;
 80012a4:	4b34      	ldr	r3, [pc, #208]	; (8001378 <Display_DriveTemplate+0x128>)
 80012a6:	4a35      	ldr	r2, [pc, #212]	; (800137c <Display_DriveTemplate+0x12c>)
 80012a8:	f103 0410 	add.w	r4, r3, #16
 80012ac:	4615      	mov	r5, r2
 80012ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b2:	682b      	ldr	r3, [r5, #0]
 80012b4:	6023      	str	r3, [r4, #0]
    soc_box.last_color = C_BLACK;  // force box redraw
 80012b6:	4b30      	ldr	r3, [pc, #192]	; (8001378 <Display_DriveTemplate+0x128>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	849a      	strh	r2, [r3, #36]	; 0x24
    soc_box.last_value = 255;
 80012bc:	4b2e      	ldr	r3, [pc, #184]	; (8001378 <Display_DriveTemplate+0x128>)
 80012be:	22ff      	movs	r2, #255	; 0xff
 80012c0:	84da      	strh	r2, [r3, #38]	; 0x26

    bms_temp_box.box_x1 = 270;
 80012c2:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <Display_DriveTemplate+0x130>)
 80012c4:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80012c8:	801a      	strh	r2, [r3, #0]
	bms_temp_box.box_y1 = 35;
 80012ca:	4b2d      	ldr	r3, [pc, #180]	; (8001380 <Display_DriveTemplate+0x130>)
 80012cc:	2223      	movs	r2, #35	; 0x23
 80012ce:	805a      	strh	r2, [r3, #2]
	bms_temp_box.box_x2 = 450;
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <Display_DriveTemplate+0x130>)
 80012d2:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80012d6:	809a      	strh	r2, [r3, #4]
	bms_temp_box.box_y2 = 170;
 80012d8:	4b29      	ldr	r3, [pc, #164]	; (8001380 <Display_DriveTemplate+0x130>)
 80012da:	22aa      	movs	r2, #170	; 0xaa
 80012dc:	80da      	strh	r2, [r3, #6]
	bms_temp_box.font = FONT_32X53;
 80012de:	4b28      	ldr	r3, [pc, #160]	; (8001380 <Display_DriveTemplate+0x130>)
 80012e0:	4a26      	ldr	r2, [pc, #152]	; (800137c <Display_DriveTemplate+0x12c>)
 80012e2:	f103 0410 	add.w	r4, r3, #16
 80012e6:	4615      	mov	r5, r2
 80012e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ec:	682b      	ldr	r3, [r5, #0]
 80012ee:	6023      	str	r3, [r4, #0]
	bms_temp_box.last_color = C_BLACK;  // force box redraw
 80012f0:	4b23      	ldr	r3, [pc, #140]	; (8001380 <Display_DriveTemplate+0x130>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	849a      	strh	r2, [r3, #36]	; 0x24
	bms_temp_box.last_value = 255;
 80012f6:	4b22      	ldr	r3, [pc, #136]	; (8001380 <Display_DriveTemplate+0x130>)
 80012f8:	22ff      	movs	r2, #255	; 0xff
 80012fa:	84da      	strh	r2, [r3, #38]	; 0x26

	state_box.box_x1 = 30;
 80012fc:	4b21      	ldr	r3, [pc, #132]	; (8001384 <Display_DriveTemplate+0x134>)
 80012fe:	221e      	movs	r2, #30
 8001300:	801a      	strh	r2, [r3, #0]
	state_box.box_y1 = 200;
 8001302:	4b20      	ldr	r3, [pc, #128]	; (8001384 <Display_DriveTemplate+0x134>)
 8001304:	22c8      	movs	r2, #200	; 0xc8
 8001306:	805a      	strh	r2, [r3, #2]
	state_box.box_x2 = 210;
 8001308:	4b1e      	ldr	r3, [pc, #120]	; (8001384 <Display_DriveTemplate+0x134>)
 800130a:	22d2      	movs	r2, #210	; 0xd2
 800130c:	809a      	strh	r2, [r3, #4]
	state_box.box_y2 = 230;
 800130e:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <Display_DriveTemplate+0x134>)
 8001310:	22e6      	movs	r2, #230	; 0xe6
 8001312:	80da      	strh	r2, [r3, #6]
	state_box.font = FONT_12X16;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <Display_DriveTemplate+0x134>)
 8001316:	4a1c      	ldr	r2, [pc, #112]	; (8001388 <Display_DriveTemplate+0x138>)
 8001318:	f103 0410 	add.w	r4, r3, #16
 800131c:	4615      	mov	r5, r2
 800131e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001320:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001322:	682b      	ldr	r3, [r5, #0]
 8001324:	6023      	str	r3, [r4, #0]
	state_box.last_color = C_BLACK;  // force box redraw
 8001326:	4b17      	ldr	r3, [pc, #92]	; (8001384 <Display_DriveTemplate+0x134>)
 8001328:	2200      	movs	r2, #0
 800132a:	849a      	strh	r2, [r3, #36]	; 0x24

	glv_v_box.box_x1 = 270;
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <Display_DriveTemplate+0x13c>)
 800132e:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001332:	801a      	strh	r2, [r3, #0]
	glv_v_box.box_y1 = 200;
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <Display_DriveTemplate+0x13c>)
 8001336:	22c8      	movs	r2, #200	; 0xc8
 8001338:	805a      	strh	r2, [r3, #2]
	glv_v_box.box_x2 = 450;
 800133a:	4b14      	ldr	r3, [pc, #80]	; (800138c <Display_DriveTemplate+0x13c>)
 800133c:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001340:	809a      	strh	r2, [r3, #4]
	glv_v_box.box_y2 = 230;
 8001342:	4b12      	ldr	r3, [pc, #72]	; (800138c <Display_DriveTemplate+0x13c>)
 8001344:	22e6      	movs	r2, #230	; 0xe6
 8001346:	80da      	strh	r2, [r3, #6]
	glv_v_box.font = FONT_12X16;
 8001348:	4b10      	ldr	r3, [pc, #64]	; (800138c <Display_DriveTemplate+0x13c>)
 800134a:	4a0f      	ldr	r2, [pc, #60]	; (8001388 <Display_DriveTemplate+0x138>)
 800134c:	f103 0410 	add.w	r4, r3, #16
 8001350:	4615      	mov	r5, r2
 8001352:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001354:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001356:	682b      	ldr	r3, [r5, #0]
 8001358:	6023      	str	r3, [r4, #0]
	glv_v_box.last_color = C_BLACK;  // force box redraw
 800135a:	4b0c      	ldr	r3, [pc, #48]	; (800138c <Display_DriveTemplate+0x13c>)
 800135c:	2200      	movs	r2, #0
 800135e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001360:	bf00      	nop
 8001362:	bdb0      	pop	{r4, r5, r7, pc}
 8001364:	20000280 	.word	0x20000280
 8001368:	0800eaf0 	.word	0x0800eaf0
 800136c:	0800eafc 	.word	0x0800eafc
 8001370:	0800eab4 	.word	0x0800eab4
 8001374:	0800eac4 	.word	0x0800eac4
 8001378:	20000004 	.word	0x20000004
 800137c:	0801e098 	.word	0x0801e098
 8001380:	20000030 	.word	0x20000030
 8001384:	20000254 	.word	0x20000254
 8001388:	0801e084 	.word	0x0801e084
 800138c:	2000005c 	.word	0x2000005c

08001390 <Display_Update>:

void Display_Update()
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
	static uint8_t soc = 0;
	static uint32_t glv_v = 0;
	soc = soc+1 ;
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <Display_Update+0x4c>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <Display_Update+0x4c>)
 800139e:	701a      	strb	r2, [r3, #0]
	glv_v+=1;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <Display_Update+0x50>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	3301      	adds	r3, #1
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <Display_Update+0x50>)
 80013a8:	6013      	str	r3, [r2, #0]

    draw_soc(soc);
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <Display_Update+0x4c>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f817 	bl	80013e4 <draw_soc>
    draw_bms_temp(soc);
 80013b6:	4b09      	ldr	r3, [pc, #36]	; (80013dc <Display_Update+0x4c>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f821 	bl	8001404 <draw_bms_temp>
    draw_state(soc, 0);
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <Display_Update+0x4c>)
 80013c4:	781b      	ldrb	r3, [r3, #0]
 80013c6:	2100      	movs	r1, #0
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f82b 	bl	8001424 <draw_state>
    draw_glv_v(glv_v);
 80013ce:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <Display_Update+0x50>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f000 f9e0 	bl	8001798 <draw_glv_v>
}
 80013d8:	bf00      	nop
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	20000308 	.word	0x20000308
 80013e0:	2000030c 	.word	0x2000030c

080013e4 <draw_soc>:


void draw_soc(uint16_t soc)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	4603      	mov	r3, r0
 80013ec:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&soc_box, soc);
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4619      	mov	r1, r3
 80013f2:	4803      	ldr	r0, [pc, #12]	; (8001400 <draw_soc+0x1c>)
 80013f4:	f000 fa50 	bl	8001898 <draw_value_textbox>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000004 	.word	0x20000004

08001404 <draw_bms_temp>:

void draw_bms_temp(uint16_t temp)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&bms_temp_box, temp);
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	4619      	mov	r1, r3
 8001412:	4803      	ldr	r0, [pc, #12]	; (8001420 <draw_bms_temp+0x1c>)
 8001414:	f000 fa40 	bl	8001898 <draw_value_textbox>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20000030 	.word	0x20000030

08001424 <draw_state>:

void draw_state(uint8_t state, uint16_t bms_status)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	460a      	mov	r2, r1
 800142e:	71fb      	strb	r3, [r7, #7]
 8001430:	4613      	mov	r3, r2
 8001432:	80bb      	strh	r3, [r7, #4]
    static uint8_t last_state = 255;
    static uint16_t last_bms_status;

    if((state == last_state) && (bms_status == last_bms_status))  // skip function if value is the same
 8001434:	4ba9      	ldr	r3, [pc, #676]	; (80016dc <draw_state+0x2b8>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	79fa      	ldrb	r2, [r7, #7]
 800143a:	429a      	cmp	r2, r3
 800143c:	d105      	bne.n	800144a <draw_state+0x26>
 800143e:	4ba8      	ldr	r3, [pc, #672]	; (80016e0 <draw_state+0x2bc>)
 8001440:	881b      	ldrh	r3, [r3, #0]
 8001442:	88ba      	ldrh	r2, [r7, #4]
 8001444:	429a      	cmp	r2, r3
 8001446:	f000 819b 	beq.w	8001780 <draw_state+0x35c>
    }

    UG_COLOR color;
    char string[15];

    switch(bms_status)  // BMS faults more important than VCU faults
 800144a:	88bb      	ldrh	r3, [r7, #4]
 800144c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001450:	d052      	beq.n	80014f8 <draw_state+0xd4>
 8001452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001456:	dc59      	bgt.n	800150c <draw_state+0xe8>
 8001458:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800145c:	d03f      	beq.n	80014de <draw_state+0xba>
 800145e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001462:	dc53      	bgt.n	800150c <draw_state+0xe8>
 8001464:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001468:	d02f      	beq.n	80014ca <draw_state+0xa6>
 800146a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800146e:	dc4d      	bgt.n	800150c <draw_state+0xe8>
 8001470:	2b40      	cmp	r3, #64	; 0x40
 8001472:	d020      	beq.n	80014b6 <draw_state+0x92>
 8001474:	2b40      	cmp	r3, #64	; 0x40
 8001476:	dc49      	bgt.n	800150c <draw_state+0xe8>
 8001478:	2b10      	cmp	r3, #16
 800147a:	d012      	beq.n	80014a2 <draw_state+0x7e>
 800147c:	2b10      	cmp	r3, #16
 800147e:	dc45      	bgt.n	800150c <draw_state+0xe8>
 8001480:	2b02      	cmp	r3, #2
 8001482:	d001      	beq.n	8001488 <draw_state+0x64>
 8001484:	2b08      	cmp	r3, #8
 8001486:	d141      	bne.n	800150c <draw_state+0xe8>
    {
        case PACK_TEMP_OVER:
        case PACK_TEMP_UNDER:
            color = C_RED;
 8001488:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800148c:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " BMS TEMP ");
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4a94      	ldr	r2, [pc, #592]	; (80016e4 <draw_state+0x2c0>)
 8001494:	ca07      	ldmia	r2, {r0, r1, r2}
 8001496:	c303      	stmia	r3!, {r0, r1}
 8001498:	801a      	strh	r2, [r3, #0]
 800149a:	3302      	adds	r3, #2
 800149c:	0c12      	lsrs	r2, r2, #16
 800149e:	701a      	strb	r2, [r3, #0]
            break;
 80014a0:	e166      	b.n	8001770 <draw_state+0x34c>
        case LOW_SOC:
            color = C_RED;
 80014a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014a6:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " LOW SOC ");
 80014a8:	f107 030c 	add.w	r3, r7, #12
 80014ac:	4a8e      	ldr	r2, [pc, #568]	; (80016e8 <draw_state+0x2c4>)
 80014ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b0:	c303      	stmia	r3!, {r0, r1}
 80014b2:	801a      	strh	r2, [r3, #0]
            break;
 80014b4:	e15c      	b.n	8001770 <draw_state+0x34c>
        case IMBALANCE:
            color = C_RED;
 80014b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014ba:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "IMBALANCE");
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4a8a      	ldr	r2, [pc, #552]	; (80016ec <draw_state+0x2c8>)
 80014c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014c4:	c303      	stmia	r3!, {r0, r1}
 80014c6:	801a      	strh	r2, [r3, #0]
            break;
 80014c8:	e152      	b.n	8001770 <draw_state+0x34c>
        case SPI_FAULT:
            color = C_RED;
 80014ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014ce:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "SPI FAULT");
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4a86      	ldr	r2, [pc, #536]	; (80016f0 <draw_state+0x2cc>)
 80014d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80014d8:	c303      	stmia	r3!, {r0, r1}
 80014da:	801a      	strh	r2, [r3, #0]
            break;
 80014dc:	e148      	b.n	8001770 <draw_state+0x34c>
        case CELL_VOLT_OVER:
            color = C_RED;
 80014de:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014e2:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " OVERVOLT ");
 80014e4:	f107 030c 	add.w	r3, r7, #12
 80014e8:	4a82      	ldr	r2, [pc, #520]	; (80016f4 <draw_state+0x2d0>)
 80014ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80014ec:	c303      	stmia	r3!, {r0, r1}
 80014ee:	801a      	strh	r2, [r3, #0]
 80014f0:	3302      	adds	r3, #2
 80014f2:	0c12      	lsrs	r2, r2, #16
 80014f4:	701a      	strb	r2, [r3, #0]
            break;
 80014f6:	e13b      	b.n	8001770 <draw_state+0x34c>
        case CELL_VOLT_UNDER:
            color = C_RED;
 80014f8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80014fc:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "UNDERVOLT");
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	4a7d      	ldr	r2, [pc, #500]	; (80016f8 <draw_state+0x2d4>)
 8001504:	ca07      	ldmia	r2, {r0, r1, r2}
 8001506:	c303      	stmia	r3!, {r0, r1}
 8001508:	801a      	strh	r2, [r3, #0]
            break;
 800150a:	e131      	b.n	8001770 <draw_state+0x34c>
        default:
            // check fault bit
            if (state & 0x80) {
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	f280 80be 	bge.w	8001692 <draw_state+0x26e>
                // *************** FAULTS ***************
                uint8_t fault = state & 0x7f; // mask off fault bit
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800151c:	777b      	strb	r3, [r7, #29]
                switch(fault)
 800151e:	7f7b      	ldrb	r3, [r7, #29]
 8001520:	2b0a      	cmp	r3, #10
 8001522:	dc1d      	bgt.n	8001560 <draw_state+0x13c>
 8001524:	2b00      	cmp	r3, #0
 8001526:	f340 80aa 	ble.w	800167e <draw_state+0x25a>
 800152a:	3b01      	subs	r3, #1
 800152c:	2b09      	cmp	r3, #9
 800152e:	f200 80a6 	bhi.w	800167e <draw_state+0x25a>
 8001532:	a201      	add	r2, pc, #4	; (adr r2, 8001538 <draw_state+0x114>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	08001581 	.word	0x08001581
 800153c:	0800159b 	.word	0x0800159b
 8001540:	080015b5 	.word	0x080015b5
 8001544:	080015cf 	.word	0x080015cf
 8001548:	080015e9 	.word	0x080015e9
 800154c:	08001603 	.word	0x08001603
 8001550:	0800161d 	.word	0x0800161d
 8001554:	08001637 	.word	0x08001637
 8001558:	08001651 	.word	0x08001651
 800155c:	08001665 	.word	0x08001665
 8001560:	2bff      	cmp	r3, #255	; 0xff
 8001562:	f040 808c 	bne.w	800167e <draw_state+0x25a>
                {
//                    case NONE: // STARTUP (effectively)
                	case 255:
                        // not obtainable via CAN
                        // would only show when hardcoded on startup
                        color = C_YELLOW;
 8001566:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800156a:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " STARTUP  ");
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	4a62      	ldr	r2, [pc, #392]	; (80016fc <draw_state+0x2d8>)
 8001572:	ca07      	ldmia	r2, {r0, r1, r2}
 8001574:	c303      	stmia	r3!, {r0, r1}
 8001576:	801a      	strh	r2, [r3, #0]
 8001578:	3302      	adds	r3, #2
 800157a:	0c12      	lsrs	r2, r2, #16
 800157c:	701a      	strb	r2, [r3, #0]
                        break;
 800157e:	e0f7      	b.n	8001770 <draw_state+0x34c>
                    case DRIVE_REQUEST_FROM_LV:
                        color = C_RED;
 8001580:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001584:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "DRV FRM LV");
 8001586:	f107 030c 	add.w	r3, r7, #12
 800158a:	4a5d      	ldr	r2, [pc, #372]	; (8001700 <draw_state+0x2dc>)
 800158c:	ca07      	ldmia	r2, {r0, r1, r2}
 800158e:	c303      	stmia	r3!, {r0, r1}
 8001590:	801a      	strh	r2, [r3, #0]
 8001592:	3302      	adds	r3, #2
 8001594:	0c12      	lsrs	r2, r2, #16
 8001596:	701a      	strb	r2, [r3, #0]
                        break;
 8001598:	e0ea      	b.n	8001770 <draw_state+0x34c>
                    case CONSERVATIVE_TIMER_MAXED:
                        color = C_RED;
 800159a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800159e:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "PRE TM OUT");
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4a57      	ldr	r2, [pc, #348]	; (8001704 <draw_state+0x2e0>)
 80015a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80015a8:	c303      	stmia	r3!, {r0, r1}
 80015aa:	801a      	strh	r2, [r3, #0]
 80015ac:	3302      	adds	r3, #2
 80015ae:	0c12      	lsrs	r2, r2, #16
 80015b0:	701a      	strb	r2, [r3, #0]
                        break;
 80015b2:	e0dd      	b.n	8001770 <draw_state+0x34c>
                    case BRAKE_NOT_PRESSED:
                        color = C_RED;
 80015b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015b8:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BR NOT PRS");
 80015ba:	f107 030c 	add.w	r3, r7, #12
 80015be:	4a52      	ldr	r2, [pc, #328]	; (8001708 <draw_state+0x2e4>)
 80015c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015c2:	c303      	stmia	r3!, {r0, r1}
 80015c4:	801a      	strh	r2, [r3, #0]
 80015c6:	3302      	adds	r3, #2
 80015c8:	0c12      	lsrs	r2, r2, #16
 80015ca:	701a      	strb	r2, [r3, #0]
                        break;
 80015cc:	e0d0      	b.n	8001770 <draw_state+0x34c>
                    case HV_DISABLED_WHILE_DRIVING:
                        color = C_RED;
 80015ce:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015d2:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HV OFF DRV");
 80015d4:	f107 030c 	add.w	r3, r7, #12
 80015d8:	4a4c      	ldr	r2, [pc, #304]	; (800170c <draw_state+0x2e8>)
 80015da:	ca07      	ldmia	r2, {r0, r1, r2}
 80015dc:	c303      	stmia	r3!, {r0, r1}
 80015de:	801a      	strh	r2, [r3, #0]
 80015e0:	3302      	adds	r3, #2
 80015e2:	0c12      	lsrs	r2, r2, #16
 80015e4:	701a      	strb	r2, [r3, #0]
                        break;
 80015e6:	e0c3      	b.n	8001770 <draw_state+0x34c>
                    case SENSOR_DISCREPANCY:
                        color = C_RED;
 80015e8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015ec:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SNSR DSCRP");
 80015ee:	f107 030c 	add.w	r3, r7, #12
 80015f2:	4a47      	ldr	r2, [pc, #284]	; (8001710 <draw_state+0x2ec>)
 80015f4:	ca07      	ldmia	r2, {r0, r1, r2}
 80015f6:	c303      	stmia	r3!, {r0, r1}
 80015f8:	801a      	strh	r2, [r3, #0]
 80015fa:	3302      	adds	r3, #2
 80015fc:	0c12      	lsrs	r2, r2, #16
 80015fe:	701a      	strb	r2, [r3, #0]
                        break;
 8001600:	e0b6      	b.n	8001770 <draw_state+0x34c>
                    case BRAKE_IMPLAUSIBLE:
                        color = C_YELLOW;
 8001602:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001606:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BSPD TRIPD");
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4a41      	ldr	r2, [pc, #260]	; (8001714 <draw_state+0x2f0>)
 800160e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001610:	c303      	stmia	r3!, {r0, r1}
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	3302      	adds	r3, #2
 8001616:	0c12      	lsrs	r2, r2, #16
 8001618:	701a      	strb	r2, [r3, #0]
                        break;
 800161a:	e0a9      	b.n	8001770 <draw_state+0x34c>
                    case SHUTDOWN_CIRCUIT_OPEN:
                        color = C_RED;
 800161c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001620:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SHTDWN OPN");
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4a3c      	ldr	r2, [pc, #240]	; (8001718 <draw_state+0x2f4>)
 8001628:	ca07      	ldmia	r2, {r0, r1, r2}
 800162a:	c303      	stmia	r3!, {r0, r1}
 800162c:	801a      	strh	r2, [r3, #0]
 800162e:	3302      	adds	r3, #2
 8001630:	0c12      	lsrs	r2, r2, #16
 8001632:	701a      	strb	r2, [r3, #0]
                        break;
 8001634:	e09c      	b.n	8001770 <draw_state+0x34c>
                    case UNCALIBRATED:
                        color = C_RED;
 8001636:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800163a:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "UNCALIBRTD");
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4a36      	ldr	r2, [pc, #216]	; (800171c <draw_state+0x2f8>)
 8001642:	ca07      	ldmia	r2, {r0, r1, r2}
 8001644:	c303      	stmia	r3!, {r0, r1}
 8001646:	801a      	strh	r2, [r3, #0]
 8001648:	3302      	adds	r3, #2
 800164a:	0c12      	lsrs	r2, r2, #16
 800164c:	701a      	strb	r2, [r3, #0]
                        break;
 800164e:	e08f      	b.n	8001770 <draw_state+0x34c>
                    case HARD_BSPD:
                        color = C_RED;
 8001650:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001654:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HARD BSPD");
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	4a31      	ldr	r2, [pc, #196]	; (8001720 <draw_state+0x2fc>)
 800165c:	ca07      	ldmia	r2, {r0, r1, r2}
 800165e:	c303      	stmia	r3!, {r0, r1}
 8001660:	801a      	strh	r2, [r3, #0]
                        break;
 8001662:	e085      	b.n	8001770 <draw_state+0x34c>
                    case MC_FAULT:
                        color = C_RED;
 8001664:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001668:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " MC FAULT ");
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4a2d      	ldr	r2, [pc, #180]	; (8001724 <draw_state+0x300>)
 8001670:	ca07      	ldmia	r2, {r0, r1, r2}
 8001672:	c303      	stmia	r3!, {r0, r1}
 8001674:	801a      	strh	r2, [r3, #0]
 8001676:	3302      	adds	r3, #2
 8001678:	0c12      	lsrs	r2, r2, #16
 800167a:	701a      	strb	r2, [r3, #0]
                        break;
 800167c:	e078      	b.n	8001770 <draw_state+0x34c>
                    default:
                        color = C_RED;
 800167e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001682:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " YO WTF? ");
 8001684:	f107 030c 	add.w	r3, r7, #12
 8001688:	4a27      	ldr	r2, [pc, #156]	; (8001728 <draw_state+0x304>)
 800168a:	ca07      	ldmia	r2, {r0, r1, r2}
 800168c:	c303      	stmia	r3!, {r0, r1}
 800168e:	801a      	strh	r2, [r3, #0]
                        break;
 8001690:	e06e      	b.n	8001770 <draw_state+0x34c>
                }
            }
            else
            {
                // *************** NO FAULTS ***************
                color = C_GREEN;
 8001692:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001696:	83fb      	strh	r3, [r7, #30]
                switch(state)
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b03      	cmp	r3, #3
 800169c:	d85e      	bhi.n	800175c <draw_state+0x338>
 800169e:	a201      	add	r2, pc, #4	; (adr r2, 80016a4 <draw_state+0x280>)
 80016a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a4:	080016b5 	.word	0x080016b5
 80016a8:	080016c9 	.word	0x080016c9
 80016ac:	08001735 	.word	0x08001735
 80016b0:	08001749 	.word	0x08001749
                {
                    case LV:
                        strcpy(string, "    LV    ");
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <draw_state+0x308>)
 80016ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80016bc:	c303      	stmia	r3!, {r0, r1}
 80016be:	801a      	strh	r2, [r3, #0]
 80016c0:	3302      	adds	r3, #2
 80016c2:	0c12      	lsrs	r2, r2, #16
 80016c4:	701a      	strb	r2, [r3, #0]
                        break;
 80016c6:	e053      	b.n	8001770 <draw_state+0x34c>
                    case PRECHARGING:
                        strcpy(string, "PRECHARGE ");
 80016c8:	f107 030c 	add.w	r3, r7, #12
 80016cc:	4a18      	ldr	r2, [pc, #96]	; (8001730 <draw_state+0x30c>)
 80016ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80016d0:	c303      	stmia	r3!, {r0, r1}
 80016d2:	801a      	strh	r2, [r3, #0]
 80016d4:	3302      	adds	r3, #2
 80016d6:	0c12      	lsrs	r2, r2, #16
 80016d8:	701a      	strb	r2, [r3, #0]
                        break;
 80016da:	e049      	b.n	8001770 <draw_state+0x34c>
 80016dc:	20000088 	.word	0x20000088
 80016e0:	20000310 	.word	0x20000310
 80016e4:	0800eb08 	.word	0x0800eb08
 80016e8:	0800eb14 	.word	0x0800eb14
 80016ec:	0800eb20 	.word	0x0800eb20
 80016f0:	0800eb2c 	.word	0x0800eb2c
 80016f4:	0800eb38 	.word	0x0800eb38
 80016f8:	0800eb44 	.word	0x0800eb44
 80016fc:	0800eb50 	.word	0x0800eb50
 8001700:	0800eb5c 	.word	0x0800eb5c
 8001704:	0800eb68 	.word	0x0800eb68
 8001708:	0800eb74 	.word	0x0800eb74
 800170c:	0800eb80 	.word	0x0800eb80
 8001710:	0800eb8c 	.word	0x0800eb8c
 8001714:	0800eb98 	.word	0x0800eb98
 8001718:	0800eba4 	.word	0x0800eba4
 800171c:	0800ebb0 	.word	0x0800ebb0
 8001720:	0800ebbc 	.word	0x0800ebbc
 8001724:	0800ebc8 	.word	0x0800ebc8
 8001728:	0800ebd4 	.word	0x0800ebd4
 800172c:	0800ebe0 	.word	0x0800ebe0
 8001730:	0800ebec 	.word	0x0800ebec
                    case HV_ENABLED:
                        strcpy(string, "HV ENABLED");
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	4a13      	ldr	r2, [pc, #76]	; (8001788 <draw_state+0x364>)
 800173a:	ca07      	ldmia	r2, {r0, r1, r2}
 800173c:	c303      	stmia	r3!, {r0, r1}
 800173e:	801a      	strh	r2, [r3, #0]
 8001740:	3302      	adds	r3, #2
 8001742:	0c12      	lsrs	r2, r2, #16
 8001744:	701a      	strb	r2, [r3, #0]
                        break;
 8001746:	e013      	b.n	8001770 <draw_state+0x34c>
                    case DRIVE:
                        strcpy(string, "  DRIVE   ");
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	4a0f      	ldr	r2, [pc, #60]	; (800178c <draw_state+0x368>)
 800174e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001750:	c303      	stmia	r3!, {r0, r1}
 8001752:	801a      	strh	r2, [r3, #0]
 8001754:	3302      	adds	r3, #2
 8001756:	0c12      	lsrs	r2, r2, #16
 8001758:	701a      	strb	r2, [r3, #0]
                        break;
 800175a:	e009      	b.n	8001770 <draw_state+0x34c>
                    default:
						color = C_RED;
 800175c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001760:	83fb      	strh	r3, [r7, #30]
						strcpy(string, " YO WTF? ");
 8001762:	f107 030c 	add.w	r3, r7, #12
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <draw_state+0x36c>)
 8001768:	ca07      	ldmia	r2, {r0, r1, r2}
 800176a:	c303      	stmia	r3!, {r0, r1}
 800176c:	801a      	strh	r2, [r3, #0]
						break;
 800176e:	bf00      	nop
                }
            }
    }

    draw_textbox(&state_box, color, string, 11);
 8001770:	f107 020c 	add.w	r2, r7, #12
 8001774:	8bf9      	ldrh	r1, [r7, #30]
 8001776:	230b      	movs	r3, #11
 8001778:	4806      	ldr	r0, [pc, #24]	; (8001794 <draw_state+0x370>)
 800177a:	f000 f8c7 	bl	800190c <draw_textbox>
 800177e:	e000      	b.n	8001782 <draw_state+0x35e>
        return;
 8001780:	bf00      	nop
}
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	0800ebf8 	.word	0x0800ebf8
 800178c:	0800ec04 	.word	0x0800ec04
 8001790:	0800ebd4 	.word	0x0800ebd4
 8001794:	20000254 	.word	0x20000254

08001798 <draw_glv_v>:


void draw_glv_v(uint32_t data) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
    // translate from voltage divider measurement to true voltage
    // y = 0.4295x + 18.254
    data *= 859;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f240 325b 	movw	r2, #859	; 0x35b
 80017a6:	fb02 f303 	mul.w	r3, r2, r3
 80017aa:	607b      	str	r3, [r7, #4]
    data /= 2000; // 0.4295
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <draw_glv_v+0x74>)
 80017b0:	fba2 2303 	umull	r2, r3, r2, r3
 80017b4:	09db      	lsrs	r3, r3, #7
 80017b6:	607b      	str	r3, [r7, #4]
    data += 18;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3312      	adds	r3, #18
 80017bc:	607b      	str	r3, [r7, #4]
    UG_COLOR color;
    if (data > 1150) {
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f240 427e 	movw	r2, #1150	; 0x47e
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d903      	bls.n	80017d0 <draw_glv_v+0x38>
        color = C_GREEN;
 80017c8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017cc:	81fb      	strh	r3, [r7, #14]
 80017ce:	e00b      	b.n	80017e8 <draw_glv_v+0x50>
    } else if (data > 1100) {
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f240 424c 	movw	r2, #1100	; 0x44c
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d903      	bls.n	80017e2 <draw_glv_v+0x4a>
        color = C_YELLOW;
 80017da:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80017de:	81fb      	strh	r3, [r7, #14]
 80017e0:	e002      	b.n	80017e8 <draw_glv_v+0x50>
    } else {
    	color = C_RED;
 80017e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017e6:	81fb      	strh	r3, [r7, #14]
    }

    char str[6];
    sprintf(str, "%ld", data);
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	4908      	ldr	r1, [pc, #32]	; (8001810 <draw_glv_v+0x78>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f00c fd43 	bl	800e27c <siprintf>
    draw_textbox(&glv_v_box, color, str, 11);
 80017f6:	f107 0208 	add.w	r2, r7, #8
 80017fa:	89f9      	ldrh	r1, [r7, #14]
 80017fc:	230b      	movs	r3, #11
 80017fe:	4805      	ldr	r0, [pc, #20]	; (8001814 <draw_glv_v+0x7c>)
 8001800:	f000 f884 	bl	800190c <draw_textbox>
}
 8001804:	bf00      	nop
 8001806:	3710      	adds	r7, #16
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	10624dd3 	.word	0x10624dd3
 8001810:	0800ec10 	.word	0x0800ec10
 8001814:	2000005c 	.word	0x2000005c

08001818 <value_to_color>:



UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value)
{
 8001818:	b084      	sub	sp, #16
 800181a:	b490      	push	{r4, r7}
 800181c:	af00      	add	r7, sp, #0
 800181e:	f107 0408 	add.w	r4, r7, #8
 8001822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(cfg.grn_ylw_cutoff > cfg.ylw_org_cutoff)   // green for large red for small
 8001826:	8a3a      	ldrh	r2, [r7, #16]
 8001828:	8a7b      	ldrh	r3, [r7, #18]
 800182a:	429a      	cmp	r2, r3
 800182c:	d917      	bls.n	800185e <value_to_color+0x46>
    {
        if(value > cfg.grn_ylw_cutoff)
 800182e:	8a3b      	ldrh	r3, [r7, #16]
 8001830:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001832:	429a      	cmp	r2, r3
 8001834:	d902      	bls.n	800183c <value_to_color+0x24>
        {
            return C_GREEN;
 8001836:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800183a:	e027      	b.n	800188c <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 800183c:	8a7b      	ldrh	r3, [r7, #18]
 800183e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001840:	429a      	cmp	r2, r3
 8001842:	d902      	bls.n	800184a <value_to_color+0x32>
        {
            return C_YELLOW;
 8001844:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001848:	e020      	b.n	800188c <value_to_color+0x74>
        }
        else if(value > cfg.org_red_cutoff)
 800184a:	8abb      	ldrh	r3, [r7, #20]
 800184c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800184e:	429a      	cmp	r2, r3
 8001850:	d902      	bls.n	8001858 <value_to_color+0x40>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8001852:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8001856:	e019      	b.n	800188c <value_to_color+0x74>
        }
        else
        {
            return C_RED;
 8001858:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800185c:	e016      	b.n	800188c <value_to_color+0x74>
        }
    }
    else  // red for large green for small
    {
        if(value > cfg.org_red_cutoff)
 800185e:	8abb      	ldrh	r3, [r7, #20]
 8001860:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001862:	429a      	cmp	r2, r3
 8001864:	d902      	bls.n	800186c <value_to_color+0x54>
        {
            return C_RED;
 8001866:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800186a:	e00f      	b.n	800188c <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 800186c:	8a7b      	ldrh	r3, [r7, #18]
 800186e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001870:	429a      	cmp	r2, r3
 8001872:	d902      	bls.n	800187a <value_to_color+0x62>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8001874:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8001878:	e008      	b.n	800188c <value_to_color+0x74>
        }
        else if(value > cfg.grn_ylw_cutoff)
 800187a:	8a3b      	ldrh	r3, [r7, #16]
 800187c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800187e:	429a      	cmp	r2, r3
 8001880:	d902      	bls.n	8001888 <value_to_color+0x70>
        {
            return C_YELLOW;
 8001882:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001886:	e001      	b.n	800188c <value_to_color+0x74>
        }
        else
        {
            return C_GREEN;
 8001888:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
        }
    }
}
 800188c:	4618      	mov	r0, r3
 800188e:	46bd      	mov	sp, r7
 8001890:	bc90      	pop	{r4, r7}
 8001892:	b004      	add	sp, #16
 8001894:	4770      	bx	lr
	...

08001898 <draw_value_textbox>:

void draw_value_textbox(TEXTBOX_CONFIG* cfg, uint16_t value)
{
 8001898:	b5f0      	push	{r4, r5, r6, r7, lr}
 800189a:	b08f      	sub	sp, #60	; 0x3c
 800189c:	af08      	add	r7, sp, #32
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	460b      	mov	r3, r1
 80018a2:	807b      	strh	r3, [r7, #2]
	if(value == cfg->last_value)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d028      	beq.n	8001900 <draw_value_textbox+0x68>
	{
		return;
	}

	cfg->last_value = value;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	887a      	ldrh	r2, [r7, #2]
 80018b2:	84da      	strh	r2, [r3, #38]	; 0x26

	UG_COLOR color = value_to_color(*cfg, value);
 80018b4:	687e      	ldr	r6, [r7, #4]
 80018b6:	887b      	ldrh	r3, [r7, #2]
 80018b8:	9307      	str	r3, [sp, #28]
 80018ba:	466d      	mov	r5, sp
 80018bc:	f106 0410 	add.w	r4, r6, #16
 80018c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80018c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80018c4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80018c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80018cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80018d0:	f7ff ffa2 	bl	8001818 <value_to_color>
 80018d4:	4603      	mov	r3, r0
 80018d6:	82fb      	strh	r3, [r7, #22]
	char string[10];
	uint16_t str_len = sprintf(string, "%d%c", value, cfg->units);
 80018d8:	887a      	ldrh	r2, [r7, #2]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80018e0:	f107 0008 	add.w	r0, r7, #8
 80018e4:	4908      	ldr	r1, [pc, #32]	; (8001908 <draw_value_textbox+0x70>)
 80018e6:	f00c fcc9 	bl	800e27c <siprintf>
 80018ea:	4603      	mov	r3, r0
 80018ec:	82bb      	strh	r3, [r7, #20]

	draw_textbox(cfg, color, string, str_len);
 80018ee:	8abb      	ldrh	r3, [r7, #20]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	f107 0208 	add.w	r2, r7, #8
 80018f6:	8af9      	ldrh	r1, [r7, #22]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f807 	bl	800190c <draw_textbox>
 80018fe:	e000      	b.n	8001902 <draw_value_textbox+0x6a>
		return;
 8001900:	bf00      	nop
}
 8001902:	371c      	adds	r7, #28
 8001904:	46bd      	mov	sp, r7
 8001906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001908:	0800ec14 	.word	0x0800ec14

0800190c <draw_textbox>:

void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len)
{
 800190c:	b590      	push	{r4, r7, lr}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af02      	add	r7, sp, #8
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	607a      	str	r2, [r7, #4]
 8001916:	461a      	mov	r2, r3
 8001918:	460b      	mov	r3, r1
 800191a:	817b      	strh	r3, [r7, #10]
 800191c:	4613      	mov	r3, r2
 800191e:	727b      	strb	r3, [r7, #9]
    // determine x and y coordinates to center text
    uint16_t text_x = (cfg->box_x2 + cfg->box_x1)/2 - ((str_len * cfg->font.char_width)/2);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	889b      	ldrh	r3, [r3, #4]
 8001924:	461a      	mov	r2, r3
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	881b      	ldrh	r3, [r3, #0]
 800192a:	4413      	add	r3, r2
 800192c:	2b00      	cmp	r3, #0
 800192e:	da00      	bge.n	8001932 <draw_textbox+0x26>
 8001930:	3301      	adds	r3, #1
 8001932:	105b      	asrs	r3, r3, #1
 8001934:	b29a      	uxth	r2, r3
 8001936:	7a7b      	ldrb	r3, [r7, #9]
 8001938:	68f9      	ldr	r1, [r7, #12]
 800193a:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 800193e:	fb01 f303 	mul.w	r3, r1, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	da00      	bge.n	8001948 <draw_textbox+0x3c>
 8001946:	3301      	adds	r3, #1
 8001948:	105b      	asrs	r3, r3, #1
 800194a:	425b      	negs	r3, r3
 800194c:	b29b      	uxth	r3, r3
 800194e:	4413      	add	r3, r2
 8001950:	82fb      	strh	r3, [r7, #22]
    uint16_t text_y = (cfg->box_y2 + cfg->box_y1)/2 - (cfg->font.char_height/2);
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	88db      	ldrh	r3, [r3, #6]
 8001956:	461a      	mov	r2, r3
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	885b      	ldrh	r3, [r3, #2]
 800195c:	4413      	add	r3, r2
 800195e:	2b00      	cmp	r3, #0
 8001960:	da00      	bge.n	8001964 <draw_textbox+0x58>
 8001962:	3301      	adds	r3, #1
 8001964:	105b      	asrs	r3, r3, #1
 8001966:	b29a      	uxth	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <draw_textbox+0x68>
 8001972:	3301      	adds	r3, #1
 8001974:	105b      	asrs	r3, r3, #1
 8001976:	b21b      	sxth	r3, r3
 8001978:	b29b      	uxth	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	82bb      	strh	r3, [r7, #20]

    if(color != cfg->last_color)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001982:	897a      	ldrh	r2, [r7, #10]
 8001984:	429a      	cmp	r2, r3
 8001986:	d013      	beq.n	80019b0 <draw_textbox+0xa4>
    {
        UG_FillFrame(cfg->box_x1, cfg->box_y1, cfg->box_x2, cfg->box_y2, color);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	b218      	sxth	r0, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	885b      	ldrh	r3, [r3, #2]
 8001992:	b219      	sxth	r1, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	889b      	ldrh	r3, [r3, #4]
 8001998:	b21a      	sxth	r2, r3
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	88db      	ldrh	r3, [r3, #6]
 800199e:	b21c      	sxth	r4, r3
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	9300      	str	r3, [sp, #0]
 80019a4:	4623      	mov	r3, r4
 80019a6:	f001 fda9 	bl	80034fc <UG_FillFrame>
        cfg->last_color = color;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	897a      	ldrh	r2, [r7, #10]
 80019ae:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    UG_FontSelect(&cfg->font);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3310      	adds	r3, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f001 fd69 	bl	800348c <UG_FontSelect>
    UG_PutColorString(text_x, text_y, string, C_BLACK, color);
 80019ba:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 80019be:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80019c2:	897b      	ldrh	r3, [r7, #10]
 80019c4:	9300      	str	r3, [sp, #0]
 80019c6:	2300      	movs	r3, #0
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	f001 fe8d 	bl	80036e8 <UG_PutColorString>
}
 80019ce:	bf00      	nop
 80019d0:	371c      	adds	r7, #28
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd90      	pop	{r4, r7, pc}
	...

080019d8 <change_state>:
volatile state_t state = STARTUP;
volatile error_t error = NONE;

/************ States ************/

void change_state(const state_t new_state) {
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	71fb      	strb	r3, [r7, #7]
    // Handle edge cases
    if (state == FAULT && new_state != FAULT) {
 80019e2:	4b0a      	ldr	r3, [pc, #40]	; (8001a0c <change_state+0x34>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d105      	bne.n	80019f8 <change_state+0x20>
 80019ec:	79fb      	ldrb	r3, [r7, #7]
 80019ee:	2b04      	cmp	r3, #4
 80019f0:	d002      	beq.n	80019f8 <change_state+0x20>
        // Reset the error cause when exiting fault state
        error = NONE;
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <change_state+0x38>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]
    }

    state = new_state;
 80019f8:	4a04      	ldr	r2, [pc, #16]	; (8001a0c <change_state+0x34>)
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	7013      	strb	r3, [r2, #0]
}
 80019fe:	bf00      	nop
 8001a00:	370c      	adds	r7, #12
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	20000089 	.word	0x20000089
 8001a10:	20000312 	.word	0x20000312

08001a14 <report_fault>:

void report_fault(error_t _error) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
    change_state(FAULT);
 8001a1e:	2004      	movs	r0, #4
 8001a20:	f7ff ffda 	bl	80019d8 <change_state>
    // Cause of error
    error = _error;
 8001a24:	4a03      	ldr	r2, [pc, #12]	; (8001a34 <report_fault+0x20>)
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	7013      	strb	r3, [r2, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20000312 	.word	0x20000312

08001a38 <hv_requested>:

uint8_t hv_requested(){
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
    return (state == PRECHARGING)
 8001a3c:	4b13      	ldr	r3, [pc, #76]	; (8001a8c <hv_requested+0x54>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	b2db      	uxtb	r3, r3
        || (state == HV_ENABLED)
        || (state == DRIVE)
        || (error == BRAKE_NOT_PRESSED)
        || (error == SENSOR_DISCREPANCY)
        || (error == BRAKE_IMPLAUSIBLE);
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d018      	beq.n	8001a78 <hv_requested+0x40>
        || (state == HV_ENABLED)
 8001a46:	4b11      	ldr	r3, [pc, #68]	; (8001a8c <hv_requested+0x54>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d013      	beq.n	8001a78 <hv_requested+0x40>
        || (state == DRIVE)
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <hv_requested+0x54>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	d00e      	beq.n	8001a78 <hv_requested+0x40>
        || (error == BRAKE_NOT_PRESSED)
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <hv_requested+0x58>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b03      	cmp	r3, #3
 8001a62:	d009      	beq.n	8001a78 <hv_requested+0x40>
        || (error == SENSOR_DISCREPANCY)
 8001a64:	4b0a      	ldr	r3, [pc, #40]	; (8001a90 <hv_requested+0x58>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b05      	cmp	r3, #5
 8001a6c:	d004      	beq.n	8001a78 <hv_requested+0x40>
        || (error == BRAKE_IMPLAUSIBLE);
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <hv_requested+0x58>)
 8001a70:	781b      	ldrb	r3, [r3, #0]
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	2b06      	cmp	r3, #6
 8001a76:	d101      	bne.n	8001a7c <hv_requested+0x44>
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e000      	b.n	8001a7e <hv_requested+0x46>
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000089 	.word	0x20000089
 8001a90:	20000312 	.word	0x20000312

08001a94 <one_byte_state>:

uint8_t one_byte_state(){
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
    uint8_t state_byte = state;
 8001a9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ac4 <one_byte_state+0x30>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	71fb      	strb	r3, [r7, #7]
    if (state == FAULT) {
 8001aa0:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <one_byte_state+0x30>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b04      	cmp	r3, #4
 8001aa8:	d104      	bne.n	8001ab4 <one_byte_state+0x20>
        state_byte = 0b10000000 + error; // greatest bit = 1 if fault
 8001aaa:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <one_byte_state+0x34>)
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	b2db      	uxtb	r3, r3
 8001ab0:	3b80      	subs	r3, #128	; 0x80
 8001ab2:	71fb      	strb	r3, [r7, #7]
    }

    return state_byte;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	20000089 	.word	0x20000089
 8001ac8:	20000312 	.word	0x20000312

08001acc <traction_control_enable>:
 *  - TC = switches & 0b100
 *  - Hv = switches & 0b10
 *  - Dr = switches & 0b1
 */

uint8_t traction_control_enable() {
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(GPIOG, BUTTON_1_Pin);
 8001ad0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <traction_control_enable+0x14>)
 8001ad6:	f004 fc6b 	bl	80063b0 <HAL_GPIO_ReadPin>
 8001ada:	4603      	mov	r3, r0
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	40021800 	.word	0x40021800

08001ae4 <hv_switch>:

uint8_t hv_switch() {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOG, HV_REQUEST_Pin);
 8001ae8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <hv_switch+0x14>)
 8001aee:	f004 fc5f 	bl	80063b0 <HAL_GPIO_ReadPin>
 8001af2:	4603      	mov	r3, r0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40021800 	.word	0x40021800

08001afc <drive_switch>:

uint8_t drive_switch() {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOG, DRIVE_REQUEST_Pin);
 8001b00:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b04:	4802      	ldr	r0, [pc, #8]	; (8001b10 <drive_switch+0x14>)
 8001b06:	f004 fc53 	bl	80063b0 <HAL_GPIO_ReadPin>
 8001b0a:	4603      	mov	r3, r0
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40021800 	.word	0x40021800

08001b14 <shutdown_closed>:


uint8_t shutdown_closed() {
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
    if (estop_flags) return 0;
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <shutdown_closed+0x30>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <shutdown_closed+0x12>
 8001b22:	2300      	movs	r3, #0
 8001b24:	e009      	b.n	8001b3a <shutdown_closed+0x26>
    return (shutdown_flags & 0b00111000) == 0b00111000;
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <shutdown_closed+0x34>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b30:	2b38      	cmp	r3, #56	; 0x38
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	20000208 	.word	0x20000208
 8001b48:	20000000 	.word	0x20000000

08001b4c <HAL_ADC_ConvCpltCallback>:
#define ADC_BUFLEN 3
uint32_t ADC_buf[ADC_BUFLEN];
uint8_t ADC_flag = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    ADC_flag = 1;
 8001b54:	4b04      	ldr	r3, [pc, #16]	; (8001b68 <HAL_ADC_ConvCpltCallback+0x1c>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	200006a0 	.word	0x200006a0

08001b6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b70:	f002 fc37 	bl	80043e2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b74:	f000 f9fc 	bl	8001f70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b78:	f000 fd50 	bl	800261c <MX_GPIO_Init>
  MX_DMA_Init();
 8001b7c:	f000 fcce 	bl	800251c <MX_DMA_Init>
  MX_CAN2_Init();
 8001b80:	f000 fb54 	bl	800222c <MX_CAN2_Init>
  //MX_SDMMC1_SD_Init();
  MX_ADC1_Init();
 8001b84:	f000 fa60 	bl	8002048 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001b88:	f000 fac8 	bl	800211c <MX_ADC3_Init>
  MX_TIM2_Init();
 8001b8c:	f000 fb82 	bl	8002294 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001b90:	f000 fbd6 	bl	8002340 <MX_TIM4_Init>
  MX_UART4_Init();
 8001b94:	f000 fc62 	bl	800245c <MX_UART4_Init>
  MX_UART7_Init();
 8001b98:	f000 fc90 	bl	80024bc <MX_UART7_Init>
  MX_FMC_Init();
 8001b9c:	f000 fcdc 	bl	8002558 <MX_FMC_Init>
  MX_CAN1_Init();
 8001ba0:	f000 fb0e 	bl	80021c0 <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8001ba4:	f00b fd2c 	bl	800d600 <MX_USB_DEVICE_Init>
  MX_TIM6_Init();
 8001ba8:	f000 fc20 	bl	80023ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  HAL_ADCEx_Calibration_Start(&hadc1);
  HAL_ADC_Start_DMA(&hadc1, ADC_buf, ADC_BUFLEN);
 8001bac:	2203      	movs	r2, #3
 8001bae:	49b1      	ldr	r1, [pc, #708]	; (8001e74 <main+0x308>)
 8001bb0:	48b1      	ldr	r0, [pc, #708]	; (8001e78 <main+0x30c>)
 8001bb2:	f002 fcdb 	bl	800456c <HAL_ADC_Start_DMA>

  init_sensors();
 8001bb6:	f000 fdf7 	bl	80027a8 <init_sensors>

  Display_Init();
 8001bba:	f7ff faf3 	bl	80011a4 <Display_Init>
  UG_FontSelect(&FONT_12X16);
 8001bbe:	48af      	ldr	r0, [pc, #700]	; (8001e7c <main+0x310>)
 8001bc0:	f001 fc64 	bl	800348c <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 8001bc4:	2000      	movs	r0, #0
 8001bc6:	f001 fe49 	bl	800385c <UG_SetBackcolor>
  UG_SetForecolor(C_YELLOW);
 8001bca:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8001bce:	f001 fe33 	bl	8003838 <UG_SetForecolor>
  Display_CalibrateScreen();
 8001bd2:	f7ff fb11 	bl	80011f8 <Display_CalibrateScreen>
  Display_DriveTemplate();
 8001bd6:	f7ff fb3b 	bl	8001250 <Display_DriveTemplate>

  HAL_TIM_Base_Start(&htim6);
 8001bda:	48a9      	ldr	r0, [pc, #676]	; (8001e80 <main+0x314>)
 8001bdc:	f007 f87a 	bl	8008cd4 <HAL_TIM_Base_Start>

  // TEST

  TxHeader2.IDE = CAN_ID_STD;
 8001be0:	4ba8      	ldr	r3, [pc, #672]	; (8001e84 <main+0x318>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
	TxHeader2.StdId = 0x66;
 8001be6:	4ba7      	ldr	r3, [pc, #668]	; (8001e84 <main+0x318>)
 8001be8:	2266      	movs	r2, #102	; 0x66
 8001bea:	601a      	str	r2, [r3, #0]
	TxHeader2.RTR = CAN_RTR_DATA;
 8001bec:	4ba5      	ldr	r3, [pc, #660]	; (8001e84 <main+0x318>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	60da      	str	r2, [r3, #12]
	TxHeader2.DLC = 8;
 8001bf2:	4ba4      	ldr	r3, [pc, #656]	; (8001e84 <main+0x318>)
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	611a      	str	r2, [r3, #16]
  {


	  // TEST

	  if (ADC_flag) {
 8001bf8:	4ba3      	ldr	r3, [pc, #652]	; (8001e88 <main+0x31c>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d036      	beq.n	8001c6e <main+0x102>
		  ADC_flag = 0;
 8001c00:	4ba1      	ldr	r3, [pc, #644]	; (8001e88 <main+0x31c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]

		  TxData2[0] = ADC_buf[0] & 0xff;
 8001c06:	4b9b      	ldr	r3, [pc, #620]	; (8001e74 <main+0x308>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b9f      	ldr	r3, [pc, #636]	; (8001e8c <main+0x320>)
 8001c0e:	701a      	strb	r2, [r3, #0]
		  TxData2[1] = (ADC_buf[0] & 0xff00) >> 8;
 8001c10:	4b98      	ldr	r3, [pc, #608]	; (8001e74 <main+0x308>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0a1b      	lsrs	r3, r3, #8
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	4b9c      	ldr	r3, [pc, #624]	; (8001e8c <main+0x320>)
 8001c1a:	705a      	strb	r2, [r3, #1]
		  TxData2[2] = (ADC_buf[0] & 0xff0000) >> 16;
 8001c1c:	4b95      	ldr	r3, [pc, #596]	; (8001e74 <main+0x308>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	0c1b      	lsrs	r3, r3, #16
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b99      	ldr	r3, [pc, #612]	; (8001e8c <main+0x320>)
 8001c26:	709a      	strb	r2, [r3, #2]
		  TxData2[3] = (ADC_buf[0] & 0xff000000) >> 24;
 8001c28:	4b92      	ldr	r3, [pc, #584]	; (8001e74 <main+0x308>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	0e1b      	lsrs	r3, r3, #24
 8001c2e:	b2da      	uxtb	r2, r3
 8001c30:	4b96      	ldr	r3, [pc, #600]	; (8001e8c <main+0x320>)
 8001c32:	70da      	strb	r2, [r3, #3]

		  TxData2[0] = ADC_buf[1] & 0xff;
 8001c34:	4b8f      	ldr	r3, [pc, #572]	; (8001e74 <main+0x308>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b94      	ldr	r3, [pc, #592]	; (8001e8c <main+0x320>)
 8001c3c:	701a      	strb	r2, [r3, #0]
		  TxData2[1] = (ADC_buf[2] & 0xff00) >> 8;
 8001c3e:	4b8d      	ldr	r3, [pc, #564]	; (8001e74 <main+0x308>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	0a1b      	lsrs	r3, r3, #8
 8001c44:	b2da      	uxtb	r2, r3
 8001c46:	4b91      	ldr	r3, [pc, #580]	; (8001e8c <main+0x320>)
 8001c48:	705a      	strb	r2, [r3, #1]
		  TxData2[2] = (ADC_buf[3] & 0xff0000) >> 16;
 8001c4a:	4b8a      	ldr	r3, [pc, #552]	; (8001e74 <main+0x308>)
 8001c4c:	68db      	ldr	r3, [r3, #12]
 8001c4e:	0c1b      	lsrs	r3, r3, #16
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b8e      	ldr	r3, [pc, #568]	; (8001e8c <main+0x320>)
 8001c54:	709a      	strb	r2, [r3, #2]
		  TxData2[3] = (ADC_buf[4] & 0xff000000) >> 24;
 8001c56:	4b87      	ldr	r3, [pc, #540]	; (8001e74 <main+0x308>)
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	0e1b      	lsrs	r3, r3, #24
 8001c5c:	b2da      	uxtb	r2, r3
 8001c5e:	4b8b      	ldr	r3, [pc, #556]	; (8001e8c <main+0x320>)
 8001c60:	70da      	strb	r2, [r3, #3]

		  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader2, TxData2, &TxMailbox2) != HAL_OK) {}
 8001c62:	4b8b      	ldr	r3, [pc, #556]	; (8001e90 <main+0x324>)
 8001c64:	4a89      	ldr	r2, [pc, #548]	; (8001e8c <main+0x320>)
 8001c66:	4987      	ldr	r1, [pc, #540]	; (8001e84 <main+0x318>)
 8001c68:	488a      	ldr	r0, [pc, #552]	; (8001e94 <main+0x328>)
 8001c6a:	f003 f95a 	bl	8004f22 <HAL_CAN_AddTxMessage>
	  }

	  // TEST END

	  Display_Update();
 8001c6e:	f7ff fb8f 	bl	8001390 <Display_Update>

	  update_sensor_vals();
 8001c72:	f000 fdd9 	bl	8002828 <update_sensor_vals>

	  can_tx_vcu_state(&hcan1);
 8001c76:	4887      	ldr	r0, [pc, #540]	; (8001e94 <main+0x328>)
 8001c78:	f7ff f9c4 	bl	8001004 <can_tx_vcu_state>

	  if (!mc_lockout) {
 8001c7c:	4b86      	ldr	r3, [pc, #536]	; (8001e98 <main+0x32c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d102      	bne.n	8001c8c <main+0x120>
		  can_tx_torque_request(&hcan1);
 8001c86:	4883      	ldr	r0, [pc, #524]	; (8001e94 <main+0x328>)
 8001c88:	f7ff fa00 	bl	800108c <can_tx_torque_request>
	  }

	  // Traction control
	  if (traction_control_enable()) {
 8001c8c:	f7ff ff1e 	bl	8001acc <traction_control_enable>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <main+0x12e>
		  traction_control_PID();
 8001c96:	f001 fa93 	bl	80031c0 <traction_control_PID>
	  }

	  // If shutdown circuit opens in any state
	  if (!shutdown_closed()) {
 8001c9a:	f7ff ff3b 	bl	8001b14 <shutdown_closed>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d102      	bne.n	8001caa <main+0x13e>
		  report_fault(SHUTDOWN_CIRCUIT_OPEN);
 8001ca4:	2007      	movs	r0, #7
 8001ca6:	f7ff feb5 	bl	8001a14 <report_fault>
	  //if hard BSPD trips in any state
 //	  if (!HAL_GPIO_ReadPin(BSPD_LATCH){
 //		  report_fault(HARD_BSPD);
 //	  }

	  if (mc_fault) {
 8001caa:	4b7c      	ldr	r3, [pc, #496]	; (8001e9c <main+0x330>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <main+0x14e>
		  report_fault(MC_FAULT);
 8001cb4:	200a      	movs	r0, #10
 8001cb6:	f7ff fead 	bl	8001a14 <report_fault>
	  }

	  switch (state) {
 8001cba:	4b79      	ldr	r3, [pc, #484]	; (8001ea0 <main+0x334>)
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	2b05      	cmp	r3, #5
 8001cc2:	d899      	bhi.n	8001bf8 <main+0x8c>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <main+0x160>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001d09 	.word	0x08001d09
 8001cd0:	08001d45 	.word	0x08001d45
 8001cd4:	08001d81 	.word	0x08001d81
 8001cd8:	08001db9 	.word	0x08001db9
 8001cdc:	08001e01 	.word	0x08001e01
 8001ce0:	08001ce5 	.word	0x08001ce5
		  case STARTUP:
			  run_calibration();
 8001ce4:	f000 fd8c 	bl	8002800 <run_calibration>

			  if (!hv_switch() && !drive_switch()) {
 8001ce8:	f7ff fefc 	bl	8001ae4 <hv_switch>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 8132 	bne.w	8001f58 <main+0x3ec>
 8001cf4:	f7ff ff02 	bl	8001afc <drive_switch>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	f040 812c 	bne.w	8001f58 <main+0x3ec>
				  change_state(LV);
 8001d00:	2000      	movs	r0, #0
 8001d02:	f7ff fe69 	bl	80019d8 <change_state>
			  }
			  break;
 8001d06:	e127      	b.n	8001f58 <main+0x3ec>
		  case LV:
			  run_calibration();
 8001d08:	f000 fd7a 	bl	8002800 <run_calibration>

			  if (drive_switch()) {
 8001d0c:	f7ff fef6 	bl	8001afc <drive_switch>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <main+0x1b2>
				  // Drive switch should not be enabled during LV
				  report_fault(DRIVE_REQUEST_FROM_LV);
 8001d16:	2001      	movs	r0, #1
 8001d18:	f7ff fe7c 	bl	8001a14 <report_fault>
				  break;
 8001d1c:	e126      	b.n	8001f6c <main+0x400>
			  }

			  if (hv_switch()) {
 8001d1e:	f7ff fee1 	bl	8001ae4 <hv_switch>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 8119 	beq.w	8001f5c <main+0x3f0>
				  // HV switch was flipped
				  // check if APPS pedal was calibrated
				  if (sensors_calibrated()) {
 8001d2a:	f000 fdfb 	bl	8002924 <sensors_calibrated>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <main+0x1d0>
					  // Start charging the car to high voltage state
					  change_state(PRECHARGING);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f7ff fe4f 	bl	80019d8 <change_state>
				  } else {
					  report_fault(UNCALIBRATED);
				  }
			  }

			  break;
 8001d3a:	e10f      	b.n	8001f5c <main+0x3f0>
					  report_fault(UNCALIBRATED);
 8001d3c:	2008      	movs	r0, #8
 8001d3e:	f7ff fe69 	bl	8001a14 <report_fault>
			  break;
 8001d42:	e10b      	b.n	8001f5c <main+0x3f0>
		  case PRECHARGING:
			  if (capacitor_volt > PRECHARGE_THRESHOLD) {
 8001d44:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <main+0x338>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b29b      	uxth	r3, r3
 8001d4a:	f241 3270 	movw	r2, #4976	; 0x1370
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d903      	bls.n	8001d5a <main+0x1ee>
				  // Finished charging to HV on time
				  change_state(HV_ENABLED);
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff fe40 	bl	80019d8 <change_state>
				  break;
 8001d58:	e108      	b.n	8001f6c <main+0x400>
			  }
			  if (!hv_switch()) {
 8001d5a:	f7ff fec3 	bl	8001ae4 <hv_switch>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d103      	bne.n	8001d6c <main+0x200>
				  // Driver flipped off HV switch
				  change_state(LV);
 8001d64:	2000      	movs	r0, #0
 8001d66:	f7ff fe37 	bl	80019d8 <change_state>
				  break;
 8001d6a:	e0ff      	b.n	8001f6c <main+0x400>
			  }
			  if (drive_switch()) {
 8001d6c:	f7ff fec6 	bl	8001afc <drive_switch>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80f4 	beq.w	8001f60 <main+0x3f4>
				  // Drive switch should not be enabled during PRECHARGING
				  report_fault(DRIVE_REQUEST_FROM_LV);
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f7ff fe4b 	bl	8001a14 <report_fault>
				  break;
 8001d7e:	e0f5      	b.n	8001f6c <main+0x400>
			  }
			  break;
		  case HV_ENABLED:
			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules
 8001d80:	f7ff feb0 	bl	8001ae4 <hv_switch>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d103      	bne.n	8001d92 <main+0x226>
				  // Driver flipped off HV switch
				  change_state(LV);
 8001d8a:	2000      	movs	r0, #0
 8001d8c:	f7ff fe24 	bl	80019d8 <change_state>
				  break;
 8001d90:	e0ec      	b.n	8001f6c <main+0x400>
			  }

			  if (drive_switch()) {
 8001d92:	f7ff feb3 	bl	8001afc <drive_switch>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80e3 	beq.w	8001f64 <main+0x3f8>
				  // Driver flipped on drive switch
				  // Need to press on pedal at the same time to go to drive

				  if (brake_mashed()) {
 8001d9e:	f000 fddb 	bl	8002958 <brake_mashed>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <main+0x244>
					  change_state(DRIVE);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f7ff fe15 	bl	80019d8 <change_state>
					  // Driver didn't press pedal
					  report_fault(BRAKE_NOT_PRESSED);
				  }
			  }

			  break;
 8001dae:	e0d9      	b.n	8001f64 <main+0x3f8>
					  report_fault(BRAKE_NOT_PRESSED);
 8001db0:	2003      	movs	r0, #3
 8001db2:	f7ff fe2f 	bl	8001a14 <report_fault>
			  break;
 8001db6:	e0d5      	b.n	8001f64 <main+0x3f8>
		  case DRIVE:
			  // CM200 safety feature: starts in lockout mode, disable message must be sent before enable (torque requests)
			  if (mc_lockout) {
 8001db8:	4b37      	ldr	r3, [pc, #220]	; (8001e98 <main+0x32c>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d002      	beq.n	8001dc8 <main+0x25c>
				  can_tx_disable_MC(&hcan1);
 8001dc2:	4834      	ldr	r0, [pc, #208]	; (8001e94 <main+0x328>)
 8001dc4:	f7ff f9be 	bl	8001144 <can_tx_disable_MC>
			  }

			  if (!drive_switch()) {
 8001dc8:	f7ff fe98 	bl	8001afc <drive_switch>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d103      	bne.n	8001dda <main+0x26e>
				  // Drive switch was flipped off
				  // Revert to HV
				  change_state(HV_ENABLED);
 8001dd2:	2002      	movs	r0, #2
 8001dd4:	f7ff fe00 	bl	80019d8 <change_state>
				 break;
 8001dd8:	e0c8      	b.n	8001f6c <main+0x400>
			  }

			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules || capacitor_volt < PRECHARGE_THRESHOLD) {
 8001dda:	f7ff fe83 	bl	8001ae4 <hv_switch>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <main+0x280>
				  // HV switched flipped off, so can't drive
				  // or capacitor dropped below threshold
				  report_fault(HV_DISABLED_WHILE_DRIVING);
 8001de4:	2004      	movs	r0, #4
 8001de6:	f7ff fe15 	bl	8001a14 <report_fault>
				  break;
 8001dea:	e0bf      	b.n	8001f6c <main+0x400>
			  }

			  // ***** UNCOMMENT WHEN PEDALS WORK *****
			  if (brake_implausible()) {
 8001dec:	f000 fdf8 	bl	80029e0 <brake_implausible>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f000 80b8 	beq.w	8001f68 <main+0x3fc>
				  report_fault(BRAKE_IMPLAUSIBLE);
 8001df8:	2006      	movs	r0, #6
 8001dfa:	f7ff fe0b 	bl	8001a14 <report_fault>
			  }

			  break;
 8001dfe:	e0b3      	b.n	8001f68 <main+0x3fc>
		  case FAULT:
			  switch (error) {
 8001e00:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <main+0x33c>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	3b03      	subs	r3, #3
 8001e08:	2b04      	cmp	r3, #4
 8001e0a:	f200 808d 	bhi.w	8001f28 <main+0x3bc>
 8001e0e:	a201      	add	r2, pc, #4	; (adr r2, 8001e14 <main+0x2a8>)
 8001e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e14:	08001e29 	.word	0x08001e29
 8001e18:	08001f29 	.word	0x08001f29
 8001e1c:	08001e4d 	.word	0x08001e4d
 8001e20:	08001eb1 	.word	0x08001eb1
 8001e24:	08001f17 	.word	0x08001f17
				  case BRAKE_NOT_PRESSED:
					  if (!hv_switch())
 8001e28:	f7ff fe5c 	bl	8001ae4 <hv_switch>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d102      	bne.n	8001e38 <main+0x2cc>
						  change_state(LV);
 8001e32:	2000      	movs	r0, #0
 8001e34:	f7ff fdd0 	bl	80019d8 <change_state>

					  if (!drive_switch()) {
 8001e38:	f7ff fe60 	bl	8001afc <drive_switch>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f040 8080 	bne.w	8001f44 <main+0x3d8>
						  // reset drive switch and try again
						  change_state(HV_ENABLED);
 8001e44:	2002      	movs	r0, #2
 8001e46:	f7ff fdc7 	bl	80019d8 <change_state>
					  }
					  break;
 8001e4a:	e07b      	b.n	8001f44 <main+0x3d8>
				  case SENSOR_DISCREPANCY:
					  // stop power to motors if discrepancy persists for >100ms
					  // see rule T.4.2.5 in FSAE 2022 rulebook
					  if (!drive_switch()) {
 8001e4c:	f7ff fe56 	bl	8001afc <drive_switch>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d105      	bne.n	8001e62 <main+0x2f6>
						  discrepancy_timer_ms = 0;
 8001e56:	4b15      	ldr	r3, [pc, #84]	; (8001eac <main+0x340>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
						  change_state(HV_ENABLED);
 8001e5c:	2002      	movs	r0, #2
 8001e5e:	f7ff fdbb 	bl	80019d8 <change_state>
					  }

					  if (!hv_switch())
 8001e62:	f7ff fe3f 	bl	8001ae4 <hv_switch>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d16d      	bne.n	8001f48 <main+0x3dc>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 8001e6c:	2004      	movs	r0, #4
 8001e6e:	f7ff fdd1 	bl	8001a14 <report_fault>

					  break;
 8001e72:	e069      	b.n	8001f48 <main+0x3dc>
 8001e74:	20000694 	.word	0x20000694
 8001e78:	20000314 	.word	0x20000314
 8001e7c:	0801e084 	.word	0x0801e084
 8001e80:	200004ec 	.word	0x200004ec
 8001e84:	200006a4 	.word	0x200006a4
 8001e88:	200006a0 	.word	0x200006a0
 8001e8c:	200006c0 	.word	0x200006c0
 8001e90:	200006bc 	.word	0x200006bc
 8001e94:	20000404 	.word	0x20000404
 8001e98:	20000204 	.word	0x20000204
 8001e9c:	2000020a 	.word	0x2000020a
 8001ea0:	20000089 	.word	0x20000089
 8001ea4:	20000206 	.word	0x20000206
 8001ea8:	20000312 	.word	0x20000312
 8001eac:	200006ec 	.word	0x200006ec
				  case BRAKE_IMPLAUSIBLE:
					  if (!brake_implausible() && hv_switch() && drive_switch())
 8001eb0:	f000 fd96 	bl	80029e0 <brake_implausible>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d00c      	beq.n	8001eda <main+0x36e>
 8001ec0:	f7ff fe10 	bl	8001ae4 <hv_switch>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d007      	beq.n	8001eda <main+0x36e>
 8001eca:	f7ff fe17 	bl	8001afc <drive_switch>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d002      	beq.n	8001eda <main+0x36e>
						  change_state(DRIVE);
 8001ed4:	2003      	movs	r0, #3
 8001ed6:	f7ff fd7f 	bl	80019d8 <change_state>

					  if (!hv_switch() && !drive_switch())
 8001eda:	f7ff fe03 	bl	8001ae4 <hv_switch>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d107      	bne.n	8001ef4 <main+0x388>
 8001ee4:	f7ff fe0a 	bl	8001afc <drive_switch>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <main+0x388>
						  change_state(LV);
 8001eee:	2000      	movs	r0, #0
 8001ef0:	f7ff fd72 	bl	80019d8 <change_state>

					  if (!drive_switch())
 8001ef4:	f7ff fe02 	bl	8001afc <drive_switch>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d102      	bne.n	8001f04 <main+0x398>
						  change_state(HV_ENABLED);
 8001efe:	2002      	movs	r0, #2
 8001f00:	f7ff fd6a 	bl	80019d8 <change_state>

					  if (!hv_switch())
 8001f04:	f7ff fdee 	bl	8001ae4 <hv_switch>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d11e      	bne.n	8001f4c <main+0x3e0>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 8001f0e:	2004      	movs	r0, #4
 8001f10:	f7ff fd80 	bl	8001a14 <report_fault>

					  break;
 8001f14:	e01a      	b.n	8001f4c <main+0x3e0>
				  case SHUTDOWN_CIRCUIT_OPEN:
					  if (shutdown_closed()) {
 8001f16:	f7ff fdfd 	bl	8001b14 <shutdown_closed>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d017      	beq.n	8001f50 <main+0x3e4>
						  change_state(LV);
 8001f20:	2000      	movs	r0, #0
 8001f22:	f7ff fd59 	bl	80019d8 <change_state>
					  }
					  break;
 8001f26:	e013      	b.n	8001f50 <main+0x3e4>
 //					  if (!HAL_GPIO_ReadPin(BSPD_LATCH) {
 //						  change_state(LV);
 //			  		  }

				  default:  //UNCALIBRATED, DRIVE_REQUEST_FROM_LV, CONSERVATIVE_TIMER_MAXED, HV_DISABLED_WHILE_DRIVING, MC FAULT
					  if (!hv_switch() && !drive_switch()) {
 8001f28:	f7ff fddc 	bl	8001ae4 <hv_switch>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d110      	bne.n	8001f54 <main+0x3e8>
 8001f32:	f7ff fde3 	bl	8001afc <drive_switch>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10b      	bne.n	8001f54 <main+0x3e8>
						  change_state(LV);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7ff fd4b 	bl	80019d8 <change_state>
					  }
					  break;
 8001f42:	e007      	b.n	8001f54 <main+0x3e8>
					  break;
 8001f44:	bf00      	nop
 8001f46:	e011      	b.n	8001f6c <main+0x400>
					  break;
 8001f48:	bf00      	nop
 8001f4a:	e00f      	b.n	8001f6c <main+0x400>
					  break;
 8001f4c:	bf00      	nop
 8001f4e:	e00d      	b.n	8001f6c <main+0x400>
					  break;
 8001f50:	bf00      	nop
 8001f52:	e00b      	b.n	8001f6c <main+0x400>
					  break;
 8001f54:	bf00      	nop
			  }
			  break;
 8001f56:	e009      	b.n	8001f6c <main+0x400>
			  break;
 8001f58:	bf00      	nop
 8001f5a:	e64d      	b.n	8001bf8 <main+0x8c>
			  break;
 8001f5c:	bf00      	nop
 8001f5e:	e64b      	b.n	8001bf8 <main+0x8c>
			  break;
 8001f60:	bf00      	nop
 8001f62:	e649      	b.n	8001bf8 <main+0x8c>
			  break;
 8001f64:	bf00      	nop
 8001f66:	e647      	b.n	8001bf8 <main+0x8c>
			  break;
 8001f68:	bf00      	nop
 8001f6a:	e645      	b.n	8001bf8 <main+0x8c>
	  if (ADC_flag) {
 8001f6c:	e644      	b.n	8001bf8 <main+0x8c>
 8001f6e:	bf00      	nop

08001f70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b094      	sub	sp, #80	; 0x50
 8001f74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f76:	f107 0320 	add.w	r3, r7, #32
 8001f7a:	2230      	movs	r2, #48	; 0x30
 8001f7c:	2100      	movs	r1, #0
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f00c f99c 	bl	800e2bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f84:	f107 030c 	add.w	r3, r7, #12
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f94:	4b2a      	ldr	r3, [pc, #168]	; (8002040 <SystemClock_Config+0xd0>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f98:	4a29      	ldr	r2, [pc, #164]	; (8002040 <SystemClock_Config+0xd0>)
 8001f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa0:	4b27      	ldr	r3, [pc, #156]	; (8002040 <SystemClock_Config+0xd0>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fac:	4b25      	ldr	r3, [pc, #148]	; (8002044 <SystemClock_Config+0xd4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a24      	ldr	r2, [pc, #144]	; (8002044 <SystemClock_Config+0xd4>)
 8001fb2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fb6:	6013      	str	r3, [r2, #0]
 8001fb8:	4b22      	ldr	r3, [pc, #136]	; (8002044 <SystemClock_Config+0xd4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fc0:	607b      	str	r3, [r7, #4]
 8001fc2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001fd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fd8:	2308      	movs	r3, #8
 8001fda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001fdc:	23d8      	movs	r3, #216	; 0xd8
 8001fde:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001fe4:	2309      	movs	r3, #9
 8001fe6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fe8:	f107 0320 	add.w	r3, r7, #32
 8001fec:	4618      	mov	r0, r3
 8001fee:	f005 fd19 	bl	8007a24 <HAL_RCC_OscConfig>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001ff8:	f000 fbd0 	bl	800279c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001ffc:	f005 fcc2 	bl	8007984 <HAL_PWREx_EnableOverDrive>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8002006:	f000 fbc9 	bl	800279c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800200a:	230f      	movs	r3, #15
 800200c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800200e:	2302      	movs	r3, #2
 8002010:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002012:	2300      	movs	r3, #0
 8002014:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002016:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800201a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800201c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002020:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002022:	f107 030c 	add.w	r3, r7, #12
 8002026:	2107      	movs	r1, #7
 8002028:	4618      	mov	r0, r3
 800202a:	f005 ff9f 	bl	8007f6c <HAL_RCC_ClockConfig>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002034:	f000 fbb2 	bl	800279c <Error_Handler>
  }
}
 8002038:	bf00      	nop
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}
 8002040:	40023800 	.word	0x40023800
 8002044:	40007000 	.word	0x40007000

08002048 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800204e:	463b      	mov	r3, r7
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800205a:	4b2e      	ldr	r3, [pc, #184]	; (8002114 <MX_ADC1_Init+0xcc>)
 800205c:	4a2e      	ldr	r2, [pc, #184]	; (8002118 <MX_ADC1_Init+0xd0>)
 800205e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002060:	4b2c      	ldr	r3, [pc, #176]	; (8002114 <MX_ADC1_Init+0xcc>)
 8002062:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002066:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002068:	4b2a      	ldr	r3, [pc, #168]	; (8002114 <MX_ADC1_Init+0xcc>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800206e:	4b29      	ldr	r3, [pc, #164]	; (8002114 <MX_ADC1_Init+0xcc>)
 8002070:	2201      	movs	r2, #1
 8002072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <MX_ADC1_Init+0xcc>)
 8002076:	2200      	movs	r2, #0
 8002078:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800207a:	4b26      	ldr	r3, [pc, #152]	; (8002114 <MX_ADC1_Init+0xcc>)
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <MX_ADC1_Init+0xcc>)
 8002084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T6_TRGO;
 800208a:	4b22      	ldr	r3, [pc, #136]	; (8002114 <MX_ADC1_Init+0xcc>)
 800208c:	f04f 6250 	mov.w	r2, #218103808	; 0xd000000
 8002090:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002092:	4b20      	ldr	r3, [pc, #128]	; (8002114 <MX_ADC1_Init+0xcc>)
 8002094:	2200      	movs	r2, #0
 8002096:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002098:	4b1e      	ldr	r3, [pc, #120]	; (8002114 <MX_ADC1_Init+0xcc>)
 800209a:	2203      	movs	r2, #3
 800209c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <MX_ADC1_Init+0xcc>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020a6:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <MX_ADC1_Init+0xcc>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020ac:	4819      	ldr	r0, [pc, #100]	; (8002114 <MX_ADC1_Init+0xcc>)
 80020ae:	f002 fa19 	bl	80044e4 <HAL_ADC_Init>
 80020b2:	4603      	mov	r3, r0
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d001      	beq.n	80020bc <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80020b8:	f000 fb70 	bl	800279c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80020bc:	230a      	movs	r3, #10
 80020be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80020c4:	2300      	movs	r3, #0
 80020c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020c8:	463b      	mov	r3, r7
 80020ca:	4619      	mov	r1, r3
 80020cc:	4811      	ldr	r0, [pc, #68]	; (8002114 <MX_ADC1_Init+0xcc>)
 80020ce:	f002 fb5b 	bl	8004788 <HAL_ADC_ConfigChannel>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80020d8:	f000 fb60 	bl	800279c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020dc:	2302      	movs	r3, #2
 80020de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020e0:	463b      	mov	r3, r7
 80020e2:	4619      	mov	r1, r3
 80020e4:	480b      	ldr	r0, [pc, #44]	; (8002114 <MX_ADC1_Init+0xcc>)
 80020e6:	f002 fb4f 	bl	8004788 <HAL_ADC_ConfigChannel>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d001      	beq.n	80020f4 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80020f0:	f000 fb54 	bl	800279c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80020f4:	2303      	movs	r3, #3
 80020f6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f8:	463b      	mov	r3, r7
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_ADC1_Init+0xcc>)
 80020fe:	f002 fb43 	bl	8004788 <HAL_ADC_ConfigChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8002108:	f000 fb48 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	3710      	adds	r7, #16
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000314 	.word	0x20000314
 8002118:	40012000 	.word	0x40012000

0800211c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002122:	463b      	mov	r3, r7
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800212e:	4b21      	ldr	r3, [pc, #132]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002130:	4a21      	ldr	r2, [pc, #132]	; (80021b8 <MX_ADC3_Init+0x9c>)
 8002132:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002134:	4b1f      	ldr	r3, [pc, #124]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002136:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800213a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800213c:	4b1d      	ldr	r3, [pc, #116]	; (80021b4 <MX_ADC3_Init+0x98>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002142:	4b1c      	ldr	r3, [pc, #112]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002144:	2200      	movs	r2, #0
 8002146:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002148:	4b1a      	ldr	r3, [pc, #104]	; (80021b4 <MX_ADC3_Init+0x98>)
 800214a:	2200      	movs	r2, #0
 800214c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800214e:	4b19      	ldr	r3, [pc, #100]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002150:	2200      	movs	r2, #0
 8002152:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002156:	4b17      	ldr	r3, [pc, #92]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002158:	2200      	movs	r2, #0
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <MX_ADC3_Init+0x98>)
 800215e:	4a17      	ldr	r2, [pc, #92]	; (80021bc <MX_ADC3_Init+0xa0>)
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002162:	4b14      	ldr	r3, [pc, #80]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002164:	2200      	movs	r2, #0
 8002166:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8002168:	4b12      	ldr	r3, [pc, #72]	; (80021b4 <MX_ADC3_Init+0x98>)
 800216a:	2201      	movs	r2, #1
 800216c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002170:	2200      	movs	r2, #0
 8002172:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002176:	4b0f      	ldr	r3, [pc, #60]	; (80021b4 <MX_ADC3_Init+0x98>)
 8002178:	2201      	movs	r2, #1
 800217a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800217c:	480d      	ldr	r0, [pc, #52]	; (80021b4 <MX_ADC3_Init+0x98>)
 800217e:	f002 f9b1 	bl	80044e4 <HAL_ADC_Init>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002188:	f000 fb08 	bl	800279c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800218c:	2308      	movs	r3, #8
 800218e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002190:	2301      	movs	r3, #1
 8002192:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002194:	2300      	movs	r3, #0
 8002196:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002198:	463b      	mov	r3, r7
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	; (80021b4 <MX_ADC3_Init+0x98>)
 800219e:	f002 faf3 	bl	8004788 <HAL_ADC_ConfigChannel>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80021a8:	f000 faf8 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80021ac:	bf00      	nop
 80021ae:	3710      	adds	r7, #16
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	2000035c 	.word	0x2000035c
 80021b8:	40012200 	.word	0x40012200
 80021bc:	0f000001 	.word	0x0f000001

080021c0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80021c4:	4b17      	ldr	r3, [pc, #92]	; (8002224 <MX_CAN1_Init+0x64>)
 80021c6:	4a18      	ldr	r2, [pc, #96]	; (8002228 <MX_CAN1_Init+0x68>)
 80021c8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 80021ca:	4b16      	ldr	r3, [pc, #88]	; (8002224 <MX_CAN1_Init+0x64>)
 80021cc:	2212      	movs	r2, #18
 80021ce:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_CAN1_Init+0x64>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80021d6:	4b13      	ldr	r3, [pc, #76]	; (8002224 <MX_CAN1_Init+0x64>)
 80021d8:	2200      	movs	r2, #0
 80021da:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80021dc:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_CAN1_Init+0x64>)
 80021de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021e2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_CAN1_Init+0x64>)
 80021e6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80021ea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80021ec:	4b0d      	ldr	r3, [pc, #52]	; (8002224 <MX_CAN1_Init+0x64>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80021f2:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_CAN1_Init+0x64>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_CAN1_Init+0x64>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_CAN1_Init+0x64>)
 8002200:	2200      	movs	r2, #0
 8002202:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MX_CAN1_Init+0x64>)
 8002206:	2200      	movs	r2, #0
 8002208:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_CAN1_Init+0x64>)
 800220c:	2200      	movs	r2, #0
 800220e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <MX_CAN1_Init+0x64>)
 8002212:	f002 fd8b 	bl	8004d2c <HAL_CAN_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800221c:	f000 fabe 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000404 	.word	0x20000404
 8002228:	40006400 	.word	0x40006400

0800222c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002230:	4b16      	ldr	r3, [pc, #88]	; (800228c <MX_CAN2_Init+0x60>)
 8002232:	4a17      	ldr	r2, [pc, #92]	; (8002290 <MX_CAN2_Init+0x64>)
 8002234:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <MX_CAN2_Init+0x60>)
 8002238:	2212      	movs	r2, #18
 800223a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800223c:	4b13      	ldr	r3, [pc, #76]	; (800228c <MX_CAN2_Init+0x60>)
 800223e:	2200      	movs	r2, #0
 8002240:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <MX_CAN2_Init+0x60>)
 8002244:	2200      	movs	r2, #0
 8002246:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002248:	4b10      	ldr	r3, [pc, #64]	; (800228c <MX_CAN2_Init+0x60>)
 800224a:	2200      	movs	r2, #0
 800224c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <MX_CAN2_Init+0x60>)
 8002250:	2200      	movs	r2, #0
 8002252:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002254:	4b0d      	ldr	r3, [pc, #52]	; (800228c <MX_CAN2_Init+0x60>)
 8002256:	2200      	movs	r2, #0
 8002258:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <MX_CAN2_Init+0x60>)
 800225c:	2200      	movs	r2, #0
 800225e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002260:	4b0a      	ldr	r3, [pc, #40]	; (800228c <MX_CAN2_Init+0x60>)
 8002262:	2200      	movs	r2, #0
 8002264:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <MX_CAN2_Init+0x60>)
 8002268:	2200      	movs	r2, #0
 800226a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800226c:	4b07      	ldr	r3, [pc, #28]	; (800228c <MX_CAN2_Init+0x60>)
 800226e:	2200      	movs	r2, #0
 8002270:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <MX_CAN2_Init+0x60>)
 8002274:	2200      	movs	r2, #0
 8002276:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002278:	4804      	ldr	r0, [pc, #16]	; (800228c <MX_CAN2_Init+0x60>)
 800227a:	f002 fd57 	bl	8004d2c <HAL_CAN_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8002284:	f000 fa8a 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002288:	bf00      	nop
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000042c 	.word	0x2000042c
 8002290:	40006800 	.word	0x40006800

08002294 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b088      	sub	sp, #32
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
 80022a2:	605a      	str	r2, [r3, #4]
 80022a4:	609a      	str	r2, [r3, #8]
 80022a6:	60da      	str	r2, [r3, #12]
 80022a8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022aa:	463b      	mov	r3, r7
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022b4:	4b21      	ldr	r3, [pc, #132]	; (800233c <MX_TIM2_Init+0xa8>)
 80022b6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80022ba:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80022bc:	4b1f      	ldr	r3, [pc, #124]	; (800233c <MX_TIM2_Init+0xa8>)
 80022be:	2200      	movs	r2, #0
 80022c0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022c2:	4b1e      	ldr	r3, [pc, #120]	; (800233c <MX_TIM2_Init+0xa8>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <MX_TIM2_Init+0xa8>)
 80022ca:	f04f 32ff 	mov.w	r2, #4294967295
 80022ce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_TIM2_Init+0xa8>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d6:	4b19      	ldr	r3, [pc, #100]	; (800233c <MX_TIM2_Init+0xa8>)
 80022d8:	2200      	movs	r2, #0
 80022da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022dc:	4817      	ldr	r0, [pc, #92]	; (800233c <MX_TIM2_Init+0xa8>)
 80022de:	f006 fca1 	bl	8008c24 <HAL_TIM_Base_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80022e8:	f000 fa58 	bl	800279c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80022ec:	2307      	movs	r3, #7
 80022ee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80022f0:	2370      	movs	r3, #112	; 0x70
 80022f2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_TIM2_Init+0xa8>)
 8002308:	f006 fd54 	bl	8008db4 <HAL_TIM_SlaveConfigSynchro>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002312:	f000 fa43 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800231e:	463b      	mov	r3, r7
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <MX_TIM2_Init+0xa8>)
 8002324:	f006 ff3c 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800232e:	f000 fa35 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3720      	adds	r7, #32
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000454 	.word	0x20000454

08002340 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002346:	f107 030c 	add.w	r3, r7, #12
 800234a:	2200      	movs	r2, #0
 800234c:	601a      	str	r2, [r3, #0]
 800234e:	605a      	str	r2, [r3, #4]
 8002350:	609a      	str	r2, [r3, #8]
 8002352:	60da      	str	r2, [r3, #12]
 8002354:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002356:	463b      	mov	r3, r7
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <MX_TIM4_Init+0xa4>)
 8002362:	4a21      	ldr	r2, [pc, #132]	; (80023e8 <MX_TIM4_Init+0xa8>)
 8002364:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002366:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <MX_TIM4_Init+0xa4>)
 8002368:	2200      	movs	r2, #0
 800236a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <MX_TIM4_Init+0xa4>)
 800236e:	2200      	movs	r2, #0
 8002370:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002372:	4b1c      	ldr	r3, [pc, #112]	; (80023e4 <MX_TIM4_Init+0xa4>)
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237a:	4b1a      	ldr	r3, [pc, #104]	; (80023e4 <MX_TIM4_Init+0xa4>)
 800237c:	2200      	movs	r2, #0
 800237e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002380:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <MX_TIM4_Init+0xa4>)
 8002382:	2200      	movs	r2, #0
 8002384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002386:	4817      	ldr	r0, [pc, #92]	; (80023e4 <MX_TIM4_Init+0xa4>)
 8002388:	f006 fc4c 	bl	8008c24 <HAL_TIM_Base_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002392:	f000 fa03 	bl	800279c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002396:	2307      	movs	r3, #7
 8002398:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800239a:	2370      	movs	r3, #112	; 0x70
 800239c:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80023aa:	f107 030c 	add.w	r3, r7, #12
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <MX_TIM4_Init+0xa4>)
 80023b2:	f006 fcff 	bl	8008db4 <HAL_TIM_SlaveConfigSynchro>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d001      	beq.n	80023c0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80023bc:	f000 f9ee 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023c0:	2300      	movs	r3, #0
 80023c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80023c8:	463b      	mov	r3, r7
 80023ca:	4619      	mov	r1, r3
 80023cc:	4805      	ldr	r0, [pc, #20]	; (80023e4 <MX_TIM4_Init+0xa4>)
 80023ce:	f006 fee7 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80023d8:	f000 f9e0 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80023dc:	bf00      	nop
 80023de:	3720      	adds	r7, #32
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	200004a0 	.word	0x200004a0
 80023e8:	40000800 	.word	0x40000800

080023ec <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023f2:	1d3b      	adds	r3, r7, #4
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <MX_TIM6_Init+0x68>)
 80023fe:	4a16      	ldr	r2, [pc, #88]	; (8002458 <MX_TIM6_Init+0x6c>)
 8002400:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 7200;
 8002402:	4b14      	ldr	r3, [pc, #80]	; (8002454 <MX_TIM6_Init+0x68>)
 8002404:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8002408:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <MX_TIM6_Init+0x68>)
 800240c:	2200      	movs	r2, #0
 800240e:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000;
 8002410:	4b10      	ldr	r3, [pc, #64]	; (8002454 <MX_TIM6_Init+0x68>)
 8002412:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002416:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <MX_TIM6_Init+0x68>)
 800241a:	2280      	movs	r2, #128	; 0x80
 800241c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800241e:	480d      	ldr	r0, [pc, #52]	; (8002454 <MX_TIM6_Init+0x68>)
 8002420:	f006 fc00 	bl	8008c24 <HAL_TIM_Base_Init>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800242a:	f000 f9b7 	bl	800279c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800242e:	2320      	movs	r3, #32
 8002430:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002432:	2300      	movs	r3, #0
 8002434:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002436:	1d3b      	adds	r3, r7, #4
 8002438:	4619      	mov	r1, r3
 800243a:	4806      	ldr	r0, [pc, #24]	; (8002454 <MX_TIM6_Init+0x68>)
 800243c:	f006 feb0 	bl	80091a0 <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002446:	f000 f9a9 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800244a:	bf00      	nop
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200004ec 	.word	0x200004ec
 8002458:	40001000 	.word	0x40001000

0800245c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002460:	4b14      	ldr	r3, [pc, #80]	; (80024b4 <MX_UART4_Init+0x58>)
 8002462:	4a15      	ldr	r2, [pc, #84]	; (80024b8 <MX_UART4_Init+0x5c>)
 8002464:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002466:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <MX_UART4_Init+0x58>)
 8002468:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800246c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800246e:	4b11      	ldr	r3, [pc, #68]	; (80024b4 <MX_UART4_Init+0x58>)
 8002470:	2200      	movs	r2, #0
 8002472:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002474:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <MX_UART4_Init+0x58>)
 8002476:	2200      	movs	r2, #0
 8002478:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800247a:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <MX_UART4_Init+0x58>)
 800247c:	2200      	movs	r2, #0
 800247e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002480:	4b0c      	ldr	r3, [pc, #48]	; (80024b4 <MX_UART4_Init+0x58>)
 8002482:	220c      	movs	r2, #12
 8002484:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002486:	4b0b      	ldr	r3, [pc, #44]	; (80024b4 <MX_UART4_Init+0x58>)
 8002488:	2200      	movs	r2, #0
 800248a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800248c:	4b09      	ldr	r3, [pc, #36]	; (80024b4 <MX_UART4_Init+0x58>)
 800248e:	2200      	movs	r2, #0
 8002490:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002492:	4b08      	ldr	r3, [pc, #32]	; (80024b4 <MX_UART4_Init+0x58>)
 8002494:	2200      	movs	r2, #0
 8002496:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002498:	4b06      	ldr	r3, [pc, #24]	; (80024b4 <MX_UART4_Init+0x58>)
 800249a:	2200      	movs	r2, #0
 800249c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800249e:	4805      	ldr	r0, [pc, #20]	; (80024b4 <MX_UART4_Init+0x58>)
 80024a0:	f006 ff0c 	bl	80092bc <HAL_UART_Init>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80024aa:	f000 f977 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	bd80      	pop	{r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000538 	.word	0x20000538
 80024b8:	40004c00 	.word	0x40004c00

080024bc <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80024c0:	4b14      	ldr	r3, [pc, #80]	; (8002514 <MX_UART7_Init+0x58>)
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <MX_UART7_Init+0x5c>)
 80024c4:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80024c6:	4b13      	ldr	r3, [pc, #76]	; (8002514 <MX_UART7_Init+0x58>)
 80024c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024cc:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80024ce:	4b11      	ldr	r3, [pc, #68]	; (8002514 <MX_UART7_Init+0x58>)
 80024d0:	2200      	movs	r2, #0
 80024d2:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80024d4:	4b0f      	ldr	r3, [pc, #60]	; (8002514 <MX_UART7_Init+0x58>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <MX_UART7_Init+0x58>)
 80024dc:	2200      	movs	r2, #0
 80024de:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80024e0:	4b0c      	ldr	r3, [pc, #48]	; (8002514 <MX_UART7_Init+0x58>)
 80024e2:	220c      	movs	r2, #12
 80024e4:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e6:	4b0b      	ldr	r3, [pc, #44]	; (8002514 <MX_UART7_Init+0x58>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <MX_UART7_Init+0x58>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <MX_UART7_Init+0x58>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024f8:	4b06      	ldr	r3, [pc, #24]	; (8002514 <MX_UART7_Init+0x58>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_UART7_Init+0x58>)
 8002500:	f006 fedc 	bl	80092bc <HAL_UART_Init>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800250a:	f000 f947 	bl	800279c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800250e:	bf00      	nop
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	200005c0 	.word	0x200005c0
 8002518:	40007800 	.word	0x40007800

0800251c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b082      	sub	sp, #8
 8002520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <MX_DMA_Init+0x38>)
 8002524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002526:	4a0b      	ldr	r2, [pc, #44]	; (8002554 <MX_DMA_Init+0x38>)
 8002528:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800252c:	6313      	str	r3, [r2, #48]	; 0x30
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <MX_DMA_Init+0x38>)
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002536:	607b      	str	r3, [r7, #4]
 8002538:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	2038      	movs	r0, #56	; 0x38
 8002540:	f003 f9db 	bl	80058fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002544:	2038      	movs	r0, #56	; 0x38
 8002546:	f003 f9f4 	bl	8005932 <HAL_NVIC_EnableIRQ>

}
 800254a:	bf00      	nop
 800254c:	3708      	adds	r7, #8
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40023800 	.word	0x40023800

08002558 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b088      	sub	sp, #32
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 800255e:	1d3b      	adds	r3, r7, #4
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	605a      	str	r2, [r3, #4]
 8002566:	609a      	str	r2, [r3, #8]
 8002568:	60da      	str	r2, [r3, #12]
 800256a:	611a      	str	r2, [r3, #16]
 800256c:	615a      	str	r2, [r3, #20]
 800256e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002570:	4b28      	ldr	r3, [pc, #160]	; (8002614 <MX_FMC_Init+0xbc>)
 8002572:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002576:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002578:	4b26      	ldr	r3, [pc, #152]	; (8002614 <MX_FMC_Init+0xbc>)
 800257a:	4a27      	ldr	r2, [pc, #156]	; (8002618 <MX_FMC_Init+0xc0>)
 800257c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800257e:	4b25      	ldr	r3, [pc, #148]	; (8002614 <MX_FMC_Init+0xbc>)
 8002580:	2200      	movs	r2, #0
 8002582:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002584:	4b23      	ldr	r3, [pc, #140]	; (8002614 <MX_FMC_Init+0xbc>)
 8002586:	2200      	movs	r2, #0
 8002588:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800258a:	4b22      	ldr	r3, [pc, #136]	; (8002614 <MX_FMC_Init+0xbc>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002590:	4b20      	ldr	r3, [pc, #128]	; (8002614 <MX_FMC_Init+0xbc>)
 8002592:	2210      	movs	r2, #16
 8002594:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002596:	4b1f      	ldr	r3, [pc, #124]	; (8002614 <MX_FMC_Init+0xbc>)
 8002598:	2200      	movs	r2, #0
 800259a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 800259c:	4b1d      	ldr	r3, [pc, #116]	; (8002614 <MX_FMC_Init+0xbc>)
 800259e:	2200      	movs	r2, #0
 80025a0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80025a2:	4b1c      	ldr	r3, [pc, #112]	; (8002614 <MX_FMC_Init+0xbc>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80025a8:	4b1a      	ldr	r3, [pc, #104]	; (8002614 <MX_FMC_Init+0xbc>)
 80025aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80025ae:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80025b0:	4b18      	ldr	r3, [pc, #96]	; (8002614 <MX_FMC_Init+0xbc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80025b6:	4b17      	ldr	r3, [pc, #92]	; (8002614 <MX_FMC_Init+0xbc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <MX_FMC_Init+0xbc>)
 80025be:	2200      	movs	r2, #0
 80025c0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80025c2:	4b14      	ldr	r3, [pc, #80]	; (8002614 <MX_FMC_Init+0xbc>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80025c8:	4b12      	ldr	r3, [pc, #72]	; (8002614 <MX_FMC_Init+0xbc>)
 80025ca:	2200      	movs	r2, #0
 80025cc:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80025ce:	4b11      	ldr	r3, [pc, #68]	; (8002614 <MX_FMC_Init+0xbc>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80025d4:	4b0f      	ldr	r3, [pc, #60]	; (8002614 <MX_FMC_Init+0xbc>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80025da:	230f      	movs	r3, #15
 80025dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80025de:	230f      	movs	r3, #15
 80025e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80025e2:	23ff      	movs	r3, #255	; 0xff
 80025e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80025e6:	230f      	movs	r3, #15
 80025e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80025ea:	2310      	movs	r3, #16
 80025ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80025ee:	2311      	movs	r3, #17
 80025f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80025f6:	1d3b      	adds	r3, r7, #4
 80025f8:	2200      	movs	r2, #0
 80025fa:	4619      	mov	r1, r3
 80025fc:	4805      	ldr	r0, [pc, #20]	; (8002614 <MX_FMC_Init+0xbc>)
 80025fe:	f006 fac9 	bl	8008b94 <HAL_SRAM_Init>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8002608:	f000 f8c8 	bl	800279c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 800260c:	bf00      	nop
 800260e:	3720      	adds	r7, #32
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}
 8002614:	20000648 	.word	0x20000648
 8002618:	a0000104 	.word	0xa0000104

0800261c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b08e      	sub	sp, #56	; 0x38
 8002620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002622:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002626:	2200      	movs	r2, #0
 8002628:	601a      	str	r2, [r3, #0]
 800262a:	605a      	str	r2, [r3, #4]
 800262c:	609a      	str	r2, [r3, #8]
 800262e:	60da      	str	r2, [r3, #12]
 8002630:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002632:	4b54      	ldr	r3, [pc, #336]	; (8002784 <MX_GPIO_Init+0x168>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a53      	ldr	r2, [pc, #332]	; (8002784 <MX_GPIO_Init+0x168>)
 8002638:	f043 0320 	orr.w	r3, r3, #32
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <MX_GPIO_Init+0x168>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	623b      	str	r3, [r7, #32]
 8002648:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800264a:	4b4e      	ldr	r3, [pc, #312]	; (8002784 <MX_GPIO_Init+0x168>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264e:	4a4d      	ldr	r2, [pc, #308]	; (8002784 <MX_GPIO_Init+0x168>)
 8002650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002654:	6313      	str	r3, [r2, #48]	; 0x30
 8002656:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <MX_GPIO_Init+0x168>)
 8002658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	61fb      	str	r3, [r7, #28]
 8002660:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002662:	4b48      	ldr	r3, [pc, #288]	; (8002784 <MX_GPIO_Init+0x168>)
 8002664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002666:	4a47      	ldr	r2, [pc, #284]	; (8002784 <MX_GPIO_Init+0x168>)
 8002668:	f043 0304 	orr.w	r3, r3, #4
 800266c:	6313      	str	r3, [r2, #48]	; 0x30
 800266e:	4b45      	ldr	r3, [pc, #276]	; (8002784 <MX_GPIO_Init+0x168>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	61bb      	str	r3, [r7, #24]
 8002678:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800267a:	4b42      	ldr	r3, [pc, #264]	; (8002784 <MX_GPIO_Init+0x168>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800267e:	4a41      	ldr	r2, [pc, #260]	; (8002784 <MX_GPIO_Init+0x168>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	; 0x30
 8002686:	4b3f      	ldr	r3, [pc, #252]	; (8002784 <MX_GPIO_Init+0x168>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002692:	4b3c      	ldr	r3, [pc, #240]	; (8002784 <MX_GPIO_Init+0x168>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002696:	4a3b      	ldr	r2, [pc, #236]	; (8002784 <MX_GPIO_Init+0x168>)
 8002698:	f043 0310 	orr.w	r3, r3, #16
 800269c:	6313      	str	r3, [r2, #48]	; 0x30
 800269e:	4b39      	ldr	r3, [pc, #228]	; (8002784 <MX_GPIO_Init+0x168>)
 80026a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a2:	f003 0310 	and.w	r3, r3, #16
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80026aa:	4b36      	ldr	r3, [pc, #216]	; (8002784 <MX_GPIO_Init+0x168>)
 80026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ae:	4a35      	ldr	r2, [pc, #212]	; (8002784 <MX_GPIO_Init+0x168>)
 80026b0:	f043 0302 	orr.w	r3, r3, #2
 80026b4:	6313      	str	r3, [r2, #48]	; 0x30
 80026b6:	4b33      	ldr	r3, [pc, #204]	; (8002784 <MX_GPIO_Init+0x168>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	60fb      	str	r3, [r7, #12]
 80026c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80026c2:	4b30      	ldr	r3, [pc, #192]	; (8002784 <MX_GPIO_Init+0x168>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <MX_GPIO_Init+0x168>)
 80026c8:	f043 0308 	orr.w	r3, r3, #8
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b2d      	ldr	r3, [pc, #180]	; (8002784 <MX_GPIO_Init+0x168>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0308 	and.w	r3, r3, #8
 80026d6:	60bb      	str	r3, [r7, #8]
 80026d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <MX_GPIO_Init+0x168>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	4a29      	ldr	r2, [pc, #164]	; (8002784 <MX_GPIO_Init+0x168>)
 80026e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e4:	6313      	str	r3, [r2, #48]	; 0x30
 80026e6:	4b27      	ldr	r3, [pc, #156]	; (8002784 <MX_GPIO_Init+0x168>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ee:	607b      	str	r3, [r7, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 80026f2:	2200      	movs	r2, #0
 80026f4:	2108      	movs	r1, #8
 80026f6:	4824      	ldr	r0, [pc, #144]	; (8002788 <MX_GPIO_Init+0x16c>)
 80026f8:	f003 fe72 	bl	80063e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS2_Pin;
 80026fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002700:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002702:	2300      	movs	r3, #0
 8002704:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS2_GPIO_Port, &GPIO_InitStruct);
 800270a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800270e:	4619      	mov	r1, r3
 8002710:	481e      	ldr	r0, [pc, #120]	; (800278c <MX_GPIO_Init+0x170>)
 8002712:	f003 fca1 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 8002716:	2302      	movs	r3, #2
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800271a:	2300      	movs	r3, #0
 800271c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 8002722:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002726:	4619      	mov	r1, r3
 8002728:	4819      	ldr	r0, [pc, #100]	; (8002790 <MX_GPIO_Init+0x174>)
 800272a:	f003 fc95 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 800272e:	2308      	movs	r3, #8
 8002730:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002732:	2301      	movs	r3, #1
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002736:	2300      	movs	r3, #0
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800273a:	2300      	movs	r3, #0
 800273c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 800273e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002742:	4619      	mov	r1, r3
 8002744:	4810      	ldr	r0, [pc, #64]	; (8002788 <MX_GPIO_Init+0x16c>)
 8002746:	f003 fc87 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin BUTTON_2_Pin BUTTON_1_Pin
                           HV_REQUEST_Pin DRIVE_REQUEST_Pin GASP_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_1_Pin
 800274a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 800274e:	627b      	str	r3, [r7, #36]	; 0x24
                          |HV_REQUEST_Pin|DRIVE_REQUEST_Pin|GASP_INTERRUPT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002750:	2300      	movs	r3, #0
 8002752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800275c:	4619      	mov	r1, r3
 800275e:	480d      	ldr	r0, [pc, #52]	; (8002794 <MX_GPIO_Init+0x178>)
 8002760:	f003 fc7a 	bl	8006058 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = BAT_12V_MEASURE_Pin;
 8002764:	2308      	movs	r3, #8
 8002766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002768:	2300      	movs	r3, #0
 800276a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BAT_12V_MEASURE_GPIO_Port, &GPIO_InitStruct);
 8002770:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002774:	4619      	mov	r1, r3
 8002776:	4808      	ldr	r0, [pc, #32]	; (8002798 <MX_GPIO_Init+0x17c>)
 8002778:	f003 fc6e 	bl	8006058 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800277c:	bf00      	nop
 800277e:	3738      	adds	r7, #56	; 0x38
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	40023800 	.word	0x40023800
 8002788:	40020000 	.word	0x40020000
 800278c:	40021400 	.word	0x40021400
 8002790:	40020800 	.word	0x40020800
 8002794:	40021800 	.word	0x40021800
 8002798:	40020400 	.word	0x40020400

0800279c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027a0:	b672      	cpsid	i
}
 80027a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80027a4:	e7fe      	b.n	80027a4 <Error_Handler+0x8>
	...

080027a8 <init_sensors>:

/************ Timer ************/
unsigned int discrepancy_timer_ms = 0;


void init_sensors(){
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 80027ac:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <init_sensors+0x4c>)
 80027ae:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80027b2:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 80027b4:	4b0f      	ldr	r3, [pc, #60]	; (80027f4 <init_sensors+0x4c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 80027ba:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <init_sensors+0x4c>)
 80027bc:	2201      	movs	r2, #1
 80027be:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 80027c0:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <init_sensors+0x50>)
 80027c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80027c6:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <init_sensors+0x50>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 80027ce:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <init_sensors+0x50>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <init_sensors+0x54>)
 80027d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80027da:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <init_sensors+0x54>)
 80027de:	2200      	movs	r2, #0
 80027e0:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <init_sensors+0x54>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	80da      	strh	r2, [r3, #6]
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	200006c8 	.word	0x200006c8
 80027f8:	200006d4 	.word	0x200006d4
 80027fc:	200006e0 	.word	0x200006e0

08002800 <run_calibration>:
}


// Update sensors

void run_calibration() {
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
    update_minmax(&throttle1);
 8002804:	4805      	ldr	r0, [pc, #20]	; (800281c <run_calibration+0x1c>)
 8002806:	f000 f915 	bl	8002a34 <update_minmax>
    update_minmax(&throttle2);
 800280a:	4805      	ldr	r0, [pc, #20]	; (8002820 <run_calibration+0x20>)
 800280c:	f000 f912 	bl	8002a34 <update_minmax>
    update_minmax(&brake);
 8002810:	4804      	ldr	r0, [pc, #16]	; (8002824 <run_calibration+0x24>)
 8002812:	f000 f90f 	bl	8002a34 <update_minmax>
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	200006c8 	.word	0x200006c8
 8002820:	200006d4 	.word	0x200006d4
 8002824:	200006e0 	.word	0x200006e0

08002828 <update_sensor_vals>:

void update_sensor_vals() {
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
     * be immediately stopped completely.
     *
     * It is not necessary to Open the Shutdown Circuit, the motor
     * controller(s) stopping the power to the Motor(s) is sufficient.
     */
    if (has_discrepancy()) {
 800282c:	f000 f8a6 	bl	800297c <has_discrepancy>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d011      	beq.n	800285a <update_sensor_vals+0x32>
        discrepancy_timer_ms += TMR1_PERIOD_MS;
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <update_sensor_vals+0x3c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3314      	adds	r3, #20
 800283c:	4a09      	ldr	r2, [pc, #36]	; (8002864 <update_sensor_vals+0x3c>)
 800283e:	6013      	str	r3, [r2, #0]
        if (discrepancy_timer_ms > MAX_DISCREPANCY_MS && state == DRIVE) {
 8002840:	4b08      	ldr	r3, [pc, #32]	; (8002864 <update_sensor_vals+0x3c>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b64      	cmp	r3, #100	; 0x64
 8002846:	d90b      	bls.n	8002860 <update_sensor_vals+0x38>
 8002848:	4b07      	ldr	r3, [pc, #28]	; (8002868 <update_sensor_vals+0x40>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b03      	cmp	r3, #3
 8002850:	d106      	bne.n	8002860 <update_sensor_vals+0x38>
            report_fault(SENSOR_DISCREPANCY);
 8002852:	2005      	movs	r0, #5
 8002854:	f7ff f8de 	bl	8001a14 <report_fault>
        }
    } else {
        discrepancy_timer_ms = 0;
    }
}
 8002858:	e002      	b.n	8002860 <update_sensor_vals+0x38>
        discrepancy_timer_ms = 0;
 800285a:	4b02      	ldr	r3, [pc, #8]	; (8002864 <update_sensor_vals+0x3c>)
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	bf00      	nop
 8002862:	bd80      	pop	{r7, pc}
 8002864:	200006ec 	.word	0x200006ec
 8002868:	20000089 	.word	0x20000089

0800286c <requested_throttle>:

uint16_t requested_throttle(){
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
    temp_attenuate();
 8002872:	f000 f82b 	bl	80028cc <temp_attenuate>


    uint32_t throttle = ((uint32_t)throttle1.percent * MAX_TORQUE) / 100;  //upscale for MC code
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <requested_throttle+0x54>)
 8002878:	891b      	ldrh	r3, [r3, #8]
 800287a:	461a      	mov	r2, r3
 800287c:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002880:	fb02 f303 	mul.w	r3, r2, r3
 8002884:	4a0f      	ldr	r2, [pc, #60]	; (80028c4 <requested_throttle+0x58>)
 8002886:	fba2 2303 	umull	r2, r3, r2, r3
 800288a:	095b      	lsrs	r3, r3, #5
 800288c:	607b      	str	r3, [r7, #4]

    throttle = (throttle * THROTTLE_MULTIPLIER) / 100;       //attenuate for temperature
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <requested_throttle+0x5c>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	fb02 f303 	mul.w	r3, r2, r3
 800289a:	4a0a      	ldr	r2, [pc, #40]	; (80028c4 <requested_throttle+0x58>)
 800289c:	fba2 2303 	umull	r2, r3, r2, r3
 80028a0:	095b      	lsrs	r3, r3, #5
 80028a2:	607b      	str	r3, [r7, #4]

    if (throttle >= 5.0) {			//case 1: if the pedal is actually being pressed return on a 1:1 scale
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d902      	bls.n	80028b0 <requested_throttle+0x44>
    	return (uint16_t)throttle;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	e003      	b.n	80028b8 <requested_throttle+0x4c>
    } else {						//case 2: if we don't know if it's being pressed or just car shaking
    	return (uint16_t)throttle / 2;	//return on 1:1/2 scale
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	b29b      	uxth	r3, r3
    }
	return 1;
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	200006c8 	.word	0x200006c8
 80028c4:	51eb851f 	.word	0x51eb851f
 80028c8:	2000008a 	.word	0x2000008a

080028cc <temp_attenuate>:

void temp_attenuate() {
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
    int t = PACK_TEMP - 50;
 80028d2:	4b11      	ldr	r3, [pc, #68]	; (8002918 <temp_attenuate+0x4c>)
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	3b32      	subs	r3, #50	; 0x32
 80028da:	607b      	str	r3, [r7, #4]
    if (t < 0) {
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	da03      	bge.n	80028ea <temp_attenuate+0x1e>
        THROTTLE_MULTIPLIER = 100;
 80028e2:	4b0e      	ldr	r3, [pc, #56]	; (800291c <temp_attenuate+0x50>)
 80028e4:	2264      	movs	r2, #100	; 0x64
 80028e6:	701a      	strb	r2, [r3, #0]
    } else if (t < 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
    } else if (t >= 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
    }
}
 80028e8:	e00f      	b.n	800290a <temp_attenuate+0x3e>
    } else if (t < 8) {
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2b07      	cmp	r3, #7
 80028ee:	dc06      	bgt.n	80028fe <temp_attenuate+0x32>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
 80028f0:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <temp_attenuate+0x54>)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	4413      	add	r3, r2
 80028f6:	781a      	ldrb	r2, [r3, #0]
 80028f8:	4b08      	ldr	r3, [pc, #32]	; (800291c <temp_attenuate+0x50>)
 80028fa:	701a      	strb	r2, [r3, #0]
}
 80028fc:	e005      	b.n	800290a <temp_attenuate+0x3e>
    } else if (t >= 8) {
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b07      	cmp	r3, #7
 8002902:	dd02      	ble.n	800290a <temp_attenuate+0x3e>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
 8002904:	2205      	movs	r2, #5
 8002906:	4b05      	ldr	r3, [pc, #20]	; (800291c <temp_attenuate+0x50>)
 8002908:	701a      	strb	r2, [r3, #0]
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000209 	.word	0x20000209
 800291c:	2000008a 	.word	0x2000008a
 8002920:	0800ec64 	.word	0x0800ec64

08002924 <sensors_calibrated>:

bool sensors_calibrated(){
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
    if(throttle2.range < APPS1_MIN_RANGE) return 0;
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <sensors_calibrated+0x2c>)
 800292a:	88db      	ldrh	r3, [r3, #6]
 800292c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8002930:	d201      	bcs.n	8002936 <sensors_calibrated+0x12>
 8002932:	2300      	movs	r3, #0
 8002934:	e007      	b.n	8002946 <sensors_calibrated+0x22>
    if(brake.range < BRAKE_MIN_RANGE) return 0;
 8002936:	4b07      	ldr	r3, [pc, #28]	; (8002954 <sensors_calibrated+0x30>)
 8002938:	88db      	ldrh	r3, [r3, #6]
 800293a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 800293e:	d201      	bcs.n	8002944 <sensors_calibrated+0x20>
 8002940:	2300      	movs	r3, #0
 8002942:	e000      	b.n	8002946 <sensors_calibrated+0x22>

    return 1;
 8002944:	2301      	movs	r3, #1
}
 8002946:	4618      	mov	r0, r3
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	200006d4 	.word	0x200006d4
 8002954:	200006e0 	.word	0x200006e0

08002958 <brake_mashed>:

bool braking(){
    return brake.raw > BRAKE_LIGHT_THRESHOLD;
}

bool brake_mashed(){
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
    return brake.raw > RTD_BRAKE_THRESHOLD;
 800295c:	4b06      	ldr	r3, [pc, #24]	; (8002978 <brake_mashed+0x20>)
 800295e:	881b      	ldrh	r3, [r3, #0]
 8002960:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002964:	bf8c      	ite	hi
 8002966:	2301      	movhi	r3, #1
 8002968:	2300      	movls	r3, #0
 800296a:	b2db      	uxtb	r3, r3
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	200006e0 	.word	0x200006e0

0800297c <has_discrepancy>:

// check differential between the throttle sensors
// returns true only if the sensor discrepancy is > 10%
// Note: after verifying there's no discrepancy, can use either sensor(1 or 2) for remaining checks
bool has_discrepancy() {
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
    if(abs((int)throttle1.percent - (int)throttle2.percent) > 10) return 1;  //percentage discrepancy
 8002980:	4b15      	ldr	r3, [pc, #84]	; (80029d8 <has_discrepancy+0x5c>)
 8002982:	891b      	ldrh	r3, [r3, #8]
 8002984:	461a      	mov	r2, r3
 8002986:	4b15      	ldr	r3, [pc, #84]	; (80029dc <has_discrepancy+0x60>)
 8002988:	891b      	ldrh	r3, [r3, #8]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	bfb8      	it	lt
 8002990:	425b      	neglt	r3, r3
 8002992:	2b0a      	cmp	r3, #10
 8002994:	dd01      	ble.n	800299a <has_discrepancy+0x1e>
 8002996:	2301      	movs	r3, #1
 8002998:	e019      	b.n	80029ce <has_discrepancy+0x52>

    return (throttle1.raw < APPS_OPEN_THRESH)
 800299a:	4b0f      	ldr	r3, [pc, #60]	; (80029d8 <has_discrepancy+0x5c>)
 800299c:	881b      	ldrh	r3, [r3, #0]
        || (throttle1.raw > APPS_SHORT_THRESH)
        || (throttle2.raw < APPS_OPEN_THRESH)
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 800299e:	2bc7      	cmp	r3, #199	; 0xc7
 80029a0:	d90f      	bls.n	80029c2 <has_discrepancy+0x46>
        || (throttle1.raw > APPS_SHORT_THRESH)
 80029a2:	4b0d      	ldr	r3, [pc, #52]	; (80029d8 <has_discrepancy+0x5c>)
 80029a4:	881b      	ldrh	r3, [r3, #0]
 80029a6:	f640 723c 	movw	r2, #3900	; 0xf3c
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d809      	bhi.n	80029c2 <has_discrepancy+0x46>
        || (throttle2.raw < APPS_OPEN_THRESH)
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <has_discrepancy+0x60>)
 80029b0:	881b      	ldrh	r3, [r3, #0]
 80029b2:	2bc7      	cmp	r3, #199	; 0xc7
 80029b4:	d905      	bls.n	80029c2 <has_discrepancy+0x46>
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <has_discrepancy+0x60>)
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	f640 723c 	movw	r2, #3900	; 0xf3c
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <has_discrepancy+0x4a>
 80029c2:	2301      	movs	r3, #1
 80029c4:	e000      	b.n	80029c8 <has_discrepancy+0x4c>
 80029c6:	2300      	movs	r3, #0
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
	return false;

}
 80029ce:	4618      	mov	r0, r3
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr
 80029d8:	200006c8 	.word	0x200006c8
 80029dc:	200006d4 	.word	0x200006d4

080029e0 <brake_implausible>:

// check for soft BSPD
// see EV.5.7 of FSAE 2022 rulebook
bool brake_implausible() {
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
    if (error == BRAKE_IMPLAUSIBLE) {
 80029e4:	4b10      	ldr	r3, [pc, #64]	; (8002a28 <brake_implausible+0x48>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d107      	bne.n	80029fe <brake_implausible+0x1e>
        // once brake implausibility detected,
        // can only revert to normal if throttle unapplied
        return !(throttle1.percent <= APPS1_BSPD_RESET);
 80029ee:	4b0f      	ldr	r3, [pc, #60]	; (8002a2c <brake_implausible+0x4c>)
 80029f0:	891b      	ldrh	r3, [r3, #8]
 80029f2:	2b05      	cmp	r3, #5
 80029f4:	bf8c      	ite	hi
 80029f6:	2301      	movhi	r3, #1
 80029f8:	2300      	movls	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	e00e      	b.n	8002a1c <brake_implausible+0x3c>
    }

    // if both brake and throttle applied, brake implausible
    //return (temp_brake > 0 && temp_throttle > throttle_range * 0.25);
    return (brake.raw >= BRAKE_BSPD_THRESHOLD && throttle1.percent > APPS1_BSPD_THRESHOLD);
 80029fe:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <brake_implausible+0x50>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a06:	d305      	bcc.n	8002a14 <brake_implausible+0x34>
 8002a08:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <brake_implausible+0x4c>)
 8002a0a:	891b      	ldrh	r3, [r3, #8]
 8002a0c:	2b19      	cmp	r3, #25
 8002a0e:	d901      	bls.n	8002a14 <brake_implausible+0x34>
 8002a10:	2301      	movs	r3, #1
 8002a12:	e000      	b.n	8002a16 <brake_implausible+0x36>
 8002a14:	2300      	movs	r3, #0
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	b2db      	uxtb	r3, r3
	return false;
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20000312 	.word	0x20000312
 8002a2c:	200006c8 	.word	0x200006c8
 8002a30:	200006e0 	.word	0x200006e0

08002a34 <update_minmax>:
void update_percent(CALIBRATED_SENSOR_t* sensor){
    uint32_t raw = (uint32_t)clamp(sensor->raw, sensor->min, sensor->max);
    sensor->percent = (uint16_t)((100*(raw-sensor->min))/((sensor->range)));
}

void update_minmax(CALIBRATED_SENSOR_t* sensor){
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
    if (sensor->raw > sensor->max) sensor->max = sensor->raw;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	881a      	ldrh	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	889b      	ldrh	r3, [r3, #4]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d904      	bls.n	8002a52 <update_minmax+0x1e>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	881a      	ldrh	r2, [r3, #0]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	809a      	strh	r2, [r3, #4]
 8002a50:	e009      	b.n	8002a66 <update_minmax+0x32>
    else if (sensor->raw < sensor->min) sensor->min = sensor->raw;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	881a      	ldrh	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	885b      	ldrh	r3, [r3, #2]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d203      	bcs.n	8002a66 <update_minmax+0x32>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	881a      	ldrh	r2, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	805a      	strh	r2, [r3, #2]
    if(sensor->max > sensor->min) sensor->range = sensor->max - sensor->min;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	889a      	ldrh	r2, [r3, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	885b      	ldrh	r3, [r3, #2]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d907      	bls.n	8002a82 <update_minmax+0x4e>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	889a      	ldrh	r2, [r3, #4]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	885b      	ldrh	r3, [r3, #2]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	80da      	strh	r2, [r3, #6]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <print>:
#include "serial_print.h"

void print(char *str) {
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b082      	sub	sp, #8
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
	CDC_Transmit_HS((uint8_t *)str, strlen(str));
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7fd fbba 	bl	8000210 <strlen>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f00a fe6a 	bl	800d77c <CDC_Transmit_HS>
}
 8002aa8:	bf00      	nop
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	4b0f      	ldr	r3, [pc, #60]	; (8002af4 <HAL_MspInit+0x44>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	4a0e      	ldr	r2, [pc, #56]	; (8002af4 <HAL_MspInit+0x44>)
 8002abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac2:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <HAL_MspInit+0x44>)
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ace:	4b09      	ldr	r3, [pc, #36]	; (8002af4 <HAL_MspInit+0x44>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a08      	ldr	r2, [pc, #32]	; (8002af4 <HAL_MspInit+0x44>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b06      	ldr	r3, [pc, #24]	; (8002af4 <HAL_MspInit+0x44>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	603b      	str	r3, [r7, #0]
 8002ae4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ae6:	bf00      	nop
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800

08002af8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b08c      	sub	sp, #48	; 0x30
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b00:	f107 031c 	add.w	r3, r7, #28
 8002b04:	2200      	movs	r2, #0
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	605a      	str	r2, [r3, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
 8002b0c:	60da      	str	r2, [r3, #12]
 8002b0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a42      	ldr	r2, [pc, #264]	; (8002c20 <HAL_ADC_MspInit+0x128>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d154      	bne.n	8002bc4 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002b1a:	4b42      	ldr	r3, [pc, #264]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	4a41      	ldr	r2, [pc, #260]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002b20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b24:	6453      	str	r3, [r2, #68]	; 0x44
 8002b26:	4b3f      	ldr	r3, [pc, #252]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	61bb      	str	r3, [r7, #24]
 8002b30:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b32:	4b3c      	ldr	r3, [pc, #240]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b36:	4a3b      	ldr	r2, [pc, #236]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002b38:	f043 0304 	orr.w	r3, r3, #4
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b3e:	4b39      	ldr	r3, [pc, #228]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	f003 0304 	and.w	r3, r3, #4
 8002b46:	617b      	str	r3, [r7, #20]
 8002b48:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 8002b4a:	230d      	movs	r3, #13
 8002b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b52:	2300      	movs	r3, #0
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b56:	f107 031c 	add.w	r3, r7, #28
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4832      	ldr	r0, [pc, #200]	; (8002c28 <HAL_ADC_MspInit+0x130>)
 8002b5e:	f003 fa7b 	bl	8006058 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b62:	4b32      	ldr	r3, [pc, #200]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b64:	4a32      	ldr	r2, [pc, #200]	; (8002c30 <HAL_ADC_MspInit+0x138>)
 8002b66:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b68:	4b30      	ldr	r3, [pc, #192]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b6e:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b74:	4b2d      	ldr	r3, [pc, #180]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b7a:	4b2c      	ldr	r3, [pc, #176]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b80:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b88:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b8a:	4b28      	ldr	r3, [pc, #160]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b90:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002b92:	4b26      	ldr	r3, [pc, #152]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002b98:	4b24      	ldr	r3, [pc, #144]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002b9a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b9e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba0:	4b22      	ldr	r3, [pc, #136]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002ba6:	4821      	ldr	r0, [pc, #132]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002ba8:	f002 fede 	bl	8005968 <HAL_DMA_Init>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d001      	beq.n	8002bb6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002bb2:	f7ff fdf3 	bl	800279c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1c      	ldr	r2, [pc, #112]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	; (8002c2c <HAL_ADC_MspInit+0x134>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002bc2:	e029      	b.n	8002c18 <HAL_ADC_MspInit+0x120>
  else if(hadc->Instance==ADC3)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a1a      	ldr	r2, [pc, #104]	; (8002c34 <HAL_ADC_MspInit+0x13c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d124      	bne.n	8002c18 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002bce:	4b15      	ldr	r3, [pc, #84]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd2:	4a14      	ldr	r2, [pc, #80]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002bd4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002bda:	4b12      	ldr	r3, [pc, #72]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002be2:	613b      	str	r3, [r7, #16]
 8002be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002be6:	4b0f      	ldr	r3, [pc, #60]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bea:	4a0e      	ldr	r2, [pc, #56]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002bec:	f043 0320 	orr.w	r3, r3, #32
 8002bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf2:	4b0c      	ldr	r3, [pc, #48]	; (8002c24 <HAL_ADC_MspInit+0x12c>)
 8002bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf6:	f003 0320 	and.w	r3, r3, #32
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSE_Pin|APP2_Pin;
 8002bfe:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c04:	2303      	movs	r3, #3
 8002c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c0c:	f107 031c 	add.w	r3, r7, #28
 8002c10:	4619      	mov	r1, r3
 8002c12:	4809      	ldr	r0, [pc, #36]	; (8002c38 <HAL_ADC_MspInit+0x140>)
 8002c14:	f003 fa20 	bl	8006058 <HAL_GPIO_Init>
}
 8002c18:	bf00      	nop
 8002c1a:	3730      	adds	r7, #48	; 0x30
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	40012000 	.word	0x40012000
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020800 	.word	0x40020800
 8002c2c:	200003a4 	.word	0x200003a4
 8002c30:	40026410 	.word	0x40026410
 8002c34:	40012200 	.word	0x40012200
 8002c38:	40021400 	.word	0x40021400

08002c3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08c      	sub	sp, #48	; 0x30
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c44:	f107 031c 	add.w	r3, r7, #28
 8002c48:	2200      	movs	r2, #0
 8002c4a:	601a      	str	r2, [r3, #0]
 8002c4c:	605a      	str	r2, [r3, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
 8002c50:	60da      	str	r2, [r3, #12]
 8002c52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a42      	ldr	r2, [pc, #264]	; (8002d64 <HAL_CAN_MspInit+0x128>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d13a      	bne.n	8002cd4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002c5e:	4b42      	ldr	r3, [pc, #264]	; (8002d68 <HAL_CAN_MspInit+0x12c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a40      	ldr	r2, [pc, #256]	; (8002d68 <HAL_CAN_MspInit+0x12c>)
 8002c66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002c68:	4b3f      	ldr	r3, [pc, #252]	; (8002d68 <HAL_CAN_MspInit+0x12c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10b      	bne.n	8002c88 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002c70:	4b3e      	ldr	r3, [pc, #248]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c74:	4a3d      	ldr	r2, [pc, #244]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002c76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002c7a:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	61bb      	str	r3, [r7, #24]
 8002c86:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c88:	4b38      	ldr	r3, [pc, #224]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a37      	ldr	r2, [pc, #220]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002c8e:	f043 0301 	orr.w	r3, r3, #1
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	617b      	str	r3, [r7, #20]
 8002c9e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8002ca0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002cb2:	2309      	movs	r3, #9
 8002cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cb6:	f107 031c 	add.w	r3, r7, #28
 8002cba:	4619      	mov	r1, r3
 8002cbc:	482c      	ldr	r0, [pc, #176]	; (8002d70 <HAL_CAN_MspInit+0x134>)
 8002cbe:	f003 f9cb 	bl	8006058 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2014      	movs	r0, #20
 8002cc8:	f002 fe17 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002ccc:	2014      	movs	r0, #20
 8002cce:	f002 fe30 	bl	8005932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002cd2:	e042      	b.n	8002d5a <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a26      	ldr	r2, [pc, #152]	; (8002d74 <HAL_CAN_MspInit+0x138>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d13d      	bne.n	8002d5a <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002ce4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002cf6:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_CAN_MspInit+0x12c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <HAL_CAN_MspInit+0x12c>)
 8002cfe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002d00:	4b19      	ldr	r3, [pc, #100]	; (8002d68 <HAL_CAN_MspInit+0x12c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d10b      	bne.n	8002d20 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d0c:	4a17      	ldr	r2, [pc, #92]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002d0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d12:	6413      	str	r3, [r2, #64]	; 0x40
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d24:	4a11      	ldr	r2, [pc, #68]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002d26:	f043 0302 	orr.w	r3, r3, #2
 8002d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2c:	4b0f      	ldr	r3, [pc, #60]	; (8002d6c <HAL_CAN_MspInit+0x130>)
 8002d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 8002d38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8002d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002d4a:	2309      	movs	r3, #9
 8002d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	f107 031c 	add.w	r3, r7, #28
 8002d52:	4619      	mov	r1, r3
 8002d54:	4808      	ldr	r0, [pc, #32]	; (8002d78 <HAL_CAN_MspInit+0x13c>)
 8002d56:	f003 f97f 	bl	8006058 <HAL_GPIO_Init>
}
 8002d5a:	bf00      	nop
 8002d5c:	3730      	adds	r7, #48	; 0x30
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40006400 	.word	0x40006400
 8002d68:	200006f0 	.word	0x200006f0
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40020000 	.word	0x40020000
 8002d74:	40006800 	.word	0x40006800
 8002d78:	40020400 	.word	0x40020400

08002d7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b08c      	sub	sp, #48	; 0x30
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d84:	f107 031c 	add.w	r3, r7, #28
 8002d88:	2200      	movs	r2, #0
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
 8002d90:	60da      	str	r2, [r3, #12]
 8002d92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d9c:	d129      	bne.n	8002df2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002d9e:	4b36      	ldr	r3, [pc, #216]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da2:	4a35      	ldr	r2, [pc, #212]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002da4:	f043 0301 	orr.w	r3, r3, #1
 8002da8:	6413      	str	r3, [r2, #64]	; 0x40
 8002daa:	4b33      	ldr	r3, [pc, #204]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	f003 0301 	and.w	r3, r3, #1
 8002db2:	61bb      	str	r3, [r7, #24]
 8002db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db6:	4b30      	ldr	r3, [pc, #192]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dba:	4a2f      	ldr	r2, [pc, #188]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002dbc:	f043 0301 	orr.w	r3, r3, #1
 8002dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002dc2:	4b2d      	ldr	r3, [pc, #180]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002de0:	2301      	movs	r3, #1
 8002de2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de4:	f107 031c 	add.w	r3, r7, #28
 8002de8:	4619      	mov	r1, r3
 8002dea:	4824      	ldr	r0, [pc, #144]	; (8002e7c <HAL_TIM_Base_MspInit+0x100>)
 8002dec:	f003 f934 	bl	8006058 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8002df0:	e03e      	b.n	8002e70 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM4)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a22      	ldr	r2, [pc, #136]	; (8002e80 <HAL_TIM_Base_MspInit+0x104>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d128      	bne.n	8002e4e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dfc:	4b1e      	ldr	r3, [pc, #120]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e00:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e02:	f043 0304 	orr.w	r3, r3, #4
 8002e06:	6413      	str	r3, [r2, #64]	; 0x40
 8002e08:	4b1b      	ldr	r3, [pc, #108]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e14:	4b18      	ldr	r3, [pc, #96]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e18:	4a17      	ldr	r2, [pc, #92]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e1a:	f043 0310 	orr.w	r3, r3, #16
 8002e1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e24:	f003 0310 	and.w	r3, r3, #16
 8002e28:	60fb      	str	r3, [r7, #12]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e30:	2302      	movs	r3, #2
 8002e32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e40:	f107 031c 	add.w	r3, r7, #28
 8002e44:	4619      	mov	r1, r3
 8002e46:	480f      	ldr	r0, [pc, #60]	; (8002e84 <HAL_TIM_Base_MspInit+0x108>)
 8002e48:	f003 f906 	bl	8006058 <HAL_GPIO_Init>
}
 8002e4c:	e010      	b.n	8002e70 <HAL_TIM_Base_MspInit+0xf4>
  else if(htim_base->Instance==TIM6)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a0d      	ldr	r2, [pc, #52]	; (8002e88 <HAL_TIM_Base_MspInit+0x10c>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d10b      	bne.n	8002e70 <HAL_TIM_Base_MspInit+0xf4>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002e58:	4b07      	ldr	r3, [pc, #28]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5c:	4a06      	ldr	r2, [pc, #24]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e5e:	f043 0310 	orr.w	r3, r3, #16
 8002e62:	6413      	str	r3, [r2, #64]	; 0x40
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <HAL_TIM_Base_MspInit+0xfc>)
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	f003 0310 	and.w	r3, r3, #16
 8002e6c:	60bb      	str	r3, [r7, #8]
 8002e6e:	68bb      	ldr	r3, [r7, #8]
}
 8002e70:	bf00      	nop
 8002e72:	3730      	adds	r7, #48	; 0x30
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	40023800 	.word	0x40023800
 8002e7c:	40020000 	.word	0x40020000
 8002e80:	40000800 	.word	0x40000800
 8002e84:	40021000 	.word	0x40021000
 8002e88:	40001000 	.word	0x40001000

08002e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b0ac      	sub	sp, #176	; 0xb0
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e94:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e98:	2200      	movs	r2, #0
 8002e9a:	601a      	str	r2, [r3, #0]
 8002e9c:	605a      	str	r2, [r3, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ea4:	f107 0318 	add.w	r3, r7, #24
 8002ea8:	2284      	movs	r2, #132	; 0x84
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4618      	mov	r0, r3
 8002eae:	f00b fa05 	bl	800e2bc <memset>
  if(huart->Instance==UART4)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a42      	ldr	r2, [pc, #264]	; (8002fc0 <HAL_UART_MspInit+0x134>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d13c      	bne.n	8002f36 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec6:	f107 0318 	add.w	r3, r7, #24
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f005 fa72 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002ed6:	f7ff fc61 	bl	800279c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002eda:	4b3a      	ldr	r3, [pc, #232]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	4a39      	ldr	r2, [pc, #228]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002ee0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee6:	4b37      	ldr	r3, [pc, #220]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eee:	617b      	str	r3, [r7, #20]
 8002ef0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef2:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef6:	4a33      	ldr	r2, [pc, #204]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	6313      	str	r3, [r2, #48]	; 0x30
 8002efe:	4b31      	ldr	r3, [pc, #196]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	613b      	str	r3, [r7, #16]
 8002f08:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f10:	2302      	movs	r3, #2
 8002f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002f22:	2308      	movs	r3, #8
 8002f24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4826      	ldr	r0, [pc, #152]	; (8002fc8 <HAL_UART_MspInit+0x13c>)
 8002f30:	f003 f892 	bl	8006058 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8002f34:	e040      	b.n	8002fb8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART7)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a24      	ldr	r2, [pc, #144]	; (8002fcc <HAL_UART_MspInit+0x140>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d13b      	bne.n	8002fb8 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f44:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002f46:	2300      	movs	r3, #0
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f4a:	f107 0318 	add.w	r3, r7, #24
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f005 fa30 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d001      	beq.n	8002f5e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8002f5a:	f7ff fc1f 	bl	800279c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002f5e:	4b19      	ldr	r3, [pc, #100]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f62:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002f68:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6a:	4b16      	ldr	r3, [pc, #88]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002f72:	60fb      	str	r3, [r7, #12]
 8002f74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002f76:	4b13      	ldr	r3, [pc, #76]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7a:	4a12      	ldr	r2, [pc, #72]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f7c:	f043 0320 	orr.w	r3, r3, #32
 8002f80:	6313      	str	r3, [r2, #48]	; 0x30
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_UART_MspInit+0x138>)
 8002f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	60bb      	str	r3, [r7, #8]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 8002f8e:	23c0      	movs	r3, #192	; 0xc0
 8002f90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f94:	2302      	movs	r3, #2
 8002f96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002fa6:	2308      	movs	r3, #8
 8002fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4807      	ldr	r0, [pc, #28]	; (8002fd0 <HAL_UART_MspInit+0x144>)
 8002fb4:	f003 f850 	bl	8006058 <HAL_GPIO_Init>
}
 8002fb8:	bf00      	nop
 8002fba:	37b0      	adds	r7, #176	; 0xb0
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	40004c00 	.word	0x40004c00
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020000 	.word	0x40020000
 8002fcc:	40007800 	.word	0x40007800
 8002fd0:	40021400 	.word	0x40021400

08002fd4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	601a      	str	r2, [r3, #0]
 8002fe0:	605a      	str	r2, [r3, #4]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	60da      	str	r2, [r3, #12]
 8002fe6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002fe8:	4b23      	ldr	r3, [pc, #140]	; (8003078 <HAL_FMC_MspInit+0xa4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d13f      	bne.n	8003070 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <HAL_FMC_MspInit+0xa4>)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <HAL_FMC_MspInit+0xa8>)
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	4a20      	ldr	r2, [pc, #128]	; (800307c <HAL_FMC_MspInit+0xa8>)
 8002ffc:	f043 0301 	orr.w	r3, r3, #1
 8003000:	6393      	str	r3, [r2, #56]	; 0x38
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <HAL_FMC_MspInit+0xa8>)
 8003004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	603b      	str	r3, [r7, #0]
 800300c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800300e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003012:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	2300      	movs	r3, #0
 800301a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800301c:	2303      	movs	r3, #3
 800301e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003020:	230c      	movs	r3, #12
 8003022:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003024:	1d3b      	adds	r3, r7, #4
 8003026:	4619      	mov	r1, r3
 8003028:	4815      	ldr	r0, [pc, #84]	; (8003080 <HAL_FMC_MspInit+0xac>)
 800302a:	f003 f815 	bl	8006058 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800302e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003032:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003034:	2302      	movs	r3, #2
 8003036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003038:	2300      	movs	r3, #0
 800303a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800303c:	2303      	movs	r3, #3
 800303e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003040:	230c      	movs	r3, #12
 8003042:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003044:	1d3b      	adds	r3, r7, #4
 8003046:	4619      	mov	r1, r3
 8003048:	480e      	ldr	r0, [pc, #56]	; (8003084 <HAL_FMC_MspInit+0xb0>)
 800304a:	f003 f805 	bl	8006058 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800304e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003052:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003054:	2302      	movs	r3, #2
 8003056:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003058:	2300      	movs	r3, #0
 800305a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003060:	230c      	movs	r3, #12
 8003062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003064:	1d3b      	adds	r3, r7, #4
 8003066:	4619      	mov	r1, r3
 8003068:	4807      	ldr	r0, [pc, #28]	; (8003088 <HAL_FMC_MspInit+0xb4>)
 800306a:	f002 fff5 	bl	8006058 <HAL_GPIO_Init>
 800306e:	e000      	b.n	8003072 <HAL_FMC_MspInit+0x9e>
    return;
 8003070:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200006f4 	.word	0x200006f4
 800307c:	40023800 	.word	0x40023800
 8003080:	40021400 	.word	0x40021400
 8003084:	40021000 	.word	0x40021000
 8003088:	40020c00 	.word	0x40020c00

0800308c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003094:	f7ff ff9e 	bl	8002fd4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003098:	bf00      	nop
 800309a:	3708      	adds	r7, #8
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80030a4:	e7fe      	b.n	80030a4 <NMI_Handler+0x4>

080030a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80030a6:	b480      	push	{r7}
 80030a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80030aa:	e7fe      	b.n	80030aa <HardFault_Handler+0x4>

080030ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80030ac:	b480      	push	{r7}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80030b0:	e7fe      	b.n	80030b0 <MemManage_Handler+0x4>

080030b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80030b6:	e7fe      	b.n	80030b6 <BusFault_Handler+0x4>

080030b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80030bc:	e7fe      	b.n	80030bc <UsageFault_Handler+0x4>

080030be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80030be:	b480      	push	{r7}
 80030c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030d0:	bf00      	nop
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr

080030da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030da:	b480      	push	{r7}
 80030dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr

080030e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030ec:	f001 f9b6 	bl	800445c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030f0:	bf00      	nop
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <CAN1_RX0_IRQHandler+0x10>)
 80030fa:	f002 f8f4 	bl	80052e6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000404 	.word	0x20000404

08003108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA2_Stream0_IRQHandler+0x10>)
 800310e:	f002 fd39 	bl	8005b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200003a4 	.word	0x200003a4

0800311c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <OTG_HS_IRQHandler+0x10>)
 8003122:	f003 fabc 	bl	800669e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20001bf0 	.word	0x20001bf0

08003130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003138:	4a14      	ldr	r2, [pc, #80]	; (800318c <_sbrk+0x5c>)
 800313a:	4b15      	ldr	r3, [pc, #84]	; (8003190 <_sbrk+0x60>)
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003144:	4b13      	ldr	r3, [pc, #76]	; (8003194 <_sbrk+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800314c:	4b11      	ldr	r3, [pc, #68]	; (8003194 <_sbrk+0x64>)
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <_sbrk+0x68>)
 8003150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003152:	4b10      	ldr	r3, [pc, #64]	; (8003194 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	d207      	bcs.n	8003170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003160:	f00b f8c4 	bl	800e2ec <__errno>
 8003164:	4603      	mov	r3, r0
 8003166:	220c      	movs	r2, #12
 8003168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	e009      	b.n	8003184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003170:	4b08      	ldr	r3, [pc, #32]	; (8003194 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003176:	4b07      	ldr	r3, [pc, #28]	; (8003194 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	4a05      	ldr	r2, [pc, #20]	; (8003194 <_sbrk+0x64>)
 8003180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20050000 	.word	0x20050000
 8003190:	00000400 	.word	0x00000400
 8003194:	200006f8 	.word	0x200006f8
 8003198:	20002240 	.word	0x20002240

0800319c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <SystemInit+0x20>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a6:	4a05      	ldr	r2, [pc, #20]	; (80031bc <SystemInit+0x20>)
 80031a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <traction_control_PID>:
const uint8_t kI = 0;
const uint8_t kD = 0;

const uint16_t TC_torque_limit = 100;

void traction_control_PID(){
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b084      	sub	sp, #16
 80031c4:	af00      	add	r7, sp, #0
    if (state != DRIVE) return;
 80031c6:	4b59      	ldr	r3, [pc, #356]	; (800332c <traction_control_PID+0x16c>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	2b03      	cmp	r3, #3
 80031ce:	f040 80a8 	bne.w	8003322 <traction_control_PID+0x162>

    // note: wheel speeds are in units of pulses/20ms
    const float avg_front_wheel_speed = (front_right_wheel_speed + front_left_wheel_speed)/2.0;
 80031d2:	4b57      	ldr	r3, [pc, #348]	; (8003330 <traction_control_PID+0x170>)
 80031d4:	881b      	ldrh	r3, [r3, #0]
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	461a      	mov	r2, r3
 80031da:	4b56      	ldr	r3, [pc, #344]	; (8003334 <traction_control_PID+0x174>)
 80031dc:	881b      	ldrh	r3, [r3, #0]
 80031de:	b29b      	uxth	r3, r3
 80031e0:	4413      	add	r3, r2
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fd f9be 	bl	8000564 <__aeabi_i2d>
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80031f0:	f7fd fb4c 	bl	800088c <__aeabi_ddiv>
 80031f4:	4602      	mov	r2, r0
 80031f6:	460b      	mov	r3, r1
 80031f8:	4610      	mov	r0, r2
 80031fa:	4619      	mov	r1, r3
 80031fc:	f7fd fc2e 	bl	8000a5c <__aeabi_d2f>
 8003200:	4603      	mov	r3, r0
 8003202:	60fb      	str	r3, [r7, #12]
    const float avg_back_wheel_speed = (back_right_wheel_speed + back_left_wheel_speed)/2.0;
 8003204:	4b4c      	ldr	r3, [pc, #304]	; (8003338 <traction_control_PID+0x178>)
 8003206:	881b      	ldrh	r3, [r3, #0]
 8003208:	b29b      	uxth	r3, r3
 800320a:	461a      	mov	r2, r3
 800320c:	4b4b      	ldr	r3, [pc, #300]	; (800333c <traction_control_PID+0x17c>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	b29b      	uxth	r3, r3
 8003212:	4413      	add	r3, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7fd f9a5 	bl	8000564 <__aeabi_i2d>
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003222:	f7fd fb33 	bl	800088c <__aeabi_ddiv>
 8003226:	4602      	mov	r2, r0
 8003228:	460b      	mov	r3, r1
 800322a:	4610      	mov	r0, r2
 800322c:	4619      	mov	r1, r3
 800322e:	f7fd fc15 	bl	8000a5c <__aeabi_d2f>
 8003232:	4603      	mov	r3, r0
 8003234:	60bb      	str	r3, [r7, #8]
    const float conversion_factor = (2*pi*wheel_radius)/pulses_per_rev;
 8003236:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003340 <traction_control_PID+0x180>
 800323a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800323e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003242:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003246:	233c      	movs	r3, #60	; 0x3c
 8003248:	ee07 3a90 	vmov	s15, r3
 800324c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003254:	edc7 7a01 	vstr	s15, [r7, #4]
    const float current_slip_ratio = (avg_back_wheel_speed*conversion_factor) / (avg_front_wheel_speed*conversion_factor);
 8003258:	ed97 7a02 	vldr	s14, [r7, #8]
 800325c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003260:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003264:	ed97 7a03 	vldr	s14, [r7, #12]
 8003268:	edd7 7a01 	vldr	s15, [r7, #4]
 800326c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003270:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003274:	edc7 7a00 	vstr	s15, [r7]

    // if target slip ratio has been achieved
//    if (current_slip_ratio < target_slip_ratio + 0.001 || current_slip_ratio > target_slip_ratio - 0.001) return;

    pid_error = target_slip_ratio - current_slip_ratio;
 8003278:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003344 <traction_control_PID+0x184>
 800327c:	edd7 7a00 	vldr	s15, [r7]
 8003280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003284:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003288:	ee17 3a90 	vmov	r3, s15
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b2e      	ldr	r3, [pc, #184]	; (8003348 <traction_control_PID+0x188>)
 8003290:	801a      	strh	r2, [r3, #0]
    integral = integral + pid_error;
 8003292:	4b2e      	ldr	r3, [pc, #184]	; (800334c <traction_control_PID+0x18c>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	b29a      	uxth	r2, r3
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <traction_control_PID+0x188>)
 800329a:	881b      	ldrh	r3, [r3, #0]
 800329c:	b29b      	uxth	r3, r3
 800329e:	4413      	add	r3, r2
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b2a      	ldr	r3, [pc, #168]	; (800334c <traction_control_PID+0x18c>)
 80032a4:	801a      	strh	r2, [r3, #0]
    derivative = pid_error - prev_pid_error;
 80032a6:	4b28      	ldr	r3, [pc, #160]	; (8003348 <traction_control_PID+0x188>)
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	b29a      	uxth	r2, r3
 80032ac:	4b28      	ldr	r3, [pc, #160]	; (8003350 <traction_control_PID+0x190>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	4b27      	ldr	r3, [pc, #156]	; (8003354 <traction_control_PID+0x194>)
 80032b8:	801a      	strh	r2, [r3, #0]

    TC_control_var = (kP * pid_error) + (kI * integral) + (kD * derivative);
 80032ba:	2300      	movs	r3, #0
 80032bc:	b29a      	uxth	r2, r3
 80032be:	4b22      	ldr	r3, [pc, #136]	; (8003348 <traction_control_PID+0x188>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	fb12 f303 	smulbb	r3, r2, r3
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	2300      	movs	r3, #0
 80032cc:	b299      	uxth	r1, r3
 80032ce:	4b1f      	ldr	r3, [pc, #124]	; (800334c <traction_control_PID+0x18c>)
 80032d0:	881b      	ldrh	r3, [r3, #0]
 80032d2:	b29b      	uxth	r3, r3
 80032d4:	fb11 f303 	smulbb	r3, r1, r3
 80032d8:	b29b      	uxth	r3, r3
 80032da:	4413      	add	r3, r2
 80032dc:	b29a      	uxth	r2, r3
 80032de:	2300      	movs	r3, #0
 80032e0:	b299      	uxth	r1, r3
 80032e2:	4b1c      	ldr	r3, [pc, #112]	; (8003354 <traction_control_PID+0x194>)
 80032e4:	881b      	ldrh	r3, [r3, #0]
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	fb11 f303 	smulbb	r3, r1, r3
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	4413      	add	r3, r2
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	4b19      	ldr	r3, [pc, #100]	; (8003358 <traction_control_PID+0x198>)
 80032f4:	801a      	strh	r2, [r3, #0]

    // limit PID torque request
    if (TC_control_var > TC_torque_limit) TC_control_var = TC_torque_limit;
 80032f6:	4b18      	ldr	r3, [pc, #96]	; (8003358 <traction_control_PID+0x198>)
 80032f8:	881b      	ldrh	r3, [r3, #0]
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2264      	movs	r2, #100	; 0x64
 80032fe:	4293      	cmp	r3, r2
 8003300:	d902      	bls.n	8003308 <traction_control_PID+0x148>
 8003302:	2264      	movs	r2, #100	; 0x64
 8003304:	4b14      	ldr	r3, [pc, #80]	; (8003358 <traction_control_PID+0x198>)
 8003306:	801a      	strh	r2, [r3, #0]
    if (TC_control_var < 0) TC_control_var = 0; // not the best way but works for now
 8003308:	4b13      	ldr	r3, [pc, #76]	; (8003358 <traction_control_PID+0x198>)
 800330a:	881b      	ldrh	r3, [r3, #0]

    TC_torque_adjustment = TC_control_var;
 800330c:	4b12      	ldr	r3, [pc, #72]	; (8003358 <traction_control_PID+0x198>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	b29a      	uxth	r2, r3
 8003312:	4b12      	ldr	r3, [pc, #72]	; (800335c <traction_control_PID+0x19c>)
 8003314:	801a      	strh	r2, [r3, #0]

    prev_pid_error = pid_error;
 8003316:	4b0c      	ldr	r3, [pc, #48]	; (8003348 <traction_control_PID+0x188>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	b29a      	uxth	r2, r3
 800331c:	4b0c      	ldr	r3, [pc, #48]	; (8003350 <traction_control_PID+0x190>)
 800331e:	801a      	strh	r2, [r3, #0]
 8003320:	e000      	b.n	8003324 <traction_control_PID+0x164>
    if (state != DRIVE) return;
 8003322:	bf00      	nop
}
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	20000089 	.word	0x20000089
 8003330:	2000020c 	.word	0x2000020c
 8003334:	2000020e 	.word	0x2000020e
 8003338:	20000210 	.word	0x20000210
 800333c:	20000212 	.word	0x20000212
 8003340:	4048f5c3 	.word	0x4048f5c3
 8003344:	3dcccccd 	.word	0x3dcccccd
 8003348:	20000700 	.word	0x20000700
 800334c:	20000704 	.word	0x20000704
 8003350:	20000702 	.word	0x20000702
 8003354:	20000706 	.word	0x20000706
 8003358:	200006fc 	.word	0x200006fc
 800335c:	200006fe 	.word	0x200006fe

08003360 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4611      	mov	r1, r2
 800336c:	461a      	mov	r2, r3
 800336e:	460b      	mov	r3, r1
 8003370:	80fb      	strh	r3, [r7, #6]
 8003372:	4613      	mov	r3, r2
 8003374:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	88fa      	ldrh	r2, [r7, #6]
 8003380:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	88ba      	ldrh	r2, [r7, #4]
 8003386:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2204      	movs	r2, #4
 800338c:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2204      	movs	r2, #4
 8003392:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	3b01      	subs	r3, #1
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	b21a      	sxth	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	1ad3      	subs	r3, r2, r3
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	b21a      	sxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 800341e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003428:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003446:	2300      	movs	r3, #0
 8003448:	75fb      	strb	r3, [r7, #23]
 800344a:	e010      	b.n	800346e <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	3309      	adds	r3, #9
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4413      	add	r3, r2
 8003456:	2200      	movs	r2, #0
 8003458:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800345a:	7dfb      	ldrb	r3, [r7, #23]
 800345c:	68fa      	ldr	r2, [r7, #12]
 800345e:	3309      	adds	r3, #9
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	4413      	add	r3, r2
 8003464:	2200      	movs	r2, #0
 8003466:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003468:	7dfb      	ldrb	r3, [r7, #23]
 800346a:	3301      	adds	r3, #1
 800346c:	75fb      	strb	r3, [r7, #23]
 800346e:	7dfb      	ldrb	r3, [r7, #23]
 8003470:	2b06      	cmp	r3, #6
 8003472:	d9eb      	bls.n	800344c <UG_Init+0xec>
   }

   gui = g;
 8003474:	4a04      	ldr	r2, [pc, #16]	; (8003488 <UG_Init+0x128>)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6013      	str	r3, [r2, #0]
   return 1;
 800347a:	2301      	movs	r3, #1
}
 800347c:	4618      	mov	r0, r3
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	20000708 	.word	0x20000708

0800348c <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 800348c:	b4b0      	push	{r4, r5, r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <UG_FontSelect+0x28>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800349e:	4615      	mov	r5, r2
 80034a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80034a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80034a4:	682b      	ldr	r3, [r5, #0]
 80034a6:	6023      	str	r3, [r4, #0]
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bcb0      	pop	{r4, r5, r7}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	20000708 	.word	0x20000708

080034b8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af02      	add	r7, sp, #8
 80034be:	4603      	mov	r3, r0
 80034c0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <UG_FillScreen+0x40>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	b21a      	sxth	r2, r3
 80034d2:	4b09      	ldr	r3, [pc, #36]	; (80034f8 <UG_FillScreen+0x40>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	b219      	sxth	r1, r3
 80034e2:	88fb      	ldrh	r3, [r7, #6]
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	460b      	mov	r3, r1
 80034e8:	2100      	movs	r1, #0
 80034ea:	2000      	movs	r0, #0
 80034ec:	f000 f806 	bl	80034fc <UG_FillFrame>
}
 80034f0:	bf00      	nop
 80034f2:	3708      	adds	r7, #8
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000708 	.word	0x20000708

080034fc <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80034fc:	b5b0      	push	{r4, r5, r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af02      	add	r7, sp, #8
 8003502:	4604      	mov	r4, r0
 8003504:	4608      	mov	r0, r1
 8003506:	4611      	mov	r1, r2
 8003508:	461a      	mov	r2, r3
 800350a:	4623      	mov	r3, r4
 800350c:	80fb      	strh	r3, [r7, #6]
 800350e:	4603      	mov	r3, r0
 8003510:	80bb      	strh	r3, [r7, #4]
 8003512:	460b      	mov	r3, r1
 8003514:	807b      	strh	r3, [r7, #2]
 8003516:	4613      	mov	r3, r2
 8003518:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 800351a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800351e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003522:	429a      	cmp	r2, r3
 8003524:	da05      	bge.n	8003532 <UG_FillFrame+0x36>
   {
      n = x2;
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 800352a:	88fb      	ldrh	r3, [r7, #6]
 800352c:	807b      	strh	r3, [r7, #2]
      x1 = n;
 800352e:	89fb      	ldrh	r3, [r7, #14]
 8003530:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 8003532:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003536:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800353a:	429a      	cmp	r2, r3
 800353c:	da05      	bge.n	800354a <UG_FillFrame+0x4e>
   {
      n = y2;
 800353e:	883b      	ldrh	r3, [r7, #0]
 8003540:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 8003542:	88bb      	ldrh	r3, [r7, #4]
 8003544:	803b      	strh	r3, [r7, #0]
      y1 = n;
 8003546:	89fb      	ldrh	r3, [r7, #14]
 8003548:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 800354a:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <UG_FillFrame+0xdc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d012      	beq.n	8003580 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 800355a:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <UG_FillFrame+0xdc>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003560:	461d      	mov	r5, r3
 8003562:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003566:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800356a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800356e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003572:	8c3b      	ldrh	r3, [r7, #32]
 8003574:	9300      	str	r3, [sp, #0]
 8003576:	4623      	mov	r3, r4
 8003578:	47a8      	blx	r5
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d027      	beq.n	80035d0 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8003580:	88bb      	ldrh	r3, [r7, #4]
 8003582:	81bb      	strh	r3, [r7, #12]
 8003584:	e01d      	b.n	80035c2 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8003586:	88fb      	ldrh	r3, [r7, #6]
 8003588:	81fb      	strh	r3, [r7, #14]
 800358a:	e00e      	b.n	80035aa <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 800358c:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <UG_FillFrame+0xdc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	8c3a      	ldrh	r2, [r7, #32]
 8003594:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003598:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800359c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800359e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	81fb      	strh	r3, [r7, #14]
 80035aa:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80035ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	ddea      	ble.n	800358c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80035b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	b29b      	uxth	r3, r3
 80035c0:	81bb      	strh	r3, [r7, #12]
 80035c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035c6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	dddb      	ble.n	8003586 <UG_FillFrame+0x8a>
 80035ce:	e000      	b.n	80035d2 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80035d0:	bf00      	nop
      }
   }
}
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bdb0      	pop	{r4, r5, r7, pc}
 80035d8:	20000708 	.word	0x20000708

080035dc <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b087      	sub	sp, #28
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	4603      	mov	r3, r0
 80035e4:	603a      	str	r2, [r7, #0]
 80035e6:	80fb      	strh	r3, [r7, #6]
 80035e8:	460b      	mov	r3, r1
 80035ea:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 80035ec:	88fb      	ldrh	r3, [r7, #6]
 80035ee:	81fb      	strh	r3, [r7, #14]
   yp=y;
 80035f0:	88bb      	ldrh	r3, [r7, #4]
 80035f2:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 80035f4:	e06d      	b.n	80036d2 <UG_PutString+0xf6>
   {
      chr = *str++;
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	603a      	str	r2, [r7, #0]
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	b29a      	uxth	r2, r3
 8003604:	4b37      	ldr	r3, [pc, #220]	; (80036e4 <UG_PutString+0x108>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800360a:	429a      	cmp	r2, r3
 800360c:	d361      	bcc.n	80036d2 <UG_PutString+0xf6>
 800360e:	7afb      	ldrb	r3, [r7, #11]
 8003610:	b29a      	uxth	r2, r3
 8003612:	4b34      	ldr	r3, [pc, #208]	; (80036e4 <UG_PutString+0x108>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003618:	429a      	cmp	r2, r3
 800361a:	d900      	bls.n	800361e <UG_PutString+0x42>
 800361c:	e059      	b.n	80036d2 <UG_PutString+0xf6>
      if ( chr == '\n' )
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	2b0a      	cmp	r3, #10
 8003622:	d104      	bne.n	800362e <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 8003624:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <UG_PutString+0x108>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	889b      	ldrh	r3, [r3, #4]
 800362a:	81fb      	strh	r3, [r7, #14]
         continue;
 800362c:	e051      	b.n	80036d2 <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 800362e:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <UG_PutString+0x108>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003634:	2b00      	cmp	r3, #0
 8003636:	d00a      	beq.n	800364e <UG_PutString+0x72>
 8003638:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <UG_PutString+0x108>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	7afa      	ldrb	r2, [r7, #11]
 8003640:	4928      	ldr	r1, [pc, #160]	; (80036e4 <UG_PutString+0x108>)
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8003646:	1a52      	subs	r2, r2, r1
 8003648:	4413      	add	r3, r2
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	e004      	b.n	8003658 <UG_PutString+0x7c>
 800364e:	4b25      	ldr	r3, [pc, #148]	; (80036e4 <UG_PutString+0x108>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003656:	b2db      	uxtb	r3, r3
 8003658:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 800365a:	4b22      	ldr	r3, [pc, #136]	; (80036e4 <UG_PutString+0x108>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003662:	4619      	mov	r1, r3
 8003664:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003668:	7abb      	ldrb	r3, [r7, #10]
 800366a:	4413      	add	r3, r2
 800366c:	4299      	cmp	r1, r3
 800366e:	dc11      	bgt.n	8003694 <UG_PutString+0xb8>
      {
         xp = x;
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 8003674:	4b1b      	ldr	r3, [pc, #108]	; (80036e4 <UG_PutString+0x108>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800367c:	b29a      	uxth	r2, r3
 800367e:	4b19      	ldr	r3, [pc, #100]	; (80036e4 <UG_PutString+0x108>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8003686:	b29b      	uxth	r3, r3
 8003688:	4413      	add	r3, r2
 800368a:	b29a      	uxth	r2, r3
 800368c:	89bb      	ldrh	r3, [r7, #12]
 800368e:	4413      	add	r3, r2
 8003690:	b29b      	uxth	r3, r3
 8003692:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <UG_PutString+0x108>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 800369c:	4b11      	ldr	r3, [pc, #68]	; (80036e4 <UG_PutString+0x108>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80036a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80036a8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80036ac:	7af8      	ldrb	r0, [r7, #11]
 80036ae:	9300      	str	r3, [sp, #0]
 80036b0:	4623      	mov	r3, r4
 80036b2:	f000 f89d 	bl	80037f0 <UG_PutChar>

      xp += cw + gui->char_h_space;
 80036b6:	7abb      	ldrb	r3, [r7, #10]
 80036b8:	b21a      	sxth	r2, r3
 80036ba:	4b0a      	ldr	r3, [pc, #40]	; (80036e4 <UG_PutString+0x108>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 80036c2:	b21b      	sxth	r3, r3
 80036c4:	4413      	add	r3, r2
 80036c6:	b21b      	sxth	r3, r3
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	89fb      	ldrh	r3, [r7, #14]
 80036cc:	4413      	add	r3, r2
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d18d      	bne.n	80035f6 <UG_PutString+0x1a>
   }
}
 80036da:	bf00      	nop
 80036dc:	bf00      	nop
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd90      	pop	{r4, r7, pc}
 80036e4:	20000708 	.word	0x20000708

080036e8 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 80036e8:	b590      	push	{r4, r7, lr}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60ba      	str	r2, [r7, #8]
 80036f0:	461a      	mov	r2, r3
 80036f2:	4603      	mov	r3, r0
 80036f4:	81fb      	strh	r3, [r7, #14]
 80036f6:	460b      	mov	r3, r1
 80036f8:	81bb      	strh	r3, [r7, #12]
 80036fa:	4613      	mov	r3, r2
 80036fc:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 80036fe:	89fb      	ldrh	r3, [r7, #14]
 8003700:	82fb      	strh	r3, [r7, #22]
   yp=y;
 8003702:	89bb      	ldrh	r3, [r7, #12]
 8003704:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 8003706:	e067      	b.n	80037d8 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	1c5a      	adds	r2, r3, #1
 800370c:	60ba      	str	r2, [r7, #8]
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8003712:	7cfb      	ldrb	r3, [r7, #19]
 8003714:	b29a      	uxth	r2, r3
 8003716:	4b35      	ldr	r3, [pc, #212]	; (80037ec <UG_PutColorString+0x104>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800371c:	429a      	cmp	r2, r3
 800371e:	d35b      	bcc.n	80037d8 <UG_PutColorString+0xf0>
 8003720:	7cfb      	ldrb	r3, [r7, #19]
 8003722:	b29a      	uxth	r2, r3
 8003724:	4b31      	ldr	r3, [pc, #196]	; (80037ec <UG_PutColorString+0x104>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800372a:	429a      	cmp	r2, r3
 800372c:	d900      	bls.n	8003730 <UG_PutColorString+0x48>
 800372e:	e053      	b.n	80037d8 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 8003730:	7cfb      	ldrb	r3, [r7, #19]
 8003732:	2b0a      	cmp	r3, #10
 8003734:	d104      	bne.n	8003740 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <UG_PutColorString+0x104>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	889b      	ldrh	r3, [r3, #4]
 800373c:	82fb      	strh	r3, [r7, #22]
         continue;
 800373e:	e04b      	b.n	80037d8 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8003740:	4b2a      	ldr	r3, [pc, #168]	; (80037ec <UG_PutColorString+0x104>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <UG_PutColorString+0x78>
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <UG_PutColorString+0x104>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	7cfa      	ldrb	r2, [r7, #19]
 8003752:	4926      	ldr	r1, [pc, #152]	; (80037ec <UG_PutColorString+0x104>)
 8003754:	6809      	ldr	r1, [r1, #0]
 8003756:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8003758:	1a52      	subs	r2, r2, r1
 800375a:	4413      	add	r3, r2
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	e004      	b.n	800376a <UG_PutColorString+0x82>
 8003760:	4b22      	ldr	r3, [pc, #136]	; (80037ec <UG_PutColorString+0x104>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003768:	b2db      	uxtb	r3, r3
 800376a:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 800376c:	4b1f      	ldr	r3, [pc, #124]	; (80037ec <UG_PutColorString+0x104>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003774:	4619      	mov	r1, r3
 8003776:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800377a:	7cbb      	ldrb	r3, [r7, #18]
 800377c:	4413      	add	r3, r2
 800377e:	4299      	cmp	r1, r3
 8003780:	dc11      	bgt.n	80037a6 <UG_PutColorString+0xbe>
      {
         xp = x;
 8003782:	89fb      	ldrh	r3, [r7, #14]
 8003784:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 8003786:	4b19      	ldr	r3, [pc, #100]	; (80037ec <UG_PutColorString+0x104>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800378e:	b29a      	uxth	r2, r3
 8003790:	4b16      	ldr	r3, [pc, #88]	; (80037ec <UG_PutColorString+0x104>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8003798:	b29b      	uxth	r3, r3
 800379a:	4413      	add	r3, r2
 800379c:	b29a      	uxth	r2, r3
 800379e:	8abb      	ldrh	r3, [r7, #20]
 80037a0:	4413      	add	r3, r2
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 80037a6:	88fc      	ldrh	r4, [r7, #6]
 80037a8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80037ac:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80037b0:	7cf8      	ldrb	r0, [r7, #19]
 80037b2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80037b4:	9300      	str	r3, [sp, #0]
 80037b6:	4623      	mov	r3, r4
 80037b8:	f000 f81a 	bl	80037f0 <UG_PutChar>

      xp += cw + gui->char_h_space;
 80037bc:	7cbb      	ldrb	r3, [r7, #18]
 80037be:	b21a      	sxth	r2, r3
 80037c0:	4b0a      	ldr	r3, [pc, #40]	; (80037ec <UG_PutColorString+0x104>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 80037c8:	b21b      	sxth	r3, r3
 80037ca:	4413      	add	r3, r2
 80037cc:	b21b      	sxth	r3, r3
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	8afb      	ldrh	r3, [r7, #22]
 80037d2:	4413      	add	r3, r2
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d193      	bne.n	8003708 <UG_PutColorString+0x20>
   }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	371c      	adds	r7, #28
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd90      	pop	{r4, r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000708 	.word	0x20000708

080037f0 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af02      	add	r7, sp, #8
 80037f6:	4604      	mov	r4, r0
 80037f8:	4608      	mov	r0, r1
 80037fa:	4611      	mov	r1, r2
 80037fc:	461a      	mov	r2, r3
 80037fe:	4623      	mov	r3, r4
 8003800:	71fb      	strb	r3, [r7, #7]
 8003802:	4603      	mov	r3, r0
 8003804:	80bb      	strh	r3, [r7, #4]
 8003806:	460b      	mov	r3, r1
 8003808:	807b      	strh	r3, [r7, #2]
 800380a:	4613      	mov	r3, r2
 800380c:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 800380e:	4b09      	ldr	r3, [pc, #36]	; (8003834 <UG_PutChar+0x44>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	332c      	adds	r3, #44	; 0x2c
 8003814:	883c      	ldrh	r4, [r7, #0]
 8003816:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800381a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800381e:	79f8      	ldrb	r0, [r7, #7]
 8003820:	9301      	str	r3, [sp, #4]
 8003822:	8b3b      	ldrh	r3, [r7, #24]
 8003824:	9300      	str	r3, [sp, #0]
 8003826:	4623      	mov	r3, r4
 8003828:	f000 f852 	bl	80038d0 <_UG_PutChar>
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bd90      	pop	{r4, r7, pc}
 8003834:	20000708 	.word	0x20000708

08003838 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <UG_SetForecolor+0x20>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	88fa      	ldrh	r2, [r7, #6]
 8003848:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	20000708 	.word	0x20000708

0800385c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8003866:	4b05      	ldr	r3, [pc, #20]	; (800387c <UG_SetBackcolor+0x20>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	88fa      	ldrh	r2, [r7, #6]
 800386c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	20000708 	.word	0x20000708

08003880 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	4603      	mov	r3, r0
 8003888:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800388a:	4b06      	ldr	r3, [pc, #24]	; (80038a4 <UG_FontSetHSpace+0x24>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	b252      	sxtb	r2, r2
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000708 	.word	0x20000708

080038a8 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	4603      	mov	r3, r0
 80038b0:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <UG_FontSetVSpace+0x24>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	88fa      	ldrh	r2, [r7, #6]
 80038b8:	b252      	sxtb	r2, r2
 80038ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80038be:	bf00      	nop
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000708 	.word	0x20000708

080038d0 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 80038d0:	b5b0      	push	{r4, r5, r7, lr}
 80038d2:	b08a      	sub	sp, #40	; 0x28
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4604      	mov	r4, r0
 80038d8:	4608      	mov	r0, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	461a      	mov	r2, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	71fb      	strb	r3, [r7, #7]
 80038e2:	4603      	mov	r3, r0
 80038e4:	80bb      	strh	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	807b      	strh	r3, [r7, #2]
 80038ea:	4613      	mov	r3, r2
 80038ec:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 80038ee:	79fb      	ldrb	r3, [r7, #7]
 80038f0:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 80038f2:	7e3b      	ldrb	r3, [r7, #24]
 80038f4:	2bfc      	cmp	r3, #252	; 0xfc
 80038f6:	dc77      	bgt.n	80039e8 <_UG_PutChar+0x118>
 80038f8:	2bd6      	cmp	r3, #214	; 0xd6
 80038fa:	da08      	bge.n	800390e <_UG_PutChar+0x3e>
 80038fc:	2bc4      	cmp	r3, #196	; 0xc4
 80038fe:	d06a      	beq.n	80039d6 <_UG_PutChar+0x106>
 8003900:	2bc4      	cmp	r3, #196	; 0xc4
 8003902:	dc71      	bgt.n	80039e8 <_UG_PutChar+0x118>
 8003904:	2bb0      	cmp	r3, #176	; 0xb0
 8003906:	d06c      	beq.n	80039e2 <_UG_PutChar+0x112>
 8003908:	2bb5      	cmp	r3, #181	; 0xb5
 800390a:	d067      	beq.n	80039dc <_UG_PutChar+0x10c>
 800390c:	e06c      	b.n	80039e8 <_UG_PutChar+0x118>
 800390e:	3bd6      	subs	r3, #214	; 0xd6
 8003910:	2b26      	cmp	r3, #38	; 0x26
 8003912:	d869      	bhi.n	80039e8 <_UG_PutChar+0x118>
 8003914:	a201      	add	r2, pc, #4	; (adr r2, 800391c <_UG_PutChar+0x4c>)
 8003916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391a:	bf00      	nop
 800391c:	080039bf 	.word	0x080039bf
 8003920:	080039e9 	.word	0x080039e9
 8003924:	080039e9 	.word	0x080039e9
 8003928:	080039e9 	.word	0x080039e9
 800392c:	080039e9 	.word	0x080039e9
 8003930:	080039e9 	.word	0x080039e9
 8003934:	080039cb 	.word	0x080039cb
 8003938:	080039e9 	.word	0x080039e9
 800393c:	080039e9 	.word	0x080039e9
 8003940:	080039e9 	.word	0x080039e9
 8003944:	080039e9 	.word	0x080039e9
 8003948:	080039e9 	.word	0x080039e9
 800394c:	080039e9 	.word	0x080039e9
 8003950:	080039e9 	.word	0x080039e9
 8003954:	080039d1 	.word	0x080039d1
 8003958:	080039e9 	.word	0x080039e9
 800395c:	080039e9 	.word	0x080039e9
 8003960:	080039e9 	.word	0x080039e9
 8003964:	080039e9 	.word	0x080039e9
 8003968:	080039e9 	.word	0x080039e9
 800396c:	080039e9 	.word	0x080039e9
 8003970:	080039e9 	.word	0x080039e9
 8003974:	080039e9 	.word	0x080039e9
 8003978:	080039e9 	.word	0x080039e9
 800397c:	080039e9 	.word	0x080039e9
 8003980:	080039e9 	.word	0x080039e9
 8003984:	080039e9 	.word	0x080039e9
 8003988:	080039e9 	.word	0x080039e9
 800398c:	080039e9 	.word	0x080039e9
 8003990:	080039e9 	.word	0x080039e9
 8003994:	080039e9 	.word	0x080039e9
 8003998:	080039e9 	.word	0x080039e9
 800399c:	080039b9 	.word	0x080039b9
 80039a0:	080039e9 	.word	0x080039e9
 80039a4:	080039e9 	.word	0x080039e9
 80039a8:	080039e9 	.word	0x080039e9
 80039ac:	080039e9 	.word	0x080039e9
 80039b0:	080039e9 	.word	0x080039e9
 80039b4:	080039c5 	.word	0x080039c5
   {
      case 0xF6: bt = 0x94; break; // ö
 80039b8:	2394      	movs	r3, #148	; 0x94
 80039ba:	763b      	strb	r3, [r7, #24]
 80039bc:	e014      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 80039be:	2399      	movs	r3, #153	; 0x99
 80039c0:	763b      	strb	r3, [r7, #24]
 80039c2:	e011      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 80039c4:	2381      	movs	r3, #129	; 0x81
 80039c6:	763b      	strb	r3, [r7, #24]
 80039c8:	e00e      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 80039ca:	239a      	movs	r3, #154	; 0x9a
 80039cc:	763b      	strb	r3, [r7, #24]
 80039ce:	e00b      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 80039d0:	2384      	movs	r3, #132	; 0x84
 80039d2:	763b      	strb	r3, [r7, #24]
 80039d4:	e008      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 80039d6:	238e      	movs	r3, #142	; 0x8e
 80039d8:	763b      	strb	r3, [r7, #24]
 80039da:	e005      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 80039dc:	23e6      	movs	r3, #230	; 0xe6
 80039de:	763b      	strb	r3, [r7, #24]
 80039e0:	e002      	b.n	80039e8 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 80039e2:	23f8      	movs	r3, #248	; 0xf8
 80039e4:	763b      	strb	r3, [r7, #24]
 80039e6:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 80039e8:	7e3b      	ldrb	r3, [r7, #24]
 80039ea:	b29a      	uxth	r2, r3
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	895b      	ldrh	r3, [r3, #10]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	f0c0 81fc 	bcc.w	8003dee <_UG_PutChar+0x51e>
 80039f6:	7e3b      	ldrb	r3, [r7, #24]
 80039f8:	b29a      	uxth	r2, r3
 80039fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039fc:	899b      	ldrh	r3, [r3, #12]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	f200 81f5 	bhi.w	8003dee <_UG_PutChar+0x51e>

   yo = y;
 8003a04:	887b      	ldrh	r3, [r7, #2]
 8003a06:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8003a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a0e:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8003a10:	8b7b      	ldrh	r3, [r7, #26]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	f000 81ed 	beq.w	8003df2 <_UG_PutChar+0x522>
   bn >>= 3;
 8003a18:	8b7b      	ldrh	r3, [r7, #26]
 8003a1a:	08db      	lsrs	r3, r3, #3
 8003a1c:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8003a1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a20:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <_UG_PutChar+0x166>
 8003a30:	8b7b      	ldrh	r3, [r7, #26]
 8003a32:	3301      	adds	r3, #1
 8003a34:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8003a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d009      	beq.n	8003a52 <_UG_PutChar+0x182>
 8003a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	7e3a      	ldrb	r2, [r7, #24]
 8003a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a46:	8949      	ldrh	r1, [r1, #10]
 8003a48:	1a52      	subs	r2, r2, r1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	781b      	ldrb	r3, [r3, #0]
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	e003      	b.n	8003a5a <_UG_PutChar+0x18a>
 8003a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8003a5c:	4b93      	ldr	r3, [pc, #588]	; (8003cac <_UG_PutChar+0x3dc>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80d8 	beq.w	8003c1e <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8003a6e:	4b8f      	ldr	r3, [pc, #572]	; (8003cac <_UG_PutChar+0x3dc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a74:	461d      	mov	r5, r3
 8003a76:	88ba      	ldrh	r2, [r7, #4]
 8003a78:	8a7b      	ldrh	r3, [r7, #18]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29b      	uxth	r3, r3
 8003a82:	b21c      	sxth	r4, r3
 8003a84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a86:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	887b      	ldrh	r3, [r7, #2]
 8003a8e:	4413      	add	r3, r2
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	b21b      	sxth	r3, r3
 8003a98:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003a9c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003aa0:	4622      	mov	r2, r4
 8003aa2:	47a8      	blx	r5
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 8003aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aaa:	791b      	ldrb	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d14d      	bne.n	8003b4c <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8003ab0:	7e3b      	ldrb	r3, [r7, #24]
 8003ab2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ab4:	8952      	ldrh	r2, [r2, #10]
 8003ab6:	1a9b      	subs	r3, r3, r2
 8003ab8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003aba:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	8b7a      	ldrh	r2, [r7, #26]
 8003ac4:	fb02 f303 	mul.w	r3, r2, r3
 8003ac8:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 8003aca:	2300      	movs	r3, #0
 8003acc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ace:	e036      	b.n	8003b3e <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8003ad0:	8a7b      	ldrh	r3, [r7, #18]
 8003ad2:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ad8:	e02a      	b.n	8003b30 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 8003ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	1c59      	adds	r1, r3, #1
 8003ae2:	6179      	str	r1, [r7, #20]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 8003aea:	2300      	movs	r3, #0
 8003aec:	847b      	strh	r3, [r7, #34]	; 0x22
 8003aee:	e016      	b.n	8003b1e <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8003af0:	7e7b      	ldrb	r3, [r7, #25]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d004      	beq.n	8003b04 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 8003afa:	883a      	ldrh	r2, [r7, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4610      	mov	r0, r2
 8003b00:	4798      	blx	r3
 8003b02:	e003      	b.n	8003b0c <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8003b04:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4798      	blx	r3
				   }
				   b >>= 1;
 8003b0c:	7e7b      	ldrb	r3, [r7, #25]
 8003b0e:	085b      	lsrs	r3, r3, #1
 8003b10:	767b      	strb	r3, [r7, #25]
				   c--;
 8003b12:	8bbb      	ldrh	r3, [r7, #28]
 8003b14:	3b01      	subs	r3, #1
 8003b16:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8003b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	847b      	strh	r3, [r7, #34]	; 0x22
 8003b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b20:	2b07      	cmp	r3, #7
 8003b22:	d802      	bhi.n	8003b2a <_UG_PutChar+0x25a>
 8003b24:	8bbb      	ldrh	r3, [r7, #28]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e2      	bne.n	8003af0 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8003b2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b30:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b32:	8b7b      	ldrh	r3, [r7, #26]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d3d0      	bcc.n	8003ada <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8003b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b42:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003b46:	4293      	cmp	r3, r2
 8003b48:	dbc2      	blt.n	8003ad0 <_UG_PutChar+0x200>
 8003b4a:	e153      	b.n	8003df4 <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8003b4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b4e:	791b      	ldrb	r3, [r3, #4]
 8003b50:	2b01      	cmp	r3, #1
 8003b52:	f040 814f 	bne.w	8003df4 <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8003b56:	7e3b      	ldrb	r3, [r7, #24]
 8003b58:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b5a:	8952      	ldrh	r2, [r2, #10]
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b60:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003b64:	fb02 f303 	mul.w	r3, r2, r3
 8003b68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003b6a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003b6e:	fb02 f303 	mul.w	r3, r2, r3
 8003b72:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8003b74:	2300      	movs	r3, #0
 8003b76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003b78:	e04a      	b.n	8003c10 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003b7e:	e036      	b.n	8003bee <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8003b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	1c59      	adds	r1, r3, #1
 8003b88:	6179      	str	r1, [r7, #20]
 8003b8a:	4413      	add	r3, r2
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8003b90:	883b      	ldrh	r3, [r7, #0]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	7e7a      	ldrb	r2, [r7, #25]
 8003b96:	fb03 f202 	mul.w	r2, r3, r2
 8003b9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	7e79      	ldrb	r1, [r7, #25]
 8003ba0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8003ba4:	fb01 f303 	mul.w	r3, r1, r3
 8003ba8:	4413      	add	r3, r2
 8003baa:	121b      	asrs	r3, r3, #8
 8003bac:	b21b      	sxth	r3, r3
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	b21a      	sxth	r2, r3
 8003bb2:	883b      	ldrh	r3, [r7, #0]
 8003bb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bb8:	7e79      	ldrb	r1, [r7, #25]
 8003bba:	fb03 f101 	mul.w	r1, r3, r1
 8003bbe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bc0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003bc4:	7e78      	ldrb	r0, [r7, #25]
 8003bc6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	440b      	add	r3, r1
 8003bd0:	121b      	asrs	r3, r3, #8
 8003bd2:	b21b      	sxth	r3, r3
 8003bd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003bd8:	b21b      	sxth	r3, r3
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	b21b      	sxth	r3, r3
 8003bde:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8003be0:	8a3a      	ldrh	r2, [r7, #16]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4610      	mov	r0, r2
 8003be6:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8003be8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003bea:	3301      	adds	r3, #1
 8003bec:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bf0:	8a7b      	ldrh	r3, [r7, #18]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d3c4      	bcc.n	8003b80 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 8003bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	8a7b      	ldrh	r3, [r7, #18]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	4413      	add	r3, r2
 8003c08:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8003c0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c0c:	3301      	adds	r3, #1
 8003c0e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003c12:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c14:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	dbae      	blt.n	8003b7a <_UG_PutChar+0x2aa>
 8003c1c:	e0ea      	b.n	8003df4 <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	791b      	ldrb	r3, [r3, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d16e      	bne.n	8003d04 <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 8003c26:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8003c2a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003c2e:	8a7b      	ldrh	r3, [r7, #18]
 8003c30:	4413      	add	r3, r2
 8003c32:	3b01      	subs	r3, #1
 8003c34:	461c      	mov	r4, r3
 8003c36:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8003c3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c40:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003c44:	4413      	add	r3, r2
 8003c46:	3b01      	subs	r3, #1
 8003c48:	460a      	mov	r2, r1
 8003c4a:	4621      	mov	r1, r4
 8003c4c:	f000 f99c 	bl	8003f88 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8003c50:	f000 fa14 	bl	800407c <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8003c54:	7e3b      	ldrb	r3, [r7, #24]
 8003c56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c58:	8952      	ldrh	r2, [r2, #10]
 8003c5a:	1a9b      	subs	r3, r3, r2
 8003c5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003c5e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003c62:	fb02 f303 	mul.w	r3, r2, r3
 8003c66:	8b7a      	ldrh	r2, [r7, #26]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
 8003c6c:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8003c6e:	2300      	movs	r3, #0
 8003c70:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003c72:	e040      	b.n	8003cf6 <_UG_PutChar+0x426>
         {
           xo = x;
 8003c74:	88bb      	ldrh	r3, [r7, #4]
 8003c76:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8003c78:	8a7b      	ldrh	r3, [r7, #18]
 8003c7a:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003c80:	e02f      	b.n	8003ce2 <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	1c59      	adds	r1, r3, #1
 8003c8a:	6179      	str	r1, [r7, #20]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 8003c92:	2300      	movs	r3, #0
 8003c94:	847b      	strh	r3, [r7, #34]	; 0x22
 8003c96:	e01b      	b.n	8003cd0 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8003c98:	7e7b      	ldrb	r3, [r7, #25]
 8003c9a:	f003 0301 	and.w	r3, r3, #1
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d006      	beq.n	8003cb0 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 8003ca2:	883b      	ldrh	r3, [r7, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 f9f0 	bl	800408a <SSD1963_ConsecutivePSet>
 8003caa:	e005      	b.n	8003cb8 <_UG_PutChar+0x3e8>
 8003cac:	20000708 	.word	0x20000708
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 8003cb0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f000 f9e9 	bl	800408a <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 8003cb8:	7e7b      	ldrb	r3, [r7, #25]
 8003cba:	085b      	lsrs	r3, r3, #1
 8003cbc:	767b      	strb	r3, [r7, #25]
               xo++;
 8003cbe:	8c3b      	ldrh	r3, [r7, #32]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	843b      	strh	r3, [r7, #32]
               c--;
 8003cc4:	8bbb      	ldrh	r3, [r7, #28]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8003cca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ccc:	3301      	adds	r3, #1
 8003cce:	847b      	strh	r3, [r7, #34]	; 0x22
 8003cd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003cd2:	2b07      	cmp	r3, #7
 8003cd4:	d802      	bhi.n	8003cdc <_UG_PutChar+0x40c>
 8003cd6:	8bbb      	ldrh	r3, [r7, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1dd      	bne.n	8003c98 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 8003cdc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003cde:	3301      	adds	r3, #1
 8003ce0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ce2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ce4:	8b7b      	ldrh	r3, [r7, #26]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3cb      	bcc.n	8003c82 <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 8003cea:	8bfb      	ldrh	r3, [r7, #30]
 8003cec:	3301      	adds	r3, #1
 8003cee:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8003cf0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003cf6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003cf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cfa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	dbb8      	blt.n	8003c74 <_UG_PutChar+0x3a4>
 8003d02:	e077      	b.n	8003df4 <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	791b      	ldrb	r3, [r3, #4]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d173      	bne.n	8003df4 <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8003d0c:	7e3b      	ldrb	r3, [r7, #24]
 8003d0e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d10:	8952      	ldrh	r2, [r2, #10]
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d16:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d20:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8003d24:	fb02 f303 	mul.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d2e:	e057      	b.n	8003de0 <_UG_PutChar+0x510>
         {
            xo = x;
 8003d30:	88bb      	ldrh	r3, [r7, #4]
 8003d32:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8003d34:	2300      	movs	r3, #0
 8003d36:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d38:	e03e      	b.n	8003db8 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 8003d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	1c59      	adds	r1, r3, #1
 8003d42:	6179      	str	r1, [r7, #20]
 8003d44:	4413      	add	r3, r2
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8003d4a:	883b      	ldrh	r3, [r7, #0]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	7e7a      	ldrb	r2, [r7, #25]
 8003d50:	fb03 f202 	mul.w	r2, r3, r2
 8003d54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d56:	b2db      	uxtb	r3, r3
 8003d58:	7e79      	ldrb	r1, [r7, #25]
 8003d5a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8003d5e:	fb01 f303 	mul.w	r3, r1, r3
 8003d62:	4413      	add	r3, r2
 8003d64:	121b      	asrs	r3, r3, #8
 8003d66:	b21b      	sxth	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b21a      	sxth	r2, r3
 8003d6c:	883b      	ldrh	r3, [r7, #0]
 8003d6e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d72:	7e79      	ldrb	r1, [r7, #25]
 8003d74:	fb03 f101 	mul.w	r1, r3, r1
 8003d78:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d7a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003d7e:	7e78      	ldrb	r0, [r7, #25]
 8003d80:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8003d84:	fb00 f303 	mul.w	r3, r0, r3
 8003d88:	440b      	add	r3, r1
 8003d8a:	121b      	asrs	r3, r3, #8
 8003d8c:	b21b      	sxth	r3, r3
 8003d8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003d92:	b21b      	sxth	r3, r3
 8003d94:	4313      	orrs	r3, r2
 8003d96:	b21b      	sxth	r3, r3
 8003d98:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 8003d9a:	4b18      	ldr	r3, [pc, #96]	; (8003dfc <_UG_PutChar+0x52c>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8003da4:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8003da8:	8a3a      	ldrh	r2, [r7, #16]
 8003daa:	4798      	blx	r3
               xo++;
 8003dac:	8c3b      	ldrh	r3, [r7, #32]
 8003dae:	3301      	adds	r3, #1
 8003db0:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8003db2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003db4:	3301      	adds	r3, #1
 8003db6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003db8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003dba:	8a7b      	ldrh	r3, [r7, #18]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d3bc      	bcc.n	8003d3a <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dc2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	8a7b      	ldrh	r3, [r7, #18]
 8003dca:	1ad3      	subs	r3, r2, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	4413      	add	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
            yo++;
 8003dd4:	8bfb      	ldrh	r3, [r7, #30]
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8003dda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003ddc:	3301      	adds	r3, #1
 8003dde:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003de0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003de2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003de4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8003de8:	4293      	cmp	r3, r2
 8003dea:	dba1      	blt.n	8003d30 <_UG_PutChar+0x460>
 8003dec:	e002      	b.n	8003df4 <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <_UG_PutChar+0x524>
   if ( !bn ) return;
 8003df2:	bf00      	nop
         }
      }
   }
}
 8003df4:	3728      	adds	r7, #40	; 0x28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bdb0      	pop	{r4, r5, r7, pc}
 8003dfa:	bf00      	nop
 8003dfc:	20000708 	.word	0x20000708

08003e00 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	4603      	mov	r3, r0
 8003e08:	6039      	str	r1, [r7, #0]
 8003e0a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	2b06      	cmp	r3, #6
 8003e10:	d810      	bhi.n	8003e34 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8003e12:	4b0b      	ldr	r3, [pc, #44]	; (8003e40 <UG_DriverRegister+0x40>)
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	3309      	adds	r3, #9
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	4413      	add	r3, r2
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8003e22:	4b07      	ldr	r3, [pc, #28]	; (8003e40 <UG_DriverRegister+0x40>)
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	79fb      	ldrb	r3, [r7, #7]
 8003e28:	3309      	adds	r3, #9
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	2203      	movs	r2, #3
 8003e30:	721a      	strb	r2, [r3, #8]
 8003e32:	e000      	b.n	8003e36 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8003e34:	bf00      	nop
}
 8003e36:	370c      	adds	r7, #12
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	20000708 	.word	0x20000708

08003e44 <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 8003e48:	2001      	movs	r0, #1
 8003e4a:	f000 fa3e 	bl	80042ca <write_command>
    HAL_Delay(10);
 8003e4e:	200a      	movs	r0, #10
 8003e50:	f000 fb24 	bl	800449c <HAL_Delay>
}
 8003e54:	bf00      	nop
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <SSD1963_Init>:

void SSD1963_Init()
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 8003e5c:	f7ff fff2 	bl	8003e44 <SSD1963_Reset>

    write_command(0xe0);
 8003e60:	20e0      	movs	r0, #224	; 0xe0
 8003e62:	f000 fa32 	bl	80042ca <write_command>
    write_data(0x01);            //Enable PLL
 8003e66:	2001      	movs	r0, #1
 8003e68:	f000 fa4a 	bl	8004300 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 8003e6c:	20e0      	movs	r0, #224	; 0xe0
 8003e6e:	f000 fa2c 	bl	80042ca <write_command>
    write_data(0x03);            //Lock PLL
 8003e72:	2003      	movs	r0, #3
 8003e74:	f000 fa44 	bl	8004300 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8003e78:	f7ff ffe4 	bl	8003e44 <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8003e7c:	20b0      	movs	r0, #176	; 0xb0
 8003e7e:	f000 fa24 	bl	80042ca <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8003e82:	2008      	movs	r0, #8
 8003e84:	f000 fa3c 	bl	8004300 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8003e88:	2080      	movs	r0, #128	; 0x80
 8003e8a:	f000 fa39 	bl	8004300 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f000 fa36 	bl	8004300 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8003e94:	20df      	movs	r0, #223	; 0xdf
 8003e96:	f000 fa33 	bl	8004300 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8003e9a:	2001      	movs	r0, #1
 8003e9c:	f000 fa30 	bl	8004300 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8003ea0:	200f      	movs	r0, #15
 8003ea2:	f000 fa2d 	bl	8004300 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8003ea6:	2000      	movs	r0, #0
 8003ea8:	f000 fa2a 	bl	8004300 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8003eac:	20f0      	movs	r0, #240	; 0xf0
 8003eae:	f000 fa0c 	bl	80042ca <write_command>
    write_data(0x03);
 8003eb2:	2003      	movs	r0, #3
 8003eb4:	f000 fa24 	bl	8004300 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8003eb8:	20e6      	movs	r0, #230	; 0xe6
 8003eba:	f000 fa06 	bl	80042ca <write_command>
    write_data(0x01);    //02
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f000 fa1e 	bl	8004300 <write_data>
    write_data(0x45);    //ff
 8003ec4:	2045      	movs	r0, #69	; 0x45
 8003ec6:	f000 fa1b 	bl	8004300 <write_data>
    write_data(0x47);    //ff
 8003eca:	2047      	movs	r0, #71	; 0x47
 8003ecc:	f000 fa18 	bl	8004300 <write_data>

    write_command(0xb4); //set HBP
 8003ed0:	20b4      	movs	r0, #180	; 0xb4
 8003ed2:	f000 f9fa 	bl	80042ca <write_command>
    write_data(0x02); //set Hsync = 600
 8003ed6:	2002      	movs	r0, #2
 8003ed8:	f000 fa12 	bl	8004300 <write_data>
    write_data(0x0d);
 8003edc:	200d      	movs	r0, #13
 8003ede:	f000 fa0f 	bl	8004300 <write_data>
    write_data(0x00);    //set HBP 68
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	f000 fa0c 	bl	8004300 <write_data>
    write_data(0x2b);
 8003ee8:	202b      	movs	r0, #43	; 0x2b
 8003eea:	f000 fa09 	bl	8004300 <write_data>
    write_data(0x28);    //set VBP 16
 8003eee:	2028      	movs	r0, #40	; 0x28
 8003ef0:	f000 fa06 	bl	8004300 <write_data>
    write_data(0x00);    //Set Hsync start position
 8003ef4:	2000      	movs	r0, #0
 8003ef6:	f000 fa03 	bl	8004300 <write_data>
    write_data(0x00);
 8003efa:	2000      	movs	r0, #0
 8003efc:	f000 fa00 	bl	8004300 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8003f00:	2000      	movs	r0, #0
 8003f02:	f000 f9fd 	bl	8004300 <write_data>

    write_command(0xb6); //set VBP
 8003f06:	20b6      	movs	r0, #182	; 0xb6
 8003f08:	f000 f9df 	bl	80042ca <write_command>
    write_data(0x01);    //set Vsync total 360
 8003f0c:	2001      	movs	r0, #1
 8003f0e:	f000 f9f7 	bl	8004300 <write_data>
    write_data(0x1d);
 8003f12:	201d      	movs	r0, #29
 8003f14:	f000 f9f4 	bl	8004300 <write_data>
    write_data(0x00);    //set VBP = 19
 8003f18:	2000      	movs	r0, #0
 8003f1a:	f000 f9f1 	bl	8004300 <write_data>
    write_data(0x0c);
 8003f1e:	200c      	movs	r0, #12
 8003f20:	f000 f9ee 	bl	8004300 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 8003f24:	2009      	movs	r0, #9
 8003f26:	f000 f9eb 	bl	8004300 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 8003f2a:	2000      	movs	r0, #0
 8003f2c:	f000 f9e8 	bl	8004300 <write_data>
    write_data(0x00);
 8003f30:	2000      	movs	r0, #0
 8003f32:	f000 f9e5 	bl	8004300 <write_data>

    write_command(0x2a); //set column address
 8003f36:	202a      	movs	r0, #42	; 0x2a
 8003f38:	f000 f9c7 	bl	80042ca <write_command>
    write_data(0x00);    //set start column address 0
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	f000 f9df 	bl	8004300 <write_data>
    write_data(0x00);
 8003f42:	2000      	movs	r0, #0
 8003f44:	f000 f9dc 	bl	8004300 <write_data>
    write_data(0x01);    //set end column address = 479
 8003f48:	2001      	movs	r0, #1
 8003f4a:	f000 f9d9 	bl	8004300 <write_data>
    write_data(0xdf);
 8003f4e:	20df      	movs	r0, #223	; 0xdf
 8003f50:	f000 f9d6 	bl	8004300 <write_data>

    write_command(0x2b); //set page address
 8003f54:	202b      	movs	r0, #43	; 0x2b
 8003f56:	f000 f9b8 	bl	80042ca <write_command>
    write_data(0x00);    //set start page address = 0
 8003f5a:	2000      	movs	r0, #0
 8003f5c:	f000 f9d0 	bl	8004300 <write_data>
    write_data(0x00);
 8003f60:	2000      	movs	r0, #0
 8003f62:	f000 f9cd 	bl	8004300 <write_data>
    write_data(0x01);    //set end column address = 479
 8003f66:	2001      	movs	r0, #1
 8003f68:	f000 f9ca 	bl	8004300 <write_data>
    write_data(0x0f);
 8003f6c:	200f      	movs	r0, #15
 8003f6e:	f000 f9c7 	bl	8004300 <write_data>

    write_command(0x13); //set normal mode
 8003f72:	2013      	movs	r0, #19
 8003f74:	f000 f9a9 	bl	80042ca <write_command>
    write_command(0x38); //set normal mode
 8003f78:	2038      	movs	r0, #56	; 0x38
 8003f7a:	f000 f9a6 	bl	80042ca <write_command>
    write_command(0x29); //set display on
 8003f7e:	2029      	movs	r0, #41	; 0x29
 8003f80:	f000 f9a3 	bl	80042ca <write_command>
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b086      	sub	sp, #24
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	0a1b      	lsrs	r3, r3, #8
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	b29b      	uxth	r3, r3
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	b29b      	uxth	r3, r3
 8003faa:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	0a1b      	lsrs	r3, r3, #8
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8003fc2:	202a      	movs	r0, #42	; 0x2a
 8003fc4:	f000 f981 	bl	80042ca <write_command>
    write_multi_data(data, 4);
 8003fc8:	f107 0310 	add.w	r3, r7, #16
 8003fcc:	2104      	movs	r1, #4
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f000 f9b0 	bl	8004334 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	0a1b      	lsrs	r3, r3, #8
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8004000:	202b      	movs	r0, #43	; 0x2b
 8004002:	f000 f962 	bl	80042ca <write_command>
    write_multi_data(data, 4);
 8004006:	f107 0310 	add.w	r3, r7, #16
 800400a:	2104      	movs	r1, #4
 800400c:	4618      	mov	r0, r3
 800400e:	f000 f991 	bl	8004334 <write_multi_data>
}
 8004012:	bf00      	nop
 8004014:	3718      	adds	r7, #24
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	4603      	mov	r3, r0
 8004022:	80fb      	strh	r3, [r7, #6]
 8004024:	460b      	mov	r3, r1
 8004026:	80bb      	strh	r3, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 800402c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004030:	2b00      	cmp	r3, #0
 8004032:	db1f      	blt.n	8004074 <SSD1963_PSet+0x5a>
 8004034:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004038:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800403c:	da1a      	bge.n	8004074 <SSD1963_PSet+0x5a>
 800403e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004042:	2b00      	cmp	r3, #0
 8004044:	db16      	blt.n	8004074 <SSD1963_PSet+0x5a>
 8004046:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800404a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800404e:	da11      	bge.n	8004074 <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8004050:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004054:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004058:	3301      	adds	r3, #1
 800405a:	4619      	mov	r1, r3
 800405c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004060:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004064:	3301      	adds	r3, #1
 8004066:	f7ff ff8f 	bl	8003f88 <SSD1963_WindowSet>
    write_data(c);
 800406a:	887b      	ldrh	r3, [r7, #2]
 800406c:	4618      	mov	r0, r3
 800406e:	f000 f947 	bl	8004300 <write_data>
 8004072:	e000      	b.n	8004076 <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8004074:	bf00      	nop
}
 8004076:	3708      	adds	r7, #8
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8004080:	202c      	movs	r0, #44	; 0x2c
 8004082:	f000 f922 	bl	80042ca <write_command>
}
 8004086:	bf00      	nop
 8004088:	bd80      	pop	{r7, pc}

0800408a <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b082      	sub	sp, #8
 800408e:	af00      	add	r7, sp, #0
 8004090:	4603      	mov	r3, r0
 8004092:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 8004094:	88fb      	ldrh	r3, [r7, #6]
 8004096:	4618      	mov	r0, r3
 8004098:	f000 f932 	bl	8004300 <write_data>
}
 800409c:	bf00      	nop
 800409e:	3708      	adds	r7, #8
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 80040a4:	b590      	push	{r4, r7, lr}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	4604      	mov	r4, r0
 80040ac:	4608      	mov	r0, r1
 80040ae:	4611      	mov	r1, r2
 80040b0:	461a      	mov	r2, r3
 80040b2:	4623      	mov	r3, r4
 80040b4:	80fb      	strh	r3, [r7, #6]
 80040b6:	4603      	mov	r3, r0
 80040b8:	80bb      	strh	r3, [r7, #4]
 80040ba:	460b      	mov	r3, r1
 80040bc:	807b      	strh	r3, [r7, #2]
 80040be:	4613      	mov	r3, r2
 80040c0:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80040c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	db0d      	blt.n	80040e6 <HW_FillFrame+0x42>
 80040ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ce:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80040d2:	da08      	bge.n	80040e6 <HW_FillFrame+0x42>
 80040d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	db04      	blt.n	80040e6 <HW_FillFrame+0x42>
 80040dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040e0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80040e4:	db02      	blt.n	80040ec <HW_FillFrame+0x48>
 80040e6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ea:	e03c      	b.n	8004166 <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80040ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db0d      	blt.n	8004110 <HW_FillFrame+0x6c>
 80040f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040f8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80040fc:	da08      	bge.n	8004110 <HW_FillFrame+0x6c>
 80040fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004102:	2b00      	cmp	r3, #0
 8004104:	db04      	blt.n	8004110 <HW_FillFrame+0x6c>
 8004106:	f9b7 3000 	ldrsh.w	r3, [r7]
 800410a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800410e:	db02      	blt.n	8004116 <HW_FillFrame+0x72>
 8004110:	f04f 33ff 	mov.w	r3, #4294967295
 8004114:	e027      	b.n	8004166 <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004116:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800411a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800411e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004122:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004126:	f7ff ff2f 	bl	8003f88 <SSD1963_WindowSet>

    write_command(0x2c);
 800412a:	202c      	movs	r0, #44	; 0x2c
 800412c:	f000 f8cd 	bl	80042ca <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8004130:	88fb      	ldrh	r3, [r7, #6]
 8004132:	81fb      	strh	r3, [r7, #14]
 8004134:	e011      	b.n	800415a <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8004136:	88bb      	ldrh	r3, [r7, #4]
 8004138:	81bb      	strh	r3, [r7, #12]
 800413a:	e006      	b.n	800414a <HW_FillFrame+0xa6>
        {
            write_data(c);
 800413c:	8c3b      	ldrh	r3, [r7, #32]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 f8de 	bl	8004300 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8004144:	89bb      	ldrh	r3, [r7, #12]
 8004146:	3301      	adds	r3, #1
 8004148:	81bb      	strh	r3, [r7, #12]
 800414a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800414e:	89bb      	ldrh	r3, [r7, #12]
 8004150:	429a      	cmp	r2, r3
 8004152:	daf3      	bge.n	800413c <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8004154:	89fb      	ldrh	r3, [r7, #14]
 8004156:	3301      	adds	r3, #1
 8004158:	81fb      	strh	r3, [r7, #14]
 800415a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800415e:	89fb      	ldrh	r3, [r7, #14]
 8004160:	429a      	cmp	r2, r3
 8004162:	dae8      	bge.n	8004136 <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bd90      	pop	{r4, r7, pc}

0800416e <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b085      	sub	sp, #20
 8004172:	af02      	add	r7, sp, #8
 8004174:	4604      	mov	r4, r0
 8004176:	4608      	mov	r0, r1
 8004178:	4611      	mov	r1, r2
 800417a:	461a      	mov	r2, r3
 800417c:	4623      	mov	r3, r4
 800417e:	80fb      	strh	r3, [r7, #6]
 8004180:	4603      	mov	r3, r0
 8004182:	80bb      	strh	r3, [r7, #4]
 8004184:	460b      	mov	r3, r1
 8004186:	807b      	strh	r3, [r7, #2]
 8004188:	4613      	mov	r3, r2
 800418a:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800418c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004190:	2b00      	cmp	r3, #0
 8004192:	db0d      	blt.n	80041b0 <HW_DrawLine+0x42>
 8004194:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004198:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800419c:	da08      	bge.n	80041b0 <HW_DrawLine+0x42>
 800419e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	db04      	blt.n	80041b0 <HW_DrawLine+0x42>
 80041a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80041aa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80041ae:	db02      	blt.n	80041b6 <HW_DrawLine+0x48>
 80041b0:	f04f 33ff 	mov.w	r3, #4294967295
 80041b4:	e031      	b.n	800421a <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80041b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0d      	blt.n	80041da <HW_DrawLine+0x6c>
 80041be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041c2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80041c6:	da08      	bge.n	80041da <HW_DrawLine+0x6c>
 80041c8:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	db04      	blt.n	80041da <HW_DrawLine+0x6c>
 80041d0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041d4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80041d8:	db02      	blt.n	80041e0 <HW_DrawLine+0x72>
 80041da:	f04f 33ff 	mov.w	r3, #4294967295
 80041de:	e01c      	b.n	800421a <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 80041e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d005      	beq.n	80041f8 <HW_DrawLine+0x8a>
 80041ec:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80041f0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d10e      	bne.n	8004216 <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 80041f8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80041fc:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004200:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004204:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004208:	8b3b      	ldrh	r3, [r7, #24]
 800420a:	9300      	str	r3, [sp, #0]
 800420c:	4623      	mov	r3, r4
 800420e:	f7ff ff49 	bl	80040a4 <HW_FillFrame>
        return UG_RESULT_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	e001      	b.n	800421a <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 8004216:	f04f 33ff 	mov.w	r3, #4294967295
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	bd90      	pop	{r4, r7, pc}

08004222 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 8004222:	b590      	push	{r4, r7, lr}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	4604      	mov	r4, r0
 800422a:	4608      	mov	r0, r1
 800422c:	4611      	mov	r1, r2
 800422e:	461a      	mov	r2, r3
 8004230:	4623      	mov	r3, r4
 8004232:	80fb      	strh	r3, [r7, #6]
 8004234:	4603      	mov	r3, r0
 8004236:	80bb      	strh	r3, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
 800423c:	4613      	mov	r3, r2
 800423e:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db0d      	blt.n	8004264 <HW_DrawImage+0x42>
 8004248:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800424c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004250:	da08      	bge.n	8004264 <HW_DrawImage+0x42>
 8004252:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	db04      	blt.n	8004264 <HW_DrawImage+0x42>
 800425a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800425e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004262:	db02      	blt.n	800426a <HW_DrawImage+0x48>
 8004264:	f04f 33ff 	mov.w	r3, #4294967295
 8004268:	e02b      	b.n	80042c2 <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800426a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800426e:	2b00      	cmp	r3, #0
 8004270:	db0d      	blt.n	800428e <HW_DrawImage+0x6c>
 8004272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004276:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800427a:	da08      	bge.n	800428e <HW_DrawImage+0x6c>
 800427c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db04      	blt.n	800428e <HW_DrawImage+0x6c>
 8004284:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004288:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800428c:	db02      	blt.n	8004294 <HW_DrawImage+0x72>
 800428e:	f04f 33ff 	mov.w	r3, #4294967295
 8004292:	e016      	b.n	80042c2 <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004294:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004298:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800429c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80042a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80042a4:	f7ff fe70 	bl	8003f88 <SSD1963_WindowSet>

    write_command(0x2c);
 80042a8:	202c      	movs	r0, #44	; 0x2c
 80042aa:	f000 f80e 	bl	80042ca <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 80042ae:	8bbb      	ldrh	r3, [r7, #28]
 80042b0:	461a      	mov	r2, r3
 80042b2:	0052      	lsls	r2, r2, #1
 80042b4:	4413      	add	r3, r2
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	4619      	mov	r1, r3
 80042ba:	69b8      	ldr	r0, [r7, #24]
 80042bc:	f000 f83a 	bl	8004334 <write_multi_data>

    return UG_RESULT_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd90      	pop	{r4, r7, pc}

080042ca <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 80042ca:	b480      	push	{r7}
 80042cc:	b085      	sub	sp, #20
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	4603      	mov	r3, r0
 80042d2:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 80042d4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80042d8:	79fa      	ldrb	r2, [r7, #7]
 80042da:	b292      	uxth	r2, r2
 80042dc:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80042de:	2300      	movs	r3, #0
 80042e0:	81fb      	strh	r3, [r7, #14]
 80042e2:	e002      	b.n	80042ea <write_command+0x20>
 80042e4:	89fb      	ldrh	r3, [r7, #14]
 80042e6:	3301      	adds	r3, #1
 80042e8:	81fb      	strh	r3, [r7, #14]
 80042ea:	89fb      	ldrh	r3, [r7, #14]
 80042ec:	2b0b      	cmp	r3, #11
 80042ee:	d9f9      	bls.n	80042e4 <write_command+0x1a>
}
 80042f0:	bf00      	nop
 80042f2:	bf00      	nop
 80042f4:	3714      	adds	r7, #20
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr
	...

08004300 <write_data>:


void write_data(DATA_t data)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	4603      	mov	r3, r0
 8004308:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 800430a:	4a09      	ldr	r2, [pc, #36]	; (8004330 <write_data+0x30>)
 800430c:	88fb      	ldrh	r3, [r7, #6]
 800430e:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004310:	2300      	movs	r3, #0
 8004312:	81fb      	strh	r3, [r7, #14]
 8004314:	e002      	b.n	800431c <write_data+0x1c>
 8004316:	89fb      	ldrh	r3, [r7, #14]
 8004318:	3301      	adds	r3, #1
 800431a:	81fb      	strh	r3, [r7, #14]
 800431c:	89fb      	ldrh	r3, [r7, #14]
 800431e:	2b0b      	cmp	r3, #11
 8004320:	d9f9      	bls.n	8004316 <write_data+0x16>
 }
 8004322:	bf00      	nop
 8004324:	bf00      	nop
 8004326:	3714      	adds	r7, #20
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	60000100 	.word	0x60000100

08004334 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	460b      	mov	r3, r1
 800433e:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 8004340:	2300      	movs	r3, #0
 8004342:	81fb      	strh	r3, [r7, #14]
 8004344:	e016      	b.n	8004374 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 8004346:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	4a0e      	ldr	r2, [pc, #56]	; (800438c <write_multi_data+0x58>)
 8004352:	881b      	ldrh	r3, [r3, #0]
 8004354:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004356:	2300      	movs	r3, #0
 8004358:	81bb      	strh	r3, [r7, #12]
 800435a:	e002      	b.n	8004362 <write_multi_data+0x2e>
 800435c:	89bb      	ldrh	r3, [r7, #12]
 800435e:	3301      	adds	r3, #1
 8004360:	81bb      	strh	r3, [r7, #12]
 8004362:	89bb      	ldrh	r3, [r7, #12]
 8004364:	2b0b      	cmp	r3, #11
 8004366:	d9f9      	bls.n	800435c <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 8004368:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800436c:	b29b      	uxth	r3, r3
 800436e:	3301      	adds	r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	81fb      	strh	r3, [r7, #14]
 8004374:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004378:	887b      	ldrh	r3, [r7, #2]
 800437a:	429a      	cmp	r2, r3
 800437c:	dbe3      	blt.n	8004346 <write_multi_data+0x12>
    }
}
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	3714      	adds	r7, #20
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	60000100 	.word	0x60000100

08004390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043c8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004394:	480d      	ldr	r0, [pc, #52]	; (80043cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004396:	490e      	ldr	r1, [pc, #56]	; (80043d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004398:	4a0e      	ldr	r2, [pc, #56]	; (80043d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800439a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800439c:	e002      	b.n	80043a4 <LoopCopyDataInit>

0800439e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800439e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043a2:	3304      	adds	r3, #4

080043a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043a8:	d3f9      	bcc.n	800439e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043aa:	4a0b      	ldr	r2, [pc, #44]	; (80043d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80043ac:	4c0b      	ldr	r4, [pc, #44]	; (80043dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80043ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043b0:	e001      	b.n	80043b6 <LoopFillZerobss>

080043b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043b4:	3204      	adds	r2, #4

080043b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043b8:	d3fb      	bcc.n	80043b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80043ba:	f7fe feef 	bl	800319c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80043be:	f009 ff9b 	bl	800e2f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043c2:	f7fd fbd3 	bl	8001b6c <main>
  bx  lr    
 80043c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043c8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80043cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043d0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80043d4:	0801e0f8 	.word	0x0801e0f8
  ldr r2, =_sbss
 80043d8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80043dc:	20002240 	.word	0x20002240

080043e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043e0:	e7fe      	b.n	80043e0 <ADC_IRQHandler>

080043e2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e6:	2003      	movs	r0, #3
 80043e8:	f001 fa7c 	bl	80058e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ec:	200f      	movs	r0, #15
 80043ee:	f000 f805 	bl	80043fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f2:	f7fe fb5d 	bl	8002ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004404:	4b12      	ldr	r3, [pc, #72]	; (8004450 <HAL_InitTick+0x54>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_InitTick+0x58>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	4619      	mov	r1, r3
 800440e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004412:	fbb3 f3f1 	udiv	r3, r3, r1
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	4618      	mov	r0, r3
 800441c:	f001 fa97 	bl	800594e <HAL_SYSTICK_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e00e      	b.n	8004448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2b0f      	cmp	r3, #15
 800442e:	d80a      	bhi.n	8004446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004430:	2200      	movs	r2, #0
 8004432:	6879      	ldr	r1, [r7, #4]
 8004434:	f04f 30ff 	mov.w	r0, #4294967295
 8004438:	f001 fa5f 	bl	80058fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800443c:	4a06      	ldr	r2, [pc, #24]	; (8004458 <HAL_InitTick+0x5c>)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
 8004444:	e000      	b.n	8004448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
}
 8004448:	4618      	mov	r0, r3
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	2000008c 	.word	0x2000008c
 8004454:	20000094 	.word	0x20000094
 8004458:	20000090 	.word	0x20000090

0800445c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004460:	4b06      	ldr	r3, [pc, #24]	; (800447c <HAL_IncTick+0x20>)
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	461a      	mov	r2, r3
 8004466:	4b06      	ldr	r3, [pc, #24]	; (8004480 <HAL_IncTick+0x24>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	4413      	add	r3, r2
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <HAL_IncTick+0x24>)
 800446e:	6013      	str	r3, [r2, #0]
}
 8004470:	bf00      	nop
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000094 	.word	0x20000094
 8004480:	2000070c 	.word	0x2000070c

08004484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004484:	b480      	push	{r7}
 8004486:	af00      	add	r7, sp, #0
  return uwTick;
 8004488:	4b03      	ldr	r3, [pc, #12]	; (8004498 <HAL_GetTick+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
}
 800448c:	4618      	mov	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	2000070c 	.word	0x2000070c

0800449c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b084      	sub	sp, #16
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044a4:	f7ff ffee 	bl	8004484 <HAL_GetTick>
 80044a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b4:	d005      	beq.n	80044c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044b6:	4b0a      	ldr	r3, [pc, #40]	; (80044e0 <HAL_Delay+0x44>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	461a      	mov	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	4413      	add	r3, r2
 80044c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80044c2:	bf00      	nop
 80044c4:	f7ff ffde 	bl	8004484 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d8f7      	bhi.n	80044c4 <HAL_Delay+0x28>
  {
  }
}
 80044d4:	bf00      	nop
 80044d6:	bf00      	nop
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
 80044de:	bf00      	nop
 80044e0:	20000094 	.word	0x20000094

080044e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b084      	sub	sp, #16
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044ec:	2300      	movs	r3, #0
 80044ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e031      	b.n	800455e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fe faf8 	bl	8002af8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0310 	and.w	r3, r3, #16
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004526:	4b10      	ldr	r3, [pc, #64]	; (8004568 <HAL_ADC_Init+0x84>)
 8004528:	4013      	ands	r3, r2
 800452a:	f043 0202 	orr.w	r2, r3, #2
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fa7e 	bl	8004a34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f023 0303 	bic.w	r3, r3, #3
 8004546:	f043 0201 	orr.w	r2, r3, #1
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	641a      	str	r2, [r3, #64]	; 0x40
 800454e:	e001      	b.n	8004554 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800455c:	7bfb      	ldrb	r3, [r7, #15]
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	ffffeefd 	.word	0xffffeefd

0800456c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004582:	2b01      	cmp	r3, #1
 8004584:	d101      	bne.n	800458a <HAL_ADC_Start_DMA+0x1e>
 8004586:	2302      	movs	r3, #2
 8004588:	e0d4      	b.n	8004734 <HAL_ADC_Start_DMA+0x1c8>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2201      	movs	r2, #1
 800458e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b01      	cmp	r3, #1
 800459e:	d018      	beq.n	80045d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	689a      	ldr	r2, [r3, #8]
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f042 0201 	orr.w	r2, r2, #1
 80045ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80045b0:	4b62      	ldr	r3, [pc, #392]	; (800473c <HAL_ADC_Start_DMA+0x1d0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a62      	ldr	r2, [pc, #392]	; (8004740 <HAL_ADC_Start_DMA+0x1d4>)
 80045b6:	fba2 2303 	umull	r2, r3, r2, r3
 80045ba:	0c9a      	lsrs	r2, r3, #18
 80045bc:	4613      	mov	r3, r2
 80045be:	005b      	lsls	r3, r3, #1
 80045c0:	4413      	add	r3, r2
 80045c2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80045c4:	e002      	b.n	80045cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	3b01      	subs	r3, #1
 80045ca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d1f9      	bne.n	80045c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b01      	cmp	r3, #1
 80045de:	f040 809c 	bne.w	800471a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045e6:	4b57      	ldr	r3, [pc, #348]	; (8004744 <HAL_ADC_Start_DMA+0x1d8>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d007      	beq.n	8004610 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004604:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004608:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800461c:	d106      	bne.n	800462c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004622:	f023 0206 	bic.w	r2, r3, #6
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
 800462a:	e002      	b.n	8004632 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463e:	4a42      	ldr	r2, [pc, #264]	; (8004748 <HAL_ADC_Start_DMA+0x1dc>)
 8004640:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004646:	4a41      	ldr	r2, [pc, #260]	; (800474c <HAL_ADC_Start_DMA+0x1e0>)
 8004648:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464e:	4a40      	ldr	r2, [pc, #256]	; (8004750 <HAL_ADC_Start_DMA+0x1e4>)
 8004650:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800465a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800466a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800467a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	334c      	adds	r3, #76	; 0x4c
 8004686:	4619      	mov	r1, r3
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f001 fa1a 	bl	8005ac4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004690:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_ADC_Start_DMA+0x1e8>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 031f 	and.w	r3, r3, #31
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10f      	bne.n	80046bc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d143      	bne.n	8004732 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689a      	ldr	r2, [r3, #8]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046b8:	609a      	str	r2, [r3, #8]
 80046ba:	e03a      	b.n	8004732 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a25      	ldr	r2, [pc, #148]	; (8004758 <HAL_ADC_Start_DMA+0x1ec>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10e      	bne.n	80046e4 <HAL_ADC_Start_DMA+0x178>
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80046e2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80046e4:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_ADC_Start_DMA+0x1e8>)
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f003 0310 	and.w	r3, r3, #16
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d120      	bne.n	8004732 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4a19      	ldr	r2, [pc, #100]	; (800475c <HAL_ADC_Start_DMA+0x1f0>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d11b      	bne.n	8004732 <HAL_ADC_Start_DMA+0x1c6>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d114      	bne.n	8004732 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	689a      	ldr	r2, [r3, #8]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004716:	609a      	str	r2, [r3, #8]
 8004718:	e00b      	b.n	8004732 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800471e:	f043 0210 	orr.w	r2, r3, #16
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472a:	f043 0201 	orr.w	r2, r3, #1
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3718      	adds	r7, #24
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	2000008c 	.word	0x2000008c
 8004740:	431bde83 	.word	0x431bde83
 8004744:	fffff8fe 	.word	0xfffff8fe
 8004748:	08004c29 	.word	0x08004c29
 800474c:	08004ce3 	.word	0x08004ce3
 8004750:	08004cff 	.word	0x08004cff
 8004754:	40012300 	.word	0x40012300
 8004758:	40012000 	.word	0x40012000
 800475c:	40012200 	.word	0x40012200

08004760 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004788:	b480      	push	{r7}
 800478a:	b085      	sub	sp, #20
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_ADC_ConfigChannel+0x1c>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e136      	b.n	8004a12 <HAL_ADC_ConfigChannel+0x28a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b09      	cmp	r3, #9
 80047b2:	d93a      	bls.n	800482a <HAL_ADC_ConfigChannel+0xa2>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047bc:	d035      	beq.n	800482a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68d9      	ldr	r1, [r3, #12]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	461a      	mov	r2, r3
 80047cc:	4613      	mov	r3, r2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	4413      	add	r3, r2
 80047d2:	3b1e      	subs	r3, #30
 80047d4:	2207      	movs	r2, #7
 80047d6:	fa02 f303 	lsl.w	r3, r2, r3
 80047da:	43da      	mvns	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	400a      	ands	r2, r1
 80047e2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a8d      	ldr	r2, [pc, #564]	; (8004a20 <HAL_ADC_ConfigChannel+0x298>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10a      	bne.n	8004804 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68d9      	ldr	r1, [r3, #12]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	061a      	lsls	r2, r3, #24
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	430a      	orrs	r2, r1
 8004800:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004802:	e035      	b.n	8004870 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	68d9      	ldr	r1, [r3, #12]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	689a      	ldr	r2, [r3, #8]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	b29b      	uxth	r3, r3
 8004814:	4618      	mov	r0, r3
 8004816:	4603      	mov	r3, r0
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	4403      	add	r3, r0
 800481c:	3b1e      	subs	r3, #30
 800481e:	409a      	lsls	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	430a      	orrs	r2, r1
 8004826:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004828:	e022      	b.n	8004870 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	6919      	ldr	r1, [r3, #16]
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b29b      	uxth	r3, r3
 8004836:	461a      	mov	r2, r3
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	2207      	movs	r2, #7
 8004840:	fa02 f303 	lsl.w	r3, r2, r3
 8004844:	43da      	mvns	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	400a      	ands	r2, r1
 800484c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6919      	ldr	r1, [r3, #16]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	689a      	ldr	r2, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	b29b      	uxth	r3, r3
 800485e:	4618      	mov	r0, r3
 8004860:	4603      	mov	r3, r0
 8004862:	005b      	lsls	r3, r3, #1
 8004864:	4403      	add	r3, r0
 8004866:	409a      	lsls	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d824      	bhi.n	80048c2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	4613      	mov	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	4413      	add	r3, r2
 8004888:	3b05      	subs	r3, #5
 800488a:	221f      	movs	r2, #31
 800488c:	fa02 f303 	lsl.w	r3, r2, r3
 8004890:	43da      	mvns	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	400a      	ands	r2, r1
 8004898:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	4618      	mov	r0, r3
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	4613      	mov	r3, r2
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	4413      	add	r3, r2
 80048b2:	3b05      	subs	r3, #5
 80048b4:	fa00 f203 	lsl.w	r2, r0, r3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	635a      	str	r2, [r3, #52]	; 0x34
 80048c0:	e04c      	b.n	800495c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b0c      	cmp	r3, #12
 80048c8:	d824      	bhi.n	8004914 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	4613      	mov	r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	3b23      	subs	r3, #35	; 0x23
 80048dc:	221f      	movs	r2, #31
 80048de:	fa02 f303 	lsl.w	r3, r2, r3
 80048e2:	43da      	mvns	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	400a      	ands	r2, r1
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	4618      	mov	r0, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	685a      	ldr	r2, [r3, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	4413      	add	r3, r2
 8004904:	3b23      	subs	r3, #35	; 0x23
 8004906:	fa00 f203 	lsl.w	r2, r0, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	631a      	str	r2, [r3, #48]	; 0x30
 8004912:	e023      	b.n	800495c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	3b41      	subs	r3, #65	; 0x41
 8004926:	221f      	movs	r2, #31
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43da      	mvns	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	400a      	ands	r2, r1
 8004934:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	b29b      	uxth	r3, r3
 8004942:	4618      	mov	r0, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	3b41      	subs	r3, #65	; 0x41
 8004950:	fa00 f203 	lsl.w	r2, r0, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a30      	ldr	r2, [pc, #192]	; (8004a24 <HAL_ADC_ConfigChannel+0x29c>)
 8004962:	4293      	cmp	r3, r2
 8004964:	d10a      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1f4>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800496e:	d105      	bne.n	800497c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004970:	4b2d      	ldr	r3, [pc, #180]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	4a2c      	ldr	r2, [pc, #176]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8004976:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800497a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_ADC_ConfigChannel+0x29c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d10f      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x21e>
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b12      	cmp	r3, #18
 800498c:	d10b      	bne.n	80049a6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800498e:	4b26      	ldr	r3, [pc, #152]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	4a25      	ldr	r2, [pc, #148]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 8004994:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004998:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800499a:	4b23      	ldr	r3, [pc, #140]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4a22      	ldr	r2, [pc, #136]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049a0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049a4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1e      	ldr	r2, [pc, #120]	; (8004a24 <HAL_ADC_ConfigChannel+0x29c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d12b      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x280>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1a      	ldr	r2, [pc, #104]	; (8004a20 <HAL_ADC_ConfigChannel+0x298>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d003      	beq.n	80049c2 <HAL_ADC_ConfigChannel+0x23a>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2b11      	cmp	r3, #17
 80049c0:	d122      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80049c2:	4b19      	ldr	r3, [pc, #100]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	4a18      	ldr	r2, [pc, #96]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049c8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80049cc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80049ce:	4b16      	ldr	r3, [pc, #88]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a15      	ldr	r2, [pc, #84]	; (8004a28 <HAL_ADC_ConfigChannel+0x2a0>)
 80049d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80049d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a10      	ldr	r2, [pc, #64]	; (8004a20 <HAL_ADC_ConfigChannel+0x298>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d111      	bne.n	8004a08 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80049e4:	4b11      	ldr	r3, [pc, #68]	; (8004a2c <HAL_ADC_ConfigChannel+0x2a4>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a11      	ldr	r2, [pc, #68]	; (8004a30 <HAL_ADC_ConfigChannel+0x2a8>)
 80049ea:	fba2 2303 	umull	r2, r3, r2, r3
 80049ee:	0c9a      	lsrs	r2, r3, #18
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	005b      	lsls	r3, r3, #1
 80049f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80049fa:	e002      	b.n	8004a02 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d1f9      	bne.n	80049fc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3714      	adds	r7, #20
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	10000012 	.word	0x10000012
 8004a24:	40012000 	.word	0x40012000
 8004a28:	40012300 	.word	0x40012300
 8004a2c:	2000008c 	.word	0x2000008c
 8004a30:	431bde83 	.word	0x431bde83

08004a34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b083      	sub	sp, #12
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004a3c:	4b78      	ldr	r3, [pc, #480]	; (8004c20 <ADC_Init+0x1ec>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a77      	ldr	r2, [pc, #476]	; (8004c20 <ADC_Init+0x1ec>)
 8004a42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004a46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004a48:	4b75      	ldr	r3, [pc, #468]	; (8004c20 <ADC_Init+0x1ec>)
 8004a4a:	685a      	ldr	r2, [r3, #4]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	4973      	ldr	r1, [pc, #460]	; (8004c20 <ADC_Init+0x1ec>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6859      	ldr	r1, [r3, #4]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	021a      	lsls	r2, r3, #8
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	430a      	orrs	r2, r1
 8004a78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004a88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	6859      	ldr	r1, [r3, #4]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	6899      	ldr	r1, [r3, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68da      	ldr	r2, [r3, #12]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	430a      	orrs	r2, r1
 8004abc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ac2:	4a58      	ldr	r2, [pc, #352]	; (8004c24 <ADC_Init+0x1f0>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d022      	beq.n	8004b0e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004ad6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6899      	ldr	r1, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	689a      	ldr	r2, [r3, #8]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004af8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	6899      	ldr	r1, [r3, #8]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	e00f      	b.n	8004b2e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689a      	ldr	r2, [r3, #8]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004b1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004b2c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0202 	bic.w	r2, r2, #2
 8004b3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	6899      	ldr	r1, [r3, #8]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	005a      	lsls	r2, r3, #1
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01b      	beq.n	8004b94 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685a      	ldr	r2, [r3, #4]
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685a      	ldr	r2, [r3, #4]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004b7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b86:	3b01      	subs	r3, #1
 8004b88:	035a      	lsls	r2, r3, #13
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
 8004b92:	e007      	b.n	8004ba4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685a      	ldr	r2, [r3, #4]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ba2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004bb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	051a      	lsls	r2, r3, #20
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	689a      	ldr	r2, [r3, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004bd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	6899      	ldr	r1, [r3, #8]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004be6:	025a      	lsls	r2, r3, #9
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689a      	ldr	r2, [r3, #8]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bfe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6899      	ldr	r1, [r3, #8]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	029a      	lsls	r2, r3, #10
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	430a      	orrs	r2, r1
 8004c12:	609a      	str	r2, [r3, #8]
}
 8004c14:	bf00      	nop
 8004c16:	370c      	adds	r7, #12
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40012300 	.word	0x40012300
 8004c24:	0f000001 	.word	0x0f000001

08004c28 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b084      	sub	sp, #16
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c34:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d13c      	bne.n	8004cbc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d12b      	bne.n	8004cb4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d127      	bne.n	8004cb4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d006      	beq.n	8004c80 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d119      	bne.n	8004cb4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685a      	ldr	r2, [r3, #4]
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0220 	bic.w	r2, r2, #32
 8004c8e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d105      	bne.n	8004cb4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cac:	f043 0201 	orr.w	r2, r3, #1
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7fc ff49 	bl	8001b4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004cba:	e00e      	b.n	8004cda <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f003 0310 	and.w	r3, r3, #16
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d003      	beq.n	8004cd0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f7ff fd53 	bl	8004774 <HAL_ADC_ErrorCallback>
}
 8004cce:	e004      	b.n	8004cda <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	4798      	blx	r3
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f7ff fd35 	bl	8004760 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2240      	movs	r2, #64	; 0x40
 8004d10:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d1e:	68f8      	ldr	r0, [r7, #12]
 8004d20:	f7ff fd28 	bl	8004774 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e0ed      	b.n	8004f1a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d102      	bne.n	8004d50 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d4a:	6878      	ldr	r0, [r7, #4]
 8004d4c:	f7fd ff76 	bl	8002c3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f042 0201 	orr.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d60:	f7ff fb90 	bl	8004484 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d66:	e012      	b.n	8004d8e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d68:	f7ff fb8c 	bl	8004484 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	2b0a      	cmp	r3, #10
 8004d74:	d90b      	bls.n	8004d8e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2205      	movs	r2, #5
 8004d86:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e0c5      	b.n	8004f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0e5      	beq.n	8004d68 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0202 	bic.w	r2, r2, #2
 8004daa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004dac:	f7ff fb6a 	bl	8004484 <HAL_GetTick>
 8004db0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004db2:	e012      	b.n	8004dda <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004db4:	f7ff fb66 	bl	8004484 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b0a      	cmp	r3, #10
 8004dc0:	d90b      	bls.n	8004dda <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2205      	movs	r2, #5
 8004dd2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e09f      	b.n	8004f1a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1e5      	bne.n	8004db4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	7e1b      	ldrb	r3, [r3, #24]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d108      	bne.n	8004e02 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	e007      	b.n	8004e12 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	7e5b      	ldrb	r3, [r3, #25]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d108      	bne.n	8004e2c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e28:	601a      	str	r2, [r3, #0]
 8004e2a:	e007      	b.n	8004e3c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	7e9b      	ldrb	r3, [r3, #26]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d108      	bne.n	8004e56 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f042 0220 	orr.w	r2, r2, #32
 8004e52:	601a      	str	r2, [r3, #0]
 8004e54:	e007      	b.n	8004e66 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0220 	bic.w	r2, r2, #32
 8004e64:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	7edb      	ldrb	r3, [r3, #27]
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d108      	bne.n	8004e80 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0210 	bic.w	r2, r2, #16
 8004e7c:	601a      	str	r2, [r3, #0]
 8004e7e:	e007      	b.n	8004e90 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0210 	orr.w	r2, r2, #16
 8004e8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	7f1b      	ldrb	r3, [r3, #28]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d108      	bne.n	8004eaa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f042 0208 	orr.w	r2, r2, #8
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e007      	b.n	8004eba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f022 0208 	bic.w	r2, r2, #8
 8004eb8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	7f5b      	ldrb	r3, [r3, #29]
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d108      	bne.n	8004ed4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	681a      	ldr	r2, [r3, #0]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f042 0204 	orr.w	r2, r2, #4
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	e007      	b.n	8004ee4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f022 0204 	bic.w	r2, r2, #4
 8004ee2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	689a      	ldr	r2, [r3, #8]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	ea42 0103 	orr.w	r1, r2, r3
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	1e5a      	subs	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	430a      	orrs	r2, r1
 8004f08:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b089      	sub	sp, #36	; 0x24
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	60f8      	str	r0, [r7, #12]
 8004f2a:	60b9      	str	r1, [r7, #8]
 8004f2c:	607a      	str	r2, [r7, #4]
 8004f2e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f36:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f40:	7ffb      	ldrb	r3, [r7, #31]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d003      	beq.n	8004f4e <HAL_CAN_AddTxMessage+0x2c>
 8004f46:	7ffb      	ldrb	r3, [r7, #31]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	f040 80ad 	bne.w	80050a8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d105      	bne.n	8004f6e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f62:	69bb      	ldr	r3, [r7, #24]
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 8095 	beq.w	8005098 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	0e1b      	lsrs	r3, r3, #24
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f78:	2201      	movs	r2, #1
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	409a      	lsls	r2, r3
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10d      	bne.n	8004fa6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f94:	68f9      	ldr	r1, [r7, #12]
 8004f96:	6809      	ldr	r1, [r1, #0]
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3318      	adds	r3, #24
 8004f9e:	011b      	lsls	r3, r3, #4
 8004fa0:	440b      	add	r3, r1
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e00f      	b.n	8004fc6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fb0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004fba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	3318      	adds	r3, #24
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	440b      	add	r3, r1
 8004fc4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6819      	ldr	r1, [r3, #0]
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	691a      	ldr	r2, [r3, #16]
 8004fce:	697b      	ldr	r3, [r7, #20]
 8004fd0:	3318      	adds	r3, #24
 8004fd2:	011b      	lsls	r3, r3, #4
 8004fd4:	440b      	add	r3, r1
 8004fd6:	3304      	adds	r3, #4
 8004fd8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	7d1b      	ldrb	r3, [r3, #20]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d111      	bne.n	8005006 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	3318      	adds	r3, #24
 8004fea:	011b      	lsls	r3, r3, #4
 8004fec:	4413      	add	r3, r2
 8004fee:	3304      	adds	r3, #4
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68fa      	ldr	r2, [r7, #12]
 8004ff4:	6811      	ldr	r1, [r2, #0]
 8004ff6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	3318      	adds	r3, #24
 8004ffe:	011b      	lsls	r3, r3, #4
 8005000:	440b      	add	r3, r1
 8005002:	3304      	adds	r3, #4
 8005004:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	3307      	adds	r3, #7
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	061a      	lsls	r2, r3, #24
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3306      	adds	r3, #6
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	041b      	lsls	r3, r3, #16
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	3305      	adds	r3, #5
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	4313      	orrs	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	3204      	adds	r2, #4
 8005026:	7812      	ldrb	r2, [r2, #0]
 8005028:	4610      	mov	r0, r2
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	6811      	ldr	r1, [r2, #0]
 800502e:	ea43 0200 	orr.w	r2, r3, r0
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	011b      	lsls	r3, r3, #4
 8005036:	440b      	add	r3, r1
 8005038:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800503c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	3303      	adds	r3, #3
 8005042:	781b      	ldrb	r3, [r3, #0]
 8005044:	061a      	lsls	r2, r3, #24
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3302      	adds	r3, #2
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	041b      	lsls	r3, r3, #16
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3301      	adds	r3, #1
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	021b      	lsls	r3, r3, #8
 8005058:	4313      	orrs	r3, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	7812      	ldrb	r2, [r2, #0]
 800505e:	4610      	mov	r0, r2
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	6811      	ldr	r1, [r2, #0]
 8005064:	ea43 0200 	orr.w	r2, r3, r0
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	440b      	add	r3, r1
 800506e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005072:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	3318      	adds	r3, #24
 800507c:	011b      	lsls	r3, r3, #4
 800507e:	4413      	add	r3, r2
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	6811      	ldr	r1, [r2, #0]
 8005086:	f043 0201 	orr.w	r2, r3, #1
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	3318      	adds	r3, #24
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	440b      	add	r3, r1
 8005092:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005094:	2300      	movs	r3, #0
 8005096:	e00e      	b.n	80050b6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e006      	b.n	80050b6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
  }
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3724      	adds	r7, #36	; 0x24
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80050c2:	b480      	push	{r7}
 80050c4:	b087      	sub	sp, #28
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	60f8      	str	r0, [r7, #12]
 80050ca:	60b9      	str	r1, [r7, #8]
 80050cc:	607a      	str	r2, [r7, #4]
 80050ce:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80050d8:	7dfb      	ldrb	r3, [r7, #23]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d003      	beq.n	80050e6 <HAL_CAN_GetRxMessage+0x24>
 80050de:	7dfb      	ldrb	r3, [r7, #23]
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	f040 80f3 	bne.w	80052cc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10e      	bne.n	800510a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	f003 0303 	and.w	r3, r3, #3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d116      	bne.n	8005128 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e0e7      	b.n	80052da <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	f003 0303 	and.w	r3, r3, #3
 8005114:	2b00      	cmp	r3, #0
 8005116:	d107      	bne.n	8005128 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e0d8      	b.n	80052da <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	331b      	adds	r3, #27
 8005130:	011b      	lsls	r3, r3, #4
 8005132:	4413      	add	r3, r2
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f003 0204 	and.w	r2, r3, #4
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	689b      	ldr	r3, [r3, #8]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10c      	bne.n	8005160 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	331b      	adds	r3, #27
 800514e:	011b      	lsls	r3, r3, #4
 8005150:	4413      	add	r3, r2
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0d5b      	lsrs	r3, r3, #21
 8005156:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	e00b      	b.n	8005178 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	331b      	adds	r3, #27
 8005168:	011b      	lsls	r3, r3, #4
 800516a:	4413      	add	r3, r2
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	08db      	lsrs	r3, r3, #3
 8005170:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	331b      	adds	r3, #27
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	4413      	add	r3, r2
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0202 	and.w	r2, r3, #2
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	331b      	adds	r3, #27
 8005196:	011b      	lsls	r3, r3, #4
 8005198:	4413      	add	r3, r2
 800519a:	3304      	adds	r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 020f 	and.w	r2, r3, #15
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	331b      	adds	r3, #27
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	3304      	adds	r3, #4
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	0a1b      	lsrs	r3, r3, #8
 80051b8:	b2da      	uxtb	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	331b      	adds	r3, #27
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	4413      	add	r3, r2
 80051ca:	3304      	adds	r3, #4
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	0c1b      	lsrs	r3, r3, #16
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	681a      	ldr	r2, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	011b      	lsls	r3, r3, #4
 80051de:	4413      	add	r3, r2
 80051e0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	011b      	lsls	r3, r3, #4
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	0a1a      	lsrs	r2, r3, #8
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	3301      	adds	r3, #1
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	4413      	add	r3, r2
 8005210:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	0c1a      	lsrs	r2, r3, #16
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	3302      	adds	r3, #2
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	4413      	add	r3, r2
 800522a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	0e1a      	lsrs	r2, r3, #24
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	3303      	adds	r3, #3
 8005236:	b2d2      	uxtb	r2, r2
 8005238:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681a      	ldr	r2, [r3, #0]
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	011b      	lsls	r3, r3, #4
 8005242:	4413      	add	r3, r2
 8005244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	3304      	adds	r3, #4
 800524e:	b2d2      	uxtb	r2, r2
 8005250:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	4413      	add	r3, r2
 800525c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	0a1a      	lsrs	r2, r3, #8
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	3305      	adds	r3, #5
 8005268:	b2d2      	uxtb	r2, r2
 800526a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4413      	add	r3, r2
 8005276:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	0c1a      	lsrs	r2, r3, #16
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	3306      	adds	r3, #6
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	4413      	add	r3, r2
 8005290:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0e1a      	lsrs	r2, r3, #24
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	3307      	adds	r3, #7
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d108      	bne.n	80052b8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	68da      	ldr	r2, [r3, #12]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0220 	orr.w	r2, r2, #32
 80052b4:	60da      	str	r2, [r3, #12]
 80052b6:	e007      	b.n	80052c8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691a      	ldr	r2, [r3, #16]
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0220 	orr.w	r2, r2, #32
 80052c6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	e006      	b.n	80052da <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
  }
}
 80052da:	4618      	mov	r0, r3
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr

080052e6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b08a      	sub	sp, #40	; 0x28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80052ee:	2300      	movs	r3, #0
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	699b      	ldr	r3, [r3, #24]
 8005320:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b00      	cmp	r3, #0
 800532a:	d07c      	beq.n	8005426 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	f003 0301 	and.w	r3, r3, #1
 8005332:	2b00      	cmp	r3, #0
 8005334:	d023      	beq.n	800537e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2201      	movs	r2, #1
 800533c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800533e:	69bb      	ldr	r3, [r7, #24]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b00      	cmp	r3, #0
 8005346:	d003      	beq.n	8005350 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f983 	bl	8005654 <HAL_CAN_TxMailbox0CompleteCallback>
 800534e:	e016      	b.n	800537e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005350:	69bb      	ldr	r3, [r7, #24]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d004      	beq.n	8005364 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005360:	627b      	str	r3, [r7, #36]	; 0x24
 8005362:	e00c      	b.n	800537e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	f003 0308 	and.w	r3, r3, #8
 800536a:	2b00      	cmp	r3, #0
 800536c:	d004      	beq.n	8005378 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
 8005376:	e002      	b.n	800537e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f989 	bl	8005690 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005384:	2b00      	cmp	r3, #0
 8005386:	d024      	beq.n	80053d2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005390:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005398:	2b00      	cmp	r3, #0
 800539a:	d003      	beq.n	80053a4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f000 f963 	bl	8005668 <HAL_CAN_TxMailbox1CompleteCallback>
 80053a2:	e016      	b.n	80053d2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80053a4:	69bb      	ldr	r3, [r7, #24]
 80053a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d004      	beq.n	80053b8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80053b4:	627b      	str	r3, [r7, #36]	; 0x24
 80053b6:	e00c      	b.n	80053d2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d004      	beq.n	80053cc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80053c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80053c8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ca:	e002      	b.n	80053d2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f969 	bl	80056a4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d024      	beq.n	8005426 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80053e4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d003      	beq.n	80053f8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 f943 	bl	800567c <HAL_CAN_TxMailbox2CompleteCallback>
 80053f6:	e016      	b.n	8005426 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d004      	beq.n	800540c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005408:	627b      	str	r3, [r7, #36]	; 0x24
 800540a:	e00c      	b.n	8005426 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d004      	beq.n	8005420 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
 800541e:	e002      	b.n	8005426 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f000 f949 	bl	80056b8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	f003 0308 	and.w	r3, r3, #8
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00c      	beq.n	800544a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b00      	cmp	r3, #0
 8005438:	d007      	beq.n	800544a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800543a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005440:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2210      	movs	r2, #16
 8005448:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800544a:	6a3b      	ldr	r3, [r7, #32]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00b      	beq.n	800546c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d006      	beq.n	800546c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2208      	movs	r2, #8
 8005464:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f930 	bl	80056cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800546c:	6a3b      	ldr	r3, [r7, #32]
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d009      	beq.n	800548a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0303 	and.w	r3, r3, #3
 8005480:	2b00      	cmp	r3, #0
 8005482:	d002      	beq.n	800548a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005484:	6878      	ldr	r0, [r7, #4]
 8005486:	f7fb fcb7 	bl	8000df8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800548a:	6a3b      	ldr	r3, [r7, #32]
 800548c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005490:	2b00      	cmp	r3, #0
 8005492:	d00c      	beq.n	80054ae <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d007      	beq.n	80054ae <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	2210      	movs	r2, #16
 80054ac:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80054ae:	6a3b      	ldr	r3, [r7, #32]
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00b      	beq.n	80054d0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	f003 0308 	and.w	r3, r3, #8
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d006      	beq.n	80054d0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2208      	movs	r2, #8
 80054c8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f912 	bl	80056f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80054d0:	6a3b      	ldr	r3, [r7, #32]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d009      	beq.n	80054ee <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	f003 0303 	and.w	r3, r3, #3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f8f9 	bl	80056e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80054ee:	6a3b      	ldr	r3, [r7, #32]
 80054f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00b      	beq.n	8005510 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80054f8:	69fb      	ldr	r3, [r7, #28]
 80054fa:	f003 0310 	and.w	r3, r3, #16
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d006      	beq.n	8005510 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2210      	movs	r2, #16
 8005508:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 f8fc 	bl	8005708 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005510:	6a3b      	ldr	r3, [r7, #32]
 8005512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d00b      	beq.n	8005532 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	f003 0308 	and.w	r3, r3, #8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d006      	beq.n	8005532 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2208      	movs	r2, #8
 800552a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f000 f8f5 	bl	800571c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005532:	6a3b      	ldr	r3, [r7, #32]
 8005534:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d07b      	beq.n	8005634 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f003 0304 	and.w	r3, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	d072      	beq.n	800562c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554c:	2b00      	cmp	r3, #0
 800554e:	d008      	beq.n	8005562 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005556:	2b00      	cmp	r3, #0
 8005558:	d003      	beq.n	8005562 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	f043 0301 	orr.w	r3, r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005568:	2b00      	cmp	r3, #0
 800556a:	d008      	beq.n	800557e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005578:	f043 0302 	orr.w	r3, r3, #2
 800557c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005584:	2b00      	cmp	r3, #0
 8005586:	d008      	beq.n	800559a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800558e:	2b00      	cmp	r3, #0
 8005590:	d003      	beq.n	800559a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	f043 0304 	orr.w	r3, r3, #4
 8005598:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800559a:	6a3b      	ldr	r3, [r7, #32]
 800559c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d043      	beq.n	800562c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d03e      	beq.n	800562c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80055b4:	2b60      	cmp	r3, #96	; 0x60
 80055b6:	d02b      	beq.n	8005610 <HAL_CAN_IRQHandler+0x32a>
 80055b8:	2b60      	cmp	r3, #96	; 0x60
 80055ba:	d82e      	bhi.n	800561a <HAL_CAN_IRQHandler+0x334>
 80055bc:	2b50      	cmp	r3, #80	; 0x50
 80055be:	d022      	beq.n	8005606 <HAL_CAN_IRQHandler+0x320>
 80055c0:	2b50      	cmp	r3, #80	; 0x50
 80055c2:	d82a      	bhi.n	800561a <HAL_CAN_IRQHandler+0x334>
 80055c4:	2b40      	cmp	r3, #64	; 0x40
 80055c6:	d019      	beq.n	80055fc <HAL_CAN_IRQHandler+0x316>
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d826      	bhi.n	800561a <HAL_CAN_IRQHandler+0x334>
 80055cc:	2b30      	cmp	r3, #48	; 0x30
 80055ce:	d010      	beq.n	80055f2 <HAL_CAN_IRQHandler+0x30c>
 80055d0:	2b30      	cmp	r3, #48	; 0x30
 80055d2:	d822      	bhi.n	800561a <HAL_CAN_IRQHandler+0x334>
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d002      	beq.n	80055de <HAL_CAN_IRQHandler+0x2f8>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d005      	beq.n	80055e8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80055dc:	e01d      	b.n	800561a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	f043 0308 	orr.w	r3, r3, #8
 80055e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055e6:	e019      	b.n	800561c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80055e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ea:	f043 0310 	orr.w	r3, r3, #16
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055f0:	e014      	b.n	800561c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	f043 0320 	orr.w	r3, r3, #32
 80055f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80055fa:	e00f      	b.n	800561c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005604:	e00a      	b.n	800561c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800560c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800560e:	e005      	b.n	800561c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005618:	e000      	b.n	800561c <HAL_CAN_IRQHandler+0x336>
            break;
 800561a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	699a      	ldr	r2, [r3, #24]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800562a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2204      	movs	r2, #4
 8005632:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	d008      	beq.n	800564c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800563e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005640:	431a      	orrs	r2, r3
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f872 	bl	8005730 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800564c:	bf00      	nop
 800564e:	3728      	adds	r7, #40	; 0x28
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005670:	bf00      	nop
 8005672:	370c      	adds	r7, #12
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005684:	bf00      	nop
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005698:	bf00      	nop
 800569a:	370c      	adds	r7, #12
 800569c:	46bd      	mov	sp, r7
 800569e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a2:	4770      	bx	lr

080056a4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b083      	sub	sp, #12
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80056fc:	bf00      	nop
 80056fe:	370c      	adds	r7, #12
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800571c:	b480      	push	{r7}
 800571e:	b083      	sub	sp, #12
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005724:	bf00      	nop
 8005726:	370c      	adds	r7, #12
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr

08005730 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005738:	bf00      	nop
 800573a:	370c      	adds	r7, #12
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr

08005744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f003 0307 	and.w	r3, r3, #7
 8005752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005754:	4b0b      	ldr	r3, [pc, #44]	; (8005784 <__NVIC_SetPriorityGrouping+0x40>)
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005760:	4013      	ands	r3, r2
 8005762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800576c:	4b06      	ldr	r3, [pc, #24]	; (8005788 <__NVIC_SetPriorityGrouping+0x44>)
 800576e:	4313      	orrs	r3, r2
 8005770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005772:	4a04      	ldr	r2, [pc, #16]	; (8005784 <__NVIC_SetPriorityGrouping+0x40>)
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	60d3      	str	r3, [r2, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr
 8005784:	e000ed00 	.word	0xe000ed00
 8005788:	05fa0000 	.word	0x05fa0000

0800578c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800578c:	b480      	push	{r7}
 800578e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005790:	4b04      	ldr	r3, [pc, #16]	; (80057a4 <__NVIC_GetPriorityGrouping+0x18>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	0a1b      	lsrs	r3, r3, #8
 8005796:	f003 0307 	and.w	r3, r3, #7
}
 800579a:	4618      	mov	r0, r3
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	e000ed00 	.word	0xe000ed00

080057a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	4603      	mov	r3, r0
 80057b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	db0b      	blt.n	80057d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80057ba:	79fb      	ldrb	r3, [r7, #7]
 80057bc:	f003 021f 	and.w	r2, r3, #31
 80057c0:	4907      	ldr	r1, [pc, #28]	; (80057e0 <__NVIC_EnableIRQ+0x38>)
 80057c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	2001      	movs	r0, #1
 80057ca:	fa00 f202 	lsl.w	r2, r0, r2
 80057ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80057d2:	bf00      	nop
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	e000e100 	.word	0xe000e100

080057e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b083      	sub	sp, #12
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	4603      	mov	r3, r0
 80057ec:	6039      	str	r1, [r7, #0]
 80057ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80057f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	db0a      	blt.n	800580e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	490c      	ldr	r1, [pc, #48]	; (8005830 <__NVIC_SetPriority+0x4c>)
 80057fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005802:	0112      	lsls	r2, r2, #4
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	440b      	add	r3, r1
 8005808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800580c:	e00a      	b.n	8005824 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4908      	ldr	r1, [pc, #32]	; (8005834 <__NVIC_SetPriority+0x50>)
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	f003 030f 	and.w	r3, r3, #15
 800581a:	3b04      	subs	r3, #4
 800581c:	0112      	lsls	r2, r2, #4
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	440b      	add	r3, r1
 8005822:	761a      	strb	r2, [r3, #24]
}
 8005824:	bf00      	nop
 8005826:	370c      	adds	r7, #12
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr
 8005830:	e000e100 	.word	0xe000e100
 8005834:	e000ed00 	.word	0xe000ed00

08005838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005838:	b480      	push	{r7}
 800583a:	b089      	sub	sp, #36	; 0x24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f003 0307 	and.w	r3, r3, #7
 800584a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	f1c3 0307 	rsb	r3, r3, #7
 8005852:	2b04      	cmp	r3, #4
 8005854:	bf28      	it	cs
 8005856:	2304      	movcs	r3, #4
 8005858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800585a:	69fb      	ldr	r3, [r7, #28]
 800585c:	3304      	adds	r3, #4
 800585e:	2b06      	cmp	r3, #6
 8005860:	d902      	bls.n	8005868 <NVIC_EncodePriority+0x30>
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	3b03      	subs	r3, #3
 8005866:	e000      	b.n	800586a <NVIC_EncodePriority+0x32>
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800586c:	f04f 32ff 	mov.w	r2, #4294967295
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	fa02 f303 	lsl.w	r3, r2, r3
 8005876:	43da      	mvns	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	401a      	ands	r2, r3
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005880:	f04f 31ff 	mov.w	r1, #4294967295
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	fa01 f303 	lsl.w	r3, r1, r3
 800588a:	43d9      	mvns	r1, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005890:	4313      	orrs	r3, r2
         );
}
 8005892:	4618      	mov	r0, r3
 8005894:	3724      	adds	r7, #36	; 0x24
 8005896:	46bd      	mov	sp, r7
 8005898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589c:	4770      	bx	lr
	...

080058a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	3b01      	subs	r3, #1
 80058ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80058b0:	d301      	bcc.n	80058b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80058b2:	2301      	movs	r3, #1
 80058b4:	e00f      	b.n	80058d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80058b6:	4a0a      	ldr	r2, [pc, #40]	; (80058e0 <SysTick_Config+0x40>)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80058be:	210f      	movs	r1, #15
 80058c0:	f04f 30ff 	mov.w	r0, #4294967295
 80058c4:	f7ff ff8e 	bl	80057e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80058c8:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <SysTick_Config+0x40>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80058ce:	4b04      	ldr	r3, [pc, #16]	; (80058e0 <SysTick_Config+0x40>)
 80058d0:	2207      	movs	r2, #7
 80058d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3708      	adds	r7, #8
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	e000e010 	.word	0xe000e010

080058e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f7ff ff29 	bl	8005744 <__NVIC_SetPriorityGrouping>
}
 80058f2:	bf00      	nop
 80058f4:	3708      	adds	r7, #8
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b086      	sub	sp, #24
 80058fe:	af00      	add	r7, sp, #0
 8005900:	4603      	mov	r3, r0
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	607a      	str	r2, [r7, #4]
 8005906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800590c:	f7ff ff3e 	bl	800578c <__NVIC_GetPriorityGrouping>
 8005910:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	68b9      	ldr	r1, [r7, #8]
 8005916:	6978      	ldr	r0, [r7, #20]
 8005918:	f7ff ff8e 	bl	8005838 <NVIC_EncodePriority>
 800591c:	4602      	mov	r2, r0
 800591e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005922:	4611      	mov	r1, r2
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff ff5d 	bl	80057e4 <__NVIC_SetPriority>
}
 800592a:	bf00      	nop
 800592c:	3718      	adds	r7, #24
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b082      	sub	sp, #8
 8005936:	af00      	add	r7, sp, #0
 8005938:	4603      	mov	r3, r0
 800593a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800593c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005940:	4618      	mov	r0, r3
 8005942:	f7ff ff31 	bl	80057a8 <__NVIC_EnableIRQ>
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800594e:	b580      	push	{r7, lr}
 8005950:	b082      	sub	sp, #8
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f7ff ffa2 	bl	80058a0 <SysTick_Config>
 800595c:	4603      	mov	r3, r0
}
 800595e:	4618      	mov	r0, r3
 8005960:	3708      	adds	r7, #8
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b086      	sub	sp, #24
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005970:	2300      	movs	r3, #0
 8005972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005974:	f7fe fd86 	bl	8004484 <HAL_GetTick>
 8005978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	e099      	b.n	8005ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2202      	movs	r2, #2
 8005988:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f022 0201 	bic.w	r2, r2, #1
 80059a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059a4:	e00f      	b.n	80059c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80059a6:	f7fe fd6d 	bl	8004484 <HAL_GetTick>
 80059aa:	4602      	mov	r2, r0
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	2b05      	cmp	r3, #5
 80059b2:	d908      	bls.n	80059c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2203      	movs	r2, #3
 80059be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e078      	b.n	8005ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d1e8      	bne.n	80059a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80059dc:	697a      	ldr	r2, [r7, #20]
 80059de:	4b38      	ldr	r3, [pc, #224]	; (8005ac0 <HAL_DMA_Init+0x158>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	689b      	ldr	r3, [r3, #8]
 80059ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80059f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80059fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a1b      	ldr	r3, [r3, #32]
 8005a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d107      	bne.n	8005a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	697a      	ldr	r2, [r7, #20]
 8005a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	695b      	ldr	r3, [r3, #20]
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f023 0307 	bic.w	r3, r3, #7
 8005a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b04      	cmp	r3, #4
 8005a58:	d117      	bne.n	8005a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00e      	beq.n	8005a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa77 	bl	8005f60 <DMA_CheckFifoParam>
 8005a72:	4603      	mov	r3, r0
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d008      	beq.n	8005a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2240      	movs	r2, #64	; 0x40
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2201      	movs	r2, #1
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005a86:	2301      	movs	r3, #1
 8005a88:	e016      	b.n	8005ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa2e 	bl	8005ef4 <DMA_CalcBaseAndBitshift>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa0:	223f      	movs	r2, #63	; 0x3f
 8005aa2:	409a      	lsls	r2, r3
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ab6:	2300      	movs	r3, #0
}
 8005ab8:	4618      	mov	r0, r3
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	f010803f 	.word	0xf010803f

08005ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	60f8      	str	r0, [r7, #12]
 8005acc:	60b9      	str	r1, [r7, #8]
 8005ace:	607a      	str	r2, [r7, #4]
 8005ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d101      	bne.n	8005aea <HAL_DMA_Start_IT+0x26>
 8005ae6:	2302      	movs	r3, #2
 8005ae8:	e048      	b.n	8005b7c <HAL_DMA_Start_IT+0xb8>
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d137      	bne.n	8005b6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2202      	movs	r2, #2
 8005b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68b9      	ldr	r1, [r7, #8]
 8005b12:	68f8      	ldr	r0, [r7, #12]
 8005b14:	f000 f9c0 	bl	8005e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b1c:	223f      	movs	r2, #63	; 0x3f
 8005b1e:	409a      	lsls	r2, r3
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681a      	ldr	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f042 0216 	orr.w	r2, r2, #22
 8005b32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695a      	ldr	r2, [r3, #20]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d007      	beq.n	8005b5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f042 0208 	orr.w	r2, r2, #8
 8005b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e005      	b.n	8005b7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005b76:	2302      	movs	r3, #2
 8005b78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8005b90:	4b8e      	ldr	r3, [pc, #568]	; (8005dcc <HAL_DMA_IRQHandler+0x248>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a8e      	ldr	r2, [pc, #568]	; (8005dd0 <HAL_DMA_IRQHandler+0x24c>)
 8005b96:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9a:	0a9b      	lsrs	r3, r3, #10
 8005b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005ba4:	693b      	ldr	r3, [r7, #16]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bae:	2208      	movs	r2, #8
 8005bb0:	409a      	lsls	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	4013      	ands	r3, r2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01a      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d013      	beq.n	8005bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f022 0204 	bic.w	r2, r2, #4
 8005bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bdc:	2208      	movs	r2, #8
 8005bde:	409a      	lsls	r2, r3
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be8:	f043 0201 	orr.w	r2, r3, #1
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	409a      	lsls	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d012      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	695b      	ldr	r3, [r3, #20]
 8005c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00b      	beq.n	8005c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c12:	2201      	movs	r2, #1
 8005c14:	409a      	lsls	r2, r3
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f043 0202 	orr.w	r2, r3, #2
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c2a:	2204      	movs	r2, #4
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	4013      	ands	r3, r2
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d012      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0302 	and.w	r3, r3, #2
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00b      	beq.n	8005c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	2204      	movs	r2, #4
 8005c4a:	409a      	lsls	r2, r3
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c54:	f043 0204 	orr.w	r2, r3, #4
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c60:	2210      	movs	r2, #16
 8005c62:	409a      	lsls	r2, r3
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d043      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d03c      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	2210      	movs	r2, #16
 8005c80:	409a      	lsls	r2, r3
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d018      	beq.n	8005cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d108      	bne.n	8005cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d024      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	4798      	blx	r3
 8005cb2:	e01f      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d01b      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	4798      	blx	r3
 8005cc4:	e016      	b.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d107      	bne.n	8005ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f022 0208 	bic.w	r2, r2, #8
 8005ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	409a      	lsls	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 808f 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0310 	and.w	r3, r3, #16
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	f000 8087 	beq.w	8005e24 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	2220      	movs	r2, #32
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	d136      	bne.n	8005d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	681a      	ldr	r2, [r3, #0]
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 0216 	bic.w	r2, r2, #22
 8005d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	695a      	ldr	r2, [r3, #20]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d103      	bne.n	8005d5e <HAL_DMA_IRQHandler+0x1da>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d007      	beq.n	8005d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 0208 	bic.w	r2, r2, #8
 8005d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d72:	223f      	movs	r2, #63	; 0x3f
 8005d74:	409a      	lsls	r2, r3
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d07e      	beq.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	4798      	blx	r3
        }
        return;
 8005d9a:	e079      	b.n	8005e90 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01d      	beq.n	8005de6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10d      	bne.n	8005dd4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d031      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	4798      	blx	r3
 8005dc8:	e02c      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
 8005dca:	bf00      	nop
 8005dcc:	2000008c 	.word	0x2000008c
 8005dd0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d023      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	4798      	blx	r3
 8005de4:	e01e      	b.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f022 0210 	bic.w	r2, r2, #16
 8005e02:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d003      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d032      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d022      	beq.n	8005e7e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2205      	movs	r2, #5
 8005e3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f022 0201 	bic.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	3301      	adds	r3, #1
 8005e54:	60bb      	str	r3, [r7, #8]
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d307      	bcc.n	8005e6c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0301 	and.w	r3, r3, #1
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1f2      	bne.n	8005e50 <HAL_DMA_IRQHandler+0x2cc>
 8005e6a:	e000      	b.n	8005e6e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005e6c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	4798      	blx	r3
 8005e8e:	e000      	b.n	8005e92 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005e90:	bf00      	nop
    }
  }
}
 8005e92:	3718      	adds	r7, #24
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
 8005ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	681a      	ldr	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	683a      	ldr	r2, [r7, #0]
 8005ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b40      	cmp	r3, #64	; 0x40
 8005ec4:	d108      	bne.n	8005ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005ed6:	e007      	b.n	8005ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	60da      	str	r2, [r3, #12]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b085      	sub	sp, #20
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	3b10      	subs	r3, #16
 8005f04:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <DMA_CalcBaseAndBitshift+0x60>)
 8005f06:	fba2 2303 	umull	r2, r3, r2, r3
 8005f0a:	091b      	lsrs	r3, r3, #4
 8005f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005f0e:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <DMA_CalcBaseAndBitshift+0x64>)
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4413      	add	r3, r2
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	461a      	mov	r2, r3
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	2b03      	cmp	r3, #3
 8005f20:	d908      	bls.n	8005f34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <DMA_CalcBaseAndBitshift+0x68>)
 8005f2a:	4013      	ands	r3, r2
 8005f2c:	1d1a      	adds	r2, r3, #4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	659a      	str	r2, [r3, #88]	; 0x58
 8005f32:	e006      	b.n	8005f42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	461a      	mov	r2, r3
 8005f3a:	4b08      	ldr	r3, [pc, #32]	; (8005f5c <DMA_CalcBaseAndBitshift+0x68>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	3714      	adds	r7, #20
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	aaaaaaab 	.word	0xaaaaaaab
 8005f58:	0801e0ac 	.word	0x0801e0ac
 8005f5c:	fffffc00 	.word	0xfffffc00

08005f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d11f      	bne.n	8005fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	2b03      	cmp	r3, #3
 8005f7e:	d856      	bhi.n	800602e <DMA_CheckFifoParam+0xce>
 8005f80:	a201      	add	r2, pc, #4	; (adr r2, 8005f88 <DMA_CheckFifoParam+0x28>)
 8005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f86:	bf00      	nop
 8005f88:	08005f99 	.word	0x08005f99
 8005f8c:	08005fab 	.word	0x08005fab
 8005f90:	08005f99 	.word	0x08005f99
 8005f94:	0800602f 	.word	0x0800602f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d046      	beq.n	8006032 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fa8:	e043      	b.n	8006032 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fb2:	d140      	bne.n	8006036 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005fb8:	e03d      	b.n	8006036 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fc2:	d121      	bne.n	8006008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d837      	bhi.n	800603a <DMA_CheckFifoParam+0xda>
 8005fca:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <DMA_CheckFifoParam+0x70>)
 8005fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd0:	08005fe1 	.word	0x08005fe1
 8005fd4:	08005fe7 	.word	0x08005fe7
 8005fd8:	08005fe1 	.word	0x08005fe1
 8005fdc:	08005ff9 	.word	0x08005ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe4:	e030      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d025      	beq.n	800603e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ff6:	e022      	b.n	800603e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006000:	d11f      	bne.n	8006042 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006006:	e01c      	b.n	8006042 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d903      	bls.n	8006016 <DMA_CheckFifoParam+0xb6>
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b03      	cmp	r3, #3
 8006012:	d003      	beq.n	800601c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006014:	e018      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006016:	2301      	movs	r3, #1
 8006018:	73fb      	strb	r3, [r7, #15]
      break;
 800601a:	e015      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006020:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00e      	beq.n	8006046 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006028:	2301      	movs	r3, #1
 800602a:	73fb      	strb	r3, [r7, #15]
      break;
 800602c:	e00b      	b.n	8006046 <DMA_CheckFifoParam+0xe6>
      break;
 800602e:	bf00      	nop
 8006030:	e00a      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 8006032:	bf00      	nop
 8006034:	e008      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 8006036:	bf00      	nop
 8006038:	e006      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 800603a:	bf00      	nop
 800603c:	e004      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 800603e:	bf00      	nop
 8006040:	e002      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;   
 8006042:	bf00      	nop
 8006044:	e000      	b.n	8006048 <DMA_CheckFifoParam+0xe8>
      break;
 8006046:	bf00      	nop
    }
  } 
  
  return status; 
 8006048:	7bfb      	ldrb	r3, [r7, #15]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006058:	b480      	push	{r7}
 800605a:	b089      	sub	sp, #36	; 0x24
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006066:	2300      	movs	r3, #0
 8006068:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800606a:	2300      	movs	r3, #0
 800606c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800606e:	2300      	movs	r3, #0
 8006070:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006072:	2300      	movs	r3, #0
 8006074:	61fb      	str	r3, [r7, #28]
 8006076:	e175      	b.n	8006364 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006078:	2201      	movs	r2, #1
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4013      	ands	r3, r2
 800608a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	429a      	cmp	r2, r3
 8006092:	f040 8164 	bne.w	800635e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d005      	beq.n	80060ae <HAL_GPIO_Init+0x56>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f003 0303 	and.w	r3, r3, #3
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d130      	bne.n	8006110 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060b4:	69fb      	ldr	r3, [r7, #28]
 80060b6:	005b      	lsls	r3, r3, #1
 80060b8:	2203      	movs	r2, #3
 80060ba:	fa02 f303 	lsl.w	r3, r2, r3
 80060be:	43db      	mvns	r3, r3
 80060c0:	69ba      	ldr	r2, [r7, #24]
 80060c2:	4013      	ands	r3, r2
 80060c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	69fb      	ldr	r3, [r7, #28]
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	fa02 f303 	lsl.w	r3, r2, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	69ba      	ldr	r2, [r7, #24]
 80060dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060e4:	2201      	movs	r2, #1
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	fa02 f303 	lsl.w	r3, r2, r3
 80060ec:	43db      	mvns	r3, r3
 80060ee:	69ba      	ldr	r2, [r7, #24]
 80060f0:	4013      	ands	r3, r2
 80060f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	091b      	lsrs	r3, r3, #4
 80060fa:	f003 0201 	and.w	r2, r3, #1
 80060fe:	69fb      	ldr	r3, [r7, #28]
 8006100:	fa02 f303 	lsl.w	r3, r2, r3
 8006104:	69ba      	ldr	r2, [r7, #24]
 8006106:	4313      	orrs	r3, r2
 8006108:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	f003 0303 	and.w	r3, r3, #3
 8006118:	2b03      	cmp	r3, #3
 800611a:	d017      	beq.n	800614c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006122:	69fb      	ldr	r3, [r7, #28]
 8006124:	005b      	lsls	r3, r3, #1
 8006126:	2203      	movs	r2, #3
 8006128:	fa02 f303 	lsl.w	r3, r2, r3
 800612c:	43db      	mvns	r3, r3
 800612e:	69ba      	ldr	r2, [r7, #24]
 8006130:	4013      	ands	r3, r2
 8006132:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	689a      	ldr	r2, [r3, #8]
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4313      	orrs	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d123      	bne.n	80061a0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	08da      	lsrs	r2, r3, #3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	3208      	adds	r2, #8
 8006160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	f003 0307 	and.w	r3, r3, #7
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	220f      	movs	r2, #15
 8006170:	fa02 f303 	lsl.w	r3, r2, r3
 8006174:	43db      	mvns	r3, r3
 8006176:	69ba      	ldr	r2, [r7, #24]
 8006178:	4013      	ands	r3, r2
 800617a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	69fb      	ldr	r3, [r7, #28]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	fa02 f303 	lsl.w	r3, r2, r3
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	4313      	orrs	r3, r2
 8006190:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	08da      	lsrs	r2, r3, #3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3208      	adds	r2, #8
 800619a:	69b9      	ldr	r1, [r7, #24]
 800619c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	005b      	lsls	r3, r3, #1
 80061aa:	2203      	movs	r2, #3
 80061ac:	fa02 f303 	lsl.w	r3, r2, r3
 80061b0:	43db      	mvns	r3, r3
 80061b2:	69ba      	ldr	r2, [r7, #24]
 80061b4:	4013      	ands	r3, r2
 80061b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	f003 0203 	and.w	r2, r3, #3
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	fa02 f303 	lsl.w	r3, r2, r3
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	f000 80be 	beq.w	800635e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061e2:	4b66      	ldr	r3, [pc, #408]	; (800637c <HAL_GPIO_Init+0x324>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	4a65      	ldr	r2, [pc, #404]	; (800637c <HAL_GPIO_Init+0x324>)
 80061e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061ec:	6453      	str	r3, [r2, #68]	; 0x44
 80061ee:	4b63      	ldr	r3, [pc, #396]	; (800637c <HAL_GPIO_Init+0x324>)
 80061f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061fa:	4a61      	ldr	r2, [pc, #388]	; (8006380 <HAL_GPIO_Init+0x328>)
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	089b      	lsrs	r3, r3, #2
 8006200:	3302      	adds	r3, #2
 8006202:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006206:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	220f      	movs	r2, #15
 8006212:	fa02 f303 	lsl.w	r3, r2, r3
 8006216:	43db      	mvns	r3, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4a58      	ldr	r2, [pc, #352]	; (8006384 <HAL_GPIO_Init+0x32c>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d037      	beq.n	8006296 <HAL_GPIO_Init+0x23e>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a57      	ldr	r2, [pc, #348]	; (8006388 <HAL_GPIO_Init+0x330>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d031      	beq.n	8006292 <HAL_GPIO_Init+0x23a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a56      	ldr	r2, [pc, #344]	; (800638c <HAL_GPIO_Init+0x334>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02b      	beq.n	800628e <HAL_GPIO_Init+0x236>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a55      	ldr	r2, [pc, #340]	; (8006390 <HAL_GPIO_Init+0x338>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d025      	beq.n	800628a <HAL_GPIO_Init+0x232>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a54      	ldr	r2, [pc, #336]	; (8006394 <HAL_GPIO_Init+0x33c>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d01f      	beq.n	8006286 <HAL_GPIO_Init+0x22e>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a53      	ldr	r2, [pc, #332]	; (8006398 <HAL_GPIO_Init+0x340>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d019      	beq.n	8006282 <HAL_GPIO_Init+0x22a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a52      	ldr	r2, [pc, #328]	; (800639c <HAL_GPIO_Init+0x344>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_GPIO_Init+0x226>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a51      	ldr	r2, [pc, #324]	; (80063a0 <HAL_GPIO_Init+0x348>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00d      	beq.n	800627a <HAL_GPIO_Init+0x222>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a50      	ldr	r2, [pc, #320]	; (80063a4 <HAL_GPIO_Init+0x34c>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d007      	beq.n	8006276 <HAL_GPIO_Init+0x21e>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a4f      	ldr	r2, [pc, #316]	; (80063a8 <HAL_GPIO_Init+0x350>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d101      	bne.n	8006272 <HAL_GPIO_Init+0x21a>
 800626e:	2309      	movs	r3, #9
 8006270:	e012      	b.n	8006298 <HAL_GPIO_Init+0x240>
 8006272:	230a      	movs	r3, #10
 8006274:	e010      	b.n	8006298 <HAL_GPIO_Init+0x240>
 8006276:	2308      	movs	r3, #8
 8006278:	e00e      	b.n	8006298 <HAL_GPIO_Init+0x240>
 800627a:	2307      	movs	r3, #7
 800627c:	e00c      	b.n	8006298 <HAL_GPIO_Init+0x240>
 800627e:	2306      	movs	r3, #6
 8006280:	e00a      	b.n	8006298 <HAL_GPIO_Init+0x240>
 8006282:	2305      	movs	r3, #5
 8006284:	e008      	b.n	8006298 <HAL_GPIO_Init+0x240>
 8006286:	2304      	movs	r3, #4
 8006288:	e006      	b.n	8006298 <HAL_GPIO_Init+0x240>
 800628a:	2303      	movs	r3, #3
 800628c:	e004      	b.n	8006298 <HAL_GPIO_Init+0x240>
 800628e:	2302      	movs	r3, #2
 8006290:	e002      	b.n	8006298 <HAL_GPIO_Init+0x240>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <HAL_GPIO_Init+0x240>
 8006296:	2300      	movs	r3, #0
 8006298:	69fa      	ldr	r2, [r7, #28]
 800629a:	f002 0203 	and.w	r2, r2, #3
 800629e:	0092      	lsls	r2, r2, #2
 80062a0:	4093      	lsls	r3, r2
 80062a2:	69ba      	ldr	r2, [r7, #24]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80062a8:	4935      	ldr	r1, [pc, #212]	; (8006380 <HAL_GPIO_Init+0x328>)
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	089b      	lsrs	r3, r3, #2
 80062ae:	3302      	adds	r3, #2
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062b6:	4b3d      	ldr	r3, [pc, #244]	; (80063ac <HAL_GPIO_Init+0x354>)
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	43db      	mvns	r3, r3
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	4013      	ands	r3, r2
 80062c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062d2:	69ba      	ldr	r2, [r7, #24]
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062da:	4a34      	ldr	r2, [pc, #208]	; (80063ac <HAL_GPIO_Init+0x354>)
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062e0:	4b32      	ldr	r3, [pc, #200]	; (80063ac <HAL_GPIO_Init+0x354>)
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	43db      	mvns	r3, r3
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4013      	ands	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d003      	beq.n	8006304 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	4313      	orrs	r3, r2
 8006302:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006304:	4a29      	ldr	r2, [pc, #164]	; (80063ac <HAL_GPIO_Init+0x354>)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800630a:	4b28      	ldr	r3, [pc, #160]	; (80063ac <HAL_GPIO_Init+0x354>)
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d003      	beq.n	800632e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006326:	69ba      	ldr	r2, [r7, #24]
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800632e:	4a1f      	ldr	r2, [pc, #124]	; (80063ac <HAL_GPIO_Init+0x354>)
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006334:	4b1d      	ldr	r3, [pc, #116]	; (80063ac <HAL_GPIO_Init+0x354>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	43db      	mvns	r3, r3
 800633e:	69ba      	ldr	r2, [r7, #24]
 8006340:	4013      	ands	r3, r2
 8006342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d003      	beq.n	8006358 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006350:	69ba      	ldr	r2, [r7, #24]
 8006352:	693b      	ldr	r3, [r7, #16]
 8006354:	4313      	orrs	r3, r2
 8006356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006358:	4a14      	ldr	r2, [pc, #80]	; (80063ac <HAL_GPIO_Init+0x354>)
 800635a:	69bb      	ldr	r3, [r7, #24]
 800635c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800635e:	69fb      	ldr	r3, [r7, #28]
 8006360:	3301      	adds	r3, #1
 8006362:	61fb      	str	r3, [r7, #28]
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	2b0f      	cmp	r3, #15
 8006368:	f67f ae86 	bls.w	8006078 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	3724      	adds	r7, #36	; 0x24
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40023800 	.word	0x40023800
 8006380:	40013800 	.word	0x40013800
 8006384:	40020000 	.word	0x40020000
 8006388:	40020400 	.word	0x40020400
 800638c:	40020800 	.word	0x40020800
 8006390:	40020c00 	.word	0x40020c00
 8006394:	40021000 	.word	0x40021000
 8006398:	40021400 	.word	0x40021400
 800639c:	40021800 	.word	0x40021800
 80063a0:	40021c00 	.word	0x40021c00
 80063a4:	40022000 	.word	0x40022000
 80063a8:	40022400 	.word	0x40022400
 80063ac:	40013c00 	.word	0x40013c00

080063b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b085      	sub	sp, #20
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
 80063b8:	460b      	mov	r3, r1
 80063ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	691a      	ldr	r2, [r3, #16]
 80063c0:	887b      	ldrh	r3, [r7, #2]
 80063c2:	4013      	ands	r3, r2
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d002      	beq.n	80063ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
 80063cc:	e001      	b.n	80063d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063ce:	2300      	movs	r3, #0
 80063d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d4:	4618      	mov	r0, r3
 80063d6:	3714      	adds	r7, #20
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
 80063e8:	460b      	mov	r3, r1
 80063ea:	807b      	strh	r3, [r7, #2]
 80063ec:	4613      	mov	r3, r2
 80063ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063f0:	787b      	ldrb	r3, [r7, #1]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d003      	beq.n	80063fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063f6:	887a      	ldrh	r2, [r7, #2]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063fc:	e003      	b.n	8006406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063fe:	887b      	ldrh	r3, [r7, #2]
 8006400:	041a      	lsls	r2, r3, #16
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	619a      	str	r2, [r3, #24]
}
 8006406:	bf00      	nop
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006412:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006414:	b08f      	sub	sp, #60	; 0x3c
 8006416:	af0a      	add	r7, sp, #40	; 0x28
 8006418:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d101      	bne.n	8006424 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e116      	b.n	8006652 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006430:	b2db      	uxtb	r3, r3
 8006432:	2b00      	cmp	r3, #0
 8006434:	d106      	bne.n	8006444 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f007 faf6 	bl	800da30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2203      	movs	r2, #3
 8006448:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d102      	bne.n	800645e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4618      	mov	r0, r3
 8006464:	f003 fd9f 	bl	8009fa6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	603b      	str	r3, [r7, #0]
 800646e:	687e      	ldr	r6, [r7, #4]
 8006470:	466d      	mov	r5, sp
 8006472:	f106 0410 	add.w	r4, r6, #16
 8006476:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006478:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800647a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800647c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800647e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006482:	e885 0003 	stmia.w	r5, {r0, r1}
 8006486:	1d33      	adds	r3, r6, #4
 8006488:	cb0e      	ldmia	r3, {r1, r2, r3}
 800648a:	6838      	ldr	r0, [r7, #0]
 800648c:	f003 fc80 	bl	8009d90 <USB_CoreInit>
 8006490:	4603      	mov	r3, r0
 8006492:	2b00      	cmp	r3, #0
 8006494:	d005      	beq.n	80064a2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2202      	movs	r2, #2
 800649a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	e0d7      	b.n	8006652 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2100      	movs	r1, #0
 80064a8:	4618      	mov	r0, r3
 80064aa:	f003 fd8d 	bl	8009fc8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064ae:	2300      	movs	r3, #0
 80064b0:	73fb      	strb	r3, [r7, #15]
 80064b2:	e04a      	b.n	800654a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064b4:	7bfa      	ldrb	r2, [r7, #15]
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	333d      	adds	r3, #61	; 0x3d
 80064c4:	2201      	movs	r2, #1
 80064c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064c8:	7bfa      	ldrb	r2, [r7, #15]
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	333c      	adds	r3, #60	; 0x3c
 80064d8:	7bfa      	ldrb	r2, [r7, #15]
 80064da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80064dc:	7bfa      	ldrb	r2, [r7, #15]
 80064de:	7bfb      	ldrb	r3, [r7, #15]
 80064e0:	b298      	uxth	r0, r3
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	3344      	adds	r3, #68	; 0x44
 80064f0:	4602      	mov	r2, r0
 80064f2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80064f4:	7bfa      	ldrb	r2, [r7, #15]
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	3340      	adds	r3, #64	; 0x40
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006508:	7bfa      	ldrb	r2, [r7, #15]
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	3348      	adds	r3, #72	; 0x48
 8006518:	2200      	movs	r2, #0
 800651a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800651c:	7bfa      	ldrb	r2, [r7, #15]
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	334c      	adds	r3, #76	; 0x4c
 800652c:	2200      	movs	r2, #0
 800652e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	3354      	adds	r3, #84	; 0x54
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006544:	7bfb      	ldrb	r3, [r7, #15]
 8006546:	3301      	adds	r3, #1
 8006548:	73fb      	strb	r3, [r7, #15]
 800654a:	7bfa      	ldrb	r2, [r7, #15]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	429a      	cmp	r2, r3
 8006552:	d3af      	bcc.n	80064b4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
 8006558:	e044      	b.n	80065e4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800655a:	7bfa      	ldrb	r2, [r7, #15]
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	4613      	mov	r3, r2
 8006560:	00db      	lsls	r3, r3, #3
 8006562:	4413      	add	r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	440b      	add	r3, r1
 8006568:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800656c:	2200      	movs	r2, #0
 800656e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006570:	7bfa      	ldrb	r2, [r7, #15]
 8006572:	6879      	ldr	r1, [r7, #4]
 8006574:	4613      	mov	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	440b      	add	r3, r1
 800657e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006586:	7bfa      	ldrb	r2, [r7, #15]
 8006588:	6879      	ldr	r1, [r7, #4]
 800658a:	4613      	mov	r3, r2
 800658c:	00db      	lsls	r3, r3, #3
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	440b      	add	r3, r1
 8006594:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800659c:	7bfa      	ldrb	r2, [r7, #15]
 800659e:	6879      	ldr	r1, [r7, #4]
 80065a0:	4613      	mov	r3, r2
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	4413      	add	r3, r2
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	440b      	add	r3, r1
 80065aa:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80065ae:	2200      	movs	r2, #0
 80065b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065b2:	7bfa      	ldrb	r2, [r7, #15]
 80065b4:	6879      	ldr	r1, [r7, #4]
 80065b6:	4613      	mov	r3, r2
 80065b8:	00db      	lsls	r3, r3, #3
 80065ba:	4413      	add	r3, r2
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	440b      	add	r3, r1
 80065c0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80065c4:	2200      	movs	r2, #0
 80065c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065c8:	7bfa      	ldrb	r2, [r7, #15]
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	4613      	mov	r3, r2
 80065ce:	00db      	lsls	r3, r3, #3
 80065d0:	4413      	add	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80065da:	2200      	movs	r2, #0
 80065dc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	3301      	adds	r3, #1
 80065e2:	73fb      	strb	r3, [r7, #15]
 80065e4:	7bfa      	ldrb	r2, [r7, #15]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d3b5      	bcc.n	800655a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	603b      	str	r3, [r7, #0]
 80065f4:	687e      	ldr	r6, [r7, #4]
 80065f6:	466d      	mov	r5, sp
 80065f8:	f106 0410 	add.w	r4, r6, #16
 80065fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006602:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006604:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006608:	e885 0003 	stmia.w	r5, {r0, r1}
 800660c:	1d33      	adds	r3, r6, #4
 800660e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006610:	6838      	ldr	r0, [r7, #0]
 8006612:	f003 fd25 	bl	800a060 <USB_DevInit>
 8006616:	4603      	mov	r3, r0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d005      	beq.n	8006628 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e014      	b.n	8006652 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2200      	movs	r2, #0
 800662c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	2b01      	cmp	r3, #1
 800663e:	d102      	bne.n	8006646 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 f97b 	bl	800793c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f004 fe73 	bl	800b336 <USB_DevDisconnect>

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3714      	adds	r7, #20
 8006656:	46bd      	mov	sp, r7
 8006658:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800665a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b082      	sub	sp, #8
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006668:	2b01      	cmp	r3, #1
 800666a:	d101      	bne.n	8006670 <HAL_PCD_Start+0x16>
 800666c:	2302      	movs	r3, #2
 800666e:	e012      	b.n	8006696 <HAL_PCD_Start+0x3c>
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f003 fc81 	bl	8009f84 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4618      	mov	r0, r3
 8006688:	f004 fe34 	bl	800b2f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800669e:	b590      	push	{r4, r7, lr}
 80066a0:	b08d      	sub	sp, #52	; 0x34
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066ac:	6a3b      	ldr	r3, [r7, #32]
 80066ae:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f004 fef2 	bl	800b49e <USB_GetMode>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f040 84b7 	bne.w	8007030 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4618      	mov	r0, r3
 80066c8:	f004 fe56 	bl	800b378 <USB_ReadInterrupts>
 80066cc:	4603      	mov	r3, r0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f000 84ad 	beq.w	800702e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	0a1b      	lsrs	r3, r3, #8
 80066de:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f004 fe43 	bl	800b378 <USB_ReadInterrupts>
 80066f2:	4603      	mov	r3, r0
 80066f4:	f003 0302 	and.w	r3, r3, #2
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d107      	bne.n	800670c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	695a      	ldr	r2, [r3, #20]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f002 0202 	and.w	r2, r2, #2
 800670a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4618      	mov	r0, r3
 8006712:	f004 fe31 	bl	800b378 <USB_ReadInterrupts>
 8006716:	4603      	mov	r3, r0
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b10      	cmp	r3, #16
 800671e:	d161      	bne.n	80067e4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699a      	ldr	r2, [r3, #24]
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f022 0210 	bic.w	r2, r2, #16
 800672e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006730:	6a3b      	ldr	r3, [r7, #32]
 8006732:	6a1b      	ldr	r3, [r3, #32]
 8006734:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006736:	69bb      	ldr	r3, [r7, #24]
 8006738:	f003 020f 	and.w	r2, r3, #15
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	4413      	add	r3, r2
 800674c:	3304      	adds	r3, #4
 800674e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006750:	69bb      	ldr	r3, [r7, #24]
 8006752:	0c5b      	lsrs	r3, r3, #17
 8006754:	f003 030f 	and.w	r3, r3, #15
 8006758:	2b02      	cmp	r3, #2
 800675a:	d124      	bne.n	80067a6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800675c:	69ba      	ldr	r2, [r7, #24]
 800675e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006762:	4013      	ands	r3, r2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d035      	beq.n	80067d4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	091b      	lsrs	r3, r3, #4
 8006770:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006772:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006776:	b29b      	uxth	r3, r3
 8006778:	461a      	mov	r2, r3
 800677a:	6a38      	ldr	r0, [r7, #32]
 800677c:	f004 fc68 	bl	800b050 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	691a      	ldr	r2, [r3, #16]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	091b      	lsrs	r3, r3, #4
 8006788:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800678c:	441a      	add	r2, r3
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	6a1a      	ldr	r2, [r3, #32]
 8006796:	69bb      	ldr	r3, [r7, #24]
 8006798:	091b      	lsrs	r3, r3, #4
 800679a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679e:	441a      	add	r2, r3
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	621a      	str	r2, [r3, #32]
 80067a4:	e016      	b.n	80067d4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	0c5b      	lsrs	r3, r3, #17
 80067aa:	f003 030f 	and.w	r3, r3, #15
 80067ae:	2b06      	cmp	r3, #6
 80067b0:	d110      	bne.n	80067d4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80067b8:	2208      	movs	r2, #8
 80067ba:	4619      	mov	r1, r3
 80067bc:	6a38      	ldr	r0, [r7, #32]
 80067be:	f004 fc47 	bl	800b050 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	6a1a      	ldr	r2, [r3, #32]
 80067c6:	69bb      	ldr	r3, [r7, #24]
 80067c8:	091b      	lsrs	r3, r3, #4
 80067ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ce:	441a      	add	r2, r3
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	699a      	ldr	r2, [r3, #24]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0210 	orr.w	r2, r2, #16
 80067e2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f004 fdc5 	bl	800b378 <USB_ReadInterrupts>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80067f4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80067f8:	f040 80a7 	bne.w	800694a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80067fc:	2300      	movs	r3, #0
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4618      	mov	r0, r3
 8006806:	f004 fdca 	bl	800b39e <USB_ReadDevAllOutEpInterrupt>
 800680a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800680c:	e099      	b.n	8006942 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800680e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 808e 	beq.w	8006936 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006820:	b2d2      	uxtb	r2, r2
 8006822:	4611      	mov	r1, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f004 fdee 	bl	800b406 <USB_ReadDevOutEPInterrupt>
 800682a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	f003 0301 	and.w	r3, r3, #1
 8006832:	2b00      	cmp	r3, #0
 8006834:	d00c      	beq.n	8006850 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006838:	015a      	lsls	r2, r3, #5
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	4413      	add	r3, r2
 800683e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006842:	461a      	mov	r2, r3
 8006844:	2301      	movs	r3, #1
 8006846:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006848:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 fef0 	bl	8007630 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	f003 0308 	and.w	r3, r3, #8
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00c      	beq.n	8006874 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006866:	461a      	mov	r2, r3
 8006868:	2308      	movs	r3, #8
 800686a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800686c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 ffc6 	bl	8007800 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	d008      	beq.n	8006890 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800687e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688a:	461a      	mov	r2, r3
 800688c:	2310      	movs	r3, #16
 800688e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d030      	beq.n	80068fc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a2:	2b80      	cmp	r3, #128	; 0x80
 80068a4:	d109      	bne.n	80068ba <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80068a6:	69fb      	ldr	r3, [r7, #28]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80068b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80068b8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80068ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	4413      	add	r3, r2
 80068cc:	3304      	adds	r3, #4
 80068ce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	78db      	ldrb	r3, [r3, #3]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d108      	bne.n	80068ea <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	4619      	mov	r1, r3
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	f007 f9bd 	bl	800dc64 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	015a      	lsls	r2, r3, #5
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	4413      	add	r3, r2
 80068f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f6:	461a      	mov	r2, r3
 80068f8:	2302      	movs	r3, #2
 80068fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 0320 	and.w	r3, r3, #32
 8006902:	2b00      	cmp	r3, #0
 8006904:	d008      	beq.n	8006918 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	2320      	movs	r3, #32
 8006916:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800691e:	2b00      	cmp	r3, #0
 8006920:	d009      	beq.n	8006936 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800692e:	461a      	mov	r2, r3
 8006930:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006934:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	3301      	adds	r3, #1
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800693c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693e:	085b      	lsrs	r3, r3, #1
 8006940:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006944:	2b00      	cmp	r3, #0
 8006946:	f47f af62 	bne.w	800680e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4618      	mov	r0, r3
 8006950:	f004 fd12 	bl	800b378 <USB_ReadInterrupts>
 8006954:	4603      	mov	r3, r0
 8006956:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800695a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800695e:	f040 80db 	bne.w	8006b18 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f004 fd33 	bl	800b3d2 <USB_ReadDevAllInEpInterrupt>
 800696c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006972:	e0cd      	b.n	8006b10 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	f000 80c2 	beq.w	8006b04 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006986:	b2d2      	uxtb	r2, r2
 8006988:	4611      	mov	r1, r2
 800698a:	4618      	mov	r0, r3
 800698c:	f004 fd59 	bl	800b442 <USB_ReadDevInEPInterrupt>
 8006990:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f003 0301 	and.w	r3, r3, #1
 8006998:	2b00      	cmp	r3, #0
 800699a:	d057      	beq.n	8006a4c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699e:	f003 030f 	and.w	r3, r3, #15
 80069a2:	2201      	movs	r2, #1
 80069a4:	fa02 f303 	lsl.w	r3, r2, r3
 80069a8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	69f9      	ldr	r1, [r7, #28]
 80069b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80069bc:	4013      	ands	r3, r2
 80069be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c2:	015a      	lsls	r2, r3, #5
 80069c4:	69fb      	ldr	r3, [r7, #28]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069cc:	461a      	mov	r2, r3
 80069ce:	2301      	movs	r3, #1
 80069d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	691b      	ldr	r3, [r3, #16]
 80069d6:	2b01      	cmp	r3, #1
 80069d8:	d132      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80069da:	6879      	ldr	r1, [r7, #4]
 80069dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069de:	4613      	mov	r3, r2
 80069e0:	00db      	lsls	r3, r3, #3
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	440b      	add	r3, r1
 80069e8:	334c      	adds	r3, #76	; 0x4c
 80069ea:	6819      	ldr	r1, [r3, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069f0:	4613      	mov	r3, r2
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	4413      	add	r3, r2
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4403      	add	r3, r0
 80069fa:	3348      	adds	r3, #72	; 0x48
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4419      	add	r1, r3
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a04:	4613      	mov	r3, r2
 8006a06:	00db      	lsls	r3, r3, #3
 8006a08:	4413      	add	r3, r2
 8006a0a:	009b      	lsls	r3, r3, #2
 8006a0c:	4403      	add	r3, r0
 8006a0e:	334c      	adds	r3, #76	; 0x4c
 8006a10:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d113      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x3a2>
 8006a18:	6879      	ldr	r1, [r7, #4]
 8006a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	3354      	adds	r3, #84	; 0x54
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d108      	bne.n	8006a40 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6818      	ldr	r0, [r3, #0]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006a38:	461a      	mov	r2, r3
 8006a3a:	2101      	movs	r1, #1
 8006a3c:	f004 fd62 	bl	800b504 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f007 f887 	bl	800db5a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	f003 0308 	and.w	r3, r3, #8
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d008      	beq.n	8006a68 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a62:	461a      	mov	r2, r3
 8006a64:	2308      	movs	r3, #8
 8006a66:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	f003 0310 	and.w	r3, r3, #16
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d008      	beq.n	8006a84 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7e:	461a      	mov	r2, r3
 8006a80:	2310      	movs	r3, #16
 8006a82:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2340      	movs	r3, #64	; 0x40
 8006a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d023      	beq.n	8006af2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006aac:	6a38      	ldr	r0, [r7, #32]
 8006aae:	f003 fc35 	bl	800a31c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	00db      	lsls	r3, r3, #3
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	3338      	adds	r3, #56	; 0x38
 8006abe:	687a      	ldr	r2, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	78db      	ldrb	r3, [r3, #3]
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d108      	bne.n	8006ae0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	b2db      	uxtb	r3, r3
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f007 f8d4 	bl	800dc88 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aec:	461a      	mov	r2, r3
 8006aee:	2302      	movs	r3, #2
 8006af0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d003      	beq.n	8006b04 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006afc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 fd08 	bl	8007514 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	3301      	adds	r3, #1
 8006b08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0c:	085b      	lsrs	r3, r3, #1
 8006b0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	f47f af2e 	bne.w	8006974 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f004 fc2b 	bl	800b378 <USB_ReadInterrupts>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b2c:	d122      	bne.n	8006b74 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	69fa      	ldr	r2, [r7, #28]
 8006b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b3c:	f023 0301 	bic.w	r3, r3, #1
 8006b40:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d108      	bne.n	8006b5e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b54:	2100      	movs	r1, #0
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f007 fa54 	bl	800e004 <HAL_PCDEx_LPM_Callback>
 8006b5c:	e002      	b.n	8006b64 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f007 f872 	bl	800dc48 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	695a      	ldr	r2, [r3, #20]
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006b72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f004 fbfd 	bl	800b378 <USB_ReadInterrupts>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b88:	d112      	bne.n	8006bb0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d102      	bne.n	8006ba0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f007 f82e 	bl	800dbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	695a      	ldr	r2, [r3, #20]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006bae:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f004 fbdf 	bl	800b378 <USB_ReadInterrupts>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc4:	d121      	bne.n	8006c0a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	695a      	ldr	r2, [r3, #20]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006bd4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d111      	bne.n	8006c04 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bee:	089b      	lsrs	r3, r3, #2
 8006bf0:	f003 020f 	and.w	r2, r3, #15
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f007 fa01 	bl	800e004 <HAL_PCDEx_LPM_Callback>
 8006c02:	e002      	b.n	8006c0a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f006 fff9 	bl	800dbfc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f004 fbb2 	bl	800b378 <USB_ReadInterrupts>
 8006c14:	4603      	mov	r3, r0
 8006c16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1e:	f040 80b7 	bne.w	8006d90 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	69fa      	ldr	r2, [r7, #28]
 8006c2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c30:	f023 0301 	bic.w	r3, r3, #1
 8006c34:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f003 fb6d 	bl	800a31c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c42:	2300      	movs	r3, #0
 8006c44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c46:	e046      	b.n	8006cd6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c5a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	69fb      	ldr	r3, [r7, #28]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c7a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c7e:	015a      	lsls	r2, r3, #5
 8006c80:	69fb      	ldr	r3, [r7, #28]
 8006c82:	4413      	add	r3, r2
 8006c84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c88:	461a      	mov	r2, r3
 8006c8a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c8e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ca0:	0151      	lsls	r1, r2, #5
 8006ca2:	69fa      	ldr	r2, [r7, #28]
 8006ca4:	440a      	add	r2, r1
 8006ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	015a      	lsls	r2, r3, #5
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cc0:	0151      	lsls	r1, r2, #5
 8006cc2:	69fa      	ldr	r2, [r7, #28]
 8006cc4:	440a      	add	r2, r1
 8006cc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006cce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd2:	3301      	adds	r3, #1
 8006cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3b3      	bcc.n	8006c48 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	69db      	ldr	r3, [r3, #28]
 8006ce8:	69fa      	ldr	r2, [r7, #28]
 8006cea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006cf2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d016      	beq.n	8006d2a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d06:	69fa      	ldr	r2, [r7, #28]
 8006d08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d0c:	f043 030b 	orr.w	r3, r3, #11
 8006d10:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d1c:	69fa      	ldr	r2, [r7, #28]
 8006d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d22:	f043 030b 	orr.w	r3, r3, #11
 8006d26:	6453      	str	r3, [r2, #68]	; 0x44
 8006d28:	e015      	b.n	8006d56 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	695a      	ldr	r2, [r3, #20]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d38:	4619      	mov	r1, r3
 8006d3a:	f242 032b 	movw	r3, #8235	; 0x202b
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	69fa      	ldr	r2, [r7, #28]
 8006d4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d50:	f043 030b 	orr.w	r3, r3, #11
 8006d54:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69fa      	ldr	r2, [r7, #28]
 8006d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d64:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006d68:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6818      	ldr	r0, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	f004 fbc2 	bl	800b504 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	695a      	ldr	r2, [r3, #20]
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006d8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4618      	mov	r0, r3
 8006d96:	f004 faef 	bl	800b378 <USB_ReadInterrupts>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da4:	d124      	bne.n	8006df0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f004 fb86 	bl	800b4bc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4618      	mov	r0, r3
 8006db6:	f003 fb2e 	bl	800a416 <USB_GetDevSpeed>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	461a      	mov	r2, r3
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681c      	ldr	r4, [r3, #0]
 8006dc6:	f001 fac1 	bl	800834c <HAL_RCC_GetHCLKFreq>
 8006dca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	4620      	mov	r0, r4
 8006dd6:	f003 f833 	bl	8009e40 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006dda:	6878      	ldr	r0, [r7, #4]
 8006ddc:	f006 fee5 	bl	800dbaa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695a      	ldr	r2, [r3, #20]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006dee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f004 fabf 	bl	800b378 <USB_ReadInterrupts>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	f003 0308 	and.w	r3, r3, #8
 8006e00:	2b08      	cmp	r3, #8
 8006e02:	d10a      	bne.n	8006e1a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f006 fec2 	bl	800db8e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	695a      	ldr	r2, [r3, #20]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f002 0208 	and.w	r2, r2, #8
 8006e18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f004 faaa 	bl	800b378 <USB_ReadInterrupts>
 8006e24:	4603      	mov	r3, r0
 8006e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e2a:	2b80      	cmp	r3, #128	; 0x80
 8006e2c:	d122      	bne.n	8006e74 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e2e:	6a3b      	ldr	r3, [r7, #32]
 8006e30:	699b      	ldr	r3, [r3, #24]
 8006e32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e36:	6a3b      	ldr	r3, [r7, #32]
 8006e38:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3e:	e014      	b.n	8006e6a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e44:	4613      	mov	r3, r2
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	4413      	add	r3, r2
 8006e4a:	009b      	lsls	r3, r3, #2
 8006e4c:	440b      	add	r3, r1
 8006e4e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	2b01      	cmp	r3, #1
 8006e56:	d105      	bne.n	8006e64 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 fb27 	bl	80074b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e66:	3301      	adds	r3, #1
 8006e68:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d3e5      	bcc.n	8006e40 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f004 fa7d 	bl	800b378 <USB_ReadInterrupts>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e88:	d13b      	bne.n	8006f02 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e8e:	e02b      	b.n	8006ee8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ea0:	6879      	ldr	r1, [r7, #4]
 8006ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3340      	adds	r3, #64	; 0x40
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d115      	bne.n	8006ee2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006eb6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	da12      	bge.n	8006ee2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	333f      	adds	r3, #63	; 0x3f
 8006ecc:	2201      	movs	r2, #1
 8006ece:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006ed8:	b2db      	uxtb	r3, r3
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f000 fae8 	bl	80074b2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d3ce      	bcc.n	8006e90 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	695a      	ldr	r2, [r3, #20]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006f00:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f004 fa36 	bl	800b378 <USB_ReadInterrupts>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f16:	d155      	bne.n	8006fc4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f18:	2301      	movs	r3, #1
 8006f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006f1c:	e045      	b.n	8006faa <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f32:	4613      	mov	r3, r2
 8006f34:	00db      	lsls	r3, r3, #3
 8006f36:	4413      	add	r3, r2
 8006f38:	009b      	lsls	r3, r3, #2
 8006f3a:	440b      	add	r3, r1
 8006f3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b01      	cmp	r3, #1
 8006f44:	d12e      	bne.n	8006fa4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f46:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da2b      	bge.n	8006fa4 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006f58:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d121      	bne.n	8006fa4 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f64:	4613      	mov	r3, r2
 8006f66:	00db      	lsls	r3, r3, #3
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	440b      	add	r3, r1
 8006f6e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006f72:	2201      	movs	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006f76:	6a3b      	ldr	r3, [r7, #32]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006f7e:	6a3b      	ldr	r3, [r7, #32]
 8006f80:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006f82:	6a3b      	ldr	r3, [r7, #32]
 8006f84:	695b      	ldr	r3, [r3, #20]
 8006f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d10a      	bne.n	8006fa4 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006f8e:	69fb      	ldr	r3, [r7, #28]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	69fa      	ldr	r2, [r7, #28]
 8006f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fa0:	6053      	str	r3, [r2, #4]
            break;
 8006fa2:	e007      	b.n	8006fb4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	3301      	adds	r3, #1
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d3b4      	bcc.n	8006f1e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	695a      	ldr	r2, [r3, #20]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006fc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f004 f9d5 	bl	800b378 <USB_ReadInterrupts>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006fd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006fd8:	d10a      	bne.n	8006ff0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f006 fe66 	bl	800dcac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	695a      	ldr	r2, [r3, #20]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f004 f9bf 	bl	800b378 <USB_ReadInterrupts>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	f003 0304 	and.w	r3, r3, #4
 8007000:	2b04      	cmp	r3, #4
 8007002:	d115      	bne.n	8007030 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	f003 0304 	and.w	r3, r3, #4
 8007012:	2b00      	cmp	r3, #0
 8007014:	d002      	beq.n	800701c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f006 fe56 	bl	800dcc8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	6859      	ldr	r1, [r3, #4]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	430a      	orrs	r2, r1
 800702a:	605a      	str	r2, [r3, #4]
 800702c:	e000      	b.n	8007030 <HAL_PCD_IRQHandler+0x992>
      return;
 800702e:	bf00      	nop
    }
  }
}
 8007030:	3734      	adds	r7, #52	; 0x34
 8007032:	46bd      	mov	sp, r7
 8007034:	bd90      	pop	{r4, r7, pc}

08007036 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b082      	sub	sp, #8
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	460b      	mov	r3, r1
 8007040:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007048:	2b01      	cmp	r3, #1
 800704a:	d101      	bne.n	8007050 <HAL_PCD_SetAddress+0x1a>
 800704c:	2302      	movs	r3, #2
 800704e:	e013      	b.n	8007078 <HAL_PCD_SetAddress+0x42>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2201      	movs	r2, #1
 8007054:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	78fa      	ldrb	r2, [r7, #3]
 800705c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	78fa      	ldrb	r2, [r7, #3]
 8007066:	4611      	mov	r1, r2
 8007068:	4618      	mov	r0, r3
 800706a:	f004 f91d 	bl	800b2a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	4608      	mov	r0, r1
 800708a:	4611      	mov	r1, r2
 800708c:	461a      	mov	r2, r3
 800708e:	4603      	mov	r3, r0
 8007090:	70fb      	strb	r3, [r7, #3]
 8007092:	460b      	mov	r3, r1
 8007094:	803b      	strh	r3, [r7, #0]
 8007096:	4613      	mov	r3, r2
 8007098:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800709e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	da0f      	bge.n	80070c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 020f 	and.w	r2, r3, #15
 80070ac:	4613      	mov	r3, r2
 80070ae:	00db      	lsls	r3, r3, #3
 80070b0:	4413      	add	r3, r2
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	3338      	adds	r3, #56	; 0x38
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	4413      	add	r3, r2
 80070ba:	3304      	adds	r3, #4
 80070bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2201      	movs	r2, #1
 80070c2:	705a      	strb	r2, [r3, #1]
 80070c4:	e00f      	b.n	80070e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f003 020f 	and.w	r2, r3, #15
 80070cc:	4613      	mov	r3, r2
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	4413      	add	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4413      	add	r3, r2
 80070dc:	3304      	adds	r3, #4
 80070de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	b2da      	uxtb	r2, r3
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80070f2:	883a      	ldrh	r2, [r7, #0]
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	78ba      	ldrb	r2, [r7, #2]
 80070fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	785b      	ldrb	r3, [r3, #1]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d004      	beq.n	8007110 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	b29a      	uxth	r2, r3
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007110:	78bb      	ldrb	r3, [r7, #2]
 8007112:	2b02      	cmp	r3, #2
 8007114:	d102      	bne.n	800711c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	2200      	movs	r2, #0
 800711a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007122:	2b01      	cmp	r3, #1
 8007124:	d101      	bne.n	800712a <HAL_PCD_EP_Open+0xaa>
 8007126:	2302      	movs	r3, #2
 8007128:	e00e      	b.n	8007148 <HAL_PCD_EP_Open+0xc8>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68f9      	ldr	r1, [r7, #12]
 8007138:	4618      	mov	r0, r3
 800713a:	f003 f991 	bl	800a460 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007146:	7afb      	ldrb	r3, [r7, #11]
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b084      	sub	sp, #16
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	460b      	mov	r3, r1
 800715a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800715c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007160:	2b00      	cmp	r3, #0
 8007162:	da0f      	bge.n	8007184 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	f003 020f 	and.w	r2, r3, #15
 800716a:	4613      	mov	r3, r2
 800716c:	00db      	lsls	r3, r3, #3
 800716e:	4413      	add	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	3338      	adds	r3, #56	; 0x38
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	4413      	add	r3, r2
 8007178:	3304      	adds	r3, #4
 800717a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2201      	movs	r2, #1
 8007180:	705a      	strb	r2, [r3, #1]
 8007182:	e00f      	b.n	80071a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	f003 020f 	and.w	r2, r3, #15
 800718a:	4613      	mov	r3, r2
 800718c:	00db      	lsls	r3, r3, #3
 800718e:	4413      	add	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	4413      	add	r3, r2
 800719a:	3304      	adds	r3, #4
 800719c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2200      	movs	r2, #0
 80071a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	f003 030f 	and.w	r3, r3, #15
 80071aa:	b2da      	uxtb	r2, r3
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d101      	bne.n	80071be <HAL_PCD_EP_Close+0x6e>
 80071ba:	2302      	movs	r3, #2
 80071bc:	e00e      	b.n	80071dc <HAL_PCD_EP_Close+0x8c>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	68f9      	ldr	r1, [r7, #12]
 80071cc:	4618      	mov	r0, r3
 80071ce:	f003 f9cf 	bl	800a570 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80071da:	2300      	movs	r3, #0
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	60f8      	str	r0, [r7, #12]
 80071ec:	607a      	str	r2, [r7, #4]
 80071ee:	603b      	str	r3, [r7, #0]
 80071f0:	460b      	mov	r3, r1
 80071f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	f003 020f 	and.w	r2, r3, #15
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	4413      	add	r3, r2
 800720a:	3304      	adds	r3, #4
 800720c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	683a      	ldr	r2, [r7, #0]
 8007218:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8007220:	697b      	ldr	r3, [r7, #20]
 8007222:	2200      	movs	r2, #0
 8007224:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007226:	7afb      	ldrb	r3, [r7, #11]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	b2da      	uxtb	r2, r3
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d102      	bne.n	8007240 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800723a:	687a      	ldr	r2, [r7, #4]
 800723c:	697b      	ldr	r3, [r7, #20]
 800723e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007240:	7afb      	ldrb	r3, [r7, #11]
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	2b00      	cmp	r3, #0
 8007248:	d109      	bne.n	800725e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	6818      	ldr	r0, [r3, #0]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	b2db      	uxtb	r3, r3
 8007254:	461a      	mov	r2, r3
 8007256:	6979      	ldr	r1, [r7, #20]
 8007258:	f003 fcb6 	bl	800abc8 <USB_EP0StartXfer>
 800725c:	e008      	b.n	8007270 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	691b      	ldr	r3, [r3, #16]
 8007266:	b2db      	uxtb	r3, r3
 8007268:	461a      	mov	r2, r3
 800726a:	6979      	ldr	r1, [r7, #20]
 800726c:	f003 fa5c 	bl	800a728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3718      	adds	r7, #24
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800727a:	b480      	push	{r7}
 800727c:	b083      	sub	sp, #12
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	460b      	mov	r3, r1
 8007284:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	f003 020f 	and.w	r2, r3, #15
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	00db      	lsls	r3, r3, #3
 8007292:	4413      	add	r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800729c:	681b      	ldr	r3, [r3, #0]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b086      	sub	sp, #24
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	607a      	str	r2, [r7, #4]
 80072b4:	603b      	str	r3, [r7, #0]
 80072b6:	460b      	mov	r3, r1
 80072b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072ba:	7afb      	ldrb	r3, [r7, #11]
 80072bc:	f003 020f 	and.w	r2, r3, #15
 80072c0:	4613      	mov	r3, r2
 80072c2:	00db      	lsls	r3, r3, #3
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	3338      	adds	r3, #56	; 0x38
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	3304      	adds	r3, #4
 80072d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	687a      	ldr	r2, [r7, #4]
 80072d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	683a      	ldr	r2, [r7, #0]
 80072dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2200      	movs	r2, #0
 80072e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2201      	movs	r2, #1
 80072e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072ea:	7afb      	ldrb	r3, [r7, #11]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	691b      	ldr	r3, [r3, #16]
 80072fa:	2b01      	cmp	r3, #1
 80072fc:	d102      	bne.n	8007304 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	6818      	ldr	r0, [r3, #0]
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	691b      	ldr	r3, [r3, #16]
 8007316:	b2db      	uxtb	r3, r3
 8007318:	461a      	mov	r2, r3
 800731a:	6979      	ldr	r1, [r7, #20]
 800731c:	f003 fc54 	bl	800abc8 <USB_EP0StartXfer>
 8007320:	e008      	b.n	8007334 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	6818      	ldr	r0, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691b      	ldr	r3, [r3, #16]
 800732a:	b2db      	uxtb	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	6979      	ldr	r1, [r7, #20]
 8007330:	f003 f9fa 	bl	800a728 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b084      	sub	sp, #16
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	460b      	mov	r3, r1
 8007348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800734a:	78fb      	ldrb	r3, [r7, #3]
 800734c:	f003 020f 	and.w	r2, r3, #15
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	429a      	cmp	r2, r3
 8007356:	d901      	bls.n	800735c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	e050      	b.n	80073fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800735c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007360:	2b00      	cmp	r3, #0
 8007362:	da0f      	bge.n	8007384 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	f003 020f 	and.w	r2, r3, #15
 800736a:	4613      	mov	r3, r2
 800736c:	00db      	lsls	r3, r3, #3
 800736e:	4413      	add	r3, r2
 8007370:	009b      	lsls	r3, r3, #2
 8007372:	3338      	adds	r3, #56	; 0x38
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	3304      	adds	r3, #4
 800737a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2201      	movs	r2, #1
 8007380:	705a      	strb	r2, [r3, #1]
 8007382:	e00d      	b.n	80073a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007384:	78fa      	ldrb	r2, [r7, #3]
 8007386:	4613      	mov	r3, r2
 8007388:	00db      	lsls	r3, r3, #3
 800738a:	4413      	add	r3, r2
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007392:	687a      	ldr	r2, [r7, #4]
 8007394:	4413      	add	r3, r2
 8007396:	3304      	adds	r3, #4
 8007398:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2200      	movs	r2, #0
 800739e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2201      	movs	r2, #1
 80073a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073a6:	78fb      	ldrb	r3, [r7, #3]
 80073a8:	f003 030f 	and.w	r3, r3, #15
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d101      	bne.n	80073c0 <HAL_PCD_EP_SetStall+0x82>
 80073bc:	2302      	movs	r3, #2
 80073be:	e01e      	b.n	80073fe <HAL_PCD_EP_SetStall+0xc0>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68f9      	ldr	r1, [r7, #12]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f003 fe96 	bl	800b100 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073d4:	78fb      	ldrb	r3, [r7, #3]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10a      	bne.n	80073f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	691b      	ldr	r3, [r3, #16]
 80073e6:	b2d9      	uxtb	r1, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80073ee:	461a      	mov	r2, r3
 80073f0:	f004 f888 	bl	800b504 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80073fc:	2300      	movs	r3, #0
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	bd80      	pop	{r7, pc}

08007406 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007406:	b580      	push	{r7, lr}
 8007408:	b084      	sub	sp, #16
 800740a:	af00      	add	r7, sp, #0
 800740c:	6078      	str	r0, [r7, #4]
 800740e:	460b      	mov	r3, r1
 8007410:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007412:	78fb      	ldrb	r3, [r7, #3]
 8007414:	f003 020f 	and.w	r2, r3, #15
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	429a      	cmp	r2, r3
 800741e:	d901      	bls.n	8007424 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e042      	b.n	80074aa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007424:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007428:	2b00      	cmp	r3, #0
 800742a:	da0f      	bge.n	800744c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800742c:	78fb      	ldrb	r3, [r7, #3]
 800742e:	f003 020f 	and.w	r2, r3, #15
 8007432:	4613      	mov	r3, r2
 8007434:	00db      	lsls	r3, r3, #3
 8007436:	4413      	add	r3, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	3338      	adds	r3, #56	; 0x38
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	4413      	add	r3, r2
 8007440:	3304      	adds	r3, #4
 8007442:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2201      	movs	r2, #1
 8007448:	705a      	strb	r2, [r3, #1]
 800744a:	e00f      	b.n	800746c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800744c:	78fb      	ldrb	r3, [r7, #3]
 800744e:	f003 020f 	and.w	r2, r3, #15
 8007452:	4613      	mov	r3, r2
 8007454:	00db      	lsls	r3, r3, #3
 8007456:	4413      	add	r3, r2
 8007458:	009b      	lsls	r3, r3, #2
 800745a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	4413      	add	r3, r2
 8007462:	3304      	adds	r3, #4
 8007464:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2200      	movs	r2, #0
 8007470:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	b2da      	uxtb	r2, r3
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007484:	2b01      	cmp	r3, #1
 8007486:	d101      	bne.n	800748c <HAL_PCD_EP_ClrStall+0x86>
 8007488:	2302      	movs	r3, #2
 800748a:	e00e      	b.n	80074aa <HAL_PCD_EP_ClrStall+0xa4>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	68f9      	ldr	r1, [r7, #12]
 800749a:	4618      	mov	r0, r3
 800749c:	f003 fe9e 	bl	800b1dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3710      	adds	r7, #16
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	460b      	mov	r3, r1
 80074bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80074be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	da0c      	bge.n	80074e0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074c6:	78fb      	ldrb	r3, [r7, #3]
 80074c8:	f003 020f 	and.w	r2, r3, #15
 80074cc:	4613      	mov	r3, r2
 80074ce:	00db      	lsls	r3, r3, #3
 80074d0:	4413      	add	r3, r2
 80074d2:	009b      	lsls	r3, r3, #2
 80074d4:	3338      	adds	r3, #56	; 0x38
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	4413      	add	r3, r2
 80074da:	3304      	adds	r3, #4
 80074dc:	60fb      	str	r3, [r7, #12]
 80074de:	e00c      	b.n	80074fa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	f003 020f 	and.w	r2, r3, #15
 80074e6:	4613      	mov	r3, r2
 80074e8:	00db      	lsls	r3, r3, #3
 80074ea:	4413      	add	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80074f2:	687a      	ldr	r2, [r7, #4]
 80074f4:	4413      	add	r3, r2
 80074f6:	3304      	adds	r3, #4
 80074f8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	4618      	mov	r0, r3
 8007502:	f003 fcbd 	bl	800ae80 <USB_EPStopXfer>
 8007506:	4603      	mov	r3, r0
 8007508:	72fb      	strb	r3, [r7, #11]

  return ret;
 800750a:	7afb      	ldrb	r3, [r7, #11]
}
 800750c:	4618      	mov	r0, r3
 800750e:	3710      	adds	r7, #16
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b08a      	sub	sp, #40	; 0x28
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007528:	683a      	ldr	r2, [r7, #0]
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	3338      	adds	r3, #56	; 0x38
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	4413      	add	r3, r2
 8007538:	3304      	adds	r3, #4
 800753a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6a1a      	ldr	r2, [r3, #32]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	699b      	ldr	r3, [r3, #24]
 8007544:	429a      	cmp	r2, r3
 8007546:	d901      	bls.n	800754c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e06c      	b.n	8007626 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	699a      	ldr	r2, [r3, #24]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6a1b      	ldr	r3, [r3, #32]
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68db      	ldr	r3, [r3, #12]
 800755c:	69fa      	ldr	r2, [r7, #28]
 800755e:	429a      	cmp	r2, r3
 8007560:	d902      	bls.n	8007568 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	68db      	ldr	r3, [r3, #12]
 8007566:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	3303      	adds	r3, #3
 800756c:	089b      	lsrs	r3, r3, #2
 800756e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007570:	e02b      	b.n	80075ca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	699a      	ldr	r2, [r3, #24]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	1ad3      	subs	r3, r2, r3
 800757c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	69fa      	ldr	r2, [r7, #28]
 8007584:	429a      	cmp	r2, r3
 8007586:	d902      	bls.n	800758e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	3303      	adds	r3, #3
 8007592:	089b      	lsrs	r3, r3, #2
 8007594:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6919      	ldr	r1, [r3, #16]
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	b2da      	uxtb	r2, r3
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	9300      	str	r3, [sp, #0]
 80075aa:	4603      	mov	r3, r0
 80075ac:	6978      	ldr	r0, [r7, #20]
 80075ae:	f003 fd11 	bl	800afd4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	691a      	ldr	r2, [r3, #16]
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	441a      	add	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1a      	ldr	r2, [r3, #32]
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	441a      	add	r2, r3
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	015a      	lsls	r2, r3, #5
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	4413      	add	r3, r2
 80075d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	429a      	cmp	r2, r3
 80075de:	d809      	bhi.n	80075f4 <PCD_WriteEmptyTxFifo+0xe0>
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1a      	ldr	r2, [r3, #32]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d203      	bcs.n	80075f4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1be      	bne.n	8007572 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	6a1b      	ldr	r3, [r3, #32]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d811      	bhi.n	8007624 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	f003 030f 	and.w	r3, r3, #15
 8007606:	2201      	movs	r2, #1
 8007608:	fa02 f303 	lsl.w	r3, r2, r3
 800760c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007616:	68bb      	ldr	r3, [r7, #8]
 8007618:	43db      	mvns	r3, r3
 800761a:	6939      	ldr	r1, [r7, #16]
 800761c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007620:	4013      	ands	r3, r2
 8007622:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007624:	2300      	movs	r3, #0
}
 8007626:	4618      	mov	r0, r3
 8007628:	3720      	adds	r7, #32
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}
	...

08007630 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b088      	sub	sp, #32
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	333c      	adds	r3, #60	; 0x3c
 8007648:	3304      	adds	r3, #4
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	69bb      	ldr	r3, [r7, #24]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	691b      	ldr	r3, [r3, #16]
 8007662:	2b01      	cmp	r3, #1
 8007664:	d17b      	bne.n	800775e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	f003 0308 	and.w	r3, r3, #8
 800766c:	2b00      	cmp	r3, #0
 800766e:	d015      	beq.n	800769c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	4a61      	ldr	r2, [pc, #388]	; (80077f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007674:	4293      	cmp	r3, r2
 8007676:	f240 80b9 	bls.w	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007680:	2b00      	cmp	r3, #0
 8007682:	f000 80b3 	beq.w	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007692:	461a      	mov	r2, r3
 8007694:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007698:	6093      	str	r3, [r2, #8]
 800769a:	e0a7      	b.n	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	f003 0320 	and.w	r3, r3, #32
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d009      	beq.n	80076ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	015a      	lsls	r2, r3, #5
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	4413      	add	r3, r2
 80076ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b2:	461a      	mov	r2, r3
 80076b4:	2320      	movs	r3, #32
 80076b6:	6093      	str	r3, [r2, #8]
 80076b8:	e098      	b.n	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f040 8093 	bne.w	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4a4b      	ldr	r2, [pc, #300]	; (80077f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d90f      	bls.n	80076ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00a      	beq.n	80076ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69bb      	ldr	r3, [r7, #24]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e4:	461a      	mov	r2, r3
 80076e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ea:	6093      	str	r3, [r2, #8]
 80076ec:	e07e      	b.n	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	4613      	mov	r3, r2
 80076f2:	00db      	lsls	r3, r3, #3
 80076f4:	4413      	add	r3, r2
 80076f6:	009b      	lsls	r3, r3, #2
 80076f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80076fc:	687a      	ldr	r2, [r7, #4]
 80076fe:	4413      	add	r3, r2
 8007700:	3304      	adds	r3, #4
 8007702:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	69da      	ldr	r2, [r3, #28]
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	0159      	lsls	r1, r3, #5
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	440b      	add	r3, r1
 8007710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8007720:	683b      	ldr	r3, [r7, #0]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d114      	bne.n	8007750 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	699b      	ldr	r3, [r3, #24]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d109      	bne.n	8007742 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6818      	ldr	r0, [r3, #0]
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007738:	461a      	mov	r2, r3
 800773a:	2101      	movs	r1, #1
 800773c:	f003 fee2 	bl	800b504 <USB_EP0_OutStart>
 8007740:	e006      	b.n	8007750 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	691a      	ldr	r2, [r3, #16]
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6a1b      	ldr	r3, [r3, #32]
 800774a:	441a      	add	r2, r3
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	b2db      	uxtb	r3, r3
 8007754:	4619      	mov	r1, r3
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f006 f9e4 	bl	800db24 <HAL_PCD_DataOutStageCallback>
 800775c:	e046      	b.n	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	4a26      	ldr	r2, [pc, #152]	; (80077fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d124      	bne.n	80077b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00a      	beq.n	8007786 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	015a      	lsls	r2, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	4413      	add	r3, r2
 8007778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800777c:	461a      	mov	r2, r3
 800777e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007782:	6093      	str	r3, [r2, #8]
 8007784:	e032      	b.n	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	f003 0320 	and.w	r3, r3, #32
 800778c:	2b00      	cmp	r3, #0
 800778e:	d008      	beq.n	80077a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	015a      	lsls	r2, r3, #5
 8007794:	69bb      	ldr	r3, [r7, #24]
 8007796:	4413      	add	r3, r2
 8007798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800779c:	461a      	mov	r2, r3
 800779e:	2320      	movs	r3, #32
 80077a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	4619      	mov	r1, r3
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f006 f9bb 	bl	800db24 <HAL_PCD_DataOutStageCallback>
 80077ae:	e01d      	b.n	80077ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d114      	bne.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	683a      	ldr	r2, [r7, #0]
 80077ba:	4613      	mov	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	440b      	add	r3, r1
 80077c4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d108      	bne.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6818      	ldr	r0, [r3, #0]
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077d8:	461a      	mov	r2, r3
 80077da:	2100      	movs	r1, #0
 80077dc:	f003 fe92 	bl	800b504 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	4619      	mov	r1, r3
 80077e6:	6878      	ldr	r0, [r7, #4]
 80077e8:	f006 f99c 	bl	800db24 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3720      	adds	r7, #32
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	4f54300a 	.word	0x4f54300a
 80077fc:	4f54310a 	.word	0x4f54310a

08007800 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	333c      	adds	r3, #60	; 0x3c
 8007818:	3304      	adds	r3, #4
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	015a      	lsls	r2, r3, #5
 8007822:	693b      	ldr	r3, [r7, #16]
 8007824:	4413      	add	r3, r2
 8007826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800782a:	689b      	ldr	r3, [r3, #8]
 800782c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4a15      	ldr	r2, [pc, #84]	; (8007888 <PCD_EP_OutSetupPacket_int+0x88>)
 8007832:	4293      	cmp	r3, r2
 8007834:	d90e      	bls.n	8007854 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007836:	68bb      	ldr	r3, [r7, #8]
 8007838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800783c:	2b00      	cmp	r3, #0
 800783e:	d009      	beq.n	8007854 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	461a      	mov	r2, r3
 800784e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007852:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f006 f953 	bl	800db00 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	4a0a      	ldr	r2, [pc, #40]	; (8007888 <PCD_EP_OutSetupPacket_int+0x88>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d90c      	bls.n	800787c <PCD_EP_OutSetupPacket_int+0x7c>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b01      	cmp	r3, #1
 8007868:	d108      	bne.n	800787c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6818      	ldr	r0, [r3, #0]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007874:	461a      	mov	r2, r3
 8007876:	2101      	movs	r1, #1
 8007878:	f003 fe44 	bl	800b504 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	4f54300a 	.word	0x4f54300a

0800788c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800788c:	b480      	push	{r7}
 800788e:	b085      	sub	sp, #20
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
 8007894:	460b      	mov	r3, r1
 8007896:	70fb      	strb	r3, [r7, #3]
 8007898:	4613      	mov	r3, r2
 800789a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80078a4:	78fb      	ldrb	r3, [r7, #3]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d107      	bne.n	80078ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80078aa:	883b      	ldrh	r3, [r7, #0]
 80078ac:	0419      	lsls	r1, r3, #16
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	629a      	str	r2, [r3, #40]	; 0x28
 80078b8:	e028      	b.n	800790c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078c0:	0c1b      	lsrs	r3, r3, #16
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4413      	add	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078c8:	2300      	movs	r3, #0
 80078ca:	73fb      	strb	r3, [r7, #15]
 80078cc:	e00d      	b.n	80078ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	7bfb      	ldrb	r3, [r7, #15]
 80078d4:	3340      	adds	r3, #64	; 0x40
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	4413      	add	r3, r2
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	0c1b      	lsrs	r3, r3, #16
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078e4:	7bfb      	ldrb	r3, [r7, #15]
 80078e6:	3301      	adds	r3, #1
 80078e8:	73fb      	strb	r3, [r7, #15]
 80078ea:	7bfa      	ldrb	r2, [r7, #15]
 80078ec:	78fb      	ldrb	r3, [r7, #3]
 80078ee:	3b01      	subs	r3, #1
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d3ec      	bcc.n	80078ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078f4:	883b      	ldrh	r3, [r7, #0]
 80078f6:	0418      	lsls	r0, r3, #16
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6819      	ldr	r1, [r3, #0]
 80078fc:	78fb      	ldrb	r3, [r7, #3]
 80078fe:	3b01      	subs	r3, #1
 8007900:	68ba      	ldr	r2, [r7, #8]
 8007902:	4302      	orrs	r2, r0
 8007904:	3340      	adds	r3, #64	; 0x40
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	440b      	add	r3, r1
 800790a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3714      	adds	r7, #20
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	460b      	mov	r3, r1
 8007924:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	887a      	ldrh	r2, [r7, #2]
 800792c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800792e:	2300      	movs	r3, #0
}
 8007930:	4618      	mov	r0, r3
 8007932:	370c      	adds	r7, #12
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2201      	movs	r2, #1
 800794e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	699b      	ldr	r3, [r3, #24]
 800795e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <HAL_PCDEx_ActivateLPM+0x44>)
 800796c:	4313      	orrs	r3, r2
 800796e:	68fa      	ldr	r2, [r7, #12]
 8007970:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007972:	2300      	movs	r3, #0
}
 8007974:	4618      	mov	r0, r3
 8007976:	3714      	adds	r7, #20
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr
 8007980:	10000003 	.word	0x10000003

08007984 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800798a:	2300      	movs	r3, #0
 800798c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800798e:	4b23      	ldr	r3, [pc, #140]	; (8007a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8007990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007992:	4a22      	ldr	r2, [pc, #136]	; (8007a1c <HAL_PWREx_EnableOverDrive+0x98>)
 8007994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007998:	6413      	str	r3, [r2, #64]	; 0x40
 800799a:	4b20      	ldr	r3, [pc, #128]	; (8007a1c <HAL_PWREx_EnableOverDrive+0x98>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079a2:	603b      	str	r3, [r7, #0]
 80079a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a1d      	ldr	r2, [pc, #116]	; (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079b2:	f7fc fd67 	bl	8004484 <HAL_GetTick>
 80079b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079b8:	e009      	b.n	80079ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079ba:	f7fc fd63 	bl	8004484 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079c8:	d901      	bls.n	80079ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e022      	b.n	8007a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079ce:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079da:	d1ee      	bne.n	80079ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079dc:	4b10      	ldr	r3, [pc, #64]	; (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0f      	ldr	r2, [pc, #60]	; (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 80079e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079e8:	f7fc fd4c 	bl	8004484 <HAL_GetTick>
 80079ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079ee:	e009      	b.n	8007a04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079f0:	f7fc fd48 	bl	8004484 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079fe:	d901      	bls.n	8007a04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a00:	2303      	movs	r3, #3
 8007a02:	e007      	b.n	8007a14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a04:	4b06      	ldr	r3, [pc, #24]	; (8007a20 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a06:	685b      	ldr	r3, [r3, #4]
 8007a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a10:	d1ee      	bne.n	80079f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a12:	2300      	movs	r3, #0
}
 8007a14:	4618      	mov	r0, r3
 8007a16:	3708      	adds	r7, #8
 8007a18:	46bd      	mov	sp, r7
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	40023800 	.word	0x40023800
 8007a20:	40007000 	.word	0x40007000

08007a24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b086      	sub	sp, #24
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e291      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0301 	and.w	r3, r3, #1
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 8087 	beq.w	8007b56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a48:	4b96      	ldr	r3, [pc, #600]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a4a:	689b      	ldr	r3, [r3, #8]
 8007a4c:	f003 030c 	and.w	r3, r3, #12
 8007a50:	2b04      	cmp	r3, #4
 8007a52:	d00c      	beq.n	8007a6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a54:	4b93      	ldr	r3, [pc, #588]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 030c 	and.w	r3, r3, #12
 8007a5c:	2b08      	cmp	r3, #8
 8007a5e:	d112      	bne.n	8007a86 <HAL_RCC_OscConfig+0x62>
 8007a60:	4b90      	ldr	r3, [pc, #576]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a6c:	d10b      	bne.n	8007a86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a6e:	4b8d      	ldr	r3, [pc, #564]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d06c      	beq.n	8007b54 <HAL_RCC_OscConfig+0x130>
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d168      	bne.n	8007b54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e26b      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a8e:	d106      	bne.n	8007a9e <HAL_RCC_OscConfig+0x7a>
 8007a90:	4b84      	ldr	r3, [pc, #528]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	4a83      	ldr	r2, [pc, #524]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007a96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a9a:	6013      	str	r3, [r2, #0]
 8007a9c:	e02e      	b.n	8007afc <HAL_RCC_OscConfig+0xd8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d10c      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x9c>
 8007aa6:	4b7f      	ldr	r3, [pc, #508]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	4a7e      	ldr	r2, [pc, #504]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007aac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ab0:	6013      	str	r3, [r2, #0]
 8007ab2:	4b7c      	ldr	r3, [pc, #496]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a7b      	ldr	r2, [pc, #492]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	e01d      	b.n	8007afc <HAL_RCC_OscConfig+0xd8>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	685b      	ldr	r3, [r3, #4]
 8007ac4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ac8:	d10c      	bne.n	8007ae4 <HAL_RCC_OscConfig+0xc0>
 8007aca:	4b76      	ldr	r3, [pc, #472]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a75      	ldr	r2, [pc, #468]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ad0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ad4:	6013      	str	r3, [r2, #0]
 8007ad6:	4b73      	ldr	r3, [pc, #460]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a72      	ldr	r2, [pc, #456]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	e00b      	b.n	8007afc <HAL_RCC_OscConfig+0xd8>
 8007ae4:	4b6f      	ldr	r3, [pc, #444]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a6e      	ldr	r2, [pc, #440]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007aea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aee:	6013      	str	r3, [r2, #0]
 8007af0:	4b6c      	ldr	r3, [pc, #432]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a6b      	ldr	r2, [pc, #428]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007af6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007afa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d013      	beq.n	8007b2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b04:	f7fc fcbe 	bl	8004484 <HAL_GetTick>
 8007b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b0a:	e008      	b.n	8007b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b0c:	f7fc fcba 	bl	8004484 <HAL_GetTick>
 8007b10:	4602      	mov	r2, r0
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	2b64      	cmp	r3, #100	; 0x64
 8007b18:	d901      	bls.n	8007b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b1a:	2303      	movs	r3, #3
 8007b1c:	e21f      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b1e:	4b61      	ldr	r3, [pc, #388]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d0f0      	beq.n	8007b0c <HAL_RCC_OscConfig+0xe8>
 8007b2a:	e014      	b.n	8007b56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b2c:	f7fc fcaa 	bl	8004484 <HAL_GetTick>
 8007b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b32:	e008      	b.n	8007b46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b34:	f7fc fca6 	bl	8004484 <HAL_GetTick>
 8007b38:	4602      	mov	r2, r0
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	1ad3      	subs	r3, r2, r3
 8007b3e:	2b64      	cmp	r3, #100	; 0x64
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e20b      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b46:	4b57      	ldr	r3, [pc, #348]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1f0      	bne.n	8007b34 <HAL_RCC_OscConfig+0x110>
 8007b52:	e000      	b.n	8007b56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f003 0302 	and.w	r3, r3, #2
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d069      	beq.n	8007c36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b62:	4b50      	ldr	r3, [pc, #320]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 030c 	and.w	r3, r3, #12
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b6e:	4b4d      	ldr	r3, [pc, #308]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d11c      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x190>
 8007b7a:	4b4a      	ldr	r3, [pc, #296]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d116      	bne.n	8007bb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b86:	4b47      	ldr	r3, [pc, #284]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f003 0302 	and.w	r3, r3, #2
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d005      	beq.n	8007b9e <HAL_RCC_OscConfig+0x17a>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d001      	beq.n	8007b9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e1df      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b9e:	4b41      	ldr	r3, [pc, #260]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	493d      	ldr	r1, [pc, #244]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bb2:	e040      	b.n	8007c36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d023      	beq.n	8007c04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bbc:	4b39      	ldr	r3, [pc, #228]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4a38      	ldr	r2, [pc, #224]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bc2:	f043 0301 	orr.w	r3, r3, #1
 8007bc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc8:	f7fc fc5c 	bl	8004484 <HAL_GetTick>
 8007bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bce:	e008      	b.n	8007be2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bd0:	f7fc fc58 	bl	8004484 <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	693b      	ldr	r3, [r7, #16]
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	2b02      	cmp	r3, #2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e1bd      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007be2:	4b30      	ldr	r3, [pc, #192]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0f0      	beq.n	8007bd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bee:	4b2d      	ldr	r3, [pc, #180]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	691b      	ldr	r3, [r3, #16]
 8007bfa:	00db      	lsls	r3, r3, #3
 8007bfc:	4929      	ldr	r1, [pc, #164]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	600b      	str	r3, [r1, #0]
 8007c02:	e018      	b.n	8007c36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c04:	4b27      	ldr	r3, [pc, #156]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a26      	ldr	r2, [pc, #152]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c0a:	f023 0301 	bic.w	r3, r3, #1
 8007c0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c10:	f7fc fc38 	bl	8004484 <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c18:	f7fc fc34 	bl	8004484 <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e199      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d1f0      	bne.n	8007c18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d038      	beq.n	8007cb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	695b      	ldr	r3, [r3, #20]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d019      	beq.n	8007c7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c4a:	4b16      	ldr	r3, [pc, #88]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	4a15      	ldr	r2, [pc, #84]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c50:	f043 0301 	orr.w	r3, r3, #1
 8007c54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c56:	f7fc fc15 	bl	8004484 <HAL_GetTick>
 8007c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c5c:	e008      	b.n	8007c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c5e:	f7fc fc11 	bl	8004484 <HAL_GetTick>
 8007c62:	4602      	mov	r2, r0
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	2b02      	cmp	r3, #2
 8007c6a:	d901      	bls.n	8007c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c6c:	2303      	movs	r3, #3
 8007c6e:	e176      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c70:	4b0c      	ldr	r3, [pc, #48]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c74:	f003 0302 	and.w	r3, r3, #2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d0f0      	beq.n	8007c5e <HAL_RCC_OscConfig+0x23a>
 8007c7c:	e01a      	b.n	8007cb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c7e:	4b09      	ldr	r3, [pc, #36]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c82:	4a08      	ldr	r2, [pc, #32]	; (8007ca4 <HAL_RCC_OscConfig+0x280>)
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c8a:	f7fc fbfb 	bl	8004484 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c90:	e00a      	b.n	8007ca8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c92:	f7fc fbf7 	bl	8004484 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d903      	bls.n	8007ca8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e15c      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
 8007ca4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007ca8:	4b91      	ldr	r3, [pc, #580]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cac:	f003 0302 	and.w	r3, r3, #2
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1ee      	bne.n	8007c92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f003 0304 	and.w	r3, r3, #4
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80a4 	beq.w	8007e0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cc2:	4b8b      	ldr	r3, [pc, #556]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d10d      	bne.n	8007cea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cce:	4b88      	ldr	r3, [pc, #544]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	4a87      	ldr	r2, [pc, #540]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8007cda:	4b85      	ldr	r3, [pc, #532]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ce2:	60bb      	str	r3, [r7, #8]
 8007ce4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cea:	4b82      	ldr	r3, [pc, #520]	; (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d118      	bne.n	8007d28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007cf6:	4b7f      	ldr	r3, [pc, #508]	; (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4a7e      	ldr	r2, [pc, #504]	; (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d02:	f7fc fbbf 	bl	8004484 <HAL_GetTick>
 8007d06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d08:	e008      	b.n	8007d1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d0a:	f7fc fbbb 	bl	8004484 <HAL_GetTick>
 8007d0e:	4602      	mov	r2, r0
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	2b64      	cmp	r3, #100	; 0x64
 8007d16:	d901      	bls.n	8007d1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	e120      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d1c:	4b75      	ldr	r3, [pc, #468]	; (8007ef4 <HAL_RCC_OscConfig+0x4d0>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d0f0      	beq.n	8007d0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d106      	bne.n	8007d3e <HAL_RCC_OscConfig+0x31a>
 8007d30:	4b6f      	ldr	r3, [pc, #444]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	4a6e      	ldr	r2, [pc, #440]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d36:	f043 0301 	orr.w	r3, r3, #1
 8007d3a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d3c:	e02d      	b.n	8007d9a <HAL_RCC_OscConfig+0x376>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689b      	ldr	r3, [r3, #8]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d10c      	bne.n	8007d60 <HAL_RCC_OscConfig+0x33c>
 8007d46:	4b6a      	ldr	r3, [pc, #424]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d4a:	4a69      	ldr	r2, [pc, #420]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d4c:	f023 0301 	bic.w	r3, r3, #1
 8007d50:	6713      	str	r3, [r2, #112]	; 0x70
 8007d52:	4b67      	ldr	r3, [pc, #412]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	4a66      	ldr	r2, [pc, #408]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	f023 0304 	bic.w	r3, r3, #4
 8007d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5e:	e01c      	b.n	8007d9a <HAL_RCC_OscConfig+0x376>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	2b05      	cmp	r3, #5
 8007d66:	d10c      	bne.n	8007d82 <HAL_RCC_OscConfig+0x35e>
 8007d68:	4b61      	ldr	r3, [pc, #388]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6c:	4a60      	ldr	r2, [pc, #384]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d6e:	f043 0304 	orr.w	r3, r3, #4
 8007d72:	6713      	str	r3, [r2, #112]	; 0x70
 8007d74:	4b5e      	ldr	r3, [pc, #376]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d78:	4a5d      	ldr	r2, [pc, #372]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d80:	e00b      	b.n	8007d9a <HAL_RCC_OscConfig+0x376>
 8007d82:	4b5b      	ldr	r3, [pc, #364]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d86:	4a5a      	ldr	r2, [pc, #360]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d88:	f023 0301 	bic.w	r3, r3, #1
 8007d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8e:	4b58      	ldr	r3, [pc, #352]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	4a57      	ldr	r2, [pc, #348]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007d94:	f023 0304 	bic.w	r3, r3, #4
 8007d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d015      	beq.n	8007dce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da2:	f7fc fb6f 	bl	8004484 <HAL_GetTick>
 8007da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007da8:	e00a      	b.n	8007dc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007daa:	f7fc fb6b 	bl	8004484 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d901      	bls.n	8007dc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007dbc:	2303      	movs	r3, #3
 8007dbe:	e0ce      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc0:	4b4b      	ldr	r3, [pc, #300]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc4:	f003 0302 	and.w	r3, r3, #2
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d0ee      	beq.n	8007daa <HAL_RCC_OscConfig+0x386>
 8007dcc:	e014      	b.n	8007df8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dce:	f7fc fb59 	bl	8004484 <HAL_GetTick>
 8007dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dd4:	e00a      	b.n	8007dec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd6:	f7fc fb55 	bl	8004484 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007de4:	4293      	cmp	r3, r2
 8007de6:	d901      	bls.n	8007dec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007de8:	2303      	movs	r3, #3
 8007dea:	e0b8      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007dec:	4b40      	ldr	r3, [pc, #256]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	f003 0302 	and.w	r3, r3, #2
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1ee      	bne.n	8007dd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	2b01      	cmp	r3, #1
 8007dfc:	d105      	bne.n	8007e0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dfe:	4b3c      	ldr	r3, [pc, #240]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e02:	4a3b      	ldr	r2, [pc, #236]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	699b      	ldr	r3, [r3, #24]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80a4 	beq.w	8007f5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e14:	4b36      	ldr	r3, [pc, #216]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f003 030c 	and.w	r3, r3, #12
 8007e1c:	2b08      	cmp	r3, #8
 8007e1e:	d06b      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	699b      	ldr	r3, [r3, #24]
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d149      	bne.n	8007ebc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e28:	4b31      	ldr	r3, [pc, #196]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a30      	ldr	r2, [pc, #192]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fc fb26 	bl	8004484 <HAL_GetTick>
 8007e38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3a:	e008      	b.n	8007e4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e3c:	f7fc fb22 	bl	8004484 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	693b      	ldr	r3, [r7, #16]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	2b02      	cmp	r3, #2
 8007e48:	d901      	bls.n	8007e4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	e087      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e4e:	4b28      	ldr	r3, [pc, #160]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d1f0      	bne.n	8007e3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	69da      	ldr	r2, [r3, #28]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6a1b      	ldr	r3, [r3, #32]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	019b      	lsls	r3, r3, #6
 8007e6a:	431a      	orrs	r2, r3
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e70:	085b      	lsrs	r3, r3, #1
 8007e72:	3b01      	subs	r3, #1
 8007e74:	041b      	lsls	r3, r3, #16
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e7c:	061b      	lsls	r3, r3, #24
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e88:	4b19      	ldr	r3, [pc, #100]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	4a18      	ldr	r2, [pc, #96]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e94:	f7fc faf6 	bl	8004484 <HAL_GetTick>
 8007e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e9a:	e008      	b.n	8007eae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e9c:	f7fc faf2 	bl	8004484 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	693b      	ldr	r3, [r7, #16]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	d901      	bls.n	8007eae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007eaa:	2303      	movs	r3, #3
 8007eac:	e057      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eae:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d0f0      	beq.n	8007e9c <HAL_RCC_OscConfig+0x478>
 8007eba:	e04f      	b.n	8007f5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ebc:	4b0c      	ldr	r3, [pc, #48]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a0b      	ldr	r2, [pc, #44]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ec8:	f7fc fadc 	bl	8004484 <HAL_GetTick>
 8007ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ece:	e008      	b.n	8007ee2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ed0:	f7fc fad8 	bl	8004484 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d901      	bls.n	8007ee2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e03d      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ee2:	4b03      	ldr	r3, [pc, #12]	; (8007ef0 <HAL_RCC_OscConfig+0x4cc>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1f0      	bne.n	8007ed0 <HAL_RCC_OscConfig+0x4ac>
 8007eee:	e035      	b.n	8007f5c <HAL_RCC_OscConfig+0x538>
 8007ef0:	40023800 	.word	0x40023800
 8007ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007ef8:	4b1b      	ldr	r3, [pc, #108]	; (8007f68 <HAL_RCC_OscConfig+0x544>)
 8007efa:	685b      	ldr	r3, [r3, #4]
 8007efc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d028      	beq.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d121      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d11a      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f22:	68fa      	ldr	r2, [r7, #12]
 8007f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f28:	4013      	ands	r3, r2
 8007f2a:	687a      	ldr	r2, [r7, #4]
 8007f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d111      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	085b      	lsrs	r3, r3, #1
 8007f40:	3b01      	subs	r3, #1
 8007f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d107      	bne.n	8007f58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d001      	beq.n	8007f5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e000      	b.n	8007f5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3718      	adds	r7, #24
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40023800 	.word	0x40023800

08007f6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f76:	2300      	movs	r3, #0
 8007f78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d101      	bne.n	8007f84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	e0d0      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f84:	4b6a      	ldr	r3, [pc, #424]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 030f 	and.w	r3, r3, #15
 8007f8c:	683a      	ldr	r2, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d910      	bls.n	8007fb4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f92:	4b67      	ldr	r3, [pc, #412]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f023 020f 	bic.w	r2, r3, #15
 8007f9a:	4965      	ldr	r1, [pc, #404]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa2:	4b63      	ldr	r3, [pc, #396]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f003 030f 	and.w	r3, r3, #15
 8007faa:	683a      	ldr	r2, [r7, #0]
 8007fac:	429a      	cmp	r2, r3
 8007fae:	d001      	beq.n	8007fb4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	e0b8      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f003 0302 	and.w	r3, r3, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d020      	beq.n	8008002 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0304 	and.w	r3, r3, #4
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d005      	beq.n	8007fd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fcc:	4b59      	ldr	r3, [pc, #356]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fce:	689b      	ldr	r3, [r3, #8]
 8007fd0:	4a58      	ldr	r2, [pc, #352]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 0308 	and.w	r3, r3, #8
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d005      	beq.n	8007ff0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007fe4:	4b53      	ldr	r3, [pc, #332]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4a52      	ldr	r2, [pc, #328]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007fee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ff0:	4b50      	ldr	r3, [pc, #320]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	494d      	ldr	r1, [pc, #308]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffe:	4313      	orrs	r3, r2
 8008000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0301 	and.w	r3, r3, #1
 800800a:	2b00      	cmp	r3, #0
 800800c:	d040      	beq.n	8008090 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	685b      	ldr	r3, [r3, #4]
 8008012:	2b01      	cmp	r3, #1
 8008014:	d107      	bne.n	8008026 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008016:	4b47      	ldr	r3, [pc, #284]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d115      	bne.n	800804e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008022:	2301      	movs	r3, #1
 8008024:	e07f      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	2b02      	cmp	r3, #2
 800802c:	d107      	bne.n	800803e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800802e:	4b41      	ldr	r3, [pc, #260]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e073      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800803e:	4b3d      	ldr	r3, [pc, #244]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0302 	and.w	r3, r3, #2
 8008046:	2b00      	cmp	r3, #0
 8008048:	d101      	bne.n	800804e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800804a:	2301      	movs	r3, #1
 800804c:	e06b      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800804e:	4b39      	ldr	r3, [pc, #228]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f023 0203 	bic.w	r2, r3, #3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	4936      	ldr	r1, [pc, #216]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 800805c:	4313      	orrs	r3, r2
 800805e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008060:	f7fc fa10 	bl	8004484 <HAL_GetTick>
 8008064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008066:	e00a      	b.n	800807e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008068:	f7fc fa0c 	bl	8004484 <HAL_GetTick>
 800806c:	4602      	mov	r2, r0
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	f241 3288 	movw	r2, #5000	; 0x1388
 8008076:	4293      	cmp	r3, r2
 8008078:	d901      	bls.n	800807e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e053      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800807e:	4b2d      	ldr	r3, [pc, #180]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f003 020c 	and.w	r2, r3, #12
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	009b      	lsls	r3, r3, #2
 800808c:	429a      	cmp	r2, r3
 800808e:	d1eb      	bne.n	8008068 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008090:	4b27      	ldr	r3, [pc, #156]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f003 030f 	and.w	r3, r3, #15
 8008098:	683a      	ldr	r2, [r7, #0]
 800809a:	429a      	cmp	r2, r3
 800809c:	d210      	bcs.n	80080c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800809e:	4b24      	ldr	r3, [pc, #144]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f023 020f 	bic.w	r2, r3, #15
 80080a6:	4922      	ldr	r1, [pc, #136]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	4313      	orrs	r3, r2
 80080ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ae:	4b20      	ldr	r3, [pc, #128]	; (8008130 <HAL_RCC_ClockConfig+0x1c4>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 030f 	and.w	r3, r3, #15
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d001      	beq.n	80080c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080bc:	2301      	movs	r3, #1
 80080be:	e032      	b.n	8008126 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d008      	beq.n	80080de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080cc:	4b19      	ldr	r3, [pc, #100]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	68db      	ldr	r3, [r3, #12]
 80080d8:	4916      	ldr	r1, [pc, #88]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0308 	and.w	r3, r3, #8
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080ea:	4b12      	ldr	r3, [pc, #72]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	691b      	ldr	r3, [r3, #16]
 80080f6:	00db      	lsls	r3, r3, #3
 80080f8:	490e      	ldr	r1, [pc, #56]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80080fe:	f000 f821 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 8008102:	4602      	mov	r2, r0
 8008104:	4b0b      	ldr	r3, [pc, #44]	; (8008134 <HAL_RCC_ClockConfig+0x1c8>)
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	091b      	lsrs	r3, r3, #4
 800810a:	f003 030f 	and.w	r3, r3, #15
 800810e:	490a      	ldr	r1, [pc, #40]	; (8008138 <HAL_RCC_ClockConfig+0x1cc>)
 8008110:	5ccb      	ldrb	r3, [r1, r3]
 8008112:	fa22 f303 	lsr.w	r3, r2, r3
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <HAL_RCC_ClockConfig+0x1d0>)
 8008118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800811a:	4b09      	ldr	r3, [pc, #36]	; (8008140 <HAL_RCC_ClockConfig+0x1d4>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4618      	mov	r0, r3
 8008120:	f7fc f96c 	bl	80043fc <HAL_InitTick>

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop
 8008130:	40023c00 	.word	0x40023c00
 8008134:	40023800 	.word	0x40023800
 8008138:	0800ec6c 	.word	0x0800ec6c
 800813c:	2000008c 	.word	0x2000008c
 8008140:	20000090 	.word	0x20000090

08008144 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008148:	b094      	sub	sp, #80	; 0x50
 800814a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800814c:	2300      	movs	r3, #0
 800814e:	647b      	str	r3, [r7, #68]	; 0x44
 8008150:	2300      	movs	r3, #0
 8008152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008154:	2300      	movs	r3, #0
 8008156:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8008158:	2300      	movs	r3, #0
 800815a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800815c:	4b79      	ldr	r3, [pc, #484]	; (8008344 <HAL_RCC_GetSysClockFreq+0x200>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 030c 	and.w	r3, r3, #12
 8008164:	2b08      	cmp	r3, #8
 8008166:	d00d      	beq.n	8008184 <HAL_RCC_GetSysClockFreq+0x40>
 8008168:	2b08      	cmp	r3, #8
 800816a:	f200 80e1 	bhi.w	8008330 <HAL_RCC_GetSysClockFreq+0x1ec>
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <HAL_RCC_GetSysClockFreq+0x34>
 8008172:	2b04      	cmp	r3, #4
 8008174:	d003      	beq.n	800817e <HAL_RCC_GetSysClockFreq+0x3a>
 8008176:	e0db      	b.n	8008330 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008178:	4b73      	ldr	r3, [pc, #460]	; (8008348 <HAL_RCC_GetSysClockFreq+0x204>)
 800817a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800817c:	e0db      	b.n	8008336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800817e:	4b72      	ldr	r3, [pc, #456]	; (8008348 <HAL_RCC_GetSysClockFreq+0x204>)
 8008180:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008182:	e0d8      	b.n	8008336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008184:	4b6f      	ldr	r3, [pc, #444]	; (8008344 <HAL_RCC_GetSysClockFreq+0x200>)
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800818c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800818e:	4b6d      	ldr	r3, [pc, #436]	; (8008344 <HAL_RCC_GetSysClockFreq+0x200>)
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008196:	2b00      	cmp	r3, #0
 8008198:	d063      	beq.n	8008262 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819a:	4b6a      	ldr	r3, [pc, #424]	; (8008344 <HAL_RCC_GetSysClockFreq+0x200>)
 800819c:	685b      	ldr	r3, [r3, #4]
 800819e:	099b      	lsrs	r3, r3, #6
 80081a0:	2200      	movs	r2, #0
 80081a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80081a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ac:	633b      	str	r3, [r7, #48]	; 0x30
 80081ae:	2300      	movs	r3, #0
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80081b6:	4622      	mov	r2, r4
 80081b8:	462b      	mov	r3, r5
 80081ba:	f04f 0000 	mov.w	r0, #0
 80081be:	f04f 0100 	mov.w	r1, #0
 80081c2:	0159      	lsls	r1, r3, #5
 80081c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081c8:	0150      	lsls	r0, r2, #5
 80081ca:	4602      	mov	r2, r0
 80081cc:	460b      	mov	r3, r1
 80081ce:	4621      	mov	r1, r4
 80081d0:	1a51      	subs	r1, r2, r1
 80081d2:	6139      	str	r1, [r7, #16]
 80081d4:	4629      	mov	r1, r5
 80081d6:	eb63 0301 	sbc.w	r3, r3, r1
 80081da:	617b      	str	r3, [r7, #20]
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80081e8:	4659      	mov	r1, fp
 80081ea:	018b      	lsls	r3, r1, #6
 80081ec:	4651      	mov	r1, sl
 80081ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80081f2:	4651      	mov	r1, sl
 80081f4:	018a      	lsls	r2, r1, #6
 80081f6:	4651      	mov	r1, sl
 80081f8:	ebb2 0801 	subs.w	r8, r2, r1
 80081fc:	4659      	mov	r1, fp
 80081fe:	eb63 0901 	sbc.w	r9, r3, r1
 8008202:	f04f 0200 	mov.w	r2, #0
 8008206:	f04f 0300 	mov.w	r3, #0
 800820a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800820e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008212:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008216:	4690      	mov	r8, r2
 8008218:	4699      	mov	r9, r3
 800821a:	4623      	mov	r3, r4
 800821c:	eb18 0303 	adds.w	r3, r8, r3
 8008220:	60bb      	str	r3, [r7, #8]
 8008222:	462b      	mov	r3, r5
 8008224:	eb49 0303 	adc.w	r3, r9, r3
 8008228:	60fb      	str	r3, [r7, #12]
 800822a:	f04f 0200 	mov.w	r2, #0
 800822e:	f04f 0300 	mov.w	r3, #0
 8008232:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008236:	4629      	mov	r1, r5
 8008238:	028b      	lsls	r3, r1, #10
 800823a:	4621      	mov	r1, r4
 800823c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008240:	4621      	mov	r1, r4
 8008242:	028a      	lsls	r2, r1, #10
 8008244:	4610      	mov	r0, r2
 8008246:	4619      	mov	r1, r3
 8008248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800824a:	2200      	movs	r2, #0
 800824c:	62bb      	str	r3, [r7, #40]	; 0x28
 800824e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008250:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008254:	f7f8 fc52 	bl	8000afc <__aeabi_uldivmod>
 8008258:	4602      	mov	r2, r0
 800825a:	460b      	mov	r3, r1
 800825c:	4613      	mov	r3, r2
 800825e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008260:	e058      	b.n	8008314 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008262:	4b38      	ldr	r3, [pc, #224]	; (8008344 <HAL_RCC_GetSysClockFreq+0x200>)
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	099b      	lsrs	r3, r3, #6
 8008268:	2200      	movs	r2, #0
 800826a:	4618      	mov	r0, r3
 800826c:	4611      	mov	r1, r2
 800826e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008272:	623b      	str	r3, [r7, #32]
 8008274:	2300      	movs	r3, #0
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
 8008278:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800827c:	4642      	mov	r2, r8
 800827e:	464b      	mov	r3, r9
 8008280:	f04f 0000 	mov.w	r0, #0
 8008284:	f04f 0100 	mov.w	r1, #0
 8008288:	0159      	lsls	r1, r3, #5
 800828a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800828e:	0150      	lsls	r0, r2, #5
 8008290:	4602      	mov	r2, r0
 8008292:	460b      	mov	r3, r1
 8008294:	4641      	mov	r1, r8
 8008296:	ebb2 0a01 	subs.w	sl, r2, r1
 800829a:	4649      	mov	r1, r9
 800829c:	eb63 0b01 	sbc.w	fp, r3, r1
 80082a0:	f04f 0200 	mov.w	r2, #0
 80082a4:	f04f 0300 	mov.w	r3, #0
 80082a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80082ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80082b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80082b4:	ebb2 040a 	subs.w	r4, r2, sl
 80082b8:	eb63 050b 	sbc.w	r5, r3, fp
 80082bc:	f04f 0200 	mov.w	r2, #0
 80082c0:	f04f 0300 	mov.w	r3, #0
 80082c4:	00eb      	lsls	r3, r5, #3
 80082c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082ca:	00e2      	lsls	r2, r4, #3
 80082cc:	4614      	mov	r4, r2
 80082ce:	461d      	mov	r5, r3
 80082d0:	4643      	mov	r3, r8
 80082d2:	18e3      	adds	r3, r4, r3
 80082d4:	603b      	str	r3, [r7, #0]
 80082d6:	464b      	mov	r3, r9
 80082d8:	eb45 0303 	adc.w	r3, r5, r3
 80082dc:	607b      	str	r3, [r7, #4]
 80082de:	f04f 0200 	mov.w	r2, #0
 80082e2:	f04f 0300 	mov.w	r3, #0
 80082e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80082ea:	4629      	mov	r1, r5
 80082ec:	028b      	lsls	r3, r1, #10
 80082ee:	4621      	mov	r1, r4
 80082f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80082f4:	4621      	mov	r1, r4
 80082f6:	028a      	lsls	r2, r1, #10
 80082f8:	4610      	mov	r0, r2
 80082fa:	4619      	mov	r1, r3
 80082fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082fe:	2200      	movs	r2, #0
 8008300:	61bb      	str	r3, [r7, #24]
 8008302:	61fa      	str	r2, [r7, #28]
 8008304:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008308:	f7f8 fbf8 	bl	8000afc <__aeabi_uldivmod>
 800830c:	4602      	mov	r2, r0
 800830e:	460b      	mov	r3, r1
 8008310:	4613      	mov	r3, r2
 8008312:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008314:	4b0b      	ldr	r3, [pc, #44]	; (8008344 <HAL_RCC_GetSysClockFreq+0x200>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	0c1b      	lsrs	r3, r3, #16
 800831a:	f003 0303 	and.w	r3, r3, #3
 800831e:	3301      	adds	r3, #1
 8008320:	005b      	lsls	r3, r3, #1
 8008322:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008324:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008326:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008328:	fbb2 f3f3 	udiv	r3, r2, r3
 800832c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800832e:	e002      	b.n	8008336 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008330:	4b05      	ldr	r3, [pc, #20]	; (8008348 <HAL_RCC_GetSysClockFreq+0x204>)
 8008332:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008338:	4618      	mov	r0, r3
 800833a:	3750      	adds	r7, #80	; 0x50
 800833c:	46bd      	mov	sp, r7
 800833e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008342:	bf00      	nop
 8008344:	40023800 	.word	0x40023800
 8008348:	00f42400 	.word	0x00f42400

0800834c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800834c:	b480      	push	{r7}
 800834e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008350:	4b03      	ldr	r3, [pc, #12]	; (8008360 <HAL_RCC_GetHCLKFreq+0x14>)
 8008352:	681b      	ldr	r3, [r3, #0]
}
 8008354:	4618      	mov	r0, r3
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	2000008c 	.word	0x2000008c

08008364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008368:	f7ff fff0 	bl	800834c <HAL_RCC_GetHCLKFreq>
 800836c:	4602      	mov	r2, r0
 800836e:	4b05      	ldr	r3, [pc, #20]	; (8008384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	0a9b      	lsrs	r3, r3, #10
 8008374:	f003 0307 	and.w	r3, r3, #7
 8008378:	4903      	ldr	r1, [pc, #12]	; (8008388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800837a:	5ccb      	ldrb	r3, [r1, r3]
 800837c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008380:	4618      	mov	r0, r3
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40023800 	.word	0x40023800
 8008388:	0800ec7c 	.word	0x0800ec7c

0800838c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008390:	f7ff ffdc 	bl	800834c <HAL_RCC_GetHCLKFreq>
 8008394:	4602      	mov	r2, r0
 8008396:	4b05      	ldr	r3, [pc, #20]	; (80083ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	0b5b      	lsrs	r3, r3, #13
 800839c:	f003 0307 	and.w	r3, r3, #7
 80083a0:	4903      	ldr	r1, [pc, #12]	; (80083b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80083a2:	5ccb      	ldrb	r3, [r1, r3]
 80083a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	40023800 	.word	0x40023800
 80083b0:	0800ec7c 	.word	0x0800ec7c

080083b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b088      	sub	sp, #32
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80083c4:	2300      	movs	r3, #0
 80083c6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80083cc:	2300      	movs	r3, #0
 80083ce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d012      	beq.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083dc:	4b69      	ldr	r3, [pc, #420]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083de:	689b      	ldr	r3, [r3, #8]
 80083e0:	4a68      	ldr	r2, [pc, #416]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083e6:	6093      	str	r3, [r2, #8]
 80083e8:	4b66      	ldr	r3, [pc, #408]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083f0:	4964      	ldr	r1, [pc, #400]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083f2:	4313      	orrs	r3, r2
 80083f4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d101      	bne.n	8008402 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083fe:	2301      	movs	r3, #1
 8008400:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800840a:	2b00      	cmp	r3, #0
 800840c:	d017      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800840e:	4b5d      	ldr	r3, [pc, #372]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008410:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008414:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800841c:	4959      	ldr	r1, [pc, #356]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841e:	4313      	orrs	r3, r2
 8008420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800842c:	d101      	bne.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800842e:	2301      	movs	r3, #1
 8008430:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800843a:	2301      	movs	r3, #1
 800843c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008446:	2b00      	cmp	r3, #0
 8008448:	d017      	beq.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800844a:	4b4e      	ldr	r3, [pc, #312]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800844c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008450:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008458:	494a      	ldr	r1, [pc, #296]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800845a:	4313      	orrs	r3, r2
 800845c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008464:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008468:	d101      	bne.n	800846e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800846a:	2301      	movs	r3, #1
 800846c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008472:	2b00      	cmp	r3, #0
 8008474:	d101      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008476:	2301      	movs	r3, #1
 8008478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d001      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008486:	2301      	movs	r3, #1
 8008488:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0320 	and.w	r3, r3, #32
 8008492:	2b00      	cmp	r3, #0
 8008494:	f000 808b 	beq.w	80085ae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008498:	4b3a      	ldr	r3, [pc, #232]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800849c:	4a39      	ldr	r2, [pc, #228]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800849e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084a2:	6413      	str	r3, [r2, #64]	; 0x40
 80084a4:	4b37      	ldr	r3, [pc, #220]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084ac:	60bb      	str	r3, [r7, #8]
 80084ae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80084b0:	4b35      	ldr	r3, [pc, #212]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a34      	ldr	r2, [pc, #208]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084bc:	f7fb ffe2 	bl	8004484 <HAL_GetTick>
 80084c0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084c2:	e008      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80084c4:	f7fb ffde 	bl	8004484 <HAL_GetTick>
 80084c8:	4602      	mov	r2, r0
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	1ad3      	subs	r3, r2, r3
 80084ce:	2b64      	cmp	r3, #100	; 0x64
 80084d0:	d901      	bls.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80084d2:	2303      	movs	r3, #3
 80084d4:	e357      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084d6:	4b2c      	ldr	r3, [pc, #176]	; (8008588 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d0f0      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084e2:	4b28      	ldr	r3, [pc, #160]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084ea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d035      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084fa:	693a      	ldr	r2, [r7, #16]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d02e      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008500:	4b20      	ldr	r3, [pc, #128]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008504:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008508:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800850a:	4b1e      	ldr	r3, [pc, #120]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800850c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800850e:	4a1d      	ldr	r2, [pc, #116]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008510:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008514:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008516:	4b1b      	ldr	r3, [pc, #108]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800851a:	4a1a      	ldr	r2, [pc, #104]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800851c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008520:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008522:	4a18      	ldr	r2, [pc, #96]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008528:	4b16      	ldr	r3, [pc, #88]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800852a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800852c:	f003 0301 	and.w	r3, r3, #1
 8008530:	2b01      	cmp	r3, #1
 8008532:	d114      	bne.n	800855e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008534:	f7fb ffa6 	bl	8004484 <HAL_GetTick>
 8008538:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800853a:	e00a      	b.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800853c:	f7fb ffa2 	bl	8004484 <HAL_GetTick>
 8008540:	4602      	mov	r2, r0
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	1ad3      	subs	r3, r2, r3
 8008546:	f241 3288 	movw	r2, #5000	; 0x1388
 800854a:	4293      	cmp	r3, r2
 800854c:	d901      	bls.n	8008552 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800854e:	2303      	movs	r3, #3
 8008550:	e319      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008556:	f003 0302 	and.w	r3, r3, #2
 800855a:	2b00      	cmp	r3, #0
 800855c:	d0ee      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008562:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800856a:	d111      	bne.n	8008590 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800856c:	4b05      	ldr	r3, [pc, #20]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008578:	4b04      	ldr	r3, [pc, #16]	; (800858c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800857a:	400b      	ands	r3, r1
 800857c:	4901      	ldr	r1, [pc, #4]	; (8008584 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800857e:	4313      	orrs	r3, r2
 8008580:	608b      	str	r3, [r1, #8]
 8008582:	e00b      	b.n	800859c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008584:	40023800 	.word	0x40023800
 8008588:	40007000 	.word	0x40007000
 800858c:	0ffffcff 	.word	0x0ffffcff
 8008590:	4baa      	ldr	r3, [pc, #680]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	4aa9      	ldr	r2, [pc, #676]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008596:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800859a:	6093      	str	r3, [r2, #8]
 800859c:	4ba7      	ldr	r3, [pc, #668]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800859e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80085a8:	49a4      	ldr	r1, [pc, #656]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085aa:	4313      	orrs	r3, r2
 80085ac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0310 	and.w	r3, r3, #16
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d010      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80085ba:	4ba0      	ldr	r3, [pc, #640]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085c0:	4a9e      	ldr	r2, [pc, #632]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80085ca:	4b9c      	ldr	r3, [pc, #624]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085cc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085d4:	4999      	ldr	r1, [pc, #612]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085d6:	4313      	orrs	r3, r2
 80085d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d00a      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085e8:	4b94      	ldr	r3, [pc, #592]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085f6:	4991      	ldr	r1, [pc, #580]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80085f8:	4313      	orrs	r3, r2
 80085fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00a      	beq.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800860a:	4b8c      	ldr	r3, [pc, #560]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800860c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008618:	4988      	ldr	r1, [pc, #544]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800861a:	4313      	orrs	r3, r2
 800861c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800862c:	4b83      	ldr	r3, [pc, #524]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800862e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800863a:	4980      	ldr	r1, [pc, #512]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800864e:	4b7b      	ldr	r3, [pc, #492]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008654:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865c:	4977      	ldr	r1, [pc, #476]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800865e:	4313      	orrs	r3, r2
 8008660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866c:	2b00      	cmp	r3, #0
 800866e:	d00a      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008670:	4b72      	ldr	r3, [pc, #456]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008676:	f023 0203 	bic.w	r2, r3, #3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800867e:	496f      	ldr	r1, [pc, #444]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008680:	4313      	orrs	r3, r2
 8008682:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008692:	4b6a      	ldr	r3, [pc, #424]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008698:	f023 020c 	bic.w	r2, r3, #12
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086a0:	4966      	ldr	r1, [pc, #408]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d00a      	beq.n	80086ca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086b4:	4b61      	ldr	r3, [pc, #388]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086c2:	495e      	ldr	r1, [pc, #376]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00a      	beq.n	80086ec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086d6:	4b59      	ldr	r3, [pc, #356]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086dc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e4:	4955      	ldr	r1, [pc, #340]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00a      	beq.n	800870e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086f8:	4b50      	ldr	r3, [pc, #320]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008706:	494d      	ldr	r1, [pc, #308]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008708:	4313      	orrs	r3, r2
 800870a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008716:	2b00      	cmp	r3, #0
 8008718:	d00a      	beq.n	8008730 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800871a:	4b48      	ldr	r3, [pc, #288]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800871c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008728:	4944      	ldr	r1, [pc, #272]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800872a:	4313      	orrs	r3, r2
 800872c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00a      	beq.n	8008752 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800873c:	4b3f      	ldr	r3, [pc, #252]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800873e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008742:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800874a:	493c      	ldr	r1, [pc, #240]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800874c:	4313      	orrs	r3, r2
 800874e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800875e:	4b37      	ldr	r3, [pc, #220]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008764:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800876c:	4933      	ldr	r1, [pc, #204]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800876e:	4313      	orrs	r3, r2
 8008770:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800877c:	2b00      	cmp	r3, #0
 800877e:	d00a      	beq.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008780:	4b2e      	ldr	r3, [pc, #184]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008786:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800878e:	492b      	ldr	r1, [pc, #172]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008790:	4313      	orrs	r3, r2
 8008792:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d011      	beq.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b0:	4922      	ldr	r1, [pc, #136]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087b2:	4313      	orrs	r3, r2
 80087b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c0:	d101      	bne.n	80087c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80087c2:	2301      	movs	r3, #1
 80087c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f003 0308 	and.w	r3, r3, #8
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80087d2:	2301      	movs	r3, #1
 80087d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d00a      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087e2:	4b16      	ldr	r3, [pc, #88]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087f0:	4912      	ldr	r1, [pc, #72]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80087f2:	4313      	orrs	r3, r2
 80087f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008800:	2b00      	cmp	r3, #0
 8008802:	d00b      	beq.n	800881c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008804:	4b0d      	ldr	r3, [pc, #52]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800880a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008814:	4909      	ldr	r1, [pc, #36]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008816:	4313      	orrs	r3, r2
 8008818:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	2b01      	cmp	r3, #1
 8008820:	d006      	beq.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 80d9 	beq.w	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008830:	4b02      	ldr	r3, [pc, #8]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	4a01      	ldr	r2, [pc, #4]	; (800883c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008836:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800883a:	e001      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800883c:	40023800 	.word	0x40023800
 8008840:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008842:	f7fb fe1f 	bl	8004484 <HAL_GetTick>
 8008846:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008848:	e008      	b.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800884a:	f7fb fe1b 	bl	8004484 <HAL_GetTick>
 800884e:	4602      	mov	r2, r0
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	1ad3      	subs	r3, r2, r3
 8008854:	2b64      	cmp	r3, #100	; 0x64
 8008856:	d901      	bls.n	800885c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008858:	2303      	movs	r3, #3
 800885a:	e194      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800885c:	4b6c      	ldr	r3, [pc, #432]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1f0      	bne.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f003 0301 	and.w	r3, r3, #1
 8008870:	2b00      	cmp	r3, #0
 8008872:	d021      	beq.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11d      	bne.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800887c:	4b64      	ldr	r3, [pc, #400]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800887e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008882:	0c1b      	lsrs	r3, r3, #16
 8008884:	f003 0303 	and.w	r3, r3, #3
 8008888:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800888a:	4b61      	ldr	r3, [pc, #388]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800888c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008890:	0e1b      	lsrs	r3, r3, #24
 8008892:	f003 030f 	and.w	r3, r3, #15
 8008896:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	019a      	lsls	r2, r3, #6
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	041b      	lsls	r3, r3, #16
 80088a2:	431a      	orrs	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	061b      	lsls	r3, r3, #24
 80088a8:	431a      	orrs	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	689b      	ldr	r3, [r3, #8]
 80088ae:	071b      	lsls	r3, r3, #28
 80088b0:	4957      	ldr	r1, [pc, #348]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088cc:	d00a      	beq.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d02e      	beq.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088e2:	d129      	bne.n	8008938 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088e4:	4b4a      	ldr	r3, [pc, #296]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088ea:	0c1b      	lsrs	r3, r3, #16
 80088ec:	f003 0303 	and.w	r3, r3, #3
 80088f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088f2:	4b47      	ldr	r3, [pc, #284]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80088f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088f8:	0f1b      	lsrs	r3, r3, #28
 80088fa:	f003 0307 	and.w	r3, r3, #7
 80088fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	019a      	lsls	r2, r3, #6
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	041b      	lsls	r3, r3, #16
 800890a:	431a      	orrs	r2, r3
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	061b      	lsls	r3, r3, #24
 8008912:	431a      	orrs	r2, r3
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	071b      	lsls	r3, r3, #28
 8008918:	493d      	ldr	r1, [pc, #244]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008920:	4b3b      	ldr	r3, [pc, #236]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008926:	f023 021f 	bic.w	r2, r3, #31
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	3b01      	subs	r3, #1
 8008930:	4937      	ldr	r1, [pc, #220]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008932:	4313      	orrs	r3, r2
 8008934:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d01d      	beq.n	8008980 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008944:	4b32      	ldr	r3, [pc, #200]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800894a:	0e1b      	lsrs	r3, r3, #24
 800894c:	f003 030f 	and.w	r3, r3, #15
 8008950:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008952:	4b2f      	ldr	r3, [pc, #188]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008954:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008958:	0f1b      	lsrs	r3, r3, #28
 800895a:	f003 0307 	and.w	r3, r3, #7
 800895e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	019a      	lsls	r2, r3, #6
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	691b      	ldr	r3, [r3, #16]
 800896a:	041b      	lsls	r3, r3, #16
 800896c:	431a      	orrs	r2, r3
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	061b      	lsls	r3, r3, #24
 8008972:	431a      	orrs	r2, r3
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	071b      	lsls	r3, r3, #28
 8008978:	4925      	ldr	r1, [pc, #148]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800897a:	4313      	orrs	r3, r2
 800897c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008988:	2b00      	cmp	r3, #0
 800898a:	d011      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	685b      	ldr	r3, [r3, #4]
 8008990:	019a      	lsls	r2, r3, #6
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	041b      	lsls	r3, r3, #16
 8008998:	431a      	orrs	r2, r3
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	061b      	lsls	r3, r3, #24
 80089a0:	431a      	orrs	r2, r3
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	071b      	lsls	r3, r3, #28
 80089a8:	4919      	ldr	r1, [pc, #100]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80089b0:	4b17      	ldr	r3, [pc, #92]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a16      	ldr	r2, [pc, #88]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089bc:	f7fb fd62 	bl	8004484 <HAL_GetTick>
 80089c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089c2:	e008      	b.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80089c4:	f7fb fd5e 	bl	8004484 <HAL_GetTick>
 80089c8:	4602      	mov	r2, r0
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	1ad3      	subs	r3, r2, r3
 80089ce:	2b64      	cmp	r3, #100	; 0x64
 80089d0:	d901      	bls.n	80089d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d2:	2303      	movs	r3, #3
 80089d4:	e0d7      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80089d6:	4b0e      	ldr	r3, [pc, #56]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d0f0      	beq.n	80089c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	f040 80cd 	bne.w	8008b84 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089ea:	4b09      	ldr	r3, [pc, #36]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	4a08      	ldr	r2, [pc, #32]	; (8008a10 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80089f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089f6:	f7fb fd45 	bl	8004484 <HAL_GetTick>
 80089fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089fc:	e00a      	b.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089fe:	f7fb fd41 	bl	8004484 <HAL_GetTick>
 8008a02:	4602      	mov	r2, r0
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	1ad3      	subs	r3, r2, r3
 8008a08:	2b64      	cmp	r3, #100	; 0x64
 8008a0a:	d903      	bls.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a0c:	2303      	movs	r3, #3
 8008a0e:	e0ba      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008a10:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008a14:	4b5e      	ldr	r3, [pc, #376]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a20:	d0ed      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d009      	beq.n	8008a4a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d02e      	beq.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d12a      	bne.n	8008aa0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a4a:	4b51      	ldr	r3, [pc, #324]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a50:	0c1b      	lsrs	r3, r3, #16
 8008a52:	f003 0303 	and.w	r3, r3, #3
 8008a56:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a58:	4b4d      	ldr	r3, [pc, #308]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a5e:	0f1b      	lsrs	r3, r3, #28
 8008a60:	f003 0307 	and.w	r3, r3, #7
 8008a64:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	695b      	ldr	r3, [r3, #20]
 8008a6a:	019a      	lsls	r2, r3, #6
 8008a6c:	693b      	ldr	r3, [r7, #16]
 8008a6e:	041b      	lsls	r3, r3, #16
 8008a70:	431a      	orrs	r2, r3
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	061b      	lsls	r3, r3, #24
 8008a78:	431a      	orrs	r2, r3
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	071b      	lsls	r3, r3, #28
 8008a7e:	4944      	ldr	r1, [pc, #272]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a86:	4b42      	ldr	r3, [pc, #264]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a8c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a94:	3b01      	subs	r3, #1
 8008a96:	021b      	lsls	r3, r3, #8
 8008a98:	493d      	ldr	r1, [pc, #244]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d022      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008ab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008ab4:	d11d      	bne.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ab6:	4b36      	ldr	r3, [pc, #216]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008abc:	0e1b      	lsrs	r3, r3, #24
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008ac4:	4b32      	ldr	r3, [pc, #200]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aca:	0f1b      	lsrs	r3, r3, #28
 8008acc:	f003 0307 	and.w	r3, r3, #7
 8008ad0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	019a      	lsls	r2, r3, #6
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6a1b      	ldr	r3, [r3, #32]
 8008adc:	041b      	lsls	r3, r3, #16
 8008ade:	431a      	orrs	r2, r3
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	061b      	lsls	r3, r3, #24
 8008ae4:	431a      	orrs	r2, r3
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	071b      	lsls	r3, r3, #28
 8008aea:	4929      	ldr	r1, [pc, #164]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008aec:	4313      	orrs	r3, r2
 8008aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	f003 0308 	and.w	r3, r3, #8
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d028      	beq.n	8008b50 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008afe:	4b24      	ldr	r3, [pc, #144]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b04:	0e1b      	lsrs	r3, r3, #24
 8008b06:	f003 030f 	and.w	r3, r3, #15
 8008b0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008b0c:	4b20      	ldr	r3, [pc, #128]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b12:	0c1b      	lsrs	r3, r3, #16
 8008b14:	f003 0303 	and.w	r3, r3, #3
 8008b18:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	019a      	lsls	r2, r3, #6
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	041b      	lsls	r3, r3, #16
 8008b24:	431a      	orrs	r2, r3
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	061b      	lsls	r3, r3, #24
 8008b2a:	431a      	orrs	r2, r3
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	69db      	ldr	r3, [r3, #28]
 8008b30:	071b      	lsls	r3, r3, #28
 8008b32:	4917      	ldr	r1, [pc, #92]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b34:	4313      	orrs	r3, r2
 8008b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b3a:	4b15      	ldr	r3, [pc, #84]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b40:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b48:	4911      	ldr	r1, [pc, #68]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b50:	4b0f      	ldr	r3, [pc, #60]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a0e      	ldr	r2, [pc, #56]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b5c:	f7fb fc92 	bl	8004484 <HAL_GetTick>
 8008b60:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b62:	e008      	b.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b64:	f7fb fc8e 	bl	8004484 <HAL_GetTick>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	1ad3      	subs	r3, r2, r3
 8008b6e:	2b64      	cmp	r3, #100	; 0x64
 8008b70:	d901      	bls.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e007      	b.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b76:	4b06      	ldr	r3, [pc, #24]	; (8008b90 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b82:	d1ef      	bne.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008b84:	2300      	movs	r3, #0
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	3720      	adds	r7, #32
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	bd80      	pop	{r7, pc}
 8008b8e:	bf00      	nop
 8008b90:	40023800 	.word	0x40023800

08008b94 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	60f8      	str	r0, [r7, #12]
 8008b9c:	60b9      	str	r1, [r7, #8]
 8008b9e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d101      	bne.n	8008baa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008ba6:	2301      	movs	r3, #1
 8008ba8:	e038      	b.n	8008c1c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008bb0:	b2db      	uxtb	r3, r3
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d106      	bne.n	8008bc4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008bbe:	68f8      	ldr	r0, [r7, #12]
 8008bc0:	f7fa fa64 	bl	800308c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681a      	ldr	r2, [r3, #0]
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	3308      	adds	r3, #8
 8008bcc:	4619      	mov	r1, r3
 8008bce:	4610      	mov	r0, r2
 8008bd0:	f000 ffc6 	bl	8009b60 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	6818      	ldr	r0, [r3, #0]
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	68b9      	ldr	r1, [r7, #8]
 8008be0:	f001 f84e 	bl	8009c80 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6858      	ldr	r0, [r3, #4]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	689a      	ldr	r2, [r3, #8]
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bf0:	6879      	ldr	r1, [r7, #4]
 8008bf2:	f001 f895 	bl	8009d20 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	6892      	ldr	r2, [r2, #8]
 8008bfe:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68fa      	ldr	r2, [r7, #12]
 8008c08:	6892      	ldr	r2, [r2, #8]
 8008c0a:	f041 0101 	orr.w	r1, r1, #1
 8008c0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2201      	movs	r2, #1
 8008c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b082      	sub	sp, #8
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d101      	bne.n	8008c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c32:	2301      	movs	r3, #1
 8008c34:	e049      	b.n	8008cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d106      	bne.n	8008c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7fa f896 	bl	8002d7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2202      	movs	r2, #2
 8008c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681a      	ldr	r2, [r3, #0]
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	3304      	adds	r3, #4
 8008c60:	4619      	mov	r1, r3
 8008c62:	4610      	mov	r0, r2
 8008c64:	f000 f8e8 	bl	8008e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2201      	movs	r2, #1
 8008c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3708      	adds	r7, #8
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ce2:	b2db      	uxtb	r3, r3
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d001      	beq.n	8008cec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e04c      	b.n	8008d86 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2202      	movs	r2, #2
 8008cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	4a26      	ldr	r2, [pc, #152]	; (8008d94 <HAL_TIM_Base_Start+0xc0>)
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d022      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d06:	d01d      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4a22      	ldr	r2, [pc, #136]	; (8008d98 <HAL_TIM_Base_Start+0xc4>)
 8008d0e:	4293      	cmp	r3, r2
 8008d10:	d018      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	4a21      	ldr	r2, [pc, #132]	; (8008d9c <HAL_TIM_Base_Start+0xc8>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d013      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	4a1f      	ldr	r2, [pc, #124]	; (8008da0 <HAL_TIM_Base_Start+0xcc>)
 8008d22:	4293      	cmp	r3, r2
 8008d24:	d00e      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a1e      	ldr	r2, [pc, #120]	; (8008da4 <HAL_TIM_Base_Start+0xd0>)
 8008d2c:	4293      	cmp	r3, r2
 8008d2e:	d009      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a1c      	ldr	r2, [pc, #112]	; (8008da8 <HAL_TIM_Base_Start+0xd4>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d004      	beq.n	8008d44 <HAL_TIM_Base_Start+0x70>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a1b      	ldr	r2, [pc, #108]	; (8008dac <HAL_TIM_Base_Start+0xd8>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d115      	bne.n	8008d70 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <HAL_TIM_Base_Start+0xdc>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b06      	cmp	r3, #6
 8008d54:	d015      	beq.n	8008d82 <HAL_TIM_Base_Start+0xae>
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d5c:	d011      	beq.n	8008d82 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681a      	ldr	r2, [r3, #0]
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f042 0201 	orr.w	r2, r2, #1
 8008d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d6e:	e008      	b.n	8008d82 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f042 0201 	orr.w	r2, r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]
 8008d80:	e000      	b.n	8008d84 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d84:	2300      	movs	r3, #0
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3714      	adds	r7, #20
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d90:	4770      	bx	lr
 8008d92:	bf00      	nop
 8008d94:	40010000 	.word	0x40010000
 8008d98:	40000400 	.word	0x40000400
 8008d9c:	40000800 	.word	0x40000800
 8008da0:	40000c00 	.word	0x40000c00
 8008da4:	40010400 	.word	0x40010400
 8008da8:	40014000 	.word	0x40014000
 8008dac:	40001800 	.word	0x40001800
 8008db0:	00010007 	.word	0x00010007

08008db4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b082      	sub	sp, #8
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d101      	bne.n	8008dcc <HAL_TIM_SlaveConfigSynchro+0x18>
 8008dc8:	2302      	movs	r3, #2
 8008dca:	e031      	b.n	8008e30 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2202      	movs	r2, #2
 8008dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008ddc:	6839      	ldr	r1, [r7, #0]
 8008dde:	6878      	ldr	r0, [r7, #4]
 8008de0:	f000 f8ca 	bl	8008f78 <TIM_SlaveTimer_SetConfig>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d009      	beq.n	8008dfe <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e018      	b.n	8008e30 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	68da      	ldr	r2, [r3, #12]
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e0c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008e1c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	2201      	movs	r2, #1
 8008e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e2e:	2300      	movs	r3, #0
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3708      	adds	r7, #8
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	b085      	sub	sp, #20
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
 8008e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	4a40      	ldr	r2, [pc, #256]	; (8008f4c <TIM_Base_SetConfig+0x114>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d013      	beq.n	8008e78 <TIM_Base_SetConfig+0x40>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e56:	d00f      	beq.n	8008e78 <TIM_Base_SetConfig+0x40>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a3d      	ldr	r2, [pc, #244]	; (8008f50 <TIM_Base_SetConfig+0x118>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d00b      	beq.n	8008e78 <TIM_Base_SetConfig+0x40>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a3c      	ldr	r2, [pc, #240]	; (8008f54 <TIM_Base_SetConfig+0x11c>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d007      	beq.n	8008e78 <TIM_Base_SetConfig+0x40>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a3b      	ldr	r2, [pc, #236]	; (8008f58 <TIM_Base_SetConfig+0x120>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d003      	beq.n	8008e78 <TIM_Base_SetConfig+0x40>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a3a      	ldr	r2, [pc, #232]	; (8008f5c <TIM_Base_SetConfig+0x124>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d108      	bne.n	8008e8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	68fa      	ldr	r2, [r7, #12]
 8008e86:	4313      	orrs	r3, r2
 8008e88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	4a2f      	ldr	r2, [pc, #188]	; (8008f4c <TIM_Base_SetConfig+0x114>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d02b      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e98:	d027      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	4a2c      	ldr	r2, [pc, #176]	; (8008f50 <TIM_Base_SetConfig+0x118>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d023      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a2b      	ldr	r2, [pc, #172]	; (8008f54 <TIM_Base_SetConfig+0x11c>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d01f      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a2a      	ldr	r2, [pc, #168]	; (8008f58 <TIM_Base_SetConfig+0x120>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01b      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a29      	ldr	r2, [pc, #164]	; (8008f5c <TIM_Base_SetConfig+0x124>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d017      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a28      	ldr	r2, [pc, #160]	; (8008f60 <TIM_Base_SetConfig+0x128>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d013      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a27      	ldr	r2, [pc, #156]	; (8008f64 <TIM_Base_SetConfig+0x12c>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00f      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a26      	ldr	r2, [pc, #152]	; (8008f68 <TIM_Base_SetConfig+0x130>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00b      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a25      	ldr	r2, [pc, #148]	; (8008f6c <TIM_Base_SetConfig+0x134>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d007      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a24      	ldr	r2, [pc, #144]	; (8008f70 <TIM_Base_SetConfig+0x138>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d003      	beq.n	8008eea <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a23      	ldr	r2, [pc, #140]	; (8008f74 <TIM_Base_SetConfig+0x13c>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d108      	bne.n	8008efc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	68db      	ldr	r3, [r3, #12]
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	695b      	ldr	r3, [r3, #20]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68fa      	ldr	r2, [r7, #12]
 8008f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	689a      	ldr	r2, [r3, #8]
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a0a      	ldr	r2, [pc, #40]	; (8008f4c <TIM_Base_SetConfig+0x114>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_Base_SetConfig+0xf8>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a0c      	ldr	r2, [pc, #48]	; (8008f5c <TIM_Base_SetConfig+0x124>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d103      	bne.n	8008f38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	691a      	ldr	r2, [r3, #16]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2201      	movs	r2, #1
 8008f3c:	615a      	str	r2, [r3, #20]
}
 8008f3e:	bf00      	nop
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	40010000 	.word	0x40010000
 8008f50:	40000400 	.word	0x40000400
 8008f54:	40000800 	.word	0x40000800
 8008f58:	40000c00 	.word	0x40000c00
 8008f5c:	40010400 	.word	0x40010400
 8008f60:	40014000 	.word	0x40014000
 8008f64:	40014400 	.word	0x40014400
 8008f68:	40014800 	.word	0x40014800
 8008f6c:	40001800 	.word	0x40001800
 8008f70:	40001c00 	.word	0x40001c00
 8008f74:	40002000 	.word	0x40002000

08008f78 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b086      	sub	sp, #24
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	6078      	str	r0, [r7, #4]
 8008f80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f82:	2300      	movs	r3, #0
 8008f84:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f94:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4b3e      	ldr	r3, [pc, #248]	; (800909c <TIM_SlaveTimer_SetConfig+0x124>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	693a      	ldr	r2, [r7, #16]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	685b      	ldr	r3, [r3, #4]
 8008fbe:	2b70      	cmp	r3, #112	; 0x70
 8008fc0:	d01a      	beq.n	8008ff8 <TIM_SlaveTimer_SetConfig+0x80>
 8008fc2:	2b70      	cmp	r3, #112	; 0x70
 8008fc4:	d860      	bhi.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
 8008fc6:	2b60      	cmp	r3, #96	; 0x60
 8008fc8:	d054      	beq.n	8009074 <TIM_SlaveTimer_SetConfig+0xfc>
 8008fca:	2b60      	cmp	r3, #96	; 0x60
 8008fcc:	d85c      	bhi.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
 8008fce:	2b50      	cmp	r3, #80	; 0x50
 8008fd0:	d046      	beq.n	8009060 <TIM_SlaveTimer_SetConfig+0xe8>
 8008fd2:	2b50      	cmp	r3, #80	; 0x50
 8008fd4:	d858      	bhi.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d019      	beq.n	800900e <TIM_SlaveTimer_SetConfig+0x96>
 8008fda:	2b40      	cmp	r3, #64	; 0x40
 8008fdc:	d854      	bhi.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
 8008fde:	2b30      	cmp	r3, #48	; 0x30
 8008fe0:	d055      	beq.n	800908e <TIM_SlaveTimer_SetConfig+0x116>
 8008fe2:	2b30      	cmp	r3, #48	; 0x30
 8008fe4:	d850      	bhi.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
 8008fe6:	2b20      	cmp	r3, #32
 8008fe8:	d051      	beq.n	800908e <TIM_SlaveTimer_SetConfig+0x116>
 8008fea:	2b20      	cmp	r3, #32
 8008fec:	d84c      	bhi.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d04d      	beq.n	800908e <TIM_SlaveTimer_SetConfig+0x116>
 8008ff2:	2b10      	cmp	r3, #16
 8008ff4:	d04b      	beq.n	800908e <TIM_SlaveTimer_SetConfig+0x116>
 8008ff6:	e047      	b.n	8009088 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009008:	f000 f8a9 	bl	800915e <TIM_ETR_SetConfig>
      break;
 800900c:	e040      	b.n	8009090 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800900e:	683b      	ldr	r3, [r7, #0]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2b05      	cmp	r3, #5
 8009014:	d101      	bne.n	800901a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e03b      	b.n	8009092 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6a1b      	ldr	r3, [r3, #32]
 8009020:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	6a1a      	ldr	r2, [r3, #32]
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f022 0201 	bic.w	r2, r2, #1
 8009030:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	699b      	ldr	r3, [r3, #24]
 8009038:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009040:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	011b      	lsls	r3, r3, #4
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	4313      	orrs	r3, r2
 800904c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	621a      	str	r2, [r3, #32]
      break;
 800905e:	e017      	b.n	8009090 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800906c:	461a      	mov	r2, r3
 800906e:	f000 f817 	bl	80090a0 <TIM_TI1_ConfigInputStage>
      break;
 8009072:	e00d      	b.n	8009090 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009080:	461a      	mov	r2, r3
 8009082:	f000 f83c 	bl	80090fe <TIM_TI2_ConfigInputStage>
      break;
 8009086:	e003      	b.n	8009090 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	75fb      	strb	r3, [r7, #23]
      break;
 800908c:	e000      	b.n	8009090 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800908e:	bf00      	nop
  }

  return status;
 8009090:	7dfb      	ldrb	r3, [r7, #23]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3718      	adds	r7, #24
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}
 800909a:	bf00      	nop
 800909c:	fffefff8 	.word	0xfffefff8

080090a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b087      	sub	sp, #28
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	60f8      	str	r0, [r7, #12]
 80090a8:	60b9      	str	r1, [r7, #8]
 80090aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a1b      	ldr	r3, [r3, #32]
 80090b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	6a1b      	ldr	r3, [r3, #32]
 80090b6:	f023 0201 	bic.w	r2, r3, #1
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	699b      	ldr	r3, [r3, #24]
 80090c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80090ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f023 030a 	bic.w	r3, r3, #10
 80090dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80090de:	697a      	ldr	r2, [r7, #20]
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	693a      	ldr	r2, [r7, #16]
 80090ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	621a      	str	r2, [r3, #32]
}
 80090f2:	bf00      	nop
 80090f4:	371c      	adds	r7, #28
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090fe:	b480      	push	{r7}
 8009100:	b087      	sub	sp, #28
 8009102:	af00      	add	r7, sp, #0
 8009104:	60f8      	str	r0, [r7, #12]
 8009106:	60b9      	str	r1, [r7, #8]
 8009108:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	f023 0210 	bic.w	r2, r3, #16
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	6a1b      	ldr	r3, [r3, #32]
 8009120:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009128:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	031b      	lsls	r3, r3, #12
 800912e:	697a      	ldr	r2, [r7, #20]
 8009130:	4313      	orrs	r3, r2
 8009132:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009134:	693b      	ldr	r3, [r7, #16]
 8009136:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800913a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	011b      	lsls	r3, r3, #4
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	4313      	orrs	r3, r2
 8009144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	697a      	ldr	r2, [r7, #20]
 800914a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	693a      	ldr	r2, [r7, #16]
 8009150:	621a      	str	r2, [r3, #32]
}
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr

0800915e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800915e:	b480      	push	{r7}
 8009160:	b087      	sub	sp, #28
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	607a      	str	r2, [r7, #4]
 800916a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	689b      	ldr	r3, [r3, #8]
 8009170:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009172:	697b      	ldr	r3, [r7, #20]
 8009174:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009178:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	021a      	lsls	r2, r3, #8
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	431a      	orrs	r2, r3
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	4313      	orrs	r3, r2
 8009186:	697a      	ldr	r2, [r7, #20]
 8009188:	4313      	orrs	r3, r2
 800918a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	697a      	ldr	r2, [r7, #20]
 8009190:	609a      	str	r2, [r3, #8]
}
 8009192:	bf00      	nop
 8009194:	371c      	adds	r7, #28
 8009196:	46bd      	mov	sp, r7
 8009198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919c:	4770      	bx	lr
	...

080091a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d101      	bne.n	80091b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091b4:	2302      	movs	r3, #2
 80091b6:	e06d      	b.n	8009294 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2201      	movs	r2, #1
 80091bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	2202      	movs	r2, #2
 80091c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	685b      	ldr	r3, [r3, #4]
 80091ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	689b      	ldr	r3, [r3, #8]
 80091d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a30      	ldr	r2, [pc, #192]	; (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d004      	beq.n	80091ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a2f      	ldr	r2, [pc, #188]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d108      	bne.n	80091fe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80091f2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685b      	ldr	r3, [r3, #4]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009204:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	68fa      	ldr	r2, [r7, #12]
 800920c:	4313      	orrs	r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	4a20      	ldr	r2, [pc, #128]	; (80092a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d022      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922a:	d01d      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4a1d      	ldr	r2, [pc, #116]	; (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009232:	4293      	cmp	r3, r2
 8009234:	d018      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	4a1c      	ldr	r2, [pc, #112]	; (80092ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d013      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	4a1a      	ldr	r2, [pc, #104]	; (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d00e      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	4a15      	ldr	r2, [pc, #84]	; (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009250:	4293      	cmp	r3, r2
 8009252:	d009      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a16      	ldr	r2, [pc, #88]	; (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800925a:	4293      	cmp	r3, r2
 800925c:	d004      	beq.n	8009268 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4a15      	ldr	r2, [pc, #84]	; (80092b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d10c      	bne.n	8009282 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009268:	68bb      	ldr	r3, [r7, #8]
 800926a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800926e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	689b      	ldr	r3, [r3, #8]
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	4313      	orrs	r3, r2
 8009278:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2200      	movs	r2, #0
 800928e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009292:	2300      	movs	r3, #0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3714      	adds	r7, #20
 8009298:	46bd      	mov	sp, r7
 800929a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929e:	4770      	bx	lr
 80092a0:	40010000 	.word	0x40010000
 80092a4:	40010400 	.word	0x40010400
 80092a8:	40000400 	.word	0x40000400
 80092ac:	40000800 	.word	0x40000800
 80092b0:	40000c00 	.word	0x40000c00
 80092b4:	40014000 	.word	0x40014000
 80092b8:	40001800 	.word	0x40001800

080092bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d101      	bne.n	80092ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80092ca:	2301      	movs	r3, #1
 80092cc:	e040      	b.n	8009350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f7f9 fdd4 	bl	8002e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2224      	movs	r2, #36	; 0x24
 80092e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	681a      	ldr	r2, [r3, #0]
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f022 0201 	bic.w	r2, r2, #1
 80092f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 f82c 	bl	8009358 <UART_SetConfig>
 8009300:	4603      	mov	r3, r0
 8009302:	2b01      	cmp	r3, #1
 8009304:	d101      	bne.n	800930a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009306:	2301      	movs	r3, #1
 8009308:	e022      	b.n	8009350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 fa84 	bl	8009820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f042 0201 	orr.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 fb0b 	bl	8009964 <UART_CheckIdleState>
 800934e:	4603      	mov	r3, r0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b088      	sub	sp, #32
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009360:	2300      	movs	r3, #0
 8009362:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	431a      	orrs	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	695b      	ldr	r3, [r3, #20]
 8009372:	431a      	orrs	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	4313      	orrs	r3, r2
 800937a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	4ba6      	ldr	r3, [pc, #664]	; (800961c <UART_SetConfig+0x2c4>)
 8009384:	4013      	ands	r3, r2
 8009386:	687a      	ldr	r2, [r7, #4]
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	6979      	ldr	r1, [r7, #20]
 800938c:	430b      	orrs	r3, r1
 800938e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	68da      	ldr	r2, [r3, #12]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	689b      	ldr	r3, [r3, #8]
 80093bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	430a      	orrs	r2, r1
 80093c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a94      	ldr	r2, [pc, #592]	; (8009620 <UART_SetConfig+0x2c8>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d120      	bne.n	8009416 <UART_SetConfig+0xbe>
 80093d4:	4b93      	ldr	r3, [pc, #588]	; (8009624 <UART_SetConfig+0x2cc>)
 80093d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093da:	f003 0303 	and.w	r3, r3, #3
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d816      	bhi.n	8009410 <UART_SetConfig+0xb8>
 80093e2:	a201      	add	r2, pc, #4	; (adr r2, 80093e8 <UART_SetConfig+0x90>)
 80093e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093e8:	080093f9 	.word	0x080093f9
 80093ec:	08009405 	.word	0x08009405
 80093f0:	080093ff 	.word	0x080093ff
 80093f4:	0800940b 	.word	0x0800940b
 80093f8:	2301      	movs	r3, #1
 80093fa:	77fb      	strb	r3, [r7, #31]
 80093fc:	e150      	b.n	80096a0 <UART_SetConfig+0x348>
 80093fe:	2302      	movs	r3, #2
 8009400:	77fb      	strb	r3, [r7, #31]
 8009402:	e14d      	b.n	80096a0 <UART_SetConfig+0x348>
 8009404:	2304      	movs	r3, #4
 8009406:	77fb      	strb	r3, [r7, #31]
 8009408:	e14a      	b.n	80096a0 <UART_SetConfig+0x348>
 800940a:	2308      	movs	r3, #8
 800940c:	77fb      	strb	r3, [r7, #31]
 800940e:	e147      	b.n	80096a0 <UART_SetConfig+0x348>
 8009410:	2310      	movs	r3, #16
 8009412:	77fb      	strb	r3, [r7, #31]
 8009414:	e144      	b.n	80096a0 <UART_SetConfig+0x348>
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	4a83      	ldr	r2, [pc, #524]	; (8009628 <UART_SetConfig+0x2d0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d132      	bne.n	8009486 <UART_SetConfig+0x12e>
 8009420:	4b80      	ldr	r3, [pc, #512]	; (8009624 <UART_SetConfig+0x2cc>)
 8009422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009426:	f003 030c 	and.w	r3, r3, #12
 800942a:	2b0c      	cmp	r3, #12
 800942c:	d828      	bhi.n	8009480 <UART_SetConfig+0x128>
 800942e:	a201      	add	r2, pc, #4	; (adr r2, 8009434 <UART_SetConfig+0xdc>)
 8009430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009434:	08009469 	.word	0x08009469
 8009438:	08009481 	.word	0x08009481
 800943c:	08009481 	.word	0x08009481
 8009440:	08009481 	.word	0x08009481
 8009444:	08009475 	.word	0x08009475
 8009448:	08009481 	.word	0x08009481
 800944c:	08009481 	.word	0x08009481
 8009450:	08009481 	.word	0x08009481
 8009454:	0800946f 	.word	0x0800946f
 8009458:	08009481 	.word	0x08009481
 800945c:	08009481 	.word	0x08009481
 8009460:	08009481 	.word	0x08009481
 8009464:	0800947b 	.word	0x0800947b
 8009468:	2300      	movs	r3, #0
 800946a:	77fb      	strb	r3, [r7, #31]
 800946c:	e118      	b.n	80096a0 <UART_SetConfig+0x348>
 800946e:	2302      	movs	r3, #2
 8009470:	77fb      	strb	r3, [r7, #31]
 8009472:	e115      	b.n	80096a0 <UART_SetConfig+0x348>
 8009474:	2304      	movs	r3, #4
 8009476:	77fb      	strb	r3, [r7, #31]
 8009478:	e112      	b.n	80096a0 <UART_SetConfig+0x348>
 800947a:	2308      	movs	r3, #8
 800947c:	77fb      	strb	r3, [r7, #31]
 800947e:	e10f      	b.n	80096a0 <UART_SetConfig+0x348>
 8009480:	2310      	movs	r3, #16
 8009482:	77fb      	strb	r3, [r7, #31]
 8009484:	e10c      	b.n	80096a0 <UART_SetConfig+0x348>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a68      	ldr	r2, [pc, #416]	; (800962c <UART_SetConfig+0x2d4>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d120      	bne.n	80094d2 <UART_SetConfig+0x17a>
 8009490:	4b64      	ldr	r3, [pc, #400]	; (8009624 <UART_SetConfig+0x2cc>)
 8009492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009496:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800949a:	2b30      	cmp	r3, #48	; 0x30
 800949c:	d013      	beq.n	80094c6 <UART_SetConfig+0x16e>
 800949e:	2b30      	cmp	r3, #48	; 0x30
 80094a0:	d814      	bhi.n	80094cc <UART_SetConfig+0x174>
 80094a2:	2b20      	cmp	r3, #32
 80094a4:	d009      	beq.n	80094ba <UART_SetConfig+0x162>
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d810      	bhi.n	80094cc <UART_SetConfig+0x174>
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d002      	beq.n	80094b4 <UART_SetConfig+0x15c>
 80094ae:	2b10      	cmp	r3, #16
 80094b0:	d006      	beq.n	80094c0 <UART_SetConfig+0x168>
 80094b2:	e00b      	b.n	80094cc <UART_SetConfig+0x174>
 80094b4:	2300      	movs	r3, #0
 80094b6:	77fb      	strb	r3, [r7, #31]
 80094b8:	e0f2      	b.n	80096a0 <UART_SetConfig+0x348>
 80094ba:	2302      	movs	r3, #2
 80094bc:	77fb      	strb	r3, [r7, #31]
 80094be:	e0ef      	b.n	80096a0 <UART_SetConfig+0x348>
 80094c0:	2304      	movs	r3, #4
 80094c2:	77fb      	strb	r3, [r7, #31]
 80094c4:	e0ec      	b.n	80096a0 <UART_SetConfig+0x348>
 80094c6:	2308      	movs	r3, #8
 80094c8:	77fb      	strb	r3, [r7, #31]
 80094ca:	e0e9      	b.n	80096a0 <UART_SetConfig+0x348>
 80094cc:	2310      	movs	r3, #16
 80094ce:	77fb      	strb	r3, [r7, #31]
 80094d0:	e0e6      	b.n	80096a0 <UART_SetConfig+0x348>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a56      	ldr	r2, [pc, #344]	; (8009630 <UART_SetConfig+0x2d8>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d120      	bne.n	800951e <UART_SetConfig+0x1c6>
 80094dc:	4b51      	ldr	r3, [pc, #324]	; (8009624 <UART_SetConfig+0x2cc>)
 80094de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80094e6:	2bc0      	cmp	r3, #192	; 0xc0
 80094e8:	d013      	beq.n	8009512 <UART_SetConfig+0x1ba>
 80094ea:	2bc0      	cmp	r3, #192	; 0xc0
 80094ec:	d814      	bhi.n	8009518 <UART_SetConfig+0x1c0>
 80094ee:	2b80      	cmp	r3, #128	; 0x80
 80094f0:	d009      	beq.n	8009506 <UART_SetConfig+0x1ae>
 80094f2:	2b80      	cmp	r3, #128	; 0x80
 80094f4:	d810      	bhi.n	8009518 <UART_SetConfig+0x1c0>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d002      	beq.n	8009500 <UART_SetConfig+0x1a8>
 80094fa:	2b40      	cmp	r3, #64	; 0x40
 80094fc:	d006      	beq.n	800950c <UART_SetConfig+0x1b4>
 80094fe:	e00b      	b.n	8009518 <UART_SetConfig+0x1c0>
 8009500:	2300      	movs	r3, #0
 8009502:	77fb      	strb	r3, [r7, #31]
 8009504:	e0cc      	b.n	80096a0 <UART_SetConfig+0x348>
 8009506:	2302      	movs	r3, #2
 8009508:	77fb      	strb	r3, [r7, #31]
 800950a:	e0c9      	b.n	80096a0 <UART_SetConfig+0x348>
 800950c:	2304      	movs	r3, #4
 800950e:	77fb      	strb	r3, [r7, #31]
 8009510:	e0c6      	b.n	80096a0 <UART_SetConfig+0x348>
 8009512:	2308      	movs	r3, #8
 8009514:	77fb      	strb	r3, [r7, #31]
 8009516:	e0c3      	b.n	80096a0 <UART_SetConfig+0x348>
 8009518:	2310      	movs	r3, #16
 800951a:	77fb      	strb	r3, [r7, #31]
 800951c:	e0c0      	b.n	80096a0 <UART_SetConfig+0x348>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a44      	ldr	r2, [pc, #272]	; (8009634 <UART_SetConfig+0x2dc>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d125      	bne.n	8009574 <UART_SetConfig+0x21c>
 8009528:	4b3e      	ldr	r3, [pc, #248]	; (8009624 <UART_SetConfig+0x2cc>)
 800952a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800952e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009536:	d017      	beq.n	8009568 <UART_SetConfig+0x210>
 8009538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800953c:	d817      	bhi.n	800956e <UART_SetConfig+0x216>
 800953e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009542:	d00b      	beq.n	800955c <UART_SetConfig+0x204>
 8009544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009548:	d811      	bhi.n	800956e <UART_SetConfig+0x216>
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <UART_SetConfig+0x1fe>
 800954e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009552:	d006      	beq.n	8009562 <UART_SetConfig+0x20a>
 8009554:	e00b      	b.n	800956e <UART_SetConfig+0x216>
 8009556:	2300      	movs	r3, #0
 8009558:	77fb      	strb	r3, [r7, #31]
 800955a:	e0a1      	b.n	80096a0 <UART_SetConfig+0x348>
 800955c:	2302      	movs	r3, #2
 800955e:	77fb      	strb	r3, [r7, #31]
 8009560:	e09e      	b.n	80096a0 <UART_SetConfig+0x348>
 8009562:	2304      	movs	r3, #4
 8009564:	77fb      	strb	r3, [r7, #31]
 8009566:	e09b      	b.n	80096a0 <UART_SetConfig+0x348>
 8009568:	2308      	movs	r3, #8
 800956a:	77fb      	strb	r3, [r7, #31]
 800956c:	e098      	b.n	80096a0 <UART_SetConfig+0x348>
 800956e:	2310      	movs	r3, #16
 8009570:	77fb      	strb	r3, [r7, #31]
 8009572:	e095      	b.n	80096a0 <UART_SetConfig+0x348>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a2f      	ldr	r2, [pc, #188]	; (8009638 <UART_SetConfig+0x2e0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d125      	bne.n	80095ca <UART_SetConfig+0x272>
 800957e:	4b29      	ldr	r3, [pc, #164]	; (8009624 <UART_SetConfig+0x2cc>)
 8009580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009584:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009588:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800958c:	d017      	beq.n	80095be <UART_SetConfig+0x266>
 800958e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009592:	d817      	bhi.n	80095c4 <UART_SetConfig+0x26c>
 8009594:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009598:	d00b      	beq.n	80095b2 <UART_SetConfig+0x25a>
 800959a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800959e:	d811      	bhi.n	80095c4 <UART_SetConfig+0x26c>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d003      	beq.n	80095ac <UART_SetConfig+0x254>
 80095a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095a8:	d006      	beq.n	80095b8 <UART_SetConfig+0x260>
 80095aa:	e00b      	b.n	80095c4 <UART_SetConfig+0x26c>
 80095ac:	2301      	movs	r3, #1
 80095ae:	77fb      	strb	r3, [r7, #31]
 80095b0:	e076      	b.n	80096a0 <UART_SetConfig+0x348>
 80095b2:	2302      	movs	r3, #2
 80095b4:	77fb      	strb	r3, [r7, #31]
 80095b6:	e073      	b.n	80096a0 <UART_SetConfig+0x348>
 80095b8:	2304      	movs	r3, #4
 80095ba:	77fb      	strb	r3, [r7, #31]
 80095bc:	e070      	b.n	80096a0 <UART_SetConfig+0x348>
 80095be:	2308      	movs	r3, #8
 80095c0:	77fb      	strb	r3, [r7, #31]
 80095c2:	e06d      	b.n	80096a0 <UART_SetConfig+0x348>
 80095c4:	2310      	movs	r3, #16
 80095c6:	77fb      	strb	r3, [r7, #31]
 80095c8:	e06a      	b.n	80096a0 <UART_SetConfig+0x348>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a1b      	ldr	r2, [pc, #108]	; (800963c <UART_SetConfig+0x2e4>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d138      	bne.n	8009646 <UART_SetConfig+0x2ee>
 80095d4:	4b13      	ldr	r3, [pc, #76]	; (8009624 <UART_SetConfig+0x2cc>)
 80095d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80095de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095e2:	d017      	beq.n	8009614 <UART_SetConfig+0x2bc>
 80095e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80095e8:	d82a      	bhi.n	8009640 <UART_SetConfig+0x2e8>
 80095ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095ee:	d00b      	beq.n	8009608 <UART_SetConfig+0x2b0>
 80095f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80095f4:	d824      	bhi.n	8009640 <UART_SetConfig+0x2e8>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d003      	beq.n	8009602 <UART_SetConfig+0x2aa>
 80095fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80095fe:	d006      	beq.n	800960e <UART_SetConfig+0x2b6>
 8009600:	e01e      	b.n	8009640 <UART_SetConfig+0x2e8>
 8009602:	2300      	movs	r3, #0
 8009604:	77fb      	strb	r3, [r7, #31]
 8009606:	e04b      	b.n	80096a0 <UART_SetConfig+0x348>
 8009608:	2302      	movs	r3, #2
 800960a:	77fb      	strb	r3, [r7, #31]
 800960c:	e048      	b.n	80096a0 <UART_SetConfig+0x348>
 800960e:	2304      	movs	r3, #4
 8009610:	77fb      	strb	r3, [r7, #31]
 8009612:	e045      	b.n	80096a0 <UART_SetConfig+0x348>
 8009614:	2308      	movs	r3, #8
 8009616:	77fb      	strb	r3, [r7, #31]
 8009618:	e042      	b.n	80096a0 <UART_SetConfig+0x348>
 800961a:	bf00      	nop
 800961c:	efff69f3 	.word	0xefff69f3
 8009620:	40011000 	.word	0x40011000
 8009624:	40023800 	.word	0x40023800
 8009628:	40004400 	.word	0x40004400
 800962c:	40004800 	.word	0x40004800
 8009630:	40004c00 	.word	0x40004c00
 8009634:	40005000 	.word	0x40005000
 8009638:	40011400 	.word	0x40011400
 800963c:	40007800 	.word	0x40007800
 8009640:	2310      	movs	r3, #16
 8009642:	77fb      	strb	r3, [r7, #31]
 8009644:	e02c      	b.n	80096a0 <UART_SetConfig+0x348>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a72      	ldr	r2, [pc, #456]	; (8009814 <UART_SetConfig+0x4bc>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d125      	bne.n	800969c <UART_SetConfig+0x344>
 8009650:	4b71      	ldr	r3, [pc, #452]	; (8009818 <UART_SetConfig+0x4c0>)
 8009652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009656:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800965a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800965e:	d017      	beq.n	8009690 <UART_SetConfig+0x338>
 8009660:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009664:	d817      	bhi.n	8009696 <UART_SetConfig+0x33e>
 8009666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800966a:	d00b      	beq.n	8009684 <UART_SetConfig+0x32c>
 800966c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009670:	d811      	bhi.n	8009696 <UART_SetConfig+0x33e>
 8009672:	2b00      	cmp	r3, #0
 8009674:	d003      	beq.n	800967e <UART_SetConfig+0x326>
 8009676:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800967a:	d006      	beq.n	800968a <UART_SetConfig+0x332>
 800967c:	e00b      	b.n	8009696 <UART_SetConfig+0x33e>
 800967e:	2300      	movs	r3, #0
 8009680:	77fb      	strb	r3, [r7, #31]
 8009682:	e00d      	b.n	80096a0 <UART_SetConfig+0x348>
 8009684:	2302      	movs	r3, #2
 8009686:	77fb      	strb	r3, [r7, #31]
 8009688:	e00a      	b.n	80096a0 <UART_SetConfig+0x348>
 800968a:	2304      	movs	r3, #4
 800968c:	77fb      	strb	r3, [r7, #31]
 800968e:	e007      	b.n	80096a0 <UART_SetConfig+0x348>
 8009690:	2308      	movs	r3, #8
 8009692:	77fb      	strb	r3, [r7, #31]
 8009694:	e004      	b.n	80096a0 <UART_SetConfig+0x348>
 8009696:	2310      	movs	r3, #16
 8009698:	77fb      	strb	r3, [r7, #31]
 800969a:	e001      	b.n	80096a0 <UART_SetConfig+0x348>
 800969c:	2310      	movs	r3, #16
 800969e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096a8:	d15b      	bne.n	8009762 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80096aa:	7ffb      	ldrb	r3, [r7, #31]
 80096ac:	2b08      	cmp	r3, #8
 80096ae:	d828      	bhi.n	8009702 <UART_SetConfig+0x3aa>
 80096b0:	a201      	add	r2, pc, #4	; (adr r2, 80096b8 <UART_SetConfig+0x360>)
 80096b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096b6:	bf00      	nop
 80096b8:	080096dd 	.word	0x080096dd
 80096bc:	080096e5 	.word	0x080096e5
 80096c0:	080096ed 	.word	0x080096ed
 80096c4:	08009703 	.word	0x08009703
 80096c8:	080096f3 	.word	0x080096f3
 80096cc:	08009703 	.word	0x08009703
 80096d0:	08009703 	.word	0x08009703
 80096d4:	08009703 	.word	0x08009703
 80096d8:	080096fb 	.word	0x080096fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096dc:	f7fe fe42 	bl	8008364 <HAL_RCC_GetPCLK1Freq>
 80096e0:	61b8      	str	r0, [r7, #24]
        break;
 80096e2:	e013      	b.n	800970c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096e4:	f7fe fe52 	bl	800838c <HAL_RCC_GetPCLK2Freq>
 80096e8:	61b8      	str	r0, [r7, #24]
        break;
 80096ea:	e00f      	b.n	800970c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096ec:	4b4b      	ldr	r3, [pc, #300]	; (800981c <UART_SetConfig+0x4c4>)
 80096ee:	61bb      	str	r3, [r7, #24]
        break;
 80096f0:	e00c      	b.n	800970c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096f2:	f7fe fd27 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 80096f6:	61b8      	str	r0, [r7, #24]
        break;
 80096f8:	e008      	b.n	800970c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096fe:	61bb      	str	r3, [r7, #24]
        break;
 8009700:	e004      	b.n	800970c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009702:	2300      	movs	r3, #0
 8009704:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	77bb      	strb	r3, [r7, #30]
        break;
 800970a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d074      	beq.n	80097fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009712:	69bb      	ldr	r3, [r7, #24]
 8009714:	005a      	lsls	r2, r3, #1
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	085b      	lsrs	r3, r3, #1
 800971c:	441a      	add	r2, r3
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	fbb2 f3f3 	udiv	r3, r2, r3
 8009726:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	2b0f      	cmp	r3, #15
 800972c:	d916      	bls.n	800975c <UART_SetConfig+0x404>
 800972e:	693b      	ldr	r3, [r7, #16]
 8009730:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009734:	d212      	bcs.n	800975c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009736:	693b      	ldr	r3, [r7, #16]
 8009738:	b29b      	uxth	r3, r3
 800973a:	f023 030f 	bic.w	r3, r3, #15
 800973e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009740:	693b      	ldr	r3, [r7, #16]
 8009742:	085b      	lsrs	r3, r3, #1
 8009744:	b29b      	uxth	r3, r3
 8009746:	f003 0307 	and.w	r3, r3, #7
 800974a:	b29a      	uxth	r2, r3
 800974c:	89fb      	ldrh	r3, [r7, #14]
 800974e:	4313      	orrs	r3, r2
 8009750:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	89fa      	ldrh	r2, [r7, #14]
 8009758:	60da      	str	r2, [r3, #12]
 800975a:	e04f      	b.n	80097fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	77bb      	strb	r3, [r7, #30]
 8009760:	e04c      	b.n	80097fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009762:	7ffb      	ldrb	r3, [r7, #31]
 8009764:	2b08      	cmp	r3, #8
 8009766:	d828      	bhi.n	80097ba <UART_SetConfig+0x462>
 8009768:	a201      	add	r2, pc, #4	; (adr r2, 8009770 <UART_SetConfig+0x418>)
 800976a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800976e:	bf00      	nop
 8009770:	08009795 	.word	0x08009795
 8009774:	0800979d 	.word	0x0800979d
 8009778:	080097a5 	.word	0x080097a5
 800977c:	080097bb 	.word	0x080097bb
 8009780:	080097ab 	.word	0x080097ab
 8009784:	080097bb 	.word	0x080097bb
 8009788:	080097bb 	.word	0x080097bb
 800978c:	080097bb 	.word	0x080097bb
 8009790:	080097b3 	.word	0x080097b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009794:	f7fe fde6 	bl	8008364 <HAL_RCC_GetPCLK1Freq>
 8009798:	61b8      	str	r0, [r7, #24]
        break;
 800979a:	e013      	b.n	80097c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800979c:	f7fe fdf6 	bl	800838c <HAL_RCC_GetPCLK2Freq>
 80097a0:	61b8      	str	r0, [r7, #24]
        break;
 80097a2:	e00f      	b.n	80097c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80097a4:	4b1d      	ldr	r3, [pc, #116]	; (800981c <UART_SetConfig+0x4c4>)
 80097a6:	61bb      	str	r3, [r7, #24]
        break;
 80097a8:	e00c      	b.n	80097c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80097aa:	f7fe fccb 	bl	8008144 <HAL_RCC_GetSysClockFreq>
 80097ae:	61b8      	str	r0, [r7, #24]
        break;
 80097b0:	e008      	b.n	80097c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097b6:	61bb      	str	r3, [r7, #24]
        break;
 80097b8:	e004      	b.n	80097c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80097be:	2301      	movs	r3, #1
 80097c0:	77bb      	strb	r3, [r7, #30]
        break;
 80097c2:	bf00      	nop
    }

    if (pclk != 0U)
 80097c4:	69bb      	ldr	r3, [r7, #24]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d018      	beq.n	80097fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	085a      	lsrs	r2, r3, #1
 80097d0:	69bb      	ldr	r3, [r7, #24]
 80097d2:	441a      	add	r2, r3
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	2b0f      	cmp	r3, #15
 80097e2:	d909      	bls.n	80097f8 <UART_SetConfig+0x4a0>
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ea:	d205      	bcs.n	80097f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097ec:	693b      	ldr	r3, [r7, #16]
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	60da      	str	r2, [r3, #12]
 80097f6:	e001      	b.n	80097fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2200      	movs	r2, #0
 8009806:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009808:	7fbb      	ldrb	r3, [r7, #30]
}
 800980a:	4618      	mov	r0, r3
 800980c:	3720      	adds	r7, #32
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	40007c00 	.word	0x40007c00
 8009818:	40023800 	.word	0x40023800
 800981c:	00f42400 	.word	0x00f42400

08009820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	2b00      	cmp	r3, #0
 8009832:	d00a      	beq.n	800984a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	685b      	ldr	r3, [r3, #4]
 800983a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800984e:	f003 0302 	and.w	r3, r3, #2
 8009852:	2b00      	cmp	r3, #0
 8009854:	d00a      	beq.n	800986c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	430a      	orrs	r2, r1
 800986a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d00a      	beq.n	800988e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	685b      	ldr	r3, [r3, #4]
 800987e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	430a      	orrs	r2, r1
 800988c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009892:	f003 0308 	and.w	r3, r3, #8
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00a      	beq.n	80098b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	430a      	orrs	r2, r1
 80098ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098b4:	f003 0310 	and.w	r3, r3, #16
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00a      	beq.n	80098d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689b      	ldr	r3, [r3, #8]
 80098c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	430a      	orrs	r2, r1
 80098d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098d6:	f003 0320 	and.w	r3, r3, #32
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d00a      	beq.n	80098f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	689b      	ldr	r3, [r3, #8]
 80098e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	430a      	orrs	r2, r1
 80098f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d01a      	beq.n	8009936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	430a      	orrs	r2, r1
 8009914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800991e:	d10a      	bne.n	8009936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	685b      	ldr	r3, [r3, #4]
 8009926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	430a      	orrs	r2, r1
 8009934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00a      	beq.n	8009958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	685b      	ldr	r3, [r3, #4]
 8009948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	430a      	orrs	r2, r1
 8009956:	605a      	str	r2, [r3, #4]
  }
}
 8009958:	bf00      	nop
 800995a:	370c      	adds	r7, #12
 800995c:	46bd      	mov	sp, r7
 800995e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009962:	4770      	bx	lr

08009964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b086      	sub	sp, #24
 8009968:	af02      	add	r7, sp, #8
 800996a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009974:	f7fa fd86 	bl	8004484 <HAL_GetTick>
 8009978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f003 0308 	and.w	r3, r3, #8
 8009984:	2b08      	cmp	r3, #8
 8009986:	d10e      	bne.n	80099a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800998c:	9300      	str	r3, [sp, #0]
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2200      	movs	r2, #0
 8009992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f000 f81b 	bl	80099d2 <UART_WaitOnFlagUntilTimeout>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d001      	beq.n	80099a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099a2:	2303      	movs	r3, #3
 80099a4:	e011      	b.n	80099ca <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2220      	movs	r2, #32
 80099aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2220      	movs	r2, #32
 80099b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2200      	movs	r2, #0
 80099b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2200      	movs	r2, #0
 80099be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2200      	movs	r2, #0
 80099c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80099c8:	2300      	movs	r3, #0
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}

080099d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b09c      	sub	sp, #112	; 0x70
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	60f8      	str	r0, [r7, #12]
 80099da:	60b9      	str	r1, [r7, #8]
 80099dc:	603b      	str	r3, [r7, #0]
 80099de:	4613      	mov	r3, r2
 80099e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099e2:	e0a7      	b.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80099e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099ea:	f000 80a3 	beq.w	8009b34 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099ee:	f7fa fd49 	bl	8004484 <HAL_GetTick>
 80099f2:	4602      	mov	r2, r0
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	1ad3      	subs	r3, r2, r3
 80099f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d302      	bcc.n	8009a04 <UART_WaitOnFlagUntilTimeout+0x32>
 80099fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d13f      	bne.n	8009a84 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a0c:	e853 3f00 	ldrex	r3, [r3]
 8009a10:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a18:	667b      	str	r3, [r7, #100]	; 0x64
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a22:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a24:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a28:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a2a:	e841 2300 	strex	r3, r2, [r1]
 8009a2e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d1e6      	bne.n	8009a04 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	3308      	adds	r3, #8
 8009a3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a40:	e853 3f00 	ldrex	r3, [r3]
 8009a44:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a48:	f023 0301 	bic.w	r3, r3, #1
 8009a4c:	663b      	str	r3, [r7, #96]	; 0x60
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	3308      	adds	r3, #8
 8009a54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a56:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a58:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a5e:	e841 2300 	strex	r3, r2, [r1]
 8009a62:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d1e5      	bne.n	8009a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2220      	movs	r2, #32
 8009a6e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2220      	movs	r2, #32
 8009a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009a80:	2303      	movs	r3, #3
 8009a82:	e068      	b.n	8009b56 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	f003 0304 	and.w	r3, r3, #4
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d050      	beq.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69db      	ldr	r3, [r3, #28]
 8009a98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009aa0:	d148      	bne.n	8009b34 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009aaa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab4:	e853 3f00 	ldrex	r3, [r3]
 8009ab8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009abc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009ac0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	461a      	mov	r2, r3
 8009ac8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aca:	637b      	str	r3, [r7, #52]	; 0x34
 8009acc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ace:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ad0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ad2:	e841 2300 	strex	r3, r2, [r1]
 8009ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d1e6      	bne.n	8009aac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	e853 3f00 	ldrex	r3, [r3]
 8009aec:	613b      	str	r3, [r7, #16]
   return(result);
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f023 0301 	bic.w	r3, r3, #1
 8009af4:	66bb      	str	r3, [r7, #104]	; 0x68
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3308      	adds	r3, #8
 8009afc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009afe:	623a      	str	r2, [r7, #32]
 8009b00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b02:	69f9      	ldr	r1, [r7, #28]
 8009b04:	6a3a      	ldr	r2, [r7, #32]
 8009b06:	e841 2300 	strex	r3, r2, [r1]
 8009b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b0c:	69bb      	ldr	r3, [r7, #24]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1e5      	bne.n	8009ade <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2220      	movs	r2, #32
 8009b16:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2220      	movs	r2, #32
 8009b1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2220      	movs	r2, #32
 8009b24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e010      	b.n	8009b56 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	69da      	ldr	r2, [r3, #28]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	bf0c      	ite	eq
 8009b44:	2301      	moveq	r3, #1
 8009b46:	2300      	movne	r3, #0
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	79fb      	ldrb	r3, [r7, #7]
 8009b4e:	429a      	cmp	r2, r3
 8009b50:	f43f af48 	beq.w	80099e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b54:	2300      	movs	r3, #0
}
 8009b56:	4618      	mov	r0, r3
 8009b58:	3770      	adds	r7, #112	; 0x70
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	bd80      	pop	{r7, pc}
	...

08009b60 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b087      	sub	sp, #28
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b74:	683a      	ldr	r2, [r7, #0]
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	f023 0101 	bic.w	r1, r3, #1
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	2b08      	cmp	r3, #8
 8009b88:	d102      	bne.n	8009b90 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009b8a:	2340      	movs	r3, #64	; 0x40
 8009b8c:	617b      	str	r3, [r7, #20]
 8009b8e:	e001      	b.n	8009b94 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009b90:	2300      	movs	r3, #0
 8009b92:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009b98:	697b      	ldr	r3, [r7, #20]
 8009b9a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009ba0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009ba6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009bac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009bb2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009bb8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009bbe:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009bc4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009bca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009bcc:	683b      	ldr	r3, [r7, #0]
 8009bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009bd0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009bd2:	683b      	ldr	r3, [r7, #0]
 8009bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bde:	693a      	ldr	r2, [r7, #16]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be8:	693a      	ldr	r2, [r7, #16]
 8009bea:	4313      	orrs	r3, r2
 8009bec:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009bee:	683b      	ldr	r3, [r7, #0]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bf2:	693a      	ldr	r2, [r7, #16]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8009bf8:	4b20      	ldr	r3, [pc, #128]	; (8009c7c <FMC_NORSRAM_Init+0x11c>)
 8009bfa:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c02:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c0a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009c12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	681a      	ldr	r2, [r3, #0]
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	43db      	mvns	r3, r3
 8009c22:	ea02 0103 	and.w	r1, r2, r3
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	693b      	ldr	r3, [r7, #16]
 8009c2c:	4319      	orrs	r1, r3
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c3c:	d10c      	bne.n	8009c58 <FMC_NORSRAM_Init+0xf8>
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d008      	beq.n	8009c58 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c52:	431a      	orrs	r2, r3
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d006      	beq.n	8009c6e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c68:	431a      	orrs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	371c      	adds	r7, #28
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	0008fb7f 	.word	0x0008fb7f

08009c80 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009c80:	b480      	push	{r7}
 8009c82:	b087      	sub	sp, #28
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	60f8      	str	r0, [r7, #12]
 8009c88:	60b9      	str	r1, [r7, #8]
 8009c8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	1c5a      	adds	r2, r3, #1
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	685b      	ldr	r3, [r3, #4]
 8009ca2:	011b      	lsls	r3, r3, #4
 8009ca4:	431a      	orrs	r2, r3
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	689b      	ldr	r3, [r3, #8]
 8009caa:	021b      	lsls	r3, r3, #8
 8009cac:	431a      	orrs	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	041b      	lsls	r3, r3, #16
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	691b      	ldr	r3, [r3, #16]
 8009cba:	3b01      	subs	r3, #1
 8009cbc:	051b      	lsls	r3, r3, #20
 8009cbe:	431a      	orrs	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	695b      	ldr	r3, [r3, #20]
 8009cc4:	3b02      	subs	r3, #2
 8009cc6:	061b      	lsls	r3, r3, #24
 8009cc8:	431a      	orrs	r2, r3
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	699b      	ldr	r3, [r3, #24]
 8009cce:	4313      	orrs	r3, r2
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	3201      	adds	r2, #1
 8009cd4:	4319      	orrs	r1, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ce8:	d113      	bne.n	8009d12 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	685b      	ldr	r3, [r3, #4]
 8009cee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009cf2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	3b01      	subs	r3, #1
 8009cfa:	051b      	lsls	r3, r3, #20
 8009cfc:	697a      	ldr	r2, [r7, #20]
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009d12:	2300      	movs	r3, #0
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	371c      	adds	r7, #28
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	60f8      	str	r0, [r7, #12]
 8009d28:	60b9      	str	r1, [r7, #8]
 8009d2a:	607a      	str	r2, [r7, #4]
 8009d2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009d34:	d11d      	bne.n	8009d72 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	687a      	ldr	r2, [r7, #4]
 8009d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d3e:	4b13      	ldr	r3, [pc, #76]	; (8009d8c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	68ba      	ldr	r2, [r7, #8]
 8009d44:	6811      	ldr	r1, [r2, #0]
 8009d46:	68ba      	ldr	r2, [r7, #8]
 8009d48:	6852      	ldr	r2, [r2, #4]
 8009d4a:	0112      	lsls	r2, r2, #4
 8009d4c:	4311      	orrs	r1, r2
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	6892      	ldr	r2, [r2, #8]
 8009d52:	0212      	lsls	r2, r2, #8
 8009d54:	4311      	orrs	r1, r2
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	6992      	ldr	r2, [r2, #24]
 8009d5a:	4311      	orrs	r1, r2
 8009d5c:	68ba      	ldr	r2, [r7, #8]
 8009d5e:	68d2      	ldr	r2, [r2, #12]
 8009d60:	0412      	lsls	r2, r2, #16
 8009d62:	430a      	orrs	r2, r1
 8009d64:	ea43 0102 	orr.w	r1, r3, r2
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	687a      	ldr	r2, [r7, #4]
 8009d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009d70:	e005      	b.n	8009d7e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009d7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009d7e:	2300      	movs	r3, #0
}
 8009d80:	4618      	mov	r0, r3
 8009d82:	3714      	adds	r7, #20
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr
 8009d8c:	cff00000 	.word	0xcff00000

08009d90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009d90:	b084      	sub	sp, #16
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	f107 001c 	add.w	r0, r7, #28
 8009d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009da4:	2b01      	cmp	r3, #1
 8009da6:	d120      	bne.n	8009dea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	68da      	ldr	r2, [r3, #12]
 8009db8:	4b20      	ldr	r3, [pc, #128]	; (8009e3c <USB_CoreInit+0xac>)
 8009dba:	4013      	ands	r3, r2
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009dcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009dce:	2b01      	cmp	r3, #1
 8009dd0:	d105      	bne.n	8009dde <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 fbee 	bl	800b5c0 <USB_CoreReset>
 8009de4:	4603      	mov	r3, r0
 8009de6:	73fb      	strb	r3, [r7, #15]
 8009de8:	e010      	b.n	8009e0c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f001 fbe2 	bl	800b5c0 <USB_CoreReset>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8009e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0e:	2b01      	cmp	r3, #1
 8009e10:	d10b      	bne.n	8009e2a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	689b      	ldr	r3, [r3, #8]
 8009e16:	f043 0206 	orr.w	r2, r3, #6
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	689b      	ldr	r3, [r3, #8]
 8009e22:	f043 0220 	orr.w	r2, r3, #32
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3710      	adds	r7, #16
 8009e30:	46bd      	mov	sp, r7
 8009e32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e36:	b004      	add	sp, #16
 8009e38:	4770      	bx	lr
 8009e3a:	bf00      	nop
 8009e3c:	ffbdffbf 	.word	0xffbdffbf

08009e40 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b087      	sub	sp, #28
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	60f8      	str	r0, [r7, #12]
 8009e48:	60b9      	str	r1, [r7, #8]
 8009e4a:	4613      	mov	r3, r2
 8009e4c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8009e4e:	79fb      	ldrb	r3, [r7, #7]
 8009e50:	2b02      	cmp	r3, #2
 8009e52:	d165      	bne.n	8009f20 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	4a41      	ldr	r2, [pc, #260]	; (8009f5c <USB_SetTurnaroundTime+0x11c>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d906      	bls.n	8009e6a <USB_SetTurnaroundTime+0x2a>
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	4a40      	ldr	r2, [pc, #256]	; (8009f60 <USB_SetTurnaroundTime+0x120>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d202      	bcs.n	8009e6a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009e64:	230f      	movs	r3, #15
 8009e66:	617b      	str	r3, [r7, #20]
 8009e68:	e062      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	4a3c      	ldr	r2, [pc, #240]	; (8009f60 <USB_SetTurnaroundTime+0x120>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d306      	bcc.n	8009e80 <USB_SetTurnaroundTime+0x40>
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	4a3b      	ldr	r2, [pc, #236]	; (8009f64 <USB_SetTurnaroundTime+0x124>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d202      	bcs.n	8009e80 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009e7a:	230e      	movs	r3, #14
 8009e7c:	617b      	str	r3, [r7, #20]
 8009e7e:	e057      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	4a38      	ldr	r2, [pc, #224]	; (8009f64 <USB_SetTurnaroundTime+0x124>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d306      	bcc.n	8009e96 <USB_SetTurnaroundTime+0x56>
 8009e88:	68bb      	ldr	r3, [r7, #8]
 8009e8a:	4a37      	ldr	r2, [pc, #220]	; (8009f68 <USB_SetTurnaroundTime+0x128>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d202      	bcs.n	8009e96 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8009e90:	230d      	movs	r3, #13
 8009e92:	617b      	str	r3, [r7, #20]
 8009e94:	e04c      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	4a33      	ldr	r2, [pc, #204]	; (8009f68 <USB_SetTurnaroundTime+0x128>)
 8009e9a:	4293      	cmp	r3, r2
 8009e9c:	d306      	bcc.n	8009eac <USB_SetTurnaroundTime+0x6c>
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	4a32      	ldr	r2, [pc, #200]	; (8009f6c <USB_SetTurnaroundTime+0x12c>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d802      	bhi.n	8009eac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009ea6:	230c      	movs	r3, #12
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e041      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4a2f      	ldr	r2, [pc, #188]	; (8009f6c <USB_SetTurnaroundTime+0x12c>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d906      	bls.n	8009ec2 <USB_SetTurnaroundTime+0x82>
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	4a2e      	ldr	r2, [pc, #184]	; (8009f70 <USB_SetTurnaroundTime+0x130>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d802      	bhi.n	8009ec2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009ebc:	230b      	movs	r3, #11
 8009ebe:	617b      	str	r3, [r7, #20]
 8009ec0:	e036      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	4a2a      	ldr	r2, [pc, #168]	; (8009f70 <USB_SetTurnaroundTime+0x130>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d906      	bls.n	8009ed8 <USB_SetTurnaroundTime+0x98>
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	4a29      	ldr	r2, [pc, #164]	; (8009f74 <USB_SetTurnaroundTime+0x134>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d802      	bhi.n	8009ed8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009ed2:	230a      	movs	r3, #10
 8009ed4:	617b      	str	r3, [r7, #20]
 8009ed6:	e02b      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	4a26      	ldr	r2, [pc, #152]	; (8009f74 <USB_SetTurnaroundTime+0x134>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d906      	bls.n	8009eee <USB_SetTurnaroundTime+0xae>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	4a25      	ldr	r2, [pc, #148]	; (8009f78 <USB_SetTurnaroundTime+0x138>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d202      	bcs.n	8009eee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009ee8:	2309      	movs	r3, #9
 8009eea:	617b      	str	r3, [r7, #20]
 8009eec:	e020      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	4a21      	ldr	r2, [pc, #132]	; (8009f78 <USB_SetTurnaroundTime+0x138>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d306      	bcc.n	8009f04 <USB_SetTurnaroundTime+0xc4>
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	4a20      	ldr	r2, [pc, #128]	; (8009f7c <USB_SetTurnaroundTime+0x13c>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d802      	bhi.n	8009f04 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009efe:	2308      	movs	r3, #8
 8009f00:	617b      	str	r3, [r7, #20]
 8009f02:	e015      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4a1d      	ldr	r2, [pc, #116]	; (8009f7c <USB_SetTurnaroundTime+0x13c>)
 8009f08:	4293      	cmp	r3, r2
 8009f0a:	d906      	bls.n	8009f1a <USB_SetTurnaroundTime+0xda>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	4a1c      	ldr	r2, [pc, #112]	; (8009f80 <USB_SetTurnaroundTime+0x140>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d202      	bcs.n	8009f1a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009f14:	2307      	movs	r3, #7
 8009f16:	617b      	str	r3, [r7, #20]
 8009f18:	e00a      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009f1a:	2306      	movs	r3, #6
 8009f1c:	617b      	str	r3, [r7, #20]
 8009f1e:	e007      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009f26:	2309      	movs	r3, #9
 8009f28:	617b      	str	r3, [r7, #20]
 8009f2a:	e001      	b.n	8009f30 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009f2c:	2309      	movs	r3, #9
 8009f2e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	68db      	ldr	r3, [r3, #12]
 8009f34:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	68da      	ldr	r2, [r3, #12]
 8009f40:	697b      	ldr	r3, [r7, #20]
 8009f42:	029b      	lsls	r3, r3, #10
 8009f44:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009f4e:	2300      	movs	r3, #0
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	371c      	adds	r7, #28
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr
 8009f5c:	00d8acbf 	.word	0x00d8acbf
 8009f60:	00e4e1c0 	.word	0x00e4e1c0
 8009f64:	00f42400 	.word	0x00f42400
 8009f68:	01067380 	.word	0x01067380
 8009f6c:	011a499f 	.word	0x011a499f
 8009f70:	01312cff 	.word	0x01312cff
 8009f74:	014ca43f 	.word	0x014ca43f
 8009f78:	016e3600 	.word	0x016e3600
 8009f7c:	01a6ab1f 	.word	0x01a6ab1f
 8009f80:	01e84800 	.word	0x01e84800

08009f84 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b083      	sub	sp, #12
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f043 0201 	orr.w	r2, r3, #1
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	370c      	adds	r7, #12
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa4:	4770      	bx	lr

08009fa6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b083      	sub	sp, #12
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	689b      	ldr	r3, [r3, #8]
 8009fb2:	f023 0201 	bic.w	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	370c      	adds	r7, #12
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr

08009fc8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b084      	sub	sp, #16
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
 8009fd0:	460b      	mov	r3, r1
 8009fd2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009fe4:	78fb      	ldrb	r3, [r7, #3]
 8009fe6:	2b01      	cmp	r3, #1
 8009fe8:	d115      	bne.n	800a016 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	68db      	ldr	r3, [r3, #12]
 8009fee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	f7fa fa50 	bl	800449c <HAL_Delay>
      ms++;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	3301      	adds	r3, #1
 800a000:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f001 fa4b 	bl	800b49e <USB_GetMode>
 800a008:	4603      	mov	r3, r0
 800a00a:	2b01      	cmp	r3, #1
 800a00c:	d01e      	beq.n	800a04c <USB_SetCurrentMode+0x84>
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2b31      	cmp	r3, #49	; 0x31
 800a012:	d9f0      	bls.n	8009ff6 <USB_SetCurrentMode+0x2e>
 800a014:	e01a      	b.n	800a04c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a016:	78fb      	ldrb	r3, [r7, #3]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d115      	bne.n	800a048 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a028:	2001      	movs	r0, #1
 800a02a:	f7fa fa37 	bl	800449c <HAL_Delay>
      ms++;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	3301      	adds	r3, #1
 800a032:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f001 fa32 	bl	800b49e <USB_GetMode>
 800a03a:	4603      	mov	r3, r0
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d005      	beq.n	800a04c <USB_SetCurrentMode+0x84>
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2b31      	cmp	r3, #49	; 0x31
 800a044:	d9f0      	bls.n	800a028 <USB_SetCurrentMode+0x60>
 800a046:	e001      	b.n	800a04c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a048:	2301      	movs	r3, #1
 800a04a:	e005      	b.n	800a058 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2b32      	cmp	r3, #50	; 0x32
 800a050:	d101      	bne.n	800a056 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	e000      	b.n	800a058 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3710      	adds	r7, #16
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a060:	b084      	sub	sp, #16
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	6078      	str	r0, [r7, #4]
 800a06a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a06e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a072:	2300      	movs	r3, #0
 800a074:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a07a:	2300      	movs	r3, #0
 800a07c:	613b      	str	r3, [r7, #16]
 800a07e:	e009      	b.n	800a094 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	693b      	ldr	r3, [r7, #16]
 800a084:	3340      	adds	r3, #64	; 0x40
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4413      	add	r3, r2
 800a08a:	2200      	movs	r2, #0
 800a08c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	3301      	adds	r3, #1
 800a092:	613b      	str	r3, [r7, #16]
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	2b0e      	cmp	r3, #14
 800a098:	d9f2      	bls.n	800a080 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a09a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d11c      	bne.n	800a0da <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	68fa      	ldr	r2, [r7, #12]
 800a0aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0ae:	f043 0302 	orr.w	r3, r3, #2
 800a0b2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	601a      	str	r2, [r3, #0]
 800a0d8:	e005      	b.n	800a0e6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0de:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f8:	4619      	mov	r1, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a100:	461a      	mov	r2, r3
 800a102:	680b      	ldr	r3, [r1, #0]
 800a104:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d10c      	bne.n	800a126 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a10c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d104      	bne.n	800a11c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a112:	2100      	movs	r1, #0
 800a114:	6878      	ldr	r0, [r7, #4]
 800a116:	f000 f965 	bl	800a3e4 <USB_SetDevSpeed>
 800a11a:	e008      	b.n	800a12e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a11c:	2101      	movs	r1, #1
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f000 f960 	bl	800a3e4 <USB_SetDevSpeed>
 800a124:	e003      	b.n	800a12e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a126:	2103      	movs	r1, #3
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f95b 	bl	800a3e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a12e:	2110      	movs	r1, #16
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f000 f8f3 	bl	800a31c <USB_FlushTxFifo>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d001      	beq.n	800a140 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f91f 	bl	800a384 <USB_FlushRxFifo>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a156:	461a      	mov	r2, r3
 800a158:	2300      	movs	r3, #0
 800a15a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a162:	461a      	mov	r2, r3
 800a164:	2300      	movs	r3, #0
 800a166:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a16e:	461a      	mov	r2, r3
 800a170:	2300      	movs	r3, #0
 800a172:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a174:	2300      	movs	r3, #0
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	e043      	b.n	800a202 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4413      	add	r3, r2
 800a182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a18c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a190:	d118      	bne.n	800a1c4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	015a      	lsls	r2, r3, #5
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	4413      	add	r3, r2
 800a1a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a4:	461a      	mov	r2, r3
 800a1a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	e013      	b.n	800a1d6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	015a      	lsls	r2, r3, #5
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ba:	461a      	mov	r2, r3
 800a1bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	e008      	b.n	800a1d6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	015a      	lsls	r2, r3, #5
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	015a      	lsls	r2, r3, #5
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	4413      	add	r3, r2
 800a1de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e2:	461a      	mov	r2, r3
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	015a      	lsls	r2, r3, #5
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a1fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	3301      	adds	r3, #1
 800a200:	613b      	str	r3, [r7, #16]
 800a202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a204:	693a      	ldr	r2, [r7, #16]
 800a206:	429a      	cmp	r2, r3
 800a208:	d3b7      	bcc.n	800a17a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a20a:	2300      	movs	r3, #0
 800a20c:	613b      	str	r3, [r7, #16]
 800a20e:	e043      	b.n	800a298 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a210:	693b      	ldr	r3, [r7, #16]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a222:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a226:	d118      	bne.n	800a25a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d10a      	bne.n	800a244 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a22e:	693b      	ldr	r3, [r7, #16]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	4413      	add	r3, r2
 800a236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a23a:	461a      	mov	r2, r3
 800a23c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a240:	6013      	str	r3, [r2, #0]
 800a242:	e013      	b.n	800a26c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a244:	693b      	ldr	r3, [r7, #16]
 800a246:	015a      	lsls	r2, r3, #5
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	4413      	add	r3, r2
 800a24c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a250:	461a      	mov	r2, r3
 800a252:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a256:	6013      	str	r3, [r2, #0]
 800a258:	e008      	b.n	800a26c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a25a:	693b      	ldr	r3, [r7, #16]
 800a25c:	015a      	lsls	r2, r3, #5
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	4413      	add	r3, r2
 800a262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a266:	461a      	mov	r2, r3
 800a268:	2300      	movs	r3, #0
 800a26a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	015a      	lsls	r2, r3, #5
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	4413      	add	r3, r2
 800a274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a278:	461a      	mov	r2, r3
 800a27a:	2300      	movs	r3, #0
 800a27c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	015a      	lsls	r2, r3, #5
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	4413      	add	r3, r2
 800a286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28a:	461a      	mov	r2, r3
 800a28c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a290:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	3301      	adds	r3, #1
 800a296:	613b      	str	r3, [r7, #16]
 800a298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29a:	693a      	ldr	r2, [r7, #16]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d3b7      	bcc.n	800a210 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	68fa      	ldr	r2, [r7, #12]
 800a2aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a2ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a2c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a2c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d105      	bne.n	800a2d4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	699b      	ldr	r3, [r3, #24]
 800a2cc:	f043 0210 	orr.w	r2, r3, #16
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	699a      	ldr	r2, [r3, #24]
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <USB_DevInit+0x2b4>)
 800a2da:	4313      	orrs	r3, r2
 800a2dc:	687a      	ldr	r2, [r7, #4]
 800a2de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a2e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d005      	beq.n	800a2f2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	699b      	ldr	r3, [r3, #24]
 800a2ea:	f043 0208 	orr.w	r2, r3, #8
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a2f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a2f4:	2b01      	cmp	r3, #1
 800a2f6:	d105      	bne.n	800a304 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	699a      	ldr	r2, [r3, #24]
 800a2fc:	4b06      	ldr	r3, [pc, #24]	; (800a318 <USB_DevInit+0x2b8>)
 800a2fe:	4313      	orrs	r3, r2
 800a300:	687a      	ldr	r2, [r7, #4]
 800a302:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a304:	7dfb      	ldrb	r3, [r7, #23]
}
 800a306:	4618      	mov	r0, r3
 800a308:	3718      	adds	r7, #24
 800a30a:	46bd      	mov	sp, r7
 800a30c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a310:	b004      	add	sp, #16
 800a312:	4770      	bx	lr
 800a314:	803c3800 	.word	0x803c3800
 800a318:	40000004 	.word	0x40000004

0800a31c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
 800a324:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	3301      	adds	r3, #1
 800a32e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	4a13      	ldr	r2, [pc, #76]	; (800a380 <USB_FlushTxFifo+0x64>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d901      	bls.n	800a33c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a338:	2303      	movs	r3, #3
 800a33a:	e01b      	b.n	800a374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	2b00      	cmp	r3, #0
 800a342:	daf2      	bge.n	800a32a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a344:	2300      	movs	r3, #0
 800a346:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	019b      	lsls	r3, r3, #6
 800a34c:	f043 0220 	orr.w	r2, r3, #32
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	3301      	adds	r3, #1
 800a358:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	4a08      	ldr	r2, [pc, #32]	; (800a380 <USB_FlushTxFifo+0x64>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d901      	bls.n	800a366 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e006      	b.n	800a374 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	691b      	ldr	r3, [r3, #16]
 800a36a:	f003 0320 	and.w	r3, r3, #32
 800a36e:	2b20      	cmp	r3, #32
 800a370:	d0f0      	beq.n	800a354 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	00030d40 	.word	0x00030d40

0800a384 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a384:	b480      	push	{r7}
 800a386:	b085      	sub	sp, #20
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	3301      	adds	r3, #1
 800a394:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4a11      	ldr	r2, [pc, #68]	; (800a3e0 <USB_FlushRxFifo+0x5c>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d901      	bls.n	800a3a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	e018      	b.n	800a3d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	daf2      	bge.n	800a390 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2210      	movs	r2, #16
 800a3b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	3301      	adds	r3, #1
 800a3b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	4a08      	ldr	r2, [pc, #32]	; (800a3e0 <USB_FlushRxFifo+0x5c>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d901      	bls.n	800a3c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a3c2:	2303      	movs	r3, #3
 800a3c4:	e006      	b.n	800a3d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	f003 0310 	and.w	r3, r3, #16
 800a3ce:	2b10      	cmp	r3, #16
 800a3d0:	d0f0      	beq.n	800a3b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a3d2:	2300      	movs	r3, #0
}
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	3714      	adds	r7, #20
 800a3d8:	46bd      	mov	sp, r7
 800a3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3de:	4770      	bx	lr
 800a3e0:	00030d40 	.word	0x00030d40

0800a3e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	460b      	mov	r3, r1
 800a3ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3fa:	681a      	ldr	r2, [r3, #0]
 800a3fc:	78fb      	ldrb	r3, [r7, #3]
 800a3fe:	68f9      	ldr	r1, [r7, #12]
 800a400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a404:	4313      	orrs	r3, r2
 800a406:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a408:	2300      	movs	r3, #0
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr

0800a416 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a416:	b480      	push	{r7}
 800a418:	b087      	sub	sp, #28
 800a41a:	af00      	add	r7, sp, #0
 800a41c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a428:	689b      	ldr	r3, [r3, #8]
 800a42a:	f003 0306 	and.w	r3, r3, #6
 800a42e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]
 800a43a:	e00a      	b.n	800a452 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2b02      	cmp	r3, #2
 800a440:	d002      	beq.n	800a448 <USB_GetDevSpeed+0x32>
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	2b06      	cmp	r3, #6
 800a446:	d102      	bne.n	800a44e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a448:	2302      	movs	r3, #2
 800a44a:	75fb      	strb	r3, [r7, #23]
 800a44c:	e001      	b.n	800a452 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a44e:	230f      	movs	r3, #15
 800a450:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a452:	7dfb      	ldrb	r3, [r7, #23]
}
 800a454:	4618      	mov	r0, r3
 800a456:	371c      	adds	r7, #28
 800a458:	46bd      	mov	sp, r7
 800a45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45e:	4770      	bx	lr

0800a460 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a460:	b480      	push	{r7}
 800a462:	b085      	sub	sp, #20
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	781b      	ldrb	r3, [r3, #0]
 800a472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a474:	683b      	ldr	r3, [r7, #0]
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d139      	bne.n	800a4f0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a482:	69da      	ldr	r2, [r3, #28]
 800a484:	683b      	ldr	r3, [r7, #0]
 800a486:	781b      	ldrb	r3, [r3, #0]
 800a488:	f003 030f 	and.w	r3, r3, #15
 800a48c:	2101      	movs	r1, #1
 800a48e:	fa01 f303 	lsl.w	r3, r1, r3
 800a492:	b29b      	uxth	r3, r3
 800a494:	68f9      	ldr	r1, [r7, #12]
 800a496:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a49a:	4313      	orrs	r3, r2
 800a49c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d153      	bne.n	800a55c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	015a      	lsls	r2, r3, #5
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	4413      	add	r3, r2
 800a4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	68db      	ldr	r3, [r3, #12]
 800a4c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4ca:	683b      	ldr	r3, [r7, #0]
 800a4cc:	791b      	ldrb	r3, [r3, #4]
 800a4ce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4d0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a4d2:	68bb      	ldr	r3, [r7, #8]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a4d8:	431a      	orrs	r2, r3
 800a4da:	68bb      	ldr	r3, [r7, #8]
 800a4dc:	0159      	lsls	r1, r3, #5
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	440b      	add	r3, r1
 800a4e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a4e6:	4619      	mov	r1, r3
 800a4e8:	4b20      	ldr	r3, [pc, #128]	; (800a56c <USB_ActivateEndpoint+0x10c>)
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	600b      	str	r3, [r1, #0]
 800a4ee:	e035      	b.n	800a55c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4f6:	69da      	ldr	r2, [r3, #28]
 800a4f8:	683b      	ldr	r3, [r7, #0]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	f003 030f 	and.w	r3, r3, #15
 800a500:	2101      	movs	r1, #1
 800a502:	fa01 f303 	lsl.w	r3, r1, r3
 800a506:	041b      	lsls	r3, r3, #16
 800a508:	68f9      	ldr	r1, [r7, #12]
 800a50a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a50e:	4313      	orrs	r3, r2
 800a510:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	015a      	lsls	r2, r3, #5
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	4413      	add	r3, r2
 800a51a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a524:	2b00      	cmp	r3, #0
 800a526:	d119      	bne.n	800a55c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	015a      	lsls	r2, r3, #5
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	4413      	add	r3, r2
 800a530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	68db      	ldr	r3, [r3, #12]
 800a53a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a53e:	683b      	ldr	r3, [r7, #0]
 800a540:	791b      	ldrb	r3, [r3, #4]
 800a542:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a544:	430b      	orrs	r3, r1
 800a546:	431a      	orrs	r2, r3
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	0159      	lsls	r1, r3, #5
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	440b      	add	r3, r1
 800a550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a554:	4619      	mov	r1, r3
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <USB_ActivateEndpoint+0x10c>)
 800a558:	4313      	orrs	r3, r2
 800a55a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3714      	adds	r7, #20
 800a562:	46bd      	mov	sp, r7
 800a564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a568:	4770      	bx	lr
 800a56a:	bf00      	nop
 800a56c:	10008000 	.word	0x10008000

0800a570 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a570:	b480      	push	{r7}
 800a572:	b085      	sub	sp, #20
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	785b      	ldrb	r3, [r3, #1]
 800a588:	2b01      	cmp	r3, #1
 800a58a:	d161      	bne.n	800a650 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	015a      	lsls	r2, r3, #5
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	4413      	add	r3, r2
 800a594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a59e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a5a2:	d11f      	bne.n	800a5e4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	015a      	lsls	r2, r3, #5
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	4413      	add	r3, r2
 800a5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68ba      	ldr	r2, [r7, #8]
 800a5b4:	0151      	lsls	r1, r2, #5
 800a5b6:	68fa      	ldr	r2, [r7, #12]
 800a5b8:	440a      	add	r2, r1
 800a5ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5c2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a5c4:	68bb      	ldr	r3, [r7, #8]
 800a5c6:	015a      	lsls	r2, r3, #5
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	4413      	add	r3, r2
 800a5cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	0151      	lsls	r1, r2, #5
 800a5d6:	68fa      	ldr	r2, [r7, #12]
 800a5d8:	440a      	add	r2, r1
 800a5da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a5de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a5e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	781b      	ldrb	r3, [r3, #0]
 800a5f0:	f003 030f 	and.w	r3, r3, #15
 800a5f4:	2101      	movs	r1, #1
 800a5f6:	fa01 f303 	lsl.w	r3, r1, r3
 800a5fa:	b29b      	uxth	r3, r3
 800a5fc:	43db      	mvns	r3, r3
 800a5fe:	68f9      	ldr	r1, [r7, #12]
 800a600:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a604:	4013      	ands	r3, r2
 800a606:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a60e:	69da      	ldr	r2, [r3, #28]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	781b      	ldrb	r3, [r3, #0]
 800a614:	f003 030f 	and.w	r3, r3, #15
 800a618:	2101      	movs	r1, #1
 800a61a:	fa01 f303 	lsl.w	r3, r1, r3
 800a61e:	b29b      	uxth	r3, r3
 800a620:	43db      	mvns	r3, r3
 800a622:	68f9      	ldr	r1, [r7, #12]
 800a624:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a628:	4013      	ands	r3, r2
 800a62a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	015a      	lsls	r2, r3, #5
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	4413      	add	r3, r2
 800a634:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a638:	681a      	ldr	r2, [r3, #0]
 800a63a:	68bb      	ldr	r3, [r7, #8]
 800a63c:	0159      	lsls	r1, r3, #5
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	440b      	add	r3, r1
 800a642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a646:	4619      	mov	r1, r3
 800a648:	4b35      	ldr	r3, [pc, #212]	; (800a720 <USB_DeactivateEndpoint+0x1b0>)
 800a64a:	4013      	ands	r3, r2
 800a64c:	600b      	str	r3, [r1, #0]
 800a64e:	e060      	b.n	800a712 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4413      	add	r3, r2
 800a658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a662:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a666:	d11f      	bne.n	800a6a8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	015a      	lsls	r2, r3, #5
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	4413      	add	r3, r2
 800a670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68ba      	ldr	r2, [r7, #8]
 800a678:	0151      	lsls	r1, r2, #5
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	440a      	add	r2, r1
 800a67e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a682:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a686:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	015a      	lsls	r2, r3, #5
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	4413      	add	r3, r2
 800a690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68ba      	ldr	r2, [r7, #8]
 800a698:	0151      	lsls	r1, r2, #5
 800a69a:	68fa      	ldr	r2, [r7, #12]
 800a69c:	440a      	add	r2, r1
 800a69e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a6a2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a6a6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	781b      	ldrb	r3, [r3, #0]
 800a6b4:	f003 030f 	and.w	r3, r3, #15
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a6be:	041b      	lsls	r3, r3, #16
 800a6c0:	43db      	mvns	r3, r3
 800a6c2:	68f9      	ldr	r1, [r7, #12]
 800a6c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6c8:	4013      	ands	r3, r2
 800a6ca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d2:	69da      	ldr	r2, [r3, #28]
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	781b      	ldrb	r3, [r3, #0]
 800a6d8:	f003 030f 	and.w	r3, r3, #15
 800a6dc:	2101      	movs	r1, #1
 800a6de:	fa01 f303 	lsl.w	r3, r1, r3
 800a6e2:	041b      	lsls	r3, r3, #16
 800a6e4:	43db      	mvns	r3, r3
 800a6e6:	68f9      	ldr	r1, [r7, #12]
 800a6e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a6ec:	4013      	ands	r3, r2
 800a6ee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	0159      	lsls	r1, r3, #5
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	440b      	add	r3, r1
 800a706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a70a:	4619      	mov	r1, r3
 800a70c:	4b05      	ldr	r3, [pc, #20]	; (800a724 <USB_DeactivateEndpoint+0x1b4>)
 800a70e:	4013      	ands	r3, r2
 800a710:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a712:	2300      	movs	r3, #0
}
 800a714:	4618      	mov	r0, r3
 800a716:	3714      	adds	r7, #20
 800a718:	46bd      	mov	sp, r7
 800a71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71e:	4770      	bx	lr
 800a720:	ec337800 	.word	0xec337800
 800a724:	eff37800 	.word	0xeff37800

0800a728 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b08a      	sub	sp, #40	; 0x28
 800a72c:	af02      	add	r7, sp, #8
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	4613      	mov	r3, r2
 800a734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	785b      	ldrb	r3, [r3, #1]
 800a744:	2b01      	cmp	r3, #1
 800a746:	f040 8163 	bne.w	800aa10 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	699b      	ldr	r3, [r3, #24]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d132      	bne.n	800a7b8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a752:	69bb      	ldr	r3, [r7, #24]
 800a754:	015a      	lsls	r2, r3, #5
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	4413      	add	r3, r2
 800a75a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a75e:	691a      	ldr	r2, [r3, #16]
 800a760:	69bb      	ldr	r3, [r7, #24]
 800a762:	0159      	lsls	r1, r3, #5
 800a764:	69fb      	ldr	r3, [r7, #28]
 800a766:	440b      	add	r3, r1
 800a768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a76c:	4619      	mov	r1, r3
 800a76e:	4ba5      	ldr	r3, [pc, #660]	; (800aa04 <USB_EPStartXfer+0x2dc>)
 800a770:	4013      	ands	r3, r2
 800a772:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	015a      	lsls	r2, r3, #5
 800a778:	69fb      	ldr	r3, [r7, #28]
 800a77a:	4413      	add	r3, r2
 800a77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	69ba      	ldr	r2, [r7, #24]
 800a784:	0151      	lsls	r1, r2, #5
 800a786:	69fa      	ldr	r2, [r7, #28]
 800a788:	440a      	add	r2, r1
 800a78a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a78e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a794:	69bb      	ldr	r3, [r7, #24]
 800a796:	015a      	lsls	r2, r3, #5
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	4413      	add	r3, r2
 800a79c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7a0:	691a      	ldr	r2, [r3, #16]
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	0159      	lsls	r1, r3, #5
 800a7a6:	69fb      	ldr	r3, [r7, #28]
 800a7a8:	440b      	add	r3, r1
 800a7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7ae:	4619      	mov	r1, r3
 800a7b0:	4b95      	ldr	r3, [pc, #596]	; (800aa08 <USB_EPStartXfer+0x2e0>)
 800a7b2:	4013      	ands	r3, r2
 800a7b4:	610b      	str	r3, [r1, #16]
 800a7b6:	e074      	b.n	800a8a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a7b8:	69bb      	ldr	r3, [r7, #24]
 800a7ba:	015a      	lsls	r2, r3, #5
 800a7bc:	69fb      	ldr	r3, [r7, #28]
 800a7be:	4413      	add	r3, r2
 800a7c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7c4:	691a      	ldr	r2, [r3, #16]
 800a7c6:	69bb      	ldr	r3, [r7, #24]
 800a7c8:	0159      	lsls	r1, r3, #5
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	440b      	add	r3, r1
 800a7ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	4b8c      	ldr	r3, [pc, #560]	; (800aa08 <USB_EPStartXfer+0x2e0>)
 800a7d6:	4013      	ands	r3, r2
 800a7d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a7da:	69bb      	ldr	r3, [r7, #24]
 800a7dc:	015a      	lsls	r2, r3, #5
 800a7de:	69fb      	ldr	r3, [r7, #28]
 800a7e0:	4413      	add	r3, r2
 800a7e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7e6:	691a      	ldr	r2, [r3, #16]
 800a7e8:	69bb      	ldr	r3, [r7, #24]
 800a7ea:	0159      	lsls	r1, r3, #5
 800a7ec:	69fb      	ldr	r3, [r7, #28]
 800a7ee:	440b      	add	r3, r1
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a7f4:	4619      	mov	r1, r3
 800a7f6:	4b83      	ldr	r3, [pc, #524]	; (800aa04 <USB_EPStartXfer+0x2dc>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a7fc:	69bb      	ldr	r3, [r7, #24]
 800a7fe:	015a      	lsls	r2, r3, #5
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	4413      	add	r3, r2
 800a804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a808:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	6999      	ldr	r1, [r3, #24]
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	68db      	ldr	r3, [r3, #12]
 800a812:	440b      	add	r3, r1
 800a814:	1e59      	subs	r1, r3, #1
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	fbb1 f3f3 	udiv	r3, r1, r3
 800a81e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a820:	4b7a      	ldr	r3, [pc, #488]	; (800aa0c <USB_EPStartXfer+0x2e4>)
 800a822:	400b      	ands	r3, r1
 800a824:	69b9      	ldr	r1, [r7, #24]
 800a826:	0148      	lsls	r0, r1, #5
 800a828:	69f9      	ldr	r1, [r7, #28]
 800a82a:	4401      	add	r1, r0
 800a82c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a830:	4313      	orrs	r3, r2
 800a832:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	015a      	lsls	r2, r3, #5
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	4413      	add	r3, r2
 800a83c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a840:	691a      	ldr	r2, [r3, #16]
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	699b      	ldr	r3, [r3, #24]
 800a846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a84a:	69b9      	ldr	r1, [r7, #24]
 800a84c:	0148      	lsls	r0, r1, #5
 800a84e:	69f9      	ldr	r1, [r7, #28]
 800a850:	4401      	add	r1, r0
 800a852:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a856:	4313      	orrs	r3, r2
 800a858:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a85a:	68bb      	ldr	r3, [r7, #8]
 800a85c:	791b      	ldrb	r3, [r3, #4]
 800a85e:	2b01      	cmp	r3, #1
 800a860:	d11f      	bne.n	800a8a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	015a      	lsls	r2, r3, #5
 800a866:	69fb      	ldr	r3, [r7, #28]
 800a868:	4413      	add	r3, r2
 800a86a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a86e:	691b      	ldr	r3, [r3, #16]
 800a870:	69ba      	ldr	r2, [r7, #24]
 800a872:	0151      	lsls	r1, r2, #5
 800a874:	69fa      	ldr	r2, [r7, #28]
 800a876:	440a      	add	r2, r1
 800a878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a87c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a880:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	015a      	lsls	r2, r3, #5
 800a886:	69fb      	ldr	r3, [r7, #28]
 800a888:	4413      	add	r3, r2
 800a88a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	69ba      	ldr	r2, [r7, #24]
 800a892:	0151      	lsls	r1, r2, #5
 800a894:	69fa      	ldr	r2, [r7, #28]
 800a896:	440a      	add	r2, r1
 800a898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a89c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a8a2:	79fb      	ldrb	r3, [r7, #7]
 800a8a4:	2b01      	cmp	r3, #1
 800a8a6:	d14b      	bne.n	800a940 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	695b      	ldr	r3, [r3, #20]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d009      	beq.n	800a8c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a8b0:	69bb      	ldr	r3, [r7, #24]
 800a8b2:	015a      	lsls	r2, r3, #5
 800a8b4:	69fb      	ldr	r3, [r7, #28]
 800a8b6:	4413      	add	r3, r2
 800a8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8bc:	461a      	mov	r2, r3
 800a8be:	68bb      	ldr	r3, [r7, #8]
 800a8c0:	695b      	ldr	r3, [r3, #20]
 800a8c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	791b      	ldrb	r3, [r3, #4]
 800a8c8:	2b01      	cmp	r3, #1
 800a8ca:	d128      	bne.n	800a91e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d110      	bne.n	800a8fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	015a      	lsls	r2, r3, #5
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	4413      	add	r3, r2
 800a8e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	69ba      	ldr	r2, [r7, #24]
 800a8ec:	0151      	lsls	r1, r2, #5
 800a8ee:	69fa      	ldr	r2, [r7, #28]
 800a8f0:	440a      	add	r2, r1
 800a8f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a8fa:	6013      	str	r3, [r2, #0]
 800a8fc:	e00f      	b.n	800a91e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a8fe:	69bb      	ldr	r3, [r7, #24]
 800a900:	015a      	lsls	r2, r3, #5
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	4413      	add	r3, r2
 800a906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	69ba      	ldr	r2, [r7, #24]
 800a90e:	0151      	lsls	r1, r2, #5
 800a910:	69fa      	ldr	r2, [r7, #28]
 800a912:	440a      	add	r2, r1
 800a914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a91c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	015a      	lsls	r2, r3, #5
 800a922:	69fb      	ldr	r3, [r7, #28]
 800a924:	4413      	add	r3, r2
 800a926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	69ba      	ldr	r2, [r7, #24]
 800a92e:	0151      	lsls	r1, r2, #5
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	440a      	add	r2, r1
 800a934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a938:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a93c:	6013      	str	r3, [r2, #0]
 800a93e:	e137      	b.n	800abb0 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a940:	69bb      	ldr	r3, [r7, #24]
 800a942:	015a      	lsls	r2, r3, #5
 800a944:	69fb      	ldr	r3, [r7, #28]
 800a946:	4413      	add	r3, r2
 800a948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	69ba      	ldr	r2, [r7, #24]
 800a950:	0151      	lsls	r1, r2, #5
 800a952:	69fa      	ldr	r2, [r7, #28]
 800a954:	440a      	add	r2, r1
 800a956:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a95a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a95e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a960:	68bb      	ldr	r3, [r7, #8]
 800a962:	791b      	ldrb	r3, [r3, #4]
 800a964:	2b01      	cmp	r3, #1
 800a966:	d015      	beq.n	800a994 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a968:	68bb      	ldr	r3, [r7, #8]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	f000 811f 	beq.w	800abb0 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	781b      	ldrb	r3, [r3, #0]
 800a97e:	f003 030f 	and.w	r3, r3, #15
 800a982:	2101      	movs	r1, #1
 800a984:	fa01 f303 	lsl.w	r3, r1, r3
 800a988:	69f9      	ldr	r1, [r7, #28]
 800a98a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a98e:	4313      	orrs	r3, r2
 800a990:	634b      	str	r3, [r1, #52]	; 0x34
 800a992:	e10d      	b.n	800abb0 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a994:	69fb      	ldr	r3, [r7, #28]
 800a996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d110      	bne.n	800a9c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a9a4:	69bb      	ldr	r3, [r7, #24]
 800a9a6:	015a      	lsls	r2, r3, #5
 800a9a8:	69fb      	ldr	r3, [r7, #28]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69ba      	ldr	r2, [r7, #24]
 800a9b4:	0151      	lsls	r1, r2, #5
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	440a      	add	r2, r1
 800a9ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a9c2:	6013      	str	r3, [r2, #0]
 800a9c4:	e00f      	b.n	800a9e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	015a      	lsls	r2, r3, #5
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	0151      	lsls	r1, r2, #5
 800a9d8:	69fa      	ldr	r2, [r7, #28]
 800a9da:	440a      	add	r2, r1
 800a9dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a9e6:	68bb      	ldr	r3, [r7, #8]
 800a9e8:	6919      	ldr	r1, [r3, #16]
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	781a      	ldrb	r2, [r3, #0]
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	b298      	uxth	r0, r3
 800a9f4:	79fb      	ldrb	r3, [r7, #7]
 800a9f6:	9300      	str	r3, [sp, #0]
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 faea 	bl	800afd4 <USB_WritePacket>
 800aa00:	e0d6      	b.n	800abb0 <USB_EPStartXfer+0x488>
 800aa02:	bf00      	nop
 800aa04:	e007ffff 	.word	0xe007ffff
 800aa08:	fff80000 	.word	0xfff80000
 800aa0c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	015a      	lsls	r2, r3, #5
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	4413      	add	r3, r2
 800aa18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa1c:	691a      	ldr	r2, [r3, #16]
 800aa1e:	69bb      	ldr	r3, [r7, #24]
 800aa20:	0159      	lsls	r1, r3, #5
 800aa22:	69fb      	ldr	r3, [r7, #28]
 800aa24:	440b      	add	r3, r1
 800aa26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	4b63      	ldr	r3, [pc, #396]	; (800abbc <USB_EPStartXfer+0x494>)
 800aa2e:	4013      	ands	r3, r2
 800aa30:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	015a      	lsls	r2, r3, #5
 800aa36:	69fb      	ldr	r3, [r7, #28]
 800aa38:	4413      	add	r3, r2
 800aa3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa3e:	691a      	ldr	r2, [r3, #16]
 800aa40:	69bb      	ldr	r3, [r7, #24]
 800aa42:	0159      	lsls	r1, r3, #5
 800aa44:	69fb      	ldr	r3, [r7, #28]
 800aa46:	440b      	add	r3, r1
 800aa48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa4c:	4619      	mov	r1, r3
 800aa4e:	4b5c      	ldr	r3, [pc, #368]	; (800abc0 <USB_EPStartXfer+0x498>)
 800aa50:	4013      	ands	r3, r2
 800aa52:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d123      	bne.n	800aaa4 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	015a      	lsls	r2, r3, #5
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	4413      	add	r3, r2
 800aa64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa68:	691a      	ldr	r2, [r3, #16]
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	68db      	ldr	r3, [r3, #12]
 800aa6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aa72:	69b9      	ldr	r1, [r7, #24]
 800aa74:	0148      	lsls	r0, r1, #5
 800aa76:	69f9      	ldr	r1, [r7, #28]
 800aa78:	4401      	add	r1, r0
 800aa7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800aa82:	69bb      	ldr	r3, [r7, #24]
 800aa84:	015a      	lsls	r2, r3, #5
 800aa86:	69fb      	ldr	r3, [r7, #28]
 800aa88:	4413      	add	r3, r2
 800aa8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	69ba      	ldr	r2, [r7, #24]
 800aa92:	0151      	lsls	r1, r2, #5
 800aa94:	69fa      	ldr	r2, [r7, #28]
 800aa96:	440a      	add	r2, r1
 800aa98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aa9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aaa0:	6113      	str	r3, [r2, #16]
 800aaa2:	e037      	b.n	800ab14 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800aaa4:	68bb      	ldr	r3, [r7, #8]
 800aaa6:	699a      	ldr	r2, [r3, #24]
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	68db      	ldr	r3, [r3, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	1e5a      	subs	r2, r3, #1
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	68db      	ldr	r3, [r3, #12]
 800aab4:	fbb2 f3f3 	udiv	r3, r2, r3
 800aab8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	8afa      	ldrh	r2, [r7, #22]
 800aac0:	fb03 f202 	mul.w	r2, r3, r2
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	69fb      	ldr	r3, [r7, #28]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aad4:	691a      	ldr	r2, [r3, #16]
 800aad6:	8afb      	ldrh	r3, [r7, #22]
 800aad8:	04d9      	lsls	r1, r3, #19
 800aada:	4b3a      	ldr	r3, [pc, #232]	; (800abc4 <USB_EPStartXfer+0x49c>)
 800aadc:	400b      	ands	r3, r1
 800aade:	69b9      	ldr	r1, [r7, #24]
 800aae0:	0148      	lsls	r0, r1, #5
 800aae2:	69f9      	ldr	r1, [r7, #28]
 800aae4:	4401      	add	r1, r0
 800aae6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800aaea:	4313      	orrs	r3, r2
 800aaec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	015a      	lsls	r2, r3, #5
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	4413      	add	r3, r2
 800aaf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aafa:	691a      	ldr	r2, [r3, #16]
 800aafc:	68bb      	ldr	r3, [r7, #8]
 800aafe:	69db      	ldr	r3, [r3, #28]
 800ab00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ab04:	69b9      	ldr	r1, [r7, #24]
 800ab06:	0148      	lsls	r0, r1, #5
 800ab08:	69f9      	ldr	r1, [r7, #28]
 800ab0a:	4401      	add	r1, r0
 800ab0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ab10:	4313      	orrs	r3, r2
 800ab12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ab14:	79fb      	ldrb	r3, [r7, #7]
 800ab16:	2b01      	cmp	r3, #1
 800ab18:	d10d      	bne.n	800ab36 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	691b      	ldr	r3, [r3, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d009      	beq.n	800ab36 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	6919      	ldr	r1, [r3, #16]
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	015a      	lsls	r2, r3, #5
 800ab2a:	69fb      	ldr	r3, [r7, #28]
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab32:	460a      	mov	r2, r1
 800ab34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	791b      	ldrb	r3, [r3, #4]
 800ab3a:	2b01      	cmp	r3, #1
 800ab3c:	d128      	bne.n	800ab90 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab44:	689b      	ldr	r3, [r3, #8]
 800ab46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d110      	bne.n	800ab70 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ab4e:	69bb      	ldr	r3, [r7, #24]
 800ab50:	015a      	lsls	r2, r3, #5
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	4413      	add	r3, r2
 800ab56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	0151      	lsls	r1, r2, #5
 800ab60:	69fa      	ldr	r2, [r7, #28]
 800ab62:	440a      	add	r2, r1
 800ab64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab6c:	6013      	str	r3, [r2, #0]
 800ab6e:	e00f      	b.n	800ab90 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ab70:	69bb      	ldr	r3, [r7, #24]
 800ab72:	015a      	lsls	r2, r3, #5
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	4413      	add	r3, r2
 800ab78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	69ba      	ldr	r2, [r7, #24]
 800ab80:	0151      	lsls	r1, r2, #5
 800ab82:	69fa      	ldr	r2, [r7, #28]
 800ab84:	440a      	add	r2, r1
 800ab86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ab90:	69bb      	ldr	r3, [r7, #24]
 800ab92:	015a      	lsls	r2, r3, #5
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	4413      	add	r3, r2
 800ab98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	0151      	lsls	r1, r2, #5
 800aba2:	69fa      	ldr	r2, [r7, #28]
 800aba4:	440a      	add	r2, r1
 800aba6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abaa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abb0:	2300      	movs	r3, #0
}
 800abb2:	4618      	mov	r0, r3
 800abb4:	3720      	adds	r7, #32
 800abb6:	46bd      	mov	sp, r7
 800abb8:	bd80      	pop	{r7, pc}
 800abba:	bf00      	nop
 800abbc:	fff80000 	.word	0xfff80000
 800abc0:	e007ffff 	.word	0xe007ffff
 800abc4:	1ff80000 	.word	0x1ff80000

0800abc8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	4613      	mov	r3, r2
 800abd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800abda:	68bb      	ldr	r3, [r7, #8]
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800abe0:	68bb      	ldr	r3, [r7, #8]
 800abe2:	785b      	ldrb	r3, [r3, #1]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	f040 80ce 	bne.w	800ad86 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	699b      	ldr	r3, [r3, #24]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d132      	bne.n	800ac58 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	015a      	lsls	r2, r3, #5
 800abf6:	697b      	ldr	r3, [r7, #20]
 800abf8:	4413      	add	r3, r2
 800abfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abfe:	691a      	ldr	r2, [r3, #16]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	0159      	lsls	r1, r3, #5
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	440b      	add	r3, r1
 800ac08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac0c:	4619      	mov	r1, r3
 800ac0e:	4b9a      	ldr	r3, [pc, #616]	; (800ae78 <USB_EP0StartXfer+0x2b0>)
 800ac10:	4013      	ands	r3, r2
 800ac12:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ac14:	693b      	ldr	r3, [r7, #16]
 800ac16:	015a      	lsls	r2, r3, #5
 800ac18:	697b      	ldr	r3, [r7, #20]
 800ac1a:	4413      	add	r3, r2
 800ac1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	693a      	ldr	r2, [r7, #16]
 800ac24:	0151      	lsls	r1, r2, #5
 800ac26:	697a      	ldr	r2, [r7, #20]
 800ac28:	440a      	add	r2, r1
 800ac2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ac32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	015a      	lsls	r2, r3, #5
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	4413      	add	r3, r2
 800ac3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac40:	691a      	ldr	r2, [r3, #16]
 800ac42:	693b      	ldr	r3, [r7, #16]
 800ac44:	0159      	lsls	r1, r3, #5
 800ac46:	697b      	ldr	r3, [r7, #20]
 800ac48:	440b      	add	r3, r1
 800ac4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4b8a      	ldr	r3, [pc, #552]	; (800ae7c <USB_EP0StartXfer+0x2b4>)
 800ac52:	4013      	ands	r3, r2
 800ac54:	610b      	str	r3, [r1, #16]
 800ac56:	e04e      	b.n	800acf6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ac58:	693b      	ldr	r3, [r7, #16]
 800ac5a:	015a      	lsls	r2, r3, #5
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	4413      	add	r3, r2
 800ac60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac64:	691a      	ldr	r2, [r3, #16]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	0159      	lsls	r1, r3, #5
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	440b      	add	r3, r1
 800ac6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac72:	4619      	mov	r1, r3
 800ac74:	4b81      	ldr	r3, [pc, #516]	; (800ae7c <USB_EP0StartXfer+0x2b4>)
 800ac76:	4013      	ands	r3, r2
 800ac78:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ac7a:	693b      	ldr	r3, [r7, #16]
 800ac7c:	015a      	lsls	r2, r3, #5
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	4413      	add	r3, r2
 800ac82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac86:	691a      	ldr	r2, [r3, #16]
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	0159      	lsls	r1, r3, #5
 800ac8c:	697b      	ldr	r3, [r7, #20]
 800ac8e:	440b      	add	r3, r1
 800ac90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac94:	4619      	mov	r1, r3
 800ac96:	4b78      	ldr	r3, [pc, #480]	; (800ae78 <USB_EP0StartXfer+0x2b0>)
 800ac98:	4013      	ands	r3, r2
 800ac9a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	699a      	ldr	r2, [r3, #24]
 800aca0:	68bb      	ldr	r3, [r7, #8]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d903      	bls.n	800acb0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	68da      	ldr	r2, [r3, #12]
 800acac:	68bb      	ldr	r3, [r7, #8]
 800acae:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	015a      	lsls	r2, r3, #5
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	4413      	add	r3, r2
 800acb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	0151      	lsls	r1, r2, #5
 800acc2:	697a      	ldr	r2, [r7, #20]
 800acc4:	440a      	add	r2, r1
 800acc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800acca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800acce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	015a      	lsls	r2, r3, #5
 800acd4:	697b      	ldr	r3, [r7, #20]
 800acd6:	4413      	add	r3, r2
 800acd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acdc:	691a      	ldr	r2, [r3, #16]
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ace6:	6939      	ldr	r1, [r7, #16]
 800ace8:	0148      	lsls	r0, r1, #5
 800acea:	6979      	ldr	r1, [r7, #20]
 800acec:	4401      	add	r1, r0
 800acee:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800acf2:	4313      	orrs	r3, r2
 800acf4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800acf6:	79fb      	ldrb	r3, [r7, #7]
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d11e      	bne.n	800ad3a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	695b      	ldr	r3, [r3, #20]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d009      	beq.n	800ad18 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	015a      	lsls	r2, r3, #5
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	4413      	add	r3, r2
 800ad0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad10:	461a      	mov	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	695b      	ldr	r3, [r3, #20]
 800ad16:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad18:	693b      	ldr	r3, [r7, #16]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	697b      	ldr	r3, [r7, #20]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	693a      	ldr	r2, [r7, #16]
 800ad28:	0151      	lsls	r1, r2, #5
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad36:	6013      	str	r3, [r2, #0]
 800ad38:	e097      	b.n	800ae6a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ad3a:	693b      	ldr	r3, [r7, #16]
 800ad3c:	015a      	lsls	r2, r3, #5
 800ad3e:	697b      	ldr	r3, [r7, #20]
 800ad40:	4413      	add	r3, r2
 800ad42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	0151      	lsls	r1, r2, #5
 800ad4c:	697a      	ldr	r2, [r7, #20]
 800ad4e:	440a      	add	r2, r1
 800ad50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad54:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ad58:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	699b      	ldr	r3, [r3, #24]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 8083 	beq.w	800ae6a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ad64:	697b      	ldr	r3, [r7, #20]
 800ad66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad6c:	68bb      	ldr	r3, [r7, #8]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f003 030f 	and.w	r3, r3, #15
 800ad74:	2101      	movs	r1, #1
 800ad76:	fa01 f303 	lsl.w	r3, r1, r3
 800ad7a:	6979      	ldr	r1, [r7, #20]
 800ad7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad80:	4313      	orrs	r3, r2
 800ad82:	634b      	str	r3, [r1, #52]	; 0x34
 800ad84:	e071      	b.n	800ae6a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ad86:	693b      	ldr	r3, [r7, #16]
 800ad88:	015a      	lsls	r2, r3, #5
 800ad8a:	697b      	ldr	r3, [r7, #20]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad92:	691a      	ldr	r2, [r3, #16]
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	0159      	lsls	r1, r3, #5
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	440b      	add	r3, r1
 800ad9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada0:	4619      	mov	r1, r3
 800ada2:	4b36      	ldr	r3, [pc, #216]	; (800ae7c <USB_EP0StartXfer+0x2b4>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ada8:	693b      	ldr	r3, [r7, #16]
 800adaa:	015a      	lsls	r2, r3, #5
 800adac:	697b      	ldr	r3, [r7, #20]
 800adae:	4413      	add	r3, r2
 800adb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adb4:	691a      	ldr	r2, [r3, #16]
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	0159      	lsls	r1, r3, #5
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	440b      	add	r3, r1
 800adbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adc2:	4619      	mov	r1, r3
 800adc4:	4b2c      	ldr	r3, [pc, #176]	; (800ae78 <USB_EP0StartXfer+0x2b0>)
 800adc6:	4013      	ands	r3, r2
 800adc8:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	699b      	ldr	r3, [r3, #24]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d003      	beq.n	800adda <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	68da      	ldr	r2, [r3, #12]
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	68da      	ldr	r2, [r3, #12]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ade2:	693b      	ldr	r3, [r7, #16]
 800ade4:	015a      	lsls	r2, r3, #5
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	4413      	add	r3, r2
 800adea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adee:	691b      	ldr	r3, [r3, #16]
 800adf0:	693a      	ldr	r2, [r7, #16]
 800adf2:	0151      	lsls	r1, r2, #5
 800adf4:	697a      	ldr	r2, [r7, #20]
 800adf6:	440a      	add	r2, r1
 800adf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	015a      	lsls	r2, r3, #5
 800ae06:	697b      	ldr	r3, [r7, #20]
 800ae08:	4413      	add	r3, r2
 800ae0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0e:	691a      	ldr	r2, [r3, #16]
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	69db      	ldr	r3, [r3, #28]
 800ae14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae18:	6939      	ldr	r1, [r7, #16]
 800ae1a:	0148      	lsls	r0, r1, #5
 800ae1c:	6979      	ldr	r1, [r7, #20]
 800ae1e:	4401      	add	r1, r0
 800ae20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ae24:	4313      	orrs	r3, r2
 800ae26:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ae28:	79fb      	ldrb	r3, [r7, #7]
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d10d      	bne.n	800ae4a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	691b      	ldr	r3, [r3, #16]
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d009      	beq.n	800ae4a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	6919      	ldr	r1, [r3, #16]
 800ae3a:	693b      	ldr	r3, [r7, #16]
 800ae3c:	015a      	lsls	r2, r3, #5
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	4413      	add	r3, r2
 800ae42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae46:	460a      	mov	r2, r1
 800ae48:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	693a      	ldr	r2, [r7, #16]
 800ae5a:	0151      	lsls	r1, r2, #5
 800ae5c:	697a      	ldr	r2, [r7, #20]
 800ae5e:	440a      	add	r2, r1
 800ae60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae64:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	371c      	adds	r7, #28
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr
 800ae78:	e007ffff 	.word	0xe007ffff
 800ae7c:	fff80000 	.word	0xfff80000

0800ae80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b087      	sub	sp, #28
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
 800ae88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae8a:	2300      	movs	r3, #0
 800ae8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	785b      	ldrb	r3, [r3, #1]
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d14a      	bne.n	800af34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae9e:	683b      	ldr	r3, [r7, #0]
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	015a      	lsls	r2, r3, #5
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	4413      	add	r3, r2
 800aea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aeb2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aeb6:	f040 8086 	bne.w	800afc6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	693b      	ldr	r3, [r7, #16]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	7812      	ldrb	r2, [r2, #0]
 800aece:	0151      	lsls	r1, r2, #5
 800aed0:	693a      	ldr	r2, [r7, #16]
 800aed2:	440a      	add	r2, r1
 800aed4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aed8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800aedc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	781b      	ldrb	r3, [r3, #0]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	7812      	ldrb	r2, [r2, #0]
 800aef2:	0151      	lsls	r1, r2, #5
 800aef4:	693a      	ldr	r2, [r7, #16]
 800aef6:	440a      	add	r2, r1
 800aef8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	3301      	adds	r3, #1
 800af06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f242 7210 	movw	r2, #10000	; 0x2710
 800af0e:	4293      	cmp	r3, r2
 800af10:	d902      	bls.n	800af18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800af12:	2301      	movs	r3, #1
 800af14:	75fb      	strb	r3, [r7, #23]
          break;
 800af16:	e056      	b.n	800afc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	781b      	ldrb	r3, [r3, #0]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af30:	d0e7      	beq.n	800af02 <USB_EPStopXfer+0x82>
 800af32:	e048      	b.n	800afc6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	781b      	ldrb	r3, [r3, #0]
 800af38:	015a      	lsls	r2, r3, #5
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	4413      	add	r3, r2
 800af3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af48:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af4c:	d13b      	bne.n	800afc6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	781b      	ldrb	r3, [r3, #0]
 800af52:	015a      	lsls	r2, r3, #5
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	4413      	add	r3, r2
 800af58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	7812      	ldrb	r2, [r2, #0]
 800af62:	0151      	lsls	r1, r2, #5
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	440a      	add	r2, r1
 800af68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800af72:	683b      	ldr	r3, [r7, #0]
 800af74:	781b      	ldrb	r3, [r3, #0]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	693b      	ldr	r3, [r7, #16]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	683a      	ldr	r2, [r7, #0]
 800af84:	7812      	ldrb	r2, [r2, #0]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	693a      	ldr	r2, [r7, #16]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	3301      	adds	r3, #1
 800af9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f242 7210 	movw	r2, #10000	; 0x2710
 800afa2:	4293      	cmp	r3, r2
 800afa4:	d902      	bls.n	800afac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800afa6:	2301      	movs	r3, #1
 800afa8:	75fb      	strb	r3, [r7, #23]
          break;
 800afaa:	e00c      	b.n	800afc6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800afac:	683b      	ldr	r3, [r7, #0]
 800afae:	781b      	ldrb	r3, [r3, #0]
 800afb0:	015a      	lsls	r2, r3, #5
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	4413      	add	r3, r2
 800afb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800afc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800afc4:	d0e7      	beq.n	800af96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b089      	sub	sp, #36	; 0x24
 800afd8:	af00      	add	r7, sp, #0
 800afda:	60f8      	str	r0, [r7, #12]
 800afdc:	60b9      	str	r1, [r7, #8]
 800afde:	4611      	mov	r1, r2
 800afe0:	461a      	mov	r2, r3
 800afe2:	460b      	mov	r3, r1
 800afe4:	71fb      	strb	r3, [r7, #7]
 800afe6:	4613      	mov	r3, r2
 800afe8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800afee:	68bb      	ldr	r3, [r7, #8]
 800aff0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800aff2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d123      	bne.n	800b042 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800affa:	88bb      	ldrh	r3, [r7, #4]
 800affc:	3303      	adds	r3, #3
 800affe:	089b      	lsrs	r3, r3, #2
 800b000:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b002:	2300      	movs	r3, #0
 800b004:	61bb      	str	r3, [r7, #24]
 800b006:	e018      	b.n	800b03a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	031a      	lsls	r2, r3, #12
 800b00c:	697b      	ldr	r3, [r7, #20]
 800b00e:	4413      	add	r3, r2
 800b010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b014:	461a      	mov	r2, r3
 800b016:	69fb      	ldr	r3, [r7, #28]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b01c:	69fb      	ldr	r3, [r7, #28]
 800b01e:	3301      	adds	r3, #1
 800b020:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b022:	69fb      	ldr	r3, [r7, #28]
 800b024:	3301      	adds	r3, #1
 800b026:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	3301      	adds	r3, #1
 800b02c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b02e:	69fb      	ldr	r3, [r7, #28]
 800b030:	3301      	adds	r3, #1
 800b032:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	3301      	adds	r3, #1
 800b038:	61bb      	str	r3, [r7, #24]
 800b03a:	69ba      	ldr	r2, [r7, #24]
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d3e2      	bcc.n	800b008 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3724      	adds	r7, #36	; 0x24
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b050:	b480      	push	{r7}
 800b052:	b08b      	sub	sp, #44	; 0x2c
 800b054:	af00      	add	r7, sp, #0
 800b056:	60f8      	str	r0, [r7, #12]
 800b058:	60b9      	str	r1, [r7, #8]
 800b05a:	4613      	mov	r3, r2
 800b05c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b066:	88fb      	ldrh	r3, [r7, #6]
 800b068:	089b      	lsrs	r3, r3, #2
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	f003 0303 	and.w	r3, r3, #3
 800b074:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b076:	2300      	movs	r3, #0
 800b078:	623b      	str	r3, [r7, #32]
 800b07a:	e014      	b.n	800b0a6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b082:	681a      	ldr	r2, [r3, #0]
 800b084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b086:	601a      	str	r2, [r3, #0]
    pDest++;
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	3301      	adds	r3, #1
 800b08c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b090:	3301      	adds	r3, #1
 800b092:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b096:	3301      	adds	r3, #1
 800b098:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09c:	3301      	adds	r3, #1
 800b09e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	623b      	str	r3, [r7, #32]
 800b0a6:	6a3a      	ldr	r2, [r7, #32]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	429a      	cmp	r2, r3
 800b0ac:	d3e6      	bcc.n	800b07c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b0ae:	8bfb      	ldrh	r3, [r7, #30]
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d01e      	beq.n	800b0f2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b0b8:	69bb      	ldr	r3, [r7, #24]
 800b0ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b0be:	461a      	mov	r2, r3
 800b0c0:	f107 0310 	add.w	r3, r7, #16
 800b0c4:	6812      	ldr	r2, [r2, #0]
 800b0c6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b0c8:	693a      	ldr	r2, [r7, #16]
 800b0ca:	6a3b      	ldr	r3, [r7, #32]
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	00db      	lsls	r3, r3, #3
 800b0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800b0d4:	b2da      	uxtb	r2, r3
 800b0d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d8:	701a      	strb	r2, [r3, #0]
      i++;
 800b0da:	6a3b      	ldr	r3, [r7, #32]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	623b      	str	r3, [r7, #32]
      pDest++;
 800b0e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e2:	3301      	adds	r3, #1
 800b0e4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b0e6:	8bfb      	ldrh	r3, [r7, #30]
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b0ec:	8bfb      	ldrh	r3, [r7, #30]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d1ea      	bne.n	800b0c8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	372c      	adds	r7, #44	; 0x2c
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b100:	b480      	push	{r7}
 800b102:	b085      	sub	sp, #20
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
 800b108:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	781b      	ldrb	r3, [r3, #0]
 800b112:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	785b      	ldrb	r3, [r3, #1]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d12c      	bne.n	800b176 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	015a      	lsls	r2, r3, #5
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	4413      	add	r3, r2
 800b124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	db12      	blt.n	800b154 <USB_EPSetStall+0x54>
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00f      	beq.n	800b154 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	68ba      	ldr	r2, [r7, #8]
 800b144:	0151      	lsls	r1, r2, #5
 800b146:	68fa      	ldr	r2, [r7, #12]
 800b148:	440a      	add	r2, r1
 800b14a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b14e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b152:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	015a      	lsls	r2, r3, #5
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	4413      	add	r3, r2
 800b15c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68ba      	ldr	r2, [r7, #8]
 800b164:	0151      	lsls	r1, r2, #5
 800b166:	68fa      	ldr	r2, [r7, #12]
 800b168:	440a      	add	r2, r1
 800b16a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b16e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b172:	6013      	str	r3, [r2, #0]
 800b174:	e02b      	b.n	800b1ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	db12      	blt.n	800b1ae <USB_EPSetStall+0xae>
 800b188:	68bb      	ldr	r3, [r7, #8]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00f      	beq.n	800b1ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	015a      	lsls	r2, r3, #5
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	4413      	add	r3, r2
 800b196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	0151      	lsls	r1, r2, #5
 800b1a0:	68fa      	ldr	r2, [r7, #12]
 800b1a2:	440a      	add	r2, r1
 800b1a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b1ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	0151      	lsls	r1, r2, #5
 800b1c0:	68fa      	ldr	r2, [r7, #12]
 800b1c2:	440a      	add	r2, r1
 800b1c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b1cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b085      	sub	sp, #20
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	785b      	ldrb	r3, [r3, #1]
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	d128      	bne.n	800b24a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	68ba      	ldr	r2, [r7, #8]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	68fa      	ldr	r2, [r7, #12]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b212:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b216:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b218:	683b      	ldr	r3, [r7, #0]
 800b21a:	791b      	ldrb	r3, [r3, #4]
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d003      	beq.n	800b228 <USB_EPClearStall+0x4c>
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	791b      	ldrb	r3, [r3, #4]
 800b224:	2b02      	cmp	r3, #2
 800b226:	d138      	bne.n	800b29a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	015a      	lsls	r2, r3, #5
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	4413      	add	r3, r2
 800b230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	68ba      	ldr	r2, [r7, #8]
 800b238:	0151      	lsls	r1, r2, #5
 800b23a:	68fa      	ldr	r2, [r7, #12]
 800b23c:	440a      	add	r2, r1
 800b23e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b242:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b246:	6013      	str	r3, [r2, #0]
 800b248:	e027      	b.n	800b29a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b24a:	68bb      	ldr	r3, [r7, #8]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	68ba      	ldr	r2, [r7, #8]
 800b25a:	0151      	lsls	r1, r2, #5
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	440a      	add	r2, r1
 800b260:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b264:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b268:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	791b      	ldrb	r3, [r3, #4]
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d003      	beq.n	800b27a <USB_EPClearStall+0x9e>
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	791b      	ldrb	r3, [r3, #4]
 800b276:	2b02      	cmp	r3, #2
 800b278:	d10f      	bne.n	800b29a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b27a:	68bb      	ldr	r3, [r7, #8]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	0151      	lsls	r1, r2, #5
 800b28c:	68fa      	ldr	r2, [r7, #12]
 800b28e:	440a      	add	r2, r1
 800b290:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b298:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3714      	adds	r7, #20
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a6:	4770      	bx	lr

0800b2a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	68fa      	ldr	r2, [r7, #12]
 800b2c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b2ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	78fb      	ldrb	r3, [r7, #3]
 800b2d6:	011b      	lsls	r3, r3, #4
 800b2d8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b2dc:	68f9      	ldr	r1, [r7, #12]
 800b2de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f2:	4770      	bx	lr

0800b2f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68fa      	ldr	r2, [r7, #12]
 800b30a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b30e:	f023 0303 	bic.w	r3, r3, #3
 800b312:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	68fa      	ldr	r2, [r7, #12]
 800b31e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b322:	f023 0302 	bic.w	r3, r3, #2
 800b326:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b328:	2300      	movs	r3, #0
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b336:	b480      	push	{r7}
 800b338:	b085      	sub	sp, #20
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b350:	f023 0303 	bic.w	r3, r3, #3
 800b354:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b364:	f043 0302 	orr.w	r3, r3, #2
 800b368:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3714      	adds	r7, #20
 800b370:	46bd      	mov	sp, r7
 800b372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b376:	4770      	bx	lr

0800b378 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b378:	b480      	push	{r7}
 800b37a:	b085      	sub	sp, #20
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	695b      	ldr	r3, [r3, #20]
 800b384:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	699b      	ldr	r3, [r3, #24]
 800b38a:	68fa      	ldr	r2, [r7, #12]
 800b38c:	4013      	ands	r3, r2
 800b38e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b390:	68fb      	ldr	r3, [r7, #12]
}
 800b392:	4618      	mov	r0, r3
 800b394:	3714      	adds	r7, #20
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr

0800b39e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b39e:	b480      	push	{r7}
 800b3a0:	b085      	sub	sp, #20
 800b3a2:	af00      	add	r7, sp, #0
 800b3a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3b0:	699b      	ldr	r3, [r3, #24]
 800b3b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ba:	69db      	ldr	r3, [r3, #28]
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	4013      	ands	r3, r2
 800b3c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	0c1b      	lsrs	r3, r3, #16
}
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	3714      	adds	r7, #20
 800b3ca:	46bd      	mov	sp, r7
 800b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3d0:	4770      	bx	lr

0800b3d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b3d2:	b480      	push	{r7}
 800b3d4:	b085      	sub	sp, #20
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e4:	699b      	ldr	r3, [r3, #24]
 800b3e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	68ba      	ldr	r2, [r7, #8]
 800b3f2:	4013      	ands	r3, r2
 800b3f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b3f6:	68bb      	ldr	r3, [r7, #8]
 800b3f8:	b29b      	uxth	r3, r3
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3714      	adds	r7, #20
 800b3fe:	46bd      	mov	sp, r7
 800b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b404:	4770      	bx	lr

0800b406 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b406:	b480      	push	{r7}
 800b408:	b085      	sub	sp, #20
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
 800b40e:	460b      	mov	r3, r1
 800b410:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b416:	78fb      	ldrb	r3, [r7, #3]
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b422:	689b      	ldr	r3, [r3, #8]
 800b424:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b42c:	695b      	ldr	r3, [r3, #20]
 800b42e:	68ba      	ldr	r2, [r7, #8]
 800b430:	4013      	ands	r3, r2
 800b432:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b434:	68bb      	ldr	r3, [r7, #8]
}
 800b436:	4618      	mov	r0, r3
 800b438:	3714      	adds	r7, #20
 800b43a:	46bd      	mov	sp, r7
 800b43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b440:	4770      	bx	lr

0800b442 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b442:	b480      	push	{r7}
 800b444:	b087      	sub	sp, #28
 800b446:	af00      	add	r7, sp, #0
 800b448:	6078      	str	r0, [r7, #4]
 800b44a:	460b      	mov	r3, r1
 800b44c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b466:	78fb      	ldrb	r3, [r7, #3]
 800b468:	f003 030f 	and.w	r3, r3, #15
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	fa22 f303 	lsr.w	r3, r2, r3
 800b472:	01db      	lsls	r3, r3, #7
 800b474:	b2db      	uxtb	r3, r3
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	4313      	orrs	r3, r2
 800b47a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	697b      	ldr	r3, [r7, #20]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	4013      	ands	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b490:	68bb      	ldr	r3, [r7, #8]
}
 800b492:	4618      	mov	r0, r3
 800b494:	371c      	adds	r7, #28
 800b496:	46bd      	mov	sp, r7
 800b498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49c:	4770      	bx	lr

0800b49e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b49e:	b480      	push	{r7}
 800b4a0:	b083      	sub	sp, #12
 800b4a2:	af00      	add	r7, sp, #0
 800b4a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	695b      	ldr	r3, [r3, #20]
 800b4aa:	f003 0301 	and.w	r3, r3, #1
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	370c      	adds	r7, #12
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b8:	4770      	bx	lr
	...

0800b4bc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	4b09      	ldr	r3, [pc, #36]	; (800b500 <USB_ActivateSetup+0x44>)
 800b4da:	4013      	ands	r3, r2
 800b4dc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4e4:	685b      	ldr	r3, [r3, #4]
 800b4e6:	68fa      	ldr	r2, [r7, #12]
 800b4e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	3714      	adds	r7, #20
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	fffff800 	.word	0xfffff800

0800b504 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b504:	b480      	push	{r7}
 800b506:	b087      	sub	sp, #28
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	460b      	mov	r3, r1
 800b50e:	607a      	str	r2, [r7, #4]
 800b510:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	333c      	adds	r3, #60	; 0x3c
 800b51a:	3304      	adds	r3, #4
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b520:	693b      	ldr	r3, [r7, #16]
 800b522:	4a26      	ldr	r2, [pc, #152]	; (800b5bc <USB_EP0_OutStart+0xb8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d90a      	bls.n	800b53e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b528:	697b      	ldr	r3, [r7, #20]
 800b52a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b538:	d101      	bne.n	800b53e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b53a:	2300      	movs	r3, #0
 800b53c:	e037      	b.n	800b5ae <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b544:	461a      	mov	r2, r3
 800b546:	2300      	movs	r3, #0
 800b548:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b54a:	697b      	ldr	r3, [r7, #20]
 800b54c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b558:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b55c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b564:	691b      	ldr	r3, [r3, #16]
 800b566:	697a      	ldr	r2, [r7, #20]
 800b568:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b56c:	f043 0318 	orr.w	r3, r3, #24
 800b570:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b572:	697b      	ldr	r3, [r7, #20]
 800b574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b580:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b584:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b586:	7afb      	ldrb	r3, [r7, #11]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d10f      	bne.n	800b5ac <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b58c:	697b      	ldr	r3, [r7, #20]
 800b58e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b592:	461a      	mov	r2, r3
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	697a      	ldr	r2, [r7, #20]
 800b5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5a6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b5aa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	371c      	adds	r7, #28
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	4f54300a 	.word	0x4f54300a

0800b5c0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b085      	sub	sp, #20
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	3301      	adds	r3, #1
 800b5d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a13      	ldr	r2, [pc, #76]	; (800b624 <USB_CoreReset+0x64>)
 800b5d6:	4293      	cmp	r3, r2
 800b5d8:	d901      	bls.n	800b5de <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5da:	2303      	movs	r3, #3
 800b5dc:	e01b      	b.n	800b616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	daf2      	bge.n	800b5cc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	f043 0201 	orr.w	r2, r3, #1
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	4a09      	ldr	r2, [pc, #36]	; (800b624 <USB_CoreReset+0x64>)
 800b600:	4293      	cmp	r3, r2
 800b602:	d901      	bls.n	800b608 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b604:	2303      	movs	r3, #3
 800b606:	e006      	b.n	800b616 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	691b      	ldr	r3, [r3, #16]
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b01      	cmp	r3, #1
 800b612:	d0f0      	beq.n	800b5f6 <USB_CoreReset+0x36>

  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	00030d40 	.word	0x00030d40

0800b628 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b628:	b580      	push	{r7, lr}
 800b62a:	b084      	sub	sp, #16
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	6078      	str	r0, [r7, #4]
 800b630:	460b      	mov	r3, r1
 800b632:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b634:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b638:	f002 fd64 	bl	800e104 <malloc>
 800b63c:	4603      	mov	r3, r0
 800b63e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d109      	bne.n	800b65a <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	32b0      	adds	r2, #176	; 0xb0
 800b650:	2100      	movs	r1, #0
 800b652:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b656:	2302      	movs	r3, #2
 800b658:	e0d4      	b.n	800b804 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b65a:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b65e:	2100      	movs	r1, #0
 800b660:	68f8      	ldr	r0, [r7, #12]
 800b662:	f002 fe2b 	bl	800e2bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	32b0      	adds	r2, #176	; 0xb0
 800b670:	68f9      	ldr	r1, [r7, #12]
 800b672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	32b0      	adds	r2, #176	; 0xb0
 800b680:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	7c1b      	ldrb	r3, [r3, #16]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d138      	bne.n	800b704 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b692:	4b5e      	ldr	r3, [pc, #376]	; (800b80c <USBD_CDC_Init+0x1e4>)
 800b694:	7819      	ldrb	r1, [r3, #0]
 800b696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b69a:	2202      	movs	r2, #2
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f002 fb8e 	bl	800ddbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b6a2:	4b5a      	ldr	r3, [pc, #360]	; (800b80c <USBD_CDC_Init+0x1e4>)
 800b6a4:	781b      	ldrb	r3, [r3, #0]
 800b6a6:	f003 020f 	and.w	r2, r3, #15
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	4613      	mov	r3, r2
 800b6ae:	009b      	lsls	r3, r3, #2
 800b6b0:	4413      	add	r3, r2
 800b6b2:	009b      	lsls	r3, r3, #2
 800b6b4:	440b      	add	r3, r1
 800b6b6:	3324      	adds	r3, #36	; 0x24
 800b6b8:	2201      	movs	r2, #1
 800b6ba:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b6bc:	4b54      	ldr	r3, [pc, #336]	; (800b810 <USBD_CDC_Init+0x1e8>)
 800b6be:	7819      	ldrb	r1, [r3, #0]
 800b6c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f002 fb79 	bl	800ddbe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b6cc:	4b50      	ldr	r3, [pc, #320]	; (800b810 <USBD_CDC_Init+0x1e8>)
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	f003 020f 	and.w	r2, r3, #15
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	440b      	add	r3, r1
 800b6e0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b6e4:	2201      	movs	r2, #1
 800b6e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b6e8:	4b4a      	ldr	r3, [pc, #296]	; (800b814 <USBD_CDC_Init+0x1ec>)
 800b6ea:	781b      	ldrb	r3, [r3, #0]
 800b6ec:	f003 020f 	and.w	r2, r3, #15
 800b6f0:	6879      	ldr	r1, [r7, #4]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	3326      	adds	r3, #38	; 0x26
 800b6fe:	2210      	movs	r2, #16
 800b700:	801a      	strh	r2, [r3, #0]
 800b702:	e035      	b.n	800b770 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b704:	4b41      	ldr	r3, [pc, #260]	; (800b80c <USBD_CDC_Init+0x1e4>)
 800b706:	7819      	ldrb	r1, [r3, #0]
 800b708:	2340      	movs	r3, #64	; 0x40
 800b70a:	2202      	movs	r2, #2
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f002 fb56 	bl	800ddbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b712:	4b3e      	ldr	r3, [pc, #248]	; (800b80c <USBD_CDC_Init+0x1e4>)
 800b714:	781b      	ldrb	r3, [r3, #0]
 800b716:	f003 020f 	and.w	r2, r3, #15
 800b71a:	6879      	ldr	r1, [r7, #4]
 800b71c:	4613      	mov	r3, r2
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	009b      	lsls	r3, r3, #2
 800b724:	440b      	add	r3, r1
 800b726:	3324      	adds	r3, #36	; 0x24
 800b728:	2201      	movs	r2, #1
 800b72a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b72c:	4b38      	ldr	r3, [pc, #224]	; (800b810 <USBD_CDC_Init+0x1e8>)
 800b72e:	7819      	ldrb	r1, [r3, #0]
 800b730:	2340      	movs	r3, #64	; 0x40
 800b732:	2202      	movs	r2, #2
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f002 fb42 	bl	800ddbe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b73a:	4b35      	ldr	r3, [pc, #212]	; (800b810 <USBD_CDC_Init+0x1e8>)
 800b73c:	781b      	ldrb	r3, [r3, #0]
 800b73e:	f003 020f 	and.w	r2, r3, #15
 800b742:	6879      	ldr	r1, [r7, #4]
 800b744:	4613      	mov	r3, r2
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	4413      	add	r3, r2
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	440b      	add	r3, r1
 800b74e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b752:	2201      	movs	r2, #1
 800b754:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b756:	4b2f      	ldr	r3, [pc, #188]	; (800b814 <USBD_CDC_Init+0x1ec>)
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	f003 020f 	and.w	r2, r3, #15
 800b75e:	6879      	ldr	r1, [r7, #4]
 800b760:	4613      	mov	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	4413      	add	r3, r2
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	440b      	add	r3, r1
 800b76a:	3326      	adds	r3, #38	; 0x26
 800b76c:	2210      	movs	r2, #16
 800b76e:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b770:	4b28      	ldr	r3, [pc, #160]	; (800b814 <USBD_CDC_Init+0x1ec>)
 800b772:	7819      	ldrb	r1, [r3, #0]
 800b774:	2308      	movs	r3, #8
 800b776:	2203      	movs	r2, #3
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f002 fb20 	bl	800ddbe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b77e:	4b25      	ldr	r3, [pc, #148]	; (800b814 <USBD_CDC_Init+0x1ec>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f003 020f 	and.w	r2, r3, #15
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	4613      	mov	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	440b      	add	r3, r1
 800b792:	3324      	adds	r3, #36	; 0x24
 800b794:	2201      	movs	r2, #1
 800b796:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	2200      	movs	r2, #0
 800b79c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b7a6:	687a      	ldr	r2, [r7, #4]
 800b7a8:	33b0      	adds	r3, #176	; 0xb0
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	685b      	ldr	r3, [r3, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2200      	movs	r2, #0
 800b7b8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	2200      	movs	r2, #0
 800b7c0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d101      	bne.n	800b7d2 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b7ce:	2302      	movs	r3, #2
 800b7d0:	e018      	b.n	800b804 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	7c1b      	ldrb	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d10a      	bne.n	800b7f0 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7da:	4b0d      	ldr	r3, [pc, #52]	; (800b810 <USBD_CDC_Init+0x1e8>)
 800b7dc:	7819      	ldrb	r1, [r3, #0]
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f002 fbd7 	bl	800df9c <USBD_LL_PrepareReceive>
 800b7ee:	e008      	b.n	800b802 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b7f0:	4b07      	ldr	r3, [pc, #28]	; (800b810 <USBD_CDC_Init+0x1e8>)
 800b7f2:	7819      	ldrb	r1, [r3, #0]
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b7fa:	2340      	movs	r3, #64	; 0x40
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f002 fbcd 	bl	800df9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b802:	2300      	movs	r3, #0
}
 800b804:	4618      	mov	r0, r3
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	2000011f 	.word	0x2000011f
 800b810:	20000120 	.word	0x20000120
 800b814:	20000121 	.word	0x20000121

0800b818 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
 800b820:	460b      	mov	r3, r1
 800b822:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b824:	4b3a      	ldr	r3, [pc, #232]	; (800b910 <USBD_CDC_DeInit+0xf8>)
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	4619      	mov	r1, r3
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f002 faed 	bl	800de0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b830:	4b37      	ldr	r3, [pc, #220]	; (800b910 <USBD_CDC_DeInit+0xf8>)
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	f003 020f 	and.w	r2, r3, #15
 800b838:	6879      	ldr	r1, [r7, #4]
 800b83a:	4613      	mov	r3, r2
 800b83c:	009b      	lsls	r3, r3, #2
 800b83e:	4413      	add	r3, r2
 800b840:	009b      	lsls	r3, r3, #2
 800b842:	440b      	add	r3, r1
 800b844:	3324      	adds	r3, #36	; 0x24
 800b846:	2200      	movs	r2, #0
 800b848:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b84a:	4b32      	ldr	r3, [pc, #200]	; (800b914 <USBD_CDC_DeInit+0xfc>)
 800b84c:	781b      	ldrb	r3, [r3, #0]
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f002 fada 	bl	800de0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b856:	4b2f      	ldr	r3, [pc, #188]	; (800b914 <USBD_CDC_DeInit+0xfc>)
 800b858:	781b      	ldrb	r3, [r3, #0]
 800b85a:	f003 020f 	and.w	r2, r3, #15
 800b85e:	6879      	ldr	r1, [r7, #4]
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	440b      	add	r3, r1
 800b86a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b86e:	2200      	movs	r2, #0
 800b870:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b872:	4b29      	ldr	r3, [pc, #164]	; (800b918 <USBD_CDC_DeInit+0x100>)
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	4619      	mov	r1, r3
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f002 fac6 	bl	800de0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b87e:	4b26      	ldr	r3, [pc, #152]	; (800b918 <USBD_CDC_DeInit+0x100>)
 800b880:	781b      	ldrb	r3, [r3, #0]
 800b882:	f003 020f 	and.w	r2, r3, #15
 800b886:	6879      	ldr	r1, [r7, #4]
 800b888:	4613      	mov	r3, r2
 800b88a:	009b      	lsls	r3, r3, #2
 800b88c:	4413      	add	r3, r2
 800b88e:	009b      	lsls	r3, r3, #2
 800b890:	440b      	add	r3, r1
 800b892:	3324      	adds	r3, #36	; 0x24
 800b894:	2200      	movs	r2, #0
 800b896:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b898:	4b1f      	ldr	r3, [pc, #124]	; (800b918 <USBD_CDC_DeInit+0x100>)
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	f003 020f 	and.w	r2, r3, #15
 800b8a0:	6879      	ldr	r1, [r7, #4]
 800b8a2:	4613      	mov	r3, r2
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	009b      	lsls	r3, r3, #2
 800b8aa:	440b      	add	r3, r1
 800b8ac:	3326      	adds	r3, #38	; 0x26
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	32b0      	adds	r2, #176	; 0xb0
 800b8bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d01f      	beq.n	800b904 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b8ca:	687a      	ldr	r2, [r7, #4]
 800b8cc:	33b0      	adds	r3, #176	; 0xb0
 800b8ce:	009b      	lsls	r3, r3, #2
 800b8d0:	4413      	add	r3, r2
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	32b0      	adds	r2, #176	; 0xb0
 800b8e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f002 fc14 	bl	800e114 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	32b0      	adds	r2, #176	; 0xb0
 800b8f6:	2100      	movs	r1, #0
 800b8f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b904:	2300      	movs	r3, #0
}
 800b906:	4618      	mov	r0, r3
 800b908:	3708      	adds	r7, #8
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
 800b90e:	bf00      	nop
 800b910:	2000011f 	.word	0x2000011f
 800b914:	20000120 	.word	0x20000120
 800b918:	20000121 	.word	0x20000121

0800b91c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b086      	sub	sp, #24
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	32b0      	adds	r2, #176	; 0xb0
 800b930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b934:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800b936:	2300      	movs	r3, #0
 800b938:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800b942:	693b      	ldr	r3, [r7, #16]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d101      	bne.n	800b94c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800b948:	2303      	movs	r3, #3
 800b94a:	e0bf      	b.n	800bacc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b954:	2b00      	cmp	r3, #0
 800b956:	d050      	beq.n	800b9fa <USBD_CDC_Setup+0xde>
 800b958:	2b20      	cmp	r3, #32
 800b95a:	f040 80af 	bne.w	800babc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	88db      	ldrh	r3, [r3, #6]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d03a      	beq.n	800b9dc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800b966:	683b      	ldr	r3, [r7, #0]
 800b968:	781b      	ldrb	r3, [r3, #0]
 800b96a:	b25b      	sxtb	r3, r3
 800b96c:	2b00      	cmp	r3, #0
 800b96e:	da1b      	bge.n	800b9a8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	33b0      	adds	r3, #176	; 0xb0
 800b97a:	009b      	lsls	r3, r3, #2
 800b97c:	4413      	add	r3, r2
 800b97e:	685b      	ldr	r3, [r3, #4]
 800b980:	689b      	ldr	r3, [r3, #8]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800b986:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b988:	683a      	ldr	r2, [r7, #0]
 800b98a:	88d2      	ldrh	r2, [r2, #6]
 800b98c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	88db      	ldrh	r3, [r3, #6]
 800b992:	2b07      	cmp	r3, #7
 800b994:	bf28      	it	cs
 800b996:	2307      	movcs	r3, #7
 800b998:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800b99a:	693b      	ldr	r3, [r7, #16]
 800b99c:	89fa      	ldrh	r2, [r7, #14]
 800b99e:	4619      	mov	r1, r3
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f001 fdad 	bl	800d500 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800b9a6:	e090      	b.n	800baca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	785a      	ldrb	r2, [r3, #1]
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	88db      	ldrh	r3, [r3, #6]
 800b9b6:	2b3f      	cmp	r3, #63	; 0x3f
 800b9b8:	d803      	bhi.n	800b9c2 <USBD_CDC_Setup+0xa6>
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	88db      	ldrh	r3, [r3, #6]
 800b9be:	b2da      	uxtb	r2, r3
 800b9c0:	e000      	b.n	800b9c4 <USBD_CDC_Setup+0xa8>
 800b9c2:	2240      	movs	r2, #64	; 0x40
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800b9ca:	6939      	ldr	r1, [r7, #16]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f001 fdbf 	bl	800d558 <USBD_CtlPrepareRx>
      break;
 800b9da:	e076      	b.n	800baca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9e2:	687a      	ldr	r2, [r7, #4]
 800b9e4:	33b0      	adds	r3, #176	; 0xb0
 800b9e6:	009b      	lsls	r3, r3, #2
 800b9e8:	4413      	add	r3, r2
 800b9ea:	685b      	ldr	r3, [r3, #4]
 800b9ec:	689b      	ldr	r3, [r3, #8]
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	7850      	ldrb	r0, [r2, #1]
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	6839      	ldr	r1, [r7, #0]
 800b9f6:	4798      	blx	r3
      break;
 800b9f8:	e067      	b.n	800baca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	785b      	ldrb	r3, [r3, #1]
 800b9fe:	2b0b      	cmp	r3, #11
 800ba00:	d851      	bhi.n	800baa6 <USBD_CDC_Setup+0x18a>
 800ba02:	a201      	add	r2, pc, #4	; (adr r2, 800ba08 <USBD_CDC_Setup+0xec>)
 800ba04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba08:	0800ba39 	.word	0x0800ba39
 800ba0c:	0800bab5 	.word	0x0800bab5
 800ba10:	0800baa7 	.word	0x0800baa7
 800ba14:	0800baa7 	.word	0x0800baa7
 800ba18:	0800baa7 	.word	0x0800baa7
 800ba1c:	0800baa7 	.word	0x0800baa7
 800ba20:	0800baa7 	.word	0x0800baa7
 800ba24:	0800baa7 	.word	0x0800baa7
 800ba28:	0800baa7 	.word	0x0800baa7
 800ba2c:	0800baa7 	.word	0x0800baa7
 800ba30:	0800ba63 	.word	0x0800ba63
 800ba34:	0800ba8d 	.word	0x0800ba8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba3e:	b2db      	uxtb	r3, r3
 800ba40:	2b03      	cmp	r3, #3
 800ba42:	d107      	bne.n	800ba54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ba44:	f107 030a 	add.w	r3, r7, #10
 800ba48:	2202      	movs	r2, #2
 800ba4a:	4619      	mov	r1, r3
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f001 fd57 	bl	800d500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba52:	e032      	b.n	800baba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ba54:	6839      	ldr	r1, [r7, #0]
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f001 fce1 	bl	800d41e <USBD_CtlError>
            ret = USBD_FAIL;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	75fb      	strb	r3, [r7, #23]
          break;
 800ba60:	e02b      	b.n	800baba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b03      	cmp	r3, #3
 800ba6c:	d107      	bne.n	800ba7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ba6e:	f107 030d 	add.w	r3, r7, #13
 800ba72:	2201      	movs	r2, #1
 800ba74:	4619      	mov	r1, r3
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f001 fd42 	bl	800d500 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ba7c:	e01d      	b.n	800baba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f001 fccc 	bl	800d41e <USBD_CtlError>
            ret = USBD_FAIL;
 800ba86:	2303      	movs	r3, #3
 800ba88:	75fb      	strb	r3, [r7, #23]
          break;
 800ba8a:	e016      	b.n	800baba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d00f      	beq.n	800bab8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ba98:	6839      	ldr	r1, [r7, #0]
 800ba9a:	6878      	ldr	r0, [r7, #4]
 800ba9c:	f001 fcbf 	bl	800d41e <USBD_CtlError>
            ret = USBD_FAIL;
 800baa0:	2303      	movs	r3, #3
 800baa2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800baa4:	e008      	b.n	800bab8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800baa6:	6839      	ldr	r1, [r7, #0]
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f001 fcb8 	bl	800d41e <USBD_CtlError>
          ret = USBD_FAIL;
 800baae:	2303      	movs	r3, #3
 800bab0:	75fb      	strb	r3, [r7, #23]
          break;
 800bab2:	e002      	b.n	800baba <USBD_CDC_Setup+0x19e>
          break;
 800bab4:	bf00      	nop
 800bab6:	e008      	b.n	800baca <USBD_CDC_Setup+0x1ae>
          break;
 800bab8:	bf00      	nop
      }
      break;
 800baba:	e006      	b.n	800baca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800babc:	6839      	ldr	r1, [r7, #0]
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f001 fcad 	bl	800d41e <USBD_CtlError>
      ret = USBD_FAIL;
 800bac4:	2303      	movs	r3, #3
 800bac6:	75fb      	strb	r3, [r7, #23]
      break;
 800bac8:	bf00      	nop
  }

  return (uint8_t)ret;
 800baca:	7dfb      	ldrb	r3, [r7, #23]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b084      	sub	sp, #16
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bae6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	32b0      	adds	r2, #176	; 0xb0
 800baf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d101      	bne.n	800bafe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bafa:	2303      	movs	r3, #3
 800bafc:	e065      	b.n	800bbca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	32b0      	adds	r2, #176	; 0xb0
 800bb08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bb0e:	78fb      	ldrb	r3, [r7, #3]
 800bb10:	f003 020f 	and.w	r2, r3, #15
 800bb14:	6879      	ldr	r1, [r7, #4]
 800bb16:	4613      	mov	r3, r2
 800bb18:	009b      	lsls	r3, r3, #2
 800bb1a:	4413      	add	r3, r2
 800bb1c:	009b      	lsls	r3, r3, #2
 800bb1e:	440b      	add	r3, r1
 800bb20:	3318      	adds	r3, #24
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d02f      	beq.n	800bb88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bb28:	78fb      	ldrb	r3, [r7, #3]
 800bb2a:	f003 020f 	and.w	r2, r3, #15
 800bb2e:	6879      	ldr	r1, [r7, #4]
 800bb30:	4613      	mov	r3, r2
 800bb32:	009b      	lsls	r3, r3, #2
 800bb34:	4413      	add	r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	440b      	add	r3, r1
 800bb3a:	3318      	adds	r3, #24
 800bb3c:	681a      	ldr	r2, [r3, #0]
 800bb3e:	78fb      	ldrb	r3, [r7, #3]
 800bb40:	f003 010f 	and.w	r1, r3, #15
 800bb44:	68f8      	ldr	r0, [r7, #12]
 800bb46:	460b      	mov	r3, r1
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	440b      	add	r3, r1
 800bb4c:	009b      	lsls	r3, r3, #2
 800bb4e:	4403      	add	r3, r0
 800bb50:	3348      	adds	r3, #72	; 0x48
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	fbb2 f1f3 	udiv	r1, r2, r3
 800bb58:	fb01 f303 	mul.w	r3, r1, r3
 800bb5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d112      	bne.n	800bb88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bb62:	78fb      	ldrb	r3, [r7, #3]
 800bb64:	f003 020f 	and.w	r2, r3, #15
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	4613      	mov	r3, r2
 800bb6c:	009b      	lsls	r3, r3, #2
 800bb6e:	4413      	add	r3, r2
 800bb70:	009b      	lsls	r3, r3, #2
 800bb72:	440b      	add	r3, r1
 800bb74:	3318      	adds	r3, #24
 800bb76:	2200      	movs	r2, #0
 800bb78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bb7a:	78f9      	ldrb	r1, [r7, #3]
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	2200      	movs	r2, #0
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f002 f9ea 	bl	800df5a <USBD_LL_Transmit>
 800bb86:	e01f      	b.n	800bbc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bb88:	68bb      	ldr	r3, [r7, #8]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bb96:	687a      	ldr	r2, [r7, #4]
 800bb98:	33b0      	adds	r3, #176	; 0xb0
 800bb9a:	009b      	lsls	r3, r3, #2
 800bb9c:	4413      	add	r3, r2
 800bb9e:	685b      	ldr	r3, [r3, #4]
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d010      	beq.n	800bbc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bbac:	687a      	ldr	r2, [r7, #4]
 800bbae:	33b0      	adds	r3, #176	; 0xb0
 800bbb0:	009b      	lsls	r3, r3, #2
 800bbb2:	4413      	add	r3, r2
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	691b      	ldr	r3, [r3, #16]
 800bbb8:	68ba      	ldr	r2, [r7, #8]
 800bbba:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bbbe:	68ba      	ldr	r2, [r7, #8]
 800bbc0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bbc4:	78fa      	ldrb	r2, [r7, #3]
 800bbc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3710      	adds	r7, #16
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	bd80      	pop	{r7, pc}

0800bbd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbd2:	b580      	push	{r7, lr}
 800bbd4:	b084      	sub	sp, #16
 800bbd6:	af00      	add	r7, sp, #0
 800bbd8:	6078      	str	r0, [r7, #4]
 800bbda:	460b      	mov	r3, r1
 800bbdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	32b0      	adds	r2, #176	; 0xb0
 800bbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	32b0      	adds	r2, #176	; 0xb0
 800bbf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d101      	bne.n	800bc04 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bc00:	2303      	movs	r3, #3
 800bc02:	e01a      	b.n	800bc3a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	4619      	mov	r1, r3
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f002 f9e8 	bl	800dfde <USBD_LL_GetRxDataSize>
 800bc0e:	4602      	mov	r2, r0
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	33b0      	adds	r3, #176	; 0xb0
 800bc20:	009b      	lsls	r3, r3, #2
 800bc22:	4413      	add	r3, r2
 800bc24:	685b      	ldr	r3, [r3, #4]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	68fa      	ldr	r2, [r7, #12]
 800bc2a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bc34:	4611      	mov	r1, r2
 800bc36:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bc38:	2300      	movs	r3, #0
}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3710      	adds	r7, #16
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}

0800bc42 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bc42:	b580      	push	{r7, lr}
 800bc44:	b084      	sub	sp, #16
 800bc46:	af00      	add	r7, sp, #0
 800bc48:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	32b0      	adds	r2, #176	; 0xb0
 800bc54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d101      	bne.n	800bc64 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bc60:	2303      	movs	r3, #3
 800bc62:	e025      	b.n	800bcb0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc6a:	687a      	ldr	r2, [r7, #4]
 800bc6c:	33b0      	adds	r3, #176	; 0xb0
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	4413      	add	r3, r2
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01a      	beq.n	800bcae <USBD_CDC_EP0_RxReady+0x6c>
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bc7e:	2bff      	cmp	r3, #255	; 0xff
 800bc80:	d015      	beq.n	800bcae <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	33b0      	adds	r3, #176	; 0xb0
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	689b      	ldr	r3, [r3, #8]
 800bc94:	68fa      	ldr	r2, [r7, #12]
 800bc96:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bc9a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bc9c:	68fa      	ldr	r2, [r7, #12]
 800bc9e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bca2:	b292      	uxth	r2, r2
 800bca4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	22ff      	movs	r2, #255	; 0xff
 800bcaa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3710      	adds	r7, #16
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	bd80      	pop	{r7, pc}

0800bcb8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b086      	sub	sp, #24
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bcc0:	2182      	movs	r1, #130	; 0x82
 800bcc2:	4818      	ldr	r0, [pc, #96]	; (800bd24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bcc4:	f000 fd49 	bl	800c75a <USBD_GetEpDesc>
 800bcc8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bcca:	2101      	movs	r1, #1
 800bccc:	4815      	ldr	r0, [pc, #84]	; (800bd24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bcce:	f000 fd44 	bl	800c75a <USBD_GetEpDesc>
 800bcd2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bcd4:	2181      	movs	r1, #129	; 0x81
 800bcd6:	4813      	ldr	r0, [pc, #76]	; (800bd24 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bcd8:	f000 fd3f 	bl	800c75a <USBD_GetEpDesc>
 800bcdc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bcde:	697b      	ldr	r3, [r7, #20]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d002      	beq.n	800bcea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bce4:	697b      	ldr	r3, [r7, #20]
 800bce6:	2210      	movs	r2, #16
 800bce8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d006      	beq.n	800bcfe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bcf8:	711a      	strb	r2, [r3, #4]
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d006      	beq.n	800bd12 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2200      	movs	r2, #0
 800bd08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bd0c:	711a      	strb	r2, [r3, #4]
 800bd0e:	2200      	movs	r2, #0
 800bd10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2243      	movs	r2, #67	; 0x43
 800bd16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd18:	4b02      	ldr	r3, [pc, #8]	; (800bd24 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	200000dc 	.word	0x200000dc

0800bd28 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800bd28:	b580      	push	{r7, lr}
 800bd2a:	b086      	sub	sp, #24
 800bd2c:	af00      	add	r7, sp, #0
 800bd2e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd30:	2182      	movs	r1, #130	; 0x82
 800bd32:	4818      	ldr	r0, [pc, #96]	; (800bd94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bd34:	f000 fd11 	bl	800c75a <USBD_GetEpDesc>
 800bd38:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bd3a:	2101      	movs	r1, #1
 800bd3c:	4815      	ldr	r0, [pc, #84]	; (800bd94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bd3e:	f000 fd0c 	bl	800c75a <USBD_GetEpDesc>
 800bd42:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bd44:	2181      	movs	r1, #129	; 0x81
 800bd46:	4813      	ldr	r0, [pc, #76]	; (800bd94 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800bd48:	f000 fd07 	bl	800c75a <USBD_GetEpDesc>
 800bd4c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bd4e:	697b      	ldr	r3, [r7, #20]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d002      	beq.n	800bd5a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800bd54:	697b      	ldr	r3, [r7, #20]
 800bd56:	2210      	movs	r2, #16
 800bd58:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d006      	beq.n	800bd6e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bd60:	693b      	ldr	r3, [r7, #16]
 800bd62:	2200      	movs	r2, #0
 800bd64:	711a      	strb	r2, [r3, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f042 0202 	orr.w	r2, r2, #2
 800bd6c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d006      	beq.n	800bd82 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2200      	movs	r2, #0
 800bd78:	711a      	strb	r2, [r3, #4]
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	f042 0202 	orr.w	r2, r2, #2
 800bd80:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2243      	movs	r2, #67	; 0x43
 800bd86:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bd88:	4b02      	ldr	r3, [pc, #8]	; (800bd94 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3718      	adds	r7, #24
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	bd80      	pop	{r7, pc}
 800bd92:	bf00      	nop
 800bd94:	200000dc 	.word	0x200000dc

0800bd98 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bda0:	2182      	movs	r1, #130	; 0x82
 800bda2:	4818      	ldr	r0, [pc, #96]	; (800be04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bda4:	f000 fcd9 	bl	800c75a <USBD_GetEpDesc>
 800bda8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bdaa:	2101      	movs	r1, #1
 800bdac:	4815      	ldr	r0, [pc, #84]	; (800be04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bdae:	f000 fcd4 	bl	800c75a <USBD_GetEpDesc>
 800bdb2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdb4:	2181      	movs	r1, #129	; 0x81
 800bdb6:	4813      	ldr	r0, [pc, #76]	; (800be04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800bdb8:	f000 fccf 	bl	800c75a <USBD_GetEpDesc>
 800bdbc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d002      	beq.n	800bdca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	2210      	movs	r2, #16
 800bdc8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdca:	693b      	ldr	r3, [r7, #16]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d006      	beq.n	800bdde <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bdd0:	693b      	ldr	r3, [r7, #16]
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdd8:	711a      	strb	r2, [r3, #4]
 800bdda:	2200      	movs	r2, #0
 800bddc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d006      	beq.n	800bdf2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	2200      	movs	r2, #0
 800bde8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdec:	711a      	strb	r2, [r3, #4]
 800bdee:	2200      	movs	r2, #0
 800bdf0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	2243      	movs	r2, #67	; 0x43
 800bdf6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdf8:	4b02      	ldr	r3, [pc, #8]	; (800be04 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	3718      	adds	r7, #24
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}
 800be02:	bf00      	nop
 800be04:	200000dc 	.word	0x200000dc

0800be08 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	220a      	movs	r2, #10
 800be14:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800be16:	4b03      	ldr	r3, [pc, #12]	; (800be24 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800be18:	4618      	mov	r0, r3
 800be1a:	370c      	adds	r7, #12
 800be1c:	46bd      	mov	sp, r7
 800be1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be22:	4770      	bx	lr
 800be24:	20000098 	.word	0x20000098

0800be28 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d101      	bne.n	800be3c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800be38:	2303      	movs	r3, #3
 800be3a:	e009      	b.n	800be50 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800be42:	687a      	ldr	r2, [r7, #4]
 800be44:	33b0      	adds	r3, #176	; 0xb0
 800be46:	009b      	lsls	r3, r3, #2
 800be48:	4413      	add	r3, r2
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800be4e:	2300      	movs	r3, #0
}
 800be50:	4618      	mov	r0, r3
 800be52:	370c      	adds	r7, #12
 800be54:	46bd      	mov	sp, r7
 800be56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5a:	4770      	bx	lr

0800be5c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800be5c:	b480      	push	{r7}
 800be5e:	b087      	sub	sp, #28
 800be60:	af00      	add	r7, sp, #0
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	32b0      	adds	r2, #176	; 0xb0
 800be72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be76:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d101      	bne.n	800be82 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800be7e:	2303      	movs	r3, #3
 800be80:	e008      	b.n	800be94 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	68ba      	ldr	r2, [r7, #8]
 800be86:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800be8a:	697b      	ldr	r3, [r7, #20]
 800be8c:	687a      	ldr	r2, [r7, #4]
 800be8e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800be92:	2300      	movs	r3, #0
}
 800be94:	4618      	mov	r0, r3
 800be96:	371c      	adds	r7, #28
 800be98:	46bd      	mov	sp, r7
 800be9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9e:	4770      	bx	lr

0800bea0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	32b0      	adds	r2, #176	; 0xb0
 800beb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d101      	bne.n	800bec4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bec0:	2303      	movs	r3, #3
 800bec2:	e004      	b.n	800bece <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	683a      	ldr	r2, [r7, #0]
 800bec8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800becc:	2300      	movs	r3, #0
}
 800bece:	4618      	mov	r0, r3
 800bed0:	3714      	adds	r7, #20
 800bed2:	46bd      	mov	sp, r7
 800bed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed8:	4770      	bx	lr
	...

0800bedc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	32b0      	adds	r2, #176	; 0xb0
 800beee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bef2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bef4:	2301      	movs	r3, #1
 800bef6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800befe:	2303      	movs	r3, #3
 800bf00:	e025      	b.n	800bf4e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d11f      	bne.n	800bf4c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bf14:	4b10      	ldr	r3, [pc, #64]	; (800bf58 <USBD_CDC_TransmitPacket+0x7c>)
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 020f 	and.w	r2, r3, #15
 800bf1c:	68bb      	ldr	r3, [r7, #8]
 800bf1e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	4613      	mov	r3, r2
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	009b      	lsls	r3, r3, #2
 800bf2c:	4403      	add	r3, r0
 800bf2e:	3318      	adds	r3, #24
 800bf30:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800bf32:	4b09      	ldr	r3, [pc, #36]	; (800bf58 <USBD_CDC_TransmitPacket+0x7c>)
 800bf34:	7819      	ldrb	r1, [r3, #0]
 800bf36:	68bb      	ldr	r3, [r7, #8]
 800bf38:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f002 f809 	bl	800df5a <USBD_LL_Transmit>

    ret = USBD_OK;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800bf4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf4e:	4618      	mov	r0, r3
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	2000011f 	.word	0x2000011f

0800bf5c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b084      	sub	sp, #16
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	32b0      	adds	r2, #176	; 0xb0
 800bf6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf72:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	32b0      	adds	r2, #176	; 0xb0
 800bf7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800bf86:	2303      	movs	r3, #3
 800bf88:	e018      	b.n	800bfbc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	7c1b      	ldrb	r3, [r3, #16]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10a      	bne.n	800bfa8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf92:	4b0c      	ldr	r3, [pc, #48]	; (800bfc4 <USBD_CDC_ReceivePacket+0x68>)
 800bf94:	7819      	ldrb	r1, [r3, #0]
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bfa0:	6878      	ldr	r0, [r7, #4]
 800bfa2:	f001 fffb 	bl	800df9c <USBD_LL_PrepareReceive>
 800bfa6:	e008      	b.n	800bfba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bfa8:	4b06      	ldr	r3, [pc, #24]	; (800bfc4 <USBD_CDC_ReceivePacket+0x68>)
 800bfaa:	7819      	ldrb	r1, [r3, #0]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bfb2:	2340      	movs	r3, #64	; 0x40
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f001 fff1 	bl	800df9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3710      	adds	r7, #16
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	bd80      	pop	{r7, pc}
 800bfc4:	20000120 	.word	0x20000120

0800bfc8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d101      	bne.n	800bfe0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	e01f      	b.n	800c020 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	2200      	movs	r2, #0
 800bfec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2200      	movs	r2, #0
 800bff4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d003      	beq.n	800c006 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	68ba      	ldr	r2, [r7, #8]
 800c002:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2201      	movs	r2, #1
 800c00a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	79fa      	ldrb	r2, [r7, #7]
 800c012:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f001 fe65 	bl	800dce4 <USBD_LL_Init>
 800c01a:	4603      	mov	r3, r0
 800c01c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c01e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c020:	4618      	mov	r0, r3
 800c022:	3718      	adds	r7, #24
 800c024:	46bd      	mov	sp, r7
 800c026:	bd80      	pop	{r7, pc}

0800c028 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b084      	sub	sp, #16
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c032:	2300      	movs	r3, #0
 800c034:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d101      	bne.n	800c040 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c03c:	2303      	movs	r3, #3
 800c03e:	e025      	b.n	800c08c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	32ae      	adds	r2, #174	; 0xae
 800c052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00f      	beq.n	800c07c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	32ae      	adds	r2, #174	; 0xae
 800c066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	f107 020e 	add.w	r2, r7, #14
 800c070:	4610      	mov	r0, r2
 800c072:	4798      	blx	r3
 800c074:	4602      	mov	r2, r0
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c082:	1c5a      	adds	r2, r3, #1
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c08a:	2300      	movs	r3, #0
}
 800c08c:	4618      	mov	r0, r3
 800c08e:	3710      	adds	r7, #16
 800c090:	46bd      	mov	sp, r7
 800c092:	bd80      	pop	{r7, pc}

0800c094 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b082      	sub	sp, #8
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c09c:	6878      	ldr	r0, [r7, #4]
 800c09e:	f001 fe73 	bl	800dd88 <USBD_LL_Start>
 800c0a2:	4603      	mov	r3, r0
}
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	3708      	adds	r7, #8
 800c0a8:	46bd      	mov	sp, r7
 800c0aa:	bd80      	pop	{r7, pc}

0800c0ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c0b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	370c      	adds	r7, #12
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c0:	4770      	bx	lr

0800c0c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0c2:	b580      	push	{r7, lr}
 800c0c4:	b084      	sub	sp, #16
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
 800c0ca:	460b      	mov	r3, r1
 800c0cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d009      	beq.n	800c0f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	78fa      	ldrb	r2, [r7, #3]
 800c0e6:	4611      	mov	r1, r2
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	4798      	blx	r3
 800c0ec:	4603      	mov	r3, r0
 800c0ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c0f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3710      	adds	r7, #16
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}

0800c0fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c0fa:	b580      	push	{r7, lr}
 800c0fc:	b084      	sub	sp, #16
 800c0fe:	af00      	add	r7, sp, #0
 800c100:	6078      	str	r0, [r7, #4]
 800c102:	460b      	mov	r3, r1
 800c104:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c110:	685b      	ldr	r3, [r3, #4]
 800c112:	78fa      	ldrb	r2, [r7, #3]
 800c114:	4611      	mov	r1, r2
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	4798      	blx	r3
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d001      	beq.n	800c124 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c120:	2303      	movs	r3, #3
 800c122:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c124:	7bfb      	ldrb	r3, [r7, #15]
}
 800c126:	4618      	mov	r0, r3
 800c128:	3710      	adds	r7, #16
 800c12a:	46bd      	mov	sp, r7
 800c12c:	bd80      	pop	{r7, pc}

0800c12e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c12e:	b580      	push	{r7, lr}
 800c130:	b084      	sub	sp, #16
 800c132:	af00      	add	r7, sp, #0
 800c134:	6078      	str	r0, [r7, #4]
 800c136:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c13e:	6839      	ldr	r1, [r7, #0]
 800c140:	4618      	mov	r0, r3
 800c142:	f001 f932 	bl	800d3aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2201      	movs	r2, #1
 800c14a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c154:	461a      	mov	r2, r3
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c162:	f003 031f 	and.w	r3, r3, #31
 800c166:	2b02      	cmp	r3, #2
 800c168:	d01a      	beq.n	800c1a0 <USBD_LL_SetupStage+0x72>
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d822      	bhi.n	800c1b4 <USBD_LL_SetupStage+0x86>
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d002      	beq.n	800c178 <USBD_LL_SetupStage+0x4a>
 800c172:	2b01      	cmp	r3, #1
 800c174:	d00a      	beq.n	800c18c <USBD_LL_SetupStage+0x5e>
 800c176:	e01d      	b.n	800c1b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c17e:	4619      	mov	r1, r3
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 fb5f 	bl	800c844 <USBD_StdDevReq>
 800c186:	4603      	mov	r3, r0
 800c188:	73fb      	strb	r3, [r7, #15]
      break;
 800c18a:	e020      	b.n	800c1ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c192:	4619      	mov	r1, r3
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f000 fbc7 	bl	800c928 <USBD_StdItfReq>
 800c19a:	4603      	mov	r3, r0
 800c19c:	73fb      	strb	r3, [r7, #15]
      break;
 800c19e:	e016      	b.n	800c1ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c1a6:	4619      	mov	r1, r3
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 fc29 	bl	800ca00 <USBD_StdEPReq>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]
      break;
 800c1b2:	e00c      	b.n	800c1ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c1ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c1be:	b2db      	uxtb	r3, r3
 800c1c0:	4619      	mov	r1, r3
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f001 fe40 	bl	800de48 <USBD_LL_StallEP>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
      break;
 800c1cc:	bf00      	nop
  }

  return ret;
 800c1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c1ea:	7afb      	ldrb	r3, [r7, #11]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d16e      	bne.n	800c2ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c1f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c1fe:	2b03      	cmp	r3, #3
 800c200:	f040 8098 	bne.w	800c334 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c204:	693b      	ldr	r3, [r7, #16]
 800c206:	689a      	ldr	r2, [r3, #8]
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	68db      	ldr	r3, [r3, #12]
 800c20c:	429a      	cmp	r2, r3
 800c20e:	d913      	bls.n	800c238 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	689a      	ldr	r2, [r3, #8]
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	68db      	ldr	r3, [r3, #12]
 800c218:	1ad2      	subs	r2, r2, r3
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	68da      	ldr	r2, [r3, #12]
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	689b      	ldr	r3, [r3, #8]
 800c226:	4293      	cmp	r3, r2
 800c228:	bf28      	it	cs
 800c22a:	4613      	movcs	r3, r2
 800c22c:	461a      	mov	r2, r3
 800c22e:	6879      	ldr	r1, [r7, #4]
 800c230:	68f8      	ldr	r0, [r7, #12]
 800c232:	f001 f9ae 	bl	800d592 <USBD_CtlContinueRx>
 800c236:	e07d      	b.n	800c334 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c23e:	f003 031f 	and.w	r3, r3, #31
 800c242:	2b02      	cmp	r3, #2
 800c244:	d014      	beq.n	800c270 <USBD_LL_DataOutStage+0x98>
 800c246:	2b02      	cmp	r3, #2
 800c248:	d81d      	bhi.n	800c286 <USBD_LL_DataOutStage+0xae>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <USBD_LL_DataOutStage+0x7c>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d003      	beq.n	800c25a <USBD_LL_DataOutStage+0x82>
 800c252:	e018      	b.n	800c286 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c254:	2300      	movs	r3, #0
 800c256:	75bb      	strb	r3, [r7, #22]
            break;
 800c258:	e018      	b.n	800c28c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c260:	b2db      	uxtb	r3, r3
 800c262:	4619      	mov	r1, r3
 800c264:	68f8      	ldr	r0, [r7, #12]
 800c266:	f000 fa5e 	bl	800c726 <USBD_CoreFindIF>
 800c26a:	4603      	mov	r3, r0
 800c26c:	75bb      	strb	r3, [r7, #22]
            break;
 800c26e:	e00d      	b.n	800c28c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c276:	b2db      	uxtb	r3, r3
 800c278:	4619      	mov	r1, r3
 800c27a:	68f8      	ldr	r0, [r7, #12]
 800c27c:	f000 fa60 	bl	800c740 <USBD_CoreFindEP>
 800c280:	4603      	mov	r3, r0
 800c282:	75bb      	strb	r3, [r7, #22]
            break;
 800c284:	e002      	b.n	800c28c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	75bb      	strb	r3, [r7, #22]
            break;
 800c28a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c28c:	7dbb      	ldrb	r3, [r7, #22]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d119      	bne.n	800c2c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c298:	b2db      	uxtb	r3, r3
 800c29a:	2b03      	cmp	r3, #3
 800c29c:	d113      	bne.n	800c2c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c29e:	7dba      	ldrb	r2, [r7, #22]
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	32ae      	adds	r2, #174	; 0xae
 800c2a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2a8:	691b      	ldr	r3, [r3, #16]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00b      	beq.n	800c2c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c2ae:	7dba      	ldrb	r2, [r7, #22]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c2b6:	7dba      	ldrb	r2, [r7, #22]
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	32ae      	adds	r2, #174	; 0xae
 800c2bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c2c6:	68f8      	ldr	r0, [r7, #12]
 800c2c8:	f001 f974 	bl	800d5b4 <USBD_CtlSendStatus>
 800c2cc:	e032      	b.n	800c334 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c2ce:	7afb      	ldrb	r3, [r7, #11]
 800c2d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c2d4:	b2db      	uxtb	r3, r3
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	68f8      	ldr	r0, [r7, #12]
 800c2da:	f000 fa31 	bl	800c740 <USBD_CoreFindEP>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c2e2:	7dbb      	ldrb	r3, [r7, #22]
 800c2e4:	2bff      	cmp	r3, #255	; 0xff
 800c2e6:	d025      	beq.n	800c334 <USBD_LL_DataOutStage+0x15c>
 800c2e8:	7dbb      	ldrb	r3, [r7, #22]
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d122      	bne.n	800c334 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c2ee:	68fb      	ldr	r3, [r7, #12]
 800c2f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c2f4:	b2db      	uxtb	r3, r3
 800c2f6:	2b03      	cmp	r3, #3
 800c2f8:	d117      	bne.n	800c32a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c2fa:	7dba      	ldrb	r2, [r7, #22]
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	32ae      	adds	r2, #174	; 0xae
 800c300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c304:	699b      	ldr	r3, [r3, #24]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d00f      	beq.n	800c32a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c30a:	7dba      	ldrb	r2, [r7, #22]
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c312:	7dba      	ldrb	r2, [r7, #22]
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	32ae      	adds	r2, #174	; 0xae
 800c318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	7afa      	ldrb	r2, [r7, #11]
 800c320:	4611      	mov	r1, r2
 800c322:	68f8      	ldr	r0, [r7, #12]
 800c324:	4798      	blx	r3
 800c326:	4603      	mov	r3, r0
 800c328:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c32a:	7dfb      	ldrb	r3, [r7, #23]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d001      	beq.n	800c334 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c330:	7dfb      	ldrb	r3, [r7, #23]
 800c332:	e000      	b.n	800c336 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c334:	2300      	movs	r3, #0
}
 800c336:	4618      	mov	r0, r3
 800c338:	3718      	adds	r7, #24
 800c33a:	46bd      	mov	sp, r7
 800c33c:	bd80      	pop	{r7, pc}

0800c33e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c33e:	b580      	push	{r7, lr}
 800c340:	b086      	sub	sp, #24
 800c342:	af00      	add	r7, sp, #0
 800c344:	60f8      	str	r0, [r7, #12]
 800c346:	460b      	mov	r3, r1
 800c348:	607a      	str	r2, [r7, #4]
 800c34a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c34c:	7afb      	ldrb	r3, [r7, #11]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d16f      	bne.n	800c432 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	3314      	adds	r3, #20
 800c356:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c35e:	2b02      	cmp	r3, #2
 800c360:	d15a      	bne.n	800c418 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	689a      	ldr	r2, [r3, #8]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d914      	bls.n	800c398 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	689a      	ldr	r2, [r3, #8]
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	1ad2      	subs	r2, r2, r3
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c37c:	693b      	ldr	r3, [r7, #16]
 800c37e:	689b      	ldr	r3, [r3, #8]
 800c380:	461a      	mov	r2, r3
 800c382:	6879      	ldr	r1, [r7, #4]
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f001 f8d6 	bl	800d536 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c38a:	2300      	movs	r3, #0
 800c38c:	2200      	movs	r2, #0
 800c38e:	2100      	movs	r1, #0
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f001 fe03 	bl	800df9c <USBD_LL_PrepareReceive>
 800c396:	e03f      	b.n	800c418 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c398:	693b      	ldr	r3, [r7, #16]
 800c39a:	68da      	ldr	r2, [r3, #12]
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d11c      	bne.n	800c3de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	685a      	ldr	r2, [r3, #4]
 800c3a8:	693b      	ldr	r3, [r7, #16]
 800c3aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d316      	bcc.n	800c3de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	685a      	ldr	r2, [r3, #4]
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c3ba:	429a      	cmp	r2, r3
 800c3bc:	d20f      	bcs.n	800c3de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c3be:	2200      	movs	r2, #0
 800c3c0:	2100      	movs	r1, #0
 800c3c2:	68f8      	ldr	r0, [r7, #12]
 800c3c4:	f001 f8b7 	bl	800d536 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	2100      	movs	r1, #0
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f001 fde0 	bl	800df9c <USBD_LL_PrepareReceive>
 800c3dc:	e01c      	b.n	800c418 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3e4:	b2db      	uxtb	r3, r3
 800c3e6:	2b03      	cmp	r3, #3
 800c3e8:	d10f      	bne.n	800c40a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3f0:	68db      	ldr	r3, [r3, #12]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d009      	beq.n	800c40a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c404:	68db      	ldr	r3, [r3, #12]
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c40a:	2180      	movs	r1, #128	; 0x80
 800c40c:	68f8      	ldr	r0, [r7, #12]
 800c40e:	f001 fd1b 	bl	800de48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c412:	68f8      	ldr	r0, [r7, #12]
 800c414:	f001 f8e1 	bl	800d5da <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d03a      	beq.n	800c498 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f7ff fe42 	bl	800c0ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c430:	e032      	b.n	800c498 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c432:	7afb      	ldrb	r3, [r7, #11]
 800c434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	4619      	mov	r1, r3
 800c43c:	68f8      	ldr	r0, [r7, #12]
 800c43e:	f000 f97f 	bl	800c740 <USBD_CoreFindEP>
 800c442:	4603      	mov	r3, r0
 800c444:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c446:	7dfb      	ldrb	r3, [r7, #23]
 800c448:	2bff      	cmp	r3, #255	; 0xff
 800c44a:	d025      	beq.n	800c498 <USBD_LL_DataInStage+0x15a>
 800c44c:	7dfb      	ldrb	r3, [r7, #23]
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d122      	bne.n	800c498 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c452:	68fb      	ldr	r3, [r7, #12]
 800c454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c458:	b2db      	uxtb	r3, r3
 800c45a:	2b03      	cmp	r3, #3
 800c45c:	d11c      	bne.n	800c498 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c45e:	7dfa      	ldrb	r2, [r7, #23]
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	32ae      	adds	r2, #174	; 0xae
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	695b      	ldr	r3, [r3, #20]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d014      	beq.n	800c498 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c46e:	7dfa      	ldrb	r2, [r7, #23]
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c476:	7dfa      	ldrb	r2, [r7, #23]
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	32ae      	adds	r2, #174	; 0xae
 800c47c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c480:	695b      	ldr	r3, [r3, #20]
 800c482:	7afa      	ldrb	r2, [r7, #11]
 800c484:	4611      	mov	r1, r2
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	4798      	blx	r3
 800c48a:	4603      	mov	r3, r0
 800c48c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c48e:	7dbb      	ldrb	r3, [r7, #22]
 800c490:	2b00      	cmp	r3, #0
 800c492:	d001      	beq.n	800c498 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c494:	7dbb      	ldrb	r3, [r7, #22]
 800c496:	e000      	b.n	800c49a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3718      	adds	r7, #24
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d014      	beq.n	800c508 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e4:	685b      	ldr	r3, [r3, #4]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d00e      	beq.n	800c508 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f0:	685b      	ldr	r3, [r3, #4]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	6852      	ldr	r2, [r2, #4]
 800c4f6:	b2d2      	uxtb	r2, r2
 800c4f8:	4611      	mov	r1, r2
 800c4fa:	6878      	ldr	r0, [r7, #4]
 800c4fc:	4798      	blx	r3
 800c4fe:	4603      	mov	r3, r0
 800c500:	2b00      	cmp	r3, #0
 800c502:	d001      	beq.n	800c508 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c504:	2303      	movs	r3, #3
 800c506:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c508:	2340      	movs	r3, #64	; 0x40
 800c50a:	2200      	movs	r2, #0
 800c50c:	2100      	movs	r1, #0
 800c50e:	6878      	ldr	r0, [r7, #4]
 800c510:	f001 fc55 	bl	800ddbe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2201      	movs	r2, #1
 800c518:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2240      	movs	r2, #64	; 0x40
 800c520:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c524:	2340      	movs	r3, #64	; 0x40
 800c526:	2200      	movs	r2, #0
 800c528:	2180      	movs	r1, #128	; 0x80
 800c52a:	6878      	ldr	r0, [r7, #4]
 800c52c:	f001 fc47 	bl	800ddbe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2240      	movs	r2, #64	; 0x40
 800c53a:	621a      	str	r2, [r3, #32]

  return ret;
 800c53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c53e:	4618      	mov	r0, r3
 800c540:	3710      	adds	r7, #16
 800c542:	46bd      	mov	sp, r7
 800c544:	bd80      	pop	{r7, pc}

0800c546 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c546:	b480      	push	{r7}
 800c548:	b083      	sub	sp, #12
 800c54a:	af00      	add	r7, sp, #0
 800c54c:	6078      	str	r0, [r7, #4]
 800c54e:	460b      	mov	r3, r1
 800c550:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	78fa      	ldrb	r2, [r7, #3]
 800c556:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c558:	2300      	movs	r3, #0
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c566:	b480      	push	{r7}
 800c568:	b083      	sub	sp, #12
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c574:	b2da      	uxtb	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2204      	movs	r2, #4
 800c580:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr

0800c592 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c592:	b480      	push	{r7}
 800c594:	b083      	sub	sp, #12
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	2b04      	cmp	r3, #4
 800c5a4:	d106      	bne.n	800c5b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c5ac:	b2da      	uxtb	r2, r3
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c5b4:	2300      	movs	r3, #0
}
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	370c      	adds	r7, #12
 800c5ba:	46bd      	mov	sp, r7
 800c5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c0:	4770      	bx	lr

0800c5c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c5c2:	b580      	push	{r7, lr}
 800c5c4:	b082      	sub	sp, #8
 800c5c6:	af00      	add	r7, sp, #0
 800c5c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5d0:	b2db      	uxtb	r3, r3
 800c5d2:	2b03      	cmp	r3, #3
 800c5d4:	d110      	bne.n	800c5f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d00b      	beq.n	800c5f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e6:	69db      	ldr	r3, [r3, #28]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d005      	beq.n	800c5f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5f2:	69db      	ldr	r3, [r3, #28]
 800c5f4:	6878      	ldr	r0, [r7, #4]
 800c5f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3708      	adds	r7, #8
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}

0800c602 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c602:	b580      	push	{r7, lr}
 800c604:	b082      	sub	sp, #8
 800c606:	af00      	add	r7, sp, #0
 800c608:	6078      	str	r0, [r7, #4]
 800c60a:	460b      	mov	r3, r1
 800c60c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	32ae      	adds	r2, #174	; 0xae
 800c618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d101      	bne.n	800c624 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c620:	2303      	movs	r3, #3
 800c622:	e01c      	b.n	800c65e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c62a:	b2db      	uxtb	r3, r3
 800c62c:	2b03      	cmp	r3, #3
 800c62e:	d115      	bne.n	800c65c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	32ae      	adds	r2, #174	; 0xae
 800c63a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c63e:	6a1b      	ldr	r3, [r3, #32]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d00b      	beq.n	800c65c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	32ae      	adds	r2, #174	; 0xae
 800c64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c652:	6a1b      	ldr	r3, [r3, #32]
 800c654:	78fa      	ldrb	r2, [r7, #3]
 800c656:	4611      	mov	r1, r2
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c65c:	2300      	movs	r3, #0
}
 800c65e:	4618      	mov	r0, r3
 800c660:	3708      	adds	r7, #8
 800c662:	46bd      	mov	sp, r7
 800c664:	bd80      	pop	{r7, pc}

0800c666 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c666:	b580      	push	{r7, lr}
 800c668:	b082      	sub	sp, #8
 800c66a:	af00      	add	r7, sp, #0
 800c66c:	6078      	str	r0, [r7, #4]
 800c66e:	460b      	mov	r3, r1
 800c670:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	32ae      	adds	r2, #174	; 0xae
 800c67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d101      	bne.n	800c688 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c684:	2303      	movs	r3, #3
 800c686:	e01c      	b.n	800c6c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c68e:	b2db      	uxtb	r3, r3
 800c690:	2b03      	cmp	r3, #3
 800c692:	d115      	bne.n	800c6c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	32ae      	adds	r2, #174	; 0xae
 800c69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00b      	beq.n	800c6c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	32ae      	adds	r2, #174	; 0xae
 800c6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6b8:	78fa      	ldrb	r2, [r7, #3]
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c6c0:	2300      	movs	r3, #0
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c6ca:	b480      	push	{r7}
 800c6cc:	b083      	sub	sp, #12
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	370c      	adds	r7, #12
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6de:	4770      	bx	lr

0800c6e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b084      	sub	sp, #16
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c6e8:	2300      	movs	r3, #0
 800c6ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	2201      	movs	r2, #1
 800c6f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d00e      	beq.n	800c71c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	687a      	ldr	r2, [r7, #4]
 800c708:	6852      	ldr	r2, [r2, #4]
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	4611      	mov	r1, r2
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	4798      	blx	r3
 800c712:	4603      	mov	r3, r0
 800c714:	2b00      	cmp	r3, #0
 800c716:	d001      	beq.n	800c71c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c718:	2303      	movs	r3, #3
 800c71a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c71e:	4618      	mov	r0, r3
 800c720:	3710      	adds	r7, #16
 800c722:	46bd      	mov	sp, r7
 800c724:	bd80      	pop	{r7, pc}

0800c726 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c726:	b480      	push	{r7}
 800c728:	b083      	sub	sp, #12
 800c72a:	af00      	add	r7, sp, #0
 800c72c:	6078      	str	r0, [r7, #4]
 800c72e:	460b      	mov	r3, r1
 800c730:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c732:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c734:	4618      	mov	r0, r3
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c740:	b480      	push	{r7}
 800c742:	b083      	sub	sp, #12
 800c744:	af00      	add	r7, sp, #0
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	460b      	mov	r3, r1
 800c74a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c74c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c74e:	4618      	mov	r0, r3
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b086      	sub	sp, #24
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c76e:	2300      	movs	r3, #0
 800c770:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	885b      	ldrh	r3, [r3, #2]
 800c776:	b29a      	uxth	r2, r3
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	781b      	ldrb	r3, [r3, #0]
 800c77c:	b29b      	uxth	r3, r3
 800c77e:	429a      	cmp	r2, r3
 800c780:	d920      	bls.n	800c7c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	b29b      	uxth	r3, r3
 800c788:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c78a:	e013      	b.n	800c7b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c78c:	f107 030a 	add.w	r3, r7, #10
 800c790:	4619      	mov	r1, r3
 800c792:	6978      	ldr	r0, [r7, #20]
 800c794:	f000 f81b 	bl	800c7ce <USBD_GetNextDesc>
 800c798:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c79a:	697b      	ldr	r3, [r7, #20]
 800c79c:	785b      	ldrb	r3, [r3, #1]
 800c79e:	2b05      	cmp	r3, #5
 800c7a0:	d108      	bne.n	800c7b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c7a2:	697b      	ldr	r3, [r7, #20]
 800c7a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	789b      	ldrb	r3, [r3, #2]
 800c7aa:	78fa      	ldrb	r2, [r7, #3]
 800c7ac:	429a      	cmp	r2, r3
 800c7ae:	d008      	beq.n	800c7c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	885b      	ldrh	r3, [r3, #2]
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	897b      	ldrh	r3, [r7, #10]
 800c7bc:	429a      	cmp	r2, r3
 800c7be:	d8e5      	bhi.n	800c78c <USBD_GetEpDesc+0x32>
 800c7c0:	e000      	b.n	800c7c4 <USBD_GetEpDesc+0x6a>
          break;
 800c7c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c7c4:	693b      	ldr	r3, [r7, #16]
}
 800c7c6:	4618      	mov	r0, r3
 800c7c8:	3718      	adds	r7, #24
 800c7ca:	46bd      	mov	sp, r7
 800c7cc:	bd80      	pop	{r7, pc}

0800c7ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c7ce:	b480      	push	{r7}
 800c7d0:	b085      	sub	sp, #20
 800c7d2:	af00      	add	r7, sp, #0
 800c7d4:	6078      	str	r0, [r7, #4]
 800c7d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	881a      	ldrh	r2, [r3, #0]
 800c7e0:	68fb      	ldr	r3, [r7, #12]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	4413      	add	r3, r2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	781b      	ldrb	r3, [r3, #0]
 800c7f2:	461a      	mov	r2, r3
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c7fa:	68fb      	ldr	r3, [r7, #12]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3714      	adds	r7, #20
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c808:	b480      	push	{r7}
 800c80a:	b087      	sub	sp, #28
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	3301      	adds	r3, #1
 800c81e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c826:	8a3b      	ldrh	r3, [r7, #16]
 800c828:	021b      	lsls	r3, r3, #8
 800c82a:	b21a      	sxth	r2, r3
 800c82c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c830:	4313      	orrs	r3, r2
 800c832:	b21b      	sxth	r3, r3
 800c834:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c836:	89fb      	ldrh	r3, [r7, #14]
}
 800c838:	4618      	mov	r0, r3
 800c83a:	371c      	adds	r7, #28
 800c83c:	46bd      	mov	sp, r7
 800c83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
 800c84c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c84e:	2300      	movs	r3, #0
 800c850:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c85a:	2b40      	cmp	r3, #64	; 0x40
 800c85c:	d005      	beq.n	800c86a <USBD_StdDevReq+0x26>
 800c85e:	2b40      	cmp	r3, #64	; 0x40
 800c860:	d857      	bhi.n	800c912 <USBD_StdDevReq+0xce>
 800c862:	2b00      	cmp	r3, #0
 800c864:	d00f      	beq.n	800c886 <USBD_StdDevReq+0x42>
 800c866:	2b20      	cmp	r3, #32
 800c868:	d153      	bne.n	800c912 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	32ae      	adds	r2, #174	; 0xae
 800c874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c878:	689b      	ldr	r3, [r3, #8]
 800c87a:	6839      	ldr	r1, [r7, #0]
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	4798      	blx	r3
 800c880:	4603      	mov	r3, r0
 800c882:	73fb      	strb	r3, [r7, #15]
      break;
 800c884:	e04a      	b.n	800c91c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	785b      	ldrb	r3, [r3, #1]
 800c88a:	2b09      	cmp	r3, #9
 800c88c:	d83b      	bhi.n	800c906 <USBD_StdDevReq+0xc2>
 800c88e:	a201      	add	r2, pc, #4	; (adr r2, 800c894 <USBD_StdDevReq+0x50>)
 800c890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c894:	0800c8e9 	.word	0x0800c8e9
 800c898:	0800c8fd 	.word	0x0800c8fd
 800c89c:	0800c907 	.word	0x0800c907
 800c8a0:	0800c8f3 	.word	0x0800c8f3
 800c8a4:	0800c907 	.word	0x0800c907
 800c8a8:	0800c8c7 	.word	0x0800c8c7
 800c8ac:	0800c8bd 	.word	0x0800c8bd
 800c8b0:	0800c907 	.word	0x0800c907
 800c8b4:	0800c8df 	.word	0x0800c8df
 800c8b8:	0800c8d1 	.word	0x0800c8d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f000 fa3c 	bl	800cd3c <USBD_GetDescriptor>
          break;
 800c8c4:	e024      	b.n	800c910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fbcb 	bl	800d064 <USBD_SetAddress>
          break;
 800c8ce:	e01f      	b.n	800c910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c8d0:	6839      	ldr	r1, [r7, #0]
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f000 fc0a 	bl	800d0ec <USBD_SetConfig>
 800c8d8:	4603      	mov	r3, r0
 800c8da:	73fb      	strb	r3, [r7, #15]
          break;
 800c8dc:	e018      	b.n	800c910 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c8de:	6839      	ldr	r1, [r7, #0]
 800c8e0:	6878      	ldr	r0, [r7, #4]
 800c8e2:	f000 fcad 	bl	800d240 <USBD_GetConfig>
          break;
 800c8e6:	e013      	b.n	800c910 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c8e8:	6839      	ldr	r1, [r7, #0]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	f000 fcde 	bl	800d2ac <USBD_GetStatus>
          break;
 800c8f0:	e00e      	b.n	800c910 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c8f2:	6839      	ldr	r1, [r7, #0]
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 fd0d 	bl	800d314 <USBD_SetFeature>
          break;
 800c8fa:	e009      	b.n	800c910 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c8fc:	6839      	ldr	r1, [r7, #0]
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 fd31 	bl	800d366 <USBD_ClrFeature>
          break;
 800c904:	e004      	b.n	800c910 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c906:	6839      	ldr	r1, [r7, #0]
 800c908:	6878      	ldr	r0, [r7, #4]
 800c90a:	f000 fd88 	bl	800d41e <USBD_CtlError>
          break;
 800c90e:	bf00      	nop
      }
      break;
 800c910:	e004      	b.n	800c91c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c912:	6839      	ldr	r1, [r7, #0]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 fd82 	bl	800d41e <USBD_CtlError>
      break;
 800c91a:	bf00      	nop
  }

  return ret;
 800c91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3710      	adds	r7, #16
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop

0800c928 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b084      	sub	sp, #16
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c932:	2300      	movs	r3, #0
 800c934:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	781b      	ldrb	r3, [r3, #0]
 800c93a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c93e:	2b40      	cmp	r3, #64	; 0x40
 800c940:	d005      	beq.n	800c94e <USBD_StdItfReq+0x26>
 800c942:	2b40      	cmp	r3, #64	; 0x40
 800c944:	d852      	bhi.n	800c9ec <USBD_StdItfReq+0xc4>
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <USBD_StdItfReq+0x26>
 800c94a:	2b20      	cmp	r3, #32
 800c94c:	d14e      	bne.n	800c9ec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c954:	b2db      	uxtb	r3, r3
 800c956:	3b01      	subs	r3, #1
 800c958:	2b02      	cmp	r3, #2
 800c95a:	d840      	bhi.n	800c9de <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c95c:	683b      	ldr	r3, [r7, #0]
 800c95e:	889b      	ldrh	r3, [r3, #4]
 800c960:	b2db      	uxtb	r3, r3
 800c962:	2b01      	cmp	r3, #1
 800c964:	d836      	bhi.n	800c9d4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800c966:	683b      	ldr	r3, [r7, #0]
 800c968:	889b      	ldrh	r3, [r3, #4]
 800c96a:	b2db      	uxtb	r3, r3
 800c96c:	4619      	mov	r1, r3
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f7ff fed9 	bl	800c726 <USBD_CoreFindIF>
 800c974:	4603      	mov	r3, r0
 800c976:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c978:	7bbb      	ldrb	r3, [r7, #14]
 800c97a:	2bff      	cmp	r3, #255	; 0xff
 800c97c:	d01d      	beq.n	800c9ba <USBD_StdItfReq+0x92>
 800c97e:	7bbb      	ldrb	r3, [r7, #14]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d11a      	bne.n	800c9ba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800c984:	7bba      	ldrb	r2, [r7, #14]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	32ae      	adds	r2, #174	; 0xae
 800c98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98e:	689b      	ldr	r3, [r3, #8]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00f      	beq.n	800c9b4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800c994:	7bba      	ldrb	r2, [r7, #14]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c99c:	7bba      	ldrb	r2, [r7, #14]
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	32ae      	adds	r2, #174	; 0xae
 800c9a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a6:	689b      	ldr	r3, [r3, #8]
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	6878      	ldr	r0, [r7, #4]
 800c9ac:	4798      	blx	r3
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9b2:	e004      	b.n	800c9be <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800c9b4:	2303      	movs	r3, #3
 800c9b6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800c9b8:	e001      	b.n	800c9be <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800c9ba:	2303      	movs	r3, #3
 800c9bc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	88db      	ldrh	r3, [r3, #6]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d110      	bne.n	800c9e8 <USBD_StdItfReq+0xc0>
 800c9c6:	7bfb      	ldrb	r3, [r7, #15]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10d      	bne.n	800c9e8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f000 fdf1 	bl	800d5b4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800c9d2:	e009      	b.n	800c9e8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	6878      	ldr	r0, [r7, #4]
 800c9d8:	f000 fd21 	bl	800d41e <USBD_CtlError>
          break;
 800c9dc:	e004      	b.n	800c9e8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800c9de:	6839      	ldr	r1, [r7, #0]
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 fd1c 	bl	800d41e <USBD_CtlError>
          break;
 800c9e6:	e000      	b.n	800c9ea <USBD_StdItfReq+0xc2>
          break;
 800c9e8:	bf00      	nop
      }
      break;
 800c9ea:	e004      	b.n	800c9f6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800c9ec:	6839      	ldr	r1, [r7, #0]
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	f000 fd15 	bl	800d41e <USBD_CtlError>
      break;
 800c9f4:	bf00      	nop
  }

  return ret;
 800c9f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	3710      	adds	r7, #16
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	bd80      	pop	{r7, pc}

0800ca00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	889b      	ldrh	r3, [r3, #4]
 800ca12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	781b      	ldrb	r3, [r3, #0]
 800ca18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca1c:	2b40      	cmp	r3, #64	; 0x40
 800ca1e:	d007      	beq.n	800ca30 <USBD_StdEPReq+0x30>
 800ca20:	2b40      	cmp	r3, #64	; 0x40
 800ca22:	f200 817f 	bhi.w	800cd24 <USBD_StdEPReq+0x324>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d02a      	beq.n	800ca80 <USBD_StdEPReq+0x80>
 800ca2a:	2b20      	cmp	r3, #32
 800ca2c:	f040 817a 	bne.w	800cd24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ca30:	7bbb      	ldrb	r3, [r7, #14]
 800ca32:	4619      	mov	r1, r3
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f7ff fe83 	bl	800c740 <USBD_CoreFindEP>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca3e:	7b7b      	ldrb	r3, [r7, #13]
 800ca40:	2bff      	cmp	r3, #255	; 0xff
 800ca42:	f000 8174 	beq.w	800cd2e <USBD_StdEPReq+0x32e>
 800ca46:	7b7b      	ldrb	r3, [r7, #13]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	f040 8170 	bne.w	800cd2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ca4e:	7b7a      	ldrb	r2, [r7, #13]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ca56:	7b7a      	ldrb	r2, [r7, #13]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	32ae      	adds	r2, #174	; 0xae
 800ca5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca60:	689b      	ldr	r3, [r3, #8]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	f000 8163 	beq.w	800cd2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ca68:	7b7a      	ldrb	r2, [r7, #13]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	32ae      	adds	r2, #174	; 0xae
 800ca6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca72:	689b      	ldr	r3, [r3, #8]
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	4798      	blx	r3
 800ca7a:	4603      	mov	r3, r0
 800ca7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ca7e:	e156      	b.n	800cd2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	785b      	ldrb	r3, [r3, #1]
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d008      	beq.n	800ca9a <USBD_StdEPReq+0x9a>
 800ca88:	2b03      	cmp	r3, #3
 800ca8a:	f300 8145 	bgt.w	800cd18 <USBD_StdEPReq+0x318>
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	f000 809b 	beq.w	800cbca <USBD_StdEPReq+0x1ca>
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d03c      	beq.n	800cb12 <USBD_StdEPReq+0x112>
 800ca98:	e13e      	b.n	800cd18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d002      	beq.n	800caac <USBD_StdEPReq+0xac>
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d016      	beq.n	800cad8 <USBD_StdEPReq+0xd8>
 800caaa:	e02c      	b.n	800cb06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00d      	beq.n	800cace <USBD_StdEPReq+0xce>
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	2b80      	cmp	r3, #128	; 0x80
 800cab6:	d00a      	beq.n	800cace <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f001 f9c3 	bl	800de48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cac2:	2180      	movs	r1, #128	; 0x80
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f001 f9bf 	bl	800de48 <USBD_LL_StallEP>
 800caca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cacc:	e020      	b.n	800cb10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fca4 	bl	800d41e <USBD_CtlError>
              break;
 800cad6:	e01b      	b.n	800cb10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	885b      	ldrh	r3, [r3, #2]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10e      	bne.n	800cafe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <USBD_StdEPReq+0xfe>
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	2b80      	cmp	r3, #128	; 0x80
 800caea:	d008      	beq.n	800cafe <USBD_StdEPReq+0xfe>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	88db      	ldrh	r3, [r3, #6]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f001 f9a5 	bl	800de48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fd58 	bl	800d5b4 <USBD_CtlSendStatus>

              break;
 800cb04:	e004      	b.n	800cb10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fc88 	bl	800d41e <USBD_CtlError>
              break;
 800cb0e:	bf00      	nop
          }
          break;
 800cb10:	e107      	b.n	800cd22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d002      	beq.n	800cb24 <USBD_StdEPReq+0x124>
 800cb1e:	2b03      	cmp	r3, #3
 800cb20:	d016      	beq.n	800cb50 <USBD_StdEPReq+0x150>
 800cb22:	e04b      	b.n	800cbbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb24:	7bbb      	ldrb	r3, [r7, #14]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00d      	beq.n	800cb46 <USBD_StdEPReq+0x146>
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	2b80      	cmp	r3, #128	; 0x80
 800cb2e:	d00a      	beq.n	800cb46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f001 f987 	bl	800de48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb3a:	2180      	movs	r1, #128	; 0x80
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f001 f983 	bl	800de48 <USBD_LL_StallEP>
 800cb42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb44:	e040      	b.n	800cbc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fc68 	bl	800d41e <USBD_CtlError>
              break;
 800cb4e:	e03b      	b.n	800cbc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	885b      	ldrh	r3, [r3, #2]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d136      	bne.n	800cbc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d004      	beq.n	800cb6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb62:	7bbb      	ldrb	r3, [r7, #14]
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f001 f98d 	bl	800de86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fd21 	bl	800d5b4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb72:	7bbb      	ldrb	r3, [r7, #14]
 800cb74:	4619      	mov	r1, r3
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	f7ff fde2 	bl	800c740 <USBD_CoreFindEP>
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb80:	7b7b      	ldrb	r3, [r7, #13]
 800cb82:	2bff      	cmp	r3, #255	; 0xff
 800cb84:	d01f      	beq.n	800cbc6 <USBD_StdEPReq+0x1c6>
 800cb86:	7b7b      	ldrb	r3, [r7, #13]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d11c      	bne.n	800cbc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cb8c:	7b7a      	ldrb	r2, [r7, #13]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cb94:	7b7a      	ldrb	r2, [r7, #13]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	32ae      	adds	r2, #174	; 0xae
 800cb9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9e:	689b      	ldr	r3, [r3, #8]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d010      	beq.n	800cbc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cba4:	7b7a      	ldrb	r2, [r7, #13]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	32ae      	adds	r2, #174	; 0xae
 800cbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbae:	689b      	ldr	r3, [r3, #8]
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	4798      	blx	r3
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cbba:	e004      	b.n	800cbc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f000 fc2d 	bl	800d41e <USBD_CtlError>
              break;
 800cbc4:	e000      	b.n	800cbc8 <USBD_StdEPReq+0x1c8>
              break;
 800cbc6:	bf00      	nop
          }
          break;
 800cbc8:	e0ab      	b.n	800cd22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b02      	cmp	r3, #2
 800cbd4:	d002      	beq.n	800cbdc <USBD_StdEPReq+0x1dc>
 800cbd6:	2b03      	cmp	r3, #3
 800cbd8:	d032      	beq.n	800cc40 <USBD_StdEPReq+0x240>
 800cbda:	e097      	b.n	800cd0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d007      	beq.n	800cbf2 <USBD_StdEPReq+0x1f2>
 800cbe2:	7bbb      	ldrb	r3, [r7, #14]
 800cbe4:	2b80      	cmp	r3, #128	; 0x80
 800cbe6:	d004      	beq.n	800cbf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cbe8:	6839      	ldr	r1, [r7, #0]
 800cbea:	6878      	ldr	r0, [r7, #4]
 800cbec:	f000 fc17 	bl	800d41e <USBD_CtlError>
                break;
 800cbf0:	e091      	b.n	800cd16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	da0b      	bge.n	800cc12 <USBD_StdEPReq+0x212>
 800cbfa:	7bbb      	ldrb	r3, [r7, #14]
 800cbfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc00:	4613      	mov	r3, r2
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	4413      	add	r3, r2
 800cc06:	009b      	lsls	r3, r3, #2
 800cc08:	3310      	adds	r3, #16
 800cc0a:	687a      	ldr	r2, [r7, #4]
 800cc0c:	4413      	add	r3, r2
 800cc0e:	3304      	adds	r3, #4
 800cc10:	e00b      	b.n	800cc2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc18:	4613      	mov	r3, r2
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	4413      	add	r3, r2
 800cc1e:	009b      	lsls	r3, r3, #2
 800cc20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	4413      	add	r3, r2
 800cc28:	3304      	adds	r3, #4
 800cc2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2200      	movs	r2, #0
 800cc30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	2202      	movs	r2, #2
 800cc36:	4619      	mov	r1, r3
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 fc61 	bl	800d500 <USBD_CtlSendData>
              break;
 800cc3e:	e06a      	b.n	800cd16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	da11      	bge.n	800cc6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc48:	7bbb      	ldrb	r3, [r7, #14]
 800cc4a:	f003 020f 	and.w	r2, r3, #15
 800cc4e:	6879      	ldr	r1, [r7, #4]
 800cc50:	4613      	mov	r3, r2
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	4413      	add	r3, r2
 800cc56:	009b      	lsls	r3, r3, #2
 800cc58:	440b      	add	r3, r1
 800cc5a:	3324      	adds	r3, #36	; 0x24
 800cc5c:	881b      	ldrh	r3, [r3, #0]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d117      	bne.n	800cc92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fbda 	bl	800d41e <USBD_CtlError>
                  break;
 800cc6a:	e054      	b.n	800cd16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc6c:	7bbb      	ldrb	r3, [r7, #14]
 800cc6e:	f003 020f 	and.w	r2, r3, #15
 800cc72:	6879      	ldr	r1, [r7, #4]
 800cc74:	4613      	mov	r3, r2
 800cc76:	009b      	lsls	r3, r3, #2
 800cc78:	4413      	add	r3, r2
 800cc7a:	009b      	lsls	r3, r3, #2
 800cc7c:	440b      	add	r3, r1
 800cc7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc82:	881b      	ldrh	r3, [r3, #0]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d104      	bne.n	800cc92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cc88:	6839      	ldr	r1, [r7, #0]
 800cc8a:	6878      	ldr	r0, [r7, #4]
 800cc8c:	f000 fbc7 	bl	800d41e <USBD_CtlError>
                  break;
 800cc90:	e041      	b.n	800cd16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	da0b      	bge.n	800ccb2 <USBD_StdEPReq+0x2b2>
 800cc9a:	7bbb      	ldrb	r3, [r7, #14]
 800cc9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cca0:	4613      	mov	r3, r2
 800cca2:	009b      	lsls	r3, r3, #2
 800cca4:	4413      	add	r3, r2
 800cca6:	009b      	lsls	r3, r3, #2
 800cca8:	3310      	adds	r3, #16
 800ccaa:	687a      	ldr	r2, [r7, #4]
 800ccac:	4413      	add	r3, r2
 800ccae:	3304      	adds	r3, #4
 800ccb0:	e00b      	b.n	800ccca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccb2:	7bbb      	ldrb	r3, [r7, #14]
 800ccb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ccc4:	687a      	ldr	r2, [r7, #4]
 800ccc6:	4413      	add	r3, r2
 800ccc8:	3304      	adds	r3, #4
 800ccca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cccc:	7bbb      	ldrb	r3, [r7, #14]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d002      	beq.n	800ccd8 <USBD_StdEPReq+0x2d8>
 800ccd2:	7bbb      	ldrb	r3, [r7, #14]
 800ccd4:	2b80      	cmp	r3, #128	; 0x80
 800ccd6:	d103      	bne.n	800cce0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	601a      	str	r2, [r3, #0]
 800ccde:	e00e      	b.n	800ccfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	4619      	mov	r1, r3
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f001 f8ed 	bl	800dec4 <USBD_LL_IsStallEP>
 800ccea:	4603      	mov	r3, r0
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	d003      	beq.n	800ccf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	2201      	movs	r2, #1
 800ccf4:	601a      	str	r2, [r3, #0]
 800ccf6:	e002      	b.n	800ccfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccfe:	68bb      	ldr	r3, [r7, #8]
 800cd00:	2202      	movs	r2, #2
 800cd02:	4619      	mov	r1, r3
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fbfb 	bl	800d500 <USBD_CtlSendData>
              break;
 800cd0a:	e004      	b.n	800cd16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cd0c:	6839      	ldr	r1, [r7, #0]
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fb85 	bl	800d41e <USBD_CtlError>
              break;
 800cd14:	bf00      	nop
          }
          break;
 800cd16:	e004      	b.n	800cd22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cd18:	6839      	ldr	r1, [r7, #0]
 800cd1a:	6878      	ldr	r0, [r7, #4]
 800cd1c:	f000 fb7f 	bl	800d41e <USBD_CtlError>
          break;
 800cd20:	bf00      	nop
      }
      break;
 800cd22:	e005      	b.n	800cd30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fb79 	bl	800d41e <USBD_CtlError>
      break;
 800cd2c:	e000      	b.n	800cd30 <USBD_StdEPReq+0x330>
      break;
 800cd2e:	bf00      	nop
  }

  return ret;
 800cd30:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd32:	4618      	mov	r0, r3
 800cd34:	3710      	adds	r7, #16
 800cd36:	46bd      	mov	sp, r7
 800cd38:	bd80      	pop	{r7, pc}
	...

0800cd3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b084      	sub	sp, #16
 800cd40:	af00      	add	r7, sp, #0
 800cd42:	6078      	str	r0, [r7, #4]
 800cd44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd46:	2300      	movs	r3, #0
 800cd48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd4e:	2300      	movs	r3, #0
 800cd50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	885b      	ldrh	r3, [r3, #2]
 800cd56:	0a1b      	lsrs	r3, r3, #8
 800cd58:	b29b      	uxth	r3, r3
 800cd5a:	3b01      	subs	r3, #1
 800cd5c:	2b0e      	cmp	r3, #14
 800cd5e:	f200 8152 	bhi.w	800d006 <USBD_GetDescriptor+0x2ca>
 800cd62:	a201      	add	r2, pc, #4	; (adr r2, 800cd68 <USBD_GetDescriptor+0x2c>)
 800cd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd68:	0800cdd9 	.word	0x0800cdd9
 800cd6c:	0800cdf1 	.word	0x0800cdf1
 800cd70:	0800ce31 	.word	0x0800ce31
 800cd74:	0800d007 	.word	0x0800d007
 800cd78:	0800d007 	.word	0x0800d007
 800cd7c:	0800cfa7 	.word	0x0800cfa7
 800cd80:	0800cfd3 	.word	0x0800cfd3
 800cd84:	0800d007 	.word	0x0800d007
 800cd88:	0800d007 	.word	0x0800d007
 800cd8c:	0800d007 	.word	0x0800d007
 800cd90:	0800d007 	.word	0x0800d007
 800cd94:	0800d007 	.word	0x0800d007
 800cd98:	0800d007 	.word	0x0800d007
 800cd9c:	0800d007 	.word	0x0800d007
 800cda0:	0800cda5 	.word	0x0800cda5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdaa:	69db      	ldr	r3, [r3, #28]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d00b      	beq.n	800cdc8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdb6:	69db      	ldr	r3, [r3, #28]
 800cdb8:	687a      	ldr	r2, [r7, #4]
 800cdba:	7c12      	ldrb	r2, [r2, #16]
 800cdbc:	f107 0108 	add.w	r1, r7, #8
 800cdc0:	4610      	mov	r0, r2
 800cdc2:	4798      	blx	r3
 800cdc4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cdc6:	e126      	b.n	800d016 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cdc8:	6839      	ldr	r1, [r7, #0]
 800cdca:	6878      	ldr	r0, [r7, #4]
 800cdcc:	f000 fb27 	bl	800d41e <USBD_CtlError>
        err++;
 800cdd0:	7afb      	ldrb	r3, [r7, #11]
 800cdd2:	3301      	adds	r3, #1
 800cdd4:	72fb      	strb	r3, [r7, #11]
      break;
 800cdd6:	e11e      	b.n	800d016 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	687a      	ldr	r2, [r7, #4]
 800cde2:	7c12      	ldrb	r2, [r2, #16]
 800cde4:	f107 0108 	add.w	r1, r7, #8
 800cde8:	4610      	mov	r0, r2
 800cdea:	4798      	blx	r3
 800cdec:	60f8      	str	r0, [r7, #12]
      break;
 800cdee:	e112      	b.n	800d016 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	7c1b      	ldrb	r3, [r3, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d10d      	bne.n	800ce14 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cdfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce00:	f107 0208 	add.w	r2, r7, #8
 800ce04:	4610      	mov	r0, r2
 800ce06:	4798      	blx	r3
 800ce08:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	3301      	adds	r3, #1
 800ce0e:	2202      	movs	r2, #2
 800ce10:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ce12:	e100      	b.n	800d016 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce1c:	f107 0208 	add.w	r2, r7, #8
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
 800ce24:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	3301      	adds	r3, #1
 800ce2a:	2202      	movs	r2, #2
 800ce2c:	701a      	strb	r2, [r3, #0]
      break;
 800ce2e:	e0f2      	b.n	800d016 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	885b      	ldrh	r3, [r3, #2]
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b05      	cmp	r3, #5
 800ce38:	f200 80ac 	bhi.w	800cf94 <USBD_GetDescriptor+0x258>
 800ce3c:	a201      	add	r2, pc, #4	; (adr r2, 800ce44 <USBD_GetDescriptor+0x108>)
 800ce3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce42:	bf00      	nop
 800ce44:	0800ce5d 	.word	0x0800ce5d
 800ce48:	0800ce91 	.word	0x0800ce91
 800ce4c:	0800cec5 	.word	0x0800cec5
 800ce50:	0800cef9 	.word	0x0800cef9
 800ce54:	0800cf2d 	.word	0x0800cf2d
 800ce58:	0800cf61 	.word	0x0800cf61
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce62:	685b      	ldr	r3, [r3, #4]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d00b      	beq.n	800ce80 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce6e:	685b      	ldr	r3, [r3, #4]
 800ce70:	687a      	ldr	r2, [r7, #4]
 800ce72:	7c12      	ldrb	r2, [r2, #16]
 800ce74:	f107 0108 	add.w	r1, r7, #8
 800ce78:	4610      	mov	r0, r2
 800ce7a:	4798      	blx	r3
 800ce7c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce7e:	e091      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ce80:	6839      	ldr	r1, [r7, #0]
 800ce82:	6878      	ldr	r0, [r7, #4]
 800ce84:	f000 facb 	bl	800d41e <USBD_CtlError>
            err++;
 800ce88:	7afb      	ldrb	r3, [r7, #11]
 800ce8a:	3301      	adds	r3, #1
 800ce8c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce8e:	e089      	b.n	800cfa4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce96:	689b      	ldr	r3, [r3, #8]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d00b      	beq.n	800ceb4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea2:	689b      	ldr	r3, [r3, #8]
 800cea4:	687a      	ldr	r2, [r7, #4]
 800cea6:	7c12      	ldrb	r2, [r2, #16]
 800cea8:	f107 0108 	add.w	r1, r7, #8
 800ceac:	4610      	mov	r0, r2
 800ceae:	4798      	blx	r3
 800ceb0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ceb2:	e077      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ceb4:	6839      	ldr	r1, [r7, #0]
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fab1 	bl	800d41e <USBD_CtlError>
            err++;
 800cebc:	7afb      	ldrb	r3, [r7, #11]
 800cebe:	3301      	adds	r3, #1
 800cec0:	72fb      	strb	r3, [r7, #11]
          break;
 800cec2:	e06f      	b.n	800cfa4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceca:	68db      	ldr	r3, [r3, #12]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d00b      	beq.n	800cee8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ced6:	68db      	ldr	r3, [r3, #12]
 800ced8:	687a      	ldr	r2, [r7, #4]
 800ceda:	7c12      	ldrb	r2, [r2, #16]
 800cedc:	f107 0108 	add.w	r1, r7, #8
 800cee0:	4610      	mov	r0, r2
 800cee2:	4798      	blx	r3
 800cee4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cee6:	e05d      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cee8:	6839      	ldr	r1, [r7, #0]
 800ceea:	6878      	ldr	r0, [r7, #4]
 800ceec:	f000 fa97 	bl	800d41e <USBD_CtlError>
            err++;
 800cef0:	7afb      	ldrb	r3, [r7, #11]
 800cef2:	3301      	adds	r3, #1
 800cef4:	72fb      	strb	r3, [r7, #11]
          break;
 800cef6:	e055      	b.n	800cfa4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cefe:	691b      	ldr	r3, [r3, #16]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d00b      	beq.n	800cf1c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf0a:	691b      	ldr	r3, [r3, #16]
 800cf0c:	687a      	ldr	r2, [r7, #4]
 800cf0e:	7c12      	ldrb	r2, [r2, #16]
 800cf10:	f107 0108 	add.w	r1, r7, #8
 800cf14:	4610      	mov	r0, r2
 800cf16:	4798      	blx	r3
 800cf18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf1a:	e043      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fa7d 	bl	800d41e <USBD_CtlError>
            err++;
 800cf24:	7afb      	ldrb	r3, [r7, #11]
 800cf26:	3301      	adds	r3, #1
 800cf28:	72fb      	strb	r3, [r7, #11]
          break;
 800cf2a:	e03b      	b.n	800cfa4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf32:	695b      	ldr	r3, [r3, #20]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d00b      	beq.n	800cf50 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf3e:	695b      	ldr	r3, [r3, #20]
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	7c12      	ldrb	r2, [r2, #16]
 800cf44:	f107 0108 	add.w	r1, r7, #8
 800cf48:	4610      	mov	r0, r2
 800cf4a:	4798      	blx	r3
 800cf4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf4e:	e029      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fa63 	bl	800d41e <USBD_CtlError>
            err++;
 800cf58:	7afb      	ldrb	r3, [r7, #11]
 800cf5a:	3301      	adds	r3, #1
 800cf5c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf5e:	e021      	b.n	800cfa4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf66:	699b      	ldr	r3, [r3, #24]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d00b      	beq.n	800cf84 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf72:	699b      	ldr	r3, [r3, #24]
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	7c12      	ldrb	r2, [r2, #16]
 800cf78:	f107 0108 	add.w	r1, r7, #8
 800cf7c:	4610      	mov	r0, r2
 800cf7e:	4798      	blx	r3
 800cf80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf82:	e00f      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fa49 	bl	800d41e <USBD_CtlError>
            err++;
 800cf8c:	7afb      	ldrb	r3, [r7, #11]
 800cf8e:	3301      	adds	r3, #1
 800cf90:	72fb      	strb	r3, [r7, #11]
          break;
 800cf92:	e007      	b.n	800cfa4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf94:	6839      	ldr	r1, [r7, #0]
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fa41 	bl	800d41e <USBD_CtlError>
          err++;
 800cf9c:	7afb      	ldrb	r3, [r7, #11]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800cfa2:	bf00      	nop
      }
      break;
 800cfa4:	e037      	b.n	800d016 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	7c1b      	ldrb	r3, [r3, #16]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d109      	bne.n	800cfc2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfb6:	f107 0208 	add.w	r2, r7, #8
 800cfba:	4610      	mov	r0, r2
 800cfbc:	4798      	blx	r3
 800cfbe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cfc0:	e029      	b.n	800d016 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cfc2:	6839      	ldr	r1, [r7, #0]
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f000 fa2a 	bl	800d41e <USBD_CtlError>
        err++;
 800cfca:	7afb      	ldrb	r3, [r7, #11]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	72fb      	strb	r3, [r7, #11]
      break;
 800cfd0:	e021      	b.n	800d016 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	7c1b      	ldrb	r3, [r3, #16]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d10d      	bne.n	800cff6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cfe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfe2:	f107 0208 	add.w	r2, r7, #8
 800cfe6:	4610      	mov	r0, r2
 800cfe8:	4798      	blx	r3
 800cfea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	3301      	adds	r3, #1
 800cff0:	2207      	movs	r2, #7
 800cff2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cff4:	e00f      	b.n	800d016 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cff6:	6839      	ldr	r1, [r7, #0]
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f000 fa10 	bl	800d41e <USBD_CtlError>
        err++;
 800cffe:	7afb      	ldrb	r3, [r7, #11]
 800d000:	3301      	adds	r3, #1
 800d002:	72fb      	strb	r3, [r7, #11]
      break;
 800d004:	e007      	b.n	800d016 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d006:	6839      	ldr	r1, [r7, #0]
 800d008:	6878      	ldr	r0, [r7, #4]
 800d00a:	f000 fa08 	bl	800d41e <USBD_CtlError>
      err++;
 800d00e:	7afb      	ldrb	r3, [r7, #11]
 800d010:	3301      	adds	r3, #1
 800d012:	72fb      	strb	r3, [r7, #11]
      break;
 800d014:	bf00      	nop
  }

  if (err != 0U)
 800d016:	7afb      	ldrb	r3, [r7, #11]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d11e      	bne.n	800d05a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d01c:	683b      	ldr	r3, [r7, #0]
 800d01e:	88db      	ldrh	r3, [r3, #6]
 800d020:	2b00      	cmp	r3, #0
 800d022:	d016      	beq.n	800d052 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d024:	893b      	ldrh	r3, [r7, #8]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00e      	beq.n	800d048 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d02a:	683b      	ldr	r3, [r7, #0]
 800d02c:	88da      	ldrh	r2, [r3, #6]
 800d02e:	893b      	ldrh	r3, [r7, #8]
 800d030:	4293      	cmp	r3, r2
 800d032:	bf28      	it	cs
 800d034:	4613      	movcs	r3, r2
 800d036:	b29b      	uxth	r3, r3
 800d038:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d03a:	893b      	ldrh	r3, [r7, #8]
 800d03c:	461a      	mov	r2, r3
 800d03e:	68f9      	ldr	r1, [r7, #12]
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 fa5d 	bl	800d500 <USBD_CtlSendData>
 800d046:	e009      	b.n	800d05c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d048:	6839      	ldr	r1, [r7, #0]
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	f000 f9e7 	bl	800d41e <USBD_CtlError>
 800d050:	e004      	b.n	800d05c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d052:	6878      	ldr	r0, [r7, #4]
 800d054:	f000 faae 	bl	800d5b4 <USBD_CtlSendStatus>
 800d058:	e000      	b.n	800d05c <USBD_GetDescriptor+0x320>
    return;
 800d05a:	bf00      	nop
  }
}
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop

0800d064 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
 800d06c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	889b      	ldrh	r3, [r3, #4]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d131      	bne.n	800d0da <USBD_SetAddress+0x76>
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	88db      	ldrh	r3, [r3, #6]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d12d      	bne.n	800d0da <USBD_SetAddress+0x76>
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	885b      	ldrh	r3, [r3, #2]
 800d082:	2b7f      	cmp	r3, #127	; 0x7f
 800d084:	d829      	bhi.n	800d0da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	885b      	ldrh	r3, [r3, #2]
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d090:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d098:	b2db      	uxtb	r3, r3
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d104      	bne.n	800d0a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d09e:	6839      	ldr	r1, [r7, #0]
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 f9bc 	bl	800d41e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0a6:	e01d      	b.n	800d0e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	7bfa      	ldrb	r2, [r7, #15]
 800d0ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d0b0:	7bfb      	ldrb	r3, [r7, #15]
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 ff31 	bl	800df1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d0ba:	6878      	ldr	r0, [r7, #4]
 800d0bc:	f000 fa7a 	bl	800d5b4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d004      	beq.n	800d0d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2202      	movs	r2, #2
 800d0ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0ce:	e009      	b.n	800d0e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0d8:	e004      	b.n	800d0e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d0da:	6839      	ldr	r1, [r7, #0]
 800d0dc:	6878      	ldr	r0, [r7, #4]
 800d0de:	f000 f99e 	bl	800d41e <USBD_CtlError>
  }
}
 800d0e2:	bf00      	nop
 800d0e4:	bf00      	nop
 800d0e6:	3710      	adds	r7, #16
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	bd80      	pop	{r7, pc}

0800d0ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d0fa:	683b      	ldr	r3, [r7, #0]
 800d0fc:	885b      	ldrh	r3, [r3, #2]
 800d0fe:	b2da      	uxtb	r2, r3
 800d100:	4b4e      	ldr	r3, [pc, #312]	; (800d23c <USBD_SetConfig+0x150>)
 800d102:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d104:	4b4d      	ldr	r3, [pc, #308]	; (800d23c <USBD_SetConfig+0x150>)
 800d106:	781b      	ldrb	r3, [r3, #0]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d905      	bls.n	800d118 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f985 	bl	800d41e <USBD_CtlError>
    return USBD_FAIL;
 800d114:	2303      	movs	r3, #3
 800d116:	e08c      	b.n	800d232 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d11e:	b2db      	uxtb	r3, r3
 800d120:	2b02      	cmp	r3, #2
 800d122:	d002      	beq.n	800d12a <USBD_SetConfig+0x3e>
 800d124:	2b03      	cmp	r3, #3
 800d126:	d029      	beq.n	800d17c <USBD_SetConfig+0x90>
 800d128:	e075      	b.n	800d216 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d12a:	4b44      	ldr	r3, [pc, #272]	; (800d23c <USBD_SetConfig+0x150>)
 800d12c:	781b      	ldrb	r3, [r3, #0]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d020      	beq.n	800d174 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d132:	4b42      	ldr	r3, [pc, #264]	; (800d23c <USBD_SetConfig+0x150>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	461a      	mov	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d13c:	4b3f      	ldr	r3, [pc, #252]	; (800d23c <USBD_SetConfig+0x150>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7fe ffbd 	bl	800c0c2 <USBD_SetClassConfig>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d008      	beq.n	800d164 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f962 	bl	800d41e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2202      	movs	r2, #2
 800d15e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d162:	e065      	b.n	800d230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fa25 	bl	800d5b4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	2203      	movs	r2, #3
 800d16e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d172:	e05d      	b.n	800d230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f000 fa1d 	bl	800d5b4 <USBD_CtlSendStatus>
      break;
 800d17a:	e059      	b.n	800d230 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d17c:	4b2f      	ldr	r3, [pc, #188]	; (800d23c <USBD_SetConfig+0x150>)
 800d17e:	781b      	ldrb	r3, [r3, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d112      	bne.n	800d1aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	2202      	movs	r2, #2
 800d188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d18c:	4b2b      	ldr	r3, [pc, #172]	; (800d23c <USBD_SetConfig+0x150>)
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	461a      	mov	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d196:	4b29      	ldr	r3, [pc, #164]	; (800d23c <USBD_SetConfig+0x150>)
 800d198:	781b      	ldrb	r3, [r3, #0]
 800d19a:	4619      	mov	r1, r3
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f7fe ffac 	bl	800c0fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d1a2:	6878      	ldr	r0, [r7, #4]
 800d1a4:	f000 fa06 	bl	800d5b4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d1a8:	e042      	b.n	800d230 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d1aa:	4b24      	ldr	r3, [pc, #144]	; (800d23c <USBD_SetConfig+0x150>)
 800d1ac:	781b      	ldrb	r3, [r3, #0]
 800d1ae:	461a      	mov	r2, r3
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d02a      	beq.n	800d20e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	685b      	ldr	r3, [r3, #4]
 800d1bc:	b2db      	uxtb	r3, r3
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f7fe ff9a 	bl	800c0fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d1c6:	4b1d      	ldr	r3, [pc, #116]	; (800d23c <USBD_SetConfig+0x150>)
 800d1c8:	781b      	ldrb	r3, [r3, #0]
 800d1ca:	461a      	mov	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d1d0:	4b1a      	ldr	r3, [pc, #104]	; (800d23c <USBD_SetConfig+0x150>)
 800d1d2:	781b      	ldrb	r3, [r3, #0]
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	6878      	ldr	r0, [r7, #4]
 800d1d8:	f7fe ff73 	bl	800c0c2 <USBD_SetClassConfig>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d1e0:	7bfb      	ldrb	r3, [r7, #15]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d00f      	beq.n	800d206 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d1e6:	6839      	ldr	r1, [r7, #0]
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f918 	bl	800d41e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	685b      	ldr	r3, [r3, #4]
 800d1f2:	b2db      	uxtb	r3, r3
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	6878      	ldr	r0, [r7, #4]
 800d1f8:	f7fe ff7f 	bl	800c0fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2202      	movs	r2, #2
 800d200:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d204:	e014      	b.n	800d230 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f9d4 	bl	800d5b4 <USBD_CtlSendStatus>
      break;
 800d20c:	e010      	b.n	800d230 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f9d0 	bl	800d5b4 <USBD_CtlSendStatus>
      break;
 800d214:	e00c      	b.n	800d230 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d216:	6839      	ldr	r1, [r7, #0]
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f000 f900 	bl	800d41e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d21e:	4b07      	ldr	r3, [pc, #28]	; (800d23c <USBD_SetConfig+0x150>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f7fe ff68 	bl	800c0fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d22a:	2303      	movs	r3, #3
 800d22c:	73fb      	strb	r3, [r7, #15]
      break;
 800d22e:	bf00      	nop
  }

  return ret;
 800d230:	7bfb      	ldrb	r3, [r7, #15]
}
 800d232:	4618      	mov	r0, r3
 800d234:	3710      	adds	r7, #16
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20000710 	.word	0x20000710

0800d240 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	88db      	ldrh	r3, [r3, #6]
 800d24e:	2b01      	cmp	r3, #1
 800d250:	d004      	beq.n	800d25c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 f8e2 	bl	800d41e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d25a:	e023      	b.n	800d2a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d262:	b2db      	uxtb	r3, r3
 800d264:	2b02      	cmp	r3, #2
 800d266:	dc02      	bgt.n	800d26e <USBD_GetConfig+0x2e>
 800d268:	2b00      	cmp	r3, #0
 800d26a:	dc03      	bgt.n	800d274 <USBD_GetConfig+0x34>
 800d26c:	e015      	b.n	800d29a <USBD_GetConfig+0x5a>
 800d26e:	2b03      	cmp	r3, #3
 800d270:	d00b      	beq.n	800d28a <USBD_GetConfig+0x4a>
 800d272:	e012      	b.n	800d29a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	3308      	adds	r3, #8
 800d27e:	2201      	movs	r2, #1
 800d280:	4619      	mov	r1, r3
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 f93c 	bl	800d500 <USBD_CtlSendData>
        break;
 800d288:	e00c      	b.n	800d2a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	3304      	adds	r3, #4
 800d28e:	2201      	movs	r2, #1
 800d290:	4619      	mov	r1, r3
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f934 	bl	800d500 <USBD_CtlSendData>
        break;
 800d298:	e004      	b.n	800d2a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d29a:	6839      	ldr	r1, [r7, #0]
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f000 f8be 	bl	800d41e <USBD_CtlError>
        break;
 800d2a2:	bf00      	nop
}
 800d2a4:	bf00      	nop
 800d2a6:	3708      	adds	r7, #8
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}

0800d2ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2ac:	b580      	push	{r7, lr}
 800d2ae:	b082      	sub	sp, #8
 800d2b0:	af00      	add	r7, sp, #0
 800d2b2:	6078      	str	r0, [r7, #4]
 800d2b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2bc:	b2db      	uxtb	r3, r3
 800d2be:	3b01      	subs	r3, #1
 800d2c0:	2b02      	cmp	r3, #2
 800d2c2:	d81e      	bhi.n	800d302 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d2c4:	683b      	ldr	r3, [r7, #0]
 800d2c6:	88db      	ldrh	r3, [r3, #6]
 800d2c8:	2b02      	cmp	r3, #2
 800d2ca:	d004      	beq.n	800d2d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d2cc:	6839      	ldr	r1, [r7, #0]
 800d2ce:	6878      	ldr	r0, [r7, #4]
 800d2d0:	f000 f8a5 	bl	800d41e <USBD_CtlError>
        break;
 800d2d4:	e01a      	b.n	800d30c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d005      	beq.n	800d2f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	f043 0202 	orr.w	r2, r3, #2
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	330c      	adds	r3, #12
 800d2f6:	2202      	movs	r2, #2
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f000 f900 	bl	800d500 <USBD_CtlSendData>
      break;
 800d300:	e004      	b.n	800d30c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d302:	6839      	ldr	r1, [r7, #0]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 f88a 	bl	800d41e <USBD_CtlError>
      break;
 800d30a:	bf00      	nop
  }
}
 800d30c:	bf00      	nop
 800d30e:	3708      	adds	r7, #8
 800d310:	46bd      	mov	sp, r7
 800d312:	bd80      	pop	{r7, pc}

0800d314 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
 800d31c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d31e:	683b      	ldr	r3, [r7, #0]
 800d320:	885b      	ldrh	r3, [r3, #2]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d107      	bne.n	800d336 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2201      	movs	r2, #1
 800d32a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d32e:	6878      	ldr	r0, [r7, #4]
 800d330:	f000 f940 	bl	800d5b4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d334:	e013      	b.n	800d35e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d336:	683b      	ldr	r3, [r7, #0]
 800d338:	885b      	ldrh	r3, [r3, #2]
 800d33a:	2b02      	cmp	r3, #2
 800d33c:	d10b      	bne.n	800d356 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d33e:	683b      	ldr	r3, [r7, #0]
 800d340:	889b      	ldrh	r3, [r3, #4]
 800d342:	0a1b      	lsrs	r3, r3, #8
 800d344:	b29b      	uxth	r3, r3
 800d346:	b2da      	uxtb	r2, r3
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 f930 	bl	800d5b4 <USBD_CtlSendStatus>
}
 800d354:	e003      	b.n	800d35e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d356:	6839      	ldr	r1, [r7, #0]
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f860 	bl	800d41e <USBD_CtlError>
}
 800d35e:	bf00      	nop
 800d360:	3708      	adds	r7, #8
 800d362:	46bd      	mov	sp, r7
 800d364:	bd80      	pop	{r7, pc}

0800d366 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d366:	b580      	push	{r7, lr}
 800d368:	b082      	sub	sp, #8
 800d36a:	af00      	add	r7, sp, #0
 800d36c:	6078      	str	r0, [r7, #4]
 800d36e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d376:	b2db      	uxtb	r3, r3
 800d378:	3b01      	subs	r3, #1
 800d37a:	2b02      	cmp	r3, #2
 800d37c:	d80b      	bhi.n	800d396 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	885b      	ldrh	r3, [r3, #2]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d10c      	bne.n	800d3a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2200      	movs	r2, #0
 800d38a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f910 	bl	800d5b4 <USBD_CtlSendStatus>
      }
      break;
 800d394:	e004      	b.n	800d3a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d396:	6839      	ldr	r1, [r7, #0]
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	f000 f840 	bl	800d41e <USBD_CtlError>
      break;
 800d39e:	e000      	b.n	800d3a2 <USBD_ClrFeature+0x3c>
      break;
 800d3a0:	bf00      	nop
  }
}
 800d3a2:	bf00      	nop
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b084      	sub	sp, #16
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	6078      	str	r0, [r7, #4]
 800d3b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	781a      	ldrb	r2, [r3, #0]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	3301      	adds	r3, #1
 800d3c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	781a      	ldrb	r2, [r3, #0]
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff fa17 	bl	800c808 <SWAPBYTE>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	461a      	mov	r2, r3
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	3301      	adds	r3, #1
 800d3e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d3e8:	68fb      	ldr	r3, [r7, #12]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d3ee:	68f8      	ldr	r0, [r7, #12]
 800d3f0:	f7ff fa0a 	bl	800c808 <SWAPBYTE>
 800d3f4:	4603      	mov	r3, r0
 800d3f6:	461a      	mov	r2, r3
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	3301      	adds	r3, #1
 800d400:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	3301      	adds	r3, #1
 800d406:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f7ff f9fd 	bl	800c808 <SWAPBYTE>
 800d40e:	4603      	mov	r3, r0
 800d410:	461a      	mov	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	80da      	strh	r2, [r3, #6]
}
 800d416:	bf00      	nop
 800d418:	3710      	adds	r7, #16
 800d41a:	46bd      	mov	sp, r7
 800d41c:	bd80      	pop	{r7, pc}

0800d41e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d41e:	b580      	push	{r7, lr}
 800d420:	b082      	sub	sp, #8
 800d422:	af00      	add	r7, sp, #0
 800d424:	6078      	str	r0, [r7, #4]
 800d426:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d428:	2180      	movs	r1, #128	; 0x80
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 fd0c 	bl	800de48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d430:	2100      	movs	r1, #0
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fd08 	bl	800de48 <USBD_LL_StallEP>
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b086      	sub	sp, #24
 800d444:	af00      	add	r7, sp, #0
 800d446:	60f8      	str	r0, [r7, #12]
 800d448:	60b9      	str	r1, [r7, #8]
 800d44a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d44c:	2300      	movs	r3, #0
 800d44e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d036      	beq.n	800d4c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d45a:	6938      	ldr	r0, [r7, #16]
 800d45c:	f000 f836 	bl	800d4cc <USBD_GetLen>
 800d460:	4603      	mov	r3, r0
 800d462:	3301      	adds	r3, #1
 800d464:	b29b      	uxth	r3, r3
 800d466:	005b      	lsls	r3, r3, #1
 800d468:	b29a      	uxth	r2, r3
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	68ba      	ldr	r2, [r7, #8]
 800d472:	4413      	add	r3, r2
 800d474:	687a      	ldr	r2, [r7, #4]
 800d476:	7812      	ldrb	r2, [r2, #0]
 800d478:	701a      	strb	r2, [r3, #0]
  idx++;
 800d47a:	7dfb      	ldrb	r3, [r7, #23]
 800d47c:	3301      	adds	r3, #1
 800d47e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	68ba      	ldr	r2, [r7, #8]
 800d484:	4413      	add	r3, r2
 800d486:	2203      	movs	r2, #3
 800d488:	701a      	strb	r2, [r3, #0]
  idx++;
 800d48a:	7dfb      	ldrb	r3, [r7, #23]
 800d48c:	3301      	adds	r3, #1
 800d48e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d490:	e013      	b.n	800d4ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d492:	7dfb      	ldrb	r3, [r7, #23]
 800d494:	68ba      	ldr	r2, [r7, #8]
 800d496:	4413      	add	r3, r2
 800d498:	693a      	ldr	r2, [r7, #16]
 800d49a:	7812      	ldrb	r2, [r2, #0]
 800d49c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d49e:	693b      	ldr	r3, [r7, #16]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	613b      	str	r3, [r7, #16]
    idx++;
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	3301      	adds	r3, #1
 800d4a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d4aa:	7dfb      	ldrb	r3, [r7, #23]
 800d4ac:	68ba      	ldr	r2, [r7, #8]
 800d4ae:	4413      	add	r3, r2
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d4ba:	693b      	ldr	r3, [r7, #16]
 800d4bc:	781b      	ldrb	r3, [r3, #0]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d1e7      	bne.n	800d492 <USBD_GetString+0x52>
 800d4c2:	e000      	b.n	800d4c6 <USBD_GetString+0x86>
    return;
 800d4c4:	bf00      	nop
  }
}
 800d4c6:	3718      	adds	r7, #24
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b085      	sub	sp, #20
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d4dc:	e005      	b.n	800d4ea <USBD_GetLen+0x1e>
  {
    len++;
 800d4de:	7bfb      	ldrb	r3, [r7, #15]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d4ea:	68bb      	ldr	r3, [r7, #8]
 800d4ec:	781b      	ldrb	r3, [r3, #0]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d1f5      	bne.n	800d4de <USBD_GetLen+0x12>
  }

  return len;
 800d4f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	3714      	adds	r7, #20
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr

0800d500 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	60b9      	str	r1, [r7, #8]
 800d50a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2202      	movs	r2, #2
 800d510:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	687a      	ldr	r2, [r7, #4]
 800d518:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	687a      	ldr	r2, [r7, #4]
 800d51e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	68ba      	ldr	r2, [r7, #8]
 800d524:	2100      	movs	r1, #0
 800d526:	68f8      	ldr	r0, [r7, #12]
 800d528:	f000 fd17 	bl	800df5a <USBD_LL_Transmit>

  return USBD_OK;
 800d52c:	2300      	movs	r3, #0
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}

0800d536 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d536:	b580      	push	{r7, lr}
 800d538:	b084      	sub	sp, #16
 800d53a:	af00      	add	r7, sp, #0
 800d53c:	60f8      	str	r0, [r7, #12]
 800d53e:	60b9      	str	r1, [r7, #8]
 800d540:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	68ba      	ldr	r2, [r7, #8]
 800d546:	2100      	movs	r1, #0
 800d548:	68f8      	ldr	r0, [r7, #12]
 800d54a:	f000 fd06 	bl	800df5a <USBD_LL_Transmit>

  return USBD_OK;
 800d54e:	2300      	movs	r3, #0
}
 800d550:	4618      	mov	r0, r3
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b084      	sub	sp, #16
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	60b9      	str	r1, [r7, #8]
 800d562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	2203      	movs	r2, #3
 800d568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	687a      	ldr	r2, [r7, #4]
 800d570:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	68ba      	ldr	r2, [r7, #8]
 800d580:	2100      	movs	r1, #0
 800d582:	68f8      	ldr	r0, [r7, #12]
 800d584:	f000 fd0a 	bl	800df9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d588:	2300      	movs	r3, #0
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	3710      	adds	r7, #16
 800d58e:	46bd      	mov	sp, r7
 800d590:	bd80      	pop	{r7, pc}

0800d592 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d592:	b580      	push	{r7, lr}
 800d594:	b084      	sub	sp, #16
 800d596:	af00      	add	r7, sp, #0
 800d598:	60f8      	str	r0, [r7, #12]
 800d59a:	60b9      	str	r1, [r7, #8]
 800d59c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	68ba      	ldr	r2, [r7, #8]
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f000 fcf9 	bl	800df9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5aa:	2300      	movs	r3, #0
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3710      	adds	r7, #16
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}

0800d5b4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
 800d5ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	2204      	movs	r2, #4
 800d5c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	2100      	movs	r1, #0
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 fcc5 	bl	800df5a <USBD_LL_Transmit>

  return USBD_OK;
 800d5d0:	2300      	movs	r3, #0
}
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	3708      	adds	r7, #8
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	bd80      	pop	{r7, pc}

0800d5da <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d5da:	b580      	push	{r7, lr}
 800d5dc:	b082      	sub	sp, #8
 800d5de:	af00      	add	r7, sp, #0
 800d5e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2205      	movs	r2, #5
 800d5e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	2200      	movs	r2, #0
 800d5ee:	2100      	movs	r1, #0
 800d5f0:	6878      	ldr	r0, [r7, #4]
 800d5f2:	f000 fcd3 	bl	800df9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3708      	adds	r7, #8
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d600:	b580      	push	{r7, lr}
 800d602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800d604:	2201      	movs	r2, #1
 800d606:	4912      	ldr	r1, [pc, #72]	; (800d650 <MX_USB_DEVICE_Init+0x50>)
 800d608:	4812      	ldr	r0, [pc, #72]	; (800d654 <MX_USB_DEVICE_Init+0x54>)
 800d60a:	f7fe fcdd 	bl	800bfc8 <USBD_Init>
 800d60e:	4603      	mov	r3, r0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d001      	beq.n	800d618 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d614:	f7f5 f8c2 	bl	800279c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800d618:	490f      	ldr	r1, [pc, #60]	; (800d658 <MX_USB_DEVICE_Init+0x58>)
 800d61a:	480e      	ldr	r0, [pc, #56]	; (800d654 <MX_USB_DEVICE_Init+0x54>)
 800d61c:	f7fe fd04 	bl	800c028 <USBD_RegisterClass>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d001      	beq.n	800d62a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d626:	f7f5 f8b9 	bl	800279c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800d62a:	490c      	ldr	r1, [pc, #48]	; (800d65c <MX_USB_DEVICE_Init+0x5c>)
 800d62c:	4809      	ldr	r0, [pc, #36]	; (800d654 <MX_USB_DEVICE_Init+0x54>)
 800d62e:	f7fe fbfb 	bl	800be28 <USBD_CDC_RegisterInterface>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d001      	beq.n	800d63c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d638:	f7f5 f8b0 	bl	800279c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800d63c:	4805      	ldr	r0, [pc, #20]	; (800d654 <MX_USB_DEVICE_Init+0x54>)
 800d63e:	f7fe fd29 	bl	800c094 <USBD_Start>
 800d642:	4603      	mov	r3, r0
 800d644:	2b00      	cmp	r3, #0
 800d646:	d001      	beq.n	800d64c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d648:	f7f5 f8a8 	bl	800279c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d64c:	bf00      	nop
 800d64e:	bd80      	pop	{r7, pc}
 800d650:	20000138 	.word	0x20000138
 800d654:	20000714 	.word	0x20000714
 800d658:	200000a4 	.word	0x200000a4
 800d65c:	20000124 	.word	0x20000124

0800d660 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800d664:	2200      	movs	r2, #0
 800d666:	4905      	ldr	r1, [pc, #20]	; (800d67c <CDC_Init_HS+0x1c>)
 800d668:	4805      	ldr	r0, [pc, #20]	; (800d680 <CDC_Init_HS+0x20>)
 800d66a:	f7fe fbf7 	bl	800be5c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800d66e:	4905      	ldr	r1, [pc, #20]	; (800d684 <CDC_Init_HS+0x24>)
 800d670:	4803      	ldr	r0, [pc, #12]	; (800d680 <CDC_Init_HS+0x20>)
 800d672:	f7fe fc15 	bl	800bea0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d676:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800d678:	4618      	mov	r0, r3
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	200011f0 	.word	0x200011f0
 800d680:	20000714 	.word	0x20000714
 800d684:	200009f0 	.word	0x200009f0

0800d688 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800d688:	b480      	push	{r7}
 800d68a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800d68c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800d68e:	4618      	mov	r0, r3
 800d690:	46bd      	mov	sp, r7
 800d692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d696:	4770      	bx	lr

0800d698 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	6039      	str	r1, [r7, #0]
 800d6a2:	71fb      	strb	r3, [r7, #7]
 800d6a4:	4613      	mov	r3, r2
 800d6a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800d6a8:	79fb      	ldrb	r3, [r7, #7]
 800d6aa:	2b23      	cmp	r3, #35	; 0x23
 800d6ac:	d84a      	bhi.n	800d744 <CDC_Control_HS+0xac>
 800d6ae:	a201      	add	r2, pc, #4	; (adr r2, 800d6b4 <CDC_Control_HS+0x1c>)
 800d6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6b4:	0800d745 	.word	0x0800d745
 800d6b8:	0800d745 	.word	0x0800d745
 800d6bc:	0800d745 	.word	0x0800d745
 800d6c0:	0800d745 	.word	0x0800d745
 800d6c4:	0800d745 	.word	0x0800d745
 800d6c8:	0800d745 	.word	0x0800d745
 800d6cc:	0800d745 	.word	0x0800d745
 800d6d0:	0800d745 	.word	0x0800d745
 800d6d4:	0800d745 	.word	0x0800d745
 800d6d8:	0800d745 	.word	0x0800d745
 800d6dc:	0800d745 	.word	0x0800d745
 800d6e0:	0800d745 	.word	0x0800d745
 800d6e4:	0800d745 	.word	0x0800d745
 800d6e8:	0800d745 	.word	0x0800d745
 800d6ec:	0800d745 	.word	0x0800d745
 800d6f0:	0800d745 	.word	0x0800d745
 800d6f4:	0800d745 	.word	0x0800d745
 800d6f8:	0800d745 	.word	0x0800d745
 800d6fc:	0800d745 	.word	0x0800d745
 800d700:	0800d745 	.word	0x0800d745
 800d704:	0800d745 	.word	0x0800d745
 800d708:	0800d745 	.word	0x0800d745
 800d70c:	0800d745 	.word	0x0800d745
 800d710:	0800d745 	.word	0x0800d745
 800d714:	0800d745 	.word	0x0800d745
 800d718:	0800d745 	.word	0x0800d745
 800d71c:	0800d745 	.word	0x0800d745
 800d720:	0800d745 	.word	0x0800d745
 800d724:	0800d745 	.word	0x0800d745
 800d728:	0800d745 	.word	0x0800d745
 800d72c:	0800d745 	.word	0x0800d745
 800d730:	0800d745 	.word	0x0800d745
 800d734:	0800d745 	.word	0x0800d745
 800d738:	0800d745 	.word	0x0800d745
 800d73c:	0800d745 	.word	0x0800d745
 800d740:	0800d745 	.word	0x0800d745
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800d744:	bf00      	nop
  }

  return (USBD_OK);
 800d746:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800d748:	4618      	mov	r0, r3
 800d74a:	370c      	adds	r7, #12
 800d74c:	46bd      	mov	sp, r7
 800d74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d752:	4770      	bx	lr

0800d754 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b082      	sub	sp, #8
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800d75e:	6879      	ldr	r1, [r7, #4]
 800d760:	4805      	ldr	r0, [pc, #20]	; (800d778 <CDC_Receive_HS+0x24>)
 800d762:	f7fe fb9d 	bl	800bea0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800d766:	4804      	ldr	r0, [pc, #16]	; (800d778 <CDC_Receive_HS+0x24>)
 800d768:	f7fe fbf8 	bl	800bf5c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800d76c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}
 800d776:	bf00      	nop
 800d778:	20000714 	.word	0x20000714

0800d77c <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 800d77c:	b580      	push	{r7, lr}
 800d77e:	b084      	sub	sp, #16
 800d780:	af00      	add	r7, sp, #0
 800d782:	6078      	str	r0, [r7, #4]
 800d784:	460b      	mov	r3, r1
 800d786:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800d788:	2300      	movs	r3, #0
 800d78a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 800d78c:	4b0d      	ldr	r3, [pc, #52]	; (800d7c4 <CDC_Transmit_HS+0x48>)
 800d78e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d792:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d001      	beq.n	800d7a2 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 800d79e:	2301      	movs	r3, #1
 800d7a0:	e00b      	b.n	800d7ba <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 800d7a2:	887b      	ldrh	r3, [r7, #2]
 800d7a4:	461a      	mov	r2, r3
 800d7a6:	6879      	ldr	r1, [r7, #4]
 800d7a8:	4806      	ldr	r0, [pc, #24]	; (800d7c4 <CDC_Transmit_HS+0x48>)
 800d7aa:	f7fe fb57 	bl	800be5c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 800d7ae:	4805      	ldr	r0, [pc, #20]	; (800d7c4 <CDC_Transmit_HS+0x48>)
 800d7b0:	f7fe fb94 	bl	800bedc <USBD_CDC_TransmitPacket>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	3710      	adds	r7, #16
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20000714 	.word	0x20000714

0800d7c8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b087      	sub	sp, #28
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	60f8      	str	r0, [r7, #12]
 800d7d0:	60b9      	str	r1, [r7, #8]
 800d7d2:	4613      	mov	r3, r2
 800d7d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800d7da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d7de:	4618      	mov	r0, r3
 800d7e0:	371c      	adds	r7, #28
 800d7e2:	46bd      	mov	sp, r7
 800d7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e8:	4770      	bx	lr
	...

0800d7ec <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d7ec:	b480      	push	{r7}
 800d7ee:	b083      	sub	sp, #12
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	4603      	mov	r3, r0
 800d7f4:	6039      	str	r1, [r7, #0]
 800d7f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2212      	movs	r2, #18
 800d7fc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800d7fe:	4b03      	ldr	r3, [pc, #12]	; (800d80c <USBD_HS_DeviceDescriptor+0x20>)
}
 800d800:	4618      	mov	r0, r3
 800d802:	370c      	adds	r7, #12
 800d804:	46bd      	mov	sp, r7
 800d806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80a:	4770      	bx	lr
 800d80c:	20000158 	.word	0x20000158

0800d810 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d810:	b480      	push	{r7}
 800d812:	b083      	sub	sp, #12
 800d814:	af00      	add	r7, sp, #0
 800d816:	4603      	mov	r3, r0
 800d818:	6039      	str	r1, [r7, #0]
 800d81a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	2204      	movs	r2, #4
 800d820:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800d822:	4b03      	ldr	r3, [pc, #12]	; (800d830 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800d824:	4618      	mov	r0, r3
 800d826:	370c      	adds	r7, #12
 800d828:	46bd      	mov	sp, r7
 800d82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d82e:	4770      	bx	lr
 800d830:	20000178 	.word	0x20000178

0800d834 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b082      	sub	sp, #8
 800d838:	af00      	add	r7, sp, #0
 800d83a:	4603      	mov	r3, r0
 800d83c:	6039      	str	r1, [r7, #0]
 800d83e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d840:	79fb      	ldrb	r3, [r7, #7]
 800d842:	2b00      	cmp	r3, #0
 800d844:	d105      	bne.n	800d852 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	4907      	ldr	r1, [pc, #28]	; (800d868 <USBD_HS_ProductStrDescriptor+0x34>)
 800d84a:	4808      	ldr	r0, [pc, #32]	; (800d86c <USBD_HS_ProductStrDescriptor+0x38>)
 800d84c:	f7ff fdf8 	bl	800d440 <USBD_GetString>
 800d850:	e004      	b.n	800d85c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800d852:	683a      	ldr	r2, [r7, #0]
 800d854:	4904      	ldr	r1, [pc, #16]	; (800d868 <USBD_HS_ProductStrDescriptor+0x34>)
 800d856:	4805      	ldr	r0, [pc, #20]	; (800d86c <USBD_HS_ProductStrDescriptor+0x38>)
 800d858:	f7ff fdf2 	bl	800d440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d85c:	4b02      	ldr	r3, [pc, #8]	; (800d868 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3708      	adds	r7, #8
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
 800d866:	bf00      	nop
 800d868:	200019f0 	.word	0x200019f0
 800d86c:	0800ec1c 	.word	0x0800ec1c

0800d870 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d870:	b580      	push	{r7, lr}
 800d872:	b082      	sub	sp, #8
 800d874:	af00      	add	r7, sp, #0
 800d876:	4603      	mov	r3, r0
 800d878:	6039      	str	r1, [r7, #0]
 800d87a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800d87c:	683a      	ldr	r2, [r7, #0]
 800d87e:	4904      	ldr	r1, [pc, #16]	; (800d890 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800d880:	4804      	ldr	r0, [pc, #16]	; (800d894 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800d882:	f7ff fddd 	bl	800d440 <USBD_GetString>
  return USBD_StrDesc;
 800d886:	4b02      	ldr	r3, [pc, #8]	; (800d890 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3708      	adds	r7, #8
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	200019f0 	.word	0x200019f0
 800d894:	0800ec34 	.word	0x0800ec34

0800d898 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b082      	sub	sp, #8
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	4603      	mov	r3, r0
 800d8a0:	6039      	str	r1, [r7, #0]
 800d8a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	221a      	movs	r2, #26
 800d8a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800d8aa:	f000 f855 	bl	800d958 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800d8ae:	4b02      	ldr	r3, [pc, #8]	; (800d8b8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	3708      	adds	r7, #8
 800d8b4:	46bd      	mov	sp, r7
 800d8b6:	bd80      	pop	{r7, pc}
 800d8b8:	2000017c 	.word	0x2000017c

0800d8bc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	4603      	mov	r3, r0
 800d8c4:	6039      	str	r1, [r7, #0]
 800d8c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800d8c8:	79fb      	ldrb	r3, [r7, #7]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d105      	bne.n	800d8da <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d8ce:	683a      	ldr	r2, [r7, #0]
 800d8d0:	4907      	ldr	r1, [pc, #28]	; (800d8f0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d8d2:	4808      	ldr	r0, [pc, #32]	; (800d8f4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d8d4:	f7ff fdb4 	bl	800d440 <USBD_GetString>
 800d8d8:	e004      	b.n	800d8e4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	4904      	ldr	r1, [pc, #16]	; (800d8f0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800d8de:	4805      	ldr	r0, [pc, #20]	; (800d8f4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800d8e0:	f7ff fdae 	bl	800d440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d8e4:	4b02      	ldr	r3, [pc, #8]	; (800d8f0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3708      	adds	r7, #8
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	200019f0 	.word	0x200019f0
 800d8f4:	0800ec48 	.word	0x0800ec48

0800d8f8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b082      	sub	sp, #8
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	4603      	mov	r3, r0
 800d900:	6039      	str	r1, [r7, #0]
 800d902:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800d904:	79fb      	ldrb	r3, [r7, #7]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d105      	bne.n	800d916 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	4907      	ldr	r1, [pc, #28]	; (800d92c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d90e:	4808      	ldr	r0, [pc, #32]	; (800d930 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d910:	f7ff fd96 	bl	800d440 <USBD_GetString>
 800d914:	e004      	b.n	800d920 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800d916:	683a      	ldr	r2, [r7, #0]
 800d918:	4904      	ldr	r1, [pc, #16]	; (800d92c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800d91a:	4805      	ldr	r0, [pc, #20]	; (800d930 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800d91c:	f7ff fd90 	bl	800d440 <USBD_GetString>
  }
  return USBD_StrDesc;
 800d920:	4b02      	ldr	r3, [pc, #8]	; (800d92c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800d922:	4618      	mov	r0, r3
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	200019f0 	.word	0x200019f0
 800d930:	0800ec54 	.word	0x0800ec54

0800d934 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	4603      	mov	r3, r0
 800d93c:	6039      	str	r1, [r7, #0]
 800d93e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800d940:	683b      	ldr	r3, [r7, #0]
 800d942:	220c      	movs	r2, #12
 800d944:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800d946:	4b03      	ldr	r3, [pc, #12]	; (800d954 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800d948:	4618      	mov	r0, r3
 800d94a:	370c      	adds	r7, #12
 800d94c:	46bd      	mov	sp, r7
 800d94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d952:	4770      	bx	lr
 800d954:	2000016c 	.word	0x2000016c

0800d958 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800d958:	b580      	push	{r7, lr}
 800d95a:	b084      	sub	sp, #16
 800d95c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800d95e:	4b0f      	ldr	r3, [pc, #60]	; (800d99c <Get_SerialNum+0x44>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800d964:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <Get_SerialNum+0x48>)
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800d96a:	4b0e      	ldr	r3, [pc, #56]	; (800d9a4 <Get_SerialNum+0x4c>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800d970:	68fa      	ldr	r2, [r7, #12]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	4413      	add	r3, r2
 800d976:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d009      	beq.n	800d992 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800d97e:	2208      	movs	r2, #8
 800d980:	4909      	ldr	r1, [pc, #36]	; (800d9a8 <Get_SerialNum+0x50>)
 800d982:	68f8      	ldr	r0, [r7, #12]
 800d984:	f000 f814 	bl	800d9b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800d988:	2204      	movs	r2, #4
 800d98a:	4908      	ldr	r1, [pc, #32]	; (800d9ac <Get_SerialNum+0x54>)
 800d98c:	68b8      	ldr	r0, [r7, #8]
 800d98e:	f000 f80f 	bl	800d9b0 <IntToUnicode>
  }
}
 800d992:	bf00      	nop
 800d994:	3710      	adds	r7, #16
 800d996:	46bd      	mov	sp, r7
 800d998:	bd80      	pop	{r7, pc}
 800d99a:	bf00      	nop
 800d99c:	1ff0f420 	.word	0x1ff0f420
 800d9a0:	1ff0f424 	.word	0x1ff0f424
 800d9a4:	1ff0f428 	.word	0x1ff0f428
 800d9a8:	2000017e 	.word	0x2000017e
 800d9ac:	2000018e 	.word	0x2000018e

0800d9b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800d9b0:	b480      	push	{r7}
 800d9b2:	b087      	sub	sp, #28
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	4613      	mov	r3, r2
 800d9bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	75fb      	strb	r3, [r7, #23]
 800d9c6:	e027      	b.n	800da18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	0f1b      	lsrs	r3, r3, #28
 800d9cc:	2b09      	cmp	r3, #9
 800d9ce:	d80b      	bhi.n	800d9e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	0f1b      	lsrs	r3, r3, #28
 800d9d4:	b2da      	uxtb	r2, r3
 800d9d6:	7dfb      	ldrb	r3, [r7, #23]
 800d9d8:	005b      	lsls	r3, r3, #1
 800d9da:	4619      	mov	r1, r3
 800d9dc:	68bb      	ldr	r3, [r7, #8]
 800d9de:	440b      	add	r3, r1
 800d9e0:	3230      	adds	r2, #48	; 0x30
 800d9e2:	b2d2      	uxtb	r2, r2
 800d9e4:	701a      	strb	r2, [r3, #0]
 800d9e6:	e00a      	b.n	800d9fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	0f1b      	lsrs	r3, r3, #28
 800d9ec:	b2da      	uxtb	r2, r3
 800d9ee:	7dfb      	ldrb	r3, [r7, #23]
 800d9f0:	005b      	lsls	r3, r3, #1
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	440b      	add	r3, r1
 800d9f8:	3237      	adds	r2, #55	; 0x37
 800d9fa:	b2d2      	uxtb	r2, r2
 800d9fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	011b      	lsls	r3, r3, #4
 800da02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800da04:	7dfb      	ldrb	r3, [r7, #23]
 800da06:	005b      	lsls	r3, r3, #1
 800da08:	3301      	adds	r3, #1
 800da0a:	68ba      	ldr	r2, [r7, #8]
 800da0c:	4413      	add	r3, r2
 800da0e:	2200      	movs	r2, #0
 800da10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800da12:	7dfb      	ldrb	r3, [r7, #23]
 800da14:	3301      	adds	r3, #1
 800da16:	75fb      	strb	r3, [r7, #23]
 800da18:	7dfa      	ldrb	r2, [r7, #23]
 800da1a:	79fb      	ldrb	r3, [r7, #7]
 800da1c:	429a      	cmp	r2, r3
 800da1e:	d3d3      	bcc.n	800d9c8 <IntToUnicode+0x18>
  }
}
 800da20:	bf00      	nop
 800da22:	bf00      	nop
 800da24:	371c      	adds	r7, #28
 800da26:	46bd      	mov	sp, r7
 800da28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2c:	4770      	bx	lr
	...

0800da30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800da30:	b580      	push	{r7, lr}
 800da32:	b0aa      	sub	sp, #168	; 0xa8
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800da38:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800da3c:	2200      	movs	r2, #0
 800da3e:	601a      	str	r2, [r3, #0]
 800da40:	605a      	str	r2, [r3, #4]
 800da42:	609a      	str	r2, [r3, #8]
 800da44:	60da      	str	r2, [r3, #12]
 800da46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800da48:	f107 0310 	add.w	r3, r7, #16
 800da4c:	2284      	movs	r2, #132	; 0x84
 800da4e:	2100      	movs	r1, #0
 800da50:	4618      	mov	r0, r3
 800da52:	f000 fc33 	bl	800e2bc <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a26      	ldr	r2, [pc, #152]	; (800daf4 <HAL_PCD_MspInit+0xc4>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d145      	bne.n	800daec <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800da60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800da64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800da66:	2300      	movs	r3, #0
 800da68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800da6c:	f107 0310 	add.w	r3, r7, #16
 800da70:	4618      	mov	r0, r3
 800da72:	f7fa fc9f 	bl	80083b4 <HAL_RCCEx_PeriphCLKConfig>
 800da76:	4603      	mov	r3, r0
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d001      	beq.n	800da80 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800da7c:	f7f4 fe8e 	bl	800279c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800da80:	4b1d      	ldr	r3, [pc, #116]	; (800daf8 <HAL_PCD_MspInit+0xc8>)
 800da82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da84:	4a1c      	ldr	r2, [pc, #112]	; (800daf8 <HAL_PCD_MspInit+0xc8>)
 800da86:	f043 0302 	orr.w	r3, r3, #2
 800da8a:	6313      	str	r3, [r2, #48]	; 0x30
 800da8c:	4b1a      	ldr	r3, [pc, #104]	; (800daf8 <HAL_PCD_MspInit+0xc8>)
 800da8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da90:	f003 0302 	and.w	r3, r3, #2
 800da94:	60fb      	str	r3, [r7, #12]
 800da96:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800da98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800da9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800daa0:	2302      	movs	r3, #2
 800daa2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800daa6:	2300      	movs	r3, #0
 800daa8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800daac:	2303      	movs	r3, #3
 800daae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800dab2:	230c      	movs	r3, #12
 800dab4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800dab8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800dabc:	4619      	mov	r1, r3
 800dabe:	480f      	ldr	r0, [pc, #60]	; (800dafc <HAL_PCD_MspInit+0xcc>)
 800dac0:	f7f8 faca 	bl	8006058 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <HAL_PCD_MspInit+0xc8>)
 800dac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dac8:	4a0b      	ldr	r2, [pc, #44]	; (800daf8 <HAL_PCD_MspInit+0xc8>)
 800daca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dace:	6313      	str	r3, [r2, #48]	; 0x30
 800dad0:	4b09      	ldr	r3, [pc, #36]	; (800daf8 <HAL_PCD_MspInit+0xc8>)
 800dad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dad8:	60bb      	str	r3, [r7, #8]
 800dada:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800dadc:	2200      	movs	r2, #0
 800dade:	2100      	movs	r1, #0
 800dae0:	204d      	movs	r0, #77	; 0x4d
 800dae2:	f7f7 ff0a 	bl	80058fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800dae6:	204d      	movs	r0, #77	; 0x4d
 800dae8:	f7f7 ff23 	bl	8005932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800daec:	bf00      	nop
 800daee:	37a8      	adds	r7, #168	; 0xa8
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}
 800daf4:	40040000 	.word	0x40040000
 800daf8:	40023800 	.word	0x40023800
 800dafc:	40020400 	.word	0x40020400

0800db00 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b082      	sub	sp, #8
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800db14:	4619      	mov	r1, r3
 800db16:	4610      	mov	r0, r2
 800db18:	f7fe fb09 	bl	800c12e <USBD_LL_SetupStage>
}
 800db1c:	bf00      	nop
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}

0800db24 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b082      	sub	sp, #8
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
 800db2c:	460b      	mov	r3, r1
 800db2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800db36:	78fa      	ldrb	r2, [r7, #3]
 800db38:	6879      	ldr	r1, [r7, #4]
 800db3a:	4613      	mov	r3, r2
 800db3c:	00db      	lsls	r3, r3, #3
 800db3e:	4413      	add	r3, r2
 800db40:	009b      	lsls	r3, r3, #2
 800db42:	440b      	add	r3, r1
 800db44:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800db48:	681a      	ldr	r2, [r3, #0]
 800db4a:	78fb      	ldrb	r3, [r7, #3]
 800db4c:	4619      	mov	r1, r3
 800db4e:	f7fe fb43 	bl	800c1d8 <USBD_LL_DataOutStage>
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
 800db62:	460b      	mov	r3, r1
 800db64:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800db6c:	78fa      	ldrb	r2, [r7, #3]
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	4613      	mov	r3, r2
 800db72:	00db      	lsls	r3, r3, #3
 800db74:	4413      	add	r3, r2
 800db76:	009b      	lsls	r3, r3, #2
 800db78:	440b      	add	r3, r1
 800db7a:	334c      	adds	r3, #76	; 0x4c
 800db7c:	681a      	ldr	r2, [r3, #0]
 800db7e:	78fb      	ldrb	r3, [r7, #3]
 800db80:	4619      	mov	r1, r3
 800db82:	f7fe fbdc 	bl	800c33e <USBD_LL_DataInStage>
}
 800db86:	bf00      	nop
 800db88:	3708      	adds	r7, #8
 800db8a:	46bd      	mov	sp, r7
 800db8c:	bd80      	pop	{r7, pc}

0800db8e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800db8e:	b580      	push	{r7, lr}
 800db90:	b082      	sub	sp, #8
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800db9c:	4618      	mov	r0, r3
 800db9e:	f7fe fd10 	bl	800c5c2 <USBD_LL_SOF>
}
 800dba2:	bf00      	nop
 800dba4:	3708      	adds	r7, #8
 800dba6:	46bd      	mov	sp, r7
 800dba8:	bd80      	pop	{r7, pc}

0800dbaa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbaa:	b580      	push	{r7, lr}
 800dbac:	b084      	sub	sp, #16
 800dbae:	af00      	add	r7, sp, #0
 800dbb0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dbb2:	2301      	movs	r3, #1
 800dbb4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d102      	bne.n	800dbc4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800dbbe:	2300      	movs	r3, #0
 800dbc0:	73fb      	strb	r3, [r7, #15]
 800dbc2:	e008      	b.n	800dbd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	68db      	ldr	r3, [r3, #12]
 800dbc8:	2b02      	cmp	r3, #2
 800dbca:	d102      	bne.n	800dbd2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800dbcc:	2301      	movs	r3, #1
 800dbce:	73fb      	strb	r3, [r7, #15]
 800dbd0:	e001      	b.n	800dbd6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800dbd2:	f7f4 fde3 	bl	800279c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dbdc:	7bfa      	ldrb	r2, [r7, #15]
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f7fe fcb0 	bl	800c546 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dbec:	4618      	mov	r0, r3
 800dbee:	f7fe fc58 	bl	800c4a2 <USBD_LL_Reset>
}
 800dbf2:	bf00      	nop
 800dbf4:	3710      	adds	r7, #16
 800dbf6:	46bd      	mov	sp, r7
 800dbf8:	bd80      	pop	{r7, pc}
	...

0800dbfc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dbfc:	b580      	push	{r7, lr}
 800dbfe:	b082      	sub	sp, #8
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fcab 	bl	800c566 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	687a      	ldr	r2, [r7, #4]
 800dc1c:	6812      	ldr	r2, [r2, #0]
 800dc1e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dc22:	f043 0301 	orr.w	r3, r3, #1
 800dc26:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	6a1b      	ldr	r3, [r3, #32]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d005      	beq.n	800dc3c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800dc30:	4b04      	ldr	r3, [pc, #16]	; (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4a03      	ldr	r2, [pc, #12]	; (800dc44 <HAL_PCD_SuspendCallback+0x48>)
 800dc36:	f043 0306 	orr.w	r3, r3, #6
 800dc3a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800dc3c:	bf00      	nop
 800dc3e:	3708      	adds	r7, #8
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}
 800dc44:	e000ed00 	.word	0xe000ed00

0800dc48 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b082      	sub	sp, #8
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fc9b 	bl	800c592 <USBD_LL_Resume>
}
 800dc5c:	bf00      	nop
 800dc5e:	3708      	adds	r7, #8
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}

0800dc64 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc76:	78fa      	ldrb	r2, [r7, #3]
 800dc78:	4611      	mov	r1, r2
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	f7fe fcf3 	bl	800c666 <USBD_LL_IsoOUTIncomplete>
}
 800dc80:	bf00      	nop
 800dc82:	3708      	adds	r7, #8
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b082      	sub	sp, #8
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dc9a:	78fa      	ldrb	r2, [r7, #3]
 800dc9c:	4611      	mov	r1, r2
 800dc9e:	4618      	mov	r0, r3
 800dca0:	f7fe fcaf 	bl	800c602 <USBD_LL_IsoINIncomplete>
}
 800dca4:	bf00      	nop
 800dca6:	3708      	adds	r7, #8
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}

0800dcac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcac:	b580      	push	{r7, lr}
 800dcae:	b082      	sub	sp, #8
 800dcb0:	af00      	add	r7, sp, #0
 800dcb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f7fe fd05 	bl	800c6ca <USBD_LL_DevConnected>
}
 800dcc0:	bf00      	nop
 800dcc2:	3708      	adds	r7, #8
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	bd80      	pop	{r7, pc}

0800dcc8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b082      	sub	sp, #8
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800dcd6:	4618      	mov	r0, r3
 800dcd8:	f7fe fd02 	bl	800c6e0 <USBD_LL_DevDisconnected>
}
 800dcdc:	bf00      	nop
 800dcde:	3708      	adds	r7, #8
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	781b      	ldrb	r3, [r3, #0]
 800dcf0:	2b01      	cmp	r3, #1
 800dcf2:	d140      	bne.n	800dd76 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800dcf4:	4a22      	ldr	r2, [pc, #136]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a20      	ldr	r2, [pc, #128]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd00:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800dd04:	4b1e      	ldr	r3, [pc, #120]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd06:	4a1f      	ldr	r2, [pc, #124]	; (800dd84 <USBD_LL_Init+0xa0>)
 800dd08:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800dd0a:	4b1d      	ldr	r3, [pc, #116]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd0c:	2208      	movs	r2, #8
 800dd0e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800dd10:	4b1b      	ldr	r3, [pc, #108]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd12:	2202      	movs	r2, #2
 800dd14:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800dd16:	4b1a      	ldr	r3, [pc, #104]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd18:	2200      	movs	r2, #0
 800dd1a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800dd1c:	4b18      	ldr	r3, [pc, #96]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd1e:	2202      	movs	r2, #2
 800dd20:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800dd22:	4b17      	ldr	r3, [pc, #92]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd24:	2200      	movs	r2, #0
 800dd26:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800dd28:	4b15      	ldr	r3, [pc, #84]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800dd2e:	4b14      	ldr	r3, [pc, #80]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800dd34:	4b12      	ldr	r3, [pc, #72]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd36:	2200      	movs	r2, #0
 800dd38:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800dd3a:	4b11      	ldr	r3, [pc, #68]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800dd40:	4b0f      	ldr	r3, [pc, #60]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd42:	2200      	movs	r2, #0
 800dd44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800dd46:	480e      	ldr	r0, [pc, #56]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd48:	f7f8 fb63 	bl	8006412 <HAL_PCD_Init>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d001      	beq.n	800dd56 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800dd52:	f7f4 fd23 	bl	800279c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800dd56:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd5a:	4809      	ldr	r0, [pc, #36]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd5c:	f7f9 fddd 	bl	800791a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800dd60:	2280      	movs	r2, #128	; 0x80
 800dd62:	2100      	movs	r1, #0
 800dd64:	4806      	ldr	r0, [pc, #24]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd66:	f7f9 fd91 	bl	800788c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800dd6a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800dd6e:	2101      	movs	r1, #1
 800dd70:	4803      	ldr	r0, [pc, #12]	; (800dd80 <USBD_LL_Init+0x9c>)
 800dd72:	f7f9 fd8b 	bl	800788c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800dd76:	2300      	movs	r3, #0
}
 800dd78:	4618      	mov	r0, r3
 800dd7a:	3708      	adds	r7, #8
 800dd7c:	46bd      	mov	sp, r7
 800dd7e:	bd80      	pop	{r7, pc}
 800dd80:	20001bf0 	.word	0x20001bf0
 800dd84:	40040000 	.word	0x40040000

0800dd88 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dd94:	2300      	movs	r3, #0
 800dd96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dd9e:	4618      	mov	r0, r3
 800dda0:	f7f8 fc5b 	bl	800665a <HAL_PCD_Start>
 800dda4:	4603      	mov	r3, r0
 800dda6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dda8:	7bfb      	ldrb	r3, [r7, #15]
 800ddaa:	4618      	mov	r0, r3
 800ddac:	f000 f97e 	bl	800e0ac <USBD_Get_USB_Status>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ddb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3710      	adds	r7, #16
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b084      	sub	sp, #16
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	4608      	mov	r0, r1
 800ddc8:	4611      	mov	r1, r2
 800ddca:	461a      	mov	r2, r3
 800ddcc:	4603      	mov	r3, r0
 800ddce:	70fb      	strb	r3, [r7, #3]
 800ddd0:	460b      	mov	r3, r1
 800ddd2:	70bb      	strb	r3, [r7, #2]
 800ddd4:	4613      	mov	r3, r2
 800ddd6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ddd8:	2300      	movs	r3, #0
 800ddda:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dde6:	78bb      	ldrb	r3, [r7, #2]
 800dde8:	883a      	ldrh	r2, [r7, #0]
 800ddea:	78f9      	ldrb	r1, [r7, #3]
 800ddec:	f7f9 f948 	bl	8007080 <HAL_PCD_EP_Open>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ddf4:	7bfb      	ldrb	r3, [r7, #15]
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f000 f958 	bl	800e0ac <USBD_Get_USB_Status>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de00:	7bbb      	ldrb	r3, [r7, #14]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3710      	adds	r7, #16
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b084      	sub	sp, #16
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
 800de12:	460b      	mov	r3, r1
 800de14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de1a:	2300      	movs	r3, #0
 800de1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de24:	78fa      	ldrb	r2, [r7, #3]
 800de26:	4611      	mov	r1, r2
 800de28:	4618      	mov	r0, r3
 800de2a:	f7f9 f991 	bl	8007150 <HAL_PCD_EP_Close>
 800de2e:	4603      	mov	r3, r0
 800de30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de32:	7bfb      	ldrb	r3, [r7, #15]
 800de34:	4618      	mov	r0, r3
 800de36:	f000 f939 	bl	800e0ac <USBD_Get_USB_Status>
 800de3a:	4603      	mov	r3, r0
 800de3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800de40:	4618      	mov	r0, r3
 800de42:	3710      	adds	r7, #16
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b084      	sub	sp, #16
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6078      	str	r0, [r7, #4]
 800de50:	460b      	mov	r3, r1
 800de52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de54:	2300      	movs	r3, #0
 800de56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de58:	2300      	movs	r3, #0
 800de5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800de62:	78fa      	ldrb	r2, [r7, #3]
 800de64:	4611      	mov	r1, r2
 800de66:	4618      	mov	r0, r3
 800de68:	f7f9 fa69 	bl	800733e <HAL_PCD_EP_SetStall>
 800de6c:	4603      	mov	r3, r0
 800de6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800de70:	7bfb      	ldrb	r3, [r7, #15]
 800de72:	4618      	mov	r0, r3
 800de74:	f000 f91a 	bl	800e0ac <USBD_Get_USB_Status>
 800de78:	4603      	mov	r3, r0
 800de7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800de7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800de7e:	4618      	mov	r0, r3
 800de80:	3710      	adds	r7, #16
 800de82:	46bd      	mov	sp, r7
 800de84:	bd80      	pop	{r7, pc}

0800de86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800de86:	b580      	push	{r7, lr}
 800de88:	b084      	sub	sp, #16
 800de8a:	af00      	add	r7, sp, #0
 800de8c:	6078      	str	r0, [r7, #4]
 800de8e:	460b      	mov	r3, r1
 800de90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800de92:	2300      	movs	r3, #0
 800de94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800de96:	2300      	movs	r3, #0
 800de98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dea0:	78fa      	ldrb	r2, [r7, #3]
 800dea2:	4611      	mov	r1, r2
 800dea4:	4618      	mov	r0, r3
 800dea6:	f7f9 faae 	bl	8007406 <HAL_PCD_EP_ClrStall>
 800deaa:	4603      	mov	r3, r0
 800deac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800deae:	7bfb      	ldrb	r3, [r7, #15]
 800deb0:	4618      	mov	r0, r3
 800deb2:	f000 f8fb 	bl	800e0ac <USBD_Get_USB_Status>
 800deb6:	4603      	mov	r3, r0
 800deb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800deba:	7bbb      	ldrb	r3, [r7, #14]
}
 800debc:	4618      	mov	r0, r3
 800debe:	3710      	adds	r7, #16
 800dec0:	46bd      	mov	sp, r7
 800dec2:	bd80      	pop	{r7, pc}

0800dec4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
 800deca:	6078      	str	r0, [r7, #4]
 800decc:	460b      	mov	r3, r1
 800dece:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ded6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ded8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	da0b      	bge.n	800def8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800dee0:	78fb      	ldrb	r3, [r7, #3]
 800dee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dee6:	68f9      	ldr	r1, [r7, #12]
 800dee8:	4613      	mov	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	4413      	add	r3, r2
 800deee:	009b      	lsls	r3, r3, #2
 800def0:	440b      	add	r3, r1
 800def2:	333e      	adds	r3, #62	; 0x3e
 800def4:	781b      	ldrb	r3, [r3, #0]
 800def6:	e00b      	b.n	800df10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800def8:	78fb      	ldrb	r3, [r7, #3]
 800defa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800defe:	68f9      	ldr	r1, [r7, #12]
 800df00:	4613      	mov	r3, r2
 800df02:	00db      	lsls	r3, r3, #3
 800df04:	4413      	add	r3, r2
 800df06:	009b      	lsls	r3, r3, #2
 800df08:	440b      	add	r3, r1
 800df0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800df0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800df10:	4618      	mov	r0, r3
 800df12:	3714      	adds	r7, #20
 800df14:	46bd      	mov	sp, r7
 800df16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1a:	4770      	bx	lr

0800df1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b084      	sub	sp, #16
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df28:	2300      	movs	r3, #0
 800df2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df2c:	2300      	movs	r3, #0
 800df2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800df36:	78fa      	ldrb	r2, [r7, #3]
 800df38:	4611      	mov	r1, r2
 800df3a:	4618      	mov	r0, r3
 800df3c:	f7f9 f87b 	bl	8007036 <HAL_PCD_SetAddress>
 800df40:	4603      	mov	r3, r0
 800df42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df44:	7bfb      	ldrb	r3, [r7, #15]
 800df46:	4618      	mov	r0, r3
 800df48:	f000 f8b0 	bl	800e0ac <USBD_Get_USB_Status>
 800df4c:	4603      	mov	r3, r0
 800df4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800df50:	7bbb      	ldrb	r3, [r7, #14]
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b086      	sub	sp, #24
 800df5e:	af00      	add	r7, sp, #0
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
 800df66:	460b      	mov	r3, r1
 800df68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800df6a:	2300      	movs	r3, #0
 800df6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800df6e:	2300      	movs	r3, #0
 800df70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800df78:	7af9      	ldrb	r1, [r7, #11]
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	f7f9 f994 	bl	80072aa <HAL_PCD_EP_Transmit>
 800df82:	4603      	mov	r3, r0
 800df84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800df86:	7dfb      	ldrb	r3, [r7, #23]
 800df88:	4618      	mov	r0, r3
 800df8a:	f000 f88f 	bl	800e0ac <USBD_Get_USB_Status>
 800df8e:	4603      	mov	r3, r0
 800df90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800df92:	7dbb      	ldrb	r3, [r7, #22]
}
 800df94:	4618      	mov	r0, r3
 800df96:	3718      	adds	r7, #24
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b086      	sub	sp, #24
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	607a      	str	r2, [r7, #4]
 800dfa6:	603b      	str	r3, [r7, #0]
 800dfa8:	460b      	mov	r3, r1
 800dfaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800dfac:	2300      	movs	r3, #0
 800dfae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800dfba:	7af9      	ldrb	r1, [r7, #11]
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	687a      	ldr	r2, [r7, #4]
 800dfc0:	f7f9 f910 	bl	80071e4 <HAL_PCD_EP_Receive>
 800dfc4:	4603      	mov	r3, r0
 800dfc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800dfc8:	7dfb      	ldrb	r3, [r7, #23]
 800dfca:	4618      	mov	r0, r3
 800dfcc:	f000 f86e 	bl	800e0ac <USBD_Get_USB_Status>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800dfd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	3718      	adds	r7, #24
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}

0800dfde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800dfde:	b580      	push	{r7, lr}
 800dfe0:	b082      	sub	sp, #8
 800dfe2:	af00      	add	r7, sp, #0
 800dfe4:	6078      	str	r0, [r7, #4]
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800dff0:	78fa      	ldrb	r2, [r7, #3]
 800dff2:	4611      	mov	r1, r2
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7f9 f940 	bl	800727a <HAL_PCD_EP_GetRxCount>
 800dffa:	4603      	mov	r3, r0
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3708      	adds	r7, #8
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}

0800e004 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b082      	sub	sp, #8
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
 800e00c:	460b      	mov	r3, r1
 800e00e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800e010:	78fb      	ldrb	r3, [r7, #3]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d002      	beq.n	800e01c <HAL_PCDEx_LPM_Callback+0x18>
 800e016:	2b01      	cmp	r3, #1
 800e018:	d01f      	beq.n	800e05a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800e01a:	e03b      	b.n	800e094 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6a1b      	ldr	r3, [r3, #32]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d007      	beq.n	800e034 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800e024:	f000 f83c 	bl	800e0a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e028:	4b1c      	ldr	r3, [pc, #112]	; (800e09c <HAL_PCDEx_LPM_Callback+0x98>)
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	4a1b      	ldr	r2, [pc, #108]	; (800e09c <HAL_PCDEx_LPM_Callback+0x98>)
 800e02e:	f023 0306 	bic.w	r3, r3, #6
 800e032:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	6812      	ldr	r2, [r2, #0]
 800e042:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e046:	f023 0301 	bic.w	r3, r3, #1
 800e04a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e052:	4618      	mov	r0, r3
 800e054:	f7fe fa9d 	bl	800c592 <USBD_LL_Resume>
    break;
 800e058:	e01c      	b.n	800e094 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	687a      	ldr	r2, [r7, #4]
 800e066:	6812      	ldr	r2, [r2, #0]
 800e068:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e06c:	f043 0301 	orr.w	r3, r3, #1
 800e070:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800e078:	4618      	mov	r0, r3
 800e07a:	f7fe fa74 	bl	800c566 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d005      	beq.n	800e092 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e086:	4b05      	ldr	r3, [pc, #20]	; (800e09c <HAL_PCDEx_LPM_Callback+0x98>)
 800e088:	691b      	ldr	r3, [r3, #16]
 800e08a:	4a04      	ldr	r2, [pc, #16]	; (800e09c <HAL_PCDEx_LPM_Callback+0x98>)
 800e08c:	f043 0306 	orr.w	r3, r3, #6
 800e090:	6113      	str	r3, [r2, #16]
    break;
 800e092:	bf00      	nop
}
 800e094:	bf00      	nop
 800e096:	3708      	adds	r7, #8
 800e098:	46bd      	mov	sp, r7
 800e09a:	bd80      	pop	{r7, pc}
 800e09c:	e000ed00 	.word	0xe000ed00

0800e0a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e0a4:	f7f3 ff64 	bl	8001f70 <SystemClock_Config>
}
 800e0a8:	bf00      	nop
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e0ac:	b480      	push	{r7}
 800e0ae:	b085      	sub	sp, #20
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e0ba:	79fb      	ldrb	r3, [r7, #7]
 800e0bc:	2b03      	cmp	r3, #3
 800e0be:	d817      	bhi.n	800e0f0 <USBD_Get_USB_Status+0x44>
 800e0c0:	a201      	add	r2, pc, #4	; (adr r2, 800e0c8 <USBD_Get_USB_Status+0x1c>)
 800e0c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c6:	bf00      	nop
 800e0c8:	0800e0d9 	.word	0x0800e0d9
 800e0cc:	0800e0df 	.word	0x0800e0df
 800e0d0:	0800e0e5 	.word	0x0800e0e5
 800e0d4:	0800e0eb 	.word	0x0800e0eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e0d8:	2300      	movs	r3, #0
 800e0da:	73fb      	strb	r3, [r7, #15]
    break;
 800e0dc:	e00b      	b.n	800e0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e2:	e008      	b.n	800e0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e0e4:	2301      	movs	r3, #1
 800e0e6:	73fb      	strb	r3, [r7, #15]
    break;
 800e0e8:	e005      	b.n	800e0f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e0ea:	2303      	movs	r3, #3
 800e0ec:	73fb      	strb	r3, [r7, #15]
    break;
 800e0ee:	e002      	b.n	800e0f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e0f0:	2303      	movs	r3, #3
 800e0f2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0f4:	bf00      	nop
  }
  return usb_status;
 800e0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3714      	adds	r7, #20
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <malloc>:
 800e104:	4b02      	ldr	r3, [pc, #8]	; (800e110 <malloc+0xc>)
 800e106:	4601      	mov	r1, r0
 800e108:	6818      	ldr	r0, [r3, #0]
 800e10a:	f000 b82b 	b.w	800e164 <_malloc_r>
 800e10e:	bf00      	nop
 800e110:	200001e4 	.word	0x200001e4

0800e114 <free>:
 800e114:	4b02      	ldr	r3, [pc, #8]	; (800e120 <free+0xc>)
 800e116:	4601      	mov	r1, r0
 800e118:	6818      	ldr	r0, [r3, #0]
 800e11a:	f000 b913 	b.w	800e344 <_free_r>
 800e11e:	bf00      	nop
 800e120:	200001e4 	.word	0x200001e4

0800e124 <sbrk_aligned>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	4e0e      	ldr	r6, [pc, #56]	; (800e160 <sbrk_aligned+0x3c>)
 800e128:	460c      	mov	r4, r1
 800e12a:	6831      	ldr	r1, [r6, #0]
 800e12c:	4605      	mov	r5, r0
 800e12e:	b911      	cbnz	r1, 800e136 <sbrk_aligned+0x12>
 800e130:	f000 f8cc 	bl	800e2cc <_sbrk_r>
 800e134:	6030      	str	r0, [r6, #0]
 800e136:	4621      	mov	r1, r4
 800e138:	4628      	mov	r0, r5
 800e13a:	f000 f8c7 	bl	800e2cc <_sbrk_r>
 800e13e:	1c43      	adds	r3, r0, #1
 800e140:	d00a      	beq.n	800e158 <sbrk_aligned+0x34>
 800e142:	1cc4      	adds	r4, r0, #3
 800e144:	f024 0403 	bic.w	r4, r4, #3
 800e148:	42a0      	cmp	r0, r4
 800e14a:	d007      	beq.n	800e15c <sbrk_aligned+0x38>
 800e14c:	1a21      	subs	r1, r4, r0
 800e14e:	4628      	mov	r0, r5
 800e150:	f000 f8bc 	bl	800e2cc <_sbrk_r>
 800e154:	3001      	adds	r0, #1
 800e156:	d101      	bne.n	800e15c <sbrk_aligned+0x38>
 800e158:	f04f 34ff 	mov.w	r4, #4294967295
 800e15c:	4620      	mov	r0, r4
 800e15e:	bd70      	pop	{r4, r5, r6, pc}
 800e160:	200020fc 	.word	0x200020fc

0800e164 <_malloc_r>:
 800e164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e168:	1ccd      	adds	r5, r1, #3
 800e16a:	f025 0503 	bic.w	r5, r5, #3
 800e16e:	3508      	adds	r5, #8
 800e170:	2d0c      	cmp	r5, #12
 800e172:	bf38      	it	cc
 800e174:	250c      	movcc	r5, #12
 800e176:	2d00      	cmp	r5, #0
 800e178:	4607      	mov	r7, r0
 800e17a:	db01      	blt.n	800e180 <_malloc_r+0x1c>
 800e17c:	42a9      	cmp	r1, r5
 800e17e:	d905      	bls.n	800e18c <_malloc_r+0x28>
 800e180:	230c      	movs	r3, #12
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	2600      	movs	r6, #0
 800e186:	4630      	mov	r0, r6
 800e188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e18c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e260 <_malloc_r+0xfc>
 800e190:	f000 f868 	bl	800e264 <__malloc_lock>
 800e194:	f8d8 3000 	ldr.w	r3, [r8]
 800e198:	461c      	mov	r4, r3
 800e19a:	bb5c      	cbnz	r4, 800e1f4 <_malloc_r+0x90>
 800e19c:	4629      	mov	r1, r5
 800e19e:	4638      	mov	r0, r7
 800e1a0:	f7ff ffc0 	bl	800e124 <sbrk_aligned>
 800e1a4:	1c43      	adds	r3, r0, #1
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	d155      	bne.n	800e256 <_malloc_r+0xf2>
 800e1aa:	f8d8 4000 	ldr.w	r4, [r8]
 800e1ae:	4626      	mov	r6, r4
 800e1b0:	2e00      	cmp	r6, #0
 800e1b2:	d145      	bne.n	800e240 <_malloc_r+0xdc>
 800e1b4:	2c00      	cmp	r4, #0
 800e1b6:	d048      	beq.n	800e24a <_malloc_r+0xe6>
 800e1b8:	6823      	ldr	r3, [r4, #0]
 800e1ba:	4631      	mov	r1, r6
 800e1bc:	4638      	mov	r0, r7
 800e1be:	eb04 0903 	add.w	r9, r4, r3
 800e1c2:	f000 f883 	bl	800e2cc <_sbrk_r>
 800e1c6:	4581      	cmp	r9, r0
 800e1c8:	d13f      	bne.n	800e24a <_malloc_r+0xe6>
 800e1ca:	6821      	ldr	r1, [r4, #0]
 800e1cc:	1a6d      	subs	r5, r5, r1
 800e1ce:	4629      	mov	r1, r5
 800e1d0:	4638      	mov	r0, r7
 800e1d2:	f7ff ffa7 	bl	800e124 <sbrk_aligned>
 800e1d6:	3001      	adds	r0, #1
 800e1d8:	d037      	beq.n	800e24a <_malloc_r+0xe6>
 800e1da:	6823      	ldr	r3, [r4, #0]
 800e1dc:	442b      	add	r3, r5
 800e1de:	6023      	str	r3, [r4, #0]
 800e1e0:	f8d8 3000 	ldr.w	r3, [r8]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d038      	beq.n	800e25a <_malloc_r+0xf6>
 800e1e8:	685a      	ldr	r2, [r3, #4]
 800e1ea:	42a2      	cmp	r2, r4
 800e1ec:	d12b      	bne.n	800e246 <_malloc_r+0xe2>
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	605a      	str	r2, [r3, #4]
 800e1f2:	e00f      	b.n	800e214 <_malloc_r+0xb0>
 800e1f4:	6822      	ldr	r2, [r4, #0]
 800e1f6:	1b52      	subs	r2, r2, r5
 800e1f8:	d41f      	bmi.n	800e23a <_malloc_r+0xd6>
 800e1fa:	2a0b      	cmp	r2, #11
 800e1fc:	d917      	bls.n	800e22e <_malloc_r+0xca>
 800e1fe:	1961      	adds	r1, r4, r5
 800e200:	42a3      	cmp	r3, r4
 800e202:	6025      	str	r5, [r4, #0]
 800e204:	bf18      	it	ne
 800e206:	6059      	strne	r1, [r3, #4]
 800e208:	6863      	ldr	r3, [r4, #4]
 800e20a:	bf08      	it	eq
 800e20c:	f8c8 1000 	streq.w	r1, [r8]
 800e210:	5162      	str	r2, [r4, r5]
 800e212:	604b      	str	r3, [r1, #4]
 800e214:	4638      	mov	r0, r7
 800e216:	f104 060b 	add.w	r6, r4, #11
 800e21a:	f000 f829 	bl	800e270 <__malloc_unlock>
 800e21e:	f026 0607 	bic.w	r6, r6, #7
 800e222:	1d23      	adds	r3, r4, #4
 800e224:	1af2      	subs	r2, r6, r3
 800e226:	d0ae      	beq.n	800e186 <_malloc_r+0x22>
 800e228:	1b9b      	subs	r3, r3, r6
 800e22a:	50a3      	str	r3, [r4, r2]
 800e22c:	e7ab      	b.n	800e186 <_malloc_r+0x22>
 800e22e:	42a3      	cmp	r3, r4
 800e230:	6862      	ldr	r2, [r4, #4]
 800e232:	d1dd      	bne.n	800e1f0 <_malloc_r+0x8c>
 800e234:	f8c8 2000 	str.w	r2, [r8]
 800e238:	e7ec      	b.n	800e214 <_malloc_r+0xb0>
 800e23a:	4623      	mov	r3, r4
 800e23c:	6864      	ldr	r4, [r4, #4]
 800e23e:	e7ac      	b.n	800e19a <_malloc_r+0x36>
 800e240:	4634      	mov	r4, r6
 800e242:	6876      	ldr	r6, [r6, #4]
 800e244:	e7b4      	b.n	800e1b0 <_malloc_r+0x4c>
 800e246:	4613      	mov	r3, r2
 800e248:	e7cc      	b.n	800e1e4 <_malloc_r+0x80>
 800e24a:	230c      	movs	r3, #12
 800e24c:	603b      	str	r3, [r7, #0]
 800e24e:	4638      	mov	r0, r7
 800e250:	f000 f80e 	bl	800e270 <__malloc_unlock>
 800e254:	e797      	b.n	800e186 <_malloc_r+0x22>
 800e256:	6025      	str	r5, [r4, #0]
 800e258:	e7dc      	b.n	800e214 <_malloc_r+0xb0>
 800e25a:	605b      	str	r3, [r3, #4]
 800e25c:	deff      	udf	#255	; 0xff
 800e25e:	bf00      	nop
 800e260:	200020f8 	.word	0x200020f8

0800e264 <__malloc_lock>:
 800e264:	4801      	ldr	r0, [pc, #4]	; (800e26c <__malloc_lock+0x8>)
 800e266:	f000 b86b 	b.w	800e340 <__retarget_lock_acquire_recursive>
 800e26a:	bf00      	nop
 800e26c:	2000223c 	.word	0x2000223c

0800e270 <__malloc_unlock>:
 800e270:	4801      	ldr	r0, [pc, #4]	; (800e278 <__malloc_unlock+0x8>)
 800e272:	f000 b866 	b.w	800e342 <__retarget_lock_release_recursive>
 800e276:	bf00      	nop
 800e278:	2000223c 	.word	0x2000223c

0800e27c <siprintf>:
 800e27c:	b40e      	push	{r1, r2, r3}
 800e27e:	b500      	push	{lr}
 800e280:	b09c      	sub	sp, #112	; 0x70
 800e282:	ab1d      	add	r3, sp, #116	; 0x74
 800e284:	9002      	str	r0, [sp, #8]
 800e286:	9006      	str	r0, [sp, #24]
 800e288:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e28c:	4809      	ldr	r0, [pc, #36]	; (800e2b4 <siprintf+0x38>)
 800e28e:	9107      	str	r1, [sp, #28]
 800e290:	9104      	str	r1, [sp, #16]
 800e292:	4909      	ldr	r1, [pc, #36]	; (800e2b8 <siprintf+0x3c>)
 800e294:	f853 2b04 	ldr.w	r2, [r3], #4
 800e298:	9105      	str	r1, [sp, #20]
 800e29a:	6800      	ldr	r0, [r0, #0]
 800e29c:	9301      	str	r3, [sp, #4]
 800e29e:	a902      	add	r1, sp, #8
 800e2a0:	f000 f8f6 	bl	800e490 <_svfiprintf_r>
 800e2a4:	9b02      	ldr	r3, [sp, #8]
 800e2a6:	2200      	movs	r2, #0
 800e2a8:	701a      	strb	r2, [r3, #0]
 800e2aa:	b01c      	add	sp, #112	; 0x70
 800e2ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800e2b0:	b003      	add	sp, #12
 800e2b2:	4770      	bx	lr
 800e2b4:	200001e4 	.word	0x200001e4
 800e2b8:	ffff0208 	.word	0xffff0208

0800e2bc <memset>:
 800e2bc:	4402      	add	r2, r0
 800e2be:	4603      	mov	r3, r0
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d100      	bne.n	800e2c6 <memset+0xa>
 800e2c4:	4770      	bx	lr
 800e2c6:	f803 1b01 	strb.w	r1, [r3], #1
 800e2ca:	e7f9      	b.n	800e2c0 <memset+0x4>

0800e2cc <_sbrk_r>:
 800e2cc:	b538      	push	{r3, r4, r5, lr}
 800e2ce:	4d06      	ldr	r5, [pc, #24]	; (800e2e8 <_sbrk_r+0x1c>)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	4604      	mov	r4, r0
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	602b      	str	r3, [r5, #0]
 800e2d8:	f7f4 ff2a 	bl	8003130 <_sbrk>
 800e2dc:	1c43      	adds	r3, r0, #1
 800e2de:	d102      	bne.n	800e2e6 <_sbrk_r+0x1a>
 800e2e0:	682b      	ldr	r3, [r5, #0]
 800e2e2:	b103      	cbz	r3, 800e2e6 <_sbrk_r+0x1a>
 800e2e4:	6023      	str	r3, [r4, #0]
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	20002238 	.word	0x20002238

0800e2ec <__errno>:
 800e2ec:	4b01      	ldr	r3, [pc, #4]	; (800e2f4 <__errno+0x8>)
 800e2ee:	6818      	ldr	r0, [r3, #0]
 800e2f0:	4770      	bx	lr
 800e2f2:	bf00      	nop
 800e2f4:	200001e4 	.word	0x200001e4

0800e2f8 <__libc_init_array>:
 800e2f8:	b570      	push	{r4, r5, r6, lr}
 800e2fa:	4d0d      	ldr	r5, [pc, #52]	; (800e330 <__libc_init_array+0x38>)
 800e2fc:	4c0d      	ldr	r4, [pc, #52]	; (800e334 <__libc_init_array+0x3c>)
 800e2fe:	1b64      	subs	r4, r4, r5
 800e300:	10a4      	asrs	r4, r4, #2
 800e302:	2600      	movs	r6, #0
 800e304:	42a6      	cmp	r6, r4
 800e306:	d109      	bne.n	800e31c <__libc_init_array+0x24>
 800e308:	4d0b      	ldr	r5, [pc, #44]	; (800e338 <__libc_init_array+0x40>)
 800e30a:	4c0c      	ldr	r4, [pc, #48]	; (800e33c <__libc_init_array+0x44>)
 800e30c:	f000 fbae 	bl	800ea6c <_init>
 800e310:	1b64      	subs	r4, r4, r5
 800e312:	10a4      	asrs	r4, r4, #2
 800e314:	2600      	movs	r6, #0
 800e316:	42a6      	cmp	r6, r4
 800e318:	d105      	bne.n	800e326 <__libc_init_array+0x2e>
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e320:	4798      	blx	r3
 800e322:	3601      	adds	r6, #1
 800e324:	e7ee      	b.n	800e304 <__libc_init_array+0xc>
 800e326:	f855 3b04 	ldr.w	r3, [r5], #4
 800e32a:	4798      	blx	r3
 800e32c:	3601      	adds	r6, #1
 800e32e:	e7f2      	b.n	800e316 <__libc_init_array+0x1e>
 800e330:	0801e0f0 	.word	0x0801e0f0
 800e334:	0801e0f0 	.word	0x0801e0f0
 800e338:	0801e0f0 	.word	0x0801e0f0
 800e33c:	0801e0f4 	.word	0x0801e0f4

0800e340 <__retarget_lock_acquire_recursive>:
 800e340:	4770      	bx	lr

0800e342 <__retarget_lock_release_recursive>:
 800e342:	4770      	bx	lr

0800e344 <_free_r>:
 800e344:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e346:	2900      	cmp	r1, #0
 800e348:	d044      	beq.n	800e3d4 <_free_r+0x90>
 800e34a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e34e:	9001      	str	r0, [sp, #4]
 800e350:	2b00      	cmp	r3, #0
 800e352:	f1a1 0404 	sub.w	r4, r1, #4
 800e356:	bfb8      	it	lt
 800e358:	18e4      	addlt	r4, r4, r3
 800e35a:	f7ff ff83 	bl	800e264 <__malloc_lock>
 800e35e:	4a1e      	ldr	r2, [pc, #120]	; (800e3d8 <_free_r+0x94>)
 800e360:	9801      	ldr	r0, [sp, #4]
 800e362:	6813      	ldr	r3, [r2, #0]
 800e364:	b933      	cbnz	r3, 800e374 <_free_r+0x30>
 800e366:	6063      	str	r3, [r4, #4]
 800e368:	6014      	str	r4, [r2, #0]
 800e36a:	b003      	add	sp, #12
 800e36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e370:	f7ff bf7e 	b.w	800e270 <__malloc_unlock>
 800e374:	42a3      	cmp	r3, r4
 800e376:	d908      	bls.n	800e38a <_free_r+0x46>
 800e378:	6825      	ldr	r5, [r4, #0]
 800e37a:	1961      	adds	r1, r4, r5
 800e37c:	428b      	cmp	r3, r1
 800e37e:	bf01      	itttt	eq
 800e380:	6819      	ldreq	r1, [r3, #0]
 800e382:	685b      	ldreq	r3, [r3, #4]
 800e384:	1949      	addeq	r1, r1, r5
 800e386:	6021      	streq	r1, [r4, #0]
 800e388:	e7ed      	b.n	800e366 <_free_r+0x22>
 800e38a:	461a      	mov	r2, r3
 800e38c:	685b      	ldr	r3, [r3, #4]
 800e38e:	b10b      	cbz	r3, 800e394 <_free_r+0x50>
 800e390:	42a3      	cmp	r3, r4
 800e392:	d9fa      	bls.n	800e38a <_free_r+0x46>
 800e394:	6811      	ldr	r1, [r2, #0]
 800e396:	1855      	adds	r5, r2, r1
 800e398:	42a5      	cmp	r5, r4
 800e39a:	d10b      	bne.n	800e3b4 <_free_r+0x70>
 800e39c:	6824      	ldr	r4, [r4, #0]
 800e39e:	4421      	add	r1, r4
 800e3a0:	1854      	adds	r4, r2, r1
 800e3a2:	42a3      	cmp	r3, r4
 800e3a4:	6011      	str	r1, [r2, #0]
 800e3a6:	d1e0      	bne.n	800e36a <_free_r+0x26>
 800e3a8:	681c      	ldr	r4, [r3, #0]
 800e3aa:	685b      	ldr	r3, [r3, #4]
 800e3ac:	6053      	str	r3, [r2, #4]
 800e3ae:	440c      	add	r4, r1
 800e3b0:	6014      	str	r4, [r2, #0]
 800e3b2:	e7da      	b.n	800e36a <_free_r+0x26>
 800e3b4:	d902      	bls.n	800e3bc <_free_r+0x78>
 800e3b6:	230c      	movs	r3, #12
 800e3b8:	6003      	str	r3, [r0, #0]
 800e3ba:	e7d6      	b.n	800e36a <_free_r+0x26>
 800e3bc:	6825      	ldr	r5, [r4, #0]
 800e3be:	1961      	adds	r1, r4, r5
 800e3c0:	428b      	cmp	r3, r1
 800e3c2:	bf04      	itt	eq
 800e3c4:	6819      	ldreq	r1, [r3, #0]
 800e3c6:	685b      	ldreq	r3, [r3, #4]
 800e3c8:	6063      	str	r3, [r4, #4]
 800e3ca:	bf04      	itt	eq
 800e3cc:	1949      	addeq	r1, r1, r5
 800e3ce:	6021      	streq	r1, [r4, #0]
 800e3d0:	6054      	str	r4, [r2, #4]
 800e3d2:	e7ca      	b.n	800e36a <_free_r+0x26>
 800e3d4:	b003      	add	sp, #12
 800e3d6:	bd30      	pop	{r4, r5, pc}
 800e3d8:	200020f8 	.word	0x200020f8

0800e3dc <__ssputs_r>:
 800e3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e0:	688e      	ldr	r6, [r1, #8]
 800e3e2:	461f      	mov	r7, r3
 800e3e4:	42be      	cmp	r6, r7
 800e3e6:	680b      	ldr	r3, [r1, #0]
 800e3e8:	4682      	mov	sl, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	4690      	mov	r8, r2
 800e3ee:	d82c      	bhi.n	800e44a <__ssputs_r+0x6e>
 800e3f0:	898a      	ldrh	r2, [r1, #12]
 800e3f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e3f6:	d026      	beq.n	800e446 <__ssputs_r+0x6a>
 800e3f8:	6965      	ldr	r5, [r4, #20]
 800e3fa:	6909      	ldr	r1, [r1, #16]
 800e3fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e400:	eba3 0901 	sub.w	r9, r3, r1
 800e404:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e408:	1c7b      	adds	r3, r7, #1
 800e40a:	444b      	add	r3, r9
 800e40c:	106d      	asrs	r5, r5, #1
 800e40e:	429d      	cmp	r5, r3
 800e410:	bf38      	it	cc
 800e412:	461d      	movcc	r5, r3
 800e414:	0553      	lsls	r3, r2, #21
 800e416:	d527      	bpl.n	800e468 <__ssputs_r+0x8c>
 800e418:	4629      	mov	r1, r5
 800e41a:	f7ff fea3 	bl	800e164 <_malloc_r>
 800e41e:	4606      	mov	r6, r0
 800e420:	b360      	cbz	r0, 800e47c <__ssputs_r+0xa0>
 800e422:	6921      	ldr	r1, [r4, #16]
 800e424:	464a      	mov	r2, r9
 800e426:	f000 fadb 	bl	800e9e0 <memcpy>
 800e42a:	89a3      	ldrh	r3, [r4, #12]
 800e42c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e430:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e434:	81a3      	strh	r3, [r4, #12]
 800e436:	6126      	str	r6, [r4, #16]
 800e438:	6165      	str	r5, [r4, #20]
 800e43a:	444e      	add	r6, r9
 800e43c:	eba5 0509 	sub.w	r5, r5, r9
 800e440:	6026      	str	r6, [r4, #0]
 800e442:	60a5      	str	r5, [r4, #8]
 800e444:	463e      	mov	r6, r7
 800e446:	42be      	cmp	r6, r7
 800e448:	d900      	bls.n	800e44c <__ssputs_r+0x70>
 800e44a:	463e      	mov	r6, r7
 800e44c:	6820      	ldr	r0, [r4, #0]
 800e44e:	4632      	mov	r2, r6
 800e450:	4641      	mov	r1, r8
 800e452:	f000 faab 	bl	800e9ac <memmove>
 800e456:	68a3      	ldr	r3, [r4, #8]
 800e458:	1b9b      	subs	r3, r3, r6
 800e45a:	60a3      	str	r3, [r4, #8]
 800e45c:	6823      	ldr	r3, [r4, #0]
 800e45e:	4433      	add	r3, r6
 800e460:	6023      	str	r3, [r4, #0]
 800e462:	2000      	movs	r0, #0
 800e464:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e468:	462a      	mov	r2, r5
 800e46a:	f000 fac7 	bl	800e9fc <_realloc_r>
 800e46e:	4606      	mov	r6, r0
 800e470:	2800      	cmp	r0, #0
 800e472:	d1e0      	bne.n	800e436 <__ssputs_r+0x5a>
 800e474:	6921      	ldr	r1, [r4, #16]
 800e476:	4650      	mov	r0, sl
 800e478:	f7ff ff64 	bl	800e344 <_free_r>
 800e47c:	230c      	movs	r3, #12
 800e47e:	f8ca 3000 	str.w	r3, [sl]
 800e482:	89a3      	ldrh	r3, [r4, #12]
 800e484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e488:	81a3      	strh	r3, [r4, #12]
 800e48a:	f04f 30ff 	mov.w	r0, #4294967295
 800e48e:	e7e9      	b.n	800e464 <__ssputs_r+0x88>

0800e490 <_svfiprintf_r>:
 800e490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e494:	4698      	mov	r8, r3
 800e496:	898b      	ldrh	r3, [r1, #12]
 800e498:	061b      	lsls	r3, r3, #24
 800e49a:	b09d      	sub	sp, #116	; 0x74
 800e49c:	4607      	mov	r7, r0
 800e49e:	460d      	mov	r5, r1
 800e4a0:	4614      	mov	r4, r2
 800e4a2:	d50e      	bpl.n	800e4c2 <_svfiprintf_r+0x32>
 800e4a4:	690b      	ldr	r3, [r1, #16]
 800e4a6:	b963      	cbnz	r3, 800e4c2 <_svfiprintf_r+0x32>
 800e4a8:	2140      	movs	r1, #64	; 0x40
 800e4aa:	f7ff fe5b 	bl	800e164 <_malloc_r>
 800e4ae:	6028      	str	r0, [r5, #0]
 800e4b0:	6128      	str	r0, [r5, #16]
 800e4b2:	b920      	cbnz	r0, 800e4be <_svfiprintf_r+0x2e>
 800e4b4:	230c      	movs	r3, #12
 800e4b6:	603b      	str	r3, [r7, #0]
 800e4b8:	f04f 30ff 	mov.w	r0, #4294967295
 800e4bc:	e0d0      	b.n	800e660 <_svfiprintf_r+0x1d0>
 800e4be:	2340      	movs	r3, #64	; 0x40
 800e4c0:	616b      	str	r3, [r5, #20]
 800e4c2:	2300      	movs	r3, #0
 800e4c4:	9309      	str	r3, [sp, #36]	; 0x24
 800e4c6:	2320      	movs	r3, #32
 800e4c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4cc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4d0:	2330      	movs	r3, #48	; 0x30
 800e4d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e678 <_svfiprintf_r+0x1e8>
 800e4d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4da:	f04f 0901 	mov.w	r9, #1
 800e4de:	4623      	mov	r3, r4
 800e4e0:	469a      	mov	sl, r3
 800e4e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4e6:	b10a      	cbz	r2, 800e4ec <_svfiprintf_r+0x5c>
 800e4e8:	2a25      	cmp	r2, #37	; 0x25
 800e4ea:	d1f9      	bne.n	800e4e0 <_svfiprintf_r+0x50>
 800e4ec:	ebba 0b04 	subs.w	fp, sl, r4
 800e4f0:	d00b      	beq.n	800e50a <_svfiprintf_r+0x7a>
 800e4f2:	465b      	mov	r3, fp
 800e4f4:	4622      	mov	r2, r4
 800e4f6:	4629      	mov	r1, r5
 800e4f8:	4638      	mov	r0, r7
 800e4fa:	f7ff ff6f 	bl	800e3dc <__ssputs_r>
 800e4fe:	3001      	adds	r0, #1
 800e500:	f000 80a9 	beq.w	800e656 <_svfiprintf_r+0x1c6>
 800e504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e506:	445a      	add	r2, fp
 800e508:	9209      	str	r2, [sp, #36]	; 0x24
 800e50a:	f89a 3000 	ldrb.w	r3, [sl]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 80a1 	beq.w	800e656 <_svfiprintf_r+0x1c6>
 800e514:	2300      	movs	r3, #0
 800e516:	f04f 32ff 	mov.w	r2, #4294967295
 800e51a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e51e:	f10a 0a01 	add.w	sl, sl, #1
 800e522:	9304      	str	r3, [sp, #16]
 800e524:	9307      	str	r3, [sp, #28]
 800e526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e52a:	931a      	str	r3, [sp, #104]	; 0x68
 800e52c:	4654      	mov	r4, sl
 800e52e:	2205      	movs	r2, #5
 800e530:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e534:	4850      	ldr	r0, [pc, #320]	; (800e678 <_svfiprintf_r+0x1e8>)
 800e536:	f7f1 fe73 	bl	8000220 <memchr>
 800e53a:	9a04      	ldr	r2, [sp, #16]
 800e53c:	b9d8      	cbnz	r0, 800e576 <_svfiprintf_r+0xe6>
 800e53e:	06d0      	lsls	r0, r2, #27
 800e540:	bf44      	itt	mi
 800e542:	2320      	movmi	r3, #32
 800e544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e548:	0711      	lsls	r1, r2, #28
 800e54a:	bf44      	itt	mi
 800e54c:	232b      	movmi	r3, #43	; 0x2b
 800e54e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e552:	f89a 3000 	ldrb.w	r3, [sl]
 800e556:	2b2a      	cmp	r3, #42	; 0x2a
 800e558:	d015      	beq.n	800e586 <_svfiprintf_r+0xf6>
 800e55a:	9a07      	ldr	r2, [sp, #28]
 800e55c:	4654      	mov	r4, sl
 800e55e:	2000      	movs	r0, #0
 800e560:	f04f 0c0a 	mov.w	ip, #10
 800e564:	4621      	mov	r1, r4
 800e566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e56a:	3b30      	subs	r3, #48	; 0x30
 800e56c:	2b09      	cmp	r3, #9
 800e56e:	d94d      	bls.n	800e60c <_svfiprintf_r+0x17c>
 800e570:	b1b0      	cbz	r0, 800e5a0 <_svfiprintf_r+0x110>
 800e572:	9207      	str	r2, [sp, #28]
 800e574:	e014      	b.n	800e5a0 <_svfiprintf_r+0x110>
 800e576:	eba0 0308 	sub.w	r3, r0, r8
 800e57a:	fa09 f303 	lsl.w	r3, r9, r3
 800e57e:	4313      	orrs	r3, r2
 800e580:	9304      	str	r3, [sp, #16]
 800e582:	46a2      	mov	sl, r4
 800e584:	e7d2      	b.n	800e52c <_svfiprintf_r+0x9c>
 800e586:	9b03      	ldr	r3, [sp, #12]
 800e588:	1d19      	adds	r1, r3, #4
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	9103      	str	r1, [sp, #12]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	bfbb      	ittet	lt
 800e592:	425b      	neglt	r3, r3
 800e594:	f042 0202 	orrlt.w	r2, r2, #2
 800e598:	9307      	strge	r3, [sp, #28]
 800e59a:	9307      	strlt	r3, [sp, #28]
 800e59c:	bfb8      	it	lt
 800e59e:	9204      	strlt	r2, [sp, #16]
 800e5a0:	7823      	ldrb	r3, [r4, #0]
 800e5a2:	2b2e      	cmp	r3, #46	; 0x2e
 800e5a4:	d10c      	bne.n	800e5c0 <_svfiprintf_r+0x130>
 800e5a6:	7863      	ldrb	r3, [r4, #1]
 800e5a8:	2b2a      	cmp	r3, #42	; 0x2a
 800e5aa:	d134      	bne.n	800e616 <_svfiprintf_r+0x186>
 800e5ac:	9b03      	ldr	r3, [sp, #12]
 800e5ae:	1d1a      	adds	r2, r3, #4
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	9203      	str	r2, [sp, #12]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	bfb8      	it	lt
 800e5b8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e5bc:	3402      	adds	r4, #2
 800e5be:	9305      	str	r3, [sp, #20]
 800e5c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e688 <_svfiprintf_r+0x1f8>
 800e5c4:	7821      	ldrb	r1, [r4, #0]
 800e5c6:	2203      	movs	r2, #3
 800e5c8:	4650      	mov	r0, sl
 800e5ca:	f7f1 fe29 	bl	8000220 <memchr>
 800e5ce:	b138      	cbz	r0, 800e5e0 <_svfiprintf_r+0x150>
 800e5d0:	9b04      	ldr	r3, [sp, #16]
 800e5d2:	eba0 000a 	sub.w	r0, r0, sl
 800e5d6:	2240      	movs	r2, #64	; 0x40
 800e5d8:	4082      	lsls	r2, r0
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	3401      	adds	r4, #1
 800e5de:	9304      	str	r3, [sp, #16]
 800e5e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e4:	4825      	ldr	r0, [pc, #148]	; (800e67c <_svfiprintf_r+0x1ec>)
 800e5e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5ea:	2206      	movs	r2, #6
 800e5ec:	f7f1 fe18 	bl	8000220 <memchr>
 800e5f0:	2800      	cmp	r0, #0
 800e5f2:	d038      	beq.n	800e666 <_svfiprintf_r+0x1d6>
 800e5f4:	4b22      	ldr	r3, [pc, #136]	; (800e680 <_svfiprintf_r+0x1f0>)
 800e5f6:	bb1b      	cbnz	r3, 800e640 <_svfiprintf_r+0x1b0>
 800e5f8:	9b03      	ldr	r3, [sp, #12]
 800e5fa:	3307      	adds	r3, #7
 800e5fc:	f023 0307 	bic.w	r3, r3, #7
 800e600:	3308      	adds	r3, #8
 800e602:	9303      	str	r3, [sp, #12]
 800e604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e606:	4433      	add	r3, r6
 800e608:	9309      	str	r3, [sp, #36]	; 0x24
 800e60a:	e768      	b.n	800e4de <_svfiprintf_r+0x4e>
 800e60c:	fb0c 3202 	mla	r2, ip, r2, r3
 800e610:	460c      	mov	r4, r1
 800e612:	2001      	movs	r0, #1
 800e614:	e7a6      	b.n	800e564 <_svfiprintf_r+0xd4>
 800e616:	2300      	movs	r3, #0
 800e618:	3401      	adds	r4, #1
 800e61a:	9305      	str	r3, [sp, #20]
 800e61c:	4619      	mov	r1, r3
 800e61e:	f04f 0c0a 	mov.w	ip, #10
 800e622:	4620      	mov	r0, r4
 800e624:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e628:	3a30      	subs	r2, #48	; 0x30
 800e62a:	2a09      	cmp	r2, #9
 800e62c:	d903      	bls.n	800e636 <_svfiprintf_r+0x1a6>
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d0c6      	beq.n	800e5c0 <_svfiprintf_r+0x130>
 800e632:	9105      	str	r1, [sp, #20]
 800e634:	e7c4      	b.n	800e5c0 <_svfiprintf_r+0x130>
 800e636:	fb0c 2101 	mla	r1, ip, r1, r2
 800e63a:	4604      	mov	r4, r0
 800e63c:	2301      	movs	r3, #1
 800e63e:	e7f0      	b.n	800e622 <_svfiprintf_r+0x192>
 800e640:	ab03      	add	r3, sp, #12
 800e642:	9300      	str	r3, [sp, #0]
 800e644:	462a      	mov	r2, r5
 800e646:	4b0f      	ldr	r3, [pc, #60]	; (800e684 <_svfiprintf_r+0x1f4>)
 800e648:	a904      	add	r1, sp, #16
 800e64a:	4638      	mov	r0, r7
 800e64c:	f3af 8000 	nop.w
 800e650:	1c42      	adds	r2, r0, #1
 800e652:	4606      	mov	r6, r0
 800e654:	d1d6      	bne.n	800e604 <_svfiprintf_r+0x174>
 800e656:	89ab      	ldrh	r3, [r5, #12]
 800e658:	065b      	lsls	r3, r3, #25
 800e65a:	f53f af2d 	bmi.w	800e4b8 <_svfiprintf_r+0x28>
 800e65e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e660:	b01d      	add	sp, #116	; 0x74
 800e662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e666:	ab03      	add	r3, sp, #12
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4b05      	ldr	r3, [pc, #20]	; (800e684 <_svfiprintf_r+0x1f4>)
 800e66e:	a904      	add	r1, sp, #16
 800e670:	4638      	mov	r0, r7
 800e672:	f000 f879 	bl	800e768 <_printf_i>
 800e676:	e7eb      	b.n	800e650 <_svfiprintf_r+0x1c0>
 800e678:	0801e0b4 	.word	0x0801e0b4
 800e67c:	0801e0be 	.word	0x0801e0be
 800e680:	00000000 	.word	0x00000000
 800e684:	0800e3dd 	.word	0x0800e3dd
 800e688:	0801e0ba 	.word	0x0801e0ba

0800e68c <_printf_common>:
 800e68c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e690:	4616      	mov	r6, r2
 800e692:	4699      	mov	r9, r3
 800e694:	688a      	ldr	r2, [r1, #8]
 800e696:	690b      	ldr	r3, [r1, #16]
 800e698:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e69c:	4293      	cmp	r3, r2
 800e69e:	bfb8      	it	lt
 800e6a0:	4613      	movlt	r3, r2
 800e6a2:	6033      	str	r3, [r6, #0]
 800e6a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e6a8:	4607      	mov	r7, r0
 800e6aa:	460c      	mov	r4, r1
 800e6ac:	b10a      	cbz	r2, 800e6b2 <_printf_common+0x26>
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	6033      	str	r3, [r6, #0]
 800e6b2:	6823      	ldr	r3, [r4, #0]
 800e6b4:	0699      	lsls	r1, r3, #26
 800e6b6:	bf42      	ittt	mi
 800e6b8:	6833      	ldrmi	r3, [r6, #0]
 800e6ba:	3302      	addmi	r3, #2
 800e6bc:	6033      	strmi	r3, [r6, #0]
 800e6be:	6825      	ldr	r5, [r4, #0]
 800e6c0:	f015 0506 	ands.w	r5, r5, #6
 800e6c4:	d106      	bne.n	800e6d4 <_printf_common+0x48>
 800e6c6:	f104 0a19 	add.w	sl, r4, #25
 800e6ca:	68e3      	ldr	r3, [r4, #12]
 800e6cc:	6832      	ldr	r2, [r6, #0]
 800e6ce:	1a9b      	subs	r3, r3, r2
 800e6d0:	42ab      	cmp	r3, r5
 800e6d2:	dc26      	bgt.n	800e722 <_printf_common+0x96>
 800e6d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e6d8:	1e13      	subs	r3, r2, #0
 800e6da:	6822      	ldr	r2, [r4, #0]
 800e6dc:	bf18      	it	ne
 800e6de:	2301      	movne	r3, #1
 800e6e0:	0692      	lsls	r2, r2, #26
 800e6e2:	d42b      	bmi.n	800e73c <_printf_common+0xb0>
 800e6e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	4638      	mov	r0, r7
 800e6ec:	47c0      	blx	r8
 800e6ee:	3001      	adds	r0, #1
 800e6f0:	d01e      	beq.n	800e730 <_printf_common+0xa4>
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	6922      	ldr	r2, [r4, #16]
 800e6f6:	f003 0306 	and.w	r3, r3, #6
 800e6fa:	2b04      	cmp	r3, #4
 800e6fc:	bf02      	ittt	eq
 800e6fe:	68e5      	ldreq	r5, [r4, #12]
 800e700:	6833      	ldreq	r3, [r6, #0]
 800e702:	1aed      	subeq	r5, r5, r3
 800e704:	68a3      	ldr	r3, [r4, #8]
 800e706:	bf0c      	ite	eq
 800e708:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e70c:	2500      	movne	r5, #0
 800e70e:	4293      	cmp	r3, r2
 800e710:	bfc4      	itt	gt
 800e712:	1a9b      	subgt	r3, r3, r2
 800e714:	18ed      	addgt	r5, r5, r3
 800e716:	2600      	movs	r6, #0
 800e718:	341a      	adds	r4, #26
 800e71a:	42b5      	cmp	r5, r6
 800e71c:	d11a      	bne.n	800e754 <_printf_common+0xc8>
 800e71e:	2000      	movs	r0, #0
 800e720:	e008      	b.n	800e734 <_printf_common+0xa8>
 800e722:	2301      	movs	r3, #1
 800e724:	4652      	mov	r2, sl
 800e726:	4649      	mov	r1, r9
 800e728:	4638      	mov	r0, r7
 800e72a:	47c0      	blx	r8
 800e72c:	3001      	adds	r0, #1
 800e72e:	d103      	bne.n	800e738 <_printf_common+0xac>
 800e730:	f04f 30ff 	mov.w	r0, #4294967295
 800e734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e738:	3501      	adds	r5, #1
 800e73a:	e7c6      	b.n	800e6ca <_printf_common+0x3e>
 800e73c:	18e1      	adds	r1, r4, r3
 800e73e:	1c5a      	adds	r2, r3, #1
 800e740:	2030      	movs	r0, #48	; 0x30
 800e742:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e746:	4422      	add	r2, r4
 800e748:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e74c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e750:	3302      	adds	r3, #2
 800e752:	e7c7      	b.n	800e6e4 <_printf_common+0x58>
 800e754:	2301      	movs	r3, #1
 800e756:	4622      	mov	r2, r4
 800e758:	4649      	mov	r1, r9
 800e75a:	4638      	mov	r0, r7
 800e75c:	47c0      	blx	r8
 800e75e:	3001      	adds	r0, #1
 800e760:	d0e6      	beq.n	800e730 <_printf_common+0xa4>
 800e762:	3601      	adds	r6, #1
 800e764:	e7d9      	b.n	800e71a <_printf_common+0x8e>
	...

0800e768 <_printf_i>:
 800e768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e76c:	7e0f      	ldrb	r7, [r1, #24]
 800e76e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e770:	2f78      	cmp	r7, #120	; 0x78
 800e772:	4691      	mov	r9, r2
 800e774:	4680      	mov	r8, r0
 800e776:	460c      	mov	r4, r1
 800e778:	469a      	mov	sl, r3
 800e77a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e77e:	d807      	bhi.n	800e790 <_printf_i+0x28>
 800e780:	2f62      	cmp	r7, #98	; 0x62
 800e782:	d80a      	bhi.n	800e79a <_printf_i+0x32>
 800e784:	2f00      	cmp	r7, #0
 800e786:	f000 80d4 	beq.w	800e932 <_printf_i+0x1ca>
 800e78a:	2f58      	cmp	r7, #88	; 0x58
 800e78c:	f000 80c0 	beq.w	800e910 <_printf_i+0x1a8>
 800e790:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e794:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e798:	e03a      	b.n	800e810 <_printf_i+0xa8>
 800e79a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e79e:	2b15      	cmp	r3, #21
 800e7a0:	d8f6      	bhi.n	800e790 <_printf_i+0x28>
 800e7a2:	a101      	add	r1, pc, #4	; (adr r1, 800e7a8 <_printf_i+0x40>)
 800e7a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e7a8:	0800e801 	.word	0x0800e801
 800e7ac:	0800e815 	.word	0x0800e815
 800e7b0:	0800e791 	.word	0x0800e791
 800e7b4:	0800e791 	.word	0x0800e791
 800e7b8:	0800e791 	.word	0x0800e791
 800e7bc:	0800e791 	.word	0x0800e791
 800e7c0:	0800e815 	.word	0x0800e815
 800e7c4:	0800e791 	.word	0x0800e791
 800e7c8:	0800e791 	.word	0x0800e791
 800e7cc:	0800e791 	.word	0x0800e791
 800e7d0:	0800e791 	.word	0x0800e791
 800e7d4:	0800e919 	.word	0x0800e919
 800e7d8:	0800e841 	.word	0x0800e841
 800e7dc:	0800e8d3 	.word	0x0800e8d3
 800e7e0:	0800e791 	.word	0x0800e791
 800e7e4:	0800e791 	.word	0x0800e791
 800e7e8:	0800e93b 	.word	0x0800e93b
 800e7ec:	0800e791 	.word	0x0800e791
 800e7f0:	0800e841 	.word	0x0800e841
 800e7f4:	0800e791 	.word	0x0800e791
 800e7f8:	0800e791 	.word	0x0800e791
 800e7fc:	0800e8db 	.word	0x0800e8db
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	1d1a      	adds	r2, r3, #4
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	602a      	str	r2, [r5, #0]
 800e808:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e80c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e810:	2301      	movs	r3, #1
 800e812:	e09f      	b.n	800e954 <_printf_i+0x1ec>
 800e814:	6820      	ldr	r0, [r4, #0]
 800e816:	682b      	ldr	r3, [r5, #0]
 800e818:	0607      	lsls	r7, r0, #24
 800e81a:	f103 0104 	add.w	r1, r3, #4
 800e81e:	6029      	str	r1, [r5, #0]
 800e820:	d501      	bpl.n	800e826 <_printf_i+0xbe>
 800e822:	681e      	ldr	r6, [r3, #0]
 800e824:	e003      	b.n	800e82e <_printf_i+0xc6>
 800e826:	0646      	lsls	r6, r0, #25
 800e828:	d5fb      	bpl.n	800e822 <_printf_i+0xba>
 800e82a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e82e:	2e00      	cmp	r6, #0
 800e830:	da03      	bge.n	800e83a <_printf_i+0xd2>
 800e832:	232d      	movs	r3, #45	; 0x2d
 800e834:	4276      	negs	r6, r6
 800e836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e83a:	485a      	ldr	r0, [pc, #360]	; (800e9a4 <_printf_i+0x23c>)
 800e83c:	230a      	movs	r3, #10
 800e83e:	e012      	b.n	800e866 <_printf_i+0xfe>
 800e840:	682b      	ldr	r3, [r5, #0]
 800e842:	6820      	ldr	r0, [r4, #0]
 800e844:	1d19      	adds	r1, r3, #4
 800e846:	6029      	str	r1, [r5, #0]
 800e848:	0605      	lsls	r5, r0, #24
 800e84a:	d501      	bpl.n	800e850 <_printf_i+0xe8>
 800e84c:	681e      	ldr	r6, [r3, #0]
 800e84e:	e002      	b.n	800e856 <_printf_i+0xee>
 800e850:	0641      	lsls	r1, r0, #25
 800e852:	d5fb      	bpl.n	800e84c <_printf_i+0xe4>
 800e854:	881e      	ldrh	r6, [r3, #0]
 800e856:	4853      	ldr	r0, [pc, #332]	; (800e9a4 <_printf_i+0x23c>)
 800e858:	2f6f      	cmp	r7, #111	; 0x6f
 800e85a:	bf0c      	ite	eq
 800e85c:	2308      	moveq	r3, #8
 800e85e:	230a      	movne	r3, #10
 800e860:	2100      	movs	r1, #0
 800e862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e866:	6865      	ldr	r5, [r4, #4]
 800e868:	60a5      	str	r5, [r4, #8]
 800e86a:	2d00      	cmp	r5, #0
 800e86c:	bfa2      	ittt	ge
 800e86e:	6821      	ldrge	r1, [r4, #0]
 800e870:	f021 0104 	bicge.w	r1, r1, #4
 800e874:	6021      	strge	r1, [r4, #0]
 800e876:	b90e      	cbnz	r6, 800e87c <_printf_i+0x114>
 800e878:	2d00      	cmp	r5, #0
 800e87a:	d04b      	beq.n	800e914 <_printf_i+0x1ac>
 800e87c:	4615      	mov	r5, r2
 800e87e:	fbb6 f1f3 	udiv	r1, r6, r3
 800e882:	fb03 6711 	mls	r7, r3, r1, r6
 800e886:	5dc7      	ldrb	r7, [r0, r7]
 800e888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e88c:	4637      	mov	r7, r6
 800e88e:	42bb      	cmp	r3, r7
 800e890:	460e      	mov	r6, r1
 800e892:	d9f4      	bls.n	800e87e <_printf_i+0x116>
 800e894:	2b08      	cmp	r3, #8
 800e896:	d10b      	bne.n	800e8b0 <_printf_i+0x148>
 800e898:	6823      	ldr	r3, [r4, #0]
 800e89a:	07de      	lsls	r6, r3, #31
 800e89c:	d508      	bpl.n	800e8b0 <_printf_i+0x148>
 800e89e:	6923      	ldr	r3, [r4, #16]
 800e8a0:	6861      	ldr	r1, [r4, #4]
 800e8a2:	4299      	cmp	r1, r3
 800e8a4:	bfde      	ittt	le
 800e8a6:	2330      	movle	r3, #48	; 0x30
 800e8a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e8ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e8b0:	1b52      	subs	r2, r2, r5
 800e8b2:	6122      	str	r2, [r4, #16]
 800e8b4:	f8cd a000 	str.w	sl, [sp]
 800e8b8:	464b      	mov	r3, r9
 800e8ba:	aa03      	add	r2, sp, #12
 800e8bc:	4621      	mov	r1, r4
 800e8be:	4640      	mov	r0, r8
 800e8c0:	f7ff fee4 	bl	800e68c <_printf_common>
 800e8c4:	3001      	adds	r0, #1
 800e8c6:	d14a      	bne.n	800e95e <_printf_i+0x1f6>
 800e8c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e8cc:	b004      	add	sp, #16
 800e8ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8d2:	6823      	ldr	r3, [r4, #0]
 800e8d4:	f043 0320 	orr.w	r3, r3, #32
 800e8d8:	6023      	str	r3, [r4, #0]
 800e8da:	4833      	ldr	r0, [pc, #204]	; (800e9a8 <_printf_i+0x240>)
 800e8dc:	2778      	movs	r7, #120	; 0x78
 800e8de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	6829      	ldr	r1, [r5, #0]
 800e8e6:	061f      	lsls	r7, r3, #24
 800e8e8:	f851 6b04 	ldr.w	r6, [r1], #4
 800e8ec:	d402      	bmi.n	800e8f4 <_printf_i+0x18c>
 800e8ee:	065f      	lsls	r7, r3, #25
 800e8f0:	bf48      	it	mi
 800e8f2:	b2b6      	uxthmi	r6, r6
 800e8f4:	07df      	lsls	r7, r3, #31
 800e8f6:	bf48      	it	mi
 800e8f8:	f043 0320 	orrmi.w	r3, r3, #32
 800e8fc:	6029      	str	r1, [r5, #0]
 800e8fe:	bf48      	it	mi
 800e900:	6023      	strmi	r3, [r4, #0]
 800e902:	b91e      	cbnz	r6, 800e90c <_printf_i+0x1a4>
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	f023 0320 	bic.w	r3, r3, #32
 800e90a:	6023      	str	r3, [r4, #0]
 800e90c:	2310      	movs	r3, #16
 800e90e:	e7a7      	b.n	800e860 <_printf_i+0xf8>
 800e910:	4824      	ldr	r0, [pc, #144]	; (800e9a4 <_printf_i+0x23c>)
 800e912:	e7e4      	b.n	800e8de <_printf_i+0x176>
 800e914:	4615      	mov	r5, r2
 800e916:	e7bd      	b.n	800e894 <_printf_i+0x12c>
 800e918:	682b      	ldr	r3, [r5, #0]
 800e91a:	6826      	ldr	r6, [r4, #0]
 800e91c:	6961      	ldr	r1, [r4, #20]
 800e91e:	1d18      	adds	r0, r3, #4
 800e920:	6028      	str	r0, [r5, #0]
 800e922:	0635      	lsls	r5, r6, #24
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	d501      	bpl.n	800e92c <_printf_i+0x1c4>
 800e928:	6019      	str	r1, [r3, #0]
 800e92a:	e002      	b.n	800e932 <_printf_i+0x1ca>
 800e92c:	0670      	lsls	r0, r6, #25
 800e92e:	d5fb      	bpl.n	800e928 <_printf_i+0x1c0>
 800e930:	8019      	strh	r1, [r3, #0]
 800e932:	2300      	movs	r3, #0
 800e934:	6123      	str	r3, [r4, #16]
 800e936:	4615      	mov	r5, r2
 800e938:	e7bc      	b.n	800e8b4 <_printf_i+0x14c>
 800e93a:	682b      	ldr	r3, [r5, #0]
 800e93c:	1d1a      	adds	r2, r3, #4
 800e93e:	602a      	str	r2, [r5, #0]
 800e940:	681d      	ldr	r5, [r3, #0]
 800e942:	6862      	ldr	r2, [r4, #4]
 800e944:	2100      	movs	r1, #0
 800e946:	4628      	mov	r0, r5
 800e948:	f7f1 fc6a 	bl	8000220 <memchr>
 800e94c:	b108      	cbz	r0, 800e952 <_printf_i+0x1ea>
 800e94e:	1b40      	subs	r0, r0, r5
 800e950:	6060      	str	r0, [r4, #4]
 800e952:	6863      	ldr	r3, [r4, #4]
 800e954:	6123      	str	r3, [r4, #16]
 800e956:	2300      	movs	r3, #0
 800e958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e95c:	e7aa      	b.n	800e8b4 <_printf_i+0x14c>
 800e95e:	6923      	ldr	r3, [r4, #16]
 800e960:	462a      	mov	r2, r5
 800e962:	4649      	mov	r1, r9
 800e964:	4640      	mov	r0, r8
 800e966:	47d0      	blx	sl
 800e968:	3001      	adds	r0, #1
 800e96a:	d0ad      	beq.n	800e8c8 <_printf_i+0x160>
 800e96c:	6823      	ldr	r3, [r4, #0]
 800e96e:	079b      	lsls	r3, r3, #30
 800e970:	d413      	bmi.n	800e99a <_printf_i+0x232>
 800e972:	68e0      	ldr	r0, [r4, #12]
 800e974:	9b03      	ldr	r3, [sp, #12]
 800e976:	4298      	cmp	r0, r3
 800e978:	bfb8      	it	lt
 800e97a:	4618      	movlt	r0, r3
 800e97c:	e7a6      	b.n	800e8cc <_printf_i+0x164>
 800e97e:	2301      	movs	r3, #1
 800e980:	4632      	mov	r2, r6
 800e982:	4649      	mov	r1, r9
 800e984:	4640      	mov	r0, r8
 800e986:	47d0      	blx	sl
 800e988:	3001      	adds	r0, #1
 800e98a:	d09d      	beq.n	800e8c8 <_printf_i+0x160>
 800e98c:	3501      	adds	r5, #1
 800e98e:	68e3      	ldr	r3, [r4, #12]
 800e990:	9903      	ldr	r1, [sp, #12]
 800e992:	1a5b      	subs	r3, r3, r1
 800e994:	42ab      	cmp	r3, r5
 800e996:	dcf2      	bgt.n	800e97e <_printf_i+0x216>
 800e998:	e7eb      	b.n	800e972 <_printf_i+0x20a>
 800e99a:	2500      	movs	r5, #0
 800e99c:	f104 0619 	add.w	r6, r4, #25
 800e9a0:	e7f5      	b.n	800e98e <_printf_i+0x226>
 800e9a2:	bf00      	nop
 800e9a4:	0801e0c5 	.word	0x0801e0c5
 800e9a8:	0801e0d6 	.word	0x0801e0d6

0800e9ac <memmove>:
 800e9ac:	4288      	cmp	r0, r1
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	eb01 0402 	add.w	r4, r1, r2
 800e9b4:	d902      	bls.n	800e9bc <memmove+0x10>
 800e9b6:	4284      	cmp	r4, r0
 800e9b8:	4623      	mov	r3, r4
 800e9ba:	d807      	bhi.n	800e9cc <memmove+0x20>
 800e9bc:	1e43      	subs	r3, r0, #1
 800e9be:	42a1      	cmp	r1, r4
 800e9c0:	d008      	beq.n	800e9d4 <memmove+0x28>
 800e9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e9c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e9ca:	e7f8      	b.n	800e9be <memmove+0x12>
 800e9cc:	4402      	add	r2, r0
 800e9ce:	4601      	mov	r1, r0
 800e9d0:	428a      	cmp	r2, r1
 800e9d2:	d100      	bne.n	800e9d6 <memmove+0x2a>
 800e9d4:	bd10      	pop	{r4, pc}
 800e9d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e9da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e9de:	e7f7      	b.n	800e9d0 <memmove+0x24>

0800e9e0 <memcpy>:
 800e9e0:	440a      	add	r2, r1
 800e9e2:	4291      	cmp	r1, r2
 800e9e4:	f100 33ff 	add.w	r3, r0, #4294967295
 800e9e8:	d100      	bne.n	800e9ec <memcpy+0xc>
 800e9ea:	4770      	bx	lr
 800e9ec:	b510      	push	{r4, lr}
 800e9ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e9f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e9f6:	4291      	cmp	r1, r2
 800e9f8:	d1f9      	bne.n	800e9ee <memcpy+0xe>
 800e9fa:	bd10      	pop	{r4, pc}

0800e9fc <_realloc_r>:
 800e9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea00:	4680      	mov	r8, r0
 800ea02:	4614      	mov	r4, r2
 800ea04:	460e      	mov	r6, r1
 800ea06:	b921      	cbnz	r1, 800ea12 <_realloc_r+0x16>
 800ea08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ea0c:	4611      	mov	r1, r2
 800ea0e:	f7ff bba9 	b.w	800e164 <_malloc_r>
 800ea12:	b92a      	cbnz	r2, 800ea20 <_realloc_r+0x24>
 800ea14:	f7ff fc96 	bl	800e344 <_free_r>
 800ea18:	4625      	mov	r5, r4
 800ea1a:	4628      	mov	r0, r5
 800ea1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea20:	f000 f81b 	bl	800ea5a <_malloc_usable_size_r>
 800ea24:	4284      	cmp	r4, r0
 800ea26:	4607      	mov	r7, r0
 800ea28:	d802      	bhi.n	800ea30 <_realloc_r+0x34>
 800ea2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ea2e:	d812      	bhi.n	800ea56 <_realloc_r+0x5a>
 800ea30:	4621      	mov	r1, r4
 800ea32:	4640      	mov	r0, r8
 800ea34:	f7ff fb96 	bl	800e164 <_malloc_r>
 800ea38:	4605      	mov	r5, r0
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	d0ed      	beq.n	800ea1a <_realloc_r+0x1e>
 800ea3e:	42bc      	cmp	r4, r7
 800ea40:	4622      	mov	r2, r4
 800ea42:	4631      	mov	r1, r6
 800ea44:	bf28      	it	cs
 800ea46:	463a      	movcs	r2, r7
 800ea48:	f7ff ffca 	bl	800e9e0 <memcpy>
 800ea4c:	4631      	mov	r1, r6
 800ea4e:	4640      	mov	r0, r8
 800ea50:	f7ff fc78 	bl	800e344 <_free_r>
 800ea54:	e7e1      	b.n	800ea1a <_realloc_r+0x1e>
 800ea56:	4635      	mov	r5, r6
 800ea58:	e7df      	b.n	800ea1a <_realloc_r+0x1e>

0800ea5a <_malloc_usable_size_r>:
 800ea5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea5e:	1f18      	subs	r0, r3, #4
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	bfbc      	itt	lt
 800ea64:	580b      	ldrlt	r3, [r1, r0]
 800ea66:	18c0      	addlt	r0, r0, r3
 800ea68:	4770      	bx	lr
	...

0800ea6c <_init>:
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6e:	bf00      	nop
 800ea70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea72:	bc08      	pop	{r3}
 800ea74:	469e      	mov	lr, r3
 800ea76:	4770      	bx	lr

0800ea78 <_fini>:
 800ea78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea7a:	bf00      	nop
 800ea7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7e:	bc08      	pop	{r3}
 800ea80:	469e      	mov	lr, r3
 800ea82:	4770      	bx	lr
