
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd68  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f64c  0800cf38  0800cf38  0001cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c584  0801c584  000301e8  2**0
                  CONTENTS
  4 .ARM          00000008  0801c584  0801c584  0002c584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c58c  0801c58c  000301e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c58c  0801c58c  0002c58c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c590  0801c590  0002c590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0801c594  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fac  200001e8  0801c77c  000301e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002194  0801c77c  00032194  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030218  2**0
                  CONTENTS, READONLY
 13 .debug_info   000256fb  00000000  00000000  0003025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fd7  00000000  00000000  00055956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002028  00000000  00000000  0005a930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018c0  00000000  00000000  0005c958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e07b  00000000  00000000  0005e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028633  00000000  00000000  0008c293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001075da  00000000  00000000  000b48c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008e60  00000000  00000000  001bbea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001c4d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cf20 	.word	0x0800cf20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800cf20 	.word	0x0800cf20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <save_can_rx_data>:
volatile uint16_t back_left_wheel_speed = 0;


/************ CAN RX ************/

void save_can_rx_data(CAN_RxHeaderTypeDef RxHeader, uint8_t RxData[]) {
 80005ac:	b084      	sub	sp, #16
 80005ae:	b580      	push	{r7, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	f107 0c10 	add.w	ip, r7, #16
 80005b8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // gets message and updates values
	switch (RxHeader.StdId) {
 80005bc:	693b      	ldr	r3, [r7, #16]
 80005be:	f240 4273 	movw	r2, #1139	; 0x473
 80005c2:	4293      	cmp	r3, r2
 80005c4:	f200 80be 	bhi.w	8000744 <save_can_rx_data+0x198>
 80005c8:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 80005cc:	d218      	bcs.n	8000600 <save_can_rx_data+0x54>
 80005ce:	f240 3287 	movw	r2, #903	; 0x387
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d04f      	beq.n	8000676 <save_can_rx_data+0xca>
 80005d6:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 80005da:	f080 80b3 	bcs.w	8000744 <save_can_rx_data+0x198>
 80005de:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80005e2:	d01d      	beq.n	8000620 <save_can_rx_data+0x74>
 80005e4:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 80005e8:	f200 80ac 	bhi.w	8000744 <save_can_rx_data+0x198>
 80005ec:	2bab      	cmp	r3, #171	; 0xab
 80005ee:	d047      	beq.n	8000680 <save_can_rx_data+0xd4>
 80005f0:	2bab      	cmp	r3, #171	; 0xab
 80005f2:	f200 80a7 	bhi.w	8000744 <save_can_rx_data+0x198>
 80005f6:	2ba7      	cmp	r3, #167	; 0xa7
 80005f8:	d019      	beq.n	800062e <save_can_rx_data+0x82>
 80005fa:	2baa      	cmp	r3, #170	; 0xaa
 80005fc:	d02a      	beq.n	8000654 <save_can_rx_data+0xa8>
			back_left_wheel_speed = (RxData[0] << 8) ;
			back_left_wheel_speed += RxData[1];
			break;
		default:
			// no valid input received
			break;
 80005fe:	e0a1      	b.n	8000744 <save_can_rx_data+0x198>
	switch (RxHeader.StdId) {
 8000600:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000604:	2b03      	cmp	r3, #3
 8000606:	f200 809d 	bhi.w	8000744 <save_can_rx_data+0x198>
 800060a:	a201      	add	r2, pc, #4	; (adr r2, 8000610 <save_can_rx_data+0x64>)
 800060c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000610:	080006d3 	.word	0x080006d3
 8000614:	080006ad 	.word	0x080006ad
 8000618:	0800071f 	.word	0x0800071f
 800061c:	080006f9 	.word	0x080006f9
			PACK_TEMP = RxData[0];
 8000620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	4b4b      	ldr	r3, [pc, #300]	; (8000754 <save_can_rx_data+0x1a8>)
 8000626:	701a      	strb	r2, [r3, #0]
			temp_attenuate();
 8000628:	f001 f8ea 	bl	8001800 <temp_attenuate>
			break;
 800062c:	e08b      	b.n	8000746 <save_can_rx_data+0x19a>
			capacitor_volt = (RxData[0] << 8); // upper bits
 800062e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	b29b      	uxth	r3, r3
 8000634:	021b      	lsls	r3, r3, #8
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b47      	ldr	r3, [pc, #284]	; (8000758 <save_can_rx_data+0x1ac>)
 800063a:	801a      	strh	r2, [r3, #0]
			capacitor_volt += RxData[1]; // lower bits
 800063c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800063e:	3301      	adds	r3, #1
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b44      	ldr	r3, [pc, #272]	; (8000758 <save_can_rx_data+0x1ac>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b29b      	uxth	r3, r3
 800064a:	4413      	add	r3, r2
 800064c:	b29a      	uxth	r2, r3
 800064e:	4b42      	ldr	r3, [pc, #264]	; (8000758 <save_can_rx_data+0x1ac>)
 8000650:	801a      	strh	r2, [r3, #0]
			break;
 8000652:	e078      	b.n	8000746 <save_can_rx_data+0x19a>
			mc_lockout = RxData[6] & 0b1000000;
 8000654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000656:	3306      	adds	r3, #6
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b3e      	ldr	r3, [pc, #248]	; (800075c <save_can_rx_data+0x1b0>)
 8000662:	701a      	strb	r2, [r3, #0]
			mc_enabled = RxData[6] & 0b1;
 8000664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000666:	3306      	adds	r3, #6
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	b2da      	uxtb	r2, r3
 8000670:	4b3b      	ldr	r3, [pc, #236]	; (8000760 <save_can_rx_data+0x1b4>)
 8000672:	701a      	strb	r2, [r3, #0]
			break;
 8000674:	e067      	b.n	8000746 <save_can_rx_data+0x19a>
			shutdown_flags = RxData[2];
 8000676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000678:	789a      	ldrb	r2, [r3, #2]
 800067a:	4b3a      	ldr	r3, [pc, #232]	; (8000764 <save_can_rx_data+0x1b8>)
 800067c:	701a      	strb	r2, [r3, #0]
			break;
 800067e:	e062      	b.n	8000746 <save_can_rx_data+0x19a>
			for (uint8_t i = 0; i < 8; i++) {
 8000680:	2300      	movs	r3, #0
 8000682:	71fb      	strb	r3, [r7, #7]
 8000684:	e00f      	b.n	80006a6 <save_can_rx_data+0xfa>
				if (RxData[i] > 0) {
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d003      	beq.n	800069a <save_can_rx_data+0xee>
					mc_fault = 1;
 8000692:	4b35      	ldr	r3, [pc, #212]	; (8000768 <save_can_rx_data+0x1bc>)
 8000694:	2201      	movs	r2, #1
 8000696:	701a      	strb	r2, [r3, #0]
					break;
 8000698:	e008      	b.n	80006ac <save_can_rx_data+0x100>
					mc_fault = 0;
 800069a:	4b33      	ldr	r3, [pc, #204]	; (8000768 <save_can_rx_data+0x1bc>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	3301      	adds	r3, #1
 80006a4:	71fb      	strb	r3, [r7, #7]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	d9ec      	bls.n	8000686 <save_can_rx_data+0xda>
			front_right_wheel_speed = (RxData[0] << 8) ;
 80006ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	021b      	lsls	r3, r3, #8
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	4b2d      	ldr	r3, [pc, #180]	; (800076c <save_can_rx_data+0x1c0>)
 80006b8:	801a      	strh	r2, [r3, #0]
			front_right_wheel_speed += RxData[1];
 80006ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006bc:	3301      	adds	r3, #1
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b2a      	ldr	r3, [pc, #168]	; (800076c <save_can_rx_data+0x1c0>)
 80006c4:	881b      	ldrh	r3, [r3, #0]
 80006c6:	b29b      	uxth	r3, r3
 80006c8:	4413      	add	r3, r2
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <save_can_rx_data+0x1c0>)
 80006ce:	801a      	strh	r2, [r3, #0]
			break;
 80006d0:	e039      	b.n	8000746 <save_can_rx_data+0x19a>
			front_left_wheel_speed = (RxData[0] << 8) ;
 80006d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	b29b      	uxth	r3, r3
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	b29a      	uxth	r2, r3
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <save_can_rx_data+0x1c4>)
 80006de:	801a      	strh	r2, [r3, #0]
			front_left_wheel_speed += RxData[1];
 80006e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006e2:	3301      	adds	r3, #1
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	4b21      	ldr	r3, [pc, #132]	; (8000770 <save_can_rx_data+0x1c4>)
 80006ea:	881b      	ldrh	r3, [r3, #0]
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	4413      	add	r3, r2
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <save_can_rx_data+0x1c4>)
 80006f4:	801a      	strh	r2, [r3, #0]
			break;
 80006f6:	e026      	b.n	8000746 <save_can_rx_data+0x19a>
			back_right_wheel_speed = (RxData[0] << 8) ;
 80006f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	b29b      	uxth	r3, r3
 80006fe:	021b      	lsls	r3, r3, #8
 8000700:	b29a      	uxth	r2, r3
 8000702:	4b1c      	ldr	r3, [pc, #112]	; (8000774 <save_can_rx_data+0x1c8>)
 8000704:	801a      	strh	r2, [r3, #0]
			back_right_wheel_speed += RxData[1];
 8000706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000708:	3301      	adds	r3, #1
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b29a      	uxth	r2, r3
 800070e:	4b19      	ldr	r3, [pc, #100]	; (8000774 <save_can_rx_data+0x1c8>)
 8000710:	881b      	ldrh	r3, [r3, #0]
 8000712:	b29b      	uxth	r3, r3
 8000714:	4413      	add	r3, r2
 8000716:	b29a      	uxth	r2, r3
 8000718:	4b16      	ldr	r3, [pc, #88]	; (8000774 <save_can_rx_data+0x1c8>)
 800071a:	801a      	strh	r2, [r3, #0]
			break;
 800071c:	e013      	b.n	8000746 <save_can_rx_data+0x19a>
			back_left_wheel_speed = (RxData[0] << 8) ;
 800071e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	021b      	lsls	r3, r3, #8
 8000726:	b29a      	uxth	r2, r3
 8000728:	4b13      	ldr	r3, [pc, #76]	; (8000778 <save_can_rx_data+0x1cc>)
 800072a:	801a      	strh	r2, [r3, #0]
			back_left_wheel_speed += RxData[1];
 800072c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800072e:	3301      	adds	r3, #1
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	b29a      	uxth	r2, r3
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <save_can_rx_data+0x1cc>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	b29b      	uxth	r3, r3
 800073a:	4413      	add	r3, r2
 800073c:	b29a      	uxth	r2, r3
 800073e:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <save_can_rx_data+0x1cc>)
 8000740:	801a      	strh	r2, [r3, #0]
			break;
 8000742:	e000      	b.n	8000746 <save_can_rx_data+0x19a>
			break;
 8000744:	bf00      	nop
	}

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000750:	b004      	add	sp, #16
 8000752:	4770      	bx	lr
 8000754:	20000208 	.word	0x20000208
 8000758:	20000206 	.word	0x20000206
 800075c:	20000204 	.word	0x20000204
 8000760:	20000205 	.word	0x20000205
 8000764:	20000000 	.word	0x20000000
 8000768:	20000209 	.word	0x20000209
 800076c:	2000020a 	.word	0x2000020a
 8000770:	2000020c 	.word	0x2000020c
 8000774:	2000020e 	.word	0x2000020e
 8000778:	20000210 	.word	0x20000210

0800077c <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
	SSD1963_Init();
 8000780:	f002 f986 	bl	8002a90 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 8000784:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000788:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800078c:	490b      	ldr	r1, [pc, #44]	; (80007bc <Display_Init+0x40>)
 800078e:	480c      	ldr	r0, [pc, #48]	; (80007c0 <Display_Init+0x44>)
 8000790:	f001 fc02 	bl	8001f98 <UG_Init>

	UG_FontSetVSpace(0);
 8000794:	2000      	movs	r0, #0
 8000796:	f001 fea3 	bl	80024e0 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 800079a:	2000      	movs	r0, #0
 800079c:	f001 fe8c 	bl	80024b8 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80007a0:	4908      	ldr	r1, [pc, #32]	; (80007c4 <Display_Init+0x48>)
 80007a2:	2001      	movs	r0, #1
 80007a4:	f002 f948 	bl	8002a38 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 80007a8:	4907      	ldr	r1, [pc, #28]	; (80007c8 <Display_Init+0x4c>)
 80007aa:	2000      	movs	r0, #0
 80007ac:	f002 f944 	bl	8002a38 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <Display_Init+0x50>)
 80007b2:	2003      	movs	r0, #3
 80007b4:	f002 f940 	bl	8002a38 <UG_DriverRegister>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	08002c53 	.word	0x08002c53
 80007c0:	20000244 	.word	0x20000244
 80007c4:	08002cdd 	.word	0x08002cdd
 80007c8:	08002da7 	.word	0x08002da7
 80007cc:	08002e5b 	.word	0x08002e5b

080007d0 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 80007d6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007da:	f001 fc89 	bl	80020f0 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 80007de:	231f      	movs	r3, #31
 80007e0:	9300      	str	r3, [sp, #0]
 80007e2:	f44f 7388 	mov.w	r3, #272	; 0x110
 80007e6:	220a      	movs	r2, #10
 80007e8:	f44f 7183 	mov.w	r1, #262	; 0x106
 80007ec:	2000      	movs	r0, #0
 80007ee:	f001 fca1 	bl	8002134 <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 80007f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80007f6:	9300      	str	r3, [sp, #0]
 80007f8:	230a      	movs	r3, #10
 80007fa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80007fe:	2100      	movs	r1, #0
 8000800:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8000804:	f001 fc96 	bl	8002134 <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8000808:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000812:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000816:	f44f 7183 	mov.w	r1, #262	; 0x106
 800081a:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800081e:	f001 fc89 	bl	8002134 <UG_FillFrame>
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <Display_DriveTemplate>:
    // setup textbox configs

}

void Display_DriveTemplate()
{
 8000828:	b5b0      	push	{r4, r5, r7, lr}
 800082a:	af00      	add	r7, sp, #0
    debug_mode = false;
 800082c:	4b43      	ldr	r3, [pc, #268]	; (800093c <Display_DriveTemplate+0x114>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

    // clear screen
    UG_FillScreen(C_BLACK);
 8000832:	2000      	movs	r0, #0
 8000834:	f001 fc5c 	bl	80020f0 <UG_FillScreen>

    // draw labels
    UG_PutString(68, 10, "PACK SOC");
 8000838:	4a41      	ldr	r2, [pc, #260]	; (8000940 <Display_DriveTemplate+0x118>)
 800083a:	210a      	movs	r1, #10
 800083c:	2044      	movs	r0, #68	; 0x44
 800083e:	f001 fce9 	bl	8002214 <UG_PutString>
    UG_PutString(297, 10, "MAX PACK T");
 8000842:	4a40      	ldr	r2, [pc, #256]	; (8000944 <Display_DriveTemplate+0x11c>)
 8000844:	210a      	movs	r1, #10
 8000846:	f240 1029 	movw	r0, #297	; 0x129
 800084a:	f001 fce3 	bl	8002214 <UG_PutString>
    UG_PutString(30, 180, "STATE:");
 800084e:	4a3e      	ldr	r2, [pc, #248]	; (8000948 <Display_DriveTemplate+0x120>)
 8000850:	21b4      	movs	r1, #180	; 0xb4
 8000852:	201e      	movs	r0, #30
 8000854:	f001 fcde 	bl	8002214 <UG_PutString>
    UG_PutString(275, 180, "GLV V:");
 8000858:	4a3c      	ldr	r2, [pc, #240]	; (800094c <Display_DriveTemplate+0x124>)
 800085a:	21b4      	movs	r1, #180	; 0xb4
 800085c:	f240 1013 	movw	r0, #275	; 0x113
 8000860:	f001 fcd8 	bl	8002214 <UG_PutString>

    // setup textbox configs
    soc_box.box_x1 = 30;
 8000864:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <Display_DriveTemplate+0x128>)
 8000866:	221e      	movs	r2, #30
 8000868:	801a      	strh	r2, [r3, #0]
    soc_box.box_y1 = 35;
 800086a:	4b39      	ldr	r3, [pc, #228]	; (8000950 <Display_DriveTemplate+0x128>)
 800086c:	2223      	movs	r2, #35	; 0x23
 800086e:	805a      	strh	r2, [r3, #2]
    soc_box.box_x2 = 210;
 8000870:	4b37      	ldr	r3, [pc, #220]	; (8000950 <Display_DriveTemplate+0x128>)
 8000872:	22d2      	movs	r2, #210	; 0xd2
 8000874:	809a      	strh	r2, [r3, #4]
    soc_box.box_y2 = 170;
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <Display_DriveTemplate+0x128>)
 8000878:	22aa      	movs	r2, #170	; 0xaa
 800087a:	80da      	strh	r2, [r3, #6]
    soc_box.font = FONT_32X53;
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <Display_DriveTemplate+0x128>)
 800087e:	4a35      	ldr	r2, [pc, #212]	; (8000954 <Display_DriveTemplate+0x12c>)
 8000880:	f103 0410 	add.w	r4, r3, #16
 8000884:	4615      	mov	r5, r2
 8000886:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000888:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088a:	682b      	ldr	r3, [r5, #0]
 800088c:	6023      	str	r3, [r4, #0]
    soc_box.last_color = C_BLACK;  // force box redraw
 800088e:	4b30      	ldr	r3, [pc, #192]	; (8000950 <Display_DriveTemplate+0x128>)
 8000890:	2200      	movs	r2, #0
 8000892:	849a      	strh	r2, [r3, #36]	; 0x24
    soc_box.last_value = 255;
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <Display_DriveTemplate+0x128>)
 8000896:	22ff      	movs	r2, #255	; 0xff
 8000898:	84da      	strh	r2, [r3, #38]	; 0x26

    bms_temp_box.box_x1 = 270;
 800089a:	4b2f      	ldr	r3, [pc, #188]	; (8000958 <Display_DriveTemplate+0x130>)
 800089c:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80008a0:	801a      	strh	r2, [r3, #0]
	bms_temp_box.box_y1 = 35;
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <Display_DriveTemplate+0x130>)
 80008a4:	2223      	movs	r2, #35	; 0x23
 80008a6:	805a      	strh	r2, [r3, #2]
	bms_temp_box.box_x2 = 450;
 80008a8:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <Display_DriveTemplate+0x130>)
 80008aa:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80008ae:	809a      	strh	r2, [r3, #4]
	bms_temp_box.box_y2 = 170;
 80008b0:	4b29      	ldr	r3, [pc, #164]	; (8000958 <Display_DriveTemplate+0x130>)
 80008b2:	22aa      	movs	r2, #170	; 0xaa
 80008b4:	80da      	strh	r2, [r3, #6]
	bms_temp_box.font = FONT_32X53;
 80008b6:	4b28      	ldr	r3, [pc, #160]	; (8000958 <Display_DriveTemplate+0x130>)
 80008b8:	4a26      	ldr	r2, [pc, #152]	; (8000954 <Display_DriveTemplate+0x12c>)
 80008ba:	f103 0410 	add.w	r4, r3, #16
 80008be:	4615      	mov	r5, r2
 80008c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c4:	682b      	ldr	r3, [r5, #0]
 80008c6:	6023      	str	r3, [r4, #0]
	bms_temp_box.last_color = C_BLACK;  // force box redraw
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <Display_DriveTemplate+0x130>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	849a      	strh	r2, [r3, #36]	; 0x24
	bms_temp_box.last_value = 255;
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <Display_DriveTemplate+0x130>)
 80008d0:	22ff      	movs	r2, #255	; 0xff
 80008d2:	84da      	strh	r2, [r3, #38]	; 0x26

	state_box.box_x1 = 30;
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <Display_DriveTemplate+0x134>)
 80008d6:	221e      	movs	r2, #30
 80008d8:	801a      	strh	r2, [r3, #0]
	state_box.box_y1 = 200;
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <Display_DriveTemplate+0x134>)
 80008dc:	22c8      	movs	r2, #200	; 0xc8
 80008de:	805a      	strh	r2, [r3, #2]
	state_box.box_x2 = 210;
 80008e0:	4b1e      	ldr	r3, [pc, #120]	; (800095c <Display_DriveTemplate+0x134>)
 80008e2:	22d2      	movs	r2, #210	; 0xd2
 80008e4:	809a      	strh	r2, [r3, #4]
	state_box.box_y2 = 230;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <Display_DriveTemplate+0x134>)
 80008e8:	22e6      	movs	r2, #230	; 0xe6
 80008ea:	80da      	strh	r2, [r3, #6]
	state_box.font = FONT_12X16;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <Display_DriveTemplate+0x134>)
 80008ee:	4a1c      	ldr	r2, [pc, #112]	; (8000960 <Display_DriveTemplate+0x138>)
 80008f0:	f103 0410 	add.w	r4, r3, #16
 80008f4:	4615      	mov	r5, r2
 80008f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008fa:	682b      	ldr	r3, [r5, #0]
 80008fc:	6023      	str	r3, [r4, #0]
	state_box.last_color = C_BLACK;  // force box redraw
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <Display_DriveTemplate+0x134>)
 8000900:	2200      	movs	r2, #0
 8000902:	849a      	strh	r2, [r3, #36]	; 0x24

	glv_v_box.box_x1 = 270;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <Display_DriveTemplate+0x13c>)
 8000906:	f44f 7287 	mov.w	r2, #270	; 0x10e
 800090a:	801a      	strh	r2, [r3, #0]
	glv_v_box.box_y1 = 200;
 800090c:	4b15      	ldr	r3, [pc, #84]	; (8000964 <Display_DriveTemplate+0x13c>)
 800090e:	22c8      	movs	r2, #200	; 0xc8
 8000910:	805a      	strh	r2, [r3, #2]
	glv_v_box.box_x2 = 450;
 8000912:	4b14      	ldr	r3, [pc, #80]	; (8000964 <Display_DriveTemplate+0x13c>)
 8000914:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8000918:	809a      	strh	r2, [r3, #4]
	glv_v_box.box_y2 = 230;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <Display_DriveTemplate+0x13c>)
 800091c:	22e6      	movs	r2, #230	; 0xe6
 800091e:	80da      	strh	r2, [r3, #6]
	glv_v_box.font = FONT_12X16;
 8000920:	4b10      	ldr	r3, [pc, #64]	; (8000964 <Display_DriveTemplate+0x13c>)
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <Display_DriveTemplate+0x138>)
 8000924:	f103 0410 	add.w	r4, r3, #16
 8000928:	4615      	mov	r5, r2
 800092a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800092c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800092e:	682b      	ldr	r3, [r5, #0]
 8000930:	6023      	str	r3, [r4, #0]
	glv_v_box.last_color = C_BLACK;  // force box redraw
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <Display_DriveTemplate+0x13c>)
 8000934:	2200      	movs	r2, #0
 8000936:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000938:	bf00      	nop
 800093a:	bdb0      	pop	{r4, r5, r7, pc}
 800093c:	20000240 	.word	0x20000240
 8000940:	0800cf8c 	.word	0x0800cf8c
 8000944:	0800cf98 	.word	0x0800cf98
 8000948:	0800cf50 	.word	0x0800cf50
 800094c:	0800cf60 	.word	0x0800cf60
 8000950:	20000004 	.word	0x20000004
 8000954:	0801c534 	.word	0x0801c534
 8000958:	20000030 	.word	0x20000030
 800095c:	20000214 	.word	0x20000214
 8000960:	0801c520 	.word	0x0801c520
 8000964:	2000005c 	.word	0x2000005c

08000968 <Display_Update>:

void Display_Update()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
	static uint8_t soc = 0;
	static uint32_t glv_v = 0;
	soc = soc+1 ;
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <Display_Update+0x4c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	3301      	adds	r3, #1
 8000972:	b2da      	uxtb	r2, r3
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <Display_Update+0x4c>)
 8000976:	701a      	strb	r2, [r3, #0]
	glv_v+=1;
 8000978:	4b0f      	ldr	r3, [pc, #60]	; (80009b8 <Display_Update+0x50>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3301      	adds	r3, #1
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <Display_Update+0x50>)
 8000980:	6013      	str	r3, [r2, #0]

    draw_soc(soc);
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <Display_Update+0x4c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	b29b      	uxth	r3, r3
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f817 	bl	80009bc <draw_soc>
    draw_bms_temp(soc);
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <Display_Update+0x4c>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	b29b      	uxth	r3, r3
 8000994:	4618      	mov	r0, r3
 8000996:	f000 f821 	bl	80009dc <draw_bms_temp>
    draw_state(soc, 0);
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <Display_Update+0x4c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2100      	movs	r1, #0
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f82b 	bl	80009fc <draw_state>
    draw_glv_v(glv_v);
 80009a6:	4b04      	ldr	r3, [pc, #16]	; (80009b8 <Display_Update+0x50>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4618      	mov	r0, r3
 80009ac:	f000 f9e0 	bl	8000d70 <draw_glv_v>
}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200002c8 	.word	0x200002c8
 80009b8:	200002cc 	.word	0x200002cc

080009bc <draw_soc>:


void draw_soc(uint16_t soc)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&soc_box, soc);
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4803      	ldr	r0, [pc, #12]	; (80009d8 <draw_soc+0x1c>)
 80009cc:	f000 fa50 	bl	8000e70 <draw_value_textbox>
}
 80009d0:	bf00      	nop
 80009d2:	3708      	adds	r7, #8
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000004 	.word	0x20000004

080009dc <draw_bms_temp>:

void draw_bms_temp(uint16_t temp)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&bms_temp_box, temp);
 80009e6:	88fb      	ldrh	r3, [r7, #6]
 80009e8:	4619      	mov	r1, r3
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <draw_bms_temp+0x1c>)
 80009ec:	f000 fa40 	bl	8000e70 <draw_value_textbox>
}
 80009f0:	bf00      	nop
 80009f2:	3708      	adds	r7, #8
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000030 	.word	0x20000030

080009fc <draw_state>:

void draw_state(uint8_t state, uint16_t bms_status)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b088      	sub	sp, #32
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	460a      	mov	r2, r1
 8000a06:	71fb      	strb	r3, [r7, #7]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	80bb      	strh	r3, [r7, #4]
    static uint8_t last_state = 255;
    static uint16_t last_bms_status;

    if((state == last_state) && (bms_status == last_bms_status))  // skip function if value is the same
 8000a0c:	4ba9      	ldr	r3, [pc, #676]	; (8000cb4 <draw_state+0x2b8>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	79fa      	ldrb	r2, [r7, #7]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d105      	bne.n	8000a22 <draw_state+0x26>
 8000a16:	4ba8      	ldr	r3, [pc, #672]	; (8000cb8 <draw_state+0x2bc>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	88ba      	ldrh	r2, [r7, #4]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f000 819b 	beq.w	8000d58 <draw_state+0x35c>
    }

    UG_COLOR color;
    char string[15];

    switch(bms_status)  // BMS faults more important than VCU faults
 8000a22:	88bb      	ldrh	r3, [r7, #4]
 8000a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a28:	d052      	beq.n	8000ad0 <draw_state+0xd4>
 8000a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000a2e:	dc59      	bgt.n	8000ae4 <draw_state+0xe8>
 8000a30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a34:	d03f      	beq.n	8000ab6 <draw_state+0xba>
 8000a36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000a3a:	dc53      	bgt.n	8000ae4 <draw_state+0xe8>
 8000a3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a40:	d02f      	beq.n	8000aa2 <draw_state+0xa6>
 8000a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a46:	dc4d      	bgt.n	8000ae4 <draw_state+0xe8>
 8000a48:	2b40      	cmp	r3, #64	; 0x40
 8000a4a:	d020      	beq.n	8000a8e <draw_state+0x92>
 8000a4c:	2b40      	cmp	r3, #64	; 0x40
 8000a4e:	dc49      	bgt.n	8000ae4 <draw_state+0xe8>
 8000a50:	2b10      	cmp	r3, #16
 8000a52:	d012      	beq.n	8000a7a <draw_state+0x7e>
 8000a54:	2b10      	cmp	r3, #16
 8000a56:	dc45      	bgt.n	8000ae4 <draw_state+0xe8>
 8000a58:	2b02      	cmp	r3, #2
 8000a5a:	d001      	beq.n	8000a60 <draw_state+0x64>
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d141      	bne.n	8000ae4 <draw_state+0xe8>
    {
        case PACK_TEMP_OVER:
        case PACK_TEMP_UNDER:
            color = C_RED;
 8000a60:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a64:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " BMS TEMP ");
 8000a66:	f107 030c 	add.w	r3, r7, #12
 8000a6a:	4a94      	ldr	r2, [pc, #592]	; (8000cbc <draw_state+0x2c0>)
 8000a6c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a6e:	c303      	stmia	r3!, {r0, r1}
 8000a70:	801a      	strh	r2, [r3, #0]
 8000a72:	3302      	adds	r3, #2
 8000a74:	0c12      	lsrs	r2, r2, #16
 8000a76:	701a      	strb	r2, [r3, #0]
            break;
 8000a78:	e166      	b.n	8000d48 <draw_state+0x34c>
        case LOW_SOC:
            color = C_RED;
 8000a7a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a7e:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " LOW SOC ");
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	4a8e      	ldr	r2, [pc, #568]	; (8000cc0 <draw_state+0x2c4>)
 8000a86:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a88:	c303      	stmia	r3!, {r0, r1}
 8000a8a:	801a      	strh	r2, [r3, #0]
            break;
 8000a8c:	e15c      	b.n	8000d48 <draw_state+0x34c>
        case IMBALANCE:
            color = C_RED;
 8000a8e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a92:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "IMBALANCE");
 8000a94:	f107 030c 	add.w	r3, r7, #12
 8000a98:	4a8a      	ldr	r2, [pc, #552]	; (8000cc4 <draw_state+0x2c8>)
 8000a9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a9c:	c303      	stmia	r3!, {r0, r1}
 8000a9e:	801a      	strh	r2, [r3, #0]
            break;
 8000aa0:	e152      	b.n	8000d48 <draw_state+0x34c>
        case SPI_FAULT:
            color = C_RED;
 8000aa2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000aa6:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "SPI FAULT");
 8000aa8:	f107 030c 	add.w	r3, r7, #12
 8000aac:	4a86      	ldr	r2, [pc, #536]	; (8000cc8 <draw_state+0x2cc>)
 8000aae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab0:	c303      	stmia	r3!, {r0, r1}
 8000ab2:	801a      	strh	r2, [r3, #0]
            break;
 8000ab4:	e148      	b.n	8000d48 <draw_state+0x34c>
        case CELL_VOLT_OVER:
            color = C_RED;
 8000ab6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000aba:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " OVERVOLT ");
 8000abc:	f107 030c 	add.w	r3, r7, #12
 8000ac0:	4a82      	ldr	r2, [pc, #520]	; (8000ccc <draw_state+0x2d0>)
 8000ac2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac4:	c303      	stmia	r3!, {r0, r1}
 8000ac6:	801a      	strh	r2, [r3, #0]
 8000ac8:	3302      	adds	r3, #2
 8000aca:	0c12      	lsrs	r2, r2, #16
 8000acc:	701a      	strb	r2, [r3, #0]
            break;
 8000ace:	e13b      	b.n	8000d48 <draw_state+0x34c>
        case CELL_VOLT_UNDER:
            color = C_RED;
 8000ad0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ad4:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "UNDERVOLT");
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	4a7d      	ldr	r2, [pc, #500]	; (8000cd0 <draw_state+0x2d4>)
 8000adc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ade:	c303      	stmia	r3!, {r0, r1}
 8000ae0:	801a      	strh	r2, [r3, #0]
            break;
 8000ae2:	e131      	b.n	8000d48 <draw_state+0x34c>
        default:
            // check fault bit
            if (state & 0x80) {
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f280 80be 	bge.w	8000c6a <draw_state+0x26e>
                // *************** FAULTS ***************
                uint8_t fault = state & 0x7f; // mask off fault bit
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000af4:	777b      	strb	r3, [r7, #29]
                switch(fault)
 8000af6:	7f7b      	ldrb	r3, [r7, #29]
 8000af8:	2b0a      	cmp	r3, #10
 8000afa:	dc1d      	bgt.n	8000b38 <draw_state+0x13c>
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	f340 80aa 	ble.w	8000c56 <draw_state+0x25a>
 8000b02:	3b01      	subs	r3, #1
 8000b04:	2b09      	cmp	r3, #9
 8000b06:	f200 80a6 	bhi.w	8000c56 <draw_state+0x25a>
 8000b0a:	a201      	add	r2, pc, #4	; (adr r2, 8000b10 <draw_state+0x114>)
 8000b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b10:	08000b59 	.word	0x08000b59
 8000b14:	08000b73 	.word	0x08000b73
 8000b18:	08000b8d 	.word	0x08000b8d
 8000b1c:	08000ba7 	.word	0x08000ba7
 8000b20:	08000bc1 	.word	0x08000bc1
 8000b24:	08000bdb 	.word	0x08000bdb
 8000b28:	08000bf5 	.word	0x08000bf5
 8000b2c:	08000c0f 	.word	0x08000c0f
 8000b30:	08000c29 	.word	0x08000c29
 8000b34:	08000c3d 	.word	0x08000c3d
 8000b38:	2bff      	cmp	r3, #255	; 0xff
 8000b3a:	f040 808c 	bne.w	8000c56 <draw_state+0x25a>
                {
//                    case NONE: // STARTUP (effectively)
                	case 255:
                        // not obtainable via CAN
                        // would only show when hardcoded on startup
                        color = C_YELLOW;
 8000b3e:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000b42:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " STARTUP  ");
 8000b44:	f107 030c 	add.w	r3, r7, #12
 8000b48:	4a62      	ldr	r2, [pc, #392]	; (8000cd4 <draw_state+0x2d8>)
 8000b4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b4c:	c303      	stmia	r3!, {r0, r1}
 8000b4e:	801a      	strh	r2, [r3, #0]
 8000b50:	3302      	adds	r3, #2
 8000b52:	0c12      	lsrs	r2, r2, #16
 8000b54:	701a      	strb	r2, [r3, #0]
                        break;
 8000b56:	e0f7      	b.n	8000d48 <draw_state+0x34c>
                    case DRIVE_REQUEST_FROM_LV:
                        color = C_RED;
 8000b58:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b5c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "DRV FRM LV");
 8000b5e:	f107 030c 	add.w	r3, r7, #12
 8000b62:	4a5d      	ldr	r2, [pc, #372]	; (8000cd8 <draw_state+0x2dc>)
 8000b64:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b66:	c303      	stmia	r3!, {r0, r1}
 8000b68:	801a      	strh	r2, [r3, #0]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	0c12      	lsrs	r2, r2, #16
 8000b6e:	701a      	strb	r2, [r3, #0]
                        break;
 8000b70:	e0ea      	b.n	8000d48 <draw_state+0x34c>
                    case CONSERVATIVE_TIMER_MAXED:
                        color = C_RED;
 8000b72:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b76:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "PRE TM OUT");
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	4a57      	ldr	r2, [pc, #348]	; (8000cdc <draw_state+0x2e0>)
 8000b7e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b80:	c303      	stmia	r3!, {r0, r1}
 8000b82:	801a      	strh	r2, [r3, #0]
 8000b84:	3302      	adds	r3, #2
 8000b86:	0c12      	lsrs	r2, r2, #16
 8000b88:	701a      	strb	r2, [r3, #0]
                        break;
 8000b8a:	e0dd      	b.n	8000d48 <draw_state+0x34c>
                    case BRAKE_NOT_PRESSED:
                        color = C_RED;
 8000b8c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b90:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BR NOT PRS");
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	4a52      	ldr	r2, [pc, #328]	; (8000ce0 <draw_state+0x2e4>)
 8000b98:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b9a:	c303      	stmia	r3!, {r0, r1}
 8000b9c:	801a      	strh	r2, [r3, #0]
 8000b9e:	3302      	adds	r3, #2
 8000ba0:	0c12      	lsrs	r2, r2, #16
 8000ba2:	701a      	strb	r2, [r3, #0]
                        break;
 8000ba4:	e0d0      	b.n	8000d48 <draw_state+0x34c>
                    case HV_DISABLED_WHILE_DRIVING:
                        color = C_RED;
 8000ba6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000baa:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HV OFF DRV");
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	4a4c      	ldr	r2, [pc, #304]	; (8000ce4 <draw_state+0x2e8>)
 8000bb2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bb4:	c303      	stmia	r3!, {r0, r1}
 8000bb6:	801a      	strh	r2, [r3, #0]
 8000bb8:	3302      	adds	r3, #2
 8000bba:	0c12      	lsrs	r2, r2, #16
 8000bbc:	701a      	strb	r2, [r3, #0]
                        break;
 8000bbe:	e0c3      	b.n	8000d48 <draw_state+0x34c>
                    case SENSOR_DISCREPANCY:
                        color = C_RED;
 8000bc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bc4:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SNSR DSCRP");
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4a47      	ldr	r2, [pc, #284]	; (8000ce8 <draw_state+0x2ec>)
 8000bcc:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bce:	c303      	stmia	r3!, {r0, r1}
 8000bd0:	801a      	strh	r2, [r3, #0]
 8000bd2:	3302      	adds	r3, #2
 8000bd4:	0c12      	lsrs	r2, r2, #16
 8000bd6:	701a      	strb	r2, [r3, #0]
                        break;
 8000bd8:	e0b6      	b.n	8000d48 <draw_state+0x34c>
                    case BRAKE_IMPLAUSIBLE:
                        color = C_YELLOW;
 8000bda:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000bde:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BSPD TRIPD");
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <draw_state+0x2f0>)
 8000be6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000be8:	c303      	stmia	r3!, {r0, r1}
 8000bea:	801a      	strh	r2, [r3, #0]
 8000bec:	3302      	adds	r3, #2
 8000bee:	0c12      	lsrs	r2, r2, #16
 8000bf0:	701a      	strb	r2, [r3, #0]
                        break;
 8000bf2:	e0a9      	b.n	8000d48 <draw_state+0x34c>
                    case SHUTDOWN_CIRCUIT_OPEN:
                        color = C_RED;
 8000bf4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000bf8:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SHTDWN OPN");
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4a3c      	ldr	r2, [pc, #240]	; (8000cf0 <draw_state+0x2f4>)
 8000c00:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c02:	c303      	stmia	r3!, {r0, r1}
 8000c04:	801a      	strh	r2, [r3, #0]
 8000c06:	3302      	adds	r3, #2
 8000c08:	0c12      	lsrs	r2, r2, #16
 8000c0a:	701a      	strb	r2, [r3, #0]
                        break;
 8000c0c:	e09c      	b.n	8000d48 <draw_state+0x34c>
                    case UNCALIBRATED:
                        color = C_RED;
 8000c0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c12:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "UNCALIBRTD");
 8000c14:	f107 030c 	add.w	r3, r7, #12
 8000c18:	4a36      	ldr	r2, [pc, #216]	; (8000cf4 <draw_state+0x2f8>)
 8000c1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c1c:	c303      	stmia	r3!, {r0, r1}
 8000c1e:	801a      	strh	r2, [r3, #0]
 8000c20:	3302      	adds	r3, #2
 8000c22:	0c12      	lsrs	r2, r2, #16
 8000c24:	701a      	strb	r2, [r3, #0]
                        break;
 8000c26:	e08f      	b.n	8000d48 <draw_state+0x34c>
                    case HARD_BSPD:
                        color = C_RED;
 8000c28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c2c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HARD BSPD");
 8000c2e:	f107 030c 	add.w	r3, r7, #12
 8000c32:	4a31      	ldr	r2, [pc, #196]	; (8000cf8 <draw_state+0x2fc>)
 8000c34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c36:	c303      	stmia	r3!, {r0, r1}
 8000c38:	801a      	strh	r2, [r3, #0]
                        break;
 8000c3a:	e085      	b.n	8000d48 <draw_state+0x34c>
                    case MC_FAULT:
                        color = C_RED;
 8000c3c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c40:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " MC FAULT ");
 8000c42:	f107 030c 	add.w	r3, r7, #12
 8000c46:	4a2d      	ldr	r2, [pc, #180]	; (8000cfc <draw_state+0x300>)
 8000c48:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c4a:	c303      	stmia	r3!, {r0, r1}
 8000c4c:	801a      	strh	r2, [r3, #0]
 8000c4e:	3302      	adds	r3, #2
 8000c50:	0c12      	lsrs	r2, r2, #16
 8000c52:	701a      	strb	r2, [r3, #0]
                        break;
 8000c54:	e078      	b.n	8000d48 <draw_state+0x34c>
                    default:
                        color = C_RED;
 8000c56:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c5a:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " YO WTF? ");
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <draw_state+0x304>)
 8000c62:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c64:	c303      	stmia	r3!, {r0, r1}
 8000c66:	801a      	strh	r2, [r3, #0]
                        break;
 8000c68:	e06e      	b.n	8000d48 <draw_state+0x34c>
                }
            }
            else
            {
                // *************** NO FAULTS ***************
                color = C_GREEN;
 8000c6a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c6e:	83fb      	strh	r3, [r7, #30]
                switch(state)
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	2b03      	cmp	r3, #3
 8000c74:	d85e      	bhi.n	8000d34 <draw_state+0x338>
 8000c76:	a201      	add	r2, pc, #4	; (adr r2, 8000c7c <draw_state+0x280>)
 8000c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c7c:	08000c8d 	.word	0x08000c8d
 8000c80:	08000ca1 	.word	0x08000ca1
 8000c84:	08000d0d 	.word	0x08000d0d
 8000c88:	08000d21 	.word	0x08000d21
                {
                    case LV:
                        strcpy(string, "    LV    ");
 8000c8c:	f107 030c 	add.w	r3, r7, #12
 8000c90:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <draw_state+0x308>)
 8000c92:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c94:	c303      	stmia	r3!, {r0, r1}
 8000c96:	801a      	strh	r2, [r3, #0]
 8000c98:	3302      	adds	r3, #2
 8000c9a:	0c12      	lsrs	r2, r2, #16
 8000c9c:	701a      	strb	r2, [r3, #0]
                        break;
 8000c9e:	e053      	b.n	8000d48 <draw_state+0x34c>
                    case PRECHARGING:
                        strcpy(string, "PRECHARGE ");
 8000ca0:	f107 030c 	add.w	r3, r7, #12
 8000ca4:	4a18      	ldr	r2, [pc, #96]	; (8000d08 <draw_state+0x30c>)
 8000ca6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ca8:	c303      	stmia	r3!, {r0, r1}
 8000caa:	801a      	strh	r2, [r3, #0]
 8000cac:	3302      	adds	r3, #2
 8000cae:	0c12      	lsrs	r2, r2, #16
 8000cb0:	701a      	strb	r2, [r3, #0]
                        break;
 8000cb2:	e049      	b.n	8000d48 <draw_state+0x34c>
 8000cb4:	20000088 	.word	0x20000088
 8000cb8:	200002d0 	.word	0x200002d0
 8000cbc:	0800cfa4 	.word	0x0800cfa4
 8000cc0:	0800cfb0 	.word	0x0800cfb0
 8000cc4:	0800cfbc 	.word	0x0800cfbc
 8000cc8:	0800cfc8 	.word	0x0800cfc8
 8000ccc:	0800cfd4 	.word	0x0800cfd4
 8000cd0:	0800cfe0 	.word	0x0800cfe0
 8000cd4:	0800cfec 	.word	0x0800cfec
 8000cd8:	0800cff8 	.word	0x0800cff8
 8000cdc:	0800d004 	.word	0x0800d004
 8000ce0:	0800d010 	.word	0x0800d010
 8000ce4:	0800d01c 	.word	0x0800d01c
 8000ce8:	0800d028 	.word	0x0800d028
 8000cec:	0800d034 	.word	0x0800d034
 8000cf0:	0800d040 	.word	0x0800d040
 8000cf4:	0800d04c 	.word	0x0800d04c
 8000cf8:	0800d058 	.word	0x0800d058
 8000cfc:	0800d064 	.word	0x0800d064
 8000d00:	0800d070 	.word	0x0800d070
 8000d04:	0800d07c 	.word	0x0800d07c
 8000d08:	0800d088 	.word	0x0800d088
                    case HV_ENABLED:
                        strcpy(string, "HV ENABLED");
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4a13      	ldr	r2, [pc, #76]	; (8000d60 <draw_state+0x364>)
 8000d12:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d14:	c303      	stmia	r3!, {r0, r1}
 8000d16:	801a      	strh	r2, [r3, #0]
 8000d18:	3302      	adds	r3, #2
 8000d1a:	0c12      	lsrs	r2, r2, #16
 8000d1c:	701a      	strb	r2, [r3, #0]
                        break;
 8000d1e:	e013      	b.n	8000d48 <draw_state+0x34c>
                    case DRIVE:
                        strcpy(string, "  DRIVE   ");
 8000d20:	f107 030c 	add.w	r3, r7, #12
 8000d24:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <draw_state+0x368>)
 8000d26:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d28:	c303      	stmia	r3!, {r0, r1}
 8000d2a:	801a      	strh	r2, [r3, #0]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	0c12      	lsrs	r2, r2, #16
 8000d30:	701a      	strb	r2, [r3, #0]
                        break;
 8000d32:	e009      	b.n	8000d48 <draw_state+0x34c>
                    default:
						color = C_RED;
 8000d34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000d38:	83fb      	strh	r3, [r7, #30]
						strcpy(string, " YO WTF? ");
 8000d3a:	f107 030c 	add.w	r3, r7, #12
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <draw_state+0x36c>)
 8000d40:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d42:	c303      	stmia	r3!, {r0, r1}
 8000d44:	801a      	strh	r2, [r3, #0]
						break;
 8000d46:	bf00      	nop
                }
            }
    }

    draw_textbox(&state_box, color, string, 11);
 8000d48:	f107 020c 	add.w	r2, r7, #12
 8000d4c:	8bf9      	ldrh	r1, [r7, #30]
 8000d4e:	230b      	movs	r3, #11
 8000d50:	4806      	ldr	r0, [pc, #24]	; (8000d6c <draw_state+0x370>)
 8000d52:	f000 f8c7 	bl	8000ee4 <draw_textbox>
 8000d56:	e000      	b.n	8000d5a <draw_state+0x35e>
        return;
 8000d58:	bf00      	nop
}
 8000d5a:	3720      	adds	r7, #32
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800d094 	.word	0x0800d094
 8000d64:	0800d0a0 	.word	0x0800d0a0
 8000d68:	0800d070 	.word	0x0800d070
 8000d6c:	20000214 	.word	0x20000214

08000d70 <draw_glv_v>:


void draw_glv_v(uint32_t data) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    // translate from voltage divider measurement to true voltage
    // y = 0.4295x + 18.254
    data *= 859;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	f240 325b 	movw	r2, #859	; 0x35b
 8000d7e:	fb02 f303 	mul.w	r3, r2, r3
 8000d82:	607b      	str	r3, [r7, #4]
    data /= 2000; // 0.4295
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4a17      	ldr	r2, [pc, #92]	; (8000de4 <draw_glv_v+0x74>)
 8000d88:	fba2 2303 	umull	r2, r3, r2, r3
 8000d8c:	09db      	lsrs	r3, r3, #7
 8000d8e:	607b      	str	r3, [r7, #4]
    data += 18;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	3312      	adds	r3, #18
 8000d94:	607b      	str	r3, [r7, #4]
    UG_COLOR color;
    if (data > 1150) {
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f240 427e 	movw	r2, #1150	; 0x47e
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d903      	bls.n	8000da8 <draw_glv_v+0x38>
        color = C_GREEN;
 8000da0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000da4:	81fb      	strh	r3, [r7, #14]
 8000da6:	e00b      	b.n	8000dc0 <draw_glv_v+0x50>
    } else if (data > 1100) {
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	f240 424c 	movw	r2, #1100	; 0x44c
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d903      	bls.n	8000dba <draw_glv_v+0x4a>
        color = C_YELLOW;
 8000db2:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000db6:	81fb      	strh	r3, [r7, #14]
 8000db8:	e002      	b.n	8000dc0 <draw_glv_v+0x50>
    } else {
    	color = C_RED;
 8000dba:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000dbe:	81fb      	strh	r3, [r7, #14]
    }

    char str[6];
    sprintf(str, "%ld", data);
 8000dc0:	f107 0308 	add.w	r3, r7, #8
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	4908      	ldr	r1, [pc, #32]	; (8000de8 <draw_glv_v+0x78>)
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f00b fcb1 	bl	800c730 <siprintf>
    draw_textbox(&glv_v_box, color, str, 11);
 8000dce:	f107 0208 	add.w	r2, r7, #8
 8000dd2:	89f9      	ldrh	r1, [r7, #14]
 8000dd4:	230b      	movs	r3, #11
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <draw_glv_v+0x7c>)
 8000dd8:	f000 f884 	bl	8000ee4 <draw_textbox>
}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	10624dd3 	.word	0x10624dd3
 8000de8:	0800d0ac 	.word	0x0800d0ac
 8000dec:	2000005c 	.word	0x2000005c

08000df0 <value_to_color>:



UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value)
{
 8000df0:	b084      	sub	sp, #16
 8000df2:	b490      	push	{r4, r7}
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	f107 0408 	add.w	r4, r7, #8
 8000dfa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(cfg.grn_ylw_cutoff > cfg.ylw_org_cutoff)   // green for large red for small
 8000dfe:	8a3a      	ldrh	r2, [r7, #16]
 8000e00:	8a7b      	ldrh	r3, [r7, #18]
 8000e02:	429a      	cmp	r2, r3
 8000e04:	d917      	bls.n	8000e36 <value_to_color+0x46>
    {
        if(value > cfg.grn_ylw_cutoff)
 8000e06:	8a3b      	ldrh	r3, [r7, #16]
 8000e08:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d902      	bls.n	8000e14 <value_to_color+0x24>
        {
            return C_GREEN;
 8000e0e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e12:	e027      	b.n	8000e64 <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 8000e14:	8a7b      	ldrh	r3, [r7, #18]
 8000e16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d902      	bls.n	8000e22 <value_to_color+0x32>
        {
            return C_YELLOW;
 8000e1c:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000e20:	e020      	b.n	8000e64 <value_to_color+0x74>
        }
        else if(value > cfg.org_red_cutoff)
 8000e22:	8abb      	ldrh	r3, [r7, #20]
 8000e24:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d902      	bls.n	8000e30 <value_to_color+0x40>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8000e2a:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8000e2e:	e019      	b.n	8000e64 <value_to_color+0x74>
        }
        else
        {
            return C_RED;
 8000e30:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e34:	e016      	b.n	8000e64 <value_to_color+0x74>
        }
    }
    else  // red for large green for small
    {
        if(value > cfg.org_red_cutoff)
 8000e36:	8abb      	ldrh	r3, [r7, #20]
 8000e38:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d902      	bls.n	8000e44 <value_to_color+0x54>
        {
            return C_RED;
 8000e3e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000e42:	e00f      	b.n	8000e64 <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 8000e44:	8a7b      	ldrh	r3, [r7, #18]
 8000e46:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d902      	bls.n	8000e52 <value_to_color+0x62>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8000e4c:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8000e50:	e008      	b.n	8000e64 <value_to_color+0x74>
        }
        else if(value > cfg.grn_ylw_cutoff)
 8000e52:	8a3b      	ldrh	r3, [r7, #16]
 8000e54:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000e56:	429a      	cmp	r2, r3
 8000e58:	d902      	bls.n	8000e60 <value_to_color+0x70>
        {
            return C_YELLOW;
 8000e5a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000e5e:	e001      	b.n	8000e64 <value_to_color+0x74>
        }
        else
        {
            return C_GREEN;
 8000e60:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
        }
    }
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc90      	pop	{r4, r7}
 8000e6a:	b004      	add	sp, #16
 8000e6c:	4770      	bx	lr
	...

08000e70 <draw_value_textbox>:

void draw_value_textbox(TEXTBOX_CONFIG* cfg, uint16_t value)
{
 8000e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e72:	b08f      	sub	sp, #60	; 0x3c
 8000e74:	af08      	add	r7, sp, #32
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	460b      	mov	r3, r1
 8000e7a:	807b      	strh	r3, [r7, #2]
	if(value == cfg->last_value)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000e80:	887a      	ldrh	r2, [r7, #2]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d028      	beq.n	8000ed8 <draw_value_textbox+0x68>
	{
		return;
	}

	cfg->last_value = value;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	887a      	ldrh	r2, [r7, #2]
 8000e8a:	84da      	strh	r2, [r3, #38]	; 0x26

	UG_COLOR color = value_to_color(*cfg, value);
 8000e8c:	687e      	ldr	r6, [r7, #4]
 8000e8e:	887b      	ldrh	r3, [r7, #2]
 8000e90:	9307      	str	r3, [sp, #28]
 8000e92:	466d      	mov	r5, sp
 8000e94:	f106 0410 	add.w	r4, r6, #16
 8000e98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e9c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000ea0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000ea4:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ea8:	f7ff ffa2 	bl	8000df0 <value_to_color>
 8000eac:	4603      	mov	r3, r0
 8000eae:	82fb      	strh	r3, [r7, #22]
	char string[10];
	uint16_t str_len = sprintf(string, "%d%c", value, cfg->units);
 8000eb0:	887a      	ldrh	r2, [r7, #2]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000eb8:	f107 0008 	add.w	r0, r7, #8
 8000ebc:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <draw_value_textbox+0x70>)
 8000ebe:	f00b fc37 	bl	800c730 <siprintf>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	82bb      	strh	r3, [r7, #20]

	draw_textbox(cfg, color, string, str_len);
 8000ec6:	8abb      	ldrh	r3, [r7, #20]
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f107 0208 	add.w	r2, r7, #8
 8000ece:	8af9      	ldrh	r1, [r7, #22]
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f807 	bl	8000ee4 <draw_textbox>
 8000ed6:	e000      	b.n	8000eda <draw_value_textbox+0x6a>
		return;
 8000ed8:	bf00      	nop
}
 8000eda:	371c      	adds	r7, #28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ee0:	0800d0b0 	.word	0x0800d0b0

08000ee4 <draw_textbox>:

void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	607a      	str	r2, [r7, #4]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	817b      	strh	r3, [r7, #10]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	727b      	strb	r3, [r7, #9]
    // determine x and y coordinates to center text
    uint16_t text_x = (cfg->box_x2 + cfg->box_x1)/2 - ((str_len * cfg->font.char_width)/2);
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	889b      	ldrh	r3, [r3, #4]
 8000efc:	461a      	mov	r2, r3
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	da00      	bge.n	8000f0a <draw_textbox+0x26>
 8000f08:	3301      	adds	r3, #1
 8000f0a:	105b      	asrs	r3, r3, #1
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	7a7b      	ldrb	r3, [r7, #9]
 8000f10:	68f9      	ldr	r1, [r7, #12]
 8000f12:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8000f16:	fb01 f303 	mul.w	r3, r1, r3
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da00      	bge.n	8000f20 <draw_textbox+0x3c>
 8000f1e:	3301      	adds	r3, #1
 8000f20:	105b      	asrs	r3, r3, #1
 8000f22:	425b      	negs	r3, r3
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	4413      	add	r3, r2
 8000f28:	82fb      	strh	r3, [r7, #22]
    uint16_t text_y = (cfg->box_y2 + cfg->box_y1)/2 - (cfg->font.char_height/2);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	88db      	ldrh	r3, [r3, #6]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	885b      	ldrh	r3, [r3, #2]
 8000f34:	4413      	add	r3, r2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	da00      	bge.n	8000f3c <draw_textbox+0x58>
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	105b      	asrs	r3, r3, #1
 8000f3e:	b29a      	uxth	r2, r3
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	da00      	bge.n	8000f4c <draw_textbox+0x68>
 8000f4a:	3301      	adds	r3, #1
 8000f4c:	105b      	asrs	r3, r3, #1
 8000f4e:	b21b      	sxth	r3, r3
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	82bb      	strh	r3, [r7, #20]

    if(color != cfg->last_color)
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f5a:	897a      	ldrh	r2, [r7, #10]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d013      	beq.n	8000f88 <draw_textbox+0xa4>
    {
        UG_FillFrame(cfg->box_x1, cfg->box_y1, cfg->box_x2, cfg->box_y2, color);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	881b      	ldrh	r3, [r3, #0]
 8000f64:	b218      	sxth	r0, r3
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	885b      	ldrh	r3, [r3, #2]
 8000f6a:	b219      	sxth	r1, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	889b      	ldrh	r3, [r3, #4]
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	88db      	ldrh	r3, [r3, #6]
 8000f76:	b21c      	sxth	r4, r3
 8000f78:	897b      	ldrh	r3, [r7, #10]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	4623      	mov	r3, r4
 8000f7e:	f001 f8d9 	bl	8002134 <UG_FillFrame>
        cfg->last_color = color;
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	897a      	ldrh	r2, [r7, #10]
 8000f86:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    UG_FontSelect(&cfg->font);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3310      	adds	r3, #16
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 f899 	bl	80020c4 <UG_FontSelect>
    UG_PutColorString(text_x, text_y, string, C_BLACK, color);
 8000f92:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000f96:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8000f9a:	897b      	ldrh	r3, [r7, #10]
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	f001 f9bd 	bl	8002320 <UG_PutColorString>
}
 8000fa6:	bf00      	nop
 8000fa8:	371c      	adds	r7, #28
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd90      	pop	{r4, r7, pc}
	...

08000fb0 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

// this has to be in main I think?
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b087      	sub	sp, #28
 8000fb4:	af04      	add	r7, sp, #16
 8000fb6:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000fba:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000fc0:	f002 fc3b 	bl	800383a <HAL_CAN_GetRxMessage>
	save_can_rx_data(RxHeader, RxData);
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000fc8:	9203      	str	r2, [sp, #12]
 8000fca:	466c      	mov	r4, sp
 8000fcc:	f103 0210 	add.w	r2, r3, #16
 8000fd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000fd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000fd8:	f7ff fae8 	bl	80005ac <save_can_rx_data>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 8000fdc:	2102      	movs	r1, #2
 8000fde:	4806      	ldr	r0, [pc, #24]	; (8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8000fe0:	f003 fd2d 	bl	8004a3e <HAL_GPIO_TogglePin>
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd90      	pop	{r4, r7, pc}
 8000fec:	20000624 	.word	0x20000624
 8000ff0:	20000608 	.word	0x20000608
 8000ff4:	200003c4 	.word	0x200003c4
 8000ff8:	40020400 	.word	0x40020400

08000ffc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001000:	f002 f80b 	bl	800301a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001004:	f000 f832 	bl	800106c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001008:	f000 fb34 	bl	8001674 <MX_GPIO_Init>
  MX_DMA_Init();
 800100c:	f000 fab2 	bl	8001574 <MX_DMA_Init>
  MX_CAN2_Init();
 8001010:	f000 f970 	bl	80012f4 <MX_CAN2_Init>
//  MX_SDMMC1_SD_Init();
  MX_ADC1_Init();
 8001014:	f000 f896 	bl	8001144 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001018:	f000 f8e6 	bl	80011e8 <MX_ADC3_Init>
  MX_TIM2_Init();
 800101c:	f000 f99e 	bl	800135c <MX_TIM2_Init>
  MX_TIM4_Init();
 8001020:	f000 f9f2 	bl	8001408 <MX_TIM4_Init>
  MX_UART4_Init();
 8001024:	f000 fa46 	bl	80014b4 <MX_UART4_Init>
  MX_UART7_Init();
 8001028:	f000 fa74 	bl	8001514 <MX_UART7_Init>
  MX_FMC_Init();
 800102c:	f000 fac0 	bl	80015b0 <MX_FMC_Init>
  MX_CAN1_Init();
 8001030:	f000 f92c 	bl	800128c <MX_CAN1_Init>
  MX_USB_DEVICE_Init();
 8001034:	f00a fd64 	bl	800bb00 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  init_sensors();
 8001038:	f000 fc0e 	bl	8001858 <init_sensors>

  Display_Init();
 800103c:	f7ff fb9e 	bl	800077c <Display_Init>
  UG_FontSelect(&FONT_12X16);
 8001040:	4809      	ldr	r0, [pc, #36]	; (8001068 <main+0x6c>)
 8001042:	f001 f83f 	bl	80020c4 <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 8001046:	2000      	movs	r0, #0
 8001048:	f001 fa24 	bl	8002494 <UG_SetBackcolor>
  UG_SetForecolor(C_YELLOW);
 800104c:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8001050:	f001 fa0e 	bl	8002470 <UG_SetForecolor>
  Display_CalibrateScreen();
 8001054:	f7ff fbbc 	bl	80007d0 <Display_CalibrateScreen>
  Display_DriveTemplate();
 8001058:	f7ff fbe6 	bl	8000828 <Display_DriveTemplate>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Display_Update();
 800105c:	f7ff fc84 	bl	8000968 <Display_Update>
	  HAL_Delay(100);
 8001060:	2064      	movs	r0, #100	; 0x64
 8001062:	f002 f837 	bl	80030d4 <HAL_Delay>
	  Display_Update();
 8001066:	e7f9      	b.n	800105c <main+0x60>
 8001068:	0801c520 	.word	0x0801c520

0800106c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b094      	sub	sp, #80	; 0x50
 8001070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	2230      	movs	r2, #48	; 0x30
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f00b fb78 	bl	800c770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
 800108e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001090:	4b2a      	ldr	r3, [pc, #168]	; (800113c <SystemClock_Config+0xd0>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a29      	ldr	r2, [pc, #164]	; (800113c <SystemClock_Config+0xd0>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b27      	ldr	r3, [pc, #156]	; (800113c <SystemClock_Config+0xd0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <SystemClock_Config+0xd4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a24      	ldr	r2, [pc, #144]	; (8001140 <SystemClock_Config+0xd4>)
 80010ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b2:	6013      	str	r3, [r2, #0]
 80010b4:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SystemClock_Config+0xd4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c0:	2301      	movs	r3, #1
 80010c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ca:	2302      	movs	r3, #2
 80010cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d4:	2308      	movs	r3, #8
 80010d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80010d8:	23d8      	movs	r3, #216	; 0xd8
 80010da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010dc:	2302      	movs	r3, #2
 80010de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80010e0:	2309      	movs	r3, #9
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0320 	add.w	r3, r7, #32
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 ffcb 	bl	8006084 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80010f4:	f000 fb7e 	bl	80017f4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80010f8:	f004 ff74 	bl	8005fe4 <HAL_PWREx_EnableOverDrive>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001102:	f000 fb77 	bl	80017f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001106:	230f      	movs	r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110a:	2302      	movs	r3, #2
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001112:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001116:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001118:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2107      	movs	r1, #7
 8001124:	4618      	mov	r0, r3
 8001126:	f005 fa51 	bl	80065cc <HAL_RCC_ClockConfig>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001130:	f000 fb60 	bl	80017f4 <Error_Handler>
  }
}
 8001134:	bf00      	nop
 8001136:	3750      	adds	r7, #80	; 0x50
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	40023800 	.word	0x40023800
 8001140:	40007000 	.word	0x40007000

08001144 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800114a:	463b      	mov	r3, r7
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001156:	4b21      	ldr	r3, [pc, #132]	; (80011dc <MX_ADC1_Init+0x98>)
 8001158:	4a21      	ldr	r2, [pc, #132]	; (80011e0 <MX_ADC1_Init+0x9c>)
 800115a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800115c:	4b1f      	ldr	r3, [pc, #124]	; (80011dc <MX_ADC1_Init+0x98>)
 800115e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001162:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <MX_ADC1_Init+0x98>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800116a:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <MX_ADC1_Init+0x98>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001170:	4b1a      	ldr	r3, [pc, #104]	; (80011dc <MX_ADC1_Init+0x98>)
 8001172:	2200      	movs	r2, #0
 8001174:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800117e:	4b17      	ldr	r3, [pc, #92]	; (80011dc <MX_ADC1_Init+0x98>)
 8001180:	2200      	movs	r2, #0
 8001182:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001184:	4b15      	ldr	r3, [pc, #84]	; (80011dc <MX_ADC1_Init+0x98>)
 8001186:	4a17      	ldr	r2, [pc, #92]	; (80011e4 <MX_ADC1_Init+0xa0>)
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800118a:	4b14      	ldr	r3, [pc, #80]	; (80011dc <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001190:	4b12      	ldr	r3, [pc, #72]	; (80011dc <MX_ADC1_Init+0x98>)
 8001192:	2201      	movs	r2, #1
 8001194:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800119e:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a0:	2201      	movs	r2, #1
 80011a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011a4:	480d      	ldr	r0, [pc, #52]	; (80011dc <MX_ADC1_Init+0x98>)
 80011a6:	f001 ffb9 	bl	800311c <HAL_ADC_Init>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011b0:	f000 fb20 	bl	80017f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011b4:	230a      	movs	r3, #10
 80011b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011b8:	2301      	movs	r3, #1
 80011ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c0:	463b      	mov	r3, r7
 80011c2:	4619      	mov	r1, r3
 80011c4:	4805      	ldr	r0, [pc, #20]	; (80011dc <MX_ADC1_Init+0x98>)
 80011c6:	f001 ffed 	bl	80031a4 <HAL_ADC_ConfigChannel>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011d0:	f000 fb10 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200002d4 	.word	0x200002d4
 80011e0:	40012000 	.word	0x40012000
 80011e4:	0f000001 	.word	0x0f000001

080011e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011ee:	463b      	mov	r3, r7
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80011fa:	4b21      	ldr	r3, [pc, #132]	; (8001280 <MX_ADC3_Init+0x98>)
 80011fc:	4a21      	ldr	r2, [pc, #132]	; (8001284 <MX_ADC3_Init+0x9c>)
 80011fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001200:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_ADC3_Init+0x98>)
 8001202:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001206:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001208:	4b1d      	ldr	r3, [pc, #116]	; (8001280 <MX_ADC3_Init+0x98>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800120e:	4b1c      	ldr	r3, [pc, #112]	; (8001280 <MX_ADC3_Init+0x98>)
 8001210:	2200      	movs	r2, #0
 8001212:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001214:	4b1a      	ldr	r3, [pc, #104]	; (8001280 <MX_ADC3_Init+0x98>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800121a:	4b19      	ldr	r3, [pc, #100]	; (8001280 <MX_ADC3_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001222:	4b17      	ldr	r3, [pc, #92]	; (8001280 <MX_ADC3_Init+0x98>)
 8001224:	2200      	movs	r2, #0
 8001226:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <MX_ADC3_Init+0x98>)
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <MX_ADC3_Init+0xa0>)
 800122c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800122e:	4b14      	ldr	r3, [pc, #80]	; (8001280 <MX_ADC3_Init+0x98>)
 8001230:	2200      	movs	r2, #0
 8001232:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <MX_ADC3_Init+0x98>)
 8001236:	2201      	movs	r2, #1
 8001238:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <MX_ADC3_Init+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <MX_ADC3_Init+0x98>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <MX_ADC3_Init+0x98>)
 800124a:	f001 ff67 	bl	800311c <HAL_ADC_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001254:	f000 face 	bl	80017f4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001258:	2308      	movs	r3, #8
 800125a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800125c:	2301      	movs	r3, #1
 800125e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001264:	463b      	mov	r3, r7
 8001266:	4619      	mov	r1, r3
 8001268:	4805      	ldr	r0, [pc, #20]	; (8001280 <MX_ADC3_Init+0x98>)
 800126a:	f001 ff9b 	bl	80031a4 <HAL_ADC_ConfigChannel>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d001      	beq.n	8001278 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001274:	f000 fabe 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2000031c 	.word	0x2000031c
 8001284:	40012200 	.word	0x40012200
 8001288:	0f000001 	.word	0x0f000001

0800128c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001290:	4b16      	ldr	r3, [pc, #88]	; (80012ec <MX_CAN1_Init+0x60>)
 8001292:	4a17      	ldr	r2, [pc, #92]	; (80012f0 <MX_CAN1_Init+0x64>)
 8001294:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8001296:	4b15      	ldr	r3, [pc, #84]	; (80012ec <MX_CAN1_Init+0x60>)
 8001298:	2212      	movs	r2, #18
 800129a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <MX_CAN1_Init+0x60>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_CAN1_Init+0x60>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80012a8:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_CAN1_Init+0x60>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80012ae:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_CAN1_Init+0x60>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012b4:	4b0d      	ldr	r3, [pc, #52]	; (80012ec <MX_CAN1_Init+0x60>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012ba:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_CAN1_Init+0x60>)
 80012bc:	2200      	movs	r2, #0
 80012be:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_CAN1_Init+0x60>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_CAN1_Init+0x60>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_CAN1_Init+0x60>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_CAN1_Init+0x60>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_CAN1_Init+0x60>)
 80012da:	f002 f9b3 	bl	8003644 <HAL_CAN_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 80012e4:	f000 fa86 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200003c4 	.word	0x200003c4
 80012f0:	40006400 	.word	0x40006400

080012f4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <MX_CAN2_Init+0x60>)
 80012fa:	4a17      	ldr	r2, [pc, #92]	; (8001358 <MX_CAN2_Init+0x64>)
 80012fc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 80012fe:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_CAN2_Init+0x60>)
 8001300:	2212      	movs	r2, #18
 8001302:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_CAN2_Init+0x60>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800130a:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_CAN2_Init+0x60>)
 800130c:	2200      	movs	r2, #0
 800130e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_CAN2_Init+0x60>)
 8001312:	2200      	movs	r2, #0
 8001314:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001316:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_CAN2_Init+0x60>)
 8001318:	2200      	movs	r2, #0
 800131a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <MX_CAN2_Init+0x60>)
 800131e:	2200      	movs	r2, #0
 8001320:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <MX_CAN2_Init+0x60>)
 8001324:	2200      	movs	r2, #0
 8001326:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <MX_CAN2_Init+0x60>)
 800132a:	2200      	movs	r2, #0
 800132c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 800132e:	4b09      	ldr	r3, [pc, #36]	; (8001354 <MX_CAN2_Init+0x60>)
 8001330:	2200      	movs	r2, #0
 8001332:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8001334:	4b07      	ldr	r3, [pc, #28]	; (8001354 <MX_CAN2_Init+0x60>)
 8001336:	2200      	movs	r2, #0
 8001338:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <MX_CAN2_Init+0x60>)
 800133c:	2200      	movs	r2, #0
 800133e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8001340:	4804      	ldr	r0, [pc, #16]	; (8001354 <MX_CAN2_Init+0x60>)
 8001342:	f002 f97f 	bl	8003644 <HAL_CAN_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 800134c:	f000 fa52 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200003ec 	.word	0x200003ec
 8001358:	40006800 	.word	0x40006800

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b088      	sub	sp, #32
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	60da      	str	r2, [r3, #12]
 8001370:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001372:	463b      	mov	r3, r7
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800137c:	4b21      	ldr	r3, [pc, #132]	; (8001404 <MX_TIM2_Init+0xa8>)
 800137e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001382:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001384:	4b1f      	ldr	r3, [pc, #124]	; (8001404 <MX_TIM2_Init+0xa8>)
 8001386:	2200      	movs	r2, #0
 8001388:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800138a:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <MX_TIM2_Init+0xa8>)
 800138c:	2200      	movs	r2, #0
 800138e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001390:	4b1c      	ldr	r3, [pc, #112]	; (8001404 <MX_TIM2_Init+0xa8>)
 8001392:	f04f 32ff 	mov.w	r2, #4294967295
 8001396:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001398:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM2_Init+0xa8>)
 800139a:	2200      	movs	r2, #0
 800139c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	4b19      	ldr	r3, [pc, #100]	; (8001404 <MX_TIM2_Init+0xa8>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013a4:	4817      	ldr	r0, [pc, #92]	; (8001404 <MX_TIM2_Init+0xa8>)
 80013a6:	f005 ff6d 	bl	8007284 <HAL_TIM_Base_Init>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80013b0:	f000 fa20 	bl	80017f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80013b4:	2307      	movs	r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80013b8:	2370      	movs	r3, #112	; 0x70
 80013ba:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	4619      	mov	r1, r3
 80013ce:	480d      	ldr	r0, [pc, #52]	; (8001404 <MX_TIM2_Init+0xa8>)
 80013d0:	f005 ffaf 	bl	8007332 <HAL_TIM_SlaveConfigSynchro>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013da:	f000 fa0b 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013de:	2300      	movs	r3, #0
 80013e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <MX_TIM2_Init+0xa8>)
 80013ec:	f006 f998 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013f6:	f000 f9fd 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000414 	.word	0x20000414

08001408 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141e:	463b      	mov	r3, r7
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001428:	4b20      	ldr	r3, [pc, #128]	; (80014ac <MX_TIM4_Init+0xa4>)
 800142a:	4a21      	ldr	r2, [pc, #132]	; (80014b0 <MX_TIM4_Init+0xa8>)
 800142c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_TIM4_Init+0xa4>)
 8001430:	2200      	movs	r2, #0
 8001432:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM4_Init+0xa4>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM4_Init+0xa4>)
 800143c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001440:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM4_Init+0xa4>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_TIM4_Init+0xa4>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800144e:	4817      	ldr	r0, [pc, #92]	; (80014ac <MX_TIM4_Init+0xa4>)
 8001450:	f005 ff18 	bl	8007284 <HAL_TIM_Base_Init>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 800145a:	f000 f9cb 	bl	80017f4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800145e:	2307      	movs	r3, #7
 8001460:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8001462:	2370      	movs	r3, #112	; 0x70
 8001464:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001472:	f107 030c 	add.w	r3, r7, #12
 8001476:	4619      	mov	r1, r3
 8001478:	480c      	ldr	r0, [pc, #48]	; (80014ac <MX_TIM4_Init+0xa4>)
 800147a:	f005 ff5a 	bl	8007332 <HAL_TIM_SlaveConfigSynchro>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001484:	f000 f9b6 	bl	80017f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001488:	2300      	movs	r3, #0
 800148a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001490:	463b      	mov	r3, r7
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_TIM4_Init+0xa4>)
 8001496:	f006 f943 	bl	8007720 <HAL_TIMEx_MasterConfigSynchronization>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80014a0:	f000 f9a8 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000460 	.word	0x20000460
 80014b0:	40000800 	.word	0x40000800

080014b4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <MX_UART4_Init+0x58>)
 80014ba:	4a15      	ldr	r2, [pc, #84]	; (8001510 <MX_UART4_Init+0x5c>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80014be:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_UART4_Init+0x58>)
 80014c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014c4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b11      	ldr	r3, [pc, #68]	; (800150c <MX_UART4_Init+0x58>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_UART4_Init+0x58>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_UART4_Init+0x58>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b0c      	ldr	r3, [pc, #48]	; (800150c <MX_UART4_Init+0x58>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_UART4_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_UART4_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_UART4_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_UART4_Init+0x58>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_UART4_Init+0x58>)
 80014f8:	f006 f9a0 	bl	800783c <HAL_UART_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001502:	f000 f977 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200004ac 	.word	0x200004ac
 8001510:	40004c00 	.word	0x40004c00

08001514 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_UART7_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <MX_UART7_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_UART7_Init+0x58>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_UART7_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_UART7_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_UART7_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_UART7_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_UART7_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_UART7_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_UART7_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_UART7_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_UART7_Init+0x58>)
 8001558:	f006 f970 	bl	800783c <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 f947 	bl	80017f4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000534 	.word	0x20000534
 8001570:	40007800 	.word	0x40007800

08001574 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <MX_DMA_Init+0x38>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <MX_DMA_Init+0x38>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001584:	6313      	str	r3, [r2, #48]	; 0x30
 8001586:	4b09      	ldr	r3, [pc, #36]	; (80015ac <MX_DMA_Init+0x38>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158e:	607b      	str	r3, [r7, #4]
 8001590:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2038      	movs	r0, #56	; 0x38
 8001598:	f002 fd6b 	bl	8004072 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800159c:	2038      	movs	r0, #56	; 0x38
 800159e:	f002 fd84 	bl	80040aa <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
 80015c4:	615a      	str	r2, [r3, #20]
 80015c6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80015c8:	4b28      	ldr	r3, [pc, #160]	; (800166c <MX_FMC_Init+0xbc>)
 80015ca:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80015ce:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80015d0:	4b26      	ldr	r3, [pc, #152]	; (800166c <MX_FMC_Init+0xbc>)
 80015d2:	4a27      	ldr	r2, [pc, #156]	; (8001670 <MX_FMC_Init+0xc0>)
 80015d4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80015d6:	4b25      	ldr	r3, [pc, #148]	; (800166c <MX_FMC_Init+0xbc>)
 80015d8:	2200      	movs	r2, #0
 80015da:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80015dc:	4b23      	ldr	r3, [pc, #140]	; (800166c <MX_FMC_Init+0xbc>)
 80015de:	2200      	movs	r2, #0
 80015e0:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 80015e2:	4b22      	ldr	r3, [pc, #136]	; (800166c <MX_FMC_Init+0xbc>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80015e8:	4b20      	ldr	r3, [pc, #128]	; (800166c <MX_FMC_Init+0xbc>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80015ee:	4b1f      	ldr	r3, [pc, #124]	; (800166c <MX_FMC_Init+0xbc>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80015f4:	4b1d      	ldr	r3, [pc, #116]	; (800166c <MX_FMC_Init+0xbc>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80015fa:	4b1c      	ldr	r3, [pc, #112]	; (800166c <MX_FMC_Init+0xbc>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001600:	4b1a      	ldr	r3, [pc, #104]	; (800166c <MX_FMC_Init+0xbc>)
 8001602:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001606:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <MX_FMC_Init+0xbc>)
 800160a:	2200      	movs	r2, #0
 800160c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800160e:	4b17      	ldr	r3, [pc, #92]	; (800166c <MX_FMC_Init+0xbc>)
 8001610:	2200      	movs	r2, #0
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001614:	4b15      	ldr	r3, [pc, #84]	; (800166c <MX_FMC_Init+0xbc>)
 8001616:	2200      	movs	r2, #0
 8001618:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800161a:	4b14      	ldr	r3, [pc, #80]	; (800166c <MX_FMC_Init+0xbc>)
 800161c:	2200      	movs	r2, #0
 800161e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_FMC_Init+0xbc>)
 8001622:	2200      	movs	r2, #0
 8001624:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_FMC_Init+0xbc>)
 8001628:	2200      	movs	r2, #0
 800162a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_FMC_Init+0xbc>)
 800162e:	2200      	movs	r2, #0
 8001630:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001632:	230f      	movs	r3, #15
 8001634:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001636:	230f      	movs	r3, #15
 8001638:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 800163a:	23ff      	movs	r3, #255	; 0xff
 800163c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 800163e:	230f      	movs	r3, #15
 8001640:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001642:	2310      	movs	r3, #16
 8001644:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001646:	2311      	movs	r3, #17
 8001648:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 800164a:	2300      	movs	r3, #0
 800164c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2200      	movs	r2, #0
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <MX_FMC_Init+0xbc>)
 8001656:	f005 fdcd 	bl	80071f4 <HAL_SRAM_Init>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8001660:	f000 f8c8 	bl	80017f4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001664:	bf00      	nop
 8001666:	3720      	adds	r7, #32
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	200005bc 	.word	0x200005bc
 8001670:	a0000104 	.word	0xa0000104

08001674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
 8001688:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800168a:	4b54      	ldr	r3, [pc, #336]	; (80017dc <MX_GPIO_Init+0x168>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168e:	4a53      	ldr	r2, [pc, #332]	; (80017dc <MX_GPIO_Init+0x168>)
 8001690:	f043 0320 	orr.w	r3, r3, #32
 8001694:	6313      	str	r3, [r2, #48]	; 0x30
 8001696:	4b51      	ldr	r3, [pc, #324]	; (80017dc <MX_GPIO_Init+0x168>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169a:	f003 0320 	and.w	r3, r3, #32
 800169e:	623b      	str	r3, [r7, #32]
 80016a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	4b4e      	ldr	r3, [pc, #312]	; (80017dc <MX_GPIO_Init+0x168>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a4d      	ldr	r2, [pc, #308]	; (80017dc <MX_GPIO_Init+0x168>)
 80016a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b4b      	ldr	r3, [pc, #300]	; (80017dc <MX_GPIO_Init+0x168>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016b6:	61fb      	str	r3, [r7, #28]
 80016b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	4b48      	ldr	r3, [pc, #288]	; (80017dc <MX_GPIO_Init+0x168>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a47      	ldr	r2, [pc, #284]	; (80017dc <MX_GPIO_Init+0x168>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b45      	ldr	r3, [pc, #276]	; (80017dc <MX_GPIO_Init+0x168>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d2:	4b42      	ldr	r3, [pc, #264]	; (80017dc <MX_GPIO_Init+0x168>)
 80016d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d6:	4a41      	ldr	r2, [pc, #260]	; (80017dc <MX_GPIO_Init+0x168>)
 80016d8:	f043 0301 	orr.w	r3, r3, #1
 80016dc:	6313      	str	r3, [r2, #48]	; 0x30
 80016de:	4b3f      	ldr	r3, [pc, #252]	; (80017dc <MX_GPIO_Init+0x168>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	617b      	str	r3, [r7, #20]
 80016e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016ea:	4b3c      	ldr	r3, [pc, #240]	; (80017dc <MX_GPIO_Init+0x168>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a3b      	ldr	r2, [pc, #236]	; (80017dc <MX_GPIO_Init+0x168>)
 80016f0:	f043 0310 	orr.w	r3, r3, #16
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b39      	ldr	r3, [pc, #228]	; (80017dc <MX_GPIO_Init+0x168>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0310 	and.w	r3, r3, #16
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001702:	4b36      	ldr	r3, [pc, #216]	; (80017dc <MX_GPIO_Init+0x168>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a35      	ldr	r2, [pc, #212]	; (80017dc <MX_GPIO_Init+0x168>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b33      	ldr	r3, [pc, #204]	; (80017dc <MX_GPIO_Init+0x168>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	4b30      	ldr	r3, [pc, #192]	; (80017dc <MX_GPIO_Init+0x168>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a2f      	ldr	r2, [pc, #188]	; (80017dc <MX_GPIO_Init+0x168>)
 8001720:	f043 0308 	orr.w	r3, r3, #8
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b2d      	ldr	r3, [pc, #180]	; (80017dc <MX_GPIO_Init+0x168>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001732:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <MX_GPIO_Init+0x168>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a29      	ldr	r2, [pc, #164]	; (80017dc <MX_GPIO_Init+0x168>)
 8001738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b27      	ldr	r3, [pc, #156]	; (80017dc <MX_GPIO_Init+0x168>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2108      	movs	r1, #8
 800174e:	4824      	ldr	r0, [pc, #144]	; (80017e0 <MX_GPIO_Init+0x16c>)
 8001750:	f003 f95c 	bl	8004a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS2_Pin;
 8001754:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS2_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	481e      	ldr	r0, [pc, #120]	; (80017e4 <MX_GPIO_Init+0x170>)
 800176a:	f002 ffa3 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 800176e:	2302      	movs	r3, #2
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800177e:	4619      	mov	r1, r3
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <MX_GPIO_Init+0x174>)
 8001782:	f002 ff97 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8001786:	2308      	movs	r3, #8
 8001788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800179a:	4619      	mov	r1, r3
 800179c:	4810      	ldr	r0, [pc, #64]	; (80017e0 <MX_GPIO_Init+0x16c>)
 800179e:	f002 ff89 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin PG15 */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|GPIO_PIN_15;
 80017a2:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017a8:	2300      	movs	r3, #0
 80017aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	480d      	ldr	r0, [pc, #52]	; (80017ec <MX_GPIO_Init+0x178>)
 80017b8:	f002 ff7c 	bl	80046b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = BAT_12V_MEASURE_Pin;
 80017bc:	2308      	movs	r3, #8
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BAT_12V_MEASURE_GPIO_Port, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	4808      	ldr	r0, [pc, #32]	; (80017f0 <MX_GPIO_Init+0x17c>)
 80017d0:	f002 ff70 	bl	80046b4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017d4:	bf00      	nop
 80017d6:	3738      	adds	r7, #56	; 0x38
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40020000 	.word	0x40020000
 80017e4:	40021400 	.word	0x40021400
 80017e8:	40020800 	.word	0x40020800
 80017ec:	40021800 	.word	0x40021800
 80017f0:	40020400 	.word	0x40020400

080017f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f8:	b672      	cpsid	i
}
 80017fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017fc:	e7fe      	b.n	80017fc <Error_Handler+0x8>
	...

08001800 <temp_attenuate>:
    	return (uint16_t)throttle / 2;	//return on 1:1/2 scale
    }
	return 1;
}

void temp_attenuate() {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
    int t = PACK_TEMP - 50;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <temp_attenuate+0x4c>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	b2db      	uxtb	r3, r3
 800180c:	3b32      	subs	r3, #50	; 0x32
 800180e:	607b      	str	r3, [r7, #4]
    if (t < 0) {
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	da03      	bge.n	800181e <temp_attenuate+0x1e>
        THROTTLE_MULTIPLIER = 100;
 8001816:	4b0e      	ldr	r3, [pc, #56]	; (8001850 <temp_attenuate+0x50>)
 8001818:	2264      	movs	r2, #100	; 0x64
 800181a:	701a      	strb	r2, [r3, #0]
    } else if (t < 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
    } else if (t >= 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
    }
}
 800181c:	e00f      	b.n	800183e <temp_attenuate+0x3e>
    } else if (t < 8) {
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2b07      	cmp	r3, #7
 8001822:	dc06      	bgt.n	8001832 <temp_attenuate+0x32>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
 8001824:	4a0b      	ldr	r2, [pc, #44]	; (8001854 <temp_attenuate+0x54>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4413      	add	r3, r2
 800182a:	781a      	ldrb	r2, [r3, #0]
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <temp_attenuate+0x50>)
 800182e:	701a      	strb	r2, [r3, #0]
}
 8001830:	e005      	b.n	800183e <temp_attenuate+0x3e>
    } else if (t >= 8) {
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b07      	cmp	r3, #7
 8001836:	dd02      	ble.n	800183e <temp_attenuate+0x3e>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
 8001838:	2205      	movs	r2, #5
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <temp_attenuate+0x50>)
 800183c:	701a      	strb	r2, [r3, #0]
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000208 	.word	0x20000208
 8001850:	20000089 	.word	0x20000089
 8001854:	0800d100 	.word	0x0800d100

08001858 <init_sensors>:
    if(in > max) return max;
    if(in < min) return min;
    return in;
}

void init_sensors(){
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <init_sensors+0x4c>)
 800185e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001862:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <init_sensors+0x4c>)
 8001866:	2200      	movs	r2, #0
 8001868:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <init_sensors+0x4c>)
 800186c:	2201      	movs	r2, #1
 800186e:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 8001870:	4b0d      	ldr	r3, [pc, #52]	; (80018a8 <init_sensors+0x50>)
 8001872:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001876:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <init_sensors+0x50>)
 800187a:	2200      	movs	r2, #0
 800187c:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 800187e:	4b0a      	ldr	r3, [pc, #40]	; (80018a8 <init_sensors+0x50>)
 8001880:	2201      	movs	r2, #1
 8001882:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <init_sensors+0x54>)
 8001886:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800188a:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <init_sensors+0x54>)
 800188e:	2200      	movs	r2, #0
 8001890:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <init_sensors+0x54>)
 8001894:	2201      	movs	r2, #1
 8001896:	80da      	strh	r2, [r3, #6]
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	2000062c 	.word	0x2000062c
 80018a8:	20000638 	.word	0x20000638
 80018ac:	20000644 	.word	0x20000644

080018b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <HAL_MspInit+0x44>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	4a0e      	ldr	r2, [pc, #56]	; (80018f4 <HAL_MspInit+0x44>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	6413      	str	r3, [r2, #64]	; 0x40
 80018c2:	4b0c      	ldr	r3, [pc, #48]	; (80018f4 <HAL_MspInit+0x44>)
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_MspInit+0x44>)
 80018d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d2:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <HAL_MspInit+0x44>)
 80018d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d8:	6453      	str	r3, [r2, #68]	; 0x44
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_MspInit+0x44>)
 80018dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018e2:	603b      	str	r3, [r7, #0]
 80018e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018e6:	bf00      	nop
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800

080018f8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08c      	sub	sp, #48	; 0x30
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 031c 	add.w	r3, r7, #28
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a42      	ldr	r2, [pc, #264]	; (8001a20 <HAL_ADC_MspInit+0x128>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d153      	bne.n	80019c2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800191a:	4b42      	ldr	r3, [pc, #264]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a41      	ldr	r2, [pc, #260]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 8001920:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b3f      	ldr	r3, [pc, #252]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800192e:	61bb      	str	r3, [r7, #24]
 8001930:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	4a3b      	ldr	r2, [pc, #236]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 8001938:	f043 0304 	orr.w	r3, r3, #4
 800193c:	6313      	str	r3, [r2, #48]	; 0x30
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001942:	f003 0304 	and.w	r3, r3, #4
 8001946:	617b      	str	r3, [r7, #20]
 8001948:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 800194a:	230d      	movs	r3, #13
 800194c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800194e:	2303      	movs	r3, #3
 8001950:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001956:	f107 031c 	add.w	r3, r7, #28
 800195a:	4619      	mov	r1, r3
 800195c:	4832      	ldr	r0, [pc, #200]	; (8001a28 <HAL_ADC_MspInit+0x130>)
 800195e:	f002 fea9 	bl	80046b4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001962:	4b32      	ldr	r3, [pc, #200]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 8001964:	4a32      	ldr	r2, [pc, #200]	; (8001a30 <HAL_ADC_MspInit+0x138>)
 8001966:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001968:	4b30      	ldr	r3, [pc, #192]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 800196a:	2200      	movs	r2, #0
 800196c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800197a:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 800197c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001980:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 8001984:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001988:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 800198c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001990:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001992:	4b26      	ldr	r3, [pc, #152]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 8001994:	2200      	movs	r2, #0
 8001996:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001998:	4b24      	ldr	r3, [pc, #144]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 800199a:	2200      	movs	r2, #0
 800199c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800199e:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019a4:	4821      	ldr	r0, [pc, #132]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 80019a6:	f002 fb9b 	bl	80040e0 <HAL_DMA_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <HAL_ADC_MspInit+0xbc>
    {
      Error_Handler();
 80019b0:	f7ff ff20 	bl	80017f4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a1d      	ldr	r2, [pc, #116]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 80019b8:	639a      	str	r2, [r3, #56]	; 0x38
 80019ba:	4a1c      	ldr	r2, [pc, #112]	; (8001a2c <HAL_ADC_MspInit+0x134>)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80019c0:	e029      	b.n	8001a16 <HAL_ADC_MspInit+0x11e>
  else if(hadc->Instance==ADC3)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_ADC_MspInit+0x13c>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d124      	bne.n	8001a16 <HAL_ADC_MspInit+0x11e>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d0:	4a14      	ldr	r2, [pc, #80]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019d6:	6453      	str	r3, [r2, #68]	; 0x44
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	613b      	str	r3, [r7, #16]
 80019e2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	4a0e      	ldr	r2, [pc, #56]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	6313      	str	r3, [r2, #48]	; 0x30
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_ADC_MspInit+0x12c>)
 80019f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = APP2_Pin;
 80019fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a02:	2303      	movs	r3, #3
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(APP2_GPIO_Port, &GPIO_InitStruct);
 8001a0a:	f107 031c 	add.w	r3, r7, #28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4809      	ldr	r0, [pc, #36]	; (8001a38 <HAL_ADC_MspInit+0x140>)
 8001a12:	f002 fe4f 	bl	80046b4 <HAL_GPIO_Init>
}
 8001a16:	bf00      	nop
 8001a18:	3730      	adds	r7, #48	; 0x30
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40012000 	.word	0x40012000
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40020800 	.word	0x40020800
 8001a2c:	20000364 	.word	0x20000364
 8001a30:	40026410 	.word	0x40026410
 8001a34:	40012200 	.word	0x40012200
 8001a38:	40021400 	.word	0x40021400

08001a3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b08c      	sub	sp, #48	; 0x30
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	2200      	movs	r2, #0
 8001a4a:	601a      	str	r2, [r3, #0]
 8001a4c:	605a      	str	r2, [r3, #4]
 8001a4e:	609a      	str	r2, [r3, #8]
 8001a50:	60da      	str	r2, [r3, #12]
 8001a52:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a42      	ldr	r2, [pc, #264]	; (8001b64 <HAL_CAN_MspInit+0x128>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d13a      	bne.n	8001ad4 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001a5e:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	3301      	adds	r3, #1
 8001a64:	4a40      	ldr	r2, [pc, #256]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001a66:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001a68:	4b3f      	ldr	r3, [pc, #252]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d10b      	bne.n	8001a88 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001a70:	4b3e      	ldr	r3, [pc, #248]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	4a3d      	ldr	r2, [pc, #244]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a76:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7c:	4b3b      	ldr	r3, [pc, #236]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a84:	61bb      	str	r3, [r7, #24]
 8001a86:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a88:	4b38      	ldr	r3, [pc, #224]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8c:	4a37      	ldr	r2, [pc, #220]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6313      	str	r3, [r2, #48]	; 0x30
 8001a94:	4b35      	ldr	r3, [pc, #212]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a98:	f003 0301 	and.w	r3, r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8001aa0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001ab2:	2309      	movs	r3, #9
 8001ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ab6:	f107 031c 	add.w	r3, r7, #28
 8001aba:	4619      	mov	r1, r3
 8001abc:	482c      	ldr	r0, [pc, #176]	; (8001b70 <HAL_CAN_MspInit+0x134>)
 8001abe:	f002 fdf9 	bl	80046b4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2014      	movs	r0, #20
 8001ac8:	f002 fad3 	bl	8004072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001acc:	2014      	movs	r0, #20
 8001ace:	f002 faec 	bl	80040aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001ad2:	e042      	b.n	8001b5a <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a26      	ldr	r2, [pc, #152]	; (8001b74 <HAL_CAN_MspInit+0x138>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d13d      	bne.n	8001b5a <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001ade:	4b23      	ldr	r3, [pc, #140]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	4a22      	ldr	r2, [pc, #136]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001ae4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aea:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a1a      	ldr	r2, [pc, #104]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001afe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001b00:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <HAL_CAN_MspInit+0x12c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d10b      	bne.n	8001b20 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	4a17      	ldr	r2, [pc, #92]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b12:	6413      	str	r3, [r2, #64]	; 0x40
 8001b14:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a11      	ldr	r2, [pc, #68]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b26:	f043 0302 	orr.w	r3, r3, #2
 8001b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2c:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <HAL_CAN_MspInit+0x130>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	60bb      	str	r3, [r7, #8]
 8001b36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 8001b38:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001b4a:	2309      	movs	r3, #9
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4808      	ldr	r0, [pc, #32]	; (8001b78 <HAL_CAN_MspInit+0x13c>)
 8001b56:	f002 fdad 	bl	80046b4 <HAL_GPIO_Init>
}
 8001b5a:	bf00      	nop
 8001b5c:	3730      	adds	r7, #48	; 0x30
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40006400 	.word	0x40006400
 8001b68:	20000650 	.word	0x20000650
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40006800 	.word	0x40006800
 8001b78:	40020400 	.word	0x40020400

08001b7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	; 0x30
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b84:	f107 031c 	add.w	r3, r7, #28
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
 8001b8c:	605a      	str	r2, [r3, #4]
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	60da      	str	r2, [r3, #12]
 8001b92:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b9c:	d129      	bne.n	8001bf2 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9e:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a2c      	ldr	r2, [pc, #176]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
 8001bb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bba:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc2:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
 8001bcc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 031c 	add.w	r3, r7, #28
 8001be8:	4619      	mov	r1, r3
 8001bea:	481b      	ldr	r0, [pc, #108]	; (8001c58 <HAL_TIM_Base_MspInit+0xdc>)
 8001bec:	f002 fd62 	bl	80046b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bf0:	e02c      	b.n	8001c4c <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a19      	ldr	r2, [pc, #100]	; (8001c5c <HAL_TIM_Base_MspInit+0xe0>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d127      	bne.n	8001c4c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001bfc:	4b15      	ldr	r3, [pc, #84]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	4a14      	ldr	r2, [pc, #80]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6413      	str	r3, [r2, #64]	; 0x40
 8001c08:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	613b      	str	r3, [r7, #16]
 8001c12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	4a0e      	ldr	r2, [pc, #56]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001c20:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <HAL_TIM_Base_MspInit+0xd8>)
 8001c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c24:	f003 0310 	and.w	r3, r3, #16
 8001c28:	60fb      	str	r3, [r7, #12]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c30:	2302      	movs	r3, #2
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c34:	2300      	movs	r3, #0
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4806      	ldr	r0, [pc, #24]	; (8001c60 <HAL_TIM_Base_MspInit+0xe4>)
 8001c48:	f002 fd34 	bl	80046b4 <HAL_GPIO_Init>
}
 8001c4c:	bf00      	nop
 8001c4e:	3730      	adds	r7, #48	; 0x30
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40020000 	.word	0x40020000
 8001c5c:	40000800 	.word	0x40000800
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b0ac      	sub	sp, #176	; 0xb0
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c7c:	f107 0318 	add.w	r3, r7, #24
 8001c80:	2284      	movs	r2, #132	; 0x84
 8001c82:	2100      	movs	r1, #0
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00a fd73 	bl	800c770 <memset>
  if(huart->Instance==UART4)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a42      	ldr	r2, [pc, #264]	; (8001d98 <HAL_UART_MspInit+0x134>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d13c      	bne.n	8001d0e <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c9e:	f107 0318 	add.w	r3, r7, #24
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 feb6 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001cae:	f7ff fda1 	bl	80017f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001cb2:	4b3a      	ldr	r3, [pc, #232]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb6:	4a39      	ldr	r2, [pc, #228]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001cb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cbe:	4b37      	ldr	r3, [pc, #220]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cca:	4b34      	ldr	r3, [pc, #208]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a33      	ldr	r2, [pc, #204]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b31      	ldr	r3, [pc, #196]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cfa:	2308      	movs	r3, #8
 8001cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d04:	4619      	mov	r1, r3
 8001d06:	4826      	ldr	r0, [pc, #152]	; (8001da0 <HAL_UART_MspInit+0x13c>)
 8001d08:	f002 fcd4 	bl	80046b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001d0c:	e040      	b.n	8001d90 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART7)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <HAL_UART_MspInit+0x140>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d13b      	bne.n	8001d90 <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8001d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d1c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	4618      	mov	r0, r3
 8001d28:	f004 fe74 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8001d32:	f7ff fd5f 	bl	80017f4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8001d36:	4b19      	ldr	r3, [pc, #100]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a18      	ldr	r2, [pc, #96]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001d3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a12      	ldr	r2, [pc, #72]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001d54:	f043 0320 	orr.w	r3, r3, #32
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <HAL_UART_MspInit+0x138>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0320 	and.w	r3, r3, #32
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 8001d66:	23c0      	movs	r3, #192	; 0xc0
 8001d68:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4807      	ldr	r0, [pc, #28]	; (8001da8 <HAL_UART_MspInit+0x144>)
 8001d8c:	f002 fc92 	bl	80046b4 <HAL_GPIO_Init>
}
 8001d90:	bf00      	nop
 8001d92:	37b0      	adds	r7, #176	; 0xb0
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40004c00 	.word	0x40004c00
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	40020000 	.word	0x40020000
 8001da4:	40007800 	.word	0x40007800
 8001da8:	40021400 	.word	0x40021400

08001dac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <HAL_FMC_MspInit+0xa4>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d13f      	bne.n	8001e48 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8001dc8:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <HAL_FMC_MspInit+0xa4>)
 8001dca:	2201      	movs	r2, #1
 8001dcc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <HAL_FMC_MspInit+0xa8>)
 8001dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dd2:	4a20      	ldr	r2, [pc, #128]	; (8001e54 <HAL_FMC_MspInit+0xa8>)
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	6393      	str	r3, [r2, #56]	; 0x38
 8001dda:	4b1e      	ldr	r3, [pc, #120]	; (8001e54 <HAL_FMC_MspInit+0xa8>)
 8001ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dde:	f003 0301 	and.w	r3, r3, #1
 8001de2:	603b      	str	r3, [r7, #0]
 8001de4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001dea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001df8:	230c      	movs	r3, #12
 8001dfa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4815      	ldr	r0, [pc, #84]	; (8001e58 <HAL_FMC_MspInit+0xac>)
 8001e02:	f002 fc57 	bl	80046b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001e06:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e14:	2303      	movs	r3, #3
 8001e16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e18:	230c      	movs	r3, #12
 8001e1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	4619      	mov	r1, r3
 8001e20:	480e      	ldr	r0, [pc, #56]	; (8001e5c <HAL_FMC_MspInit+0xb0>)
 8001e22:	f002 fc47 	bl	80046b4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001e26:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001e2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2c:	2302      	movs	r3, #2
 8001e2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e34:	2303      	movs	r3, #3
 8001e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001e38:	230c      	movs	r3, #12
 8001e3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3c:	1d3b      	adds	r3, r7, #4
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4807      	ldr	r0, [pc, #28]	; (8001e60 <HAL_FMC_MspInit+0xb4>)
 8001e42:	f002 fc37 	bl	80046b4 <HAL_GPIO_Init>
 8001e46:	e000      	b.n	8001e4a <HAL_FMC_MspInit+0x9e>
    return;
 8001e48:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000654 	.word	0x20000654
 8001e54:	40023800 	.word	0x40023800
 8001e58:	40021400 	.word	0x40021400
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40020c00 	.word	0x40020c00

08001e64 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001e6c:	f7ff ff9e 	bl	8001dac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001e70:	bf00      	nop
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e7c:	e7fe      	b.n	8001e7c <NMI_Handler+0x4>

08001e7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <HardFault_Handler+0x4>

08001e84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <MemManage_Handler+0x4>

08001e8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <BusFault_Handler+0x4>

08001e90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e90:	b480      	push	{r7}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e94:	e7fe      	b.n	8001e94 <UsageFault_Handler+0x4>

08001e96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e96:	b480      	push	{r7}
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr

08001ea4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ec4:	f001 f8e6 	bl	8003094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ec8:	bf00      	nop
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001ed0:	4802      	ldr	r0, [pc, #8]	; (8001edc <CAN1_RX0_IRQHandler+0x10>)
 8001ed2:	f001 fdc4 	bl	8003a5e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001ed6:	bf00      	nop
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	200003c4 	.word	0x200003c4

08001ee0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ee4:	4802      	ldr	r0, [pc, #8]	; (8001ef0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ee6:	f002 f9a9 	bl	800423c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001eea:	bf00      	nop
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000364 	.word	0x20000364

08001ef4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001ef8:	4802      	ldr	r0, [pc, #8]	; (8001f04 <OTG_HS_IRQHandler+0x10>)
 8001efa:	f002 ff00 	bl	8004cfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20001b44 	.word	0x20001b44

08001f08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f10:	4a14      	ldr	r2, [pc, #80]	; (8001f64 <_sbrk+0x5c>)
 8001f12:	4b15      	ldr	r3, [pc, #84]	; (8001f68 <_sbrk+0x60>)
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f1c:	4b13      	ldr	r3, [pc, #76]	; (8001f6c <_sbrk+0x64>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d102      	bne.n	8001f2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <_sbrk+0x64>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <_sbrk+0x68>)
 8001f28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <_sbrk+0x64>)
 8001f2c:	681a      	ldr	r2, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4413      	add	r3, r2
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d207      	bcs.n	8001f48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f38:	f00a fc32 	bl	800c7a0 <__errno>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	220c      	movs	r2, #12
 8001f40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	e009      	b.n	8001f5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <_sbrk+0x64>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f4e:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <_sbrk+0x64>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4413      	add	r3, r2
 8001f56:	4a05      	ldr	r2, [pc, #20]	; (8001f6c <_sbrk+0x64>)
 8001f58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3718      	adds	r7, #24
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20050000 	.word	0x20050000
 8001f68:	00000400 	.word	0x00000400
 8001f6c:	20000658 	.word	0x20000658
 8001f70:	20002198 	.word	0x20002198

08001f74 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <SystemInit+0x20>)
 8001f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f7e:	4a05      	ldr	r2, [pc, #20]	; (8001f94 <SystemInit+0x20>)
 8001f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f88:	bf00      	nop
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	e000ed00 	.word	0xe000ed00

08001f98 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b087      	sub	sp, #28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	60f8      	str	r0, [r7, #12]
 8001fa0:	60b9      	str	r1, [r7, #8]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	80fb      	strh	r3, [r7, #6]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	88ba      	ldrh	r2, [r7, #4]
 8001fbe:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	2204      	movs	r2, #4
 8001fca:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	b21a      	sxth	r2, r3
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	3b01      	subs	r3, #1
 8002000:	b29b      	uxth	r3, r3
 8002002:	b21a      	sxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2200      	movs	r2, #0
 8002030:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	2200      	movs	r2, #0
 8002036:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2200      	movs	r2, #0
 8002042:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8002056:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002060:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2200      	movs	r2, #0
 8002068:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 800207e:	2300      	movs	r3, #0
 8002080:	75fb      	strb	r3, [r7, #23]
 8002082:	e010      	b.n	80020a6 <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 8002084:	7dfb      	ldrb	r3, [r7, #23]
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	3309      	adds	r3, #9
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	2200      	movs	r2, #0
 8002090:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	3309      	adds	r3, #9
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	2200      	movs	r2, #0
 800209e:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	3301      	adds	r3, #1
 80020a4:	75fb      	strb	r3, [r7, #23]
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	2b06      	cmp	r3, #6
 80020aa:	d9eb      	bls.n	8002084 <UG_Init+0xec>
   }

   gui = g;
 80020ac:	4a04      	ldr	r2, [pc, #16]	; (80020c0 <UG_Init+0x128>)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	6013      	str	r3, [r2, #0]
   return 1;
 80020b2:	2301      	movs	r3, #1
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	2000065c 	.word	0x2000065c

080020c4 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 80020c4:	b4b0      	push	{r4, r5, r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <UG_FontSelect+0x28>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 80020d6:	4615      	mov	r5, r2
 80020d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020dc:	682b      	ldr	r3, [r5, #0]
 80020de:	6023      	str	r3, [r4, #0]
}
 80020e0:	bf00      	nop
 80020e2:	370c      	adds	r7, #12
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bcb0      	pop	{r4, r5, r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	2000065c 	.word	0x2000065c

080020f0 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af02      	add	r7, sp, #8
 80020f6:	4603      	mov	r3, r0
 80020f8:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <UG_FillScreen+0x40>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002102:	b29b      	uxth	r3, r3
 8002104:	3b01      	subs	r3, #1
 8002106:	b29b      	uxth	r3, r3
 8002108:	b21a      	sxth	r2, r3
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <UG_FillScreen+0x40>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002112:	b29b      	uxth	r3, r3
 8002114:	3b01      	subs	r3, #1
 8002116:	b29b      	uxth	r3, r3
 8002118:	b219      	sxth	r1, r3
 800211a:	88fb      	ldrh	r3, [r7, #6]
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	460b      	mov	r3, r1
 8002120:	2100      	movs	r1, #0
 8002122:	2000      	movs	r0, #0
 8002124:	f000 f806 	bl	8002134 <UG_FillFrame>
}
 8002128:	bf00      	nop
 800212a:	3708      	adds	r7, #8
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000065c 	.word	0x2000065c

08002134 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8002134:	b5b0      	push	{r4, r5, r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af02      	add	r7, sp, #8
 800213a:	4604      	mov	r4, r0
 800213c:	4608      	mov	r0, r1
 800213e:	4611      	mov	r1, r2
 8002140:	461a      	mov	r2, r3
 8002142:	4623      	mov	r3, r4
 8002144:	80fb      	strh	r3, [r7, #6]
 8002146:	4603      	mov	r3, r0
 8002148:	80bb      	strh	r3, [r7, #4]
 800214a:	460b      	mov	r3, r1
 800214c:	807b      	strh	r3, [r7, #2]
 800214e:	4613      	mov	r3, r2
 8002150:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8002152:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002156:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800215a:	429a      	cmp	r2, r3
 800215c:	da05      	bge.n	800216a <UG_FillFrame+0x36>
   {
      n = x2;
 800215e:	887b      	ldrh	r3, [r7, #2]
 8002160:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 8002162:	88fb      	ldrh	r3, [r7, #6]
 8002164:	807b      	strh	r3, [r7, #2]
      x1 = n;
 8002166:	89fb      	ldrh	r3, [r7, #14]
 8002168:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 800216a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800216e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	da05      	bge.n	8002182 <UG_FillFrame+0x4e>
   {
      n = y2;
 8002176:	883b      	ldrh	r3, [r7, #0]
 8002178:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 800217a:	88bb      	ldrh	r3, [r7, #4]
 800217c:	803b      	strh	r3, [r7, #0]
      y1 = n;
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8002182:	4b23      	ldr	r3, [pc, #140]	; (8002210 <UG_FillFrame+0xdc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d012      	beq.n	80021b8 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8002192:	4b1f      	ldr	r3, [pc, #124]	; (8002210 <UG_FillFrame+0xdc>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002198:	461d      	mov	r5, r3
 800219a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800219e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80021a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80021a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80021aa:	8c3b      	ldrh	r3, [r7, #32]
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	4623      	mov	r3, r4
 80021b0:	47a8      	blx	r5
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d027      	beq.n	8002208 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 80021b8:	88bb      	ldrh	r3, [r7, #4]
 80021ba:	81bb      	strh	r3, [r7, #12]
 80021bc:	e01d      	b.n	80021fa <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 80021be:	88fb      	ldrh	r3, [r7, #6]
 80021c0:	81fb      	strh	r3, [r7, #14]
 80021c2:	e00e      	b.n	80021e2 <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 80021c4:	4b12      	ldr	r3, [pc, #72]	; (8002210 <UG_FillFrame+0xdc>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	8c3a      	ldrh	r2, [r7, #32]
 80021cc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80021d0:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80021d4:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 80021d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	81fb      	strh	r3, [r7, #14]
 80021e2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	ddea      	ble.n	80021c4 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 80021ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021f2:	b29b      	uxth	r3, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	81bb      	strh	r3, [r7, #12]
 80021fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80021fe:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002202:	429a      	cmp	r2, r3
 8002204:	dddb      	ble.n	80021be <UG_FillFrame+0x8a>
 8002206:	e000      	b.n	800220a <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8002208:	bf00      	nop
      }
   }
}
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bdb0      	pop	{r4, r5, r7, pc}
 8002210:	2000065c 	.word	0x2000065c

08002214 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b087      	sub	sp, #28
 8002218:	af02      	add	r7, sp, #8
 800221a:	4603      	mov	r3, r0
 800221c:	603a      	str	r2, [r7, #0]
 800221e:	80fb      	strh	r3, [r7, #6]
 8002220:	460b      	mov	r3, r1
 8002222:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8002228:	88bb      	ldrh	r3, [r7, #4]
 800222a:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 800222c:	e06d      	b.n	800230a <UG_PutString+0xf6>
   {
      chr = *str++;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	603a      	str	r2, [r7, #0]
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8002238:	7afb      	ldrb	r3, [r7, #11]
 800223a:	b29a      	uxth	r2, r3
 800223c:	4b37      	ldr	r3, [pc, #220]	; (800231c <UG_PutString+0x108>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002242:	429a      	cmp	r2, r3
 8002244:	d361      	bcc.n	800230a <UG_PutString+0xf6>
 8002246:	7afb      	ldrb	r3, [r7, #11]
 8002248:	b29a      	uxth	r2, r3
 800224a:	4b34      	ldr	r3, [pc, #208]	; (800231c <UG_PutString+0x108>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002250:	429a      	cmp	r2, r3
 8002252:	d900      	bls.n	8002256 <UG_PutString+0x42>
 8002254:	e059      	b.n	800230a <UG_PutString+0xf6>
      if ( chr == '\n' )
 8002256:	7afb      	ldrb	r3, [r7, #11]
 8002258:	2b0a      	cmp	r3, #10
 800225a:	d104      	bne.n	8002266 <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 800225c:	4b2f      	ldr	r3, [pc, #188]	; (800231c <UG_PutString+0x108>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	889b      	ldrh	r3, [r3, #4]
 8002262:	81fb      	strh	r3, [r7, #14]
         continue;
 8002264:	e051      	b.n	800230a <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8002266:	4b2d      	ldr	r3, [pc, #180]	; (800231c <UG_PutString+0x108>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800226c:	2b00      	cmp	r3, #0
 800226e:	d00a      	beq.n	8002286 <UG_PutString+0x72>
 8002270:	4b2a      	ldr	r3, [pc, #168]	; (800231c <UG_PutString+0x108>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002276:	7afa      	ldrb	r2, [r7, #11]
 8002278:	4928      	ldr	r1, [pc, #160]	; (800231c <UG_PutString+0x108>)
 800227a:	6809      	ldr	r1, [r1, #0]
 800227c:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 800227e:	1a52      	subs	r2, r2, r1
 8002280:	4413      	add	r3, r2
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	e004      	b.n	8002290 <UG_PutString+0x7c>
 8002286:	4b25      	ldr	r3, [pc, #148]	; (800231c <UG_PutString+0x108>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 800228e:	b2db      	uxtb	r3, r3
 8002290:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 8002292:	4b22      	ldr	r3, [pc, #136]	; (800231c <UG_PutString+0x108>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800229a:	4619      	mov	r1, r3
 800229c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80022a0:	7abb      	ldrb	r3, [r7, #10]
 80022a2:	4413      	add	r3, r2
 80022a4:	4299      	cmp	r1, r3
 80022a6:	dc11      	bgt.n	80022cc <UG_PutString+0xb8>
      {
         xp = x;
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <UG_PutString+0x108>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80022b4:	b29a      	uxth	r2, r3
 80022b6:	4b19      	ldr	r3, [pc, #100]	; (800231c <UG_PutString+0x108>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 80022be:	b29b      	uxth	r3, r3
 80022c0:	4413      	add	r3, r2
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	89bb      	ldrh	r3, [r7, #12]
 80022c6:	4413      	add	r3, r2
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80022cc:	4b13      	ldr	r3, [pc, #76]	; (800231c <UG_PutString+0x108>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <UG_PutString+0x108>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80022dc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80022e0:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 80022e4:	7af8      	ldrb	r0, [r7, #11]
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	4623      	mov	r3, r4
 80022ea:	f000 f89d 	bl	8002428 <UG_PutChar>

      xp += cw + gui->char_h_space;
 80022ee:	7abb      	ldrb	r3, [r7, #10]
 80022f0:	b21a      	sxth	r2, r3
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <UG_PutString+0x108>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 80022fa:	b21b      	sxth	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b21b      	sxth	r3, r3
 8002300:	b29a      	uxth	r2, r3
 8002302:	89fb      	ldrh	r3, [r7, #14]
 8002304:	4413      	add	r3, r2
 8002306:	b29b      	uxth	r3, r3
 8002308:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d18d      	bne.n	800222e <UG_PutString+0x1a>
   }
}
 8002312:	bf00      	nop
 8002314:	bf00      	nop
 8002316:	3714      	adds	r7, #20
 8002318:	46bd      	mov	sp, r7
 800231a:	bd90      	pop	{r4, r7, pc}
 800231c:	2000065c 	.word	0x2000065c

08002320 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b089      	sub	sp, #36	; 0x24
 8002324:	af02      	add	r7, sp, #8
 8002326:	60ba      	str	r2, [r7, #8]
 8002328:	461a      	mov	r2, r3
 800232a:	4603      	mov	r3, r0
 800232c:	81fb      	strh	r3, [r7, #14]
 800232e:	460b      	mov	r3, r1
 8002330:	81bb      	strh	r3, [r7, #12]
 8002332:	4613      	mov	r3, r2
 8002334:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8002336:	89fb      	ldrh	r3, [r7, #14]
 8002338:	82fb      	strh	r3, [r7, #22]
   yp=y;
 800233a:	89bb      	ldrh	r3, [r7, #12]
 800233c:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 800233e:	e067      	b.n	8002410 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60ba      	str	r2, [r7, #8]
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 800234a:	7cfb      	ldrb	r3, [r7, #19]
 800234c:	b29a      	uxth	r2, r3
 800234e:	4b35      	ldr	r3, [pc, #212]	; (8002424 <UG_PutColorString+0x104>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002354:	429a      	cmp	r2, r3
 8002356:	d35b      	bcc.n	8002410 <UG_PutColorString+0xf0>
 8002358:	7cfb      	ldrb	r3, [r7, #19]
 800235a:	b29a      	uxth	r2, r3
 800235c:	4b31      	ldr	r3, [pc, #196]	; (8002424 <UG_PutColorString+0x104>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002362:	429a      	cmp	r2, r3
 8002364:	d900      	bls.n	8002368 <UG_PutColorString+0x48>
 8002366:	e053      	b.n	8002410 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 8002368:	7cfb      	ldrb	r3, [r7, #19]
 800236a:	2b0a      	cmp	r3, #10
 800236c:	d104      	bne.n	8002378 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 800236e:	4b2d      	ldr	r3, [pc, #180]	; (8002424 <UG_PutColorString+0x104>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	889b      	ldrh	r3, [r3, #4]
 8002374:	82fb      	strh	r3, [r7, #22]
         continue;
 8002376:	e04b      	b.n	8002410 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8002378:	4b2a      	ldr	r3, [pc, #168]	; (8002424 <UG_PutColorString+0x104>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00a      	beq.n	8002398 <UG_PutColorString+0x78>
 8002382:	4b28      	ldr	r3, [pc, #160]	; (8002424 <UG_PutColorString+0x104>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002388:	7cfa      	ldrb	r2, [r7, #19]
 800238a:	4926      	ldr	r1, [pc, #152]	; (8002424 <UG_PutColorString+0x104>)
 800238c:	6809      	ldr	r1, [r1, #0]
 800238e:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8002390:	1a52      	subs	r2, r2, r1
 8002392:	4413      	add	r3, r2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	e004      	b.n	80023a2 <UG_PutColorString+0x82>
 8002398:	4b22      	ldr	r3, [pc, #136]	; (8002424 <UG_PutColorString+0x104>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 80023a4:	4b1f      	ldr	r3, [pc, #124]	; (8002424 <UG_PutColorString+0x104>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023ac:	4619      	mov	r1, r3
 80023ae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80023b2:	7cbb      	ldrb	r3, [r7, #18]
 80023b4:	4413      	add	r3, r2
 80023b6:	4299      	cmp	r1, r3
 80023b8:	dc11      	bgt.n	80023de <UG_PutColorString+0xbe>
      {
         xp = x;
 80023ba:	89fb      	ldrh	r3, [r7, #14]
 80023bc:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 80023be:	4b19      	ldr	r3, [pc, #100]	; (8002424 <UG_PutColorString+0x104>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	4b16      	ldr	r3, [pc, #88]	; (8002424 <UG_PutColorString+0x104>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	8abb      	ldrh	r3, [r7, #20]
 80023d8:	4413      	add	r3, r2
 80023da:	b29b      	uxth	r3, r3
 80023dc:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 80023de:	88fc      	ldrh	r4, [r7, #6]
 80023e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80023e4:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80023e8:	7cf8      	ldrb	r0, [r7, #19]
 80023ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	4623      	mov	r3, r4
 80023f0:	f000 f81a 	bl	8002428 <UG_PutChar>

      xp += cw + gui->char_h_space;
 80023f4:	7cbb      	ldrb	r3, [r7, #18]
 80023f6:	b21a      	sxth	r2, r3
 80023f8:	4b0a      	ldr	r3, [pc, #40]	; (8002424 <UG_PutColorString+0x104>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8002400:	b21b      	sxth	r3, r3
 8002402:	4413      	add	r3, r2
 8002404:	b21b      	sxth	r3, r3
 8002406:	b29a      	uxth	r2, r3
 8002408:	8afb      	ldrh	r3, [r7, #22]
 800240a:	4413      	add	r3, r2
 800240c:	b29b      	uxth	r3, r3
 800240e:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d193      	bne.n	8002340 <UG_PutColorString+0x20>
   }
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	371c      	adds	r7, #28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd90      	pop	{r4, r7, pc}
 8002422:	bf00      	nop
 8002424:	2000065c 	.word	0x2000065c

08002428 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b085      	sub	sp, #20
 800242c:	af02      	add	r7, sp, #8
 800242e:	4604      	mov	r4, r0
 8002430:	4608      	mov	r0, r1
 8002432:	4611      	mov	r1, r2
 8002434:	461a      	mov	r2, r3
 8002436:	4623      	mov	r3, r4
 8002438:	71fb      	strb	r3, [r7, #7]
 800243a:	4603      	mov	r3, r0
 800243c:	80bb      	strh	r3, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	807b      	strh	r3, [r7, #2]
 8002442:	4613      	mov	r3, r2
 8002444:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8002446:	4b09      	ldr	r3, [pc, #36]	; (800246c <UG_PutChar+0x44>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	332c      	adds	r3, #44	; 0x2c
 800244c:	883c      	ldrh	r4, [r7, #0]
 800244e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002452:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002456:	79f8      	ldrb	r0, [r7, #7]
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	8b3b      	ldrh	r3, [r7, #24]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4623      	mov	r3, r4
 8002460:	f000 f852 	bl	8002508 <_UG_PutChar>
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	bd90      	pop	{r4, r7, pc}
 800246c:	2000065c 	.word	0x2000065c

08002470 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <UG_SetForecolor+0x20>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	88fa      	ldrh	r2, [r7, #6]
 8002480:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	2000065c 	.word	0x2000065c

08002494 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 800249e:	4b05      	ldr	r3, [pc, #20]	; (80024b4 <UG_SetBackcolor+0x20>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr
 80024b4:	2000065c 	.word	0x2000065c

080024b8 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <UG_FontSetHSpace+0x24>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	88fa      	ldrh	r2, [r7, #6]
 80024c8:	b252      	sxtb	r2, r2
 80024ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80024ce:	bf00      	nop
 80024d0:	370c      	adds	r7, #12
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	2000065c 	.word	0x2000065c

080024e0 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	4603      	mov	r3, r0
 80024e8:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <UG_FontSetVSpace+0x24>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	88fa      	ldrh	r2, [r7, #6]
 80024f0:	b252      	sxtb	r2, r2
 80024f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80024f6:	bf00      	nop
 80024f8:	370c      	adds	r7, #12
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	2000065c 	.word	0x2000065c

08002508 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8002508:	b5b0      	push	{r4, r5, r7, lr}
 800250a:	b08a      	sub	sp, #40	; 0x28
 800250c:	af00      	add	r7, sp, #0
 800250e:	4604      	mov	r4, r0
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	71fb      	strb	r3, [r7, #7]
 800251a:	4603      	mov	r3, r0
 800251c:	80bb      	strh	r3, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 800252a:	7e3b      	ldrb	r3, [r7, #24]
 800252c:	2bfc      	cmp	r3, #252	; 0xfc
 800252e:	dc77      	bgt.n	8002620 <_UG_PutChar+0x118>
 8002530:	2bd6      	cmp	r3, #214	; 0xd6
 8002532:	da08      	bge.n	8002546 <_UG_PutChar+0x3e>
 8002534:	2bc4      	cmp	r3, #196	; 0xc4
 8002536:	d06a      	beq.n	800260e <_UG_PutChar+0x106>
 8002538:	2bc4      	cmp	r3, #196	; 0xc4
 800253a:	dc71      	bgt.n	8002620 <_UG_PutChar+0x118>
 800253c:	2bb0      	cmp	r3, #176	; 0xb0
 800253e:	d06c      	beq.n	800261a <_UG_PutChar+0x112>
 8002540:	2bb5      	cmp	r3, #181	; 0xb5
 8002542:	d067      	beq.n	8002614 <_UG_PutChar+0x10c>
 8002544:	e06c      	b.n	8002620 <_UG_PutChar+0x118>
 8002546:	3bd6      	subs	r3, #214	; 0xd6
 8002548:	2b26      	cmp	r3, #38	; 0x26
 800254a:	d869      	bhi.n	8002620 <_UG_PutChar+0x118>
 800254c:	a201      	add	r2, pc, #4	; (adr r2, 8002554 <_UG_PutChar+0x4c>)
 800254e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002552:	bf00      	nop
 8002554:	080025f7 	.word	0x080025f7
 8002558:	08002621 	.word	0x08002621
 800255c:	08002621 	.word	0x08002621
 8002560:	08002621 	.word	0x08002621
 8002564:	08002621 	.word	0x08002621
 8002568:	08002621 	.word	0x08002621
 800256c:	08002603 	.word	0x08002603
 8002570:	08002621 	.word	0x08002621
 8002574:	08002621 	.word	0x08002621
 8002578:	08002621 	.word	0x08002621
 800257c:	08002621 	.word	0x08002621
 8002580:	08002621 	.word	0x08002621
 8002584:	08002621 	.word	0x08002621
 8002588:	08002621 	.word	0x08002621
 800258c:	08002609 	.word	0x08002609
 8002590:	08002621 	.word	0x08002621
 8002594:	08002621 	.word	0x08002621
 8002598:	08002621 	.word	0x08002621
 800259c:	08002621 	.word	0x08002621
 80025a0:	08002621 	.word	0x08002621
 80025a4:	08002621 	.word	0x08002621
 80025a8:	08002621 	.word	0x08002621
 80025ac:	08002621 	.word	0x08002621
 80025b0:	08002621 	.word	0x08002621
 80025b4:	08002621 	.word	0x08002621
 80025b8:	08002621 	.word	0x08002621
 80025bc:	08002621 	.word	0x08002621
 80025c0:	08002621 	.word	0x08002621
 80025c4:	08002621 	.word	0x08002621
 80025c8:	08002621 	.word	0x08002621
 80025cc:	08002621 	.word	0x08002621
 80025d0:	08002621 	.word	0x08002621
 80025d4:	080025f1 	.word	0x080025f1
 80025d8:	08002621 	.word	0x08002621
 80025dc:	08002621 	.word	0x08002621
 80025e0:	08002621 	.word	0x08002621
 80025e4:	08002621 	.word	0x08002621
 80025e8:	08002621 	.word	0x08002621
 80025ec:	080025fd 	.word	0x080025fd
   {
      case 0xF6: bt = 0x94; break; // ö
 80025f0:	2394      	movs	r3, #148	; 0x94
 80025f2:	763b      	strb	r3, [r7, #24]
 80025f4:	e014      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 80025f6:	2399      	movs	r3, #153	; 0x99
 80025f8:	763b      	strb	r3, [r7, #24]
 80025fa:	e011      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 80025fc:	2381      	movs	r3, #129	; 0x81
 80025fe:	763b      	strb	r3, [r7, #24]
 8002600:	e00e      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 8002602:	239a      	movs	r3, #154	; 0x9a
 8002604:	763b      	strb	r3, [r7, #24]
 8002606:	e00b      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 8002608:	2384      	movs	r3, #132	; 0x84
 800260a:	763b      	strb	r3, [r7, #24]
 800260c:	e008      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 800260e:	238e      	movs	r3, #142	; 0x8e
 8002610:	763b      	strb	r3, [r7, #24]
 8002612:	e005      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 8002614:	23e6      	movs	r3, #230	; 0xe6
 8002616:	763b      	strb	r3, [r7, #24]
 8002618:	e002      	b.n	8002620 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 800261a:	23f8      	movs	r3, #248	; 0xf8
 800261c:	763b      	strb	r3, [r7, #24]
 800261e:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8002620:	7e3b      	ldrb	r3, [r7, #24]
 8002622:	b29a      	uxth	r2, r3
 8002624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002626:	895b      	ldrh	r3, [r3, #10]
 8002628:	429a      	cmp	r2, r3
 800262a:	f0c0 81fc 	bcc.w	8002a26 <_UG_PutChar+0x51e>
 800262e:	7e3b      	ldrb	r3, [r7, #24]
 8002630:	b29a      	uxth	r2, r3
 8002632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002634:	899b      	ldrh	r3, [r3, #12]
 8002636:	429a      	cmp	r2, r3
 8002638:	f200 81f5 	bhi.w	8002a26 <_UG_PutChar+0x51e>

   yo = y;
 800263c:	887b      	ldrh	r3, [r7, #2]
 800263e:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8002640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002642:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002646:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8002648:	8b7b      	ldrh	r3, [r7, #26]
 800264a:	2b00      	cmp	r3, #0
 800264c:	f000 81ed 	beq.w	8002a2a <_UG_PutChar+0x522>
   bn >>= 3;
 8002650:	8b7b      	ldrh	r3, [r7, #26]
 8002652:	08db      	lsrs	r3, r3, #3
 8002654:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002658:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800265c:	b29b      	uxth	r3, r3
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	b29b      	uxth	r3, r3
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <_UG_PutChar+0x166>
 8002668:	8b7b      	ldrh	r3, [r7, #26]
 800266a:	3301      	adds	r3, #1
 800266c:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 800266e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d009      	beq.n	800268a <_UG_PutChar+0x182>
 8002676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	7e3a      	ldrb	r2, [r7, #24]
 800267c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800267e:	8949      	ldrh	r1, [r1, #10]
 8002680:	1a52      	subs	r2, r2, r1
 8002682:	4413      	add	r3, r2
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	e003      	b.n	8002692 <_UG_PutChar+0x18a>
 800268a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800268c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002690:	b29b      	uxth	r3, r3
 8002692:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8002694:	4b93      	ldr	r3, [pc, #588]	; (80028e4 <_UG_PutChar+0x3dc>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 800269c:	f003 0302 	and.w	r3, r3, #2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80d8 	beq.w	8002856 <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 80026a6:	4b8f      	ldr	r3, [pc, #572]	; (80028e4 <_UG_PutChar+0x3dc>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ac:	461d      	mov	r5, r3
 80026ae:	88ba      	ldrh	r2, [r7, #4]
 80026b0:	8a7b      	ldrh	r3, [r7, #18]
 80026b2:	4413      	add	r3, r2
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b21c      	sxth	r4, r3
 80026bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026be:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80026c2:	b29a      	uxth	r2, r3
 80026c4:	887b      	ldrh	r3, [r7, #2]
 80026c6:	4413      	add	r3, r2
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	b21b      	sxth	r3, r3
 80026d0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80026d4:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80026d8:	4622      	mov	r2, r4
 80026da:	47a8      	blx	r5
 80026dc:	4603      	mov	r3, r0
 80026de:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 80026e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e2:	791b      	ldrb	r3, [r3, #4]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d14d      	bne.n	8002784 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 80026e8:	7e3b      	ldrb	r3, [r7, #24]
 80026ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026ec:	8952      	ldrh	r2, [r2, #10]
 80026ee:	1a9b      	subs	r3, r3, r2
 80026f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026f2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	8b7a      	ldrh	r2, [r7, #26]
 80026fc:	fb02 f303 	mul.w	r3, r2, r3
 8002700:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 8002702:	2300      	movs	r3, #0
 8002704:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002706:	e036      	b.n	8002776 <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8002708:	8a7b      	ldrh	r3, [r7, #18]
 800270a:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 800270c:	2300      	movs	r3, #0
 800270e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002710:	e02a      	b.n	8002768 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 8002712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	1c59      	adds	r1, r3, #1
 800271a:	6179      	str	r1, [r7, #20]
 800271c:	4413      	add	r3, r2
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 8002722:	2300      	movs	r3, #0
 8002724:	847b      	strh	r3, [r7, #34]	; 0x22
 8002726:	e016      	b.n	8002756 <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8002728:	7e7b      	ldrb	r3, [r7, #25]
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	2b00      	cmp	r3, #0
 8002730:	d004      	beq.n	800273c <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 8002732:	883a      	ldrh	r2, [r7, #0]
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	4610      	mov	r0, r2
 8002738:	4798      	blx	r3
 800273a:	e003      	b.n	8002744 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 800273c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	4610      	mov	r0, r2
 8002742:	4798      	blx	r3
				   }
				   b >>= 1;
 8002744:	7e7b      	ldrb	r3, [r7, #25]
 8002746:	085b      	lsrs	r3, r3, #1
 8002748:	767b      	strb	r3, [r7, #25]
				   c--;
 800274a:	8bbb      	ldrh	r3, [r7, #28]
 800274c:	3b01      	subs	r3, #1
 800274e:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8002750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002752:	3301      	adds	r3, #1
 8002754:	847b      	strh	r3, [r7, #34]	; 0x22
 8002756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002758:	2b07      	cmp	r3, #7
 800275a:	d802      	bhi.n	8002762 <_UG_PutChar+0x25a>
 800275c:	8bbb      	ldrh	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e2      	bne.n	8002728 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8002762:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002764:	3301      	adds	r3, #1
 8002766:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002768:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800276a:	8b7b      	ldrh	r3, [r7, #26]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3d0      	bcc.n	8002712 <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8002770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002772:	3301      	adds	r3, #1
 8002774:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002778:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800277a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800277e:	4293      	cmp	r3, r2
 8002780:	dbc2      	blt.n	8002708 <_UG_PutChar+0x200>
 8002782:	e153      	b.n	8002a2c <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8002784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002786:	791b      	ldrb	r3, [r3, #4]
 8002788:	2b01      	cmp	r3, #1
 800278a:	f040 814f 	bne.w	8002a2c <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 800278e:	7e3b      	ldrb	r3, [r7, #24]
 8002790:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002792:	8952      	ldrh	r2, [r2, #10]
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002798:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800279c:	fb02 f303 	mul.w	r3, r2, r3
 80027a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80027a2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 80027ac:	2300      	movs	r3, #0
 80027ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80027b0:	e04a      	b.n	8002848 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 80027b2:	2300      	movs	r3, #0
 80027b4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80027b6:	e036      	b.n	8002826 <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 80027b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	1c59      	adds	r1, r3, #1
 80027c0:	6179      	str	r1, [r7, #20]
 80027c2:	4413      	add	r3, r2
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 80027c8:	883b      	ldrh	r3, [r7, #0]
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	7e7a      	ldrb	r2, [r7, #25]
 80027ce:	fb03 f202 	mul.w	r2, r3, r2
 80027d2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	7e79      	ldrb	r1, [r7, #25]
 80027d8:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80027dc:	fb01 f303 	mul.w	r3, r1, r3
 80027e0:	4413      	add	r3, r2
 80027e2:	121b      	asrs	r3, r3, #8
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	b21a      	sxth	r2, r3
 80027ea:	883b      	ldrh	r3, [r7, #0]
 80027ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80027f0:	7e79      	ldrb	r1, [r7, #25]
 80027f2:	fb03 f101 	mul.w	r1, r3, r1
 80027f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80027f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80027fc:	7e78      	ldrb	r0, [r7, #25]
 80027fe:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8002802:	fb00 f303 	mul.w	r3, r0, r3
 8002806:	440b      	add	r3, r1
 8002808:	121b      	asrs	r3, r3, #8
 800280a:	b21b      	sxth	r3, r3
 800280c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002810:	b21b      	sxth	r3, r3
 8002812:	4313      	orrs	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8002818:	8a3a      	ldrh	r2, [r7, #16]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	4610      	mov	r0, r2
 800281e:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8002820:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002822:	3301      	adds	r3, #1
 8002824:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002826:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002828:	8a7b      	ldrh	r3, [r7, #18]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3c4      	bcc.n	80027b8 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 800282e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002830:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002834:	461a      	mov	r2, r3
 8002836:	8a7b      	ldrh	r3, [r7, #18]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	461a      	mov	r2, r3
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	4413      	add	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8002842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002844:	3301      	adds	r3, #1
 8002846:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002848:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800284a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800284c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002850:	4293      	cmp	r3, r2
 8002852:	dbae      	blt.n	80027b2 <_UG_PutChar+0x2aa>
 8002854:	e0ea      	b.n	8002a2c <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8002856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002858:	791b      	ldrb	r3, [r3, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d16e      	bne.n	800293c <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 800285e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8002862:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002866:	8a7b      	ldrh	r3, [r7, #18]
 8002868:	4413      	add	r3, r2
 800286a:	3b01      	subs	r3, #1
 800286c:	461c      	mov	r4, r3
 800286e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002872:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002878:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800287c:	4413      	add	r3, r2
 800287e:	3b01      	subs	r3, #1
 8002880:	460a      	mov	r2, r1
 8002882:	4621      	mov	r1, r4
 8002884:	f000 f99c 	bl	8002bc0 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8002888:	f000 fa14 	bl	8002cb4 <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 800288c:	7e3b      	ldrb	r3, [r7, #24]
 800288e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002890:	8952      	ldrh	r2, [r2, #10]
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002896:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800289a:	fb02 f303 	mul.w	r3, r2, r3
 800289e:	8b7a      	ldrh	r2, [r7, #26]
 80028a0:	fb02 f303 	mul.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 80028a6:	2300      	movs	r3, #0
 80028a8:	84bb      	strh	r3, [r7, #36]	; 0x24
 80028aa:	e040      	b.n	800292e <_UG_PutChar+0x426>
         {
           xo = x;
 80028ac:	88bb      	ldrh	r3, [r7, #4]
 80028ae:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 80028b0:	8a7b      	ldrh	r3, [r7, #18]
 80028b2:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 80028b4:	2300      	movs	r3, #0
 80028b6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80028b8:	e02f      	b.n	800291a <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 80028ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	1c59      	adds	r1, r3, #1
 80028c2:	6179      	str	r1, [r7, #20]
 80028c4:	4413      	add	r3, r2
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 80028ca:	2300      	movs	r3, #0
 80028cc:	847b      	strh	r3, [r7, #34]	; 0x22
 80028ce:	e01b      	b.n	8002908 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 80028d0:	7e7b      	ldrb	r3, [r7, #25]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d006      	beq.n	80028e8 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 80028da:	883b      	ldrh	r3, [r7, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f000 f9f0 	bl	8002cc2 <SSD1963_ConsecutivePSet>
 80028e2:	e005      	b.n	80028f0 <_UG_PutChar+0x3e8>
 80028e4:	2000065c 	.word	0x2000065c
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 80028e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028ea:	4618      	mov	r0, r3
 80028ec:	f000 f9e9 	bl	8002cc2 <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 80028f0:	7e7b      	ldrb	r3, [r7, #25]
 80028f2:	085b      	lsrs	r3, r3, #1
 80028f4:	767b      	strb	r3, [r7, #25]
               xo++;
 80028f6:	8c3b      	ldrh	r3, [r7, #32]
 80028f8:	3301      	adds	r3, #1
 80028fa:	843b      	strh	r3, [r7, #32]
               c--;
 80028fc:	8bbb      	ldrh	r3, [r7, #28]
 80028fe:	3b01      	subs	r3, #1
 8002900:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8002902:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002904:	3301      	adds	r3, #1
 8002906:	847b      	strh	r3, [r7, #34]	; 0x22
 8002908:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800290a:	2b07      	cmp	r3, #7
 800290c:	d802      	bhi.n	8002914 <_UG_PutChar+0x40c>
 800290e:	8bbb      	ldrh	r3, [r7, #28]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1dd      	bne.n	80028d0 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 8002914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002916:	3301      	adds	r3, #1
 8002918:	84fb      	strh	r3, [r7, #38]	; 0x26
 800291a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800291c:	8b7b      	ldrh	r3, [r7, #26]
 800291e:	429a      	cmp	r2, r3
 8002920:	d3cb      	bcc.n	80028ba <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 8002922:	8bfb      	ldrh	r3, [r7, #30]
 8002924:	3301      	adds	r3, #1
 8002926:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8002928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800292a:	3301      	adds	r3, #1
 800292c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800292e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002930:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002932:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002936:	4293      	cmp	r3, r2
 8002938:	dbb8      	blt.n	80028ac <_UG_PutChar+0x3a4>
 800293a:	e077      	b.n	8002a2c <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 800293c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800293e:	791b      	ldrb	r3, [r3, #4]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d173      	bne.n	8002a2c <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8002944:	7e3b      	ldrb	r3, [r7, #24]
 8002946:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002948:	8952      	ldrh	r2, [r2, #10]
 800294a:	1a9b      	subs	r3, r3, r2
 800294c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800294e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002958:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8002962:	2300      	movs	r3, #0
 8002964:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002966:	e057      	b.n	8002a18 <_UG_PutChar+0x510>
         {
            xo = x;
 8002968:	88bb      	ldrh	r3, [r7, #4]
 800296a:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 800296c:	2300      	movs	r3, #0
 800296e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002970:	e03e      	b.n	80029f0 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 8002972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	1c59      	adds	r1, r3, #1
 800297a:	6179      	str	r1, [r7, #20]
 800297c:	4413      	add	r3, r2
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8002982:	883b      	ldrh	r3, [r7, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	7e7a      	ldrb	r2, [r7, #25]
 8002988:	fb03 f202 	mul.w	r2, r3, r2
 800298c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800298e:	b2db      	uxtb	r3, r3
 8002990:	7e79      	ldrb	r1, [r7, #25]
 8002992:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8002996:	fb01 f303 	mul.w	r3, r1, r3
 800299a:	4413      	add	r3, r2
 800299c:	121b      	asrs	r3, r3, #8
 800299e:	b21b      	sxth	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	b21a      	sxth	r2, r3
 80029a4:	883b      	ldrh	r3, [r7, #0]
 80029a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80029aa:	7e79      	ldrb	r1, [r7, #25]
 80029ac:	fb03 f101 	mul.w	r1, r3, r1
 80029b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80029b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80029b6:	7e78      	ldrb	r0, [r7, #25]
 80029b8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80029bc:	fb00 f303 	mul.w	r3, r0, r3
 80029c0:	440b      	add	r3, r1
 80029c2:	121b      	asrs	r3, r3, #8
 80029c4:	b21b      	sxth	r3, r3
 80029c6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80029ca:	b21b      	sxth	r3, r3
 80029cc:	4313      	orrs	r3, r2
 80029ce:	b21b      	sxth	r3, r3
 80029d0:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <_UG_PutChar+0x52c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80029dc:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80029e0:	8a3a      	ldrh	r2, [r7, #16]
 80029e2:	4798      	blx	r3
               xo++;
 80029e4:	8c3b      	ldrh	r3, [r7, #32]
 80029e6:	3301      	adds	r3, #1
 80029e8:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 80029ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80029ec:	3301      	adds	r3, #1
 80029ee:	84fb      	strh	r3, [r7, #38]	; 0x26
 80029f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80029f2:	8a7b      	ldrh	r3, [r7, #18]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d3bc      	bcc.n	8002972 <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 80029f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80029fe:	461a      	mov	r2, r3
 8002a00:	8a7b      	ldrh	r3, [r7, #18]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	4413      	add	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
            yo++;
 8002a0c:	8bfb      	ldrh	r3, [r7, #30]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8002a12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a14:	3301      	adds	r3, #1
 8002a16:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002a18:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a1a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a1c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002a20:	4293      	cmp	r3, r2
 8002a22:	dba1      	blt.n	8002968 <_UG_PutChar+0x460>
 8002a24:	e002      	b.n	8002a2c <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 8002a26:	bf00      	nop
 8002a28:	e000      	b.n	8002a2c <_UG_PutChar+0x524>
   if ( !bn ) return;
 8002a2a:	bf00      	nop
         }
      }
   }
}
 8002a2c:	3728      	adds	r7, #40	; 0x28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bdb0      	pop	{r4, r5, r7, pc}
 8002a32:	bf00      	nop
 8002a34:	2000065c 	.word	0x2000065c

08002a38 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8002a44:	79fb      	ldrb	r3, [r7, #7]
 8002a46:	2b06      	cmp	r3, #6
 8002a48:	d810      	bhi.n	8002a6c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8002a4a:	4b0b      	ldr	r3, [pc, #44]	; (8002a78 <UG_DriverRegister+0x40>)
 8002a4c:	681a      	ldr	r2, [r3, #0]
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	3309      	adds	r3, #9
 8002a52:	00db      	lsls	r3, r3, #3
 8002a54:	4413      	add	r3, r2
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8002a5a:	4b07      	ldr	r3, [pc, #28]	; (8002a78 <UG_DriverRegister+0x40>)
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	3309      	adds	r3, #9
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	4413      	add	r3, r2
 8002a66:	2203      	movs	r2, #3
 8002a68:	721a      	strb	r2, [r3, #8]
 8002a6a:	e000      	b.n	8002a6e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8002a6c:	bf00      	nop
}
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	2000065c 	.word	0x2000065c

08002a7c <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 8002a80:	2001      	movs	r0, #1
 8002a82:	f000 fa3e 	bl	8002f02 <write_command>
    HAL_Delay(10);
 8002a86:	200a      	movs	r0, #10
 8002a88:	f000 fb24 	bl	80030d4 <HAL_Delay>
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <SSD1963_Init>:

void SSD1963_Init()
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 8002a94:	f7ff fff2 	bl	8002a7c <SSD1963_Reset>

    write_command(0xe0);
 8002a98:	20e0      	movs	r0, #224	; 0xe0
 8002a9a:	f000 fa32 	bl	8002f02 <write_command>
    write_data(0x01);            //Enable PLL
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f000 fa4a 	bl	8002f38 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 8002aa4:	20e0      	movs	r0, #224	; 0xe0
 8002aa6:	f000 fa2c 	bl	8002f02 <write_command>
    write_data(0x03);            //Lock PLL
 8002aaa:	2003      	movs	r0, #3
 8002aac:	f000 fa44 	bl	8002f38 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8002ab0:	f7ff ffe4 	bl	8002a7c <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8002ab4:	20b0      	movs	r0, #176	; 0xb0
 8002ab6:	f000 fa24 	bl	8002f02 <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8002aba:	2008      	movs	r0, #8
 8002abc:	f000 fa3c 	bl	8002f38 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8002ac0:	2080      	movs	r0, #128	; 0x80
 8002ac2:	f000 fa39 	bl	8002f38 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 8002ac6:	2001      	movs	r0, #1
 8002ac8:	f000 fa36 	bl	8002f38 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8002acc:	20df      	movs	r0, #223	; 0xdf
 8002ace:	f000 fa33 	bl	8002f38 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f000 fa30 	bl	8002f38 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8002ad8:	200f      	movs	r0, #15
 8002ada:	f000 fa2d 	bl	8002f38 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8002ade:	2000      	movs	r0, #0
 8002ae0:	f000 fa2a 	bl	8002f38 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8002ae4:	20f0      	movs	r0, #240	; 0xf0
 8002ae6:	f000 fa0c 	bl	8002f02 <write_command>
    write_data(0x03);
 8002aea:	2003      	movs	r0, #3
 8002aec:	f000 fa24 	bl	8002f38 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8002af0:	20e6      	movs	r0, #230	; 0xe6
 8002af2:	f000 fa06 	bl	8002f02 <write_command>
    write_data(0x01);    //02
 8002af6:	2001      	movs	r0, #1
 8002af8:	f000 fa1e 	bl	8002f38 <write_data>
    write_data(0x45);    //ff
 8002afc:	2045      	movs	r0, #69	; 0x45
 8002afe:	f000 fa1b 	bl	8002f38 <write_data>
    write_data(0x47);    //ff
 8002b02:	2047      	movs	r0, #71	; 0x47
 8002b04:	f000 fa18 	bl	8002f38 <write_data>

    write_command(0xb4); //set HBP
 8002b08:	20b4      	movs	r0, #180	; 0xb4
 8002b0a:	f000 f9fa 	bl	8002f02 <write_command>
    write_data(0x02); //set Hsync = 600
 8002b0e:	2002      	movs	r0, #2
 8002b10:	f000 fa12 	bl	8002f38 <write_data>
    write_data(0x0d);
 8002b14:	200d      	movs	r0, #13
 8002b16:	f000 fa0f 	bl	8002f38 <write_data>
    write_data(0x00);    //set HBP 68
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f000 fa0c 	bl	8002f38 <write_data>
    write_data(0x2b);
 8002b20:	202b      	movs	r0, #43	; 0x2b
 8002b22:	f000 fa09 	bl	8002f38 <write_data>
    write_data(0x28);    //set VBP 16
 8002b26:	2028      	movs	r0, #40	; 0x28
 8002b28:	f000 fa06 	bl	8002f38 <write_data>
    write_data(0x00);    //Set Hsync start position
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f000 fa03 	bl	8002f38 <write_data>
    write_data(0x00);
 8002b32:	2000      	movs	r0, #0
 8002b34:	f000 fa00 	bl	8002f38 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8002b38:	2000      	movs	r0, #0
 8002b3a:	f000 f9fd 	bl	8002f38 <write_data>

    write_command(0xb6); //set VBP
 8002b3e:	20b6      	movs	r0, #182	; 0xb6
 8002b40:	f000 f9df 	bl	8002f02 <write_command>
    write_data(0x01);    //set Vsync total 360
 8002b44:	2001      	movs	r0, #1
 8002b46:	f000 f9f7 	bl	8002f38 <write_data>
    write_data(0x1d);
 8002b4a:	201d      	movs	r0, #29
 8002b4c:	f000 f9f4 	bl	8002f38 <write_data>
    write_data(0x00);    //set VBP = 19
 8002b50:	2000      	movs	r0, #0
 8002b52:	f000 f9f1 	bl	8002f38 <write_data>
    write_data(0x0c);
 8002b56:	200c      	movs	r0, #12
 8002b58:	f000 f9ee 	bl	8002f38 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 8002b5c:	2009      	movs	r0, #9
 8002b5e:	f000 f9eb 	bl	8002f38 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 8002b62:	2000      	movs	r0, #0
 8002b64:	f000 f9e8 	bl	8002f38 <write_data>
    write_data(0x00);
 8002b68:	2000      	movs	r0, #0
 8002b6a:	f000 f9e5 	bl	8002f38 <write_data>

    write_command(0x2a); //set column address
 8002b6e:	202a      	movs	r0, #42	; 0x2a
 8002b70:	f000 f9c7 	bl	8002f02 <write_command>
    write_data(0x00);    //set start column address 0
 8002b74:	2000      	movs	r0, #0
 8002b76:	f000 f9df 	bl	8002f38 <write_data>
    write_data(0x00);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f000 f9dc 	bl	8002f38 <write_data>
    write_data(0x01);    //set end column address = 479
 8002b80:	2001      	movs	r0, #1
 8002b82:	f000 f9d9 	bl	8002f38 <write_data>
    write_data(0xdf);
 8002b86:	20df      	movs	r0, #223	; 0xdf
 8002b88:	f000 f9d6 	bl	8002f38 <write_data>

    write_command(0x2b); //set page address
 8002b8c:	202b      	movs	r0, #43	; 0x2b
 8002b8e:	f000 f9b8 	bl	8002f02 <write_command>
    write_data(0x00);    //set start page address = 0
 8002b92:	2000      	movs	r0, #0
 8002b94:	f000 f9d0 	bl	8002f38 <write_data>
    write_data(0x00);
 8002b98:	2000      	movs	r0, #0
 8002b9a:	f000 f9cd 	bl	8002f38 <write_data>
    write_data(0x01);    //set end column address = 479
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f000 f9ca 	bl	8002f38 <write_data>
    write_data(0x0f);
 8002ba4:	200f      	movs	r0, #15
 8002ba6:	f000 f9c7 	bl	8002f38 <write_data>

    write_command(0x13); //set normal mode
 8002baa:	2013      	movs	r0, #19
 8002bac:	f000 f9a9 	bl	8002f02 <write_command>
    write_command(0x38); //set normal mode
 8002bb0:	2038      	movs	r0, #56	; 0x38
 8002bb2:	f000 f9a6 	bl	8002f02 <write_command>
    write_command(0x29); //set display on
 8002bb6:	2029      	movs	r0, #41	; 0x29
 8002bb8:	f000 f9a3 	bl	8002f02 <write_command>
}
 8002bbc:	bf00      	nop
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b086      	sub	sp, #24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	0a1b      	lsrs	r3, r3, #8
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8002bfa:	202a      	movs	r0, #42	; 0x2a
 8002bfc:	f000 f981 	bl	8002f02 <write_command>
    write_multi_data(data, 4);
 8002c00:	f107 0310 	add.w	r3, r7, #16
 8002c04:	2104      	movs	r1, #4
 8002c06:	4618      	mov	r0, r3
 8002c08:	f000 f9b0 	bl	8002f6c <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	0a1b      	lsrs	r3, r3, #8
 8002c10:	b29b      	uxth	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8002c38:	202b      	movs	r0, #43	; 0x2b
 8002c3a:	f000 f962 	bl	8002f02 <write_command>
    write_multi_data(data, 4);
 8002c3e:	f107 0310 	add.w	r3, r7, #16
 8002c42:	2104      	movs	r1, #4
 8002c44:	4618      	mov	r0, r3
 8002c46:	f000 f991 	bl	8002f6c <write_multi_data>
}
 8002c4a:	bf00      	nop
 8002c4c:	3718      	adds	r7, #24
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8002c52:	b580      	push	{r7, lr}
 8002c54:	b082      	sub	sp, #8
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	4603      	mov	r3, r0
 8002c5a:	80fb      	strh	r3, [r7, #6]
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	80bb      	strh	r3, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8002c64:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	db1f      	blt.n	8002cac <SSD1963_PSet+0x5a>
 8002c6c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c70:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002c74:	da1a      	bge.n	8002cac <SSD1963_PSet+0x5a>
 8002c76:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	db16      	blt.n	8002cac <SSD1963_PSet+0x5a>
 8002c7e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c82:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002c86:	da11      	bge.n	8002cac <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8002c88:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002c8c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002c90:	3301      	adds	r3, #1
 8002c92:	4619      	mov	r1, r3
 8002c94:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002c98:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f7ff ff8f 	bl	8002bc0 <SSD1963_WindowSet>
    write_data(c);
 8002ca2:	887b      	ldrh	r3, [r7, #2]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f000 f947 	bl	8002f38 <write_data>
 8002caa:	e000      	b.n	8002cae <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8002cac:	bf00      	nop
}
 8002cae:	3708      	adds	r7, #8
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8002cb8:	202c      	movs	r0, #44	; 0x2c
 8002cba:	f000 f922 	bl	8002f02 <write_command>
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}

08002cc2 <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 8002cc2:	b580      	push	{r7, lr}
 8002cc4:	b082      	sub	sp, #8
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	4603      	mov	r3, r0
 8002cca:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 8002ccc:	88fb      	ldrh	r3, [r7, #6]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 f932 	bl	8002f38 <write_data>
}
 8002cd4:	bf00      	nop
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4604      	mov	r4, r0
 8002ce4:	4608      	mov	r0, r1
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	461a      	mov	r2, r3
 8002cea:	4623      	mov	r3, r4
 8002cec:	80fb      	strh	r3, [r7, #6]
 8002cee:	4603      	mov	r3, r0
 8002cf0:	80bb      	strh	r3, [r7, #4]
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	807b      	strh	r3, [r7, #2]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002cfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	db0d      	blt.n	8002d1e <HW_FillFrame+0x42>
 8002d02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d06:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002d0a:	da08      	bge.n	8002d1e <HW_FillFrame+0x42>
 8002d0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db04      	blt.n	8002d1e <HW_FillFrame+0x42>
 8002d14:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d18:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002d1c:	db02      	blt.n	8002d24 <HW_FillFrame+0x48>
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	e03c      	b.n	8002d9e <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002d24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0d      	blt.n	8002d48 <HW_FillFrame+0x6c>
 8002d2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002d30:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002d34:	da08      	bge.n	8002d48 <HW_FillFrame+0x6c>
 8002d36:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	db04      	blt.n	8002d48 <HW_FillFrame+0x6c>
 8002d3e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d42:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002d46:	db02      	blt.n	8002d4e <HW_FillFrame+0x72>
 8002d48:	f04f 33ff 	mov.w	r3, #4294967295
 8002d4c:	e027      	b.n	8002d9e <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8002d4e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002d52:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002d56:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002d5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002d5e:	f7ff ff2f 	bl	8002bc0 <SSD1963_WindowSet>

    write_command(0x2c);
 8002d62:	202c      	movs	r0, #44	; 0x2c
 8002d64:	f000 f8cd 	bl	8002f02 <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8002d68:	88fb      	ldrh	r3, [r7, #6]
 8002d6a:	81fb      	strh	r3, [r7, #14]
 8002d6c:	e011      	b.n	8002d92 <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8002d6e:	88bb      	ldrh	r3, [r7, #4]
 8002d70:	81bb      	strh	r3, [r7, #12]
 8002d72:	e006      	b.n	8002d82 <HW_FillFrame+0xa6>
        {
            write_data(c);
 8002d74:	8c3b      	ldrh	r3, [r7, #32]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f8de 	bl	8002f38 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8002d7c:	89bb      	ldrh	r3, [r7, #12]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	81bb      	strh	r3, [r7, #12]
 8002d82:	f9b7 2000 	ldrsh.w	r2, [r7]
 8002d86:	89bb      	ldrh	r3, [r7, #12]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	daf3      	bge.n	8002d74 <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8002d8c:	89fb      	ldrh	r3, [r7, #14]
 8002d8e:	3301      	adds	r3, #1
 8002d90:	81fb      	strh	r3, [r7, #14]
 8002d92:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	dae8      	bge.n	8002d6e <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8002d9c:	2300      	movs	r3, #0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd90      	pop	{r4, r7, pc}

08002da6 <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8002da6:	b590      	push	{r4, r7, lr}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af02      	add	r7, sp, #8
 8002dac:	4604      	mov	r4, r0
 8002dae:	4608      	mov	r0, r1
 8002db0:	4611      	mov	r1, r2
 8002db2:	461a      	mov	r2, r3
 8002db4:	4623      	mov	r3, r4
 8002db6:	80fb      	strh	r3, [r7, #6]
 8002db8:	4603      	mov	r3, r0
 8002dba:	80bb      	strh	r3, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	807b      	strh	r3, [r7, #2]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002dc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	db0d      	blt.n	8002de8 <HW_DrawLine+0x42>
 8002dcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dd0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002dd4:	da08      	bge.n	8002de8 <HW_DrawLine+0x42>
 8002dd6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	db04      	blt.n	8002de8 <HW_DrawLine+0x42>
 8002dde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002de2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002de6:	db02      	blt.n	8002dee <HW_DrawLine+0x48>
 8002de8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dec:	e031      	b.n	8002e52 <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002dee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0d      	blt.n	8002e12 <HW_DrawLine+0x6c>
 8002df6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002dfa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002dfe:	da08      	bge.n	8002e12 <HW_DrawLine+0x6c>
 8002e00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	db04      	blt.n	8002e12 <HW_DrawLine+0x6c>
 8002e08:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e0c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002e10:	db02      	blt.n	8002e18 <HW_DrawLine+0x72>
 8002e12:	f04f 33ff 	mov.w	r3, #4294967295
 8002e16:	e01c      	b.n	8002e52 <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8002e18:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002e1c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d005      	beq.n	8002e30 <HW_DrawLine+0x8a>
 8002e24:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002e28:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d10e      	bne.n	8002e4e <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8002e30:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002e34:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002e38:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8002e3c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e40:	8b3b      	ldrh	r3, [r7, #24]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4623      	mov	r3, r4
 8002e46:	f7ff ff49 	bl	8002cdc <HW_FillFrame>
        return UG_RESULT_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e001      	b.n	8002e52 <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 8002e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd90      	pop	{r4, r7, pc}

08002e5a <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 8002e5a:	b590      	push	{r4, r7, lr}
 8002e5c:	b083      	sub	sp, #12
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4604      	mov	r4, r0
 8002e62:	4608      	mov	r0, r1
 8002e64:	4611      	mov	r1, r2
 8002e66:	461a      	mov	r2, r3
 8002e68:	4623      	mov	r3, r4
 8002e6a:	80fb      	strh	r3, [r7, #6]
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	80bb      	strh	r3, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	807b      	strh	r3, [r7, #2]
 8002e74:	4613      	mov	r3, r2
 8002e76:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002e78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	db0d      	blt.n	8002e9c <HW_DrawImage+0x42>
 8002e80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e84:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002e88:	da08      	bge.n	8002e9c <HW_DrawImage+0x42>
 8002e8a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	db04      	blt.n	8002e9c <HW_DrawImage+0x42>
 8002e92:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002e96:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002e9a:	db02      	blt.n	8002ea2 <HW_DrawImage+0x48>
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea0:	e02b      	b.n	8002efa <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002ea2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	db0d      	blt.n	8002ec6 <HW_DrawImage+0x6c>
 8002eaa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002eae:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002eb2:	da08      	bge.n	8002ec6 <HW_DrawImage+0x6c>
 8002eb4:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	db04      	blt.n	8002ec6 <HW_DrawImage+0x6c>
 8002ebc:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002ec0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002ec4:	db02      	blt.n	8002ecc <HW_DrawImage+0x72>
 8002ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eca:	e016      	b.n	8002efa <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8002ecc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002ed0:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002ed4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002ed8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002edc:	f7ff fe70 	bl	8002bc0 <SSD1963_WindowSet>

    write_command(0x2c);
 8002ee0:	202c      	movs	r0, #44	; 0x2c
 8002ee2:	f000 f80e 	bl	8002f02 <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 8002ee6:	8bbb      	ldrh	r3, [r7, #28]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	0052      	lsls	r2, r2, #1
 8002eec:	4413      	add	r3, r2
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	4619      	mov	r1, r3
 8002ef2:	69b8      	ldr	r0, [r7, #24]
 8002ef4:	f000 f83a 	bl	8002f6c <write_multi_data>

    return UG_RESULT_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd90      	pop	{r4, r7, pc}

08002f02 <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b085      	sub	sp, #20
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	4603      	mov	r3, r0
 8002f0a:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 8002f0c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002f10:	79fa      	ldrb	r2, [r7, #7]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002f16:	2300      	movs	r3, #0
 8002f18:	81fb      	strh	r3, [r7, #14]
 8002f1a:	e002      	b.n	8002f22 <write_command+0x20>
 8002f1c:	89fb      	ldrh	r3, [r7, #14]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	81fb      	strh	r3, [r7, #14]
 8002f22:	89fb      	ldrh	r3, [r7, #14]
 8002f24:	2b0b      	cmp	r3, #11
 8002f26:	d9f9      	bls.n	8002f1c <write_command+0x1a>
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <write_data>:


void write_data(DATA_t data)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	4603      	mov	r3, r0
 8002f40:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 8002f42:	4a09      	ldr	r2, [pc, #36]	; (8002f68 <write_data+0x30>)
 8002f44:	88fb      	ldrh	r3, [r7, #6]
 8002f46:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002f48:	2300      	movs	r3, #0
 8002f4a:	81fb      	strh	r3, [r7, #14]
 8002f4c:	e002      	b.n	8002f54 <write_data+0x1c>
 8002f4e:	89fb      	ldrh	r3, [r7, #14]
 8002f50:	3301      	adds	r3, #1
 8002f52:	81fb      	strh	r3, [r7, #14]
 8002f54:	89fb      	ldrh	r3, [r7, #14]
 8002f56:	2b0b      	cmp	r3, #11
 8002f58:	d9f9      	bls.n	8002f4e <write_data+0x16>
 }
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	3714      	adds	r7, #20
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr
 8002f68:	60000100 	.word	0x60000100

08002f6c <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	81fb      	strh	r3, [r7, #14]
 8002f7c:	e016      	b.n	8002fac <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 8002f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4413      	add	r3, r2
 8002f88:	4a0e      	ldr	r2, [pc, #56]	; (8002fc4 <write_multi_data+0x58>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002f8e:	2300      	movs	r3, #0
 8002f90:	81bb      	strh	r3, [r7, #12]
 8002f92:	e002      	b.n	8002f9a <write_multi_data+0x2e>
 8002f94:	89bb      	ldrh	r3, [r7, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	81bb      	strh	r3, [r7, #12]
 8002f9a:	89bb      	ldrh	r3, [r7, #12]
 8002f9c:	2b0b      	cmp	r3, #11
 8002f9e:	d9f9      	bls.n	8002f94 <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 8002fa0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	81fb      	strh	r3, [r7, #14]
 8002fac:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	dbe3      	blt.n	8002f7e <write_multi_data+0x12>
    }
}
 8002fb6:	bf00      	nop
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	60000100 	.word	0x60000100

08002fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fcc:	480d      	ldr	r0, [pc, #52]	; (8003004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fce:	490e      	ldr	r1, [pc, #56]	; (8003008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd0:	4a0e      	ldr	r2, [pc, #56]	; (800300c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd4:	e002      	b.n	8002fdc <LoopCopyDataInit>

08002fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fda:	3304      	adds	r3, #4

08002fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe0:	d3f9      	bcc.n	8002fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe2:	4a0b      	ldr	r2, [pc, #44]	; (8003010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe4:	4c0b      	ldr	r4, [pc, #44]	; (8003014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fe8:	e001      	b.n	8002fee <LoopFillZerobss>

08002fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fec:	3204      	adds	r2, #4

08002fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff0:	d3fb      	bcc.n	8002fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ff2:	f7fe ffbf 	bl	8001f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ff6:	f009 fbd9 	bl	800c7ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffa:	f7fd ffff 	bl	8000ffc <main>
  bx  lr    
 8002ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003000:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003008:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800300c:	0801c594 	.word	0x0801c594
  ldr r2, =_sbss
 8003010:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8003014:	20002194 	.word	0x20002194

08003018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003018:	e7fe      	b.n	8003018 <ADC_IRQHandler>

0800301a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800301a:	b580      	push	{r7, lr}
 800301c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800301e:	2003      	movs	r0, #3
 8003020:	f001 f81c 	bl	800405c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003024:	200f      	movs	r0, #15
 8003026:	f000 f805 	bl	8003034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800302a:	f7fe fc41 	bl	80018b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800302e:	2300      	movs	r3, #0
}
 8003030:	4618      	mov	r0, r3
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800303c:	4b12      	ldr	r3, [pc, #72]	; (8003088 <HAL_InitTick+0x54>)
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_InitTick+0x58>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	4619      	mov	r1, r3
 8003046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800304a:	fbb3 f3f1 	udiv	r3, r3, r1
 800304e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003052:	4618      	mov	r0, r3
 8003054:	f001 f837 	bl	80040c6 <HAL_SYSTICK_Config>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e00e      	b.n	8003080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2b0f      	cmp	r3, #15
 8003066:	d80a      	bhi.n	800307e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003068:	2200      	movs	r2, #0
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295
 8003070:	f000 ffff 	bl	8004072 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003074:	4a06      	ldr	r2, [pc, #24]	; (8003090 <HAL_InitTick+0x5c>)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800307a:	2300      	movs	r3, #0
 800307c:	e000      	b.n	8003080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	2000008c 	.word	0x2000008c
 800308c:	20000094 	.word	0x20000094
 8003090:	20000090 	.word	0x20000090

08003094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003098:	4b06      	ldr	r3, [pc, #24]	; (80030b4 <HAL_IncTick+0x20>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	4b06      	ldr	r3, [pc, #24]	; (80030b8 <HAL_IncTick+0x24>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4413      	add	r3, r2
 80030a4:	4a04      	ldr	r2, [pc, #16]	; (80030b8 <HAL_IncTick+0x24>)
 80030a6:	6013      	str	r3, [r2, #0]
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000094 	.word	0x20000094
 80030b8:	20000660 	.word	0x20000660

080030bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  return uwTick;
 80030c0:	4b03      	ldr	r3, [pc, #12]	; (80030d0 <HAL_GetTick+0x14>)
 80030c2:	681b      	ldr	r3, [r3, #0]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	20000660 	.word	0x20000660

080030d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7ff ffee 	bl	80030bc <HAL_GetTick>
 80030e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030ec:	d005      	beq.n	80030fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030ee:	4b0a      	ldr	r3, [pc, #40]	; (8003118 <HAL_Delay+0x44>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	461a      	mov	r2, r3
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4413      	add	r3, r2
 80030f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030fa:	bf00      	nop
 80030fc:	f7ff ffde 	bl	80030bc <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	429a      	cmp	r2, r3
 800310a:	d8f7      	bhi.n	80030fc <HAL_Delay+0x28>
  {
  }
}
 800310c:	bf00      	nop
 800310e:	bf00      	nop
 8003110:	3710      	adds	r7, #16
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	20000094 	.word	0x20000094

0800311c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003124:	2300      	movs	r3, #0
 8003126:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d101      	bne.n	8003132 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e031      	b.n	8003196 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b00      	cmp	r3, #0
 8003138:	d109      	bne.n	800314e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7fe fbdc 	bl	80018f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	d116      	bne.n	8003188 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800315e:	4b10      	ldr	r3, [pc, #64]	; (80031a0 <HAL_ADC_Init+0x84>)
 8003160:	4013      	ands	r3, r2
 8003162:	f043 0202 	orr.w	r2, r3, #2
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f970 	bl	8003450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317a:	f023 0303 	bic.w	r3, r3, #3
 800317e:	f043 0201 	orr.w	r2, r3, #1
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	641a      	str	r2, [r3, #64]	; 0x40
 8003186:	e001      	b.n	800318c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3710      	adds	r7, #16
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}
 800319e:	bf00      	nop
 80031a0:	ffffeefd 	.word	0xffffeefd

080031a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b085      	sub	sp, #20
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
 80031ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80031ae:	2300      	movs	r3, #0
 80031b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x1c>
 80031bc:	2302      	movs	r3, #2
 80031be:	e136      	b.n	800342e <HAL_ADC_ConfigChannel+0x28a>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d93a      	bls.n	8003246 <HAL_ADC_ConfigChannel+0xa2>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031d8:	d035      	beq.n	8003246 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68d9      	ldr	r1, [r3, #12]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	461a      	mov	r2, r3
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	3b1e      	subs	r3, #30
 80031f0:	2207      	movs	r2, #7
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	400a      	ands	r2, r1
 80031fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a8d      	ldr	r2, [pc, #564]	; (800343c <HAL_ADC_ConfigChannel+0x298>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d10a      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68d9      	ldr	r1, [r3, #12]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	061a      	lsls	r2, r3, #24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800321e:	e035      	b.n	800328c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68d9      	ldr	r1, [r3, #12]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	b29b      	uxth	r3, r3
 8003230:	4618      	mov	r0, r3
 8003232:	4603      	mov	r3, r0
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	4403      	add	r3, r0
 8003238:	3b1e      	subs	r3, #30
 800323a:	409a      	lsls	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003244:	e022      	b.n	800328c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6919      	ldr	r1, [r3, #16]
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	b29b      	uxth	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	4613      	mov	r3, r2
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4413      	add	r3, r2
 800325a:	2207      	movs	r2, #7
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	43da      	mvns	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	400a      	ands	r2, r1
 8003268:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	6919      	ldr	r1, [r3, #16]
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b29b      	uxth	r3, r3
 800327a:	4618      	mov	r0, r3
 800327c:	4603      	mov	r3, r0
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	4403      	add	r3, r0
 8003282:	409a      	lsls	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	2b06      	cmp	r3, #6
 8003292:	d824      	bhi.n	80032de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685a      	ldr	r2, [r3, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4413      	add	r3, r2
 80032a4:	3b05      	subs	r3, #5
 80032a6:	221f      	movs	r2, #31
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43da      	mvns	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	400a      	ands	r2, r1
 80032b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4413      	add	r3, r2
 80032ce:	3b05      	subs	r3, #5
 80032d0:	fa00 f203 	lsl.w	r2, r0, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	430a      	orrs	r2, r1
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
 80032dc:	e04c      	b.n	8003378 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	2b0c      	cmp	r3, #12
 80032e4:	d824      	bhi.n	8003330 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	3b23      	subs	r3, #35	; 0x23
 80032f8:	221f      	movs	r2, #31
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43da      	mvns	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	400a      	ands	r2, r1
 8003306:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	b29b      	uxth	r3, r3
 8003314:	4618      	mov	r0, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	3b23      	subs	r3, #35	; 0x23
 8003322:	fa00 f203 	lsl.w	r2, r0, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	631a      	str	r2, [r3, #48]	; 0x30
 800332e:	e023      	b.n	8003378 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	3b41      	subs	r3, #65	; 0x41
 8003342:	221f      	movs	r2, #31
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	43da      	mvns	r2, r3
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	400a      	ands	r2, r1
 8003350:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	b29b      	uxth	r3, r3
 800335e:	4618      	mov	r0, r3
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	3b41      	subs	r3, #65	; 0x41
 800336c:	fa00 f203 	lsl.w	r2, r0, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	430a      	orrs	r2, r1
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a30      	ldr	r2, [pc, #192]	; (8003440 <HAL_ADC_ConfigChannel+0x29c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d10a      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1f4>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 8003392:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8003396:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a28      	ldr	r2, [pc, #160]	; (8003440 <HAL_ADC_ConfigChannel+0x29c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d10f      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x21e>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b12      	cmp	r3, #18
 80033a8:	d10b      	bne.n	80033c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80033aa:	4b26      	ldr	r3, [pc, #152]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	4a25      	ldr	r2, [pc, #148]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	4a22      	ldr	r2, [pc, #136]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a1e      	ldr	r2, [pc, #120]	; (8003440 <HAL_ADC_ConfigChannel+0x29c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d12b      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x280>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a1a      	ldr	r2, [pc, #104]	; (800343c <HAL_ADC_ConfigChannel+0x298>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d003      	beq.n	80033de <HAL_ADC_ConfigChannel+0x23a>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2b11      	cmp	r3, #17
 80033dc:	d122      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80033de:	4b19      	ldr	r3, [pc, #100]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a18      	ldr	r2, [pc, #96]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80033e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033ea:	4b16      	ldr	r3, [pc, #88]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_ADC_ConfigChannel+0x2a0>)
 80033f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a10      	ldr	r2, [pc, #64]	; (800343c <HAL_ADC_ConfigChannel+0x298>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d111      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003400:	4b11      	ldr	r3, [pc, #68]	; (8003448 <HAL_ADC_ConfigChannel+0x2a4>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_ADC_ConfigChannel+0x2a8>)
 8003406:	fba2 2303 	umull	r2, r3, r2, r3
 800340a:	0c9a      	lsrs	r2, r3, #18
 800340c:	4613      	mov	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	4413      	add	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003416:	e002      	b.n	800341e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3b01      	subs	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f9      	bne.n	8003418 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3714      	adds	r7, #20
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	10000012 	.word	0x10000012
 8003440:	40012000 	.word	0x40012000
 8003444:	40012300 	.word	0x40012300
 8003448:	2000008c 	.word	0x2000008c
 800344c:	431bde83 	.word	0x431bde83

08003450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003458:	4b78      	ldr	r3, [pc, #480]	; (800363c <ADC_Init+0x1ec>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a77      	ldr	r2, [pc, #476]	; (800363c <ADC_Init+0x1ec>)
 800345e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003462:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003464:	4b75      	ldr	r3, [pc, #468]	; (800363c <ADC_Init+0x1ec>)
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	4973      	ldr	r1, [pc, #460]	; (800363c <ADC_Init+0x1ec>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	685a      	ldr	r2, [r3, #4]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6859      	ldr	r1, [r3, #4]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	691b      	ldr	r3, [r3, #16]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6899      	ldr	r1, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034de:	4a58      	ldr	r2, [pc, #352]	; (8003640 <ADC_Init+0x1f0>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d022      	beq.n	800352a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689a      	ldr	r2, [r3, #8]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	6899      	ldr	r1, [r3, #8]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6899      	ldr	r1, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	e00f      	b.n	800354a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689a      	ldr	r2, [r3, #8]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f022 0202 	bic.w	r2, r2, #2
 8003558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	6899      	ldr	r1, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	005a      	lsls	r2, r3, #1
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01b      	beq.n	80035b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685a      	ldr	r2, [r3, #4]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	685a      	ldr	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6859      	ldr	r1, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	3b01      	subs	r3, #1
 80035a4:	035a      	lsls	r2, r3, #13
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	e007      	b.n	80035c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	685a      	ldr	r2, [r3, #4]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80035ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	3b01      	subs	r3, #1
 80035dc:	051a      	lsls	r2, r3, #20
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	6899      	ldr	r1, [r3, #8]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003602:	025a      	lsls	r2, r3, #9
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	430a      	orrs	r2, r1
 800360a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800361a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6899      	ldr	r1, [r3, #8]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	029a      	lsls	r2, r3, #10
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	430a      	orrs	r2, r1
 800362e:	609a      	str	r2, [r3, #8]
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	40012300 	.word	0x40012300
 8003640:	0f000001 	.word	0x0f000001

08003644 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e0ed      	b.n	8003832 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3020 	ldrb.w	r3, [r3, #32]
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d102      	bne.n	8003668 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7fe f9ea 	bl	8001a3c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f042 0201 	orr.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003678:	f7ff fd20 	bl	80030bc <HAL_GetTick>
 800367c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800367e:	e012      	b.n	80036a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003680:	f7ff fd1c 	bl	80030bc <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d90b      	bls.n	80036a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2205      	movs	r2, #5
 800369e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e0c5      	b.n	8003832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0e5      	beq.n	8003680 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0202 	bic.w	r2, r2, #2
 80036c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c4:	f7ff fcfa 	bl	80030bc <HAL_GetTick>
 80036c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036ca:	e012      	b.n	80036f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036cc:	f7ff fcf6 	bl	80030bc <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b0a      	cmp	r3, #10
 80036d8:	d90b      	bls.n	80036f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2205      	movs	r2, #5
 80036ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e09f      	b.n	8003832 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1e5      	bne.n	80036cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	7e1b      	ldrb	r3, [r3, #24]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d108      	bne.n	800371a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681a      	ldr	r2, [r3, #0]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003716:	601a      	str	r2, [r3, #0]
 8003718:	e007      	b.n	800372a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	7e5b      	ldrb	r3, [r3, #25]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d108      	bne.n	8003744 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	e007      	b.n	8003754 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003752:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	7e9b      	ldrb	r3, [r3, #26]
 8003758:	2b01      	cmp	r3, #1
 800375a:	d108      	bne.n	800376e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0220 	orr.w	r2, r2, #32
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e007      	b.n	800377e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0220 	bic.w	r2, r2, #32
 800377c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	7edb      	ldrb	r3, [r3, #27]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d108      	bne.n	8003798 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0210 	bic.w	r2, r2, #16
 8003794:	601a      	str	r2, [r3, #0]
 8003796:	e007      	b.n	80037a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0210 	orr.w	r2, r2, #16
 80037a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	7f1b      	ldrb	r3, [r3, #28]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d108      	bne.n	80037c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f042 0208 	orr.w	r2, r2, #8
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	e007      	b.n	80037d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0208 	bic.w	r2, r2, #8
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	7f5b      	ldrb	r3, [r3, #29]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d108      	bne.n	80037ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681a      	ldr	r2, [r3, #0]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f042 0204 	orr.w	r2, r2, #4
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e007      	b.n	80037fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f022 0204 	bic.w	r2, r2, #4
 80037fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	431a      	orrs	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	431a      	orrs	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	695b      	ldr	r3, [r3, #20]
 8003810:	ea42 0103 	orr.w	r1, r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	1e5a      	subs	r2, r3, #1
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800383a:	b480      	push	{r7}
 800383c:	b087      	sub	sp, #28
 800383e:	af00      	add	r7, sp, #0
 8003840:	60f8      	str	r0, [r7, #12]
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800384e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d003      	beq.n	800385e <HAL_CAN_GetRxMessage+0x24>
 8003856:	7dfb      	ldrb	r3, [r7, #23]
 8003858:	2b02      	cmp	r3, #2
 800385a:	f040 80f3 	bne.w	8003a44 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10e      	bne.n	8003882 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d116      	bne.n	80038a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e0e7      	b.n	8003a52 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b00      	cmp	r3, #0
 800388e:	d107      	bne.n	80038a0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e0d8      	b.n	8003a52 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681a      	ldr	r2, [r3, #0]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	331b      	adds	r3, #27
 80038a8:	011b      	lsls	r3, r3, #4
 80038aa:	4413      	add	r3, r2
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 0204 	and.w	r2, r3, #4
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10c      	bne.n	80038d8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	331b      	adds	r3, #27
 80038c6:	011b      	lsls	r3, r3, #4
 80038c8:	4413      	add	r3, r2
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	0d5b      	lsrs	r3, r3, #21
 80038ce:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	601a      	str	r2, [r3, #0]
 80038d6:	e00b      	b.n	80038f0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	331b      	adds	r3, #27
 80038e0:	011b      	lsls	r3, r3, #4
 80038e2:	4413      	add	r3, r2
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	08db      	lsrs	r3, r3, #3
 80038e8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	331b      	adds	r3, #27
 80038f8:	011b      	lsls	r3, r3, #4
 80038fa:	4413      	add	r3, r2
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 0202 	and.w	r2, r3, #2
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	331b      	adds	r3, #27
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	3304      	adds	r3, #4
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 020f 	and.w	r2, r3, #15
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	331b      	adds	r3, #27
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4413      	add	r3, r2
 800392a:	3304      	adds	r3, #4
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	0a1b      	lsrs	r3, r3, #8
 8003930:	b2da      	uxtb	r2, r3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	331b      	adds	r3, #27
 800393e:	011b      	lsls	r3, r3, #4
 8003940:	4413      	add	r3, r2
 8003942:	3304      	adds	r3, #4
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0c1b      	lsrs	r3, r3, #16
 8003948:	b29a      	uxth	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	011b      	lsls	r3, r3, #4
 8003956:	4413      	add	r3, r2
 8003958:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	b2da      	uxtb	r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	4413      	add	r3, r2
 800396e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	0a1a      	lsrs	r2, r3, #8
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	3301      	adds	r3, #1
 800397a:	b2d2      	uxtb	r2, r2
 800397c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	4413      	add	r3, r2
 8003988:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0c1a      	lsrs	r2, r3, #16
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	3302      	adds	r3, #2
 8003994:	b2d2      	uxtb	r2, r2
 8003996:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	0e1a      	lsrs	r2, r3, #24
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3303      	adds	r3, #3
 80039ae:	b2d2      	uxtb	r2, r2
 80039b0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	011b      	lsls	r3, r3, #4
 80039ba:	4413      	add	r3, r2
 80039bc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	3304      	adds	r3, #4
 80039c6:	b2d2      	uxtb	r2, r2
 80039c8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0a1a      	lsrs	r2, r3, #8
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	3305      	adds	r3, #5
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	011b      	lsls	r3, r3, #4
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	0c1a      	lsrs	r2, r3, #16
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	3306      	adds	r3, #6
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4413      	add	r3, r2
 8003a08:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	0e1a      	lsrs	r2, r3, #24
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	3307      	adds	r3, #7
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d108      	bne.n	8003a30 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f042 0220 	orr.w	r2, r2, #32
 8003a2c:	60da      	str	r2, [r3, #12]
 8003a2e:	e007      	b.n	8003a40 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	691a      	ldr	r2, [r3, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f042 0220 	orr.w	r2, r2, #32
 8003a3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a40:	2300      	movs	r3, #0
 8003a42:	e006      	b.n	8003a52 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
  }
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003a5e:	b580      	push	{r7, lr}
 8003a60:	b08a      	sub	sp, #40	; 0x28
 8003a62:	af00      	add	r7, sp, #0
 8003a64:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003a66:	2300      	movs	r3, #0
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003a9a:	6a3b      	ldr	r3, [r7, #32]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d07c      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	f003 0301 	and.w	r3, r3, #1
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d023      	beq.n	8003af6 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 f983 	bl	8003dcc <HAL_CAN_TxMailbox0CompleteCallback>
 8003ac6:	e016      	b.n	8003af6 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d004      	beq.n	8003adc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8003ada:	e00c      	b.n	8003af6 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003adc:	69bb      	ldr	r3, [r7, #24]
 8003ade:	f003 0308 	and.w	r3, r3, #8
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d004      	beq.n	8003af0 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ae8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
 8003aee:	e002      	b.n	8003af6 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f989 	bl	8003e08 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d024      	beq.n	8003b4a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b08:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d003      	beq.n	8003b1c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f963 	bl	8003de0 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b1a:	e016      	b.n	8003b4a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d004      	beq.n	8003b30 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003b2e:	e00c      	b.n	8003b4a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d004      	beq.n	8003b44 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b40:	627b      	str	r3, [r7, #36]	; 0x24
 8003b42:	e002      	b.n	8003b4a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 f969 	bl	8003e1c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d024      	beq.n	8003b9e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003b5c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003b5e:	69bb      	ldr	r3, [r7, #24]
 8003b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f943 	bl	8003df4 <HAL_CAN_TxMailbox2CompleteCallback>
 8003b6e:	e016      	b.n	8003b9e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d004      	beq.n	8003b84 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
 8003b82:	e00c      	b.n	8003b9e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d004      	beq.n	8003b98 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	627b      	str	r3, [r7, #36]	; 0x24
 8003b96:	e002      	b.n	8003b9e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f949 	bl	8003e30 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003b9e:	6a3b      	ldr	r3, [r7, #32]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00c      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f003 0304 	and.w	r3, r3, #4
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d00b      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	f003 0308 	and.w	r3, r3, #8
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d006      	beq.n	8003be4 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2208      	movs	r2, #8
 8003bdc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f930 	bl	8003e44 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	f003 0302 	and.w	r3, r3, #2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d009      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0303 	and.w	r3, r3, #3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d002      	beq.n	8003c02 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd f9d7 	bl	8000fb0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c02:	6a3b      	ldr	r3, [r7, #32]
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00c      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f003 0310 	and.w	r3, r3, #16
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d007      	beq.n	8003c26 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c1c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2210      	movs	r2, #16
 8003c24:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c26:	6a3b      	ldr	r3, [r7, #32]
 8003c28:	f003 0320 	and.w	r3, r3, #32
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00b      	beq.n	8003c48 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d006      	beq.n	8003c48 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	2208      	movs	r2, #8
 8003c40:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f912 	bl	8003e6c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c48:	6a3b      	ldr	r3, [r7, #32]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d002      	beq.n	8003c66 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f8f9 	bl	8003e58 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00b      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d006      	beq.n	8003c88 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2210      	movs	r2, #16
 8003c80:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f8fc 	bl	8003e80 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00b      	beq.n	8003caa <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	f003 0308 	and.w	r3, r3, #8
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d006      	beq.n	8003caa <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f000 f8f5 	bl	8003e94 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d07b      	beq.n	8003dac <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003cb4:	69fb      	ldr	r3, [r7, #28]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d072      	beq.n	8003da4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d008      	beq.n	8003cda <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d003      	beq.n	8003cda <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f043 0301 	orr.w	r3, r3, #1
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d008      	beq.n	8003cf6 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d003      	beq.n	8003cf6 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	f043 0302 	orr.w	r3, r3, #2
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003cf6:	6a3b      	ldr	r3, [r7, #32]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d008      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	f043 0304 	orr.w	r3, r3, #4
 8003d10:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d043      	beq.n	8003da4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d03e      	beq.n	8003da4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d02b      	beq.n	8003d88 <HAL_CAN_IRQHandler+0x32a>
 8003d30:	2b60      	cmp	r3, #96	; 0x60
 8003d32:	d82e      	bhi.n	8003d92 <HAL_CAN_IRQHandler+0x334>
 8003d34:	2b50      	cmp	r3, #80	; 0x50
 8003d36:	d022      	beq.n	8003d7e <HAL_CAN_IRQHandler+0x320>
 8003d38:	2b50      	cmp	r3, #80	; 0x50
 8003d3a:	d82a      	bhi.n	8003d92 <HAL_CAN_IRQHandler+0x334>
 8003d3c:	2b40      	cmp	r3, #64	; 0x40
 8003d3e:	d019      	beq.n	8003d74 <HAL_CAN_IRQHandler+0x316>
 8003d40:	2b40      	cmp	r3, #64	; 0x40
 8003d42:	d826      	bhi.n	8003d92 <HAL_CAN_IRQHandler+0x334>
 8003d44:	2b30      	cmp	r3, #48	; 0x30
 8003d46:	d010      	beq.n	8003d6a <HAL_CAN_IRQHandler+0x30c>
 8003d48:	2b30      	cmp	r3, #48	; 0x30
 8003d4a:	d822      	bhi.n	8003d92 <HAL_CAN_IRQHandler+0x334>
 8003d4c:	2b10      	cmp	r3, #16
 8003d4e:	d002      	beq.n	8003d56 <HAL_CAN_IRQHandler+0x2f8>
 8003d50:	2b20      	cmp	r3, #32
 8003d52:	d005      	beq.n	8003d60 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d54:	e01d      	b.n	8003d92 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d58:	f043 0308 	orr.w	r3, r3, #8
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d5e:	e019      	b.n	8003d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	f043 0310 	orr.w	r3, r3, #16
 8003d66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d68:	e014      	b.n	8003d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	f043 0320 	orr.w	r3, r3, #32
 8003d70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d72:	e00f      	b.n	8003d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d7c:	e00a      	b.n	8003d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d86:	e005      	b.n	8003d94 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003d90:	e000      	b.n	8003d94 <HAL_CAN_IRQHandler+0x336>
            break;
 8003d92:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	699a      	ldr	r2, [r3, #24]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003da2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2204      	movs	r2, #4
 8003daa:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d008      	beq.n	8003dc4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	431a      	orrs	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f872 	bl	8003ea8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003dc4:	bf00      	nop
 8003dc6:	3728      	adds	r7, #40	; 0x28
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003de8:	bf00      	nop
 8003dea:	370c      	adds	r7, #12
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr

08003df4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003dfc:	bf00      	nop
 8003dfe:	370c      	adds	r7, #12
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e24:	bf00      	nop
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e38:	bf00      	nop
 8003e3a:	370c      	adds	r7, #12
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e42:	4770      	bx	lr

08003e44 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003e74:	bf00      	nop
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003e88:	bf00      	nop
 8003e8a:	370c      	adds	r7, #12
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e92:	4770      	bx	lr

08003e94 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003e9c:	bf00      	nop
 8003e9e:	370c      	adds	r7, #12
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eba:	4770      	bx	lr

08003ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	f003 0307 	and.w	r3, r3, #7
 8003eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <__NVIC_SetPriorityGrouping+0x40>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ed8:	4013      	ands	r3, r2
 8003eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003ee4:	4b06      	ldr	r3, [pc, #24]	; (8003f00 <__NVIC_SetPriorityGrouping+0x44>)
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003eea:	4a04      	ldr	r2, [pc, #16]	; (8003efc <__NVIC_SetPriorityGrouping+0x40>)
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	60d3      	str	r3, [r2, #12]
}
 8003ef0:	bf00      	nop
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	e000ed00 	.word	0xe000ed00
 8003f00:	05fa0000 	.word	0x05fa0000

08003f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <__NVIC_GetPriorityGrouping+0x18>)
 8003f0a:	68db      	ldr	r3, [r3, #12]
 8003f0c:	0a1b      	lsrs	r3, r3, #8
 8003f0e:	f003 0307 	and.w	r3, r3, #7
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	4603      	mov	r3, r0
 8003f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	db0b      	blt.n	8003f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	f003 021f 	and.w	r2, r3, #31
 8003f38:	4907      	ldr	r1, [pc, #28]	; (8003f58 <__NVIC_EnableIRQ+0x38>)
 8003f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f3e:	095b      	lsrs	r3, r3, #5
 8003f40:	2001      	movs	r0, #1
 8003f42:	fa00 f202 	lsl.w	r2, r0, r2
 8003f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	e000e100 	.word	0xe000e100

08003f5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	4603      	mov	r3, r0
 8003f64:	6039      	str	r1, [r7, #0]
 8003f66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	db0a      	blt.n	8003f86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	490c      	ldr	r1, [pc, #48]	; (8003fa8 <__NVIC_SetPriority+0x4c>)
 8003f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f7a:	0112      	lsls	r2, r2, #4
 8003f7c:	b2d2      	uxtb	r2, r2
 8003f7e:	440b      	add	r3, r1
 8003f80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f84:	e00a      	b.n	8003f9c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	b2da      	uxtb	r2, r3
 8003f8a:	4908      	ldr	r1, [pc, #32]	; (8003fac <__NVIC_SetPriority+0x50>)
 8003f8c:	79fb      	ldrb	r3, [r7, #7]
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3b04      	subs	r3, #4
 8003f94:	0112      	lsls	r2, r2, #4
 8003f96:	b2d2      	uxtb	r2, r2
 8003f98:	440b      	add	r3, r1
 8003f9a:	761a      	strb	r2, [r3, #24]
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	e000e100 	.word	0xe000e100
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b089      	sub	sp, #36	; 0x24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003fc4:	69fb      	ldr	r3, [r7, #28]
 8003fc6:	f1c3 0307 	rsb	r3, r3, #7
 8003fca:	2b04      	cmp	r3, #4
 8003fcc:	bf28      	it	cs
 8003fce:	2304      	movcs	r3, #4
 8003fd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	2b06      	cmp	r3, #6
 8003fd8:	d902      	bls.n	8003fe0 <NVIC_EncodePriority+0x30>
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	3b03      	subs	r3, #3
 8003fde:	e000      	b.n	8003fe2 <NVIC_EncodePriority+0x32>
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	401a      	ands	r2, r3
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ff8:	f04f 31ff 	mov.w	r1, #4294967295
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8004002:	43d9      	mvns	r1, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004008:	4313      	orrs	r3, r2
         );
}
 800400a:	4618      	mov	r0, r3
 800400c:	3724      	adds	r7, #36	; 0x24
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	3b01      	subs	r3, #1
 8004024:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004028:	d301      	bcc.n	800402e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800402a:	2301      	movs	r3, #1
 800402c:	e00f      	b.n	800404e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800402e:	4a0a      	ldr	r2, [pc, #40]	; (8004058 <SysTick_Config+0x40>)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	3b01      	subs	r3, #1
 8004034:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004036:	210f      	movs	r1, #15
 8004038:	f04f 30ff 	mov.w	r0, #4294967295
 800403c:	f7ff ff8e 	bl	8003f5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004040:	4b05      	ldr	r3, [pc, #20]	; (8004058 <SysTick_Config+0x40>)
 8004042:	2200      	movs	r2, #0
 8004044:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004046:	4b04      	ldr	r3, [pc, #16]	; (8004058 <SysTick_Config+0x40>)
 8004048:	2207      	movs	r2, #7
 800404a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	e000e010 	.word	0xe000e010

0800405c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b082      	sub	sp, #8
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ff29 	bl	8003ebc <__NVIC_SetPriorityGrouping>
}
 800406a:	bf00      	nop
 800406c:	3708      	adds	r7, #8
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004072:	b580      	push	{r7, lr}
 8004074:	b086      	sub	sp, #24
 8004076:	af00      	add	r7, sp, #0
 8004078:	4603      	mov	r3, r0
 800407a:	60b9      	str	r1, [r7, #8]
 800407c:	607a      	str	r2, [r7, #4]
 800407e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004084:	f7ff ff3e 	bl	8003f04 <__NVIC_GetPriorityGrouping>
 8004088:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	6978      	ldr	r0, [r7, #20]
 8004090:	f7ff ff8e 	bl	8003fb0 <NVIC_EncodePriority>
 8004094:	4602      	mov	r2, r0
 8004096:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff ff5d 	bl	8003f5c <__NVIC_SetPriority>
}
 80040a2:	bf00      	nop
 80040a4:	3718      	adds	r7, #24
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b082      	sub	sp, #8
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	4603      	mov	r3, r0
 80040b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff31 	bl	8003f20 <__NVIC_EnableIRQ>
}
 80040be:	bf00      	nop
 80040c0:	3708      	adds	r7, #8
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}

080040c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80040c6:	b580      	push	{r7, lr}
 80040c8:	b082      	sub	sp, #8
 80040ca:	af00      	add	r7, sp, #0
 80040cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff ffa2 	bl	8004018 <SysTick_Config>
 80040d4:	4603      	mov	r3, r0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3708      	adds	r7, #8
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b086      	sub	sp, #24
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80040e8:	2300      	movs	r3, #0
 80040ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80040ec:	f7fe ffe6 	bl	80030bc <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e099      	b.n	8004230 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2202      	movs	r2, #2
 8004100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800411c:	e00f      	b.n	800413e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800411e:	f7fe ffcd 	bl	80030bc <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	2b05      	cmp	r3, #5
 800412a:	d908      	bls.n	800413e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2203      	movs	r2, #3
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e078      	b.n	8004230 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b00      	cmp	r3, #0
 800414a:	d1e8      	bne.n	800411e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4b38      	ldr	r3, [pc, #224]	; (8004238 <HAL_DMA_Init+0x158>)
 8004158:	4013      	ands	r3, r2
 800415a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800416a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004176:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004182:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a1b      	ldr	r3, [r3, #32]
 8004188:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004194:	2b04      	cmp	r3, #4
 8004196:	d107      	bne.n	80041a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a0:	4313      	orrs	r3, r2
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0307 	bic.w	r3, r3, #7
 80041be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d117      	bne.n	8004202 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00e      	beq.n	8004202 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f9e9 	bl	80045bc <DMA_CheckFifoParam>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d008      	beq.n	8004202 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2240      	movs	r2, #64	; 0x40
 80041f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80041fe:	2301      	movs	r3, #1
 8004200:	e016      	b.n	8004230 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f9a0 	bl	8004550 <DMA_CalcBaseAndBitshift>
 8004210:	4603      	mov	r3, r0
 8004212:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004218:	223f      	movs	r2, #63	; 0x3f
 800421a:	409a      	lsls	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2201      	movs	r2, #1
 800422a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	f010803f 	.word	0xf010803f

0800423c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004248:	4b8e      	ldr	r3, [pc, #568]	; (8004484 <HAL_DMA_IRQHandler+0x248>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a8e      	ldr	r2, [pc, #568]	; (8004488 <HAL_DMA_IRQHandler+0x24c>)
 800424e:	fba2 2303 	umull	r2, r3, r2, r3
 8004252:	0a9b      	lsrs	r3, r3, #10
 8004254:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	2208      	movs	r2, #8
 8004268:	409a      	lsls	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d01a      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d013      	beq.n	80042a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0204 	bic.w	r2, r2, #4
 800428e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004294:	2208      	movs	r2, #8
 8004296:	409a      	lsls	r2, r3
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	f043 0201 	orr.w	r2, r3, #1
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ac:	2201      	movs	r2, #1
 80042ae:	409a      	lsls	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4013      	ands	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d012      	beq.n	80042de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00b      	beq.n	80042de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	2201      	movs	r2, #1
 80042cc:	409a      	lsls	r2, r3
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d6:	f043 0202 	orr.w	r2, r3, #2
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042e2:	2204      	movs	r2, #4
 80042e4:	409a      	lsls	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4013      	ands	r3, r2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d012      	beq.n	8004314 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004300:	2204      	movs	r2, #4
 8004302:	409a      	lsls	r2, r3
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800430c:	f043 0204 	orr.w	r2, r3, #4
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004318:	2210      	movs	r2, #16
 800431a:	409a      	lsls	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4013      	ands	r3, r2
 8004320:	2b00      	cmp	r3, #0
 8004322:	d043      	beq.n	80043ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d03c      	beq.n	80043ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004336:	2210      	movs	r2, #16
 8004338:	409a      	lsls	r2, r3
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d018      	beq.n	800437e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d108      	bne.n	800436c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d024      	beq.n	80043ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	4798      	blx	r3
 800436a:	e01f      	b.n	80043ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01b      	beq.n	80043ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	4798      	blx	r3
 800437c:	e016      	b.n	80043ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d107      	bne.n	800439c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f022 0208 	bic.w	r2, r2, #8
 800439a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b0:	2220      	movs	r2, #32
 80043b2:	409a      	lsls	r2, r3
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	4013      	ands	r3, r2
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 808f 	beq.w	80044dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0310 	and.w	r3, r3, #16
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	f000 8087 	beq.w	80044dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	2220      	movs	r2, #32
 80043d4:	409a      	lsls	r2, r3
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d136      	bne.n	8004454 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 0216 	bic.w	r2, r2, #22
 80043f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	695a      	ldr	r2, [r3, #20]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004404:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	2b00      	cmp	r3, #0
 800440c:	d103      	bne.n	8004416 <HAL_DMA_IRQHandler+0x1da>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0208 	bic.w	r2, r2, #8
 8004424:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800442a:	223f      	movs	r2, #63	; 0x3f
 800442c:	409a      	lsls	r2, r3
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004446:	2b00      	cmp	r3, #0
 8004448:	d07e      	beq.n	8004548 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
        }
        return;
 8004452:	e079      	b.n	8004548 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d01d      	beq.n	800449e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d10d      	bne.n	800448c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004474:	2b00      	cmp	r3, #0
 8004476:	d031      	beq.n	80044dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	4798      	blx	r3
 8004480:	e02c      	b.n	80044dc <HAL_DMA_IRQHandler+0x2a0>
 8004482:	bf00      	nop
 8004484:	2000008c 	.word	0x2000008c
 8004488:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d023      	beq.n	80044dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	4798      	blx	r3
 800449c:	e01e      	b.n	80044dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d10f      	bne.n	80044cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0210 	bic.w	r2, r2, #16
 80044ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d032      	beq.n	800454a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d022      	beq.n	8004536 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2205      	movs	r2, #5
 80044f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0201 	bic.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3301      	adds	r3, #1
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	429a      	cmp	r2, r3
 8004512:	d307      	bcc.n	8004524 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1f2      	bne.n	8004508 <HAL_DMA_IRQHandler+0x2cc>
 8004522:	e000      	b.n	8004526 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004524:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800453a:	2b00      	cmp	r3, #0
 800453c:	d005      	beq.n	800454a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	4798      	blx	r3
 8004546:	e000      	b.n	800454a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004548:	bf00      	nop
    }
  }
}
 800454a:	3718      	adds	r7, #24
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}

08004550 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	b2db      	uxtb	r3, r3
 800455e:	3b10      	subs	r3, #16
 8004560:	4a13      	ldr	r2, [pc, #76]	; (80045b0 <DMA_CalcBaseAndBitshift+0x60>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	091b      	lsrs	r3, r3, #4
 8004568:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <DMA_CalcBaseAndBitshift+0x64>)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4413      	add	r3, r2
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2b03      	cmp	r3, #3
 800457c:	d908      	bls.n	8004590 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	461a      	mov	r2, r3
 8004584:	4b0c      	ldr	r3, [pc, #48]	; (80045b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004586:	4013      	ands	r3, r2
 8004588:	1d1a      	adds	r2, r3, #4
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	659a      	str	r2, [r3, #88]	; 0x58
 800458e:	e006      	b.n	800459e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	461a      	mov	r2, r3
 8004596:	4b08      	ldr	r3, [pc, #32]	; (80045b8 <DMA_CalcBaseAndBitshift+0x68>)
 8004598:	4013      	ands	r3, r2
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	aaaaaaab 	.word	0xaaaaaaab
 80045b4:	0801c548 	.word	0x0801c548
 80045b8:	fffffc00 	.word	0xfffffc00

080045bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045c4:	2300      	movs	r3, #0
 80045c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d11f      	bne.n	8004616 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	2b03      	cmp	r3, #3
 80045da:	d856      	bhi.n	800468a <DMA_CheckFifoParam+0xce>
 80045dc:	a201      	add	r2, pc, #4	; (adr r2, 80045e4 <DMA_CheckFifoParam+0x28>)
 80045de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045e2:	bf00      	nop
 80045e4:	080045f5 	.word	0x080045f5
 80045e8:	08004607 	.word	0x08004607
 80045ec:	080045f5 	.word	0x080045f5
 80045f0:	0800468b 	.word	0x0800468b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d046      	beq.n	800468e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004604:	e043      	b.n	800468e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800460e:	d140      	bne.n	8004692 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004614:	e03d      	b.n	8004692 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800461e:	d121      	bne.n	8004664 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d837      	bhi.n	8004696 <DMA_CheckFifoParam+0xda>
 8004626:	a201      	add	r2, pc, #4	; (adr r2, 800462c <DMA_CheckFifoParam+0x70>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	0800463d 	.word	0x0800463d
 8004630:	08004643 	.word	0x08004643
 8004634:	0800463d 	.word	0x0800463d
 8004638:	08004655 	.word	0x08004655
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	73fb      	strb	r3, [r7, #15]
      break;
 8004640:	e030      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d025      	beq.n	800469a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004652:	e022      	b.n	800469a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800465c:	d11f      	bne.n	800469e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004662:	e01c      	b.n	800469e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	2b02      	cmp	r3, #2
 8004668:	d903      	bls.n	8004672 <DMA_CheckFifoParam+0xb6>
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d003      	beq.n	8004678 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004670:	e018      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      break;
 8004676:	e015      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      break;
 8004688:	e00b      	b.n	80046a2 <DMA_CheckFifoParam+0xe6>
      break;
 800468a:	bf00      	nop
 800468c:	e00a      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e008      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004692:	bf00      	nop
 8004694:	e006      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
 8004698:	e004      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      break;
 800469a:	bf00      	nop
 800469c:	e002      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800469e:	bf00      	nop
 80046a0:	e000      	b.n	80046a4 <DMA_CheckFifoParam+0xe8>
      break;
 80046a2:	bf00      	nop
    }
  } 
  
  return status; 
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3714      	adds	r7, #20
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop

080046b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80046c2:	2300      	movs	r3, #0
 80046c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	61fb      	str	r3, [r7, #28]
 80046d2:	e175      	b.n	80049c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80046d4:	2201      	movs	r2, #1
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	fa02 f303 	lsl.w	r3, r2, r3
 80046dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	4013      	ands	r3, r2
 80046e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	f040 8164 	bne.w	80049ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d005      	beq.n	800470a <HAL_GPIO_Init+0x56>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f003 0303 	and.w	r3, r3, #3
 8004706:	2b02      	cmp	r3, #2
 8004708:	d130      	bne.n	800476c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	005b      	lsls	r3, r3, #1
 8004714:	2203      	movs	r2, #3
 8004716:	fa02 f303 	lsl.w	r3, r2, r3
 800471a:	43db      	mvns	r3, r3
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	4013      	ands	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	69fb      	ldr	r3, [r7, #28]
 8004728:	005b      	lsls	r3, r3, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4313      	orrs	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004740:	2201      	movs	r2, #1
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	69ba      	ldr	r2, [r7, #24]
 800474c:	4013      	ands	r3, r2
 800474e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	091b      	lsrs	r3, r3, #4
 8004756:	f003 0201 	and.w	r2, r3, #1
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	fa02 f303 	lsl.w	r3, r2, r3
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f003 0303 	and.w	r3, r3, #3
 8004774:	2b03      	cmp	r3, #3
 8004776:	d017      	beq.n	80047a8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	2203      	movs	r2, #3
 8004784:	fa02 f303 	lsl.w	r3, r2, r3
 8004788:	43db      	mvns	r3, r3
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	4013      	ands	r3, r2
 800478e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	689a      	ldr	r2, [r3, #8]
 8004794:	69fb      	ldr	r3, [r7, #28]
 8004796:	005b      	lsls	r3, r3, #1
 8004798:	fa02 f303 	lsl.w	r3, r2, r3
 800479c:	69ba      	ldr	r2, [r7, #24]
 800479e:	4313      	orrs	r3, r2
 80047a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69ba      	ldr	r2, [r7, #24]
 80047a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d123      	bne.n	80047fc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	08da      	lsrs	r2, r3, #3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	3208      	adds	r2, #8
 80047bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	f003 0307 	and.w	r3, r3, #7
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	220f      	movs	r2, #15
 80047cc:	fa02 f303 	lsl.w	r3, r2, r3
 80047d0:	43db      	mvns	r3, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4013      	ands	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	691a      	ldr	r2, [r3, #16]
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	f003 0307 	and.w	r3, r3, #7
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	08da      	lsrs	r2, r3, #3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3208      	adds	r2, #8
 80047f6:	69b9      	ldr	r1, [r7, #24]
 80047f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	2203      	movs	r2, #3
 8004808:	fa02 f303 	lsl.w	r3, r2, r3
 800480c:	43db      	mvns	r3, r3
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4013      	ands	r3, r2
 8004812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 0203 	and.w	r2, r3, #3
 800481c:	69fb      	ldr	r3, [r7, #28]
 800481e:	005b      	lsls	r3, r3, #1
 8004820:	fa02 f303 	lsl.w	r3, r2, r3
 8004824:	69ba      	ldr	r2, [r7, #24]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69ba      	ldr	r2, [r7, #24]
 800482e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004838:	2b00      	cmp	r3, #0
 800483a:	f000 80be 	beq.w	80049ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800483e:	4b66      	ldr	r3, [pc, #408]	; (80049d8 <HAL_GPIO_Init+0x324>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	4a65      	ldr	r2, [pc, #404]	; (80049d8 <HAL_GPIO_Init+0x324>)
 8004844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004848:	6453      	str	r3, [r2, #68]	; 0x44
 800484a:	4b63      	ldr	r3, [pc, #396]	; (80049d8 <HAL_GPIO_Init+0x324>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004856:	4a61      	ldr	r2, [pc, #388]	; (80049dc <HAL_GPIO_Init+0x328>)
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	089b      	lsrs	r3, r3, #2
 800485c:	3302      	adds	r3, #2
 800485e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0303 	and.w	r3, r3, #3
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	220f      	movs	r2, #15
 800486e:	fa02 f303 	lsl.w	r3, r2, r3
 8004872:	43db      	mvns	r3, r3
 8004874:	69ba      	ldr	r2, [r7, #24]
 8004876:	4013      	ands	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	4a58      	ldr	r2, [pc, #352]	; (80049e0 <HAL_GPIO_Init+0x32c>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d037      	beq.n	80048f2 <HAL_GPIO_Init+0x23e>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a57      	ldr	r2, [pc, #348]	; (80049e4 <HAL_GPIO_Init+0x330>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_GPIO_Init+0x23a>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	4a56      	ldr	r2, [pc, #344]	; (80049e8 <HAL_GPIO_Init+0x334>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d02b      	beq.n	80048ea <HAL_GPIO_Init+0x236>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	4a55      	ldr	r2, [pc, #340]	; (80049ec <HAL_GPIO_Init+0x338>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d025      	beq.n	80048e6 <HAL_GPIO_Init+0x232>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	4a54      	ldr	r2, [pc, #336]	; (80049f0 <HAL_GPIO_Init+0x33c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d01f      	beq.n	80048e2 <HAL_GPIO_Init+0x22e>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	4a53      	ldr	r2, [pc, #332]	; (80049f4 <HAL_GPIO_Init+0x340>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d019      	beq.n	80048de <HAL_GPIO_Init+0x22a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	4a52      	ldr	r2, [pc, #328]	; (80049f8 <HAL_GPIO_Init+0x344>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d013      	beq.n	80048da <HAL_GPIO_Init+0x226>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	4a51      	ldr	r2, [pc, #324]	; (80049fc <HAL_GPIO_Init+0x348>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00d      	beq.n	80048d6 <HAL_GPIO_Init+0x222>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a50      	ldr	r2, [pc, #320]	; (8004a00 <HAL_GPIO_Init+0x34c>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d007      	beq.n	80048d2 <HAL_GPIO_Init+0x21e>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a4f      	ldr	r2, [pc, #316]	; (8004a04 <HAL_GPIO_Init+0x350>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d101      	bne.n	80048ce <HAL_GPIO_Init+0x21a>
 80048ca:	2309      	movs	r3, #9
 80048cc:	e012      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048ce:	230a      	movs	r3, #10
 80048d0:	e010      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048d2:	2308      	movs	r3, #8
 80048d4:	e00e      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048d6:	2307      	movs	r3, #7
 80048d8:	e00c      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048da:	2306      	movs	r3, #6
 80048dc:	e00a      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048de:	2305      	movs	r3, #5
 80048e0:	e008      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048e2:	2304      	movs	r3, #4
 80048e4:	e006      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048e6:	2303      	movs	r3, #3
 80048e8:	e004      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048ea:	2302      	movs	r3, #2
 80048ec:	e002      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048ee:	2301      	movs	r3, #1
 80048f0:	e000      	b.n	80048f4 <HAL_GPIO_Init+0x240>
 80048f2:	2300      	movs	r3, #0
 80048f4:	69fa      	ldr	r2, [r7, #28]
 80048f6:	f002 0203 	and.w	r2, r2, #3
 80048fa:	0092      	lsls	r2, r2, #2
 80048fc:	4093      	lsls	r3, r2
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4313      	orrs	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004904:	4935      	ldr	r1, [pc, #212]	; (80049dc <HAL_GPIO_Init+0x328>)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	089b      	lsrs	r3, r3, #2
 800490a:	3302      	adds	r3, #2
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_GPIO_Init+0x354>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d003      	beq.n	8004936 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	4313      	orrs	r3, r2
 8004934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004936:	4a34      	ldr	r2, [pc, #208]	; (8004a08 <HAL_GPIO_Init+0x354>)
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_GPIO_Init+0x354>)
 800493e:	68db      	ldr	r3, [r3, #12]
 8004940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	43db      	mvns	r3, r3
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	4013      	ands	r3, r2
 800494a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004960:	4a29      	ldr	r2, [pc, #164]	; (8004a08 <HAL_GPIO_Init+0x354>)
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004966:	4b28      	ldr	r3, [pc, #160]	; (8004a08 <HAL_GPIO_Init+0x354>)
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	43db      	mvns	r3, r3
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	4013      	ands	r3, r2
 8004974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8004982:	69ba      	ldr	r2, [r7, #24]
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	4313      	orrs	r3, r2
 8004988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_GPIO_Init+0x354>)
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004990:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_GPIO_Init+0x354>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	43db      	mvns	r3, r3
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	4013      	ands	r3, r2
 800499e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d003      	beq.n	80049b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80049ac:	69ba      	ldr	r2, [r7, #24]
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049b4:	4a14      	ldr	r2, [pc, #80]	; (8004a08 <HAL_GPIO_Init+0x354>)
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	3301      	adds	r3, #1
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	f67f ae86 	bls.w	80046d4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop
 80049cc:	3724      	adds	r7, #36	; 0x24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr
 80049d6:	bf00      	nop
 80049d8:	40023800 	.word	0x40023800
 80049dc:	40013800 	.word	0x40013800
 80049e0:	40020000 	.word	0x40020000
 80049e4:	40020400 	.word	0x40020400
 80049e8:	40020800 	.word	0x40020800
 80049ec:	40020c00 	.word	0x40020c00
 80049f0:	40021000 	.word	0x40021000
 80049f4:	40021400 	.word	0x40021400
 80049f8:	40021800 	.word	0x40021800
 80049fc:	40021c00 	.word	0x40021c00
 8004a00:	40022000 	.word	0x40022000
 8004a04:	40022400 	.word	0x40022400
 8004a08:	40013c00 	.word	0x40013c00

08004a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	460b      	mov	r3, r1
 8004a16:	807b      	strh	r3, [r7, #2]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a1c:	787b      	ldrb	r3, [r7, #1]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a22:	887a      	ldrh	r2, [r7, #2]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004a28:	e003      	b.n	8004a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004a2a:	887b      	ldrh	r3, [r7, #2]
 8004a2c:	041a      	lsls	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	619a      	str	r2, [r3, #24]
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b085      	sub	sp, #20
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
 8004a46:	460b      	mov	r3, r1
 8004a48:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004a50:	887a      	ldrh	r2, [r7, #2]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	4013      	ands	r3, r2
 8004a56:	041a      	lsls	r2, r3, #16
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	43d9      	mvns	r1, r3
 8004a5c:	887b      	ldrh	r3, [r7, #2]
 8004a5e:	400b      	ands	r3, r1
 8004a60:	431a      	orrs	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	619a      	str	r2, [r3, #24]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004a72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a74:	b08f      	sub	sp, #60	; 0x3c
 8004a76:	af0a      	add	r7, sp, #40	; 0x28
 8004a78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d101      	bne.n	8004a84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e116      	b.n	8004cb2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d106      	bne.n	8004aa4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f007 fa20 	bl	800bee4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2203      	movs	r2, #3
 8004aa8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d102      	bne.n	8004abe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f003 fd2f 	bl	8008526 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	603b      	str	r3, [r7, #0]
 8004ace:	687e      	ldr	r6, [r7, #4]
 8004ad0:	466d      	mov	r5, sp
 8004ad2:	f106 0410 	add.w	r4, r6, #16
 8004ad6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ad8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ada:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004adc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ade:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004ae2:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ae6:	1d33      	adds	r3, r6, #4
 8004ae8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004aea:	6838      	ldr	r0, [r7, #0]
 8004aec:	f003 fc10 	bl	8008310 <USB_CoreInit>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2202      	movs	r2, #2
 8004afa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e0d7      	b.n	8004cb2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f003 fd1d 	bl	8008548 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
 8004b12:	e04a      	b.n	8004baa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004b14:	7bfa      	ldrb	r2, [r7, #15]
 8004b16:	6879      	ldr	r1, [r7, #4]
 8004b18:	4613      	mov	r3, r2
 8004b1a:	00db      	lsls	r3, r3, #3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	440b      	add	r3, r1
 8004b22:	333d      	adds	r3, #61	; 0x3d
 8004b24:	2201      	movs	r2, #1
 8004b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	333c      	adds	r3, #60	; 0x3c
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004b3c:	7bfa      	ldrb	r2, [r7, #15]
 8004b3e:	7bfb      	ldrb	r3, [r7, #15]
 8004b40:	b298      	uxth	r0, r3
 8004b42:	6879      	ldr	r1, [r7, #4]
 8004b44:	4613      	mov	r3, r2
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	009b      	lsls	r3, r3, #2
 8004b4c:	440b      	add	r3, r1
 8004b4e:	3344      	adds	r3, #68	; 0x44
 8004b50:	4602      	mov	r2, r0
 8004b52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	3340      	adds	r3, #64	; 0x40
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004b68:	7bfa      	ldrb	r2, [r7, #15]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	3348      	adds	r3, #72	; 0x48
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004b7c:	7bfa      	ldrb	r2, [r7, #15]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334c      	adds	r3, #76	; 0x4c
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004b90:	7bfa      	ldrb	r2, [r7, #15]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	4613      	mov	r3, r2
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	4413      	add	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	3354      	adds	r3, #84	; 0x54
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	73fb      	strb	r3, [r7, #15]
 8004baa:	7bfa      	ldrb	r2, [r7, #15]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d3af      	bcc.n	8004b14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
 8004bb8:	e044      	b.n	8004c44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004bba:	7bfa      	ldrb	r2, [r7, #15]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	00db      	lsls	r3, r3, #3
 8004bc2:	4413      	add	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004bd0:	7bfa      	ldrb	r2, [r7, #15]
 8004bd2:	6879      	ldr	r1, [r7, #4]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4413      	add	r3, r2
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	440b      	add	r3, r1
 8004bde:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004be2:	7bfa      	ldrb	r2, [r7, #15]
 8004be4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004be6:	7bfa      	ldrb	r2, [r7, #15]
 8004be8:	6879      	ldr	r1, [r7, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	00db      	lsls	r3, r3, #3
 8004bee:	4413      	add	r3, r2
 8004bf0:	009b      	lsls	r3, r3, #2
 8004bf2:	440b      	add	r3, r1
 8004bf4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004bfc:	7bfa      	ldrb	r2, [r7, #15]
 8004bfe:	6879      	ldr	r1, [r7, #4]
 8004c00:	4613      	mov	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	4413      	add	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004c0e:	2200      	movs	r2, #0
 8004c10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004c12:	7bfa      	ldrb	r2, [r7, #15]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4413      	add	r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004c28:	7bfa      	ldrb	r2, [r7, #15]
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	00db      	lsls	r3, r3, #3
 8004c30:	4413      	add	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	440b      	add	r3, r1
 8004c36:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c3e:	7bfb      	ldrb	r3, [r7, #15]
 8004c40:	3301      	adds	r3, #1
 8004c42:	73fb      	strb	r3, [r7, #15]
 8004c44:	7bfa      	ldrb	r2, [r7, #15]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d3b5      	bcc.n	8004bba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	687e      	ldr	r6, [r7, #4]
 8004c56:	466d      	mov	r5, sp
 8004c58:	f106 0410 	add.w	r4, r6, #16
 8004c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004c68:	e885 0003 	stmia.w	r5, {r0, r1}
 8004c6c:	1d33      	adds	r3, r6, #4
 8004c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004c70:	6838      	ldr	r0, [r7, #0]
 8004c72:	f003 fcb5 	bl	80085e0 <USB_DevInit>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d005      	beq.n	8004c88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e014      	b.n	8004cb2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d102      	bne.n	8004ca6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 f97b 	bl	8005f9c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f004 fe03 	bl	80098b6 <USB_DevDisconnect>

  return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3714      	adds	r7, #20
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cba <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_PCD_Start+0x16>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e012      	b.n	8004cf6 <HAL_PCD_Start+0x3c>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f003 fc11 	bl	8008504 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f004 fdc4 	bl	8009874 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3708      	adds	r7, #8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004cfe:	b590      	push	{r4, r7, lr}
 8004d00:	b08d      	sub	sp, #52	; 0x34
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4618      	mov	r0, r3
 8004d16:	f004 fe82 	bl	8009a1e <USB_GetMode>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	f040 84b7 	bne.w	8005690 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4618      	mov	r0, r3
 8004d28:	f004 fde6 	bl	80098f8 <USB_ReadInterrupts>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 84ad 	beq.w	800568e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	0a1b      	lsrs	r3, r3, #8
 8004d3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f004 fdd3 	bl	80098f8 <USB_ReadInterrupts>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d107      	bne.n	8004d6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f002 0202 	and.w	r2, r2, #2
 8004d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f004 fdc1 	bl	80098f8 <USB_ReadInterrupts>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f003 0310 	and.w	r3, r3, #16
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d161      	bne.n	8004e44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0210 	bic.w	r2, r2, #16
 8004d8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004d90:	6a3b      	ldr	r3, [r7, #32]
 8004d92:	6a1b      	ldr	r3, [r3, #32]
 8004d94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	f003 020f 	and.w	r2, r3, #15
 8004d9c:	4613      	mov	r3, r2
 8004d9e:	00db      	lsls	r3, r3, #3
 8004da0:	4413      	add	r3, r2
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	4413      	add	r3, r2
 8004dac:	3304      	adds	r3, #4
 8004dae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004db0:	69bb      	ldr	r3, [r7, #24]
 8004db2:	0c5b      	lsrs	r3, r3, #17
 8004db4:	f003 030f 	and.w	r3, r3, #15
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d124      	bne.n	8004e06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d035      	beq.n	8004e34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	091b      	lsrs	r3, r3, #4
 8004dd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	461a      	mov	r2, r3
 8004dda:	6a38      	ldr	r0, [r7, #32]
 8004ddc:	f004 fbf8 	bl	80095d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	091b      	lsrs	r3, r3, #4
 8004de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dec:	441a      	add	r2, r3
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	69bb      	ldr	r3, [r7, #24]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dfe:	441a      	add	r2, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	621a      	str	r2, [r3, #32]
 8004e04:	e016      	b.n	8004e34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	0c5b      	lsrs	r3, r3, #17
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	2b06      	cmp	r3, #6
 8004e10:	d110      	bne.n	8004e34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e18:	2208      	movs	r2, #8
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6a38      	ldr	r0, [r7, #32]
 8004e1e:	f004 fbd7 	bl	80095d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	091b      	lsrs	r3, r3, #4
 8004e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e2e:	441a      	add	r2, r3
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f042 0210 	orr.w	r2, r2, #16
 8004e42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f004 fd55 	bl	80098f8 <USB_ReadInterrupts>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e58:	f040 80a7 	bne.w	8004faa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f004 fd5a 	bl	800991e <USB_ReadDevAllOutEpInterrupt>
 8004e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004e6c:	e099      	b.n	8004fa2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 808e 	beq.w	8004f96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e80:	b2d2      	uxtb	r2, r2
 8004e82:	4611      	mov	r1, r2
 8004e84:	4618      	mov	r0, r3
 8004e86:	f004 fd7e 	bl	8009986 <USB_ReadDevOutEPInterrupt>
 8004e8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	f003 0301 	and.w	r3, r3, #1
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00c      	beq.n	8004eb0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fef0 	bl	8005c90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00c      	beq.n	8004ed4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2308      	movs	r3, #8
 8004eca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 ffc6 	bl	8005e60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eea:	461a      	mov	r2, r3
 8004eec:	2310      	movs	r3, #16
 8004eee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d030      	beq.n	8004f5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004efa:	6a3b      	ldr	r3, [r7, #32]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f02:	2b80      	cmp	r3, #128	; 0x80
 8004f04:	d109      	bne.n	8004f1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	69fa      	ldr	r2, [r7, #28]
 8004f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	78db      	ldrb	r3, [r3, #3]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	4619      	mov	r1, r3
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f007 f8e7 	bl	800c118 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f56:	461a      	mov	r2, r3
 8004f58:	2302      	movs	r3, #2
 8004f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f003 0320 	and.w	r3, r3, #32
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d008      	beq.n	8004f78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	015a      	lsls	r2, r3, #5
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	4413      	add	r3, r2
 8004f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f72:	461a      	mov	r2, r3
 8004f74:	2320      	movs	r3, #32
 8004f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d009      	beq.n	8004f96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f98:	3301      	adds	r3, #1
 8004f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f47f af62 	bne.w	8004e6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f004 fca2 	bl	80098f8 <USB_ReadInterrupts>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fbe:	f040 80db 	bne.w	8005178 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f004 fcc3 	bl	8009952 <USB_ReadDevAllInEpInterrupt>
 8004fcc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004fd2:	e0cd      	b.n	8005170 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	f003 0301 	and.w	r3, r3, #1
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	f000 80c2 	beq.w	8005164 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe6:	b2d2      	uxtb	r2, r2
 8004fe8:	4611      	mov	r1, r2
 8004fea:	4618      	mov	r0, r3
 8004fec:	f004 fce9 	bl	80099c2 <USB_ReadDevInEPInterrupt>
 8004ff0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d057      	beq.n	80050ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	2201      	movs	r2, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	43db      	mvns	r3, r3
 8005016:	69f9      	ldr	r1, [r7, #28]
 8005018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800501c:	4013      	ands	r3, r2
 800501e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	461a      	mov	r2, r3
 800502e:	2301      	movs	r3, #1
 8005030:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d132      	bne.n	80050a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	440b      	add	r3, r1
 8005048:	334c      	adds	r3, #76	; 0x4c
 800504a:	6819      	ldr	r1, [r3, #0]
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005050:	4613      	mov	r3, r2
 8005052:	00db      	lsls	r3, r3, #3
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4403      	add	r3, r0
 800505a:	3348      	adds	r3, #72	; 0x48
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4419      	add	r1, r3
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005064:	4613      	mov	r3, r2
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	4413      	add	r3, r2
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	4403      	add	r3, r0
 800506e:	334c      	adds	r3, #76	; 0x4c
 8005070:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005074:	2b00      	cmp	r3, #0
 8005076:	d113      	bne.n	80050a0 <HAL_PCD_IRQHandler+0x3a2>
 8005078:	6879      	ldr	r1, [r7, #4]
 800507a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507c:	4613      	mov	r3, r2
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3354      	adds	r3, #84	; 0x54
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d108      	bne.n	80050a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005098:	461a      	mov	r2, r3
 800509a:	2101      	movs	r1, #1
 800509c:	f004 fcf2 	bl	8009a84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f006 ffb1 	bl	800c00e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	f003 0308 	and.w	r3, r3, #8
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d008      	beq.n	80050c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	69fb      	ldr	r3, [r7, #28]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c2:	461a      	mov	r2, r3
 80050c4:	2308      	movs	r3, #8
 80050c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	f003 0310 	and.w	r3, r3, #16
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d008      	beq.n	80050e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80050d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	461a      	mov	r2, r3
 80050e0:	2310      	movs	r3, #16
 80050e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d008      	beq.n	8005100 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80050ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050fa:	461a      	mov	r2, r3
 80050fc:	2340      	movs	r3, #64	; 0x40
 80050fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	f003 0302 	and.w	r3, r3, #2
 8005106:	2b00      	cmp	r3, #0
 8005108:	d023      	beq.n	8005152 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800510a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800510c:	6a38      	ldr	r0, [r7, #32]
 800510e:	f003 fbc5 	bl	800889c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005114:	4613      	mov	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	4413      	add	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	3338      	adds	r3, #56	; 0x38
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	4413      	add	r3, r2
 8005122:	3304      	adds	r3, #4
 8005124:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	78db      	ldrb	r3, [r3, #3]
 800512a:	2b01      	cmp	r3, #1
 800512c:	d108      	bne.n	8005140 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	2200      	movs	r2, #0
 8005132:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005136:	b2db      	uxtb	r3, r3
 8005138:	4619      	mov	r1, r3
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f006 fffe 	bl	800c13c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	4413      	add	r3, r2
 8005148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800514c:	461a      	mov	r2, r3
 800514e:	2302      	movs	r3, #2
 8005150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b00      	cmp	r3, #0
 800515a:	d003      	beq.n	8005164 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800515c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fd08 	bl	8005b74 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005166:	3301      	adds	r3, #1
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800516a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800516c:	085b      	lsrs	r3, r3, #1
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	2b00      	cmp	r3, #0
 8005174:	f47f af2e 	bne.w	8004fd4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4618      	mov	r0, r3
 800517e:	f004 fbbb 	bl	80098f8 <USB_ReadInterrupts>
 8005182:	4603      	mov	r3, r0
 8005184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800518c:	d122      	bne.n	80051d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	69fa      	ldr	r2, [r7, #28]
 8005198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d108      	bne.n	80051be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80051b4:	2100      	movs	r1, #0
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f007 f97e 	bl	800c4b8 <HAL_PCDEx_LPM_Callback>
 80051bc:	e002      	b.n	80051c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f006 ff9c 	bl	800c0fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80051d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4618      	mov	r0, r3
 80051da:	f004 fb8d 	bl	80098f8 <USB_ReadInterrupts>
 80051de:	4603      	mov	r3, r0
 80051e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80051e8:	d112      	bne.n	8005210 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051f0:	689b      	ldr	r3, [r3, #8]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b01      	cmp	r3, #1
 80051f8:	d102      	bne.n	8005200 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f006 ff58 	bl	800c0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695a      	ldr	r2, [r3, #20]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800520e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fb6f 	bl	80098f8 <USB_ReadInterrupts>
 800521a:	4603      	mov	r3, r0
 800521c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005220:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005224:	d121      	bne.n	800526a <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695a      	ldr	r2, [r3, #20]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005234:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800523c:	2b00      	cmp	r3, #0
 800523e:	d111      	bne.n	8005264 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	089b      	lsrs	r3, r3, #2
 8005250:	f003 020f 	and.w	r2, r3, #15
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800525a:	2101      	movs	r1, #1
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f007 f92b 	bl	800c4b8 <HAL_PCDEx_LPM_Callback>
 8005262:	e002      	b.n	800526a <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f006 ff23 	bl	800c0b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f004 fb42 	bl	80098f8 <USB_ReadInterrupts>
 8005274:	4603      	mov	r3, r0
 8005276:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800527a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800527e:	f040 80b7 	bne.w	80053f0 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	69fa      	ldr	r2, [r7, #28]
 800528c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2110      	movs	r1, #16
 800529c:	4618      	mov	r0, r3
 800529e:	f003 fafd 	bl	800889c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052a2:	2300      	movs	r3, #0
 80052a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052a6:	e046      	b.n	8005336 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80052a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	69fb      	ldr	r3, [r7, #28]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ba:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80052bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	69fa      	ldr	r2, [r7, #28]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052da:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80052dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052ee:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052f2:	015a      	lsls	r2, r3, #5
 80052f4:	69fb      	ldr	r3, [r7, #28]
 80052f6:	4413      	add	r3, r2
 80052f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005300:	0151      	lsls	r1, r2, #5
 8005302:	69fa      	ldr	r2, [r7, #28]
 8005304:	440a      	add	r2, r1
 8005306:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800530e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005312:	015a      	lsls	r2, r3, #5
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	4413      	add	r3, r2
 8005318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005320:	0151      	lsls	r1, r2, #5
 8005322:	69fa      	ldr	r2, [r7, #28]
 8005324:	440a      	add	r2, r1
 8005326:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800532a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800532e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005332:	3301      	adds	r3, #1
 8005334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800533c:	429a      	cmp	r2, r3
 800533e:	d3b3      	bcc.n	80052a8 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	69fa      	ldr	r2, [r7, #28]
 800534a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800534e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005352:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005358:	2b00      	cmp	r3, #0
 800535a:	d016      	beq.n	800538a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005366:	69fa      	ldr	r2, [r7, #28]
 8005368:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800536c:	f043 030b 	orr.w	r3, r3, #11
 8005370:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800537a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537c:	69fa      	ldr	r2, [r7, #28]
 800537e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005382:	f043 030b 	orr.w	r3, r3, #11
 8005386:	6453      	str	r3, [r2, #68]	; 0x44
 8005388:	e015      	b.n	80053b6 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005390:	695a      	ldr	r2, [r3, #20]
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005398:	4619      	mov	r1, r3
 800539a:	f242 032b 	movw	r3, #8235	; 0x202b
 800539e:	4313      	orrs	r3, r2
 80053a0:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	69fa      	ldr	r2, [r7, #28]
 80053ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053b0:	f043 030b 	orr.w	r3, r3, #11
 80053b4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80053b6:	69fb      	ldr	r3, [r7, #28]
 80053b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	69fa      	ldr	r2, [r7, #28]
 80053c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80053c8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6818      	ldr	r0, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80053da:	461a      	mov	r2, r3
 80053dc:	f004 fb52 	bl	8009a84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80053ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4618      	mov	r0, r3
 80053f6:	f004 fa7f 	bl	80098f8 <USB_ReadInterrupts>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005404:	d124      	bne.n	8005450 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4618      	mov	r0, r3
 800540c:	f004 fb16 	bl	8009a3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4618      	mov	r0, r3
 8005416:	f003 fabe 	bl	8008996 <USB_GetDevSpeed>
 800541a:	4603      	mov	r3, r0
 800541c:	461a      	mov	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681c      	ldr	r4, [r3, #0]
 8005426:	f001 fac1 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 800542a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005430:	b2db      	uxtb	r3, r3
 8005432:	461a      	mov	r2, r3
 8005434:	4620      	mov	r0, r4
 8005436:	f002 ffc3 	bl	80083c0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f006 fe0f 	bl	800c05e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	695a      	ldr	r2, [r3, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800544e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fa4f 	bl	80098f8 <USB_ReadInterrupts>
 800545a:	4603      	mov	r3, r0
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d10a      	bne.n	800547a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f006 fdec 	bl	800c042 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695a      	ldr	r2, [r3, #20]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f002 0208 	and.w	r2, r2, #8
 8005478:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f004 fa3a 	bl	80098f8 <USB_ReadInterrupts>
 8005484:	4603      	mov	r3, r0
 8005486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800548a:	2b80      	cmp	r3, #128	; 0x80
 800548c:	d122      	bne.n	80054d4 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800548e:	6a3b      	ldr	r3, [r7, #32]
 8005490:	699b      	ldr	r3, [r3, #24]
 8005492:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005496:	6a3b      	ldr	r3, [r7, #32]
 8005498:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800549a:	2301      	movs	r3, #1
 800549c:	627b      	str	r3, [r7, #36]	; 0x24
 800549e:	e014      	b.n	80054ca <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d105      	bne.n	80054c4 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80054b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	4619      	mov	r1, r3
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 fb27 	bl	8005b12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c6:	3301      	adds	r3, #1
 80054c8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d3e5      	bcc.n	80054a0 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4618      	mov	r0, r3
 80054da:	f004 fa0d 	bl	80098f8 <USB_ReadInterrupts>
 80054de:	4603      	mov	r3, r0
 80054e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054e8:	d13b      	bne.n	8005562 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80054ea:	2301      	movs	r3, #1
 80054ec:	627b      	str	r3, [r7, #36]	; 0x24
 80054ee:	e02b      	b.n	8005548 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80054f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f2:	015a      	lsls	r2, r3, #5
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005500:	6879      	ldr	r1, [r7, #4]
 8005502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005504:	4613      	mov	r3, r2
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4413      	add	r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	3340      	adds	r3, #64	; 0x40
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b01      	cmp	r3, #1
 8005514:	d115      	bne.n	8005542 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005516:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005518:	2b00      	cmp	r3, #0
 800551a:	da12      	bge.n	8005542 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800551c:	6879      	ldr	r1, [r7, #4]
 800551e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005520:	4613      	mov	r3, r2
 8005522:	00db      	lsls	r3, r3, #3
 8005524:	4413      	add	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	440b      	add	r3, r1
 800552a:	333f      	adds	r3, #63	; 0x3f
 800552c:	2201      	movs	r2, #1
 800552e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	b2db      	uxtb	r3, r3
 8005534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005538:	b2db      	uxtb	r3, r3
 800553a:	4619      	mov	r1, r3
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fae8 	bl	8005b12 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005544:	3301      	adds	r3, #1
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800554e:	429a      	cmp	r2, r3
 8005550:	d3ce      	bcc.n	80054f0 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f004 f9c6 	bl	80098f8 <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005572:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005576:	d155      	bne.n	8005624 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005578:	2301      	movs	r3, #1
 800557a:	627b      	str	r3, [r7, #36]	; 0x24
 800557c:	e045      	b.n	800560a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	015a      	lsls	r2, r3, #5
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800558e:	6879      	ldr	r1, [r7, #4]
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	4613      	mov	r3, r2
 8005594:	00db      	lsls	r3, r3, #3
 8005596:	4413      	add	r3, r2
 8005598:	009b      	lsls	r3, r3, #2
 800559a:	440b      	add	r3, r1
 800559c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d12e      	bne.n	8005604 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	da2b      	bge.n	8005604 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80055ac:	69bb      	ldr	r3, [r7, #24]
 80055ae:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80055b8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80055bc:	429a      	cmp	r2, r3
 80055be:	d121      	bne.n	8005604 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c4:	4613      	mov	r3, r2
 80055c6:	00db      	lsls	r3, r3, #3
 80055c8:	4413      	add	r3, r2
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	440b      	add	r3, r1
 80055ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055d2:	2201      	movs	r2, #1
 80055d4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005600:	6053      	str	r3, [r2, #4]
            break;
 8005602:	e007      	b.n	8005614 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005606:	3301      	adds	r3, #1
 8005608:	627b      	str	r3, [r7, #36]	; 0x24
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005610:	429a      	cmp	r2, r3
 8005612:	d3b4      	bcc.n	800557e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005622:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f004 f965 	bl	80098f8 <USB_ReadInterrupts>
 800562e:	4603      	mov	r3, r0
 8005630:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d10a      	bne.n	8005650 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f006 fd90 	bl	800c160 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	695a      	ldr	r2, [r3, #20]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800564e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4618      	mov	r0, r3
 8005656:	f004 f94f 	bl	80098f8 <USB_ReadInterrupts>
 800565a:	4603      	mov	r3, r0
 800565c:	f003 0304 	and.w	r3, r3, #4
 8005660:	2b04      	cmp	r3, #4
 8005662:	d115      	bne.n	8005690 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800566c:	69bb      	ldr	r3, [r7, #24]
 800566e:	f003 0304 	and.w	r3, r3, #4
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f006 fd80 	bl	800c17c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69ba      	ldr	r2, [r7, #24]
 8005688:	430a      	orrs	r2, r1
 800568a:	605a      	str	r2, [r3, #4]
 800568c:	e000      	b.n	8005690 <HAL_PCD_IRQHandler+0x992>
      return;
 800568e:	bf00      	nop
    }
  }
}
 8005690:	3734      	adds	r7, #52	; 0x34
 8005692:	46bd      	mov	sp, r7
 8005694:	bd90      	pop	{r4, r7, pc}

08005696 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005696:	b580      	push	{r7, lr}
 8005698:	b082      	sub	sp, #8
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_PCD_SetAddress+0x1a>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e013      	b.n	80056d8 <HAL_PCD_SetAddress+0x42>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	78fa      	ldrb	r2, [r7, #3]
 80056c6:	4611      	mov	r1, r2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f004 f8ad 	bl	8009828 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	4608      	mov	r0, r1
 80056ea:	4611      	mov	r1, r2
 80056ec:	461a      	mov	r2, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	70fb      	strb	r3, [r7, #3]
 80056f2:	460b      	mov	r3, r1
 80056f4:	803b      	strh	r3, [r7, #0]
 80056f6:	4613      	mov	r3, r2
 80056f8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80056fa:	2300      	movs	r3, #0
 80056fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005702:	2b00      	cmp	r3, #0
 8005704:	da0f      	bge.n	8005726 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	f003 020f 	and.w	r2, r3, #15
 800570c:	4613      	mov	r3, r2
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	3338      	adds	r3, #56	; 0x38
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	4413      	add	r3, r2
 800571a:	3304      	adds	r3, #4
 800571c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	705a      	strb	r2, [r3, #1]
 8005724:	e00f      	b.n	8005746 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005726:	78fb      	ldrb	r3, [r7, #3]
 8005728:	f003 020f 	and.w	r2, r3, #15
 800572c:	4613      	mov	r3, r2
 800572e:	00db      	lsls	r3, r3, #3
 8005730:	4413      	add	r3, r2
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	4413      	add	r3, r2
 800573c:	3304      	adds	r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005746:	78fb      	ldrb	r3, [r7, #3]
 8005748:	f003 030f 	and.w	r3, r3, #15
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005752:	883a      	ldrh	r2, [r7, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	78ba      	ldrb	r2, [r7, #2]
 800575c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	785b      	ldrb	r3, [r3, #1]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d004      	beq.n	8005770 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005770:	78bb      	ldrb	r3, [r7, #2]
 8005772:	2b02      	cmp	r3, #2
 8005774:	d102      	bne.n	800577c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005782:	2b01      	cmp	r3, #1
 8005784:	d101      	bne.n	800578a <HAL_PCD_EP_Open+0xaa>
 8005786:	2302      	movs	r3, #2
 8005788:	e00e      	b.n	80057a8 <HAL_PCD_EP_Open+0xc8>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2201      	movs	r2, #1
 800578e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	4618      	mov	r0, r3
 800579a:	f003 f921 	bl	80089e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80057a6:	7afb      	ldrb	r3, [r7, #11]
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3710      	adds	r7, #16
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd80      	pop	{r7, pc}

080057b0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b084      	sub	sp, #16
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	460b      	mov	r3, r1
 80057ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80057bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	da0f      	bge.n	80057e4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80057c4:	78fb      	ldrb	r3, [r7, #3]
 80057c6:	f003 020f 	and.w	r2, r3, #15
 80057ca:	4613      	mov	r3, r2
 80057cc:	00db      	lsls	r3, r3, #3
 80057ce:	4413      	add	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	3338      	adds	r3, #56	; 0x38
 80057d4:	687a      	ldr	r2, [r7, #4]
 80057d6:	4413      	add	r3, r2
 80057d8:	3304      	adds	r3, #4
 80057da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2201      	movs	r2, #1
 80057e0:	705a      	strb	r2, [r3, #1]
 80057e2:	e00f      	b.n	8005804 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80057e4:	78fb      	ldrb	r3, [r7, #3]
 80057e6:	f003 020f 	and.w	r2, r3, #15
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	3304      	adds	r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	f003 030f 	and.w	r3, r3, #15
 800580a:	b2da      	uxtb	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005816:	2b01      	cmp	r3, #1
 8005818:	d101      	bne.n	800581e <HAL_PCD_EP_Close+0x6e>
 800581a:	2302      	movs	r3, #2
 800581c:	e00e      	b.n	800583c <HAL_PCD_EP_Close+0x8c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2201      	movs	r2, #1
 8005822:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	4618      	mov	r0, r3
 800582e:	f003 f95f 	bl	8008af0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b086      	sub	sp, #24
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	607a      	str	r2, [r7, #4]
 800584e:	603b      	str	r3, [r7, #0]
 8005850:	460b      	mov	r3, r1
 8005852:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005854:	7afb      	ldrb	r3, [r7, #11]
 8005856:	f003 020f 	and.w	r2, r3, #15
 800585a:	4613      	mov	r3, r2
 800585c:	00db      	lsls	r3, r3, #3
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005866:	68fa      	ldr	r2, [r7, #12]
 8005868:	4413      	add	r3, r2
 800586a:	3304      	adds	r3, #4
 800586c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	683a      	ldr	r2, [r7, #0]
 8005878:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	2200      	movs	r2, #0
 800587e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005886:	7afb      	ldrb	r3, [r7, #11]
 8005888:	f003 030f 	and.w	r3, r3, #15
 800588c:	b2da      	uxtb	r2, r3
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	2b01      	cmp	r3, #1
 8005898:	d102      	bne.n	80058a0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800589a:	687a      	ldr	r2, [r7, #4]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80058a0:	7afb      	ldrb	r3, [r7, #11]
 80058a2:	f003 030f 	and.w	r3, r3, #15
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d109      	bne.n	80058be <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	6979      	ldr	r1, [r7, #20]
 80058b8:	f003 fc46 	bl	8009148 <USB_EP0StartXfer>
 80058bc:	e008      	b.n	80058d0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6818      	ldr	r0, [r3, #0]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	461a      	mov	r2, r3
 80058ca:	6979      	ldr	r1, [r7, #20]
 80058cc:	f003 f9ec 	bl	8008ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
 80058e2:	460b      	mov	r3, r1
 80058e4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	6879      	ldr	r1, [r7, #4]
 80058ee:	4613      	mov	r3, r2
 80058f0:	00db      	lsls	r3, r3, #3
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80058fc:	681b      	ldr	r3, [r3, #0]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	370c      	adds	r7, #12
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr

0800590a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b086      	sub	sp, #24
 800590e:	af00      	add	r7, sp, #0
 8005910:	60f8      	str	r0, [r7, #12]
 8005912:	607a      	str	r2, [r7, #4]
 8005914:	603b      	str	r3, [r7, #0]
 8005916:	460b      	mov	r3, r1
 8005918:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800591a:	7afb      	ldrb	r3, [r7, #11]
 800591c:	f003 020f 	and.w	r2, r3, #15
 8005920:	4613      	mov	r3, r2
 8005922:	00db      	lsls	r3, r3, #3
 8005924:	4413      	add	r3, r2
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	3338      	adds	r3, #56	; 0x38
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4413      	add	r3, r2
 800592e:	3304      	adds	r3, #4
 8005930:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	683a      	ldr	r2, [r7, #0]
 800593c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	2200      	movs	r2, #0
 8005942:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	2201      	movs	r2, #1
 8005948:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800594a:	7afb      	ldrb	r3, [r7, #11]
 800594c:	f003 030f 	and.w	r3, r3, #15
 8005950:	b2da      	uxtb	r2, r3
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	691b      	ldr	r3, [r3, #16]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d102      	bne.n	8005964 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005964:	7afb      	ldrb	r3, [r7, #11]
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	2b00      	cmp	r3, #0
 800596c:	d109      	bne.n	8005982 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6818      	ldr	r0, [r3, #0]
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	b2db      	uxtb	r3, r3
 8005978:	461a      	mov	r2, r3
 800597a:	6979      	ldr	r1, [r7, #20]
 800597c:	f003 fbe4 	bl	8009148 <USB_EP0StartXfer>
 8005980:	e008      	b.n	8005994 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	6818      	ldr	r0, [r3, #0]
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	691b      	ldr	r3, [r3, #16]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	6979      	ldr	r1, [r7, #20]
 8005990:	f003 f98a 	bl	8008ca8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3718      	adds	r7, #24
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	460b      	mov	r3, r1
 80059a8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80059aa:	78fb      	ldrb	r3, [r7, #3]
 80059ac:	f003 020f 	and.w	r2, r3, #15
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d901      	bls.n	80059bc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e050      	b.n	8005a5e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80059bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da0f      	bge.n	80059e4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059c4:	78fb      	ldrb	r3, [r7, #3]
 80059c6:	f003 020f 	and.w	r2, r3, #15
 80059ca:	4613      	mov	r3, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	4413      	add	r3, r2
 80059d0:	009b      	lsls	r3, r3, #2
 80059d2:	3338      	adds	r3, #56	; 0x38
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	4413      	add	r3, r2
 80059d8:	3304      	adds	r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2201      	movs	r2, #1
 80059e0:	705a      	strb	r2, [r3, #1]
 80059e2:	e00d      	b.n	8005a00 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	4613      	mov	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4413      	add	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	3304      	adds	r3, #4
 80059f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2200      	movs	r2, #0
 80059fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a06:	78fb      	ldrb	r3, [r7, #3]
 8005a08:	f003 030f 	and.w	r3, r3, #15
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d101      	bne.n	8005a20 <HAL_PCD_EP_SetStall+0x82>
 8005a1c:	2302      	movs	r3, #2
 8005a1e:	e01e      	b.n	8005a5e <HAL_PCD_EP_SetStall+0xc0>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	68f9      	ldr	r1, [r7, #12]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f003 fe26 	bl	8009680 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	f003 030f 	and.w	r3, r3, #15
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d10a      	bne.n	8005a54 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	b2d9      	uxtb	r1, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f004 f818 	bl	8009a84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
 8005a6e:	460b      	mov	r3, r1
 8005a70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005a72:	78fb      	ldrb	r3, [r7, #3]
 8005a74:	f003 020f 	and.w	r2, r3, #15
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d901      	bls.n	8005a84 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005a80:	2301      	movs	r3, #1
 8005a82:	e042      	b.n	8005b0a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005a84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da0f      	bge.n	8005aac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a8c:	78fb      	ldrb	r3, [r7, #3]
 8005a8e:	f003 020f 	and.w	r2, r3, #15
 8005a92:	4613      	mov	r3, r2
 8005a94:	00db      	lsls	r3, r3, #3
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3338      	adds	r3, #56	; 0x38
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	3304      	adds	r3, #4
 8005aa2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	705a      	strb	r2, [r3, #1]
 8005aaa:	e00f      	b.n	8005acc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4413      	add	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005abe:	687a      	ldr	r2, [r7, #4]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ad2:	78fb      	ldrb	r3, [r7, #3]
 8005ad4:	f003 030f 	and.w	r3, r3, #15
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d101      	bne.n	8005aec <HAL_PCD_EP_ClrStall+0x86>
 8005ae8:	2302      	movs	r3, #2
 8005aea:	e00e      	b.n	8005b0a <HAL_PCD_EP_ClrStall+0xa4>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68f9      	ldr	r1, [r7, #12]
 8005afa:	4618      	mov	r0, r3
 8005afc:	f003 fe2e 	bl	800975c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b084      	sub	sp, #16
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	da0c      	bge.n	8005b40 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b26:	78fb      	ldrb	r3, [r7, #3]
 8005b28:	f003 020f 	and.w	r2, r3, #15
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	00db      	lsls	r3, r3, #3
 8005b30:	4413      	add	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	3338      	adds	r3, #56	; 0x38
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	4413      	add	r3, r2
 8005b3a:	3304      	adds	r3, #4
 8005b3c:	60fb      	str	r3, [r7, #12]
 8005b3e:	e00c      	b.n	8005b5a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b40:	78fb      	ldrb	r3, [r7, #3]
 8005b42:	f003 020f 	and.w	r2, r3, #15
 8005b46:	4613      	mov	r3, r2
 8005b48:	00db      	lsls	r3, r3, #3
 8005b4a:	4413      	add	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005b52:	687a      	ldr	r2, [r7, #4]
 8005b54:	4413      	add	r3, r2
 8005b56:	3304      	adds	r3, #4
 8005b58:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	68f9      	ldr	r1, [r7, #12]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f003 fc4d 	bl	8009400 <USB_EPStopXfer>
 8005b66:	4603      	mov	r3, r0
 8005b68:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005b6a:	7afb      	ldrb	r3, [r7, #11]
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3710      	adds	r7, #16
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b08a      	sub	sp, #40	; 0x28
 8005b78:	af02      	add	r7, sp, #8
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	3338      	adds	r3, #56	; 0x38
 8005b94:	687a      	ldr	r2, [r7, #4]
 8005b96:	4413      	add	r3, r2
 8005b98:	3304      	adds	r3, #4
 8005b9a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d901      	bls.n	8005bac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e06c      	b.n	8005c86 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a1b      	ldr	r3, [r3, #32]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d902      	bls.n	8005bc8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	68db      	ldr	r3, [r3, #12]
 8005bc6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	3303      	adds	r3, #3
 8005bcc:	089b      	lsrs	r3, r3, #2
 8005bce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005bd0:	e02b      	b.n	8005c2a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	699a      	ldr	r2, [r3, #24]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	69fa      	ldr	r2, [r7, #28]
 8005be4:	429a      	cmp	r2, r3
 8005be6:	d902      	bls.n	8005bee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	3303      	adds	r3, #3
 8005bf2:	089b      	lsrs	r3, r3, #2
 8005bf4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6919      	ldr	r1, [r3, #16]
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	b2da      	uxtb	r2, r3
 8005bfe:	69fb      	ldr	r3, [r7, #28]
 8005c00:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	6978      	ldr	r0, [r7, #20]
 8005c0e:	f003 fca1 	bl	8009554 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a1a      	ldr	r2, [r3, #32]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	441a      	add	r2, r3
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c3a:	69ba      	ldr	r2, [r7, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d809      	bhi.n	8005c54 <PCD_WriteEmptyTxFifo+0xe0>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6a1a      	ldr	r2, [r3, #32]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d203      	bcs.n	8005c54 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1be      	bne.n	8005bd2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	699a      	ldr	r2, [r3, #24]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a1b      	ldr	r3, [r3, #32]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d811      	bhi.n	8005c84 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	f003 030f 	and.w	r3, r3, #15
 8005c66:	2201      	movs	r2, #1
 8005c68:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	43db      	mvns	r3, r3
 8005c7a:	6939      	ldr	r1, [r7, #16]
 8005c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005c80:	4013      	ands	r3, r2
 8005c82:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3720      	adds	r7, #32
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	333c      	adds	r3, #60	; 0x3c
 8005ca8:	3304      	adds	r3, #4
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	015a      	lsls	r2, r3, #5
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	691b      	ldr	r3, [r3, #16]
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d17b      	bne.n	8005dbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	f003 0308 	and.w	r3, r3, #8
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d015      	beq.n	8005cfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	4a61      	ldr	r2, [pc, #388]	; (8005e58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005cd4:	4293      	cmp	r3, r2
 8005cd6:	f240 80b9 	bls.w	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 80b3 	beq.w	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	015a      	lsls	r2, r3, #5
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	4413      	add	r3, r2
 8005cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf8:	6093      	str	r3, [r2, #8]
 8005cfa:	e0a7      	b.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	461a      	mov	r2, r3
 8005d14:	2320      	movs	r3, #32
 8005d16:	6093      	str	r3, [r2, #8]
 8005d18:	e098      	b.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	f040 8093 	bne.w	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4a4b      	ldr	r2, [pc, #300]	; (8005e58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d90f      	bls.n	8005d4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00a      	beq.n	8005d4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69bb      	ldr	r3, [r7, #24]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d44:	461a      	mov	r2, r3
 8005d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d4a:	6093      	str	r3, [r2, #8]
 8005d4c:	e07e      	b.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4613      	mov	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	4413      	add	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	4413      	add	r3, r2
 8005d60:	3304      	adds	r3, #4
 8005d62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	69da      	ldr	r2, [r3, #28]
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	0159      	lsls	r1, r3, #5
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	440b      	add	r3, r1
 8005d70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d7a:	1ad2      	subs	r2, r2, r3
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d114      	bne.n	8005db0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d98:	461a      	mov	r2, r3
 8005d9a:	2101      	movs	r1, #1
 8005d9c:	f003 fe72 	bl	8009a84 <USB_EP0_OutStart>
 8005da0:	e006      	b.n	8005db0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691a      	ldr	r2, [r3, #16]
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6a1b      	ldr	r3, [r3, #32]
 8005daa:	441a      	add	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	4619      	mov	r1, r3
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f006 f90e 	bl	800bfd8 <HAL_PCD_DataOutStageCallback>
 8005dbc:	e046      	b.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	4a26      	ldr	r2, [pc, #152]	; (8005e5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d124      	bne.n	8005e10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	015a      	lsls	r2, r3, #5
 8005dd4:	69bb      	ldr	r3, [r7, #24]
 8005dd6:	4413      	add	r3, r2
 8005dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ddc:	461a      	mov	r2, r3
 8005dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005de2:	6093      	str	r3, [r2, #8]
 8005de4:	e032      	b.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2320      	movs	r3, #32
 8005e00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	4619      	mov	r1, r3
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f006 f8e5 	bl	800bfd8 <HAL_PCD_DataOutStageCallback>
 8005e0e:	e01d      	b.n	8005e4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d114      	bne.n	8005e40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005e16:	6879      	ldr	r1, [r7, #4]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d108      	bne.n	8005e40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e38:	461a      	mov	r2, r3
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	f003 fe22 	bl	8009a84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	4619      	mov	r1, r3
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f006 f8c6 	bl	800bfd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3720      	adds	r7, #32
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	4f54300a 	.word	0x4f54300a
 8005e5c:	4f54310a 	.word	0x4f54310a

08005e60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	333c      	adds	r3, #60	; 0x3c
 8005e78:	3304      	adds	r3, #4
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	4a15      	ldr	r2, [pc, #84]	; (8005ee8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d90e      	bls.n	8005eb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d009      	beq.n	8005eb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	015a      	lsls	r2, r3, #5
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eac:	461a      	mov	r2, r3
 8005eae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f006 f87d 	bl	800bfb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d90c      	bls.n	8005edc <PCD_EP_OutSetupPacket_int+0x7c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d108      	bne.n	8005edc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ed4:	461a      	mov	r2, r3
 8005ed6:	2101      	movs	r1, #1
 8005ed8:	f003 fdd4 	bl	8009a84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005edc:	2300      	movs	r3, #0
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	bd80      	pop	{r7, pc}
 8005ee6:	bf00      	nop
 8005ee8:	4f54300a 	.word	0x4f54300a

08005eec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b085      	sub	sp, #20
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	70fb      	strb	r3, [r7, #3]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005f04:	78fb      	ldrb	r3, [r7, #3]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d107      	bne.n	8005f1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005f0a:	883b      	ldrh	r3, [r7, #0]
 8005f0c:	0419      	lsls	r1, r3, #16
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	68ba      	ldr	r2, [r7, #8]
 8005f14:	430a      	orrs	r2, r1
 8005f16:	629a      	str	r2, [r3, #40]	; 0x28
 8005f18:	e028      	b.n	8005f6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f20:	0c1b      	lsrs	r3, r3, #16
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	4413      	add	r3, r2
 8005f26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f28:	2300      	movs	r3, #0
 8005f2a:	73fb      	strb	r3, [r7, #15]
 8005f2c:	e00d      	b.n	8005f4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	3340      	adds	r3, #64	; 0x40
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	0c1b      	lsrs	r3, r3, #16
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4413      	add	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005f44:	7bfb      	ldrb	r3, [r7, #15]
 8005f46:	3301      	adds	r3, #1
 8005f48:	73fb      	strb	r3, [r7, #15]
 8005f4a:	7bfa      	ldrb	r2, [r7, #15]
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d3ec      	bcc.n	8005f2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005f54:	883b      	ldrh	r3, [r7, #0]
 8005f56:	0418      	lsls	r0, r3, #16
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6819      	ldr	r1, [r3, #0]
 8005f5c:	78fb      	ldrb	r3, [r7, #3]
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	4302      	orrs	r2, r0
 8005f64:	3340      	adds	r3, #64	; 0x40
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	440b      	add	r3, r1
 8005f6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3714      	adds	r7, #20
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b083      	sub	sp, #12
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
 8005f82:	460b      	mov	r3, r1
 8005f84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	887a      	ldrh	r2, [r7, #2]
 8005f8c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	370c      	adds	r7, #12
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2201      	movs	r2, #1
 8005fae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005fca:	4b05      	ldr	r3, [pc, #20]	; (8005fe0 <HAL_PCDEx_ActivateLPM+0x44>)
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	10000003 	.word	0x10000003

08005fe4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b082      	sub	sp, #8
 8005fe8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8005fea:	2300      	movs	r3, #0
 8005fec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005fee:	4b23      	ldr	r3, [pc, #140]	; (800607c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff2:	4a22      	ldr	r2, [pc, #136]	; (800607c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8005ffa:	4b20      	ldr	r3, [pc, #128]	; (800607c <HAL_PWREx_EnableOverDrive+0x98>)
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006002:	603b      	str	r3, [r7, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006006:	4b1e      	ldr	r3, [pc, #120]	; (8006080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800600c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006010:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006012:	f7fd f853 	bl	80030bc <HAL_GetTick>
 8006016:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006018:	e009      	b.n	800602e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800601a:	f7fd f84f 	bl	80030bc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006028:	d901      	bls.n	800602e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800602a:	2303      	movs	r3, #3
 800602c:	e022      	b.n	8006074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800602e:	4b14      	ldr	r3, [pc, #80]	; (8006080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800603a:	d1ee      	bne.n	800601a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <HAL_PWREx_EnableOverDrive+0x9c>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a0f      	ldr	r2, [pc, #60]	; (8006080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006042:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006046:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006048:	f7fd f838 	bl	80030bc <HAL_GetTick>
 800604c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800604e:	e009      	b.n	8006064 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006050:	f7fd f834 	bl	80030bc <HAL_GetTick>
 8006054:	4602      	mov	r2, r0
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800605e:	d901      	bls.n	8006064 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006060:	2303      	movs	r3, #3
 8006062:	e007      	b.n	8006074 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006064:	4b06      	ldr	r3, [pc, #24]	; (8006080 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800606c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006070:	d1ee      	bne.n	8006050 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	40023800 	.word	0x40023800
 8006080:	40007000 	.word	0x40007000

08006084 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800608c:	2300      	movs	r3, #0
 800608e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e291      	b.n	80065be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	f000 8087 	beq.w	80061b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80060a8:	4b96      	ldr	r3, [pc, #600]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 030c 	and.w	r3, r3, #12
 80060b0:	2b04      	cmp	r3, #4
 80060b2:	d00c      	beq.n	80060ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b4:	4b93      	ldr	r3, [pc, #588]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	f003 030c 	and.w	r3, r3, #12
 80060bc:	2b08      	cmp	r3, #8
 80060be:	d112      	bne.n	80060e6 <HAL_RCC_OscConfig+0x62>
 80060c0:	4b90      	ldr	r3, [pc, #576]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060cc:	d10b      	bne.n	80060e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060ce:	4b8d      	ldr	r3, [pc, #564]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d06c      	beq.n	80061b4 <HAL_RCC_OscConfig+0x130>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d168      	bne.n	80061b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e26b      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ee:	d106      	bne.n	80060fe <HAL_RCC_OscConfig+0x7a>
 80060f0:	4b84      	ldr	r3, [pc, #528]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a83      	ldr	r2, [pc, #524]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80060f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060fa:	6013      	str	r3, [r2, #0]
 80060fc:	e02e      	b.n	800615c <HAL_RCC_OscConfig+0xd8>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d10c      	bne.n	8006120 <HAL_RCC_OscConfig+0x9c>
 8006106:	4b7f      	ldr	r3, [pc, #508]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a7e      	ldr	r2, [pc, #504]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800610c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4b7c      	ldr	r3, [pc, #496]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a7b      	ldr	r2, [pc, #492]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006118:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e01d      	b.n	800615c <HAL_RCC_OscConfig+0xd8>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006128:	d10c      	bne.n	8006144 <HAL_RCC_OscConfig+0xc0>
 800612a:	4b76      	ldr	r3, [pc, #472]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a75      	ldr	r2, [pc, #468]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006130:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	4b73      	ldr	r3, [pc, #460]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a72      	ldr	r2, [pc, #456]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800613c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006140:	6013      	str	r3, [r2, #0]
 8006142:	e00b      	b.n	800615c <HAL_RCC_OscConfig+0xd8>
 8006144:	4b6f      	ldr	r3, [pc, #444]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a6e      	ldr	r2, [pc, #440]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800614a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800614e:	6013      	str	r3, [r2, #0]
 8006150:	4b6c      	ldr	r3, [pc, #432]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	4a6b      	ldr	r2, [pc, #428]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006156:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800615a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d013      	beq.n	800618c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006164:	f7fc ffaa 	bl	80030bc <HAL_GetTick>
 8006168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800616a:	e008      	b.n	800617e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800616c:	f7fc ffa6 	bl	80030bc <HAL_GetTick>
 8006170:	4602      	mov	r2, r0
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	2b64      	cmp	r3, #100	; 0x64
 8006178:	d901      	bls.n	800617e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800617a:	2303      	movs	r3, #3
 800617c:	e21f      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800617e:	4b61      	ldr	r3, [pc, #388]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d0f0      	beq.n	800616c <HAL_RCC_OscConfig+0xe8>
 800618a:	e014      	b.n	80061b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800618c:	f7fc ff96 	bl	80030bc <HAL_GetTick>
 8006190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006192:	e008      	b.n	80061a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006194:	f7fc ff92 	bl	80030bc <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b64      	cmp	r3, #100	; 0x64
 80061a0:	d901      	bls.n	80061a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e20b      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80061a6:	4b57      	ldr	r3, [pc, #348]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1f0      	bne.n	8006194 <HAL_RCC_OscConfig+0x110>
 80061b2:	e000      	b.n	80061b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d069      	beq.n	8006296 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80061c2:	4b50      	ldr	r3, [pc, #320]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	f003 030c 	and.w	r3, r3, #12
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00b      	beq.n	80061e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061ce:	4b4d      	ldr	r3, [pc, #308]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f003 030c 	and.w	r3, r3, #12
 80061d6:	2b08      	cmp	r3, #8
 80061d8:	d11c      	bne.n	8006214 <HAL_RCC_OscConfig+0x190>
 80061da:	4b4a      	ldr	r3, [pc, #296]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d116      	bne.n	8006214 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061e6:	4b47      	ldr	r3, [pc, #284]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f003 0302 	and.w	r3, r3, #2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d005      	beq.n	80061fe <HAL_RCC_OscConfig+0x17a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d001      	beq.n	80061fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80061fa:	2301      	movs	r3, #1
 80061fc:	e1df      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061fe:	4b41      	ldr	r3, [pc, #260]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	493d      	ldr	r1, [pc, #244]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800620e:	4313      	orrs	r3, r2
 8006210:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006212:	e040      	b.n	8006296 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	2b00      	cmp	r3, #0
 800621a:	d023      	beq.n	8006264 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800621c:	4b39      	ldr	r3, [pc, #228]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a38      	ldr	r2, [pc, #224]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006222:	f043 0301 	orr.w	r3, r3, #1
 8006226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006228:	f7fc ff48 	bl	80030bc <HAL_GetTick>
 800622c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800622e:	e008      	b.n	8006242 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006230:	f7fc ff44 	bl	80030bc <HAL_GetTick>
 8006234:	4602      	mov	r2, r0
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	2b02      	cmp	r3, #2
 800623c:	d901      	bls.n	8006242 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e1bd      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006242:	4b30      	ldr	r3, [pc, #192]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0f0      	beq.n	8006230 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800624e:	4b2d      	ldr	r3, [pc, #180]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	00db      	lsls	r3, r3, #3
 800625c:	4929      	ldr	r1, [pc, #164]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800625e:	4313      	orrs	r3, r2
 8006260:	600b      	str	r3, [r1, #0]
 8006262:	e018      	b.n	8006296 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006264:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a26      	ldr	r2, [pc, #152]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800626a:	f023 0301 	bic.w	r3, r3, #1
 800626e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006270:	f7fc ff24 	bl	80030bc <HAL_GetTick>
 8006274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006276:	e008      	b.n	800628a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006278:	f7fc ff20 	bl	80030bc <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	2b02      	cmp	r3, #2
 8006284:	d901      	bls.n	800628a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e199      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800628a:	4b1e      	ldr	r3, [pc, #120]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b00      	cmp	r3, #0
 8006294:	d1f0      	bne.n	8006278 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 0308 	and.w	r3, r3, #8
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d038      	beq.n	8006314 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d019      	beq.n	80062de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062aa:	4b16      	ldr	r3, [pc, #88]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062ae:	4a15      	ldr	r2, [pc, #84]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062b6:	f7fc ff01 	bl	80030bc <HAL_GetTick>
 80062ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062bc:	e008      	b.n	80062d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062be:	f7fc fefd 	bl	80030bc <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	2b02      	cmp	r3, #2
 80062ca:	d901      	bls.n	80062d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80062cc:	2303      	movs	r3, #3
 80062ce:	e176      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80062d0:	4b0c      	ldr	r3, [pc, #48]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062d4:	f003 0302 	and.w	r3, r3, #2
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d0f0      	beq.n	80062be <HAL_RCC_OscConfig+0x23a>
 80062dc:	e01a      	b.n	8006314 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062de:	4b09      	ldr	r3, [pc, #36]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062e2:	4a08      	ldr	r2, [pc, #32]	; (8006304 <HAL_RCC_OscConfig+0x280>)
 80062e4:	f023 0301 	bic.w	r3, r3, #1
 80062e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ea:	f7fc fee7 	bl	80030bc <HAL_GetTick>
 80062ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062f0:	e00a      	b.n	8006308 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f2:	f7fc fee3 	bl	80030bc <HAL_GetTick>
 80062f6:	4602      	mov	r2, r0
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	1ad3      	subs	r3, r2, r3
 80062fc:	2b02      	cmp	r3, #2
 80062fe:	d903      	bls.n	8006308 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e15c      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
 8006304:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006308:	4b91      	ldr	r3, [pc, #580]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800630a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800630c:	f003 0302 	and.w	r3, r3, #2
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1ee      	bne.n	80062f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0304 	and.w	r3, r3, #4
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 80a4 	beq.w	800646a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006322:	4b8b      	ldr	r3, [pc, #556]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10d      	bne.n	800634a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800632e:	4b88      	ldr	r3, [pc, #544]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006332:	4a87      	ldr	r2, [pc, #540]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006334:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006338:	6413      	str	r3, [r2, #64]	; 0x40
 800633a:	4b85      	ldr	r3, [pc, #532]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800633c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800633e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006342:	60bb      	str	r3, [r7, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006346:	2301      	movs	r3, #1
 8006348:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800634a:	4b82      	ldr	r3, [pc, #520]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006352:	2b00      	cmp	r3, #0
 8006354:	d118      	bne.n	8006388 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006356:	4b7f      	ldr	r3, [pc, #508]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a7e      	ldr	r2, [pc, #504]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 800635c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006360:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006362:	f7fc feab 	bl	80030bc <HAL_GetTick>
 8006366:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006368:	e008      	b.n	800637c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800636a:	f7fc fea7 	bl	80030bc <HAL_GetTick>
 800636e:	4602      	mov	r2, r0
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	1ad3      	subs	r3, r2, r3
 8006374:	2b64      	cmp	r3, #100	; 0x64
 8006376:	d901      	bls.n	800637c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	e120      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800637c:	4b75      	ldr	r3, [pc, #468]	; (8006554 <HAL_RCC_OscConfig+0x4d0>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d0f0      	beq.n	800636a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	689b      	ldr	r3, [r3, #8]
 800638c:	2b01      	cmp	r3, #1
 800638e:	d106      	bne.n	800639e <HAL_RCC_OscConfig+0x31a>
 8006390:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006394:	4a6e      	ldr	r2, [pc, #440]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6713      	str	r3, [r2, #112]	; 0x70
 800639c:	e02d      	b.n	80063fa <HAL_RCC_OscConfig+0x376>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689b      	ldr	r3, [r3, #8]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10c      	bne.n	80063c0 <HAL_RCC_OscConfig+0x33c>
 80063a6:	4b6a      	ldr	r3, [pc, #424]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	4a69      	ldr	r2, [pc, #420]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063ac:	f023 0301 	bic.w	r3, r3, #1
 80063b0:	6713      	str	r3, [r2, #112]	; 0x70
 80063b2:	4b67      	ldr	r3, [pc, #412]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063b6:	4a66      	ldr	r2, [pc, #408]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063b8:	f023 0304 	bic.w	r3, r3, #4
 80063bc:	6713      	str	r3, [r2, #112]	; 0x70
 80063be:	e01c      	b.n	80063fa <HAL_RCC_OscConfig+0x376>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2b05      	cmp	r3, #5
 80063c6:	d10c      	bne.n	80063e2 <HAL_RCC_OscConfig+0x35e>
 80063c8:	4b61      	ldr	r3, [pc, #388]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063cc:	4a60      	ldr	r2, [pc, #384]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063ce:	f043 0304 	orr.w	r3, r3, #4
 80063d2:	6713      	str	r3, [r2, #112]	; 0x70
 80063d4:	4b5e      	ldr	r3, [pc, #376]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063d8:	4a5d      	ldr	r2, [pc, #372]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063da:	f043 0301 	orr.w	r3, r3, #1
 80063de:	6713      	str	r3, [r2, #112]	; 0x70
 80063e0:	e00b      	b.n	80063fa <HAL_RCC_OscConfig+0x376>
 80063e2:	4b5b      	ldr	r3, [pc, #364]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063e6:	4a5a      	ldr	r2, [pc, #360]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063e8:	f023 0301 	bic.w	r3, r3, #1
 80063ec:	6713      	str	r3, [r2, #112]	; 0x70
 80063ee:	4b58      	ldr	r3, [pc, #352]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063f2:	4a57      	ldr	r2, [pc, #348]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80063f4:	f023 0304 	bic.w	r3, r3, #4
 80063f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d015      	beq.n	800642e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006402:	f7fc fe5b 	bl	80030bc <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006408:	e00a      	b.n	8006420 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800640a:	f7fc fe57 	bl	80030bc <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f241 3288 	movw	r2, #5000	; 0x1388
 8006418:	4293      	cmp	r3, r2
 800641a:	d901      	bls.n	8006420 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800641c:	2303      	movs	r3, #3
 800641e:	e0ce      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006420:	4b4b      	ldr	r3, [pc, #300]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b00      	cmp	r3, #0
 800642a:	d0ee      	beq.n	800640a <HAL_RCC_OscConfig+0x386>
 800642c:	e014      	b.n	8006458 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800642e:	f7fc fe45 	bl	80030bc <HAL_GetTick>
 8006432:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006434:	e00a      	b.n	800644c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006436:	f7fc fe41 	bl	80030bc <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	693b      	ldr	r3, [r7, #16]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	f241 3288 	movw	r2, #5000	; 0x1388
 8006444:	4293      	cmp	r3, r2
 8006446:	d901      	bls.n	800644c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006448:	2303      	movs	r3, #3
 800644a:	e0b8      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800644c:	4b40      	ldr	r3, [pc, #256]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800644e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006450:	f003 0302 	and.w	r3, r3, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d1ee      	bne.n	8006436 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	2b01      	cmp	r3, #1
 800645c:	d105      	bne.n	800646a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800645e:	4b3c      	ldr	r3, [pc, #240]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006462:	4a3b      	ldr	r2, [pc, #236]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006468:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	699b      	ldr	r3, [r3, #24]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80a4 	beq.w	80065bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006474:	4b36      	ldr	r3, [pc, #216]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	f003 030c 	and.w	r3, r3, #12
 800647c:	2b08      	cmp	r3, #8
 800647e:	d06b      	beq.n	8006558 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	2b02      	cmp	r3, #2
 8006486:	d149      	bne.n	800651c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006488:	4b31      	ldr	r3, [pc, #196]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4a30      	ldr	r2, [pc, #192]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800648e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006492:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006494:	f7fc fe12 	bl	80030bc <HAL_GetTick>
 8006498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800649a:	e008      	b.n	80064ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800649c:	f7fc fe0e 	bl	80030bc <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d901      	bls.n	80064ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e087      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064ae:	4b28      	ldr	r3, [pc, #160]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d1f0      	bne.n	800649c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	69da      	ldr	r2, [r3, #28]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	431a      	orrs	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c8:	019b      	lsls	r3, r3, #6
 80064ca:	431a      	orrs	r2, r3
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	3b01      	subs	r3, #1
 80064d4:	041b      	lsls	r3, r3, #16
 80064d6:	431a      	orrs	r2, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064dc:	061b      	lsls	r3, r3, #24
 80064de:	4313      	orrs	r3, r2
 80064e0:	4a1b      	ldr	r2, [pc, #108]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a18      	ldr	r2, [pc, #96]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 80064ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064f4:	f7fc fde2 	bl	80030bc <HAL_GetTick>
 80064f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064fa:	e008      	b.n	800650e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064fc:	f7fc fdde 	bl	80030bc <HAL_GetTick>
 8006500:	4602      	mov	r2, r0
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	1ad3      	subs	r3, r2, r3
 8006506:	2b02      	cmp	r3, #2
 8006508:	d901      	bls.n	800650e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800650a:	2303      	movs	r3, #3
 800650c:	e057      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650e:	4b10      	ldr	r3, [pc, #64]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d0f0      	beq.n	80064fc <HAL_RCC_OscConfig+0x478>
 800651a:	e04f      	b.n	80065bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a0b      	ldr	r2, [pc, #44]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006522:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006526:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006528:	f7fc fdc8 	bl	80030bc <HAL_GetTick>
 800652c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800652e:	e008      	b.n	8006542 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006530:	f7fc fdc4 	bl	80030bc <HAL_GetTick>
 8006534:	4602      	mov	r2, r0
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	1ad3      	subs	r3, r2, r3
 800653a:	2b02      	cmp	r3, #2
 800653c:	d901      	bls.n	8006542 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e03d      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006542:	4b03      	ldr	r3, [pc, #12]	; (8006550 <HAL_RCC_OscConfig+0x4cc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d1f0      	bne.n	8006530 <HAL_RCC_OscConfig+0x4ac>
 800654e:	e035      	b.n	80065bc <HAL_RCC_OscConfig+0x538>
 8006550:	40023800 	.word	0x40023800
 8006554:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006558:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <HAL_RCC_OscConfig+0x544>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	2b01      	cmp	r3, #1
 8006564:	d028      	beq.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006570:	429a      	cmp	r2, r3
 8006572:	d121      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800657e:	429a      	cmp	r2, r3
 8006580:	d11a      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006588:	4013      	ands	r3, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800658e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006590:	4293      	cmp	r3, r2
 8006592:	d111      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659e:	085b      	lsrs	r3, r3, #1
 80065a0:	3b01      	subs	r3, #1
 80065a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d107      	bne.n	80065b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d001      	beq.n	80065bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e000      	b.n	80065be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	40023800 	.word	0x40023800

080065cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80065d6:	2300      	movs	r3, #0
 80065d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80065e0:	2301      	movs	r3, #1
 80065e2:	e0d0      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065e4:	4b6a      	ldr	r3, [pc, #424]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 030f 	and.w	r3, r3, #15
 80065ec:	683a      	ldr	r2, [r7, #0]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d910      	bls.n	8006614 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065f2:	4b67      	ldr	r3, [pc, #412]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f023 020f 	bic.w	r2, r3, #15
 80065fa:	4965      	ldr	r1, [pc, #404]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	4313      	orrs	r3, r2
 8006600:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006602:	4b63      	ldr	r3, [pc, #396]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	683a      	ldr	r2, [r7, #0]
 800660c:	429a      	cmp	r2, r3
 800660e:	d001      	beq.n	8006614 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e0b8      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f003 0302 	and.w	r3, r3, #2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d020      	beq.n	8006662 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d005      	beq.n	8006638 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800662c:	4b59      	ldr	r3, [pc, #356]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	4a58      	ldr	r2, [pc, #352]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006632:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006636:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 0308 	and.w	r3, r3, #8
 8006640:	2b00      	cmp	r3, #0
 8006642:	d005      	beq.n	8006650 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006644:	4b53      	ldr	r3, [pc, #332]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	4a52      	ldr	r2, [pc, #328]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800664a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800664e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006650:	4b50      	ldr	r3, [pc, #320]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	494d      	ldr	r1, [pc, #308]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800665e:	4313      	orrs	r3, r2
 8006660:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0301 	and.w	r3, r3, #1
 800666a:	2b00      	cmp	r3, #0
 800666c:	d040      	beq.n	80066f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	2b01      	cmp	r3, #1
 8006674:	d107      	bne.n	8006686 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006676:	4b47      	ldr	r3, [pc, #284]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d115      	bne.n	80066ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e07f      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d107      	bne.n	800669e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668e:	4b41      	ldr	r3, [pc, #260]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006696:	2b00      	cmp	r3, #0
 8006698:	d109      	bne.n	80066ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	e073      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669e:	4b3d      	ldr	r3, [pc, #244]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 0302 	and.w	r3, r3, #2
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d101      	bne.n	80066ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	e06b      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066ae:	4b39      	ldr	r3, [pc, #228]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	f023 0203 	bic.w	r2, r3, #3
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	4936      	ldr	r1, [pc, #216]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80066c0:	f7fc fcfc 	bl	80030bc <HAL_GetTick>
 80066c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c6:	e00a      	b.n	80066de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c8:	f7fc fcf8 	bl	80030bc <HAL_GetTick>
 80066cc:	4602      	mov	r2, r0
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d901      	bls.n	80066de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e053      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066de:	4b2d      	ldr	r3, [pc, #180]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	f003 020c 	and.w	r2, r3, #12
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	685b      	ldr	r3, [r3, #4]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d1eb      	bne.n	80066c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066f0:	4b27      	ldr	r3, [pc, #156]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f003 030f 	and.w	r3, r3, #15
 80066f8:	683a      	ldr	r2, [r7, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d210      	bcs.n	8006720 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fe:	4b24      	ldr	r3, [pc, #144]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f023 020f 	bic.w	r2, r3, #15
 8006706:	4922      	ldr	r1, [pc, #136]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	4313      	orrs	r3, r2
 800670c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800670e:	4b20      	ldr	r3, [pc, #128]	; (8006790 <HAL_RCC_ClockConfig+0x1c4>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	f003 030f 	and.w	r3, r3, #15
 8006716:	683a      	ldr	r2, [r7, #0]
 8006718:	429a      	cmp	r2, r3
 800671a:	d001      	beq.n	8006720 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e032      	b.n	8006786 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d008      	beq.n	800673e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800672e:	689b      	ldr	r3, [r3, #8]
 8006730:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	4916      	ldr	r1, [pc, #88]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800673a:	4313      	orrs	r3, r2
 800673c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0308 	and.w	r3, r3, #8
 8006746:	2b00      	cmp	r3, #0
 8006748:	d009      	beq.n	800675e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800674a:	4b12      	ldr	r3, [pc, #72]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	490e      	ldr	r1, [pc, #56]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 800675a:	4313      	orrs	r3, r2
 800675c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800675e:	f000 f821 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8006762:	4602      	mov	r2, r0
 8006764:	4b0b      	ldr	r3, [pc, #44]	; (8006794 <HAL_RCC_ClockConfig+0x1c8>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	091b      	lsrs	r3, r3, #4
 800676a:	f003 030f 	and.w	r3, r3, #15
 800676e:	490a      	ldr	r1, [pc, #40]	; (8006798 <HAL_RCC_ClockConfig+0x1cc>)
 8006770:	5ccb      	ldrb	r3, [r1, r3]
 8006772:	fa22 f303 	lsr.w	r3, r2, r3
 8006776:	4a09      	ldr	r2, [pc, #36]	; (800679c <HAL_RCC_ClockConfig+0x1d0>)
 8006778:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800677a:	4b09      	ldr	r3, [pc, #36]	; (80067a0 <HAL_RCC_ClockConfig+0x1d4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f7fc fc58 	bl	8003034 <HAL_InitTick>

  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}
 800678e:	bf00      	nop
 8006790:	40023c00 	.word	0x40023c00
 8006794:	40023800 	.word	0x40023800
 8006798:	0800d108 	.word	0x0800d108
 800679c:	2000008c 	.word	0x2000008c
 80067a0:	20000090 	.word	0x20000090

080067a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067a8:	b094      	sub	sp, #80	; 0x50
 80067aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80067ac:	2300      	movs	r3, #0
 80067ae:	647b      	str	r3, [r7, #68]	; 0x44
 80067b0:	2300      	movs	r3, #0
 80067b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067b4:	2300      	movs	r3, #0
 80067b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80067b8:	2300      	movs	r3, #0
 80067ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067bc:	4b79      	ldr	r3, [pc, #484]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	f003 030c 	and.w	r3, r3, #12
 80067c4:	2b08      	cmp	r3, #8
 80067c6:	d00d      	beq.n	80067e4 <HAL_RCC_GetSysClockFreq+0x40>
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	f200 80e1 	bhi.w	8006990 <HAL_RCC_GetSysClockFreq+0x1ec>
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d002      	beq.n	80067d8 <HAL_RCC_GetSysClockFreq+0x34>
 80067d2:	2b04      	cmp	r3, #4
 80067d4:	d003      	beq.n	80067de <HAL_RCC_GetSysClockFreq+0x3a>
 80067d6:	e0db      	b.n	8006990 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067d8:	4b73      	ldr	r3, [pc, #460]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067dc:	e0db      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067de:	4b72      	ldr	r3, [pc, #456]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80067e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80067e2:	e0d8      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067e4:	4b6f      	ldr	r3, [pc, #444]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80067ee:	4b6d      	ldr	r3, [pc, #436]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d063      	beq.n	80068c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067fa:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	099b      	lsrs	r3, r3, #6
 8006800:	2200      	movs	r2, #0
 8006802:	63bb      	str	r3, [r7, #56]	; 0x38
 8006804:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006808:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800680c:	633b      	str	r3, [r7, #48]	; 0x30
 800680e:	2300      	movs	r3, #0
 8006810:	637b      	str	r3, [r7, #52]	; 0x34
 8006812:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006816:	4622      	mov	r2, r4
 8006818:	462b      	mov	r3, r5
 800681a:	f04f 0000 	mov.w	r0, #0
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	0159      	lsls	r1, r3, #5
 8006824:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006828:	0150      	lsls	r0, r2, #5
 800682a:	4602      	mov	r2, r0
 800682c:	460b      	mov	r3, r1
 800682e:	4621      	mov	r1, r4
 8006830:	1a51      	subs	r1, r2, r1
 8006832:	6139      	str	r1, [r7, #16]
 8006834:	4629      	mov	r1, r5
 8006836:	eb63 0301 	sbc.w	r3, r3, r1
 800683a:	617b      	str	r3, [r7, #20]
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006848:	4659      	mov	r1, fp
 800684a:	018b      	lsls	r3, r1, #6
 800684c:	4651      	mov	r1, sl
 800684e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006852:	4651      	mov	r1, sl
 8006854:	018a      	lsls	r2, r1, #6
 8006856:	4651      	mov	r1, sl
 8006858:	ebb2 0801 	subs.w	r8, r2, r1
 800685c:	4659      	mov	r1, fp
 800685e:	eb63 0901 	sbc.w	r9, r3, r1
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800686e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006876:	4690      	mov	r8, r2
 8006878:	4699      	mov	r9, r3
 800687a:	4623      	mov	r3, r4
 800687c:	eb18 0303 	adds.w	r3, r8, r3
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	462b      	mov	r3, r5
 8006884:	eb49 0303 	adc.w	r3, r9, r3
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	f04f 0200 	mov.w	r2, #0
 800688e:	f04f 0300 	mov.w	r3, #0
 8006892:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006896:	4629      	mov	r1, r5
 8006898:	028b      	lsls	r3, r1, #10
 800689a:	4621      	mov	r1, r4
 800689c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80068a0:	4621      	mov	r1, r4
 80068a2:	028a      	lsls	r2, r1, #10
 80068a4:	4610      	mov	r0, r2
 80068a6:	4619      	mov	r1, r3
 80068a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068aa:	2200      	movs	r2, #0
 80068ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068b4:	f7f9 fcfc 	bl	80002b0 <__aeabi_uldivmod>
 80068b8:	4602      	mov	r2, r0
 80068ba:	460b      	mov	r3, r1
 80068bc:	4613      	mov	r3, r2
 80068be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068c0:	e058      	b.n	8006974 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068c2:	4b38      	ldr	r3, [pc, #224]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	099b      	lsrs	r3, r3, #6
 80068c8:	2200      	movs	r2, #0
 80068ca:	4618      	mov	r0, r3
 80068cc:	4611      	mov	r1, r2
 80068ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80068d2:	623b      	str	r3, [r7, #32]
 80068d4:	2300      	movs	r3, #0
 80068d6:	627b      	str	r3, [r7, #36]	; 0x24
 80068d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80068dc:	4642      	mov	r2, r8
 80068de:	464b      	mov	r3, r9
 80068e0:	f04f 0000 	mov.w	r0, #0
 80068e4:	f04f 0100 	mov.w	r1, #0
 80068e8:	0159      	lsls	r1, r3, #5
 80068ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068ee:	0150      	lsls	r0, r2, #5
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4641      	mov	r1, r8
 80068f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80068fa:	4649      	mov	r1, r9
 80068fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8006900:	f04f 0200 	mov.w	r2, #0
 8006904:	f04f 0300 	mov.w	r3, #0
 8006908:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800690c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006910:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006914:	ebb2 040a 	subs.w	r4, r2, sl
 8006918:	eb63 050b 	sbc.w	r5, r3, fp
 800691c:	f04f 0200 	mov.w	r2, #0
 8006920:	f04f 0300 	mov.w	r3, #0
 8006924:	00eb      	lsls	r3, r5, #3
 8006926:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800692a:	00e2      	lsls	r2, r4, #3
 800692c:	4614      	mov	r4, r2
 800692e:	461d      	mov	r5, r3
 8006930:	4643      	mov	r3, r8
 8006932:	18e3      	adds	r3, r4, r3
 8006934:	603b      	str	r3, [r7, #0]
 8006936:	464b      	mov	r3, r9
 8006938:	eb45 0303 	adc.w	r3, r5, r3
 800693c:	607b      	str	r3, [r7, #4]
 800693e:	f04f 0200 	mov.w	r2, #0
 8006942:	f04f 0300 	mov.w	r3, #0
 8006946:	e9d7 4500 	ldrd	r4, r5, [r7]
 800694a:	4629      	mov	r1, r5
 800694c:	028b      	lsls	r3, r1, #10
 800694e:	4621      	mov	r1, r4
 8006950:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006954:	4621      	mov	r1, r4
 8006956:	028a      	lsls	r2, r1, #10
 8006958:	4610      	mov	r0, r2
 800695a:	4619      	mov	r1, r3
 800695c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695e:	2200      	movs	r2, #0
 8006960:	61bb      	str	r3, [r7, #24]
 8006962:	61fa      	str	r2, [r7, #28]
 8006964:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006968:	f7f9 fca2 	bl	80002b0 <__aeabi_uldivmod>
 800696c:	4602      	mov	r2, r0
 800696e:	460b      	mov	r3, r1
 8006970:	4613      	mov	r3, r2
 8006972:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006974:	4b0b      	ldr	r3, [pc, #44]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	0c1b      	lsrs	r3, r3, #16
 800697a:	f003 0303 	and.w	r3, r3, #3
 800697e:	3301      	adds	r3, #1
 8006980:	005b      	lsls	r3, r3, #1
 8006982:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006984:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006986:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006988:	fbb2 f3f3 	udiv	r3, r2, r3
 800698c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800698e:	e002      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006990:	4b05      	ldr	r3, [pc, #20]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006992:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006994:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006998:	4618      	mov	r0, r3
 800699a:	3750      	adds	r7, #80	; 0x50
 800699c:	46bd      	mov	sp, r7
 800699e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069a2:	bf00      	nop
 80069a4:	40023800 	.word	0x40023800
 80069a8:	00f42400 	.word	0x00f42400

080069ac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069b0:	4b03      	ldr	r3, [pc, #12]	; (80069c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80069b2:	681b      	ldr	r3, [r3, #0]
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr
 80069be:	bf00      	nop
 80069c0:	2000008c 	.word	0x2000008c

080069c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c8:	f7ff fff0 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069cc:	4602      	mov	r2, r0
 80069ce:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	0a9b      	lsrs	r3, r3, #10
 80069d4:	f003 0307 	and.w	r3, r3, #7
 80069d8:	4903      	ldr	r1, [pc, #12]	; (80069e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069da:	5ccb      	ldrb	r3, [r1, r3]
 80069dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	40023800 	.word	0x40023800
 80069e8:	0800d118 	.word	0x0800d118

080069ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069f0:	f7ff ffdc 	bl	80069ac <HAL_RCC_GetHCLKFreq>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	0b5b      	lsrs	r3, r3, #13
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4903      	ldr	r1, [pc, #12]	; (8006a10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a02:	5ccb      	ldrb	r3, [r1, r3]
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	40023800 	.word	0x40023800
 8006a10:	0800d118 	.word	0x0800d118

08006a14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006a20:	2300      	movs	r3, #0
 8006a22:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006a24:	2300      	movs	r3, #0
 8006a26:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0301 	and.w	r3, r3, #1
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d012      	beq.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006a3c:	4b69      	ldr	r3, [pc, #420]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4a68      	ldr	r2, [pc, #416]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a42:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006a46:	6093      	str	r3, [r2, #8]
 8006a48:	4b66      	ldr	r3, [pc, #408]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a4a:	689a      	ldr	r2, [r3, #8]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a50:	4964      	ldr	r1, [pc, #400]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a52:	4313      	orrs	r3, r2
 8006a54:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d101      	bne.n	8006a62 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d017      	beq.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a6e:	4b5d      	ldr	r3, [pc, #372]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a7c:	4959      	ldr	r1, [pc, #356]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d101      	bne.n	8006a9e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d017      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006aaa:	4b4e      	ldr	r3, [pc, #312]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ab0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab8:	494a      	ldr	r1, [pc, #296]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ac4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ac8:	d101      	bne.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006aca:	2301      	movs	r3, #1
 8006acc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d101      	bne.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0320 	and.w	r3, r3, #32
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	f000 808b 	beq.w	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af8:	4b3a      	ldr	r3, [pc, #232]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006afc:	4a39      	ldr	r2, [pc, #228]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b02:	6413      	str	r3, [r2, #64]	; 0x40
 8006b04:	4b37      	ldr	r3, [pc, #220]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	60bb      	str	r3, [r7, #8]
 8006b0e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006b10:	4b35      	ldr	r3, [pc, #212]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a34      	ldr	r2, [pc, #208]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1c:	f7fc face 	bl	80030bc <HAL_GetTick>
 8006b20:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b22:	e008      	b.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b24:	f7fc faca 	bl	80030bc <HAL_GetTick>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	1ad3      	subs	r3, r2, r3
 8006b2e:	2b64      	cmp	r3, #100	; 0x64
 8006b30:	d901      	bls.n	8006b36 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e357      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006b36:	4b2c      	ldr	r3, [pc, #176]	; (8006be8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d0f0      	beq.n	8006b24 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006b42:	4b28      	ldr	r3, [pc, #160]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b4a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d035      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b5a:	693a      	ldr	r2, [r7, #16]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d02e      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006b60:	4b20      	ldr	r3, [pc, #128]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b68:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006b6a:	4b1e      	ldr	r3, [pc, #120]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6e:	4a1d      	ldr	r2, [pc, #116]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b74:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006b76:	4b1b      	ldr	r3, [pc, #108]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7a:	4a1a      	ldr	r2, [pc, #104]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b80:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006b82:	4a18      	ldr	r2, [pc, #96]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006b88:	4b16      	ldr	r3, [pc, #88]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8c:	f003 0301 	and.w	r3, r3, #1
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d114      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b94:	f7fc fa92 	bl	80030bc <HAL_GetTick>
 8006b98:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b9a:	e00a      	b.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b9c:	f7fc fa8e 	bl	80030bc <HAL_GetTick>
 8006ba0:	4602      	mov	r2, r0
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	1ad3      	subs	r3, r2, r3
 8006ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d901      	bls.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	e319      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bb2:	4b0c      	ldr	r3, [pc, #48]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb6:	f003 0302 	and.w	r3, r3, #2
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0ee      	beq.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bca:	d111      	bne.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006bcc:	4b05      	ldr	r3, [pc, #20]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006bd8:	4b04      	ldr	r3, [pc, #16]	; (8006bec <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006bda:	400b      	ands	r3, r1
 8006bdc:	4901      	ldr	r1, [pc, #4]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
 8006be2:	e00b      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006be4:	40023800 	.word	0x40023800
 8006be8:	40007000 	.word	0x40007000
 8006bec:	0ffffcff 	.word	0x0ffffcff
 8006bf0:	4baa      	ldr	r3, [pc, #680]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	4aa9      	ldr	r2, [pc, #676]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bf6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006bfa:	6093      	str	r3, [r2, #8]
 8006bfc:	4ba7      	ldr	r3, [pc, #668]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006bfe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c08:	49a4      	ldr	r1, [pc, #656]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c0a:	4313      	orrs	r3, r2
 8006c0c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0310 	and.w	r3, r3, #16
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d010      	beq.n	8006c3c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006c1a:	4ba0      	ldr	r3, [pc, #640]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c20:	4a9e      	ldr	r2, [pc, #632]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c26:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006c2a:	4b9c      	ldr	r3, [pc, #624]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c2c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c34:	4999      	ldr	r1, [pc, #612]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006c48:	4b94      	ldr	r3, [pc, #592]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c4e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c56:	4991      	ldr	r1, [pc, #580]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006c6a:	4b8c      	ldr	r3, [pc, #560]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c70:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c78:	4988      	ldr	r1, [pc, #544]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006c8c:	4b83      	ldr	r3, [pc, #524]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c9a:	4980      	ldr	r1, [pc, #512]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006cae:	4b7b      	ldr	r3, [pc, #492]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cb4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cbc:	4977      	ldr	r1, [pc, #476]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006cd0:	4b72      	ldr	r3, [pc, #456]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cd6:	f023 0203 	bic.w	r2, r3, #3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	496f      	ldr	r1, [pc, #444]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006cf2:	4b6a      	ldr	r3, [pc, #424]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	f023 020c 	bic.w	r2, r3, #12
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d00:	4966      	ldr	r1, [pc, #408]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006d14:	4b61      	ldr	r3, [pc, #388]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d1a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d22:	495e      	ldr	r1, [pc, #376]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00a      	beq.n	8006d4c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006d36:	4b59      	ldr	r3, [pc, #356]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d44:	4955      	ldr	r1, [pc, #340]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d46:	4313      	orrs	r3, r2
 8006d48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00a      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006d58:	4b50      	ldr	r3, [pc, #320]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d66:	494d      	ldr	r1, [pc, #308]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d00a      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006d7a:	4b48      	ldr	r3, [pc, #288]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d80:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d88:	4944      	ldr	r1, [pc, #272]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00a      	beq.n	8006db2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006d9c:	4b3f      	ldr	r3, [pc, #252]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006daa:	493c      	ldr	r1, [pc, #240]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dac:	4313      	orrs	r3, r2
 8006dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d00a      	beq.n	8006dd4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006dbe:	4b37      	ldr	r3, [pc, #220]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006dcc:	4933      	ldr	r1, [pc, #204]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00a      	beq.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006de0:	4b2e      	ldr	r3, [pc, #184]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006de6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dee:	492b      	ldr	r1, [pc, #172]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006df0:	4313      	orrs	r3, r2
 8006df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d011      	beq.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006e02:	4b26      	ldr	r3, [pc, #152]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e08:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e10:	4922      	ldr	r1, [pc, #136]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006e20:	d101      	bne.n	8006e26 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006e22:	2301      	movs	r3, #1
 8006e24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 0308 	and.w	r3, r3, #8
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8006e32:	2301      	movs	r3, #1
 8006e34:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00a      	beq.n	8006e58 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006e42:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e48:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e50:	4912      	ldr	r1, [pc, #72]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e52:	4313      	orrs	r3, r2
 8006e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d00b      	beq.n	8006e7c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e6a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e74:	4909      	ldr	r1, [pc, #36]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	2b01      	cmp	r3, #1
 8006e80:	d006      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	f000 80d9 	beq.w	8007042 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006e90:	4b02      	ldr	r3, [pc, #8]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a01      	ldr	r2, [pc, #4]	; (8006e9c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e96:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006e9a:	e001      	b.n	8006ea0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006e9c:	40023800 	.word	0x40023800
 8006ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ea2:	f7fc f90b 	bl	80030bc <HAL_GetTick>
 8006ea6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ea8:	e008      	b.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006eaa:	f7fc f907 	bl	80030bc <HAL_GetTick>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	1ad3      	subs	r3, r2, r3
 8006eb4:	2b64      	cmp	r3, #100	; 0x64
 8006eb6:	d901      	bls.n	8006ebc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006eb8:	2303      	movs	r3, #3
 8006eba:	e194      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006ebc:	4b6c      	ldr	r3, [pc, #432]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d1f0      	bne.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d021      	beq.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d11d      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006edc:	4b64      	ldr	r3, [pc, #400]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006ede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee2:	0c1b      	lsrs	r3, r3, #16
 8006ee4:	f003 0303 	and.w	r3, r3, #3
 8006ee8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006eea:	4b61      	ldr	r3, [pc, #388]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef0:	0e1b      	lsrs	r3, r3, #24
 8006ef2:	f003 030f 	and.w	r3, r3, #15
 8006ef6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	019a      	lsls	r2, r3, #6
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	041b      	lsls	r3, r3, #16
 8006f02:	431a      	orrs	r2, r3
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	061b      	lsls	r3, r3, #24
 8006f08:	431a      	orrs	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	071b      	lsls	r3, r3, #28
 8006f10:	4957      	ldr	r1, [pc, #348]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d004      	beq.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f2c:	d00a      	beq.n	8006f44 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d02e      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f42:	d129      	bne.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006f44:	4b4a      	ldr	r3, [pc, #296]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f4a:	0c1b      	lsrs	r3, r3, #16
 8006f4c:	f003 0303 	and.w	r3, r3, #3
 8006f50:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006f52:	4b47      	ldr	r3, [pc, #284]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f58:	0f1b      	lsrs	r3, r3, #28
 8006f5a:	f003 0307 	and.w	r3, r3, #7
 8006f5e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	019a      	lsls	r2, r3, #6
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	041b      	lsls	r3, r3, #16
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	061b      	lsls	r3, r3, #24
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	071b      	lsls	r3, r3, #28
 8006f78:	493d      	ldr	r1, [pc, #244]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006f80:	4b3b      	ldr	r3, [pc, #236]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f86:	f023 021f 	bic.w	r2, r3, #31
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	3b01      	subs	r3, #1
 8006f90:	4937      	ldr	r1, [pc, #220]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d01d      	beq.n	8006fe0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006fa4:	4b32      	ldr	r3, [pc, #200]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fa6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006faa:	0e1b      	lsrs	r3, r3, #24
 8006fac:	f003 030f 	and.w	r3, r3, #15
 8006fb0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006fb2:	4b2f      	ldr	r3, [pc, #188]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006fb8:	0f1b      	lsrs	r3, r3, #28
 8006fba:	f003 0307 	and.w	r3, r3, #7
 8006fbe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	019a      	lsls	r2, r3, #6
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	041b      	lsls	r3, r3, #16
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	061b      	lsls	r3, r3, #24
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	071b      	lsls	r3, r3, #28
 8006fd8:	4925      	ldr	r1, [pc, #148]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006fda:	4313      	orrs	r3, r2
 8006fdc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d011      	beq.n	8007010 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	019a      	lsls	r2, r3, #6
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	041b      	lsls	r3, r3, #16
 8006ff8:	431a      	orrs	r2, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	061b      	lsls	r3, r3, #24
 8007000:	431a      	orrs	r2, r3
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689b      	ldr	r3, [r3, #8]
 8007006:	071b      	lsls	r3, r3, #28
 8007008:	4919      	ldr	r1, [pc, #100]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007010:	4b17      	ldr	r3, [pc, #92]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a16      	ldr	r2, [pc, #88]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007016:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800701a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701c:	f7fc f84e 	bl	80030bc <HAL_GetTick>
 8007020:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007022:	e008      	b.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007024:	f7fc f84a 	bl	80030bc <HAL_GetTick>
 8007028:	4602      	mov	r2, r0
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	1ad3      	subs	r3, r2, r3
 800702e:	2b64      	cmp	r3, #100	; 0x64
 8007030:	d901      	bls.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007032:	2303      	movs	r3, #3
 8007034:	e0d7      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007036:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800703e:	2b00      	cmp	r3, #0
 8007040:	d0f0      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b01      	cmp	r3, #1
 8007046:	f040 80cd 	bne.w	80071e4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800704a:	4b09      	ldr	r3, [pc, #36]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	4a08      	ldr	r2, [pc, #32]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007050:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007054:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007056:	f7fc f831 	bl	80030bc <HAL_GetTick>
 800705a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800705c:	e00a      	b.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800705e:	f7fc f82d 	bl	80030bc <HAL_GetTick>
 8007062:	4602      	mov	r2, r0
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	1ad3      	subs	r3, r2, r3
 8007068:	2b64      	cmp	r3, #100	; 0x64
 800706a:	d903      	bls.n	8007074 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800706c:	2303      	movs	r3, #3
 800706e:	e0ba      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007070:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007074:	4b5e      	ldr	r3, [pc, #376]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800707c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007080:	d0ed      	beq.n	800705e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d003      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d02e      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d12a      	bne.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80070aa:	4b51      	ldr	r3, [pc, #324]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070b0:	0c1b      	lsrs	r3, r3, #16
 80070b2:	f003 0303 	and.w	r3, r3, #3
 80070b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070b8:	4b4d      	ldr	r3, [pc, #308]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070be:	0f1b      	lsrs	r3, r3, #28
 80070c0:	f003 0307 	and.w	r3, r3, #7
 80070c4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	695b      	ldr	r3, [r3, #20]
 80070ca:	019a      	lsls	r2, r3, #6
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	041b      	lsls	r3, r3, #16
 80070d0:	431a      	orrs	r2, r3
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	061b      	lsls	r3, r3, #24
 80070d8:	431a      	orrs	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	071b      	lsls	r3, r3, #28
 80070de:	4944      	ldr	r1, [pc, #272]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e0:	4313      	orrs	r3, r2
 80070e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80070e6:	4b42      	ldr	r3, [pc, #264]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ec:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070f4:	3b01      	subs	r3, #1
 80070f6:	021b      	lsls	r3, r3, #8
 80070f8:	493d      	ldr	r1, [pc, #244]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80070fa:	4313      	orrs	r3, r2
 80070fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d022      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007110:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007114:	d11d      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007116:	4b36      	ldr	r3, [pc, #216]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800711c:	0e1b      	lsrs	r3, r3, #24
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007124:	4b32      	ldr	r3, [pc, #200]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800712a:	0f1b      	lsrs	r3, r3, #28
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	695b      	ldr	r3, [r3, #20]
 8007136:	019a      	lsls	r2, r3, #6
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	041b      	lsls	r3, r3, #16
 800713e:	431a      	orrs	r2, r3
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	061b      	lsls	r3, r3, #24
 8007144:	431a      	orrs	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	071b      	lsls	r3, r3, #28
 800714a:	4929      	ldr	r1, [pc, #164]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800714c:	4313      	orrs	r3, r2
 800714e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f003 0308 	and.w	r3, r3, #8
 800715a:	2b00      	cmp	r3, #0
 800715c:	d028      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800715e:	4b24      	ldr	r3, [pc, #144]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007164:	0e1b      	lsrs	r3, r3, #24
 8007166:	f003 030f 	and.w	r3, r3, #15
 800716a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800716c:	4b20      	ldr	r3, [pc, #128]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800716e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007172:	0c1b      	lsrs	r3, r3, #16
 8007174:	f003 0303 	and.w	r3, r3, #3
 8007178:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	695b      	ldr	r3, [r3, #20]
 800717e:	019a      	lsls	r2, r3, #6
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	041b      	lsls	r3, r3, #16
 8007184:	431a      	orrs	r2, r3
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	061b      	lsls	r3, r3, #24
 800718a:	431a      	orrs	r2, r3
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	69db      	ldr	r3, [r3, #28]
 8007190:	071b      	lsls	r3, r3, #28
 8007192:	4917      	ldr	r1, [pc, #92]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007194:	4313      	orrs	r3, r2
 8007196:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800719c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a8:	4911      	ldr	r1, [pc, #68]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071aa:	4313      	orrs	r3, r2
 80071ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80071b0:	4b0f      	ldr	r3, [pc, #60]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a0e      	ldr	r2, [pc, #56]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071bc:	f7fb ff7e 	bl	80030bc <HAL_GetTick>
 80071c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071c2:	e008      	b.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80071c4:	f7fb ff7a 	bl	80030bc <HAL_GetTick>
 80071c8:	4602      	mov	r2, r0
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	1ad3      	subs	r3, r2, r3
 80071ce:	2b64      	cmp	r3, #100	; 0x64
 80071d0:	d901      	bls.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071d2:	2303      	movs	r3, #3
 80071d4:	e007      	b.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071e2:	d1ef      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3720      	adds	r7, #32
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	40023800 	.word	0x40023800

080071f4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007206:	2301      	movs	r3, #1
 8007208:	e038      	b.n	800727c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007210:	b2db      	uxtb	r3, r3
 8007212:	2b00      	cmp	r3, #0
 8007214:	d106      	bne.n	8007224 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f7fa fe20 	bl	8001e64 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681a      	ldr	r2, [r3, #0]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3308      	adds	r3, #8
 800722c:	4619      	mov	r1, r3
 800722e:	4610      	mov	r0, r2
 8007230:	f000 ff56 	bl	80080e0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	6818      	ldr	r0, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	461a      	mov	r2, r3
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	f000 ffde 	bl	8008200 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	6858      	ldr	r0, [r3, #4]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007250:	6879      	ldr	r1, [r7, #4]
 8007252:	f001 f825 	bl	80082a0 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	68fa      	ldr	r2, [r7, #12]
 800725c:	6892      	ldr	r2, [r2, #8]
 800725e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	6892      	ldr	r2, [r2, #8]
 800726a:	f041 0101 	orr.w	r1, r1, #1
 800726e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2201      	movs	r2, #1
 8007276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800727a:	2300      	movs	r3, #0
}
 800727c:	4618      	mov	r0, r3
 800727e:	3710      	adds	r7, #16
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d101      	bne.n	8007296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007292:	2301      	movs	r3, #1
 8007294:	e049      	b.n	800732a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d106      	bne.n	80072b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f7fa fc66 	bl	8001b7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	3304      	adds	r3, #4
 80072c0:	4619      	mov	r1, r3
 80072c2:	4610      	mov	r0, r2
 80072c4:	f000 f878 	bl	80073b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007328:	2300      	movs	r3, #0
}
 800732a:	4618      	mov	r0, r3
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007342:	2b01      	cmp	r3, #1
 8007344:	d101      	bne.n	800734a <HAL_TIM_SlaveConfigSynchro+0x18>
 8007346:	2302      	movs	r3, #2
 8007348:	e031      	b.n	80073ae <HAL_TIM_SlaveConfigSynchro+0x7c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2202      	movs	r2, #2
 8007356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8cb 	bl	80074f8 <TIM_SlaveTimer_SetConfig>
 8007362:	4603      	mov	r3, r0
 8007364:	2b00      	cmp	r3, #0
 8007366:	d009      	beq.n	800737c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e018      	b.n	80073ae <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	68da      	ldr	r2, [r3, #12]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800738a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	68da      	ldr	r2, [r3, #12]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800739a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2200      	movs	r2, #0
 80073a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
	...

080073b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b085      	sub	sp, #20
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a40      	ldr	r2, [pc, #256]	; (80074cc <TIM_Base_SetConfig+0x114>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d013      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d6:	d00f      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a3d      	ldr	r2, [pc, #244]	; (80074d0 <TIM_Base_SetConfig+0x118>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00b      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	4a3c      	ldr	r2, [pc, #240]	; (80074d4 <TIM_Base_SetConfig+0x11c>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d007      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	4a3b      	ldr	r2, [pc, #236]	; (80074d8 <TIM_Base_SetConfig+0x120>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d003      	beq.n	80073f8 <TIM_Base_SetConfig+0x40>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	4a3a      	ldr	r2, [pc, #232]	; (80074dc <TIM_Base_SetConfig+0x124>)
 80073f4:	4293      	cmp	r3, r2
 80073f6:	d108      	bne.n	800740a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a2f      	ldr	r2, [pc, #188]	; (80074cc <TIM_Base_SetConfig+0x114>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d02b      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007418:	d027      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a2c      	ldr	r2, [pc, #176]	; (80074d0 <TIM_Base_SetConfig+0x118>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d023      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a2b      	ldr	r2, [pc, #172]	; (80074d4 <TIM_Base_SetConfig+0x11c>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d01f      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <TIM_Base_SetConfig+0x120>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d01b      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a29      	ldr	r2, [pc, #164]	; (80074dc <TIM_Base_SetConfig+0x124>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d017      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a28      	ldr	r2, [pc, #160]	; (80074e0 <TIM_Base_SetConfig+0x128>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d013      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a27      	ldr	r2, [pc, #156]	; (80074e4 <TIM_Base_SetConfig+0x12c>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d00f      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a26      	ldr	r2, [pc, #152]	; (80074e8 <TIM_Base_SetConfig+0x130>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d00b      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	4a25      	ldr	r2, [pc, #148]	; (80074ec <TIM_Base_SetConfig+0x134>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d007      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	4a24      	ldr	r2, [pc, #144]	; (80074f0 <TIM_Base_SetConfig+0x138>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d003      	beq.n	800746a <TIM_Base_SetConfig+0xb2>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	4a23      	ldr	r2, [pc, #140]	; (80074f4 <TIM_Base_SetConfig+0x13c>)
 8007466:	4293      	cmp	r3, r2
 8007468:	d108      	bne.n	800747c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	68db      	ldr	r3, [r3, #12]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	4313      	orrs	r3, r2
 800747a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	695b      	ldr	r3, [r3, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	689a      	ldr	r2, [r3, #8]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681a      	ldr	r2, [r3, #0]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a0a      	ldr	r2, [pc, #40]	; (80074cc <TIM_Base_SetConfig+0x114>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d003      	beq.n	80074b0 <TIM_Base_SetConfig+0xf8>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	4a0c      	ldr	r2, [pc, #48]	; (80074dc <TIM_Base_SetConfig+0x124>)
 80074ac:	4293      	cmp	r3, r2
 80074ae:	d103      	bne.n	80074b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	691a      	ldr	r2, [r3, #16]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	615a      	str	r2, [r3, #20]
}
 80074be:	bf00      	nop
 80074c0:	3714      	adds	r7, #20
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
 80074ca:	bf00      	nop
 80074cc:	40010000 	.word	0x40010000
 80074d0:	40000400 	.word	0x40000400
 80074d4:	40000800 	.word	0x40000800
 80074d8:	40000c00 	.word	0x40000c00
 80074dc:	40010400 	.word	0x40010400
 80074e0:	40014000 	.word	0x40014000
 80074e4:	40014400 	.word	0x40014400
 80074e8:	40014800 	.word	0x40014800
 80074ec:	40001800 	.word	0x40001800
 80074f0:	40001c00 	.word	0x40001c00
 80074f4:	40002000 	.word	0x40002000

080074f8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b086      	sub	sp, #24
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007514:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	693a      	ldr	r2, [r7, #16]
 800751c:	4313      	orrs	r3, r2
 800751e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007520:	693a      	ldr	r2, [r7, #16]
 8007522:	4b3e      	ldr	r3, [pc, #248]	; (800761c <TIM_SlaveTimer_SetConfig+0x124>)
 8007524:	4013      	ands	r3, r2
 8007526:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	693a      	ldr	r2, [r7, #16]
 800752e:	4313      	orrs	r3, r2
 8007530:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800753a:	683b      	ldr	r3, [r7, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	2b70      	cmp	r3, #112	; 0x70
 8007540:	d01a      	beq.n	8007578 <TIM_SlaveTimer_SetConfig+0x80>
 8007542:	2b70      	cmp	r3, #112	; 0x70
 8007544:	d860      	bhi.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
 8007546:	2b60      	cmp	r3, #96	; 0x60
 8007548:	d054      	beq.n	80075f4 <TIM_SlaveTimer_SetConfig+0xfc>
 800754a:	2b60      	cmp	r3, #96	; 0x60
 800754c:	d85c      	bhi.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
 800754e:	2b50      	cmp	r3, #80	; 0x50
 8007550:	d046      	beq.n	80075e0 <TIM_SlaveTimer_SetConfig+0xe8>
 8007552:	2b50      	cmp	r3, #80	; 0x50
 8007554:	d858      	bhi.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
 8007556:	2b40      	cmp	r3, #64	; 0x40
 8007558:	d019      	beq.n	800758e <TIM_SlaveTimer_SetConfig+0x96>
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	d854      	bhi.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
 800755e:	2b30      	cmp	r3, #48	; 0x30
 8007560:	d055      	beq.n	800760e <TIM_SlaveTimer_SetConfig+0x116>
 8007562:	2b30      	cmp	r3, #48	; 0x30
 8007564:	d850      	bhi.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
 8007566:	2b20      	cmp	r3, #32
 8007568:	d051      	beq.n	800760e <TIM_SlaveTimer_SetConfig+0x116>
 800756a:	2b20      	cmp	r3, #32
 800756c:	d84c      	bhi.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d04d      	beq.n	800760e <TIM_SlaveTimer_SetConfig+0x116>
 8007572:	2b10      	cmp	r3, #16
 8007574:	d04b      	beq.n	800760e <TIM_SlaveTimer_SetConfig+0x116>
 8007576:	e047      	b.n	8007608 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8007588:	f000 f8a9 	bl	80076de <TIM_ETR_SetConfig>
      break;
 800758c:	e040      	b.n	8007610 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2b05      	cmp	r3, #5
 8007594:	d101      	bne.n	800759a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e03b      	b.n	8007612 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	6a1b      	ldr	r3, [r3, #32]
 80075a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6a1a      	ldr	r2, [r3, #32]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0201 	bic.w	r2, r2, #1
 80075b0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	699b      	ldr	r3, [r3, #24]
 80075b8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075c0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	011b      	lsls	r3, r3, #4
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	68fa      	ldr	r2, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
      break;
 80075de:	e017      	b.n	8007610 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075ec:	461a      	mov	r2, r3
 80075ee:	f000 f817 	bl	8007620 <TIM_TI1_ConfigInputStage>
      break;
 80075f2:	e00d      	b.n	8007610 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007600:	461a      	mov	r2, r3
 8007602:	f000 f83c 	bl	800767e <TIM_TI2_ConfigInputStage>
      break;
 8007606:	e003      	b.n	8007610 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007608:	2301      	movs	r3, #1
 800760a:	75fb      	strb	r3, [r7, #23]
      break;
 800760c:	e000      	b.n	8007610 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800760e:	bf00      	nop
  }

  return status;
 8007610:	7dfb      	ldrb	r3, [r7, #23]
}
 8007612:	4618      	mov	r0, r3
 8007614:	3718      	adds	r7, #24
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	fffefff8 	.word	0xfffefff8

08007620 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	60f8      	str	r0, [r7, #12]
 8007628:	60b9      	str	r1, [r7, #8]
 800762a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6a1b      	ldr	r3, [r3, #32]
 8007630:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	6a1b      	ldr	r3, [r3, #32]
 8007636:	f023 0201 	bic.w	r2, r3, #1
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800764a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 030a 	bic.w	r3, r3, #10
 800765c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800765e:	697a      	ldr	r2, [r7, #20]
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4313      	orrs	r3, r2
 8007664:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	697a      	ldr	r2, [r7, #20]
 8007670:	621a      	str	r2, [r3, #32]
}
 8007672:	bf00      	nop
 8007674:	371c      	adds	r7, #28
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr

0800767e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800767e:	b480      	push	{r7}
 8007680:	b087      	sub	sp, #28
 8007682:	af00      	add	r7, sp, #0
 8007684:	60f8      	str	r0, [r7, #12]
 8007686:	60b9      	str	r1, [r7, #8]
 8007688:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	6a1b      	ldr	r3, [r3, #32]
 800768e:	f023 0210 	bic.w	r2, r3, #16
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	699b      	ldr	r3, [r3, #24]
 800769a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6a1b      	ldr	r3, [r3, #32]
 80076a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	031b      	lsls	r3, r3, #12
 80076ae:	697a      	ldr	r2, [r7, #20]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	011b      	lsls	r3, r3, #4
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	693a      	ldr	r2, [r7, #16]
 80076d0:	621a      	str	r2, [r3, #32]
}
 80076d2:	bf00      	nop
 80076d4:	371c      	adds	r7, #28
 80076d6:	46bd      	mov	sp, r7
 80076d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076dc:	4770      	bx	lr

080076de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80076de:	b480      	push	{r7}
 80076e0:	b087      	sub	sp, #28
 80076e2:	af00      	add	r7, sp, #0
 80076e4:	60f8      	str	r0, [r7, #12]
 80076e6:	60b9      	str	r1, [r7, #8]
 80076e8:	607a      	str	r2, [r7, #4]
 80076ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	021a      	lsls	r2, r3, #8
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	431a      	orrs	r2, r3
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4313      	orrs	r3, r2
 8007706:	697a      	ldr	r2, [r7, #20]
 8007708:	4313      	orrs	r3, r2
 800770a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	697a      	ldr	r2, [r7, #20]
 8007710:	609a      	str	r2, [r3, #8]
}
 8007712:	bf00      	nop
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771c:	4770      	bx	lr
	...

08007720 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007720:	b480      	push	{r7}
 8007722:	b085      	sub	sp, #20
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007730:	2b01      	cmp	r3, #1
 8007732:	d101      	bne.n	8007738 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007734:	2302      	movs	r3, #2
 8007736:	e06d      	b.n	8007814 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2202      	movs	r2, #2
 8007744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a30      	ldr	r2, [pc, #192]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d004      	beq.n	800776c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a2f      	ldr	r2, [pc, #188]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d108      	bne.n	800777e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007772:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	4313      	orrs	r3, r2
 800777c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007784:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	4313      	orrs	r3, r2
 800778e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68fa      	ldr	r2, [r7, #12]
 8007796:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a20      	ldr	r2, [pc, #128]	; (8007820 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d022      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077aa:	d01d      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a1d      	ldr	r2, [pc, #116]	; (8007828 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d018      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a1c      	ldr	r2, [pc, #112]	; (800782c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a1a      	ldr	r2, [pc, #104]	; (8007830 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d00e      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	4a15      	ldr	r2, [pc, #84]	; (8007824 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80077d0:	4293      	cmp	r3, r2
 80077d2:	d009      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a16      	ldr	r2, [pc, #88]	; (8007834 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d004      	beq.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a15      	ldr	r2, [pc, #84]	; (8007838 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10c      	bne.n	8007802 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	689b      	ldr	r3, [r3, #8]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2201      	movs	r2, #1
 8007806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2200      	movs	r2, #0
 800780e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007812:	2300      	movs	r3, #0
}
 8007814:	4618      	mov	r0, r3
 8007816:	3714      	adds	r7, #20
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr
 8007820:	40010000 	.word	0x40010000
 8007824:	40010400 	.word	0x40010400
 8007828:	40000400 	.word	0x40000400
 800782c:	40000800 	.word	0x40000800
 8007830:	40000c00 	.word	0x40000c00
 8007834:	40014000 	.word	0x40014000
 8007838:	40001800 	.word	0x40001800

0800783c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e040      	b.n	80078d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007852:	2b00      	cmp	r3, #0
 8007854:	d106      	bne.n	8007864 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	f7fa fa00 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2224      	movs	r2, #36	; 0x24
 8007868:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f022 0201 	bic.w	r2, r2, #1
 8007878:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800787a:	6878      	ldr	r0, [r7, #4]
 800787c:	f000 f82c 	bl	80078d8 <UART_SetConfig>
 8007880:	4603      	mov	r3, r0
 8007882:	2b01      	cmp	r3, #1
 8007884:	d101      	bne.n	800788a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e022      	b.n	80078d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f000 fa84 	bl	8007da0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	685a      	ldr	r2, [r3, #4]
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	689a      	ldr	r2, [r3, #8]
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0201 	orr.w	r2, r2, #1
 80078c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fb0b 	bl	8007ee4 <UART_CheckIdleState>
 80078ce:	4603      	mov	r3, r0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3708      	adds	r7, #8
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b088      	sub	sp, #32
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80078e0:	2300      	movs	r3, #0
 80078e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	689a      	ldr	r2, [r3, #8]
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	691b      	ldr	r3, [r3, #16]
 80078ec:	431a      	orrs	r2, r3
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	695b      	ldr	r3, [r3, #20]
 80078f2:	431a      	orrs	r2, r3
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	69db      	ldr	r3, [r3, #28]
 80078f8:	4313      	orrs	r3, r2
 80078fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4ba6      	ldr	r3, [pc, #664]	; (8007b9c <UART_SetConfig+0x2c4>)
 8007904:	4013      	ands	r3, r2
 8007906:	687a      	ldr	r2, [r7, #4]
 8007908:	6812      	ldr	r2, [r2, #0]
 800790a:	6979      	ldr	r1, [r7, #20]
 800790c:	430b      	orrs	r3, r1
 800790e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	430a      	orrs	r2, r1
 8007924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	699b      	ldr	r3, [r3, #24]
 800792a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a1b      	ldr	r3, [r3, #32]
 8007930:	697a      	ldr	r2, [r7, #20]
 8007932:	4313      	orrs	r3, r2
 8007934:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	697a      	ldr	r2, [r7, #20]
 8007946:	430a      	orrs	r2, r1
 8007948:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a94      	ldr	r2, [pc, #592]	; (8007ba0 <UART_SetConfig+0x2c8>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d120      	bne.n	8007996 <UART_SetConfig+0xbe>
 8007954:	4b93      	ldr	r3, [pc, #588]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	2b03      	cmp	r3, #3
 8007960:	d816      	bhi.n	8007990 <UART_SetConfig+0xb8>
 8007962:	a201      	add	r2, pc, #4	; (adr r2, 8007968 <UART_SetConfig+0x90>)
 8007964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007968:	08007979 	.word	0x08007979
 800796c:	08007985 	.word	0x08007985
 8007970:	0800797f 	.word	0x0800797f
 8007974:	0800798b 	.word	0x0800798b
 8007978:	2301      	movs	r3, #1
 800797a:	77fb      	strb	r3, [r7, #31]
 800797c:	e150      	b.n	8007c20 <UART_SetConfig+0x348>
 800797e:	2302      	movs	r3, #2
 8007980:	77fb      	strb	r3, [r7, #31]
 8007982:	e14d      	b.n	8007c20 <UART_SetConfig+0x348>
 8007984:	2304      	movs	r3, #4
 8007986:	77fb      	strb	r3, [r7, #31]
 8007988:	e14a      	b.n	8007c20 <UART_SetConfig+0x348>
 800798a:	2308      	movs	r3, #8
 800798c:	77fb      	strb	r3, [r7, #31]
 800798e:	e147      	b.n	8007c20 <UART_SetConfig+0x348>
 8007990:	2310      	movs	r3, #16
 8007992:	77fb      	strb	r3, [r7, #31]
 8007994:	e144      	b.n	8007c20 <UART_SetConfig+0x348>
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a83      	ldr	r2, [pc, #524]	; (8007ba8 <UART_SetConfig+0x2d0>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d132      	bne.n	8007a06 <UART_SetConfig+0x12e>
 80079a0:	4b80      	ldr	r3, [pc, #512]	; (8007ba4 <UART_SetConfig+0x2cc>)
 80079a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079a6:	f003 030c 	and.w	r3, r3, #12
 80079aa:	2b0c      	cmp	r3, #12
 80079ac:	d828      	bhi.n	8007a00 <UART_SetConfig+0x128>
 80079ae:	a201      	add	r2, pc, #4	; (adr r2, 80079b4 <UART_SetConfig+0xdc>)
 80079b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079b4:	080079e9 	.word	0x080079e9
 80079b8:	08007a01 	.word	0x08007a01
 80079bc:	08007a01 	.word	0x08007a01
 80079c0:	08007a01 	.word	0x08007a01
 80079c4:	080079f5 	.word	0x080079f5
 80079c8:	08007a01 	.word	0x08007a01
 80079cc:	08007a01 	.word	0x08007a01
 80079d0:	08007a01 	.word	0x08007a01
 80079d4:	080079ef 	.word	0x080079ef
 80079d8:	08007a01 	.word	0x08007a01
 80079dc:	08007a01 	.word	0x08007a01
 80079e0:	08007a01 	.word	0x08007a01
 80079e4:	080079fb 	.word	0x080079fb
 80079e8:	2300      	movs	r3, #0
 80079ea:	77fb      	strb	r3, [r7, #31]
 80079ec:	e118      	b.n	8007c20 <UART_SetConfig+0x348>
 80079ee:	2302      	movs	r3, #2
 80079f0:	77fb      	strb	r3, [r7, #31]
 80079f2:	e115      	b.n	8007c20 <UART_SetConfig+0x348>
 80079f4:	2304      	movs	r3, #4
 80079f6:	77fb      	strb	r3, [r7, #31]
 80079f8:	e112      	b.n	8007c20 <UART_SetConfig+0x348>
 80079fa:	2308      	movs	r3, #8
 80079fc:	77fb      	strb	r3, [r7, #31]
 80079fe:	e10f      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a00:	2310      	movs	r3, #16
 8007a02:	77fb      	strb	r3, [r7, #31]
 8007a04:	e10c      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a68      	ldr	r2, [pc, #416]	; (8007bac <UART_SetConfig+0x2d4>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d120      	bne.n	8007a52 <UART_SetConfig+0x17a>
 8007a10:	4b64      	ldr	r3, [pc, #400]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007a1a:	2b30      	cmp	r3, #48	; 0x30
 8007a1c:	d013      	beq.n	8007a46 <UART_SetConfig+0x16e>
 8007a1e:	2b30      	cmp	r3, #48	; 0x30
 8007a20:	d814      	bhi.n	8007a4c <UART_SetConfig+0x174>
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d009      	beq.n	8007a3a <UART_SetConfig+0x162>
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d810      	bhi.n	8007a4c <UART_SetConfig+0x174>
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d002      	beq.n	8007a34 <UART_SetConfig+0x15c>
 8007a2e:	2b10      	cmp	r3, #16
 8007a30:	d006      	beq.n	8007a40 <UART_SetConfig+0x168>
 8007a32:	e00b      	b.n	8007a4c <UART_SetConfig+0x174>
 8007a34:	2300      	movs	r3, #0
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e0f2      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a3a:	2302      	movs	r3, #2
 8007a3c:	77fb      	strb	r3, [r7, #31]
 8007a3e:	e0ef      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a40:	2304      	movs	r3, #4
 8007a42:	77fb      	strb	r3, [r7, #31]
 8007a44:	e0ec      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a46:	2308      	movs	r3, #8
 8007a48:	77fb      	strb	r3, [r7, #31]
 8007a4a:	e0e9      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a4c:	2310      	movs	r3, #16
 8007a4e:	77fb      	strb	r3, [r7, #31]
 8007a50:	e0e6      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a56      	ldr	r2, [pc, #344]	; (8007bb0 <UART_SetConfig+0x2d8>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d120      	bne.n	8007a9e <UART_SetConfig+0x1c6>
 8007a5c:	4b51      	ldr	r3, [pc, #324]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a66:	2bc0      	cmp	r3, #192	; 0xc0
 8007a68:	d013      	beq.n	8007a92 <UART_SetConfig+0x1ba>
 8007a6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007a6c:	d814      	bhi.n	8007a98 <UART_SetConfig+0x1c0>
 8007a6e:	2b80      	cmp	r3, #128	; 0x80
 8007a70:	d009      	beq.n	8007a86 <UART_SetConfig+0x1ae>
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d810      	bhi.n	8007a98 <UART_SetConfig+0x1c0>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <UART_SetConfig+0x1a8>
 8007a7a:	2b40      	cmp	r3, #64	; 0x40
 8007a7c:	d006      	beq.n	8007a8c <UART_SetConfig+0x1b4>
 8007a7e:	e00b      	b.n	8007a98 <UART_SetConfig+0x1c0>
 8007a80:	2300      	movs	r3, #0
 8007a82:	77fb      	strb	r3, [r7, #31]
 8007a84:	e0cc      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a86:	2302      	movs	r3, #2
 8007a88:	77fb      	strb	r3, [r7, #31]
 8007a8a:	e0c9      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	77fb      	strb	r3, [r7, #31]
 8007a90:	e0c6      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a92:	2308      	movs	r3, #8
 8007a94:	77fb      	strb	r3, [r7, #31]
 8007a96:	e0c3      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a98:	2310      	movs	r3, #16
 8007a9a:	77fb      	strb	r3, [r7, #31]
 8007a9c:	e0c0      	b.n	8007c20 <UART_SetConfig+0x348>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a44      	ldr	r2, [pc, #272]	; (8007bb4 <UART_SetConfig+0x2dc>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d125      	bne.n	8007af4 <UART_SetConfig+0x21c>
 8007aa8:	4b3e      	ldr	r3, [pc, #248]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ab2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ab6:	d017      	beq.n	8007ae8 <UART_SetConfig+0x210>
 8007ab8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007abc:	d817      	bhi.n	8007aee <UART_SetConfig+0x216>
 8007abe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac2:	d00b      	beq.n	8007adc <UART_SetConfig+0x204>
 8007ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ac8:	d811      	bhi.n	8007aee <UART_SetConfig+0x216>
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <UART_SetConfig+0x1fe>
 8007ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ad2:	d006      	beq.n	8007ae2 <UART_SetConfig+0x20a>
 8007ad4:	e00b      	b.n	8007aee <UART_SetConfig+0x216>
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	77fb      	strb	r3, [r7, #31]
 8007ada:	e0a1      	b.n	8007c20 <UART_SetConfig+0x348>
 8007adc:	2302      	movs	r3, #2
 8007ade:	77fb      	strb	r3, [r7, #31]
 8007ae0:	e09e      	b.n	8007c20 <UART_SetConfig+0x348>
 8007ae2:	2304      	movs	r3, #4
 8007ae4:	77fb      	strb	r3, [r7, #31]
 8007ae6:	e09b      	b.n	8007c20 <UART_SetConfig+0x348>
 8007ae8:	2308      	movs	r3, #8
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e098      	b.n	8007c20 <UART_SetConfig+0x348>
 8007aee:	2310      	movs	r3, #16
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e095      	b.n	8007c20 <UART_SetConfig+0x348>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a2f      	ldr	r2, [pc, #188]	; (8007bb8 <UART_SetConfig+0x2e0>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d125      	bne.n	8007b4a <UART_SetConfig+0x272>
 8007afe:	4b29      	ldr	r3, [pc, #164]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b0c:	d017      	beq.n	8007b3e <UART_SetConfig+0x266>
 8007b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007b12:	d817      	bhi.n	8007b44 <UART_SetConfig+0x26c>
 8007b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b18:	d00b      	beq.n	8007b32 <UART_SetConfig+0x25a>
 8007b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b1e:	d811      	bhi.n	8007b44 <UART_SetConfig+0x26c>
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d003      	beq.n	8007b2c <UART_SetConfig+0x254>
 8007b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b28:	d006      	beq.n	8007b38 <UART_SetConfig+0x260>
 8007b2a:	e00b      	b.n	8007b44 <UART_SetConfig+0x26c>
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	77fb      	strb	r3, [r7, #31]
 8007b30:	e076      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b32:	2302      	movs	r3, #2
 8007b34:	77fb      	strb	r3, [r7, #31]
 8007b36:	e073      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b38:	2304      	movs	r3, #4
 8007b3a:	77fb      	strb	r3, [r7, #31]
 8007b3c:	e070      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b3e:	2308      	movs	r3, #8
 8007b40:	77fb      	strb	r3, [r7, #31]
 8007b42:	e06d      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b44:	2310      	movs	r3, #16
 8007b46:	77fb      	strb	r3, [r7, #31]
 8007b48:	e06a      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a1b      	ldr	r2, [pc, #108]	; (8007bbc <UART_SetConfig+0x2e4>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d138      	bne.n	8007bc6 <UART_SetConfig+0x2ee>
 8007b54:	4b13      	ldr	r3, [pc, #76]	; (8007ba4 <UART_SetConfig+0x2cc>)
 8007b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b62:	d017      	beq.n	8007b94 <UART_SetConfig+0x2bc>
 8007b64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b68:	d82a      	bhi.n	8007bc0 <UART_SetConfig+0x2e8>
 8007b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b6e:	d00b      	beq.n	8007b88 <UART_SetConfig+0x2b0>
 8007b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b74:	d824      	bhi.n	8007bc0 <UART_SetConfig+0x2e8>
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d003      	beq.n	8007b82 <UART_SetConfig+0x2aa>
 8007b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b7e:	d006      	beq.n	8007b8e <UART_SetConfig+0x2b6>
 8007b80:	e01e      	b.n	8007bc0 <UART_SetConfig+0x2e8>
 8007b82:	2300      	movs	r3, #0
 8007b84:	77fb      	strb	r3, [r7, #31]
 8007b86:	e04b      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b88:	2302      	movs	r3, #2
 8007b8a:	77fb      	strb	r3, [r7, #31]
 8007b8c:	e048      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b8e:	2304      	movs	r3, #4
 8007b90:	77fb      	strb	r3, [r7, #31]
 8007b92:	e045      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b94:	2308      	movs	r3, #8
 8007b96:	77fb      	strb	r3, [r7, #31]
 8007b98:	e042      	b.n	8007c20 <UART_SetConfig+0x348>
 8007b9a:	bf00      	nop
 8007b9c:	efff69f3 	.word	0xefff69f3
 8007ba0:	40011000 	.word	0x40011000
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	40004400 	.word	0x40004400
 8007bac:	40004800 	.word	0x40004800
 8007bb0:	40004c00 	.word	0x40004c00
 8007bb4:	40005000 	.word	0x40005000
 8007bb8:	40011400 	.word	0x40011400
 8007bbc:	40007800 	.word	0x40007800
 8007bc0:	2310      	movs	r3, #16
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e02c      	b.n	8007c20 <UART_SetConfig+0x348>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4a72      	ldr	r2, [pc, #456]	; (8007d94 <UART_SetConfig+0x4bc>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d125      	bne.n	8007c1c <UART_SetConfig+0x344>
 8007bd0:	4b71      	ldr	r3, [pc, #452]	; (8007d98 <UART_SetConfig+0x4c0>)
 8007bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007bde:	d017      	beq.n	8007c10 <UART_SetConfig+0x338>
 8007be0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007be4:	d817      	bhi.n	8007c16 <UART_SetConfig+0x33e>
 8007be6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bea:	d00b      	beq.n	8007c04 <UART_SetConfig+0x32c>
 8007bec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bf0:	d811      	bhi.n	8007c16 <UART_SetConfig+0x33e>
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d003      	beq.n	8007bfe <UART_SetConfig+0x326>
 8007bf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bfa:	d006      	beq.n	8007c0a <UART_SetConfig+0x332>
 8007bfc:	e00b      	b.n	8007c16 <UART_SetConfig+0x33e>
 8007bfe:	2300      	movs	r3, #0
 8007c00:	77fb      	strb	r3, [r7, #31]
 8007c02:	e00d      	b.n	8007c20 <UART_SetConfig+0x348>
 8007c04:	2302      	movs	r3, #2
 8007c06:	77fb      	strb	r3, [r7, #31]
 8007c08:	e00a      	b.n	8007c20 <UART_SetConfig+0x348>
 8007c0a:	2304      	movs	r3, #4
 8007c0c:	77fb      	strb	r3, [r7, #31]
 8007c0e:	e007      	b.n	8007c20 <UART_SetConfig+0x348>
 8007c10:	2308      	movs	r3, #8
 8007c12:	77fb      	strb	r3, [r7, #31]
 8007c14:	e004      	b.n	8007c20 <UART_SetConfig+0x348>
 8007c16:	2310      	movs	r3, #16
 8007c18:	77fb      	strb	r3, [r7, #31]
 8007c1a:	e001      	b.n	8007c20 <UART_SetConfig+0x348>
 8007c1c:	2310      	movs	r3, #16
 8007c1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	69db      	ldr	r3, [r3, #28]
 8007c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c28:	d15b      	bne.n	8007ce2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007c2a:	7ffb      	ldrb	r3, [r7, #31]
 8007c2c:	2b08      	cmp	r3, #8
 8007c2e:	d828      	bhi.n	8007c82 <UART_SetConfig+0x3aa>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <UART_SetConfig+0x360>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c5d 	.word	0x08007c5d
 8007c3c:	08007c65 	.word	0x08007c65
 8007c40:	08007c6d 	.word	0x08007c6d
 8007c44:	08007c83 	.word	0x08007c83
 8007c48:	08007c73 	.word	0x08007c73
 8007c4c:	08007c83 	.word	0x08007c83
 8007c50:	08007c83 	.word	0x08007c83
 8007c54:	08007c83 	.word	0x08007c83
 8007c58:	08007c7b 	.word	0x08007c7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c5c:	f7fe feb2 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8007c60:	61b8      	str	r0, [r7, #24]
        break;
 8007c62:	e013      	b.n	8007c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c64:	f7fe fec2 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 8007c68:	61b8      	str	r0, [r7, #24]
        break;
 8007c6a:	e00f      	b.n	8007c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c6c:	4b4b      	ldr	r3, [pc, #300]	; (8007d9c <UART_SetConfig+0x4c4>)
 8007c6e:	61bb      	str	r3, [r7, #24]
        break;
 8007c70:	e00c      	b.n	8007c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c72:	f7fe fd97 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8007c76:	61b8      	str	r0, [r7, #24]
        break;
 8007c78:	e008      	b.n	8007c8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c7e:	61bb      	str	r3, [r7, #24]
        break;
 8007c80:	e004      	b.n	8007c8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c82:	2300      	movs	r3, #0
 8007c84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c86:	2301      	movs	r3, #1
 8007c88:	77bb      	strb	r3, [r7, #30]
        break;
 8007c8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d074      	beq.n	8007d7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	005a      	lsls	r2, r3, #1
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	085b      	lsrs	r3, r3, #1
 8007c9c:	441a      	add	r2, r3
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ca6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ca8:	693b      	ldr	r3, [r7, #16]
 8007caa:	2b0f      	cmp	r3, #15
 8007cac:	d916      	bls.n	8007cdc <UART_SetConfig+0x404>
 8007cae:	693b      	ldr	r3, [r7, #16]
 8007cb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007cb4:	d212      	bcs.n	8007cdc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	f023 030f 	bic.w	r3, r3, #15
 8007cbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	085b      	lsrs	r3, r3, #1
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	89fb      	ldrh	r3, [r7, #14]
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	89fa      	ldrh	r2, [r7, #14]
 8007cd8:	60da      	str	r2, [r3, #12]
 8007cda:	e04f      	b.n	8007d7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	77bb      	strb	r3, [r7, #30]
 8007ce0:	e04c      	b.n	8007d7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ce2:	7ffb      	ldrb	r3, [r7, #31]
 8007ce4:	2b08      	cmp	r3, #8
 8007ce6:	d828      	bhi.n	8007d3a <UART_SetConfig+0x462>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <UART_SetConfig+0x418>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d15 	.word	0x08007d15
 8007cf4:	08007d1d 	.word	0x08007d1d
 8007cf8:	08007d25 	.word	0x08007d25
 8007cfc:	08007d3b 	.word	0x08007d3b
 8007d00:	08007d2b 	.word	0x08007d2b
 8007d04:	08007d3b 	.word	0x08007d3b
 8007d08:	08007d3b 	.word	0x08007d3b
 8007d0c:	08007d3b 	.word	0x08007d3b
 8007d10:	08007d33 	.word	0x08007d33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d14:	f7fe fe56 	bl	80069c4 <HAL_RCC_GetPCLK1Freq>
 8007d18:	61b8      	str	r0, [r7, #24]
        break;
 8007d1a:	e013      	b.n	8007d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d1c:	f7fe fe66 	bl	80069ec <HAL_RCC_GetPCLK2Freq>
 8007d20:	61b8      	str	r0, [r7, #24]
        break;
 8007d22:	e00f      	b.n	8007d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d24:	4b1d      	ldr	r3, [pc, #116]	; (8007d9c <UART_SetConfig+0x4c4>)
 8007d26:	61bb      	str	r3, [r7, #24]
        break;
 8007d28:	e00c      	b.n	8007d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d2a:	f7fe fd3b 	bl	80067a4 <HAL_RCC_GetSysClockFreq>
 8007d2e:	61b8      	str	r0, [r7, #24]
        break;
 8007d30:	e008      	b.n	8007d44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d36:	61bb      	str	r3, [r7, #24]
        break;
 8007d38:	e004      	b.n	8007d44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	77bb      	strb	r3, [r7, #30]
        break;
 8007d42:	bf00      	nop
    }

    if (pclk != 0U)
 8007d44:	69bb      	ldr	r3, [r7, #24]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d018      	beq.n	8007d7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	085a      	lsrs	r2, r3, #1
 8007d50:	69bb      	ldr	r3, [r7, #24]
 8007d52:	441a      	add	r2, r3
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b0f      	cmp	r3, #15
 8007d62:	d909      	bls.n	8007d78 <UART_SetConfig+0x4a0>
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d6a:	d205      	bcs.n	8007d78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	60da      	str	r2, [r3, #12]
 8007d76:	e001      	b.n	8007d7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2200      	movs	r2, #0
 8007d86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d88:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3720      	adds	r7, #32
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40007c00 	.word	0x40007c00
 8007d98:	40023800 	.word	0x40023800
 8007d9c:	00f42400 	.word	0x00f42400

08007da0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	f003 0301 	and.w	r3, r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f003 0302 	and.w	r3, r3, #2
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f003 0308 	and.w	r3, r3, #8
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	685b      	ldr	r3, [r3, #4]
 8007e20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	f003 0310 	and.w	r3, r3, #16
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d00a      	beq.n	8007e52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e56:	f003 0320 	and.w	r3, r3, #32
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d00a      	beq.n	8007e74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	689b      	ldr	r3, [r3, #8]
 8007e64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	430a      	orrs	r2, r1
 8007e72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d01a      	beq.n	8007eb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e9e:	d10a      	bne.n	8007eb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	430a      	orrs	r2, r1
 8007eb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00a      	beq.n	8007ed8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	605a      	str	r2, [r3, #4]
  }
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b086      	sub	sp, #24
 8007ee8:	af02      	add	r7, sp, #8
 8007eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	2200      	movs	r2, #0
 8007ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007ef4:	f7fb f8e2 	bl	80030bc <HAL_GetTick>
 8007ef8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0308 	and.w	r3, r3, #8
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d10e      	bne.n	8007f26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007f08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007f0c:	9300      	str	r3, [sp, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f81b 	bl	8007f52 <UART_WaitOnFlagUntilTimeout>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007f22:	2303      	movs	r3, #3
 8007f24:	e011      	b.n	8007f4a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2220      	movs	r2, #32
 8007f2a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2200      	movs	r2, #0
 8007f44:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f48:	2300      	movs	r3, #0
}
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	3710      	adds	r7, #16
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}

08007f52 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b09c      	sub	sp, #112	; 0x70
 8007f56:	af00      	add	r7, sp, #0
 8007f58:	60f8      	str	r0, [r7, #12]
 8007f5a:	60b9      	str	r1, [r7, #8]
 8007f5c:	603b      	str	r3, [r7, #0]
 8007f5e:	4613      	mov	r3, r2
 8007f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f62:	e0a7      	b.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f6a:	f000 80a3 	beq.w	80080b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f6e:	f7fb f8a5 	bl	80030bc <HAL_GetTick>
 8007f72:	4602      	mov	r2, r0
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d302      	bcc.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d13f      	bne.n	8008004 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f8c:	e853 3f00 	ldrex	r3, [r3]
 8007f90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f94:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f98:	667b      	str	r3, [r7, #100]	; 0x64
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007fa4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007fa8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007faa:	e841 2300 	strex	r3, r2, [r1]
 8007fae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d1e6      	bne.n	8007f84 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	3308      	adds	r3, #8
 8007fbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fc0:	e853 3f00 	ldrex	r3, [r3]
 8007fc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	f023 0301 	bic.w	r3, r3, #1
 8007fcc:	663b      	str	r3, [r7, #96]	; 0x60
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	3308      	adds	r3, #8
 8007fd4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007fd6:	64ba      	str	r2, [r7, #72]	; 0x48
 8007fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fda:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fde:	e841 2300 	strex	r3, r2, [r1]
 8007fe2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d1e5      	bne.n	8007fb6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	2220      	movs	r2, #32
 8007fee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8008000:	2303      	movs	r3, #3
 8008002:	e068      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	d050      	beq.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	69db      	ldr	r3, [r3, #28]
 8008018:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800801c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008020:	d148      	bne.n	80080b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800802a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008034:	e853 3f00 	ldrex	r3, [r3]
 8008038:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008040:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	461a      	mov	r2, r3
 8008048:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
 800804c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008050:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008052:	e841 2300 	strex	r3, r2, [r1]
 8008056:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800805a:	2b00      	cmp	r3, #0
 800805c:	d1e6      	bne.n	800802c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	3308      	adds	r3, #8
 8008064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	613b      	str	r3, [r7, #16]
   return(result);
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	f023 0301 	bic.w	r3, r3, #1
 8008074:	66bb      	str	r3, [r7, #104]	; 0x68
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	3308      	adds	r3, #8
 800807c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800807e:	623a      	str	r2, [r7, #32]
 8008080:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	69f9      	ldr	r1, [r7, #28]
 8008084:	6a3a      	ldr	r2, [r7, #32]
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	61bb      	str	r3, [r7, #24]
   return(result);
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e5      	bne.n	800805e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2220      	movs	r2, #32
 8008096:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	2220      	movs	r2, #32
 800809c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	2220      	movs	r2, #32
 80080a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80080b0:	2303      	movs	r3, #3
 80080b2:	e010      	b.n	80080d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	69da      	ldr	r2, [r3, #28]
 80080ba:	68bb      	ldr	r3, [r7, #8]
 80080bc:	4013      	ands	r3, r2
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	bf0c      	ite	eq
 80080c4:	2301      	moveq	r3, #1
 80080c6:	2300      	movne	r3, #0
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	461a      	mov	r2, r3
 80080cc:	79fb      	ldrb	r3, [r7, #7]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	f43f af48 	beq.w	8007f64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80080d4:	2300      	movs	r3, #0
}
 80080d6:	4618      	mov	r0, r3
 80080d8:	3770      	adds	r7, #112	; 0x70
 80080da:	46bd      	mov	sp, r7
 80080dc:	bd80      	pop	{r7, pc}
	...

080080e0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b087      	sub	sp, #28
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
 80080e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	6812      	ldr	r2, [r2, #0]
 80080f8:	f023 0101 	bic.w	r1, r3, #1
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	2b08      	cmp	r3, #8
 8008108:	d102      	bne.n	8008110 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800810a:	2340      	movs	r3, #64	; 0x40
 800810c:	617b      	str	r3, [r7, #20]
 800810e:	e001      	b.n	8008114 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8008110:	2300      	movs	r3, #0
 8008112:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8008120:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8008126:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800812c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8008132:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8008138:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800813e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8008144:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800814a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8008150:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8008156:	4313      	orrs	r3, r2
 8008158:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	693a      	ldr	r2, [r7, #16]
 8008160:	4313      	orrs	r3, r2
 8008162:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	4313      	orrs	r3, r2
 8008176:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8008178:	4b20      	ldr	r3, [pc, #128]	; (80081fc <FMC_NORSRAM_Init+0x11c>)
 800817a:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008182:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800818a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8008192:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	681a      	ldr	r2, [r3, #0]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	43db      	mvns	r3, r3
 80081a2:	ea02 0103 	and.w	r1, r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	681a      	ldr	r2, [r3, #0]
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	4319      	orrs	r1, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081bc:	d10c      	bne.n	80081d8 <FMC_NORSRAM_Init+0xf8>
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d008      	beq.n	80081d8 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081d2:	431a      	orrs	r2, r3
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d006      	beq.n	80081ee <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681a      	ldr	r2, [r3, #0]
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e8:	431a      	orrs	r2, r3
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	371c      	adds	r7, #28
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr
 80081fc:	0008fb7f 	.word	0x0008fb7f

08008200 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008200:	b480      	push	{r7}
 8008202:	b087      	sub	sp, #28
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	1c5a      	adds	r2, r3, #1
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008216:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800821a:	68bb      	ldr	r3, [r7, #8]
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	011b      	lsls	r3, r3, #4
 8008224:	431a      	orrs	r2, r3
 8008226:	68bb      	ldr	r3, [r7, #8]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	021b      	lsls	r3, r3, #8
 800822c:	431a      	orrs	r2, r3
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	041b      	lsls	r3, r3, #16
 8008234:	431a      	orrs	r2, r3
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	691b      	ldr	r3, [r3, #16]
 800823a:	3b01      	subs	r3, #1
 800823c:	051b      	lsls	r3, r3, #20
 800823e:	431a      	orrs	r2, r3
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	695b      	ldr	r3, [r3, #20]
 8008244:	3b02      	subs	r3, #2
 8008246:	061b      	lsls	r3, r3, #24
 8008248:	431a      	orrs	r2, r3
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	4313      	orrs	r3, r2
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	3201      	adds	r2, #1
 8008254:	4319      	orrs	r1, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008268:	d113      	bne.n	8008292 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	685b      	ldr	r3, [r3, #4]
 800826e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008272:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8008274:	68bb      	ldr	r3, [r7, #8]
 8008276:	691b      	ldr	r3, [r3, #16]
 8008278:	3b01      	subs	r3, #1
 800827a:	051b      	lsls	r3, r3, #20
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	685b      	ldr	r3, [r3, #4]
 8008286:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	431a      	orrs	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b085      	sub	sp, #20
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082b4:	d11d      	bne.n	80082f2 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	687a      	ldr	r2, [r7, #4]
 80082ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80082be:	4b13      	ldr	r3, [pc, #76]	; (800830c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80082c0:	4013      	ands	r3, r2
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	6811      	ldr	r1, [r2, #0]
 80082c6:	68ba      	ldr	r2, [r7, #8]
 80082c8:	6852      	ldr	r2, [r2, #4]
 80082ca:	0112      	lsls	r2, r2, #4
 80082cc:	4311      	orrs	r1, r2
 80082ce:	68ba      	ldr	r2, [r7, #8]
 80082d0:	6892      	ldr	r2, [r2, #8]
 80082d2:	0212      	lsls	r2, r2, #8
 80082d4:	4311      	orrs	r1, r2
 80082d6:	68ba      	ldr	r2, [r7, #8]
 80082d8:	6992      	ldr	r2, [r2, #24]
 80082da:	4311      	orrs	r1, r2
 80082dc:	68ba      	ldr	r2, [r7, #8]
 80082de:	68d2      	ldr	r2, [r2, #12]
 80082e0:	0412      	lsls	r2, r2, #16
 80082e2:	430a      	orrs	r2, r1
 80082e4:	ea43 0102 	orr.w	r1, r3, r2
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	687a      	ldr	r2, [r7, #4]
 80082ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80082f0:	e005      	b.n	80082fe <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80082fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	3714      	adds	r7, #20
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	cff00000 	.word	0xcff00000

08008310 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008310:	b084      	sub	sp, #16
 8008312:	b580      	push	{r7, lr}
 8008314:	b084      	sub	sp, #16
 8008316:	af00      	add	r7, sp, #0
 8008318:	6078      	str	r0, [r7, #4]
 800831a:	f107 001c 	add.w	r0, r7, #28
 800831e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008324:	2b01      	cmp	r3, #1
 8008326:	d120      	bne.n	800836a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	68da      	ldr	r2, [r3, #12]
 8008338:	4b20      	ldr	r3, [pc, #128]	; (80083bc <USB_CoreInit+0xac>)
 800833a:	4013      	ands	r3, r2
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	68db      	ldr	r3, [r3, #12]
 8008344:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800834c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800834e:	2b01      	cmp	r3, #1
 8008350:	d105      	bne.n	800835e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	68db      	ldr	r3, [r3, #12]
 8008356:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 fbee 	bl	8009b40 <USB_CoreReset>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]
 8008368:	e010      	b.n	800838c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	68db      	ldr	r3, [r3, #12]
 800836e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f001 fbe2 	bl	8009b40 <USB_CoreReset>
 800837c:	4603      	mov	r3, r0
 800837e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008384:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800838c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838e:	2b01      	cmp	r3, #1
 8008390:	d10b      	bne.n	80083aa <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	f043 0206 	orr.w	r2, r3, #6
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f043 0220 	orr.w	r2, r3, #32
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80083aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3710      	adds	r7, #16
 80083b0:	46bd      	mov	sp, r7
 80083b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b6:	b004      	add	sp, #16
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop
 80083bc:	ffbdffbf 	.word	0xffbdffbf

080083c0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b087      	sub	sp, #28
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	4613      	mov	r3, r2
 80083cc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80083ce:	79fb      	ldrb	r3, [r7, #7]
 80083d0:	2b02      	cmp	r3, #2
 80083d2:	d165      	bne.n	80084a0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4a41      	ldr	r2, [pc, #260]	; (80084dc <USB_SetTurnaroundTime+0x11c>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d906      	bls.n	80083ea <USB_SetTurnaroundTime+0x2a>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	4a40      	ldr	r2, [pc, #256]	; (80084e0 <USB_SetTurnaroundTime+0x120>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d202      	bcs.n	80083ea <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80083e4:	230f      	movs	r3, #15
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e062      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4a3c      	ldr	r2, [pc, #240]	; (80084e0 <USB_SetTurnaroundTime+0x120>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d306      	bcc.n	8008400 <USB_SetTurnaroundTime+0x40>
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	4a3b      	ldr	r2, [pc, #236]	; (80084e4 <USB_SetTurnaroundTime+0x124>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d202      	bcs.n	8008400 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80083fa:	230e      	movs	r3, #14
 80083fc:	617b      	str	r3, [r7, #20]
 80083fe:	e057      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4a38      	ldr	r2, [pc, #224]	; (80084e4 <USB_SetTurnaroundTime+0x124>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d306      	bcc.n	8008416 <USB_SetTurnaroundTime+0x56>
 8008408:	68bb      	ldr	r3, [r7, #8]
 800840a:	4a37      	ldr	r2, [pc, #220]	; (80084e8 <USB_SetTurnaroundTime+0x128>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d202      	bcs.n	8008416 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008410:	230d      	movs	r3, #13
 8008412:	617b      	str	r3, [r7, #20]
 8008414:	e04c      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4a33      	ldr	r2, [pc, #204]	; (80084e8 <USB_SetTurnaroundTime+0x128>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d306      	bcc.n	800842c <USB_SetTurnaroundTime+0x6c>
 800841e:	68bb      	ldr	r3, [r7, #8]
 8008420:	4a32      	ldr	r2, [pc, #200]	; (80084ec <USB_SetTurnaroundTime+0x12c>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d802      	bhi.n	800842c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008426:	230c      	movs	r3, #12
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e041      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4a2f      	ldr	r2, [pc, #188]	; (80084ec <USB_SetTurnaroundTime+0x12c>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d906      	bls.n	8008442 <USB_SetTurnaroundTime+0x82>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	4a2e      	ldr	r2, [pc, #184]	; (80084f0 <USB_SetTurnaroundTime+0x130>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d802      	bhi.n	8008442 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800843c:	230b      	movs	r3, #11
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	e036      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4a2a      	ldr	r2, [pc, #168]	; (80084f0 <USB_SetTurnaroundTime+0x130>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d906      	bls.n	8008458 <USB_SetTurnaroundTime+0x98>
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	4a29      	ldr	r2, [pc, #164]	; (80084f4 <USB_SetTurnaroundTime+0x134>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d802      	bhi.n	8008458 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008452:	230a      	movs	r3, #10
 8008454:	617b      	str	r3, [r7, #20]
 8008456:	e02b      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	4a26      	ldr	r2, [pc, #152]	; (80084f4 <USB_SetTurnaroundTime+0x134>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d906      	bls.n	800846e <USB_SetTurnaroundTime+0xae>
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	4a25      	ldr	r2, [pc, #148]	; (80084f8 <USB_SetTurnaroundTime+0x138>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d202      	bcs.n	800846e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008468:	2309      	movs	r3, #9
 800846a:	617b      	str	r3, [r7, #20]
 800846c:	e020      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	4a21      	ldr	r2, [pc, #132]	; (80084f8 <USB_SetTurnaroundTime+0x138>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d306      	bcc.n	8008484 <USB_SetTurnaroundTime+0xc4>
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	4a20      	ldr	r2, [pc, #128]	; (80084fc <USB_SetTurnaroundTime+0x13c>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d802      	bhi.n	8008484 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800847e:	2308      	movs	r3, #8
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e015      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008484:	68bb      	ldr	r3, [r7, #8]
 8008486:	4a1d      	ldr	r2, [pc, #116]	; (80084fc <USB_SetTurnaroundTime+0x13c>)
 8008488:	4293      	cmp	r3, r2
 800848a:	d906      	bls.n	800849a <USB_SetTurnaroundTime+0xda>
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	4a1c      	ldr	r2, [pc, #112]	; (8008500 <USB_SetTurnaroundTime+0x140>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d202      	bcs.n	800849a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008494:	2307      	movs	r3, #7
 8008496:	617b      	str	r3, [r7, #20]
 8008498:	e00a      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800849a:	2306      	movs	r3, #6
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e007      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d102      	bne.n	80084ac <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80084a6:	2309      	movs	r3, #9
 80084a8:	617b      	str	r3, [r7, #20]
 80084aa:	e001      	b.n	80084b0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80084ac:	2309      	movs	r3, #9
 80084ae:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	68da      	ldr	r2, [r3, #12]
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	029b      	lsls	r3, r3, #10
 80084c4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80084c8:	431a      	orrs	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	371c      	adds	r7, #28
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	00d8acbf 	.word	0x00d8acbf
 80084e0:	00e4e1c0 	.word	0x00e4e1c0
 80084e4:	00f42400 	.word	0x00f42400
 80084e8:	01067380 	.word	0x01067380
 80084ec:	011a499f 	.word	0x011a499f
 80084f0:	01312cff 	.word	0x01312cff
 80084f4:	014ca43f 	.word	0x014ca43f
 80084f8:	016e3600 	.word	0x016e3600
 80084fc:	01a6ab1f 	.word	0x01a6ab1f
 8008500:	01e84800 	.word	0x01e84800

08008504 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008504:	b480      	push	{r7}
 8008506:	b083      	sub	sp, #12
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	f043 0201 	orr.w	r2, r3, #1
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	370c      	adds	r7, #12
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr

08008526 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008526:	b480      	push	{r7}
 8008528:	b083      	sub	sp, #12
 800852a:	af00      	add	r7, sp, #0
 800852c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f023 0201 	bic.w	r2, r3, #1
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800853a:	2300      	movs	r3, #0
}
 800853c:	4618      	mov	r0, r3
 800853e:	370c      	adds	r7, #12
 8008540:	46bd      	mov	sp, r7
 8008542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008546:	4770      	bx	lr

08008548 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	460b      	mov	r3, r1
 8008552:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008554:	2300      	movs	r3, #0
 8008556:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008564:	78fb      	ldrb	r3, [r7, #3]
 8008566:	2b01      	cmp	r3, #1
 8008568:	d115      	bne.n	8008596 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68db      	ldr	r3, [r3, #12]
 800856e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008576:	2001      	movs	r0, #1
 8008578:	f7fa fdac 	bl	80030d4 <HAL_Delay>
      ms++;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	3301      	adds	r3, #1
 8008580:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f001 fa4b 	bl	8009a1e <USB_GetMode>
 8008588:	4603      	mov	r3, r0
 800858a:	2b01      	cmp	r3, #1
 800858c:	d01e      	beq.n	80085cc <USB_SetCurrentMode+0x84>
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2b31      	cmp	r3, #49	; 0x31
 8008592:	d9f0      	bls.n	8008576 <USB_SetCurrentMode+0x2e>
 8008594:	e01a      	b.n	80085cc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008596:	78fb      	ldrb	r3, [r7, #3]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d115      	bne.n	80085c8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80085a8:	2001      	movs	r0, #1
 80085aa:	f7fa fd93 	bl	80030d4 <HAL_Delay>
      ms++;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	3301      	adds	r3, #1
 80085b2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f001 fa32 	bl	8009a1e <USB_GetMode>
 80085ba:	4603      	mov	r3, r0
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d005      	beq.n	80085cc <USB_SetCurrentMode+0x84>
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2b31      	cmp	r3, #49	; 0x31
 80085c4:	d9f0      	bls.n	80085a8 <USB_SetCurrentMode+0x60>
 80085c6:	e001      	b.n	80085cc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e005      	b.n	80085d8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2b32      	cmp	r3, #50	; 0x32
 80085d0:	d101      	bne.n	80085d6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e000      	b.n	80085d8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80085d6:	2300      	movs	r3, #0
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3710      	adds	r7, #16
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}

080085e0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80085e0:	b084      	sub	sp, #16
 80085e2:	b580      	push	{r7, lr}
 80085e4:	b086      	sub	sp, #24
 80085e6:	af00      	add	r7, sp, #0
 80085e8:	6078      	str	r0, [r7, #4]
 80085ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80085ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80085fa:	2300      	movs	r3, #0
 80085fc:	613b      	str	r3, [r7, #16]
 80085fe:	e009      	b.n	8008614 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	693b      	ldr	r3, [r7, #16]
 8008604:	3340      	adds	r3, #64	; 0x40
 8008606:	009b      	lsls	r3, r3, #2
 8008608:	4413      	add	r3, r2
 800860a:	2200      	movs	r2, #0
 800860c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800860e:	693b      	ldr	r3, [r7, #16]
 8008610:	3301      	adds	r3, #1
 8008612:	613b      	str	r3, [r7, #16]
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	2b0e      	cmp	r3, #14
 8008618:	d9f2      	bls.n	8008600 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800861a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800861c:	2b00      	cmp	r3, #0
 800861e:	d11c      	bne.n	800865a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	68fa      	ldr	r2, [r7, #12]
 800862a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800862e:	f043 0302 	orr.w	r3, r3, #2
 8008632:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008638:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	601a      	str	r2, [r3, #0]
 8008658:	e005      	b.n	8008666 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800866c:	461a      	mov	r2, r3
 800866e:	2300      	movs	r3, #0
 8008670:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008678:	4619      	mov	r1, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008680:	461a      	mov	r2, r3
 8008682:	680b      	ldr	r3, [r1, #0]
 8008684:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008688:	2b01      	cmp	r3, #1
 800868a:	d10c      	bne.n	80086a6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800868c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800868e:	2b00      	cmp	r3, #0
 8008690:	d104      	bne.n	800869c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f965 	bl	8008964 <USB_SetDevSpeed>
 800869a:	e008      	b.n	80086ae <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800869c:	2101      	movs	r1, #1
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 f960 	bl	8008964 <USB_SetDevSpeed>
 80086a4:	e003      	b.n	80086ae <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80086a6:	2103      	movs	r1, #3
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 f95b 	bl	8008964 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80086ae:	2110      	movs	r1, #16
 80086b0:	6878      	ldr	r0, [r7, #4]
 80086b2:	f000 f8f3 	bl	800889c <USB_FlushTxFifo>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d001      	beq.n	80086c0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
 80086be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	f000 f91f 	bl	8008904 <USB_FlushRxFifo>
 80086c6:	4603      	mov	r3, r0
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d001      	beq.n	80086d0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80086cc:	2301      	movs	r3, #1
 80086ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	461a      	mov	r2, r3
 80086d8:	2300      	movs	r3, #0
 80086da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086e2:	461a      	mov	r2, r3
 80086e4:	2300      	movs	r3, #0
 80086e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ee:	461a      	mov	r2, r3
 80086f0:	2300      	movs	r3, #0
 80086f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086f4:	2300      	movs	r3, #0
 80086f6:	613b      	str	r3, [r7, #16]
 80086f8:	e043      	b.n	8008782 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	015a      	lsls	r2, r3, #5
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	4413      	add	r3, r2
 8008702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800870c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008710:	d118      	bne.n	8008744 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10a      	bne.n	800872e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008718:	693b      	ldr	r3, [r7, #16]
 800871a:	015a      	lsls	r2, r3, #5
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	4413      	add	r3, r2
 8008720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008724:	461a      	mov	r2, r3
 8008726:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800872a:	6013      	str	r3, [r2, #0]
 800872c:	e013      	b.n	8008756 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	015a      	lsls	r2, r3, #5
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	4413      	add	r3, r2
 8008736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800873a:	461a      	mov	r2, r3
 800873c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	e008      	b.n	8008756 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	015a      	lsls	r2, r3, #5
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	4413      	add	r3, r2
 800874c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008750:	461a      	mov	r2, r3
 8008752:	2300      	movs	r3, #0
 8008754:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	015a      	lsls	r2, r3, #5
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	4413      	add	r3, r2
 800875e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008762:	461a      	mov	r2, r3
 8008764:	2300      	movs	r3, #0
 8008766:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008768:	693b      	ldr	r3, [r7, #16]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	461a      	mov	r2, r3
 8008776:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800877a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	3301      	adds	r3, #1
 8008780:	613b      	str	r3, [r7, #16]
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	693a      	ldr	r2, [r7, #16]
 8008786:	429a      	cmp	r2, r3
 8008788:	d3b7      	bcc.n	80086fa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800878a:	2300      	movs	r3, #0
 800878c:	613b      	str	r3, [r7, #16]
 800878e:	e043      	b.n	8008818 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087a6:	d118      	bne.n	80087da <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80087a8:	693b      	ldr	r3, [r7, #16]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	015a      	lsls	r2, r3, #5
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	4413      	add	r3, r2
 80087b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087ba:	461a      	mov	r2, r3
 80087bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80087c0:	6013      	str	r3, [r2, #0]
 80087c2:	e013      	b.n	80087ec <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087d0:	461a      	mov	r2, r3
 80087d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80087d6:	6013      	str	r3, [r2, #0]
 80087d8:	e008      	b.n	80087ec <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	015a      	lsls	r2, r3, #5
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4413      	add	r3, r2
 80087e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087e6:	461a      	mov	r2, r3
 80087e8:	2300      	movs	r3, #0
 80087ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80087ec:	693b      	ldr	r3, [r7, #16]
 80087ee:	015a      	lsls	r2, r3, #5
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	4413      	add	r3, r2
 80087f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087f8:	461a      	mov	r2, r3
 80087fa:	2300      	movs	r3, #0
 80087fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	4413      	add	r3, r2
 8008806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800880a:	461a      	mov	r2, r3
 800880c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008810:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	3301      	adds	r3, #1
 8008816:	613b      	str	r3, [r7, #16]
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	429a      	cmp	r2, r3
 800881e:	d3b7      	bcc.n	8008790 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800882e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008832:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008840:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008844:	2b00      	cmp	r3, #0
 8008846:	d105      	bne.n	8008854 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	699b      	ldr	r3, [r3, #24]
 800884c:	f043 0210 	orr.w	r2, r3, #16
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	699a      	ldr	r2, [r3, #24]
 8008858:	4b0e      	ldr	r3, [pc, #56]	; (8008894 <USB_DevInit+0x2b4>)
 800885a:	4313      	orrs	r3, r2
 800885c:	687a      	ldr	r2, [r7, #4]
 800885e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	f043 0208 	orr.w	r2, r3, #8
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008874:	2b01      	cmp	r3, #1
 8008876:	d105      	bne.n	8008884 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	699a      	ldr	r2, [r3, #24]
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <USB_DevInit+0x2b8>)
 800887e:	4313      	orrs	r3, r2
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008884:	7dfb      	ldrb	r3, [r7, #23]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3718      	adds	r7, #24
 800888a:	46bd      	mov	sp, r7
 800888c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008890:	b004      	add	sp, #16
 8008892:	4770      	bx	lr
 8008894:	803c3800 	.word	0x803c3800
 8008898:	40000004 	.word	0x40000004

0800889c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800889c:	b480      	push	{r7}
 800889e:	b085      	sub	sp, #20
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088a6:	2300      	movs	r3, #0
 80088a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	3301      	adds	r3, #1
 80088ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	4a13      	ldr	r2, [pc, #76]	; (8008900 <USB_FlushTxFifo+0x64>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d901      	bls.n	80088bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088b8:	2303      	movs	r3, #3
 80088ba:	e01b      	b.n	80088f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691b      	ldr	r3, [r3, #16]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	daf2      	bge.n	80088aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088c4:	2300      	movs	r3, #0
 80088c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	019b      	lsls	r3, r3, #6
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	3301      	adds	r3, #1
 80088d8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	4a08      	ldr	r2, [pc, #32]	; (8008900 <USB_FlushTxFifo+0x64>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d901      	bls.n	80088e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088e2:	2303      	movs	r3, #3
 80088e4:	e006      	b.n	80088f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d0f0      	beq.n	80088d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088f2:	2300      	movs	r3, #0
}
 80088f4:	4618      	mov	r0, r3
 80088f6:	3714      	adds	r7, #20
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr
 8008900:	00030d40 	.word	0x00030d40

08008904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008904:	b480      	push	{r7}
 8008906:	b085      	sub	sp, #20
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800890c:	2300      	movs	r3, #0
 800890e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	3301      	adds	r3, #1
 8008914:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4a11      	ldr	r2, [pc, #68]	; (8008960 <USB_FlushRxFifo+0x5c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d901      	bls.n	8008922 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e018      	b.n	8008954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	daf2      	bge.n	8008910 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800892a:	2300      	movs	r3, #0
 800892c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2210      	movs	r2, #16
 8008932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	3301      	adds	r3, #1
 8008938:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4a08      	ldr	r2, [pc, #32]	; (8008960 <USB_FlushRxFifo+0x5c>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d901      	bls.n	8008946 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e006      	b.n	8008954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	f003 0310 	and.w	r3, r3, #16
 800894e:	2b10      	cmp	r3, #16
 8008950:	d0f0      	beq.n	8008934 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	3714      	adds	r7, #20
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr
 8008960:	00030d40 	.word	0x00030d40

08008964 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	460b      	mov	r3, r1
 800896e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	78fb      	ldrb	r3, [r7, #3]
 800897e:	68f9      	ldr	r1, [r7, #12]
 8008980:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008984:	4313      	orrs	r3, r2
 8008986:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008988:	2300      	movs	r3, #0
}
 800898a:	4618      	mov	r0, r3
 800898c:	3714      	adds	r7, #20
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008996:	b480      	push	{r7}
 8008998:	b087      	sub	sp, #28
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 0306 	and.w	r3, r3, #6
 80089ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d102      	bne.n	80089bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80089b6:	2300      	movs	r3, #0
 80089b8:	75fb      	strb	r3, [r7, #23]
 80089ba:	e00a      	b.n	80089d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d002      	beq.n	80089c8 <USB_GetDevSpeed+0x32>
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b06      	cmp	r3, #6
 80089c6:	d102      	bne.n	80089ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80089c8:	2302      	movs	r3, #2
 80089ca:	75fb      	strb	r3, [r7, #23]
 80089cc:	e001      	b.n	80089d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80089ce:	230f      	movs	r3, #15
 80089d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80089d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	371c      	adds	r7, #28
 80089d8:	46bd      	mov	sp, r7
 80089da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089de:	4770      	bx	lr

080089e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	785b      	ldrb	r3, [r3, #1]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d139      	bne.n	8008a70 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a02:	69da      	ldr	r2, [r3, #28]
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	f003 030f 	and.w	r3, r3, #15
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8008a12:	b29b      	uxth	r3, r3
 8008a14:	68f9      	ldr	r1, [r7, #12]
 8008a16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	015a      	lsls	r2, r3, #5
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	4413      	add	r3, r2
 8008a26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d153      	bne.n	8008adc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	015a      	lsls	r2, r3, #5
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	68db      	ldr	r3, [r3, #12]
 8008a46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	791b      	ldrb	r3, [r3, #4]
 8008a4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	059b      	lsls	r3, r3, #22
 8008a56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	0159      	lsls	r1, r3, #5
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	440b      	add	r3, r1
 8008a62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a66:	4619      	mov	r1, r3
 8008a68:	4b20      	ldr	r3, [pc, #128]	; (8008aec <USB_ActivateEndpoint+0x10c>)
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	600b      	str	r3, [r1, #0]
 8008a6e:	e035      	b.n	8008adc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a76:	69da      	ldr	r2, [r3, #28]
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	781b      	ldrb	r3, [r3, #0]
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	2101      	movs	r1, #1
 8008a82:	fa01 f303 	lsl.w	r3, r1, r3
 8008a86:	041b      	lsls	r3, r3, #16
 8008a88:	68f9      	ldr	r1, [r7, #12]
 8008a8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	015a      	lsls	r2, r3, #5
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	4413      	add	r3, r2
 8008a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d119      	bne.n	8008adc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	791b      	ldrb	r3, [r3, #4]
 8008ac2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008ac4:	430b      	orrs	r3, r1
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	0159      	lsls	r1, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	440b      	add	r3, r1
 8008ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	4b05      	ldr	r3, [pc, #20]	; (8008aec <USB_ActivateEndpoint+0x10c>)
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3714      	adds	r7, #20
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	10008000 	.word	0x10008000

08008af0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	781b      	ldrb	r3, [r3, #0]
 8008b02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	785b      	ldrb	r3, [r3, #1]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d161      	bne.n	8008bd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	015a      	lsls	r2, r3, #5
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	4413      	add	r3, r2
 8008b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b22:	d11f      	bne.n	8008b64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	68fa      	ldr	r2, [r7, #12]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	781b      	ldrb	r3, [r3, #0]
 8008b70:	f003 030f 	and.w	r3, r3, #15
 8008b74:	2101      	movs	r1, #1
 8008b76:	fa01 f303 	lsl.w	r3, r1, r3
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	43db      	mvns	r3, r3
 8008b7e:	68f9      	ldr	r1, [r7, #12]
 8008b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b84:	4013      	ands	r3, r2
 8008b86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8e:	69da      	ldr	r2, [r3, #28]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	781b      	ldrb	r3, [r3, #0]
 8008b94:	f003 030f 	and.w	r3, r3, #15
 8008b98:	2101      	movs	r1, #1
 8008b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9e:	b29b      	uxth	r3, r3
 8008ba0:	43db      	mvns	r3, r3
 8008ba2:	68f9      	ldr	r1, [r7, #12]
 8008ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba8:	4013      	ands	r3, r2
 8008baa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	015a      	lsls	r2, r3, #5
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	4413      	add	r3, r2
 8008bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bb8:	681a      	ldr	r2, [r3, #0]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	0159      	lsls	r1, r3, #5
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	440b      	add	r3, r1
 8008bc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4b35      	ldr	r3, [pc, #212]	; (8008ca0 <USB_DeactivateEndpoint+0x1b0>)
 8008bca:	4013      	ands	r3, r2
 8008bcc:	600b      	str	r3, [r1, #0]
 8008bce:	e060      	b.n	8008c92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008be2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008be6:	d11f      	bne.n	8008c28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	015a      	lsls	r2, r3, #5
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4413      	add	r3, r2
 8008bf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	0151      	lsls	r1, r2, #5
 8008bfa:	68fa      	ldr	r2, [r7, #12]
 8008bfc:	440a      	add	r2, r1
 8008bfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008c06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	015a      	lsls	r2, r3, #5
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	4413      	add	r3, r2
 8008c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	0151      	lsls	r1, r2, #5
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	440a      	add	r2, r1
 8008c1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	f003 030f 	and.w	r3, r3, #15
 8008c38:	2101      	movs	r1, #1
 8008c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8008c3e:	041b      	lsls	r3, r3, #16
 8008c40:	43db      	mvns	r3, r3
 8008c42:	68f9      	ldr	r1, [r7, #12]
 8008c44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c48:	4013      	ands	r3, r2
 8008c4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c52:	69da      	ldr	r2, [r3, #28]
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	f003 030f 	and.w	r3, r3, #15
 8008c5c:	2101      	movs	r1, #1
 8008c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8008c62:	041b      	lsls	r3, r3, #16
 8008c64:	43db      	mvns	r3, r3
 8008c66:	68f9      	ldr	r1, [r7, #12]
 8008c68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c6c:	4013      	ands	r3, r2
 8008c6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	015a      	lsls	r2, r3, #5
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	4413      	add	r3, r2
 8008c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	0159      	lsls	r1, r3, #5
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	440b      	add	r3, r1
 8008c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c8a:	4619      	mov	r1, r3
 8008c8c:	4b05      	ldr	r3, [pc, #20]	; (8008ca4 <USB_DeactivateEndpoint+0x1b4>)
 8008c8e:	4013      	ands	r3, r2
 8008c90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	ec337800 	.word	0xec337800
 8008ca4:	eff37800 	.word	0xeff37800

08008ca8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	; 0x28
 8008cac:	af02      	add	r7, sp, #8
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	4613      	mov	r3, r2
 8008cb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	781b      	ldrb	r3, [r3, #0]
 8008cbe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	785b      	ldrb	r3, [r3, #1]
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	f040 8163 	bne.w	8008f90 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d132      	bne.n	8008d38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cd2:	69bb      	ldr	r3, [r7, #24]
 8008cd4:	015a      	lsls	r2, r3, #5
 8008cd6:	69fb      	ldr	r3, [r7, #28]
 8008cd8:	4413      	add	r3, r2
 8008cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cde:	691a      	ldr	r2, [r3, #16]
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	0159      	lsls	r1, r3, #5
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	440b      	add	r3, r1
 8008ce8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cec:	4619      	mov	r1, r3
 8008cee:	4ba5      	ldr	r3, [pc, #660]	; (8008f84 <USB_EPStartXfer+0x2dc>)
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008cf4:	69bb      	ldr	r3, [r7, #24]
 8008cf6:	015a      	lsls	r2, r3, #5
 8008cf8:	69fb      	ldr	r3, [r7, #28]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	69ba      	ldr	r2, [r7, #24]
 8008d04:	0151      	lsls	r1, r2, #5
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	440a      	add	r2, r1
 8008d0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d14:	69bb      	ldr	r3, [r7, #24]
 8008d16:	015a      	lsls	r2, r3, #5
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d20:	691a      	ldr	r2, [r3, #16]
 8008d22:	69bb      	ldr	r3, [r7, #24]
 8008d24:	0159      	lsls	r1, r3, #5
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	440b      	add	r3, r1
 8008d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d2e:	4619      	mov	r1, r3
 8008d30:	4b95      	ldr	r3, [pc, #596]	; (8008f88 <USB_EPStartXfer+0x2e0>)
 8008d32:	4013      	ands	r3, r2
 8008d34:	610b      	str	r3, [r1, #16]
 8008d36:	e074      	b.n	8008e22 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008d38:	69bb      	ldr	r3, [r7, #24]
 8008d3a:	015a      	lsls	r2, r3, #5
 8008d3c:	69fb      	ldr	r3, [r7, #28]
 8008d3e:	4413      	add	r3, r2
 8008d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d44:	691a      	ldr	r2, [r3, #16]
 8008d46:	69bb      	ldr	r3, [r7, #24]
 8008d48:	0159      	lsls	r1, r3, #5
 8008d4a:	69fb      	ldr	r3, [r7, #28]
 8008d4c:	440b      	add	r3, r1
 8008d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d52:	4619      	mov	r1, r3
 8008d54:	4b8c      	ldr	r3, [pc, #560]	; (8008f88 <USB_EPStartXfer+0x2e0>)
 8008d56:	4013      	ands	r3, r2
 8008d58:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008d5a:	69bb      	ldr	r3, [r7, #24]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	691a      	ldr	r2, [r3, #16]
 8008d68:	69bb      	ldr	r3, [r7, #24]
 8008d6a:	0159      	lsls	r1, r3, #5
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	440b      	add	r3, r1
 8008d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d74:	4619      	mov	r1, r3
 8008d76:	4b83      	ldr	r3, [pc, #524]	; (8008f84 <USB_EPStartXfer+0x2dc>)
 8008d78:	4013      	ands	r3, r2
 8008d7a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008d7c:	69bb      	ldr	r3, [r7, #24]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	69fb      	ldr	r3, [r7, #28]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d88:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	6999      	ldr	r1, [r3, #24]
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	440b      	add	r3, r1
 8008d94:	1e59      	subs	r1, r3, #1
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8008d9e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008da0:	4b7a      	ldr	r3, [pc, #488]	; (8008f8c <USB_EPStartXfer+0x2e4>)
 8008da2:	400b      	ands	r3, r1
 8008da4:	69b9      	ldr	r1, [r7, #24]
 8008da6:	0148      	lsls	r0, r1, #5
 8008da8:	69f9      	ldr	r1, [r7, #28]
 8008daa:	4401      	add	r1, r0
 8008dac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008db0:	4313      	orrs	r3, r2
 8008db2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dca:	69b9      	ldr	r1, [r7, #24]
 8008dcc:	0148      	lsls	r0, r1, #5
 8008dce:	69f9      	ldr	r1, [r7, #28]
 8008dd0:	4401      	add	r1, r0
 8008dd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	791b      	ldrb	r3, [r3, #4]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d11f      	bne.n	8008e22 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	69ba      	ldr	r2, [r7, #24]
 8008df2:	0151      	lsls	r1, r2, #5
 8008df4:	69fa      	ldr	r2, [r7, #28]
 8008df6:	440a      	add	r2, r1
 8008df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008dfc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008e00:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	015a      	lsls	r2, r3, #5
 8008e06:	69fb      	ldr	r3, [r7, #28]
 8008e08:	4413      	add	r3, r2
 8008e0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0e:	691b      	ldr	r3, [r3, #16]
 8008e10:	69ba      	ldr	r2, [r7, #24]
 8008e12:	0151      	lsls	r1, r2, #5
 8008e14:	69fa      	ldr	r2, [r7, #28]
 8008e16:	440a      	add	r2, r1
 8008e18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e20:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008e22:	79fb      	ldrb	r3, [r7, #7]
 8008e24:	2b01      	cmp	r3, #1
 8008e26:	d14b      	bne.n	8008ec0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d009      	beq.n	8008e44 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	015a      	lsls	r2, r3, #5
 8008e34:	69fb      	ldr	r3, [r7, #28]
 8008e36:	4413      	add	r3, r2
 8008e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3c:	461a      	mov	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	695b      	ldr	r3, [r3, #20]
 8008e42:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	791b      	ldrb	r3, [r3, #4]
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d128      	bne.n	8008e9e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d110      	bne.n	8008e7e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e76:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e7a:	6013      	str	r3, [r2, #0]
 8008e7c:	e00f      	b.n	8008e9e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e7e:	69bb      	ldr	r3, [r7, #24]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	0151      	lsls	r1, r2, #5
 8008e90:	69fa      	ldr	r2, [r7, #28]
 8008e92:	440a      	add	r2, r1
 8008e94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e9c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e9e:	69bb      	ldr	r3, [r7, #24]
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	69ba      	ldr	r2, [r7, #24]
 8008eae:	0151      	lsls	r1, r2, #5
 8008eb0:	69fa      	ldr	r2, [r7, #28]
 8008eb2:	440a      	add	r2, r1
 8008eb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eb8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ebc:	6013      	str	r3, [r2, #0]
 8008ebe:	e137      	b.n	8009130 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	015a      	lsls	r2, r3, #5
 8008ec4:	69fb      	ldr	r3, [r7, #28]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	0151      	lsls	r1, r2, #5
 8008ed2:	69fa      	ldr	r2, [r7, #28]
 8008ed4:	440a      	add	r2, r1
 8008ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ede:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	791b      	ldrb	r3, [r3, #4]
 8008ee4:	2b01      	cmp	r3, #1
 8008ee6:	d015      	beq.n	8008f14 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	699b      	ldr	r3, [r3, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	f000 811f 	beq.w	8009130 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	f003 030f 	and.w	r3, r3, #15
 8008f02:	2101      	movs	r1, #1
 8008f04:	fa01 f303 	lsl.w	r3, r1, r3
 8008f08:	69f9      	ldr	r1, [r7, #28]
 8008f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	634b      	str	r3, [r1, #52]	; 0x34
 8008f12:	e10d      	b.n	8009130 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f1a:	689b      	ldr	r3, [r3, #8]
 8008f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d110      	bne.n	8008f46 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	69ba      	ldr	r2, [r7, #24]
 8008f34:	0151      	lsls	r1, r2, #5
 8008f36:	69fa      	ldr	r2, [r7, #28]
 8008f38:	440a      	add	r2, r1
 8008f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f42:	6013      	str	r3, [r2, #0]
 8008f44:	e00f      	b.n	8008f66 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f46:	69bb      	ldr	r3, [r7, #24]
 8008f48:	015a      	lsls	r2, r3, #5
 8008f4a:	69fb      	ldr	r3, [r7, #28]
 8008f4c:	4413      	add	r3, r2
 8008f4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69ba      	ldr	r2, [r7, #24]
 8008f56:	0151      	lsls	r1, r2, #5
 8008f58:	69fa      	ldr	r2, [r7, #28]
 8008f5a:	440a      	add	r2, r1
 8008f5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f64:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	6919      	ldr	r1, [r3, #16]
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	781a      	ldrb	r2, [r3, #0]
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	699b      	ldr	r3, [r3, #24]
 8008f72:	b298      	uxth	r0, r3
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	9300      	str	r3, [sp, #0]
 8008f78:	4603      	mov	r3, r0
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f000 faea 	bl	8009554 <USB_WritePacket>
 8008f80:	e0d6      	b.n	8009130 <USB_EPStartXfer+0x488>
 8008f82:	bf00      	nop
 8008f84:	e007ffff 	.word	0xe007ffff
 8008f88:	fff80000 	.word	0xfff80000
 8008f8c:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	69fb      	ldr	r3, [r7, #28]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f9c:	691a      	ldr	r2, [r3, #16]
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	0159      	lsls	r1, r3, #5
 8008fa2:	69fb      	ldr	r3, [r7, #28]
 8008fa4:	440b      	add	r3, r1
 8008fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008faa:	4619      	mov	r1, r3
 8008fac:	4b63      	ldr	r3, [pc, #396]	; (800913c <USB_EPStartXfer+0x494>)
 8008fae:	4013      	ands	r3, r2
 8008fb0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fb2:	69bb      	ldr	r3, [r7, #24]
 8008fb4:	015a      	lsls	r2, r3, #5
 8008fb6:	69fb      	ldr	r3, [r7, #28]
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fbe:	691a      	ldr	r2, [r3, #16]
 8008fc0:	69bb      	ldr	r3, [r7, #24]
 8008fc2:	0159      	lsls	r1, r3, #5
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	440b      	add	r3, r1
 8008fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4b5c      	ldr	r3, [pc, #368]	; (8009140 <USB_EPStartXfer+0x498>)
 8008fd0:	4013      	ands	r3, r2
 8008fd2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	699b      	ldr	r3, [r3, #24]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d123      	bne.n	8009024 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008fdc:	69bb      	ldr	r3, [r7, #24]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	69fb      	ldr	r3, [r7, #28]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fe8:	691a      	ldr	r2, [r3, #16]
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ff2:	69b9      	ldr	r1, [r7, #24]
 8008ff4:	0148      	lsls	r0, r1, #5
 8008ff6:	69f9      	ldr	r1, [r7, #28]
 8008ff8:	4401      	add	r1, r0
 8008ffa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ffe:	4313      	orrs	r3, r2
 8009000:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009002:	69bb      	ldr	r3, [r7, #24]
 8009004:	015a      	lsls	r2, r3, #5
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	4413      	add	r3, r2
 800900a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	69ba      	ldr	r2, [r7, #24]
 8009012:	0151      	lsls	r1, r2, #5
 8009014:	69fa      	ldr	r2, [r7, #28]
 8009016:	440a      	add	r2, r1
 8009018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800901c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009020:	6113      	str	r3, [r2, #16]
 8009022:	e037      	b.n	8009094 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	699a      	ldr	r2, [r3, #24]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	68db      	ldr	r3, [r3, #12]
 800902c:	4413      	add	r3, r2
 800902e:	1e5a      	subs	r2, r3, #1
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	68db      	ldr	r3, [r3, #12]
 8009034:	fbb2 f3f3 	udiv	r3, r2, r3
 8009038:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	8afa      	ldrh	r2, [r7, #22]
 8009040:	fb03 f202 	mul.w	r2, r3, r2
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009048:	69bb      	ldr	r3, [r7, #24]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	691a      	ldr	r2, [r3, #16]
 8009056:	8afb      	ldrh	r3, [r7, #22]
 8009058:	04d9      	lsls	r1, r3, #19
 800905a:	4b3a      	ldr	r3, [pc, #232]	; (8009144 <USB_EPStartXfer+0x49c>)
 800905c:	400b      	ands	r3, r1
 800905e:	69b9      	ldr	r1, [r7, #24]
 8009060:	0148      	lsls	r0, r1, #5
 8009062:	69f9      	ldr	r1, [r7, #28]
 8009064:	4401      	add	r1, r0
 8009066:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800906a:	4313      	orrs	r3, r2
 800906c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	015a      	lsls	r2, r3, #5
 8009072:	69fb      	ldr	r3, [r7, #28]
 8009074:	4413      	add	r3, r2
 8009076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	69db      	ldr	r3, [r3, #28]
 8009080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009084:	69b9      	ldr	r1, [r7, #24]
 8009086:	0148      	lsls	r0, r1, #5
 8009088:	69f9      	ldr	r1, [r7, #28]
 800908a:	4401      	add	r1, r0
 800908c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009090:	4313      	orrs	r3, r2
 8009092:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d10d      	bne.n	80090b6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	691b      	ldr	r3, [r3, #16]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d009      	beq.n	80090b6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090a2:	68bb      	ldr	r3, [r7, #8]
 80090a4:	6919      	ldr	r1, [r3, #16]
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	015a      	lsls	r2, r3, #5
 80090aa:	69fb      	ldr	r3, [r7, #28]
 80090ac:	4413      	add	r3, r2
 80090ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090b2:	460a      	mov	r2, r1
 80090b4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	791b      	ldrb	r3, [r3, #4]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d128      	bne.n	8009110 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d110      	bne.n	80090f0 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	69ba      	ldr	r2, [r7, #24]
 80090de:	0151      	lsls	r1, r2, #5
 80090e0:	69fa      	ldr	r2, [r7, #28]
 80090e2:	440a      	add	r2, r1
 80090e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80090ec:	6013      	str	r3, [r2, #0]
 80090ee:	e00f      	b.n	8009110 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80090f0:	69bb      	ldr	r3, [r7, #24]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	0151      	lsls	r1, r2, #5
 8009102:	69fa      	ldr	r2, [r7, #28]
 8009104:	440a      	add	r2, r1
 8009106:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800910a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800910e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009110:	69bb      	ldr	r3, [r7, #24]
 8009112:	015a      	lsls	r2, r3, #5
 8009114:	69fb      	ldr	r3, [r7, #28]
 8009116:	4413      	add	r3, r2
 8009118:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	0151      	lsls	r1, r2, #5
 8009122:	69fa      	ldr	r2, [r7, #28]
 8009124:	440a      	add	r2, r1
 8009126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800912a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800912e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3720      	adds	r7, #32
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	fff80000 	.word	0xfff80000
 8009140:	e007ffff 	.word	0xe007ffff
 8009144:	1ff80000 	.word	0x1ff80000

08009148 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009148:	b480      	push	{r7}
 800914a:	b087      	sub	sp, #28
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	4613      	mov	r3, r2
 8009154:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	781b      	ldrb	r3, [r3, #0]
 800915e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	785b      	ldrb	r3, [r3, #1]
 8009164:	2b01      	cmp	r3, #1
 8009166:	f040 80ce 	bne.w	8009306 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	699b      	ldr	r3, [r3, #24]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d132      	bne.n	80091d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009172:	693b      	ldr	r3, [r7, #16]
 8009174:	015a      	lsls	r2, r3, #5
 8009176:	697b      	ldr	r3, [r7, #20]
 8009178:	4413      	add	r3, r2
 800917a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800917e:	691a      	ldr	r2, [r3, #16]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	0159      	lsls	r1, r3, #5
 8009184:	697b      	ldr	r3, [r7, #20]
 8009186:	440b      	add	r3, r1
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	4619      	mov	r1, r3
 800918e:	4b9a      	ldr	r3, [pc, #616]	; (80093f8 <USB_EP0StartXfer+0x2b0>)
 8009190:	4013      	ands	r3, r2
 8009192:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009194:	693b      	ldr	r3, [r7, #16]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	697b      	ldr	r3, [r7, #20]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	693a      	ldr	r2, [r7, #16]
 80091a4:	0151      	lsls	r1, r2, #5
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	440a      	add	r2, r1
 80091aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80091ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	015a      	lsls	r2, r3, #5
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	4413      	add	r3, r2
 80091bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c0:	691a      	ldr	r2, [r3, #16]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	0159      	lsls	r1, r3, #5
 80091c6:	697b      	ldr	r3, [r7, #20]
 80091c8:	440b      	add	r3, r1
 80091ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091ce:	4619      	mov	r1, r3
 80091d0:	4b8a      	ldr	r3, [pc, #552]	; (80093fc <USB_EP0StartXfer+0x2b4>)
 80091d2:	4013      	ands	r3, r2
 80091d4:	610b      	str	r3, [r1, #16]
 80091d6:	e04e      	b.n	8009276 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	697b      	ldr	r3, [r7, #20]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e4:	691a      	ldr	r2, [r3, #16]
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	0159      	lsls	r1, r3, #5
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	440b      	add	r3, r1
 80091ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091f2:	4619      	mov	r1, r3
 80091f4:	4b81      	ldr	r3, [pc, #516]	; (80093fc <USB_EP0StartXfer+0x2b4>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80091fa:	693b      	ldr	r3, [r7, #16]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009206:	691a      	ldr	r2, [r3, #16]
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	0159      	lsls	r1, r3, #5
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	440b      	add	r3, r1
 8009210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009214:	4619      	mov	r1, r3
 8009216:	4b78      	ldr	r3, [pc, #480]	; (80093f8 <USB_EP0StartXfer+0x2b0>)
 8009218:	4013      	ands	r3, r2
 800921a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	699a      	ldr	r2, [r3, #24]
 8009220:	68bb      	ldr	r3, [r7, #8]
 8009222:	68db      	ldr	r3, [r3, #12]
 8009224:	429a      	cmp	r2, r3
 8009226:	d903      	bls.n	8009230 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	015a      	lsls	r2, r3, #5
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	4413      	add	r3, r2
 8009238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800923c:	691b      	ldr	r3, [r3, #16]
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	0151      	lsls	r1, r2, #5
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	440a      	add	r2, r1
 8009246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800924a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800924e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925c:	691a      	ldr	r2, [r3, #16]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009266:	6939      	ldr	r1, [r7, #16]
 8009268:	0148      	lsls	r0, r1, #5
 800926a:	6979      	ldr	r1, [r7, #20]
 800926c:	4401      	add	r1, r0
 800926e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009272:	4313      	orrs	r3, r2
 8009274:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009276:	79fb      	ldrb	r3, [r7, #7]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d11e      	bne.n	80092ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	695b      	ldr	r3, [r3, #20]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d009      	beq.n	8009298 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	4413      	add	r3, r2
 800928c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009290:	461a      	mov	r2, r3
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	015a      	lsls	r2, r3, #5
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	4413      	add	r3, r2
 80092a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	693a      	ldr	r2, [r7, #16]
 80092a8:	0151      	lsls	r1, r2, #5
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	440a      	add	r2, r1
 80092ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e097      	b.n	80093ea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	015a      	lsls	r2, r3, #5
 80092be:	697b      	ldr	r3, [r7, #20]
 80092c0:	4413      	add	r3, r2
 80092c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	693a      	ldr	r2, [r7, #16]
 80092ca:	0151      	lsls	r1, r2, #5
 80092cc:	697a      	ldr	r2, [r7, #20]
 80092ce:	440a      	add	r2, r1
 80092d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80092d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f000 8083 	beq.w	80093ea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	781b      	ldrb	r3, [r3, #0]
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	2101      	movs	r1, #1
 80092f6:	fa01 f303 	lsl.w	r3, r1, r3
 80092fa:	6979      	ldr	r1, [r7, #20]
 80092fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009300:	4313      	orrs	r3, r2
 8009302:	634b      	str	r3, [r1, #52]	; 0x34
 8009304:	e071      	b.n	80093ea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	015a      	lsls	r2, r3, #5
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	4413      	add	r3, r2
 800930e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009312:	691a      	ldr	r2, [r3, #16]
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	0159      	lsls	r1, r3, #5
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	440b      	add	r3, r1
 800931c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009320:	4619      	mov	r1, r3
 8009322:	4b36      	ldr	r3, [pc, #216]	; (80093fc <USB_EP0StartXfer+0x2b4>)
 8009324:	4013      	ands	r3, r2
 8009326:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	015a      	lsls	r2, r3, #5
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	4413      	add	r3, r2
 8009330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009334:	691a      	ldr	r2, [r3, #16]
 8009336:	693b      	ldr	r3, [r7, #16]
 8009338:	0159      	lsls	r1, r3, #5
 800933a:	697b      	ldr	r3, [r7, #20]
 800933c:	440b      	add	r3, r1
 800933e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009342:	4619      	mov	r1, r3
 8009344:	4b2c      	ldr	r3, [pc, #176]	; (80093f8 <USB_EP0StartXfer+0x2b0>)
 8009346:	4013      	ands	r3, r2
 8009348:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	699b      	ldr	r3, [r3, #24]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d003      	beq.n	800935a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	68da      	ldr	r2, [r3, #12]
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800935a:	68bb      	ldr	r3, [r7, #8]
 800935c:	68da      	ldr	r2, [r3, #12]
 800935e:	68bb      	ldr	r3, [r7, #8]
 8009360:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009362:	693b      	ldr	r3, [r7, #16]
 8009364:	015a      	lsls	r2, r3, #5
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	4413      	add	r3, r2
 800936a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800936e:	691b      	ldr	r3, [r3, #16]
 8009370:	693a      	ldr	r2, [r7, #16]
 8009372:	0151      	lsls	r1, r2, #5
 8009374:	697a      	ldr	r2, [r7, #20]
 8009376:	440a      	add	r2, r1
 8009378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800937c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009380:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	015a      	lsls	r2, r3, #5
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	4413      	add	r3, r2
 800938a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	68bb      	ldr	r3, [r7, #8]
 8009392:	69db      	ldr	r3, [r3, #28]
 8009394:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009398:	6939      	ldr	r1, [r7, #16]
 800939a:	0148      	lsls	r0, r1, #5
 800939c:	6979      	ldr	r1, [r7, #20]
 800939e:	4401      	add	r1, r0
 80093a0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80093a4:	4313      	orrs	r3, r2
 80093a6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80093a8:	79fb      	ldrb	r3, [r7, #7]
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d10d      	bne.n	80093ca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d009      	beq.n	80093ca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	6919      	ldr	r1, [r3, #16]
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	015a      	lsls	r2, r3, #5
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	4413      	add	r3, r2
 80093c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c6:	460a      	mov	r2, r1
 80093c8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	693a      	ldr	r2, [r7, #16]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80093e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	371c      	adds	r7, #28
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr
 80093f8:	e007ffff 	.word	0xe007ffff
 80093fc:	fff80000 	.word	0xfff80000

08009400 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009400:	b480      	push	{r7}
 8009402:	b087      	sub	sp, #28
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	785b      	ldrb	r3, [r3, #1]
 800941a:	2b01      	cmp	r3, #1
 800941c:	d14a      	bne.n	80094b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	015a      	lsls	r2, r3, #5
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	4413      	add	r3, r2
 8009428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009432:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009436:	f040 8086 	bne.w	8009546 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	683a      	ldr	r2, [r7, #0]
 800944c:	7812      	ldrb	r2, [r2, #0]
 800944e:	0151      	lsls	r1, r2, #5
 8009450:	693a      	ldr	r2, [r7, #16]
 8009452:	440a      	add	r2, r1
 8009454:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009458:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800945c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	781b      	ldrb	r3, [r3, #0]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	7812      	ldrb	r2, [r2, #0]
 8009472:	0151      	lsls	r1, r2, #5
 8009474:	693a      	ldr	r2, [r7, #16]
 8009476:	440a      	add	r2, r1
 8009478:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800947c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009480:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	f242 7210 	movw	r2, #10000	; 0x2710
 800948e:	4293      	cmp	r3, r2
 8009490:	d902      	bls.n	8009498 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	75fb      	strb	r3, [r7, #23]
          break;
 8009496:	e056      	b.n	8009546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094b0:	d0e7      	beq.n	8009482 <USB_EPStopXfer+0x82>
 80094b2:	e048      	b.n	8009546 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	015a      	lsls	r2, r3, #5
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	4413      	add	r3, r2
 80094be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80094c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80094cc:	d13b      	bne.n	8009546 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80094ce:	683b      	ldr	r3, [r7, #0]
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	015a      	lsls	r2, r3, #5
 80094d4:	693b      	ldr	r3, [r7, #16]
 80094d6:	4413      	add	r3, r2
 80094d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	683a      	ldr	r2, [r7, #0]
 80094e0:	7812      	ldrb	r2, [r2, #0]
 80094e2:	0151      	lsls	r1, r2, #5
 80094e4:	693a      	ldr	r2, [r7, #16]
 80094e6:	440a      	add	r2, r1
 80094e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	015a      	lsls	r2, r3, #5
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	4413      	add	r3, r2
 80094fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	683a      	ldr	r2, [r7, #0]
 8009504:	7812      	ldrb	r2, [r2, #0]
 8009506:	0151      	lsls	r1, r2, #5
 8009508:	693a      	ldr	r2, [r7, #16]
 800950a:	440a      	add	r2, r1
 800950c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009510:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009514:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	3301      	adds	r3, #1
 800951a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009522:	4293      	cmp	r3, r2
 8009524:	d902      	bls.n	800952c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	75fb      	strb	r3, [r7, #23]
          break;
 800952a:	e00c      	b.n	8009546 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800952c:	683b      	ldr	r3, [r7, #0]
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009540:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009544:	d0e7      	beq.n	8009516 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009546:	7dfb      	ldrb	r3, [r7, #23]
}
 8009548:	4618      	mov	r0, r3
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009554:	b480      	push	{r7}
 8009556:	b089      	sub	sp, #36	; 0x24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	4611      	mov	r1, r2
 8009560:	461a      	mov	r2, r3
 8009562:	460b      	mov	r3, r1
 8009564:	71fb      	strb	r3, [r7, #7]
 8009566:	4613      	mov	r3, r2
 8009568:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009572:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009576:	2b00      	cmp	r3, #0
 8009578:	d123      	bne.n	80095c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800957a:	88bb      	ldrh	r3, [r7, #4]
 800957c:	3303      	adds	r3, #3
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009582:	2300      	movs	r3, #0
 8009584:	61bb      	str	r3, [r7, #24]
 8009586:	e018      	b.n	80095ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009588:	79fb      	ldrb	r3, [r7, #7]
 800958a:	031a      	lsls	r2, r3, #12
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	4413      	add	r3, r2
 8009590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009594:	461a      	mov	r2, r3
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	3301      	adds	r3, #1
 80095a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095a2:	69fb      	ldr	r3, [r7, #28]
 80095a4:	3301      	adds	r3, #1
 80095a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095a8:	69fb      	ldr	r3, [r7, #28]
 80095aa:	3301      	adds	r3, #1
 80095ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	3301      	adds	r3, #1
 80095b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80095b4:	69bb      	ldr	r3, [r7, #24]
 80095b6:	3301      	adds	r3, #1
 80095b8:	61bb      	str	r3, [r7, #24]
 80095ba:	69ba      	ldr	r2, [r7, #24]
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d3e2      	bcc.n	8009588 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80095c2:	2300      	movs	r3, #0
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	3724      	adds	r7, #36	; 0x24
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80095d0:	b480      	push	{r7}
 80095d2:	b08b      	sub	sp, #44	; 0x2c
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	4613      	mov	r3, r2
 80095dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80095e6:	88fb      	ldrh	r3, [r7, #6]
 80095e8:	089b      	lsrs	r3, r3, #2
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80095f6:	2300      	movs	r3, #0
 80095f8:	623b      	str	r3, [r7, #32]
 80095fa:	e014      	b.n	8009626 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80095fc:	69bb      	ldr	r3, [r7, #24]
 80095fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	601a      	str	r2, [r3, #0]
    pDest++;
 8009608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800960a:	3301      	adds	r3, #1
 800960c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	3301      	adds	r3, #1
 8009612:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009616:	3301      	adds	r3, #1
 8009618:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	3301      	adds	r3, #1
 800961e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009620:	6a3b      	ldr	r3, [r7, #32]
 8009622:	3301      	adds	r3, #1
 8009624:	623b      	str	r3, [r7, #32]
 8009626:	6a3a      	ldr	r2, [r7, #32]
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	429a      	cmp	r2, r3
 800962c:	d3e6      	bcc.n	80095fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800962e:	8bfb      	ldrh	r3, [r7, #30]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d01e      	beq.n	8009672 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800963e:	461a      	mov	r2, r3
 8009640:	f107 0310 	add.w	r3, r7, #16
 8009644:	6812      	ldr	r2, [r2, #0]
 8009646:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	6a3b      	ldr	r3, [r7, #32]
 800964c:	b2db      	uxtb	r3, r3
 800964e:	00db      	lsls	r3, r3, #3
 8009650:	fa22 f303 	lsr.w	r3, r2, r3
 8009654:	b2da      	uxtb	r2, r3
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	701a      	strb	r2, [r3, #0]
      i++;
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	3301      	adds	r3, #1
 800965e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	3301      	adds	r3, #1
 8009664:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009666:	8bfb      	ldrh	r3, [r7, #30]
 8009668:	3b01      	subs	r3, #1
 800966a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800966c:	8bfb      	ldrh	r3, [r7, #30]
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1ea      	bne.n	8009648 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009674:	4618      	mov	r0, r3
 8009676:	372c      	adds	r7, #44	; 0x2c
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009680:	b480      	push	{r7}
 8009682:	b085      	sub	sp, #20
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	785b      	ldrb	r3, [r3, #1]
 8009698:	2b01      	cmp	r3, #1
 800969a:	d12c      	bne.n	80096f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	015a      	lsls	r2, r3, #5
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	db12      	blt.n	80096d4 <USB_EPSetStall+0x54>
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00f      	beq.n	80096d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80096b4:	68bb      	ldr	r3, [r7, #8]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	68fa      	ldr	r2, [r7, #12]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80096d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	e02b      	b.n	800974e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	015a      	lsls	r2, r3, #5
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	4413      	add	r3, r2
 80096fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b00      	cmp	r3, #0
 8009706:	db12      	blt.n	800972e <USB_EPSetStall+0xae>
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d00f      	beq.n	800972e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	015a      	lsls	r2, r3, #5
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4413      	add	r3, r2
 8009716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	0151      	lsls	r1, r2, #5
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	440a      	add	r2, r1
 8009724:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009728:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800972c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	015a      	lsls	r2, r3, #5
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	4413      	add	r3, r2
 8009736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	68ba      	ldr	r2, [r7, #8]
 800973e:	0151      	lsls	r1, r2, #5
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	440a      	add	r2, r1
 8009744:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009748:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800974c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3714      	adds	r7, #20
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800975c:	b480      	push	{r7}
 800975e:	b085      	sub	sp, #20
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	781b      	ldrb	r3, [r3, #0]
 800976e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	785b      	ldrb	r3, [r3, #1]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d128      	bne.n	80097ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	68fa      	ldr	r2, [r7, #12]
 800978c:	440a      	add	r2, r1
 800978e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009796:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	791b      	ldrb	r3, [r3, #4]
 800979c:	2b03      	cmp	r3, #3
 800979e:	d003      	beq.n	80097a8 <USB_EPClearStall+0x4c>
 80097a0:	683b      	ldr	r3, [r7, #0]
 80097a2:	791b      	ldrb	r3, [r3, #4]
 80097a4:	2b02      	cmp	r3, #2
 80097a6:	d138      	bne.n	800981a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68ba      	ldr	r2, [r7, #8]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	68fa      	ldr	r2, [r7, #12]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80097c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	e027      	b.n	800981a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80097ca:	68bb      	ldr	r3, [r7, #8]
 80097cc:	015a      	lsls	r2, r3, #5
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	4413      	add	r3, r2
 80097d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	68ba      	ldr	r2, [r7, #8]
 80097da:	0151      	lsls	r1, r2, #5
 80097dc:	68fa      	ldr	r2, [r7, #12]
 80097de:	440a      	add	r2, r1
 80097e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80097ea:	683b      	ldr	r3, [r7, #0]
 80097ec:	791b      	ldrb	r3, [r3, #4]
 80097ee:	2b03      	cmp	r3, #3
 80097f0:	d003      	beq.n	80097fa <USB_EPClearStall+0x9e>
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	791b      	ldrb	r3, [r3, #4]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	d10f      	bne.n	800981a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	4413      	add	r3, r2
 8009802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	68ba      	ldr	r2, [r7, #8]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	68fa      	ldr	r2, [r7, #12]
 800980e:	440a      	add	r2, r1
 8009810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009818:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800981a:	2300      	movs	r3, #0
}
 800981c:	4618      	mov	r0, r3
 800981e:	3714      	adds	r7, #20
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009828:	b480      	push	{r7}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
 8009830:	460b      	mov	r3, r1
 8009832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	68fa      	ldr	r2, [r7, #12]
 8009842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009846:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800984a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009852:	681a      	ldr	r2, [r3, #0]
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	011b      	lsls	r3, r3, #4
 8009858:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800985c:	68f9      	ldr	r1, [r7, #12]
 800985e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009862:	4313      	orrs	r3, r2
 8009864:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009866:	2300      	movs	r3, #0
}
 8009868:	4618      	mov	r0, r3
 800986a:	3714      	adds	r7, #20
 800986c:	46bd      	mov	sp, r7
 800986e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009872:	4770      	bx	lr

08009874 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009874:	b480      	push	{r7}
 8009876:	b085      	sub	sp, #20
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	68fa      	ldr	r2, [r7, #12]
 800988a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800988e:	f023 0303 	bic.w	r3, r3, #3
 8009892:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	68fa      	ldr	r2, [r7, #12]
 800989e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098a2:	f023 0302 	bic.w	r3, r3, #2
 80098a6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	3714      	adds	r7, #20
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr

080098b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80098b6:	b480      	push	{r7}
 80098b8:	b085      	sub	sp, #20
 80098ba:	af00      	add	r7, sp, #0
 80098bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	68fa      	ldr	r2, [r7, #12]
 80098cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80098d0:	f023 0303 	bic.w	r3, r3, #3
 80098d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	68fa      	ldr	r2, [r7, #12]
 80098e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80098e4:	f043 0302 	orr.w	r3, r3, #2
 80098e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80098ea:	2300      	movs	r3, #0
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	3714      	adds	r7, #20
 80098f0:	46bd      	mov	sp, r7
 80098f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f6:	4770      	bx	lr

080098f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	699b      	ldr	r3, [r3, #24]
 800990a:	68fa      	ldr	r2, [r7, #12]
 800990c:	4013      	ands	r3, r2
 800990e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009910:	68fb      	ldr	r3, [r7, #12]
}
 8009912:	4618      	mov	r0, r3
 8009914:	3714      	adds	r7, #20
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009930:	699b      	ldr	r3, [r3, #24]
 8009932:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800993a:	69db      	ldr	r3, [r3, #28]
 800993c:	68ba      	ldr	r2, [r7, #8]
 800993e:	4013      	ands	r3, r2
 8009940:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	0c1b      	lsrs	r3, r3, #16
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009952:	b480      	push	{r7}
 8009954:	b085      	sub	sp, #20
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009964:	699b      	ldr	r3, [r3, #24]
 8009966:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996e:	69db      	ldr	r3, [r3, #28]
 8009970:	68ba      	ldr	r2, [r7, #8]
 8009972:	4013      	ands	r3, r2
 8009974:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	b29b      	uxth	r3, r3
}
 800997a:	4618      	mov	r0, r3
 800997c:	3714      	adds	r7, #20
 800997e:	46bd      	mov	sp, r7
 8009980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009984:	4770      	bx	lr

08009986 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009986:	b480      	push	{r7}
 8009988:	b085      	sub	sp, #20
 800998a:	af00      	add	r7, sp, #0
 800998c:	6078      	str	r0, [r7, #4]
 800998e:	460b      	mov	r3, r1
 8009990:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009996:	78fb      	ldrb	r3, [r7, #3]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	4013      	ands	r3, r2
 80099b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099b4:	68bb      	ldr	r3, [r7, #8]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3714      	adds	r7, #20
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr

080099c2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80099c2:	b480      	push	{r7}
 80099c4:	b087      	sub	sp, #28
 80099c6:	af00      	add	r7, sp, #0
 80099c8:	6078      	str	r0, [r7, #4]
 80099ca:	460b      	mov	r3, r1
 80099cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099d8:	691b      	ldr	r3, [r3, #16]
 80099da:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80099e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099e4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80099e6:	78fb      	ldrb	r3, [r7, #3]
 80099e8:	f003 030f 	and.w	r3, r3, #15
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	fa22 f303 	lsr.w	r3, r2, r3
 80099f2:	01db      	lsls	r3, r3, #7
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80099fc:	78fb      	ldrb	r3, [r7, #3]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	693a      	ldr	r2, [r7, #16]
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009a10:	68bb      	ldr	r3, [r7, #8]
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	371c      	adds	r7, #28
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009a1e:	b480      	push	{r7}
 8009a20:	b083      	sub	sp, #12
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	370c      	adds	r7, #12
 8009a32:	46bd      	mov	sp, r7
 8009a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a38:	4770      	bx	lr
	...

08009a3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009a3c:	b480      	push	{r7}
 8009a3e:	b085      	sub	sp, #20
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a4e:	681a      	ldr	r2, [r3, #0]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a56:	4619      	mov	r1, r3
 8009a58:	4b09      	ldr	r3, [pc, #36]	; (8009a80 <USB_ActivateSetup+0x44>)
 8009a5a:	4013      	ands	r3, r2
 8009a5c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009a72:	2300      	movs	r3, #0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3714      	adds	r7, #20
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr
 8009a80:	fffff800 	.word	0xfffff800

08009a84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009a84:	b480      	push	{r7}
 8009a86:	b087      	sub	sp, #28
 8009a88:	af00      	add	r7, sp, #0
 8009a8a:	60f8      	str	r0, [r7, #12]
 8009a8c:	460b      	mov	r3, r1
 8009a8e:	607a      	str	r2, [r7, #4]
 8009a90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	333c      	adds	r3, #60	; 0x3c
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009aa0:	693b      	ldr	r3, [r7, #16]
 8009aa2:	4a26      	ldr	r2, [pc, #152]	; (8009b3c <USB_EP0_OutStart+0xb8>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d90a      	bls.n	8009abe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ab8:	d101      	bne.n	8009abe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	e037      	b.n	8009b2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009abe:	697b      	ldr	r3, [r7, #20]
 8009ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ac4:	461a      	mov	r2, r3
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ad0:	691b      	ldr	r3, [r3, #16]
 8009ad2:	697a      	ldr	r2, [r7, #20]
 8009ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ad8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009adc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009ade:	697b      	ldr	r3, [r7, #20]
 8009ae0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009aec:	f043 0318 	orr.w	r3, r3, #24
 8009af0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af8:	691b      	ldr	r3, [r3, #16]
 8009afa:	697a      	ldr	r2, [r7, #20]
 8009afc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009b04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009b06:	7afb      	ldrb	r3, [r7, #11]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d10f      	bne.n	8009b2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	461a      	mov	r2, r3
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009b18:	697b      	ldr	r3, [r7, #20]
 8009b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009b2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	371c      	adds	r7, #28
 8009b32:	46bd      	mov	sp, r7
 8009b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b38:	4770      	bx	lr
 8009b3a:	bf00      	nop
 8009b3c:	4f54300a 	.word	0x4f54300a

08009b40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	3301      	adds	r3, #1
 8009b50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	4a13      	ldr	r2, [pc, #76]	; (8009ba4 <USB_CoreReset+0x64>)
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d901      	bls.n	8009b5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e01b      	b.n	8009b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	691b      	ldr	r3, [r3, #16]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	daf2      	bge.n	8009b4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009b66:	2300      	movs	r3, #0
 8009b68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f043 0201 	orr.w	r2, r3, #1
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	3301      	adds	r3, #1
 8009b7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4a09      	ldr	r2, [pc, #36]	; (8009ba4 <USB_CoreReset+0x64>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d901      	bls.n	8009b88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009b84:	2303      	movs	r3, #3
 8009b86:	e006      	b.n	8009b96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	691b      	ldr	r3, [r3, #16]
 8009b8c:	f003 0301 	and.w	r3, r3, #1
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d0f0      	beq.n	8009b76 <USB_CoreReset+0x36>

  return HAL_OK;
 8009b94:	2300      	movs	r3, #0
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	3714      	adds	r7, #20
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	00030d40 	.word	0x00030d40

08009ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009bb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009bb8:	f002 fcfe 	bl	800c5b8 <malloc>
 8009bbc:	4603      	mov	r3, r0
 8009bbe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d109      	bne.n	8009bda <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	32b0      	adds	r2, #176	; 0xb0
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e0d4      	b.n	8009d84 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009bda:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8009bde:	2100      	movs	r1, #0
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f002 fdc5 	bl	800c770 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	32b0      	adds	r2, #176	; 0xb0
 8009bf0:	68f9      	ldr	r1, [r7, #12]
 8009bf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	32b0      	adds	r2, #176	; 0xb0
 8009c00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	7c1b      	ldrb	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d138      	bne.n	8009c84 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c12:	4b5e      	ldr	r3, [pc, #376]	; (8009d8c <USBD_CDC_Init+0x1e4>)
 8009c14:	7819      	ldrb	r1, [r3, #0]
 8009c16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c1a:	2202      	movs	r2, #2
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f002 fb28 	bl	800c272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c22:	4b5a      	ldr	r3, [pc, #360]	; (8009d8c <USBD_CDC_Init+0x1e4>)
 8009c24:	781b      	ldrb	r3, [r3, #0]
 8009c26:	f003 020f 	and.w	r2, r3, #15
 8009c2a:	6879      	ldr	r1, [r7, #4]
 8009c2c:	4613      	mov	r3, r2
 8009c2e:	009b      	lsls	r3, r3, #2
 8009c30:	4413      	add	r3, r2
 8009c32:	009b      	lsls	r3, r3, #2
 8009c34:	440b      	add	r3, r1
 8009c36:	3324      	adds	r3, #36	; 0x24
 8009c38:	2201      	movs	r2, #1
 8009c3a:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009c3c:	4b54      	ldr	r3, [pc, #336]	; (8009d90 <USBD_CDC_Init+0x1e8>)
 8009c3e:	7819      	ldrb	r1, [r3, #0]
 8009c40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c44:	2202      	movs	r2, #2
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f002 fb13 	bl	800c272 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009c4c:	4b50      	ldr	r3, [pc, #320]	; (8009d90 <USBD_CDC_Init+0x1e8>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	f003 020f 	and.w	r2, r3, #15
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	4613      	mov	r3, r2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	009b      	lsls	r3, r3, #2
 8009c5e:	440b      	add	r3, r1
 8009c60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009c64:	2201      	movs	r2, #1
 8009c66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009c68:	4b4a      	ldr	r3, [pc, #296]	; (8009d94 <USBD_CDC_Init+0x1ec>)
 8009c6a:	781b      	ldrb	r3, [r3, #0]
 8009c6c:	f003 020f 	and.w	r2, r3, #15
 8009c70:	6879      	ldr	r1, [r7, #4]
 8009c72:	4613      	mov	r3, r2
 8009c74:	009b      	lsls	r3, r3, #2
 8009c76:	4413      	add	r3, r2
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	440b      	add	r3, r1
 8009c7c:	3326      	adds	r3, #38	; 0x26
 8009c7e:	2210      	movs	r2, #16
 8009c80:	801a      	strh	r2, [r3, #0]
 8009c82:	e035      	b.n	8009cf0 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009c84:	4b41      	ldr	r3, [pc, #260]	; (8009d8c <USBD_CDC_Init+0x1e4>)
 8009c86:	7819      	ldrb	r1, [r3, #0]
 8009c88:	2340      	movs	r3, #64	; 0x40
 8009c8a:	2202      	movs	r2, #2
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f002 faf0 	bl	800c272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009c92:	4b3e      	ldr	r3, [pc, #248]	; (8009d8c <USBD_CDC_Init+0x1e4>)
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	f003 020f 	and.w	r2, r3, #15
 8009c9a:	6879      	ldr	r1, [r7, #4]
 8009c9c:	4613      	mov	r3, r2
 8009c9e:	009b      	lsls	r3, r3, #2
 8009ca0:	4413      	add	r3, r2
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	3324      	adds	r3, #36	; 0x24
 8009ca8:	2201      	movs	r2, #1
 8009caa:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009cac:	4b38      	ldr	r3, [pc, #224]	; (8009d90 <USBD_CDC_Init+0x1e8>)
 8009cae:	7819      	ldrb	r1, [r3, #0]
 8009cb0:	2340      	movs	r3, #64	; 0x40
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	6878      	ldr	r0, [r7, #4]
 8009cb6:	f002 fadc 	bl	800c272 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009cba:	4b35      	ldr	r3, [pc, #212]	; (8009d90 <USBD_CDC_Init+0x1e8>)
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	f003 020f 	and.w	r2, r3, #15
 8009cc2:	6879      	ldr	r1, [r7, #4]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4413      	add	r3, r2
 8009cca:	009b      	lsls	r3, r3, #2
 8009ccc:	440b      	add	r3, r1
 8009cce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009cd6:	4b2f      	ldr	r3, [pc, #188]	; (8009d94 <USBD_CDC_Init+0x1ec>)
 8009cd8:	781b      	ldrb	r3, [r3, #0]
 8009cda:	f003 020f 	and.w	r2, r3, #15
 8009cde:	6879      	ldr	r1, [r7, #4]
 8009ce0:	4613      	mov	r3, r2
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	4413      	add	r3, r2
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	440b      	add	r3, r1
 8009cea:	3326      	adds	r3, #38	; 0x26
 8009cec:	2210      	movs	r2, #16
 8009cee:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009cf0:	4b28      	ldr	r3, [pc, #160]	; (8009d94 <USBD_CDC_Init+0x1ec>)
 8009cf2:	7819      	ldrb	r1, [r3, #0]
 8009cf4:	2308      	movs	r3, #8
 8009cf6:	2203      	movs	r2, #3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f002 faba 	bl	800c272 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009cfe:	4b25      	ldr	r3, [pc, #148]	; (8009d94 <USBD_CDC_Init+0x1ec>)
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	f003 020f 	and.w	r2, r3, #15
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	440b      	add	r3, r1
 8009d12:	3324      	adds	r3, #36	; 0x24
 8009d14:	2201      	movs	r2, #1
 8009d16:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009d26:	687a      	ldr	r2, [r7, #4]
 8009d28:	33b0      	adds	r3, #176	; 0xb0
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	685b      	ldr	r3, [r3, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2200      	movs	r2, #0
 8009d38:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d101      	bne.n	8009d52 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 8009d4e:	2302      	movs	r3, #2
 8009d50:	e018      	b.n	8009d84 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	7c1b      	ldrb	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d10a      	bne.n	8009d70 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d5a:	4b0d      	ldr	r3, [pc, #52]	; (8009d90 <USBD_CDC_Init+0x1e8>)
 8009d5c:	7819      	ldrb	r1, [r3, #0]
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f002 fb71 	bl	800c450 <USBD_LL_PrepareReceive>
 8009d6e:	e008      	b.n	8009d82 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009d70:	4b07      	ldr	r3, [pc, #28]	; (8009d90 <USBD_CDC_Init+0x1e8>)
 8009d72:	7819      	ldrb	r1, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f002 fb67 	bl	800c450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}
 8009d8c:	2000011f 	.word	0x2000011f
 8009d90:	20000120 	.word	0x20000120
 8009d94:	20000121 	.word	0x20000121

08009d98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	b082      	sub	sp, #8
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
 8009da0:	460b      	mov	r3, r1
 8009da2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009da4:	4b3a      	ldr	r3, [pc, #232]	; (8009e90 <USBD_CDC_DeInit+0xf8>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f002 fa87 	bl	800c2be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009db0:	4b37      	ldr	r3, [pc, #220]	; (8009e90 <USBD_CDC_DeInit+0xf8>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f003 020f 	and.w	r2, r3, #15
 8009db8:	6879      	ldr	r1, [r7, #4]
 8009dba:	4613      	mov	r3, r2
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	4413      	add	r3, r2
 8009dc0:	009b      	lsls	r3, r3, #2
 8009dc2:	440b      	add	r3, r1
 8009dc4:	3324      	adds	r3, #36	; 0x24
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009dca:	4b32      	ldr	r3, [pc, #200]	; (8009e94 <USBD_CDC_DeInit+0xfc>)
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f002 fa74 	bl	800c2be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009dd6:	4b2f      	ldr	r3, [pc, #188]	; (8009e94 <USBD_CDC_DeInit+0xfc>)
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	f003 020f 	and.w	r2, r3, #15
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	009b      	lsls	r3, r3, #2
 8009de8:	440b      	add	r3, r1
 8009dea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009dee:	2200      	movs	r2, #0
 8009df0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009df2:	4b29      	ldr	r3, [pc, #164]	; (8009e98 <USBD_CDC_DeInit+0x100>)
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f002 fa60 	bl	800c2be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009dfe:	4b26      	ldr	r3, [pc, #152]	; (8009e98 <USBD_CDC_DeInit+0x100>)
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	f003 020f 	and.w	r2, r3, #15
 8009e06:	6879      	ldr	r1, [r7, #4]
 8009e08:	4613      	mov	r3, r2
 8009e0a:	009b      	lsls	r3, r3, #2
 8009e0c:	4413      	add	r3, r2
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	440b      	add	r3, r1
 8009e12:	3324      	adds	r3, #36	; 0x24
 8009e14:	2200      	movs	r2, #0
 8009e16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009e18:	4b1f      	ldr	r3, [pc, #124]	; (8009e98 <USBD_CDC_DeInit+0x100>)
 8009e1a:	781b      	ldrb	r3, [r3, #0]
 8009e1c:	f003 020f 	and.w	r2, r3, #15
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	4613      	mov	r3, r2
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	4413      	add	r3, r2
 8009e28:	009b      	lsls	r3, r3, #2
 8009e2a:	440b      	add	r3, r1
 8009e2c:	3326      	adds	r3, #38	; 0x26
 8009e2e:	2200      	movs	r2, #0
 8009e30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	32b0      	adds	r2, #176	; 0xb0
 8009e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01f      	beq.n	8009e84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009e4a:	687a      	ldr	r2, [r7, #4]
 8009e4c:	33b0      	adds	r3, #176	; 0xb0
 8009e4e:	009b      	lsls	r3, r3, #2
 8009e50:	4413      	add	r3, r2
 8009e52:	685b      	ldr	r3, [r3, #4]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	32b0      	adds	r2, #176	; 0xb0
 8009e62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e66:	4618      	mov	r0, r3
 8009e68:	f002 fbae 	bl	800c5c8 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	32b0      	adds	r2, #176	; 0xb0
 8009e76:	2100      	movs	r1, #0
 8009e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009e84:	2300      	movs	r3, #0
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	3708      	adds	r7, #8
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	bd80      	pop	{r7, pc}
 8009e8e:	bf00      	nop
 8009e90:	2000011f 	.word	0x2000011f
 8009e94:	20000120 	.word	0x20000120
 8009e98:	20000121 	.word	0x20000121

08009e9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	32b0      	adds	r2, #176	; 0xb0
 8009eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009eb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009ec2:	693b      	ldr	r3, [r7, #16]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d101      	bne.n	8009ecc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e0bf      	b.n	800a04c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	781b      	ldrb	r3, [r3, #0]
 8009ed0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d050      	beq.n	8009f7a <USBD_CDC_Setup+0xde>
 8009ed8:	2b20      	cmp	r3, #32
 8009eda:	f040 80af 	bne.w	800a03c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009ede:	683b      	ldr	r3, [r7, #0]
 8009ee0:	88db      	ldrh	r3, [r3, #6]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d03a      	beq.n	8009f5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	b25b      	sxtb	r3, r3
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	da1b      	bge.n	8009f28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	33b0      	adds	r3, #176	; 0xb0
 8009efa:	009b      	lsls	r3, r3, #2
 8009efc:	4413      	add	r3, r2
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	689b      	ldr	r3, [r3, #8]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009f06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f08:	683a      	ldr	r2, [r7, #0]
 8009f0a:	88d2      	ldrh	r2, [r2, #6]
 8009f0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009f0e:	683b      	ldr	r3, [r7, #0]
 8009f10:	88db      	ldrh	r3, [r3, #6]
 8009f12:	2b07      	cmp	r3, #7
 8009f14:	bf28      	it	cs
 8009f16:	2307      	movcs	r3, #7
 8009f18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	89fa      	ldrh	r2, [r7, #14]
 8009f1e:	4619      	mov	r1, r3
 8009f20:	6878      	ldr	r0, [r7, #4]
 8009f22:	f001 fd6d 	bl	800ba00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009f26:	e090      	b.n	800a04a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	785a      	ldrb	r2, [r3, #1]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	88db      	ldrh	r3, [r3, #6]
 8009f36:	2b3f      	cmp	r3, #63	; 0x3f
 8009f38:	d803      	bhi.n	8009f42 <USBD_CDC_Setup+0xa6>
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	88db      	ldrh	r3, [r3, #6]
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	e000      	b.n	8009f44 <USBD_CDC_Setup+0xa8>
 8009f42:	2240      	movs	r2, #64	; 0x40
 8009f44:	693b      	ldr	r3, [r7, #16]
 8009f46:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009f4a:	6939      	ldr	r1, [r7, #16]
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8009f52:	461a      	mov	r2, r3
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 fd7f 	bl	800ba58 <USBD_CtlPrepareRx>
      break;
 8009f5a:	e076      	b.n	800a04a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	33b0      	adds	r3, #176	; 0xb0
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	689b      	ldr	r3, [r3, #8]
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	7850      	ldrb	r0, [r2, #1]
 8009f72:	2200      	movs	r2, #0
 8009f74:	6839      	ldr	r1, [r7, #0]
 8009f76:	4798      	blx	r3
      break;
 8009f78:	e067      	b.n	800a04a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	785b      	ldrb	r3, [r3, #1]
 8009f7e:	2b0b      	cmp	r3, #11
 8009f80:	d851      	bhi.n	800a026 <USBD_CDC_Setup+0x18a>
 8009f82:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <USBD_CDC_Setup+0xec>)
 8009f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f88:	08009fb9 	.word	0x08009fb9
 8009f8c:	0800a035 	.word	0x0800a035
 8009f90:	0800a027 	.word	0x0800a027
 8009f94:	0800a027 	.word	0x0800a027
 8009f98:	0800a027 	.word	0x0800a027
 8009f9c:	0800a027 	.word	0x0800a027
 8009fa0:	0800a027 	.word	0x0800a027
 8009fa4:	0800a027 	.word	0x0800a027
 8009fa8:	0800a027 	.word	0x0800a027
 8009fac:	0800a027 	.word	0x0800a027
 8009fb0:	08009fe3 	.word	0x08009fe3
 8009fb4:	0800a00d 	.word	0x0800a00d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fbe:	b2db      	uxtb	r3, r3
 8009fc0:	2b03      	cmp	r3, #3
 8009fc2:	d107      	bne.n	8009fd4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009fc4:	f107 030a 	add.w	r3, r7, #10
 8009fc8:	2202      	movs	r2, #2
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f001 fd17 	bl	800ba00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009fd2:	e032      	b.n	800a03a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009fd4:	6839      	ldr	r1, [r7, #0]
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f001 fca1 	bl	800b91e <USBD_CtlError>
            ret = USBD_FAIL;
 8009fdc:	2303      	movs	r3, #3
 8009fde:	75fb      	strb	r3, [r7, #23]
          break;
 8009fe0:	e02b      	b.n	800a03a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fe8:	b2db      	uxtb	r3, r3
 8009fea:	2b03      	cmp	r3, #3
 8009fec:	d107      	bne.n	8009ffe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009fee:	f107 030d 	add.w	r3, r7, #13
 8009ff2:	2201      	movs	r2, #1
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f001 fd02 	bl	800ba00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ffc:	e01d      	b.n	800a03a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009ffe:	6839      	ldr	r1, [r7, #0]
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f001 fc8c 	bl	800b91e <USBD_CtlError>
            ret = USBD_FAIL;
 800a006:	2303      	movs	r3, #3
 800a008:	75fb      	strb	r3, [r7, #23]
          break;
 800a00a:	e016      	b.n	800a03a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a012:	b2db      	uxtb	r3, r3
 800a014:	2b03      	cmp	r3, #3
 800a016:	d00f      	beq.n	800a038 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a018:	6839      	ldr	r1, [r7, #0]
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f001 fc7f 	bl	800b91e <USBD_CtlError>
            ret = USBD_FAIL;
 800a020:	2303      	movs	r3, #3
 800a022:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a024:	e008      	b.n	800a038 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f001 fc78 	bl	800b91e <USBD_CtlError>
          ret = USBD_FAIL;
 800a02e:	2303      	movs	r3, #3
 800a030:	75fb      	strb	r3, [r7, #23]
          break;
 800a032:	e002      	b.n	800a03a <USBD_CDC_Setup+0x19e>
          break;
 800a034:	bf00      	nop
 800a036:	e008      	b.n	800a04a <USBD_CDC_Setup+0x1ae>
          break;
 800a038:	bf00      	nop
      }
      break;
 800a03a:	e006      	b.n	800a04a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a03c:	6839      	ldr	r1, [r7, #0]
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fc6d 	bl	800b91e <USBD_CtlError>
      ret = USBD_FAIL;
 800a044:	2303      	movs	r3, #3
 800a046:	75fb      	strb	r3, [r7, #23]
      break;
 800a048:	bf00      	nop
  }

  return (uint8_t)ret;
 800a04a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a04c:	4618      	mov	r0, r3
 800a04e:	3718      	adds	r7, #24
 800a050:	46bd      	mov	sp, r7
 800a052:	bd80      	pop	{r7, pc}

0800a054 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a054:	b580      	push	{r7, lr}
 800a056:	b084      	sub	sp, #16
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
 800a05c:	460b      	mov	r3, r1
 800a05e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a066:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	32b0      	adds	r2, #176	; 0xb0
 800a072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e065      	b.n	800a14a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	32b0      	adds	r2, #176	; 0xb0
 800a088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a08c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a08e:	78fb      	ldrb	r3, [r7, #3]
 800a090:	f003 020f 	and.w	r2, r3, #15
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	4613      	mov	r3, r2
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	4413      	add	r3, r2
 800a09c:	009b      	lsls	r3, r3, #2
 800a09e:	440b      	add	r3, r1
 800a0a0:	3318      	adds	r3, #24
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d02f      	beq.n	800a108 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	f003 020f 	and.w	r2, r3, #15
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	009b      	lsls	r3, r3, #2
 800a0b4:	4413      	add	r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	3318      	adds	r3, #24
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	78fb      	ldrb	r3, [r7, #3]
 800a0c0:	f003 010f 	and.w	r1, r3, #15
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	00db      	lsls	r3, r3, #3
 800a0ca:	440b      	add	r3, r1
 800a0cc:	009b      	lsls	r3, r3, #2
 800a0ce:	4403      	add	r3, r0
 800a0d0:	3348      	adds	r3, #72	; 0x48
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	fbb2 f1f3 	udiv	r1, r2, r3
 800a0d8:	fb01 f303 	mul.w	r3, r1, r3
 800a0dc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d112      	bne.n	800a108 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	f003 020f 	and.w	r2, r3, #15
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	009b      	lsls	r3, r3, #2
 800a0ee:	4413      	add	r3, r2
 800a0f0:	009b      	lsls	r3, r3, #2
 800a0f2:	440b      	add	r3, r1
 800a0f4:	3318      	adds	r3, #24
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a0fa:	78f9      	ldrb	r1, [r7, #3]
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f002 f984 	bl	800c40e <USBD_LL_Transmit>
 800a106:	e01f      	b.n	800a148 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	2200      	movs	r2, #0
 800a10c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	33b0      	adds	r3, #176	; 0xb0
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d010      	beq.n	800a148 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a12c:	687a      	ldr	r2, [r7, #4]
 800a12e:	33b0      	adds	r3, #176	; 0xb0
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	68ba      	ldr	r2, [r7, #8]
 800a13a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a13e:	68ba      	ldr	r2, [r7, #8]
 800a140:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a144:	78fa      	ldrb	r2, [r7, #3]
 800a146:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a148:	2300      	movs	r3, #0
}
 800a14a:	4618      	mov	r0, r3
 800a14c:	3710      	adds	r7, #16
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}

0800a152 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a152:	b580      	push	{r7, lr}
 800a154:	b084      	sub	sp, #16
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
 800a15a:	460b      	mov	r3, r1
 800a15c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	32b0      	adds	r2, #176	; 0xb0
 800a168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a16c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	32b0      	adds	r2, #176	; 0xb0
 800a178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a180:	2303      	movs	r3, #3
 800a182:	e01a      	b.n	800a1ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a184:	78fb      	ldrb	r3, [r7, #3]
 800a186:	4619      	mov	r1, r3
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f002 f982 	bl	800c492 <USBD_LL_GetRxDataSize>
 800a18e:	4602      	mov	r2, r0
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	33b0      	adds	r3, #176	; 0xb0
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	68db      	ldr	r3, [r3, #12]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a1ae:	68fa      	ldr	r2, [r7, #12]
 800a1b0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a1b4:	4611      	mov	r1, r2
 800a1b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3710      	adds	r7, #16
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}

0800a1c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a1c2:	b580      	push	{r7, lr}
 800a1c4:	b084      	sub	sp, #16
 800a1c6:	af00      	add	r7, sp, #0
 800a1c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	32b0      	adds	r2, #176	; 0xb0
 800a1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d101      	bne.n	800a1e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a1e0:	2303      	movs	r3, #3
 800a1e2:	e025      	b.n	800a230 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a1ea:	687a      	ldr	r2, [r7, #4]
 800a1ec:	33b0      	adds	r3, #176	; 0xb0
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d01a      	beq.n	800a22e <USBD_CDC_EP0_RxReady+0x6c>
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a1fe:	2bff      	cmp	r3, #255	; 0xff
 800a200:	d015      	beq.n	800a22e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	33b0      	adds	r3, #176	; 0xb0
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	689b      	ldr	r3, [r3, #8]
 800a214:	68fa      	ldr	r2, [r7, #12]
 800a216:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a21a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a222:	b292      	uxth	r2, r2
 800a224:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	22ff      	movs	r2, #255	; 0xff
 800a22a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b086      	sub	sp, #24
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a240:	2182      	movs	r1, #130	; 0x82
 800a242:	4818      	ldr	r0, [pc, #96]	; (800a2a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a244:	f000 fd09 	bl	800ac5a <USBD_GetEpDesc>
 800a248:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a24a:	2101      	movs	r1, #1
 800a24c:	4815      	ldr	r0, [pc, #84]	; (800a2a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a24e:	f000 fd04 	bl	800ac5a <USBD_GetEpDesc>
 800a252:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a254:	2181      	movs	r1, #129	; 0x81
 800a256:	4813      	ldr	r0, [pc, #76]	; (800a2a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a258:	f000 fcff 	bl	800ac5a <USBD_GetEpDesc>
 800a25c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	2210      	movs	r2, #16
 800a268:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a26a:	693b      	ldr	r3, [r7, #16]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d006      	beq.n	800a27e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	2200      	movs	r2, #0
 800a274:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a278:	711a      	strb	r2, [r3, #4]
 800a27a:	2200      	movs	r2, #0
 800a27c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d006      	beq.n	800a292 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a28c:	711a      	strb	r2, [r3, #4]
 800a28e:	2200      	movs	r2, #0
 800a290:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2243      	movs	r2, #67	; 0x43
 800a296:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a298:	4b02      	ldr	r3, [pc, #8]	; (800a2a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3718      	adds	r7, #24
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	200000dc 	.word	0x200000dc

0800a2a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a2b0:	2182      	movs	r1, #130	; 0x82
 800a2b2:	4818      	ldr	r0, [pc, #96]	; (800a314 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2b4:	f000 fcd1 	bl	800ac5a <USBD_GetEpDesc>
 800a2b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a2ba:	2101      	movs	r1, #1
 800a2bc:	4815      	ldr	r0, [pc, #84]	; (800a314 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2be:	f000 fccc 	bl	800ac5a <USBD_GetEpDesc>
 800a2c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a2c4:	2181      	movs	r1, #129	; 0x81
 800a2c6:	4813      	ldr	r0, [pc, #76]	; (800a314 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a2c8:	f000 fcc7 	bl	800ac5a <USBD_GetEpDesc>
 800a2cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a2ce:	697b      	ldr	r3, [r7, #20]
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2210      	movs	r2, #16
 800a2d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d006      	beq.n	800a2ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2e0:	693b      	ldr	r3, [r7, #16]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	711a      	strb	r2, [r3, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	f042 0202 	orr.w	r2, r2, #2
 800a2ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d006      	beq.n	800a302 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	711a      	strb	r2, [r3, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f042 0202 	orr.w	r2, r2, #2
 800a300:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2243      	movs	r2, #67	; 0x43
 800a306:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a308:	4b02      	ldr	r3, [pc, #8]	; (800a314 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3718      	adds	r7, #24
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}
 800a312:	bf00      	nop
 800a314:	200000dc 	.word	0x200000dc

0800a318 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b086      	sub	sp, #24
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a320:	2182      	movs	r1, #130	; 0x82
 800a322:	4818      	ldr	r0, [pc, #96]	; (800a384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a324:	f000 fc99 	bl	800ac5a <USBD_GetEpDesc>
 800a328:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a32a:	2101      	movs	r1, #1
 800a32c:	4815      	ldr	r0, [pc, #84]	; (800a384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a32e:	f000 fc94 	bl	800ac5a <USBD_GetEpDesc>
 800a332:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a334:	2181      	movs	r1, #129	; 0x81
 800a336:	4813      	ldr	r0, [pc, #76]	; (800a384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a338:	f000 fc8f 	bl	800ac5a <USBD_GetEpDesc>
 800a33c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a33e:	697b      	ldr	r3, [r7, #20]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a344:	697b      	ldr	r3, [r7, #20]
 800a346:	2210      	movs	r2, #16
 800a348:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d006      	beq.n	800a35e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	2200      	movs	r2, #0
 800a354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a358:	711a      	strb	r2, [r3, #4]
 800a35a:	2200      	movs	r2, #0
 800a35c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d006      	beq.n	800a372 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	2200      	movs	r2, #0
 800a368:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a36c:	711a      	strb	r2, [r3, #4]
 800a36e:	2200      	movs	r2, #0
 800a370:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2243      	movs	r2, #67	; 0x43
 800a376:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a378:	4b02      	ldr	r3, [pc, #8]	; (800a384 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a37a:	4618      	mov	r0, r3
 800a37c:	3718      	adds	r7, #24
 800a37e:	46bd      	mov	sp, r7
 800a380:	bd80      	pop	{r7, pc}
 800a382:	bf00      	nop
 800a384:	200000dc 	.word	0x200000dc

0800a388 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a388:	b480      	push	{r7}
 800a38a:	b083      	sub	sp, #12
 800a38c:	af00      	add	r7, sp, #0
 800a38e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	220a      	movs	r2, #10
 800a394:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a396:	4b03      	ldr	r3, [pc, #12]	; (800a3a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a398:	4618      	mov	r0, r3
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr
 800a3a4:	20000098 	.word	0x20000098

0800a3a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a3b8:	2303      	movs	r3, #3
 800a3ba:	e009      	b.n	800a3d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a3c2:	687a      	ldr	r2, [r7, #4]
 800a3c4:	33b0      	adds	r3, #176	; 0xb0
 800a3c6:	009b      	lsls	r3, r3, #2
 800a3c8:	4413      	add	r3, r2
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a3ce:	2300      	movs	r3, #0
}
 800a3d0:	4618      	mov	r0, r3
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b087      	sub	sp, #28
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	60f8      	str	r0, [r7, #12]
 800a3e4:	60b9      	str	r1, [r7, #8]
 800a3e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	32b0      	adds	r2, #176	; 0xb0
 800a3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a3f8:	697b      	ldr	r3, [r7, #20]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e008      	b.n	800a414 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	68ba      	ldr	r2, [r7, #8]
 800a406:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	687a      	ldr	r2, [r7, #4]
 800a40e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800a412:	2300      	movs	r3, #0
}
 800a414:	4618      	mov	r0, r3
 800a416:	371c      	adds	r7, #28
 800a418:	46bd      	mov	sp, r7
 800a41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41e:	4770      	bx	lr

0800a420 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a420:	b480      	push	{r7}
 800a422:	b085      	sub	sp, #20
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
 800a428:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	32b0      	adds	r2, #176	; 0xb0
 800a434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a438:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d101      	bne.n	800a444 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a440:	2303      	movs	r3, #3
 800a442:	e004      	b.n	800a44e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	683a      	ldr	r2, [r7, #0]
 800a448:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800a44c:	2300      	movs	r3, #0
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3714      	adds	r7, #20
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	32b0      	adds	r2, #176	; 0xb0
 800a46e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a472:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	32b0      	adds	r2, #176	; 0xb0
 800a47e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a482:	2b00      	cmp	r3, #0
 800a484:	d101      	bne.n	800a48a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a486:	2303      	movs	r3, #3
 800a488:	e018      	b.n	800a4bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	7c1b      	ldrb	r3, [r3, #16]
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d10a      	bne.n	800a4a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a492:	4b0c      	ldr	r3, [pc, #48]	; (800a4c4 <USBD_CDC_ReceivePacket+0x68>)
 800a494:	7819      	ldrb	r1, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a49c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f001 ffd5 	bl	800c450 <USBD_LL_PrepareReceive>
 800a4a6:	e008      	b.n	800a4ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4a8:	4b06      	ldr	r3, [pc, #24]	; (800a4c4 <USBD_CDC_ReceivePacket+0x68>)
 800a4aa:	7819      	ldrb	r1, [r3, #0]
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4b2:	2340      	movs	r3, #64	; 0x40
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f001 ffcb 	bl	800c450 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	20000120 	.word	0x20000120

0800a4c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b086      	sub	sp, #24
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60f8      	str	r0, [r7, #12]
 800a4d0:	60b9      	str	r1, [r7, #8]
 800a4d2:	4613      	mov	r3, r2
 800a4d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d101      	bne.n	800a4e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a4dc:	2303      	movs	r3, #3
 800a4de:	e01f      	b.n	800a520 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	2200      	movs	r2, #0
 800a4e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a4f8:	68bb      	ldr	r3, [r7, #8]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d003      	beq.n	800a506 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	68ba      	ldr	r2, [r7, #8]
 800a502:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	79fa      	ldrb	r2, [r7, #7]
 800a512:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a514:	68f8      	ldr	r0, [r7, #12]
 800a516:	f001 fe3f 	bl	800c198 <USBD_LL_Init>
 800a51a:	4603      	mov	r3, r0
 800a51c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a520:	4618      	mov	r0, r3
 800a522:	3718      	adds	r7, #24
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a532:	2300      	movs	r3, #0
 800a534:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d101      	bne.n	800a540 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a53c:	2303      	movs	r3, #3
 800a53e:	e025      	b.n	800a58c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	683a      	ldr	r2, [r7, #0]
 800a544:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	32ae      	adds	r2, #174	; 0xae
 800a552:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d00f      	beq.n	800a57c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	32ae      	adds	r2, #174	; 0xae
 800a566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a56a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a56c:	f107 020e 	add.w	r2, r7, #14
 800a570:	4610      	mov	r0, r2
 800a572:	4798      	blx	r3
 800a574:	4602      	mov	r2, r0
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3710      	adds	r7, #16
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b082      	sub	sp, #8
 800a598:	af00      	add	r7, sp, #0
 800a59a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f001 fe4d 	bl	800c23c <USBD_LL_Start>
 800a5a2:	4603      	mov	r3, r0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a5b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	370c      	adds	r7, #12
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c0:	4770      	bx	lr

0800a5c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5c2:	b580      	push	{r7, lr}
 800a5c4:	b084      	sub	sp, #16
 800a5c6:	af00      	add	r7, sp, #0
 800a5c8:	6078      	str	r0, [r7, #4]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d009      	beq.n	800a5f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	78fa      	ldrb	r2, [r7, #3]
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	6878      	ldr	r0, [r7, #4]
 800a5ea:	4798      	blx	r3
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a5f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b084      	sub	sp, #16
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
 800a602:	460b      	mov	r3, r1
 800a604:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a606:	2300      	movs	r3, #0
 800a608:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	78fa      	ldrb	r2, [r7, #3]
 800a614:	4611      	mov	r1, r2
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	4798      	blx	r3
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d001      	beq.n	800a624 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a620:	2303      	movs	r3, #3
 800a622:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a624:	7bfb      	ldrb	r3, [r7, #15]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	4618      	mov	r0, r3
 800a642:	f001 f932 	bl	800b8aa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2201      	movs	r2, #1
 800a64a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a654:	461a      	mov	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a662:	f003 031f 	and.w	r3, r3, #31
 800a666:	2b02      	cmp	r3, #2
 800a668:	d01a      	beq.n	800a6a0 <USBD_LL_SetupStage+0x72>
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d822      	bhi.n	800a6b4 <USBD_LL_SetupStage+0x86>
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <USBD_LL_SetupStage+0x4a>
 800a672:	2b01      	cmp	r3, #1
 800a674:	d00a      	beq.n	800a68c <USBD_LL_SetupStage+0x5e>
 800a676:	e01d      	b.n	800a6b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a67e:	4619      	mov	r1, r3
 800a680:	6878      	ldr	r0, [r7, #4]
 800a682:	f000 fb5f 	bl	800ad44 <USBD_StdDevReq>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]
      break;
 800a68a:	e020      	b.n	800a6ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fbc7 	bl	800ae28 <USBD_StdItfReq>
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]
      break;
 800a69e:	e016      	b.n	800a6ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a6a6:	4619      	mov	r1, r3
 800a6a8:	6878      	ldr	r0, [r7, #4]
 800a6aa:	f000 fc29 	bl	800af00 <USBD_StdEPReq>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	73fb      	strb	r3, [r7, #15]
      break;
 800a6b2:	e00c      	b.n	800a6ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a6ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	4619      	mov	r1, r3
 800a6c2:	6878      	ldr	r0, [r7, #4]
 800a6c4:	f001 fe1a 	bl	800c2fc <USBD_LL_StallEP>
 800a6c8:	4603      	mov	r3, r0
 800a6ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a6cc:	bf00      	nop
  }

  return ret;
 800a6ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	3710      	adds	r7, #16
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b086      	sub	sp, #24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a6ea:	7afb      	ldrb	r3, [r7, #11]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d16e      	bne.n	800a7ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a6f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a6fe:	2b03      	cmp	r3, #3
 800a700:	f040 8098 	bne.w	800a834 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	689a      	ldr	r2, [r3, #8]
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	d913      	bls.n	800a738 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	689a      	ldr	r2, [r3, #8]
 800a714:	693b      	ldr	r3, [r7, #16]
 800a716:	68db      	ldr	r3, [r3, #12]
 800a718:	1ad2      	subs	r2, r2, r3
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	68da      	ldr	r2, [r3, #12]
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	4293      	cmp	r3, r2
 800a728:	bf28      	it	cs
 800a72a:	4613      	movcs	r3, r2
 800a72c:	461a      	mov	r2, r3
 800a72e:	6879      	ldr	r1, [r7, #4]
 800a730:	68f8      	ldr	r0, [r7, #12]
 800a732:	f001 f9ae 	bl	800ba92 <USBD_CtlContinueRx>
 800a736:	e07d      	b.n	800a834 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a73e:	f003 031f 	and.w	r3, r3, #31
 800a742:	2b02      	cmp	r3, #2
 800a744:	d014      	beq.n	800a770 <USBD_LL_DataOutStage+0x98>
 800a746:	2b02      	cmp	r3, #2
 800a748:	d81d      	bhi.n	800a786 <USBD_LL_DataOutStage+0xae>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d002      	beq.n	800a754 <USBD_LL_DataOutStage+0x7c>
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d003      	beq.n	800a75a <USBD_LL_DataOutStage+0x82>
 800a752:	e018      	b.n	800a786 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a754:	2300      	movs	r3, #0
 800a756:	75bb      	strb	r3, [r7, #22]
            break;
 800a758:	e018      	b.n	800a78c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a760:	b2db      	uxtb	r3, r3
 800a762:	4619      	mov	r1, r3
 800a764:	68f8      	ldr	r0, [r7, #12]
 800a766:	f000 fa5e 	bl	800ac26 <USBD_CoreFindIF>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75bb      	strb	r3, [r7, #22]
            break;
 800a76e:	e00d      	b.n	800a78c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800a776:	b2db      	uxtb	r3, r3
 800a778:	4619      	mov	r1, r3
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 fa60 	bl	800ac40 <USBD_CoreFindEP>
 800a780:	4603      	mov	r3, r0
 800a782:	75bb      	strb	r3, [r7, #22]
            break;
 800a784:	e002      	b.n	800a78c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a786:	2300      	movs	r3, #0
 800a788:	75bb      	strb	r3, [r7, #22]
            break;
 800a78a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a78c:	7dbb      	ldrb	r3, [r7, #22]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d119      	bne.n	800a7c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d113      	bne.n	800a7c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a79e:	7dba      	ldrb	r2, [r7, #22]
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	32ae      	adds	r2, #174	; 0xae
 800a7a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a8:	691b      	ldr	r3, [r3, #16]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d00b      	beq.n	800a7c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800a7ae:	7dba      	ldrb	r2, [r7, #22]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a7b6:	7dba      	ldrb	r2, [r7, #22]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	32ae      	adds	r2, #174	; 0xae
 800a7bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c0:	691b      	ldr	r3, [r3, #16]
 800a7c2:	68f8      	ldr	r0, [r7, #12]
 800a7c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f001 f974 	bl	800bab4 <USBD_CtlSendStatus>
 800a7cc:	e032      	b.n	800a834 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a7ce:	7afb      	ldrb	r3, [r7, #11]
 800a7d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 fa31 	bl	800ac40 <USBD_CoreFindEP>
 800a7de:	4603      	mov	r3, r0
 800a7e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a7e2:	7dbb      	ldrb	r3, [r7, #22]
 800a7e4:	2bff      	cmp	r3, #255	; 0xff
 800a7e6:	d025      	beq.n	800a834 <USBD_LL_DataOutStage+0x15c>
 800a7e8:	7dbb      	ldrb	r3, [r7, #22]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d122      	bne.n	800a834 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7f4:	b2db      	uxtb	r3, r3
 800a7f6:	2b03      	cmp	r3, #3
 800a7f8:	d117      	bne.n	800a82a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a7fa:	7dba      	ldrb	r2, [r7, #22]
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	32ae      	adds	r2, #174	; 0xae
 800a800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a804:	699b      	ldr	r3, [r3, #24]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d00f      	beq.n	800a82a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a80a:	7dba      	ldrb	r2, [r7, #22]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a812:	7dba      	ldrb	r2, [r7, #22]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	32ae      	adds	r2, #174	; 0xae
 800a818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a81c:	699b      	ldr	r3, [r3, #24]
 800a81e:	7afa      	ldrb	r2, [r7, #11]
 800a820:	4611      	mov	r1, r2
 800a822:	68f8      	ldr	r0, [r7, #12]
 800a824:	4798      	blx	r3
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a830:	7dfb      	ldrb	r3, [r7, #23]
 800a832:	e000      	b.n	800a836 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3718      	adds	r7, #24
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}

0800a83e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a83e:	b580      	push	{r7, lr}
 800a840:	b086      	sub	sp, #24
 800a842:	af00      	add	r7, sp, #0
 800a844:	60f8      	str	r0, [r7, #12]
 800a846:	460b      	mov	r3, r1
 800a848:	607a      	str	r2, [r7, #4]
 800a84a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a84c:	7afb      	ldrb	r3, [r7, #11]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d16f      	bne.n	800a932 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	3314      	adds	r3, #20
 800a856:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a85e:	2b02      	cmp	r3, #2
 800a860:	d15a      	bne.n	800a918 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a862:	693b      	ldr	r3, [r7, #16]
 800a864:	689a      	ldr	r2, [r3, #8]
 800a866:	693b      	ldr	r3, [r7, #16]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d914      	bls.n	800a898 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	689a      	ldr	r2, [r3, #8]
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	1ad2      	subs	r2, r2, r3
 800a878:	693b      	ldr	r3, [r7, #16]
 800a87a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	689b      	ldr	r3, [r3, #8]
 800a880:	461a      	mov	r2, r3
 800a882:	6879      	ldr	r1, [r7, #4]
 800a884:	68f8      	ldr	r0, [r7, #12]
 800a886:	f001 f8d6 	bl	800ba36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a88a:	2300      	movs	r3, #0
 800a88c:	2200      	movs	r2, #0
 800a88e:	2100      	movs	r1, #0
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f001 fddd 	bl	800c450 <USBD_LL_PrepareReceive>
 800a896:	e03f      	b.n	800a918 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	68da      	ldr	r2, [r3, #12]
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	429a      	cmp	r2, r3
 800a8a2:	d11c      	bne.n	800a8de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	685a      	ldr	r2, [r3, #4]
 800a8a8:	693b      	ldr	r3, [r7, #16]
 800a8aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a8ac:	429a      	cmp	r2, r3
 800a8ae:	d316      	bcc.n	800a8de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	685a      	ldr	r2, [r3, #4]
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d20f      	bcs.n	800a8de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a8be:	2200      	movs	r2, #0
 800a8c0:	2100      	movs	r1, #0
 800a8c2:	68f8      	ldr	r0, [r7, #12]
 800a8c4:	f001 f8b7 	bl	800ba36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	68f8      	ldr	r0, [r7, #12]
 800a8d8:	f001 fdba 	bl	800c450 <USBD_LL_PrepareReceive>
 800a8dc:	e01c      	b.n	800a918 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8e4:	b2db      	uxtb	r3, r3
 800a8e6:	2b03      	cmp	r3, #3
 800a8e8:	d10f      	bne.n	800a90a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d009      	beq.n	800a90a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a904:	68db      	ldr	r3, [r3, #12]
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a90a:	2180      	movs	r1, #128	; 0x80
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f001 fcf5 	bl	800c2fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f001 f8e1 	bl	800bada <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d03a      	beq.n	800a998 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a922:	68f8      	ldr	r0, [r7, #12]
 800a924:	f7ff fe42 	bl	800a5ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a930:	e032      	b.n	800a998 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a932:	7afb      	ldrb	r3, [r7, #11]
 800a934:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	4619      	mov	r1, r3
 800a93c:	68f8      	ldr	r0, [r7, #12]
 800a93e:	f000 f97f 	bl	800ac40 <USBD_CoreFindEP>
 800a942:	4603      	mov	r3, r0
 800a944:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	2bff      	cmp	r3, #255	; 0xff
 800a94a:	d025      	beq.n	800a998 <USBD_LL_DataInStage+0x15a>
 800a94c:	7dfb      	ldrb	r3, [r7, #23]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d122      	bne.n	800a998 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b03      	cmp	r3, #3
 800a95c:	d11c      	bne.n	800a998 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a95e:	7dfa      	ldrb	r2, [r7, #23]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	32ae      	adds	r2, #174	; 0xae
 800a964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a968:	695b      	ldr	r3, [r3, #20]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d014      	beq.n	800a998 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a96e:	7dfa      	ldrb	r2, [r7, #23]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a976:	7dfa      	ldrb	r2, [r7, #23]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	32ae      	adds	r2, #174	; 0xae
 800a97c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a980:	695b      	ldr	r3, [r3, #20]
 800a982:	7afa      	ldrb	r2, [r7, #11]
 800a984:	4611      	mov	r1, r2
 800a986:	68f8      	ldr	r0, [r7, #12]
 800a988:	4798      	blx	r3
 800a98a:	4603      	mov	r3, r0
 800a98c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a98e:	7dbb      	ldrb	r3, [r7, #22]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d001      	beq.n	800a998 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a994:	7dbb      	ldrb	r3, [r7, #22]
 800a996:	e000      	b.n	800a99a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a998:	2300      	movs	r3, #0
}
 800a99a:	4618      	mov	r0, r3
 800a99c:	3718      	adds	r7, #24
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	bd80      	pop	{r7, pc}

0800a9a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a9a2:	b580      	push	{r7, lr}
 800a9a4:	b084      	sub	sp, #16
 800a9a6:	af00      	add	r7, sp, #0
 800a9a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	2201      	movs	r2, #1
 800a9b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d014      	beq.n	800aa08 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9e4:	685b      	ldr	r3, [r3, #4]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d00e      	beq.n	800aa08 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	687a      	ldr	r2, [r7, #4]
 800a9f4:	6852      	ldr	r2, [r2, #4]
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	4798      	blx	r3
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d001      	beq.n	800aa08 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800aa04:	2303      	movs	r3, #3
 800aa06:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa08:	2340      	movs	r3, #64	; 0x40
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	2100      	movs	r1, #0
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fc2f 	bl	800c272 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2201      	movs	r2, #1
 800aa18:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2240      	movs	r2, #64	; 0x40
 800aa20:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800aa24:	2340      	movs	r3, #64	; 0x40
 800aa26:	2200      	movs	r2, #0
 800aa28:	2180      	movs	r1, #128	; 0x80
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f001 fc21 	bl	800c272 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2240      	movs	r2, #64	; 0x40
 800aa3a:	621a      	str	r2, [r3, #32]

  return ret;
 800aa3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aa46:	b480      	push	{r7}
 800aa48:	b083      	sub	sp, #12
 800aa4a:	af00      	add	r7, sp, #0
 800aa4c:	6078      	str	r0, [r7, #4]
 800aa4e:	460b      	mov	r3, r1
 800aa50:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	78fa      	ldrb	r2, [r7, #3]
 800aa56:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	370c      	adds	r7, #12
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr

0800aa66 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800aa66:	b480      	push	{r7}
 800aa68:	b083      	sub	sp, #12
 800aa6a:	af00      	add	r7, sp, #0
 800aa6c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	2204      	movs	r2, #4
 800aa80:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	370c      	adds	r7, #12
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa90:	4770      	bx	lr

0800aa92 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800aa92:	b480      	push	{r7}
 800aa94:	b083      	sub	sp, #12
 800aa96:	af00      	add	r7, sp, #0
 800aa98:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	2b04      	cmp	r3, #4
 800aaa4:	d106      	bne.n	800aab4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800aaac:	b2da      	uxtb	r2, r3
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800aab4:	2300      	movs	r3, #0
}
 800aab6:	4618      	mov	r0, r3
 800aab8:	370c      	adds	r7, #12
 800aaba:	46bd      	mov	sp, r7
 800aabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac0:	4770      	bx	lr

0800aac2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800aac2:	b580      	push	{r7, lr}
 800aac4:	b082      	sub	sp, #8
 800aac6:	af00      	add	r7, sp, #0
 800aac8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aad0:	b2db      	uxtb	r3, r3
 800aad2:	2b03      	cmp	r3, #3
 800aad4:	d110      	bne.n	800aaf8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00b      	beq.n	800aaf8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d005      	beq.n	800aaf8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3708      	adds	r7, #8
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b082      	sub	sp, #8
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	32ae      	adds	r2, #174	; 0xae
 800ab18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d101      	bne.n	800ab24 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab20:	2303      	movs	r3, #3
 800ab22:	e01c      	b.n	800ab5e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab2a:	b2db      	uxtb	r3, r3
 800ab2c:	2b03      	cmp	r3, #3
 800ab2e:	d115      	bne.n	800ab5c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	32ae      	adds	r2, #174	; 0xae
 800ab3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab3e:	6a1b      	ldr	r3, [r3, #32]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d00b      	beq.n	800ab5c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	32ae      	adds	r2, #174	; 0xae
 800ab4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab52:	6a1b      	ldr	r3, [r3, #32]
 800ab54:	78fa      	ldrb	r2, [r7, #3]
 800ab56:	4611      	mov	r1, r2
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ab5c:	2300      	movs	r3, #0
}
 800ab5e:	4618      	mov	r0, r3
 800ab60:	3708      	adds	r7, #8
 800ab62:	46bd      	mov	sp, r7
 800ab64:	bd80      	pop	{r7, pc}

0800ab66 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ab66:	b580      	push	{r7, lr}
 800ab68:	b082      	sub	sp, #8
 800ab6a:	af00      	add	r7, sp, #0
 800ab6c:	6078      	str	r0, [r7, #4]
 800ab6e:	460b      	mov	r3, r1
 800ab70:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	32ae      	adds	r2, #174	; 0xae
 800ab7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d101      	bne.n	800ab88 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ab84:	2303      	movs	r3, #3
 800ab86:	e01c      	b.n	800abc2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab8e:	b2db      	uxtb	r3, r3
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d115      	bne.n	800abc0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32ae      	adds	r2, #174	; 0xae
 800ab9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	32ae      	adds	r2, #174	; 0xae
 800abb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb8:	78fa      	ldrb	r2, [r7, #3]
 800abba:	4611      	mov	r1, r2
 800abbc:	6878      	ldr	r0, [r7, #4]
 800abbe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800abc0:	2300      	movs	r3, #0
}
 800abc2:	4618      	mov	r0, r3
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}

0800abca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	370c      	adds	r7, #12
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800abe8:	2300      	movs	r3, #0
 800abea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d00e      	beq.n	800ac1c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	687a      	ldr	r2, [r7, #4]
 800ac08:	6852      	ldr	r2, [r2, #4]
 800ac0a:	b2d2      	uxtb	r2, r2
 800ac0c:	4611      	mov	r1, r2
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	4798      	blx	r3
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ac18:	2303      	movs	r3, #3
 800ac1a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ac1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac1e:	4618      	mov	r0, r3
 800ac20:	3710      	adds	r7, #16
 800ac22:	46bd      	mov	sp, r7
 800ac24:	bd80      	pop	{r7, pc}

0800ac26 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b083      	sub	sp, #12
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	6078      	str	r0, [r7, #4]
 800ac2e:	460b      	mov	r3, r1
 800ac30:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac32:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	460b      	mov	r3, r1
 800ac4a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ac4c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ac4e:	4618      	mov	r0, r3
 800ac50:	370c      	adds	r7, #12
 800ac52:	46bd      	mov	sp, r7
 800ac54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac58:	4770      	bx	lr

0800ac5a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ac5a:	b580      	push	{r7, lr}
 800ac5c:	b086      	sub	sp, #24
 800ac5e:	af00      	add	r7, sp, #0
 800ac60:	6078      	str	r0, [r7, #4]
 800ac62:	460b      	mov	r3, r1
 800ac64:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	885b      	ldrh	r3, [r3, #2]
 800ac76:	b29a      	uxth	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	781b      	ldrb	r3, [r3, #0]
 800ac7c:	b29b      	uxth	r3, r3
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	d920      	bls.n	800acc4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	781b      	ldrb	r3, [r3, #0]
 800ac86:	b29b      	uxth	r3, r3
 800ac88:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ac8a:	e013      	b.n	800acb4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ac8c:	f107 030a 	add.w	r3, r7, #10
 800ac90:	4619      	mov	r1, r3
 800ac92:	6978      	ldr	r0, [r7, #20]
 800ac94:	f000 f81b 	bl	800acce <USBD_GetNextDesc>
 800ac98:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	785b      	ldrb	r3, [r3, #1]
 800ac9e:	2b05      	cmp	r3, #5
 800aca0:	d108      	bne.n	800acb4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aca6:	693b      	ldr	r3, [r7, #16]
 800aca8:	789b      	ldrb	r3, [r3, #2]
 800acaa:	78fa      	ldrb	r2, [r7, #3]
 800acac:	429a      	cmp	r2, r3
 800acae:	d008      	beq.n	800acc2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800acb0:	2300      	movs	r3, #0
 800acb2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	885b      	ldrh	r3, [r3, #2]
 800acb8:	b29a      	uxth	r2, r3
 800acba:	897b      	ldrh	r3, [r7, #10]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d8e5      	bhi.n	800ac8c <USBD_GetEpDesc+0x32>
 800acc0:	e000      	b.n	800acc4 <USBD_GetEpDesc+0x6a>
          break;
 800acc2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800acc4:	693b      	ldr	r3, [r7, #16]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3718      	adds	r7, #24
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800acce:	b480      	push	{r7}
 800acd0:	b085      	sub	sp, #20
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
 800acd6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	881a      	ldrh	r2, [r3, #0]
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	781b      	ldrb	r3, [r3, #0]
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4413      	add	r3, r2
 800ace8:	b29a      	uxth	r2, r3
 800acea:	683b      	ldr	r3, [r7, #0]
 800acec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	781b      	ldrb	r3, [r3, #0]
 800acf2:	461a      	mov	r2, r3
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4413      	add	r3, r2
 800acf8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800acfa:	68fb      	ldr	r3, [r7, #12]
}
 800acfc:	4618      	mov	r0, r3
 800acfe:	3714      	adds	r7, #20
 800ad00:	46bd      	mov	sp, r7
 800ad02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad06:	4770      	bx	lr

0800ad08 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b087      	sub	sp, #28
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	3301      	adds	r3, #1
 800ad1e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	781b      	ldrb	r3, [r3, #0]
 800ad24:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ad26:	8a3b      	ldrh	r3, [r7, #16]
 800ad28:	021b      	lsls	r3, r3, #8
 800ad2a:	b21a      	sxth	r2, r3
 800ad2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ad30:	4313      	orrs	r3, r2
 800ad32:	b21b      	sxth	r3, r3
 800ad34:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ad36:	89fb      	ldrh	r3, [r7, #14]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	371c      	adds	r7, #28
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b084      	sub	sp, #16
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ad5a:	2b40      	cmp	r3, #64	; 0x40
 800ad5c:	d005      	beq.n	800ad6a <USBD_StdDevReq+0x26>
 800ad5e:	2b40      	cmp	r3, #64	; 0x40
 800ad60:	d857      	bhi.n	800ae12 <USBD_StdDevReq+0xce>
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d00f      	beq.n	800ad86 <USBD_StdDevReq+0x42>
 800ad66:	2b20      	cmp	r3, #32
 800ad68:	d153      	bne.n	800ae12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	32ae      	adds	r2, #174	; 0xae
 800ad74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad78:	689b      	ldr	r3, [r3, #8]
 800ad7a:	6839      	ldr	r1, [r7, #0]
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	4798      	blx	r3
 800ad80:	4603      	mov	r3, r0
 800ad82:	73fb      	strb	r3, [r7, #15]
      break;
 800ad84:	e04a      	b.n	800ae1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	785b      	ldrb	r3, [r3, #1]
 800ad8a:	2b09      	cmp	r3, #9
 800ad8c:	d83b      	bhi.n	800ae06 <USBD_StdDevReq+0xc2>
 800ad8e:	a201      	add	r2, pc, #4	; (adr r2, 800ad94 <USBD_StdDevReq+0x50>)
 800ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad94:	0800ade9 	.word	0x0800ade9
 800ad98:	0800adfd 	.word	0x0800adfd
 800ad9c:	0800ae07 	.word	0x0800ae07
 800ada0:	0800adf3 	.word	0x0800adf3
 800ada4:	0800ae07 	.word	0x0800ae07
 800ada8:	0800adc7 	.word	0x0800adc7
 800adac:	0800adbd 	.word	0x0800adbd
 800adb0:	0800ae07 	.word	0x0800ae07
 800adb4:	0800addf 	.word	0x0800addf
 800adb8:	0800add1 	.word	0x0800add1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800adbc:	6839      	ldr	r1, [r7, #0]
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 fa3c 	bl	800b23c <USBD_GetDescriptor>
          break;
 800adc4:	e024      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800adc6:	6839      	ldr	r1, [r7, #0]
 800adc8:	6878      	ldr	r0, [r7, #4]
 800adca:	f000 fbcb 	bl	800b564 <USBD_SetAddress>
          break;
 800adce:	e01f      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800add0:	6839      	ldr	r1, [r7, #0]
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f000 fc0a 	bl	800b5ec <USBD_SetConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]
          break;
 800addc:	e018      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800adde:	6839      	ldr	r1, [r7, #0]
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fcad 	bl	800b740 <USBD_GetConfig>
          break;
 800ade6:	e013      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ade8:	6839      	ldr	r1, [r7, #0]
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 fcde 	bl	800b7ac <USBD_GetStatus>
          break;
 800adf0:	e00e      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800adf2:	6839      	ldr	r1, [r7, #0]
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fd0d 	bl	800b814 <USBD_SetFeature>
          break;
 800adfa:	e009      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800adfc:	6839      	ldr	r1, [r7, #0]
 800adfe:	6878      	ldr	r0, [r7, #4]
 800ae00:	f000 fd31 	bl	800b866 <USBD_ClrFeature>
          break;
 800ae04:	e004      	b.n	800ae10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ae06:	6839      	ldr	r1, [r7, #0]
 800ae08:	6878      	ldr	r0, [r7, #4]
 800ae0a:	f000 fd88 	bl	800b91e <USBD_CtlError>
          break;
 800ae0e:	bf00      	nop
      }
      break;
 800ae10:	e004      	b.n	800ae1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ae12:	6839      	ldr	r1, [r7, #0]
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fd82 	bl	800b91e <USBD_CtlError>
      break;
 800ae1a:	bf00      	nop
  }

  return ret;
 800ae1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
 800ae26:	bf00      	nop

0800ae28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
 800ae30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	781b      	ldrb	r3, [r3, #0]
 800ae3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ae3e:	2b40      	cmp	r3, #64	; 0x40
 800ae40:	d005      	beq.n	800ae4e <USBD_StdItfReq+0x26>
 800ae42:	2b40      	cmp	r3, #64	; 0x40
 800ae44:	d852      	bhi.n	800aeec <USBD_StdItfReq+0xc4>
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <USBD_StdItfReq+0x26>
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d14e      	bne.n	800aeec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	3b01      	subs	r3, #1
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d840      	bhi.n	800aede <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	889b      	ldrh	r3, [r3, #4]
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	2b01      	cmp	r3, #1
 800ae64:	d836      	bhi.n	800aed4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	889b      	ldrh	r3, [r3, #4]
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f7ff fed9 	bl	800ac26 <USBD_CoreFindIF>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
 800ae7a:	2bff      	cmp	r3, #255	; 0xff
 800ae7c:	d01d      	beq.n	800aeba <USBD_StdItfReq+0x92>
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d11a      	bne.n	800aeba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ae84:	7bba      	ldrb	r2, [r7, #14]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	32ae      	adds	r2, #174	; 0xae
 800ae8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d00f      	beq.n	800aeb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ae94:	7bba      	ldrb	r2, [r7, #14]
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ae9c:	7bba      	ldrb	r2, [r7, #14]
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	32ae      	adds	r2, #174	; 0xae
 800aea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea6:	689b      	ldr	r3, [r3, #8]
 800aea8:	6839      	ldr	r1, [r7, #0]
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	4798      	blx	r3
 800aeae:	4603      	mov	r3, r0
 800aeb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeb2:	e004      	b.n	800aebe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800aeb8:	e001      	b.n	800aebe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800aeba:	2303      	movs	r3, #3
 800aebc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	88db      	ldrh	r3, [r3, #6]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d110      	bne.n	800aee8 <USBD_StdItfReq+0xc0>
 800aec6:	7bfb      	ldrb	r3, [r7, #15]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d10d      	bne.n	800aee8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 fdf1 	bl	800bab4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800aed2:	e009      	b.n	800aee8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800aed4:	6839      	ldr	r1, [r7, #0]
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fd21 	bl	800b91e <USBD_CtlError>
          break;
 800aedc:	e004      	b.n	800aee8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800aede:	6839      	ldr	r1, [r7, #0]
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fd1c 	bl	800b91e <USBD_CtlError>
          break;
 800aee6:	e000      	b.n	800aeea <USBD_StdItfReq+0xc2>
          break;
 800aee8:	bf00      	nop
      }
      break;
 800aeea:	e004      	b.n	800aef6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800aeec:	6839      	ldr	r1, [r7, #0]
 800aeee:	6878      	ldr	r0, [r7, #4]
 800aef0:	f000 fd15 	bl	800b91e <USBD_CtlError>
      break;
 800aef4:	bf00      	nop
  }

  return ret;
 800aef6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aef8:	4618      	mov	r0, r3
 800aefa:	3710      	adds	r7, #16
 800aefc:	46bd      	mov	sp, r7
 800aefe:	bd80      	pop	{r7, pc}

0800af00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800af0e:	683b      	ldr	r3, [r7, #0]
 800af10:	889b      	ldrh	r3, [r3, #4]
 800af12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	781b      	ldrb	r3, [r3, #0]
 800af18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800af1c:	2b40      	cmp	r3, #64	; 0x40
 800af1e:	d007      	beq.n	800af30 <USBD_StdEPReq+0x30>
 800af20:	2b40      	cmp	r3, #64	; 0x40
 800af22:	f200 817f 	bhi.w	800b224 <USBD_StdEPReq+0x324>
 800af26:	2b00      	cmp	r3, #0
 800af28:	d02a      	beq.n	800af80 <USBD_StdEPReq+0x80>
 800af2a:	2b20      	cmp	r3, #32
 800af2c:	f040 817a 	bne.w	800b224 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800af30:	7bbb      	ldrb	r3, [r7, #14]
 800af32:	4619      	mov	r1, r3
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f7ff fe83 	bl	800ac40 <USBD_CoreFindEP>
 800af3a:	4603      	mov	r3, r0
 800af3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af3e:	7b7b      	ldrb	r3, [r7, #13]
 800af40:	2bff      	cmp	r3, #255	; 0xff
 800af42:	f000 8174 	beq.w	800b22e <USBD_StdEPReq+0x32e>
 800af46:	7b7b      	ldrb	r3, [r7, #13]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	f040 8170 	bne.w	800b22e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800af4e:	7b7a      	ldrb	r2, [r7, #13]
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800af56:	7b7a      	ldrb	r2, [r7, #13]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	32ae      	adds	r2, #174	; 0xae
 800af5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	2b00      	cmp	r3, #0
 800af64:	f000 8163 	beq.w	800b22e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800af68:	7b7a      	ldrb	r2, [r7, #13]
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	32ae      	adds	r2, #174	; 0xae
 800af6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	4798      	blx	r3
 800af7a:	4603      	mov	r3, r0
 800af7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800af7e:	e156      	b.n	800b22e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	785b      	ldrb	r3, [r3, #1]
 800af84:	2b03      	cmp	r3, #3
 800af86:	d008      	beq.n	800af9a <USBD_StdEPReq+0x9a>
 800af88:	2b03      	cmp	r3, #3
 800af8a:	f300 8145 	bgt.w	800b218 <USBD_StdEPReq+0x318>
 800af8e:	2b00      	cmp	r3, #0
 800af90:	f000 809b 	beq.w	800b0ca <USBD_StdEPReq+0x1ca>
 800af94:	2b01      	cmp	r3, #1
 800af96:	d03c      	beq.n	800b012 <USBD_StdEPReq+0x112>
 800af98:	e13e      	b.n	800b218 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800afa0:	b2db      	uxtb	r3, r3
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d002      	beq.n	800afac <USBD_StdEPReq+0xac>
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d016      	beq.n	800afd8 <USBD_StdEPReq+0xd8>
 800afaa:	e02c      	b.n	800b006 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800afac:	7bbb      	ldrb	r3, [r7, #14]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d00d      	beq.n	800afce <USBD_StdEPReq+0xce>
 800afb2:	7bbb      	ldrb	r3, [r7, #14]
 800afb4:	2b80      	cmp	r3, #128	; 0x80
 800afb6:	d00a      	beq.n	800afce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	4619      	mov	r1, r3
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f001 f99d 	bl	800c2fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800afc2:	2180      	movs	r1, #128	; 0x80
 800afc4:	6878      	ldr	r0, [r7, #4]
 800afc6:	f001 f999 	bl	800c2fc <USBD_LL_StallEP>
 800afca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800afcc:	e020      	b.n	800b010 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800afce:	6839      	ldr	r1, [r7, #0]
 800afd0:	6878      	ldr	r0, [r7, #4]
 800afd2:	f000 fca4 	bl	800b91e <USBD_CtlError>
              break;
 800afd6:	e01b      	b.n	800b010 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	885b      	ldrh	r3, [r3, #2]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d10e      	bne.n	800affe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800afe0:	7bbb      	ldrb	r3, [r7, #14]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d00b      	beq.n	800affe <USBD_StdEPReq+0xfe>
 800afe6:	7bbb      	ldrb	r3, [r7, #14]
 800afe8:	2b80      	cmp	r3, #128	; 0x80
 800afea:	d008      	beq.n	800affe <USBD_StdEPReq+0xfe>
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	88db      	ldrh	r3, [r3, #6]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d104      	bne.n	800affe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800aff4:	7bbb      	ldrb	r3, [r7, #14]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f001 f97f 	bl	800c2fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fd58 	bl	800bab4 <USBD_CtlSendStatus>

              break;
 800b004:	e004      	b.n	800b010 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b006:	6839      	ldr	r1, [r7, #0]
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f000 fc88 	bl	800b91e <USBD_CtlError>
              break;
 800b00e:	bf00      	nop
          }
          break;
 800b010:	e107      	b.n	800b222 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b02      	cmp	r3, #2
 800b01c:	d002      	beq.n	800b024 <USBD_StdEPReq+0x124>
 800b01e:	2b03      	cmp	r3, #3
 800b020:	d016      	beq.n	800b050 <USBD_StdEPReq+0x150>
 800b022:	e04b      	b.n	800b0bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b024:	7bbb      	ldrb	r3, [r7, #14]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00d      	beq.n	800b046 <USBD_StdEPReq+0x146>
 800b02a:	7bbb      	ldrb	r3, [r7, #14]
 800b02c:	2b80      	cmp	r3, #128	; 0x80
 800b02e:	d00a      	beq.n	800b046 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b030:	7bbb      	ldrb	r3, [r7, #14]
 800b032:	4619      	mov	r1, r3
 800b034:	6878      	ldr	r0, [r7, #4]
 800b036:	f001 f961 	bl	800c2fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b03a:	2180      	movs	r1, #128	; 0x80
 800b03c:	6878      	ldr	r0, [r7, #4]
 800b03e:	f001 f95d 	bl	800c2fc <USBD_LL_StallEP>
 800b042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b044:	e040      	b.n	800b0c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b046:	6839      	ldr	r1, [r7, #0]
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	f000 fc68 	bl	800b91e <USBD_CtlError>
              break;
 800b04e:	e03b      	b.n	800b0c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	885b      	ldrh	r3, [r3, #2]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d136      	bne.n	800b0c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b058:	7bbb      	ldrb	r3, [r7, #14]
 800b05a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d004      	beq.n	800b06c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b062:	7bbb      	ldrb	r3, [r7, #14]
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f001 f967 	bl	800c33a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b06c:	6878      	ldr	r0, [r7, #4]
 800b06e:	f000 fd21 	bl	800bab4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b072:	7bbb      	ldrb	r3, [r7, #14]
 800b074:	4619      	mov	r1, r3
 800b076:	6878      	ldr	r0, [r7, #4]
 800b078:	f7ff fde2 	bl	800ac40 <USBD_CoreFindEP>
 800b07c:	4603      	mov	r3, r0
 800b07e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b080:	7b7b      	ldrb	r3, [r7, #13]
 800b082:	2bff      	cmp	r3, #255	; 0xff
 800b084:	d01f      	beq.n	800b0c6 <USBD_StdEPReq+0x1c6>
 800b086:	7b7b      	ldrb	r3, [r7, #13]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d11c      	bne.n	800b0c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b08c:	7b7a      	ldrb	r2, [r7, #13]
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b094:	7b7a      	ldrb	r2, [r7, #13]
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	32ae      	adds	r2, #174	; 0xae
 800b09a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d010      	beq.n	800b0c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b0a4:	7b7a      	ldrb	r2, [r7, #13]
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	32ae      	adds	r2, #174	; 0xae
 800b0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	6839      	ldr	r1, [r7, #0]
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	4798      	blx	r3
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b0ba:	e004      	b.n	800b0c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b0bc:	6839      	ldr	r1, [r7, #0]
 800b0be:	6878      	ldr	r0, [r7, #4]
 800b0c0:	f000 fc2d 	bl	800b91e <USBD_CtlError>
              break;
 800b0c4:	e000      	b.n	800b0c8 <USBD_StdEPReq+0x1c8>
              break;
 800b0c6:	bf00      	nop
          }
          break;
 800b0c8:	e0ab      	b.n	800b222 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	2b02      	cmp	r3, #2
 800b0d4:	d002      	beq.n	800b0dc <USBD_StdEPReq+0x1dc>
 800b0d6:	2b03      	cmp	r3, #3
 800b0d8:	d032      	beq.n	800b140 <USBD_StdEPReq+0x240>
 800b0da:	e097      	b.n	800b20c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b0dc:	7bbb      	ldrb	r3, [r7, #14]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d007      	beq.n	800b0f2 <USBD_StdEPReq+0x1f2>
 800b0e2:	7bbb      	ldrb	r3, [r7, #14]
 800b0e4:	2b80      	cmp	r3, #128	; 0x80
 800b0e6:	d004      	beq.n	800b0f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b0e8:	6839      	ldr	r1, [r7, #0]
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fc17 	bl	800b91e <USBD_CtlError>
                break;
 800b0f0:	e091      	b.n	800b216 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b0f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	da0b      	bge.n	800b112 <USBD_StdEPReq+0x212>
 800b0fa:	7bbb      	ldrb	r3, [r7, #14]
 800b0fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b100:	4613      	mov	r3, r2
 800b102:	009b      	lsls	r3, r3, #2
 800b104:	4413      	add	r3, r2
 800b106:	009b      	lsls	r3, r3, #2
 800b108:	3310      	adds	r3, #16
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	4413      	add	r3, r2
 800b10e:	3304      	adds	r3, #4
 800b110:	e00b      	b.n	800b12a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b112:	7bbb      	ldrb	r3, [r7, #14]
 800b114:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b124:	687a      	ldr	r2, [r7, #4]
 800b126:	4413      	add	r3, r2
 800b128:	3304      	adds	r3, #4
 800b12a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b132:	68bb      	ldr	r3, [r7, #8]
 800b134:	2202      	movs	r2, #2
 800b136:	4619      	mov	r1, r3
 800b138:	6878      	ldr	r0, [r7, #4]
 800b13a:	f000 fc61 	bl	800ba00 <USBD_CtlSendData>
              break;
 800b13e:	e06a      	b.n	800b216 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b140:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b144:	2b00      	cmp	r3, #0
 800b146:	da11      	bge.n	800b16c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b148:	7bbb      	ldrb	r3, [r7, #14]
 800b14a:	f003 020f 	and.w	r2, r3, #15
 800b14e:	6879      	ldr	r1, [r7, #4]
 800b150:	4613      	mov	r3, r2
 800b152:	009b      	lsls	r3, r3, #2
 800b154:	4413      	add	r3, r2
 800b156:	009b      	lsls	r3, r3, #2
 800b158:	440b      	add	r3, r1
 800b15a:	3324      	adds	r3, #36	; 0x24
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d117      	bne.n	800b192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b162:	6839      	ldr	r1, [r7, #0]
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fbda 	bl	800b91e <USBD_CtlError>
                  break;
 800b16a:	e054      	b.n	800b216 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b16c:	7bbb      	ldrb	r3, [r7, #14]
 800b16e:	f003 020f 	and.w	r2, r3, #15
 800b172:	6879      	ldr	r1, [r7, #4]
 800b174:	4613      	mov	r3, r2
 800b176:	009b      	lsls	r3, r3, #2
 800b178:	4413      	add	r3, r2
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	440b      	add	r3, r1
 800b17e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b182:	881b      	ldrh	r3, [r3, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d104      	bne.n	800b192 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b188:	6839      	ldr	r1, [r7, #0]
 800b18a:	6878      	ldr	r0, [r7, #4]
 800b18c:	f000 fbc7 	bl	800b91e <USBD_CtlError>
                  break;
 800b190:	e041      	b.n	800b216 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b192:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b196:	2b00      	cmp	r3, #0
 800b198:	da0b      	bge.n	800b1b2 <USBD_StdEPReq+0x2b2>
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
 800b19c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	009b      	lsls	r3, r3, #2
 800b1a4:	4413      	add	r3, r2
 800b1a6:	009b      	lsls	r3, r3, #2
 800b1a8:	3310      	adds	r3, #16
 800b1aa:	687a      	ldr	r2, [r7, #4]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	3304      	adds	r3, #4
 800b1b0:	e00b      	b.n	800b1ca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b1b2:	7bbb      	ldrb	r3, [r7, #14]
 800b1b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b1b8:	4613      	mov	r3, r2
 800b1ba:	009b      	lsls	r3, r3, #2
 800b1bc:	4413      	add	r3, r2
 800b1be:	009b      	lsls	r3, r3, #2
 800b1c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b1c4:	687a      	ldr	r2, [r7, #4]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	3304      	adds	r3, #4
 800b1ca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b1cc:	7bbb      	ldrb	r3, [r7, #14]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d002      	beq.n	800b1d8 <USBD_StdEPReq+0x2d8>
 800b1d2:	7bbb      	ldrb	r3, [r7, #14]
 800b1d4:	2b80      	cmp	r3, #128	; 0x80
 800b1d6:	d103      	bne.n	800b1e0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
 800b1de:	e00e      	b.n	800b1fe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b1e0:	7bbb      	ldrb	r3, [r7, #14]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f001 f8c7 	bl	800c378 <USBD_LL_IsStallEP>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d003      	beq.n	800b1f8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	e002      	b.n	800b1fe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	2202      	movs	r2, #2
 800b202:	4619      	mov	r1, r3
 800b204:	6878      	ldr	r0, [r7, #4]
 800b206:	f000 fbfb 	bl	800ba00 <USBD_CtlSendData>
              break;
 800b20a:	e004      	b.n	800b216 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b20c:	6839      	ldr	r1, [r7, #0]
 800b20e:	6878      	ldr	r0, [r7, #4]
 800b210:	f000 fb85 	bl	800b91e <USBD_CtlError>
              break;
 800b214:	bf00      	nop
          }
          break;
 800b216:	e004      	b.n	800b222 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b218:	6839      	ldr	r1, [r7, #0]
 800b21a:	6878      	ldr	r0, [r7, #4]
 800b21c:	f000 fb7f 	bl	800b91e <USBD_CtlError>
          break;
 800b220:	bf00      	nop
      }
      break;
 800b222:	e005      	b.n	800b230 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b224:	6839      	ldr	r1, [r7, #0]
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fb79 	bl	800b91e <USBD_CtlError>
      break;
 800b22c:	e000      	b.n	800b230 <USBD_StdEPReq+0x330>
      break;
 800b22e:	bf00      	nop
  }

  return ret;
 800b230:	7bfb      	ldrb	r3, [r7, #15]
}
 800b232:	4618      	mov	r0, r3
 800b234:	3710      	adds	r7, #16
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
	...

0800b23c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b084      	sub	sp, #16
 800b240:	af00      	add	r7, sp, #0
 800b242:	6078      	str	r0, [r7, #4]
 800b244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b246:	2300      	movs	r3, #0
 800b248:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b24a:	2300      	movs	r3, #0
 800b24c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b24e:	2300      	movs	r3, #0
 800b250:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	885b      	ldrh	r3, [r3, #2]
 800b256:	0a1b      	lsrs	r3, r3, #8
 800b258:	b29b      	uxth	r3, r3
 800b25a:	3b01      	subs	r3, #1
 800b25c:	2b0e      	cmp	r3, #14
 800b25e:	f200 8152 	bhi.w	800b506 <USBD_GetDescriptor+0x2ca>
 800b262:	a201      	add	r2, pc, #4	; (adr r2, 800b268 <USBD_GetDescriptor+0x2c>)
 800b264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b268:	0800b2d9 	.word	0x0800b2d9
 800b26c:	0800b2f1 	.word	0x0800b2f1
 800b270:	0800b331 	.word	0x0800b331
 800b274:	0800b507 	.word	0x0800b507
 800b278:	0800b507 	.word	0x0800b507
 800b27c:	0800b4a7 	.word	0x0800b4a7
 800b280:	0800b4d3 	.word	0x0800b4d3
 800b284:	0800b507 	.word	0x0800b507
 800b288:	0800b507 	.word	0x0800b507
 800b28c:	0800b507 	.word	0x0800b507
 800b290:	0800b507 	.word	0x0800b507
 800b294:	0800b507 	.word	0x0800b507
 800b298:	0800b507 	.word	0x0800b507
 800b29c:	0800b507 	.word	0x0800b507
 800b2a0:	0800b2a5 	.word	0x0800b2a5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2aa:	69db      	ldr	r3, [r3, #28]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d00b      	beq.n	800b2c8 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	7c12      	ldrb	r2, [r2, #16]
 800b2bc:	f107 0108 	add.w	r1, r7, #8
 800b2c0:	4610      	mov	r0, r2
 800b2c2:	4798      	blx	r3
 800b2c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2c6:	e126      	b.n	800b516 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b2c8:	6839      	ldr	r1, [r7, #0]
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 fb27 	bl	800b91e <USBD_CtlError>
        err++;
 800b2d0:	7afb      	ldrb	r3, [r7, #11]
 800b2d2:	3301      	adds	r3, #1
 800b2d4:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d6:	e11e      	b.n	800b516 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	687a      	ldr	r2, [r7, #4]
 800b2e2:	7c12      	ldrb	r2, [r2, #16]
 800b2e4:	f107 0108 	add.w	r1, r7, #8
 800b2e8:	4610      	mov	r0, r2
 800b2ea:	4798      	blx	r3
 800b2ec:	60f8      	str	r0, [r7, #12]
      break;
 800b2ee:	e112      	b.n	800b516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	7c1b      	ldrb	r3, [r3, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d10d      	bne.n	800b314 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b2fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b300:	f107 0208 	add.w	r2, r7, #8
 800b304:	4610      	mov	r0, r2
 800b306:	4798      	blx	r3
 800b308:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	3301      	adds	r3, #1
 800b30e:	2202      	movs	r2, #2
 800b310:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b312:	e100      	b.n	800b516 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b31c:	f107 0208 	add.w	r2, r7, #8
 800b320:	4610      	mov	r0, r2
 800b322:	4798      	blx	r3
 800b324:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3301      	adds	r3, #1
 800b32a:	2202      	movs	r2, #2
 800b32c:	701a      	strb	r2, [r3, #0]
      break;
 800b32e:	e0f2      	b.n	800b516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	885b      	ldrh	r3, [r3, #2]
 800b334:	b2db      	uxtb	r3, r3
 800b336:	2b05      	cmp	r3, #5
 800b338:	f200 80ac 	bhi.w	800b494 <USBD_GetDescriptor+0x258>
 800b33c:	a201      	add	r2, pc, #4	; (adr r2, 800b344 <USBD_GetDescriptor+0x108>)
 800b33e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b342:	bf00      	nop
 800b344:	0800b35d 	.word	0x0800b35d
 800b348:	0800b391 	.word	0x0800b391
 800b34c:	0800b3c5 	.word	0x0800b3c5
 800b350:	0800b3f9 	.word	0x0800b3f9
 800b354:	0800b42d 	.word	0x0800b42d
 800b358:	0800b461 	.word	0x0800b461
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b362:	685b      	ldr	r3, [r3, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d00b      	beq.n	800b380 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	7c12      	ldrb	r2, [r2, #16]
 800b374:	f107 0108 	add.w	r1, r7, #8
 800b378:	4610      	mov	r0, r2
 800b37a:	4798      	blx	r3
 800b37c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b37e:	e091      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b380:	6839      	ldr	r1, [r7, #0]
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f000 facb 	bl	800b91e <USBD_CtlError>
            err++;
 800b388:	7afb      	ldrb	r3, [r7, #11]
 800b38a:	3301      	adds	r3, #1
 800b38c:	72fb      	strb	r3, [r7, #11]
          break;
 800b38e:	e089      	b.n	800b4a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b396:	689b      	ldr	r3, [r3, #8]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d00b      	beq.n	800b3b4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	687a      	ldr	r2, [r7, #4]
 800b3a6:	7c12      	ldrb	r2, [r2, #16]
 800b3a8:	f107 0108 	add.w	r1, r7, #8
 800b3ac:	4610      	mov	r0, r2
 800b3ae:	4798      	blx	r3
 800b3b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3b2:	e077      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3b4:	6839      	ldr	r1, [r7, #0]
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f000 fab1 	bl	800b91e <USBD_CtlError>
            err++;
 800b3bc:	7afb      	ldrb	r3, [r7, #11]
 800b3be:	3301      	adds	r3, #1
 800b3c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b3c2:	e06f      	b.n	800b4a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d00b      	beq.n	800b3e8 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3d6:	68db      	ldr	r3, [r3, #12]
 800b3d8:	687a      	ldr	r2, [r7, #4]
 800b3da:	7c12      	ldrb	r2, [r2, #16]
 800b3dc:	f107 0108 	add.w	r1, r7, #8
 800b3e0:	4610      	mov	r0, r2
 800b3e2:	4798      	blx	r3
 800b3e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b3e6:	e05d      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b3e8:	6839      	ldr	r1, [r7, #0]
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fa97 	bl	800b91e <USBD_CtlError>
            err++;
 800b3f0:	7afb      	ldrb	r3, [r7, #11]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b3f6:	e055      	b.n	800b4a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b3fe:	691b      	ldr	r3, [r3, #16]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00b      	beq.n	800b41c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b40a:	691b      	ldr	r3, [r3, #16]
 800b40c:	687a      	ldr	r2, [r7, #4]
 800b40e:	7c12      	ldrb	r2, [r2, #16]
 800b410:	f107 0108 	add.w	r1, r7, #8
 800b414:	4610      	mov	r0, r2
 800b416:	4798      	blx	r3
 800b418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b41a:	e043      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b41c:	6839      	ldr	r1, [r7, #0]
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 fa7d 	bl	800b91e <USBD_CtlError>
            err++;
 800b424:	7afb      	ldrb	r3, [r7, #11]
 800b426:	3301      	adds	r3, #1
 800b428:	72fb      	strb	r3, [r7, #11]
          break;
 800b42a:	e03b      	b.n	800b4a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b432:	695b      	ldr	r3, [r3, #20]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d00b      	beq.n	800b450 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b43e:	695b      	ldr	r3, [r3, #20]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	7c12      	ldrb	r2, [r2, #16]
 800b444:	f107 0108 	add.w	r1, r7, #8
 800b448:	4610      	mov	r0, r2
 800b44a:	4798      	blx	r3
 800b44c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b44e:	e029      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b450:	6839      	ldr	r1, [r7, #0]
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 fa63 	bl	800b91e <USBD_CtlError>
            err++;
 800b458:	7afb      	ldrb	r3, [r7, #11]
 800b45a:	3301      	adds	r3, #1
 800b45c:	72fb      	strb	r3, [r7, #11]
          break;
 800b45e:	e021      	b.n	800b4a4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b466:	699b      	ldr	r3, [r3, #24]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00b      	beq.n	800b484 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	687a      	ldr	r2, [r7, #4]
 800b476:	7c12      	ldrb	r2, [r2, #16]
 800b478:	f107 0108 	add.w	r1, r7, #8
 800b47c:	4610      	mov	r0, r2
 800b47e:	4798      	blx	r3
 800b480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b482:	e00f      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800b484:	6839      	ldr	r1, [r7, #0]
 800b486:	6878      	ldr	r0, [r7, #4]
 800b488:	f000 fa49 	bl	800b91e <USBD_CtlError>
            err++;
 800b48c:	7afb      	ldrb	r3, [r7, #11]
 800b48e:	3301      	adds	r3, #1
 800b490:	72fb      	strb	r3, [r7, #11]
          break;
 800b492:	e007      	b.n	800b4a4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fa41 	bl	800b91e <USBD_CtlError>
          err++;
 800b49c:	7afb      	ldrb	r3, [r7, #11]
 800b49e:	3301      	adds	r3, #1
 800b4a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b4a2:	bf00      	nop
      }
      break;
 800b4a4:	e037      	b.n	800b516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	7c1b      	ldrb	r3, [r3, #16]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d109      	bne.n	800b4c2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b6:	f107 0208 	add.w	r2, r7, #8
 800b4ba:	4610      	mov	r0, r2
 800b4bc:	4798      	blx	r3
 800b4be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4c0:	e029      	b.n	800b516 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4c2:	6839      	ldr	r1, [r7, #0]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f000 fa2a 	bl	800b91e <USBD_CtlError>
        err++;
 800b4ca:	7afb      	ldrb	r3, [r7, #11]
 800b4cc:	3301      	adds	r3, #1
 800b4ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b4d0:	e021      	b.n	800b516 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	7c1b      	ldrb	r3, [r3, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10d      	bne.n	800b4f6 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b4e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4e2:	f107 0208 	add.w	r2, r7, #8
 800b4e6:	4610      	mov	r0, r2
 800b4e8:	4798      	blx	r3
 800b4ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	2207      	movs	r2, #7
 800b4f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b4f4:	e00f      	b.n	800b516 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800b4f6:	6839      	ldr	r1, [r7, #0]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	f000 fa10 	bl	800b91e <USBD_CtlError>
        err++;
 800b4fe:	7afb      	ldrb	r3, [r7, #11]
 800b500:	3301      	adds	r3, #1
 800b502:	72fb      	strb	r3, [r7, #11]
      break;
 800b504:	e007      	b.n	800b516 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800b506:	6839      	ldr	r1, [r7, #0]
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f000 fa08 	bl	800b91e <USBD_CtlError>
      err++;
 800b50e:	7afb      	ldrb	r3, [r7, #11]
 800b510:	3301      	adds	r3, #1
 800b512:	72fb      	strb	r3, [r7, #11]
      break;
 800b514:	bf00      	nop
  }

  if (err != 0U)
 800b516:	7afb      	ldrb	r3, [r7, #11]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d11e      	bne.n	800b55a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	88db      	ldrh	r3, [r3, #6]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d016      	beq.n	800b552 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800b524:	893b      	ldrh	r3, [r7, #8]
 800b526:	2b00      	cmp	r3, #0
 800b528:	d00e      	beq.n	800b548 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	88da      	ldrh	r2, [r3, #6]
 800b52e:	893b      	ldrh	r3, [r7, #8]
 800b530:	4293      	cmp	r3, r2
 800b532:	bf28      	it	cs
 800b534:	4613      	movcs	r3, r2
 800b536:	b29b      	uxth	r3, r3
 800b538:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b53a:	893b      	ldrh	r3, [r7, #8]
 800b53c:	461a      	mov	r2, r3
 800b53e:	68f9      	ldr	r1, [r7, #12]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fa5d 	bl	800ba00 <USBD_CtlSendData>
 800b546:	e009      	b.n	800b55c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f9e7 	bl	800b91e <USBD_CtlError>
 800b550:	e004      	b.n	800b55c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	f000 faae 	bl	800bab4 <USBD_CtlSendStatus>
 800b558:	e000      	b.n	800b55c <USBD_GetDescriptor+0x320>
    return;
 800b55a:	bf00      	nop
  }
}
 800b55c:	3710      	adds	r7, #16
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop

0800b564 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	889b      	ldrh	r3, [r3, #4]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d131      	bne.n	800b5da <USBD_SetAddress+0x76>
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	88db      	ldrh	r3, [r3, #6]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d12d      	bne.n	800b5da <USBD_SetAddress+0x76>
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	885b      	ldrh	r3, [r3, #2]
 800b582:	2b7f      	cmp	r3, #127	; 0x7f
 800b584:	d829      	bhi.n	800b5da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b586:	683b      	ldr	r3, [r7, #0]
 800b588:	885b      	ldrh	r3, [r3, #2]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b590:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d104      	bne.n	800b5a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b59e:	6839      	ldr	r1, [r7, #0]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f000 f9bc 	bl	800b91e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5a6:	e01d      	b.n	800b5e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7bfa      	ldrb	r2, [r7, #15]
 800b5ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	4619      	mov	r1, r3
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 ff0b 	bl	800c3d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f000 fa7a 	bl	800bab4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b5c0:	7bfb      	ldrb	r3, [r7, #15]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2202      	movs	r2, #2
 800b5ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5ce:	e009      	b.n	800b5e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2201      	movs	r2, #1
 800b5d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5d8:	e004      	b.n	800b5e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b5da:	6839      	ldr	r1, [r7, #0]
 800b5dc:	6878      	ldr	r0, [r7, #4]
 800b5de:	f000 f99e 	bl	800b91e <USBD_CtlError>
  }
}
 800b5e2:	bf00      	nop
 800b5e4:	bf00      	nop
 800b5e6:	3710      	adds	r7, #16
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b5fa:	683b      	ldr	r3, [r7, #0]
 800b5fc:	885b      	ldrh	r3, [r3, #2]
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	4b4e      	ldr	r3, [pc, #312]	; (800b73c <USBD_SetConfig+0x150>)
 800b602:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b604:	4b4d      	ldr	r3, [pc, #308]	; (800b73c <USBD_SetConfig+0x150>)
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d905      	bls.n	800b618 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b60c:	6839      	ldr	r1, [r7, #0]
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f000 f985 	bl	800b91e <USBD_CtlError>
    return USBD_FAIL;
 800b614:	2303      	movs	r3, #3
 800b616:	e08c      	b.n	800b732 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b61e:	b2db      	uxtb	r3, r3
 800b620:	2b02      	cmp	r3, #2
 800b622:	d002      	beq.n	800b62a <USBD_SetConfig+0x3e>
 800b624:	2b03      	cmp	r3, #3
 800b626:	d029      	beq.n	800b67c <USBD_SetConfig+0x90>
 800b628:	e075      	b.n	800b716 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b62a:	4b44      	ldr	r3, [pc, #272]	; (800b73c <USBD_SetConfig+0x150>)
 800b62c:	781b      	ldrb	r3, [r3, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d020      	beq.n	800b674 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b632:	4b42      	ldr	r3, [pc, #264]	; (800b73c <USBD_SetConfig+0x150>)
 800b634:	781b      	ldrb	r3, [r3, #0]
 800b636:	461a      	mov	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b63c:	4b3f      	ldr	r3, [pc, #252]	; (800b73c <USBD_SetConfig+0x150>)
 800b63e:	781b      	ldrb	r3, [r3, #0]
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f7fe ffbd 	bl	800a5c2 <USBD_SetClassConfig>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b64c:	7bfb      	ldrb	r3, [r7, #15]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d008      	beq.n	800b664 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b652:	6839      	ldr	r1, [r7, #0]
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 f962 	bl	800b91e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2202      	movs	r2, #2
 800b65e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b662:	e065      	b.n	800b730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fa25 	bl	800bab4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2203      	movs	r2, #3
 800b66e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b672:	e05d      	b.n	800b730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b674:	6878      	ldr	r0, [r7, #4]
 800b676:	f000 fa1d 	bl	800bab4 <USBD_CtlSendStatus>
      break;
 800b67a:	e059      	b.n	800b730 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b67c:	4b2f      	ldr	r3, [pc, #188]	; (800b73c <USBD_SetConfig+0x150>)
 800b67e:	781b      	ldrb	r3, [r3, #0]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d112      	bne.n	800b6aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2202      	movs	r2, #2
 800b688:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b68c:	4b2b      	ldr	r3, [pc, #172]	; (800b73c <USBD_SetConfig+0x150>)
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	461a      	mov	r2, r3
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b696:	4b29      	ldr	r3, [pc, #164]	; (800b73c <USBD_SetConfig+0x150>)
 800b698:	781b      	ldrb	r3, [r3, #0]
 800b69a:	4619      	mov	r1, r3
 800b69c:	6878      	ldr	r0, [r7, #4]
 800b69e:	f7fe ffac 	bl	800a5fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fa06 	bl	800bab4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b6a8:	e042      	b.n	800b730 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b6aa:	4b24      	ldr	r3, [pc, #144]	; (800b73c <USBD_SetConfig+0x150>)
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	461a      	mov	r2, r3
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	685b      	ldr	r3, [r3, #4]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d02a      	beq.n	800b70e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	b2db      	uxtb	r3, r3
 800b6be:	4619      	mov	r1, r3
 800b6c0:	6878      	ldr	r0, [r7, #4]
 800b6c2:	f7fe ff9a 	bl	800a5fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b6c6:	4b1d      	ldr	r3, [pc, #116]	; (800b73c <USBD_SetConfig+0x150>)
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b6d0:	4b1a      	ldr	r3, [pc, #104]	; (800b73c <USBD_SetConfig+0x150>)
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7fe ff73 	bl	800a5c2 <USBD_SetClassConfig>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b6e0:	7bfb      	ldrb	r3, [r7, #15]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d00f      	beq.n	800b706 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b6e6:	6839      	ldr	r1, [r7, #0]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 f918 	bl	800b91e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	685b      	ldr	r3, [r3, #4]
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f7fe ff7f 	bl	800a5fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2202      	movs	r2, #2
 800b700:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b704:	e014      	b.n	800b730 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 f9d4 	bl	800bab4 <USBD_CtlSendStatus>
      break;
 800b70c:	e010      	b.n	800b730 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b70e:	6878      	ldr	r0, [r7, #4]
 800b710:	f000 f9d0 	bl	800bab4 <USBD_CtlSendStatus>
      break;
 800b714:	e00c      	b.n	800b730 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b716:	6839      	ldr	r1, [r7, #0]
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 f900 	bl	800b91e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b71e:	4b07      	ldr	r3, [pc, #28]	; (800b73c <USBD_SetConfig+0x150>)
 800b720:	781b      	ldrb	r3, [r3, #0]
 800b722:	4619      	mov	r1, r3
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7fe ff68 	bl	800a5fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b72a:	2303      	movs	r3, #3
 800b72c:	73fb      	strb	r3, [r7, #15]
      break;
 800b72e:	bf00      	nop
  }

  return ret;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}
 800b73a:	bf00      	nop
 800b73c:	20000664 	.word	0x20000664

0800b740 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
 800b748:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b74a:	683b      	ldr	r3, [r7, #0]
 800b74c:	88db      	ldrh	r3, [r3, #6]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d004      	beq.n	800b75c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f8e2 	bl	800b91e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b75a:	e023      	b.n	800b7a4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b02      	cmp	r3, #2
 800b766:	dc02      	bgt.n	800b76e <USBD_GetConfig+0x2e>
 800b768:	2b00      	cmp	r3, #0
 800b76a:	dc03      	bgt.n	800b774 <USBD_GetConfig+0x34>
 800b76c:	e015      	b.n	800b79a <USBD_GetConfig+0x5a>
 800b76e:	2b03      	cmp	r3, #3
 800b770:	d00b      	beq.n	800b78a <USBD_GetConfig+0x4a>
 800b772:	e012      	b.n	800b79a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3308      	adds	r3, #8
 800b77e:	2201      	movs	r2, #1
 800b780:	4619      	mov	r1, r3
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	f000 f93c 	bl	800ba00 <USBD_CtlSendData>
        break;
 800b788:	e00c      	b.n	800b7a4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	3304      	adds	r3, #4
 800b78e:	2201      	movs	r2, #1
 800b790:	4619      	mov	r1, r3
 800b792:	6878      	ldr	r0, [r7, #4]
 800b794:	f000 f934 	bl	800ba00 <USBD_CtlSendData>
        break;
 800b798:	e004      	b.n	800b7a4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b79a:	6839      	ldr	r1, [r7, #0]
 800b79c:	6878      	ldr	r0, [r7, #4]
 800b79e:	f000 f8be 	bl	800b91e <USBD_CtlError>
        break;
 800b7a2:	bf00      	nop
}
 800b7a4:	bf00      	nop
 800b7a6:	3708      	adds	r7, #8
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}

0800b7ac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7ac:	b580      	push	{r7, lr}
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	6078      	str	r0, [r7, #4]
 800b7b4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	3b01      	subs	r3, #1
 800b7c0:	2b02      	cmp	r3, #2
 800b7c2:	d81e      	bhi.n	800b802 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b7c4:	683b      	ldr	r3, [r7, #0]
 800b7c6:	88db      	ldrh	r3, [r3, #6]
 800b7c8:	2b02      	cmp	r3, #2
 800b7ca:	d004      	beq.n	800b7d6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b7cc:	6839      	ldr	r1, [r7, #0]
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 f8a5 	bl	800b91e <USBD_CtlError>
        break;
 800b7d4:	e01a      	b.n	800b80c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d005      	beq.n	800b7f2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	68db      	ldr	r3, [r3, #12]
 800b7ea:	f043 0202 	orr.w	r2, r3, #2
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	330c      	adds	r3, #12
 800b7f6:	2202      	movs	r2, #2
 800b7f8:	4619      	mov	r1, r3
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f000 f900 	bl	800ba00 <USBD_CtlSendData>
      break;
 800b800:	e004      	b.n	800b80c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b802:	6839      	ldr	r1, [r7, #0]
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 f88a 	bl	800b91e <USBD_CtlError>
      break;
 800b80a:	bf00      	nop
  }
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
 800b81c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	885b      	ldrh	r3, [r3, #2]
 800b822:	2b01      	cmp	r3, #1
 800b824:	d107      	bne.n	800b836 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	2201      	movs	r2, #1
 800b82a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f000 f940 	bl	800bab4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b834:	e013      	b.n	800b85e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	885b      	ldrh	r3, [r3, #2]
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d10b      	bne.n	800b856 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	889b      	ldrh	r3, [r3, #4]
 800b842:	0a1b      	lsrs	r3, r3, #8
 800b844:	b29b      	uxth	r3, r3
 800b846:	b2da      	uxtb	r2, r3
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f930 	bl	800bab4 <USBD_CtlSendStatus>
}
 800b854:	e003      	b.n	800b85e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f860 	bl	800b91e <USBD_CtlError>
}
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}

0800b866 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b082      	sub	sp, #8
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b876:	b2db      	uxtb	r3, r3
 800b878:	3b01      	subs	r3, #1
 800b87a:	2b02      	cmp	r3, #2
 800b87c:	d80b      	bhi.n	800b896 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	885b      	ldrh	r3, [r3, #2]
 800b882:	2b01      	cmp	r3, #1
 800b884:	d10c      	bne.n	800b8a0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	2200      	movs	r2, #0
 800b88a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b88e:	6878      	ldr	r0, [r7, #4]
 800b890:	f000 f910 	bl	800bab4 <USBD_CtlSendStatus>
      }
      break;
 800b894:	e004      	b.n	800b8a0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b896:	6839      	ldr	r1, [r7, #0]
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f000 f840 	bl	800b91e <USBD_CtlError>
      break;
 800b89e:	e000      	b.n	800b8a2 <USBD_ClrFeature+0x3c>
      break;
 800b8a0:	bf00      	nop
  }
}
 800b8a2:	bf00      	nop
 800b8a4:	3708      	adds	r7, #8
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}

0800b8aa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b8aa:	b580      	push	{r7, lr}
 800b8ac:	b084      	sub	sp, #16
 800b8ae:	af00      	add	r7, sp, #0
 800b8b0:	6078      	str	r0, [r7, #4]
 800b8b2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	781a      	ldrb	r2, [r3, #0]
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3301      	adds	r3, #1
 800b8c4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	781a      	ldrb	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b8d4:	68f8      	ldr	r0, [r7, #12]
 800b8d6:	f7ff fa17 	bl	800ad08 <SWAPBYTE>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	461a      	mov	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	3301      	adds	r3, #1
 800b8ec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b8ee:	68f8      	ldr	r0, [r7, #12]
 800b8f0:	f7ff fa0a 	bl	800ad08 <SWAPBYTE>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	3301      	adds	r3, #1
 800b900:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	3301      	adds	r3, #1
 800b906:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff f9fd 	bl	800ad08 <SWAPBYTE>
 800b90e:	4603      	mov	r3, r0
 800b910:	461a      	mov	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	80da      	strh	r2, [r3, #6]
}
 800b916:	bf00      	nop
 800b918:	3710      	adds	r7, #16
 800b91a:	46bd      	mov	sp, r7
 800b91c:	bd80      	pop	{r7, pc}

0800b91e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b91e:	b580      	push	{r7, lr}
 800b920:	b082      	sub	sp, #8
 800b922:	af00      	add	r7, sp, #0
 800b924:	6078      	str	r0, [r7, #4]
 800b926:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b928:	2180      	movs	r1, #128	; 0x80
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f000 fce6 	bl	800c2fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b930:	2100      	movs	r1, #0
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f000 fce2 	bl	800c2fc <USBD_LL_StallEP>
}
 800b938:	bf00      	nop
 800b93a:	3708      	adds	r7, #8
 800b93c:	46bd      	mov	sp, r7
 800b93e:	bd80      	pop	{r7, pc}

0800b940 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b94c:	2300      	movs	r3, #0
 800b94e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d036      	beq.n	800b9c4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b95a:	6938      	ldr	r0, [r7, #16]
 800b95c:	f000 f836 	bl	800b9cc <USBD_GetLen>
 800b960:	4603      	mov	r3, r0
 800b962:	3301      	adds	r3, #1
 800b964:	b29b      	uxth	r3, r3
 800b966:	005b      	lsls	r3, r3, #1
 800b968:	b29a      	uxth	r2, r3
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b96e:	7dfb      	ldrb	r3, [r7, #23]
 800b970:	68ba      	ldr	r2, [r7, #8]
 800b972:	4413      	add	r3, r2
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	7812      	ldrb	r2, [r2, #0]
 800b978:	701a      	strb	r2, [r3, #0]
  idx++;
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	3301      	adds	r3, #1
 800b97e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b980:	7dfb      	ldrb	r3, [r7, #23]
 800b982:	68ba      	ldr	r2, [r7, #8]
 800b984:	4413      	add	r3, r2
 800b986:	2203      	movs	r2, #3
 800b988:	701a      	strb	r2, [r3, #0]
  idx++;
 800b98a:	7dfb      	ldrb	r3, [r7, #23]
 800b98c:	3301      	adds	r3, #1
 800b98e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b990:	e013      	b.n	800b9ba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b992:	7dfb      	ldrb	r3, [r7, #23]
 800b994:	68ba      	ldr	r2, [r7, #8]
 800b996:	4413      	add	r3, r2
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	7812      	ldrb	r2, [r2, #0]
 800b99c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	3301      	adds	r3, #1
 800b9a2:	613b      	str	r3, [r7, #16]
    idx++;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b9b4:	7dfb      	ldrb	r3, [r7, #23]
 800b9b6:	3301      	adds	r3, #1
 800b9b8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b9ba:	693b      	ldr	r3, [r7, #16]
 800b9bc:	781b      	ldrb	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1e7      	bne.n	800b992 <USBD_GetString+0x52>
 800b9c2:	e000      	b.n	800b9c6 <USBD_GetString+0x86>
    return;
 800b9c4:	bf00      	nop
  }
}
 800b9c6:	3718      	adds	r7, #24
 800b9c8:	46bd      	mov	sp, r7
 800b9ca:	bd80      	pop	{r7, pc}

0800b9cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b9dc:	e005      	b.n	800b9ea <USBD_GetLen+0x1e>
  {
    len++;
 800b9de:	7bfb      	ldrb	r3, [r7, #15]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	3301      	adds	r3, #1
 800b9e8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d1f5      	bne.n	800b9de <USBD_GetLen+0x12>
  }

  return len;
 800b9f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9f4:	4618      	mov	r0, r3
 800b9f6:	3714      	adds	r7, #20
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b084      	sub	sp, #16
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	60b9      	str	r1, [r7, #8]
 800ba0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2202      	movs	r2, #2
 800ba10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	687a      	ldr	r2, [r7, #4]
 800ba18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	68ba      	ldr	r2, [r7, #8]
 800ba24:	2100      	movs	r1, #0
 800ba26:	68f8      	ldr	r0, [r7, #12]
 800ba28:	f000 fcf1 	bl	800c40e <USBD_LL_Transmit>

  return USBD_OK;
 800ba2c:	2300      	movs	r3, #0
}
 800ba2e:	4618      	mov	r0, r3
 800ba30:	3710      	adds	r7, #16
 800ba32:	46bd      	mov	sp, r7
 800ba34:	bd80      	pop	{r7, pc}

0800ba36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ba36:	b580      	push	{r7, lr}
 800ba38:	b084      	sub	sp, #16
 800ba3a:	af00      	add	r7, sp, #0
 800ba3c:	60f8      	str	r0, [r7, #12]
 800ba3e:	60b9      	str	r1, [r7, #8]
 800ba40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	2100      	movs	r1, #0
 800ba48:	68f8      	ldr	r0, [r7, #12]
 800ba4a:	f000 fce0 	bl	800c40e <USBD_LL_Transmit>

  return USBD_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3710      	adds	r7, #16
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	60f8      	str	r0, [r7, #12]
 800ba60:	60b9      	str	r1, [r7, #8]
 800ba62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2203      	movs	r2, #3
 800ba68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	687a      	ldr	r2, [r7, #4]
 800ba70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	687a      	ldr	r2, [r7, #4]
 800ba78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	68ba      	ldr	r2, [r7, #8]
 800ba80:	2100      	movs	r1, #0
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fce4 	bl	800c450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ba88:	2300      	movs	r3, #0
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3710      	adds	r7, #16
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}

0800ba92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ba92:	b580      	push	{r7, lr}
 800ba94:	b084      	sub	sp, #16
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	60f8      	str	r0, [r7, #12]
 800ba9a:	60b9      	str	r1, [r7, #8]
 800ba9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68ba      	ldr	r2, [r7, #8]
 800baa2:	2100      	movs	r1, #0
 800baa4:	68f8      	ldr	r0, [r7, #12]
 800baa6:	f000 fcd3 	bl	800c450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	4618      	mov	r0, r3
 800baae:	3710      	adds	r7, #16
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bd80      	pop	{r7, pc}

0800bab4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bab4:	b580      	push	{r7, lr}
 800bab6:	b082      	sub	sp, #8
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2204      	movs	r2, #4
 800bac0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bac4:	2300      	movs	r3, #0
 800bac6:	2200      	movs	r2, #0
 800bac8:	2100      	movs	r1, #0
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 fc9f 	bl	800c40e <USBD_LL_Transmit>

  return USBD_OK;
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	3708      	adds	r7, #8
 800bad6:	46bd      	mov	sp, r7
 800bad8:	bd80      	pop	{r7, pc}

0800bada <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bada:	b580      	push	{r7, lr}
 800badc:	b082      	sub	sp, #8
 800bade:	af00      	add	r7, sp, #0
 800bae0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	2205      	movs	r2, #5
 800bae6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800baea:	2300      	movs	r3, #0
 800baec:	2200      	movs	r2, #0
 800baee:	2100      	movs	r1, #0
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	f000 fcad 	bl	800c450 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800baf6:	2300      	movs	r3, #0
}
 800baf8:	4618      	mov	r0, r3
 800bafa:	3708      	adds	r7, #8
 800bafc:	46bd      	mov	sp, r7
 800bafe:	bd80      	pop	{r7, pc}

0800bb00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800bb04:	2201      	movs	r2, #1
 800bb06:	4912      	ldr	r1, [pc, #72]	; (800bb50 <MX_USB_DEVICE_Init+0x50>)
 800bb08:	4812      	ldr	r0, [pc, #72]	; (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb0a:	f7fe fcdd 	bl	800a4c8 <USBD_Init>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d001      	beq.n	800bb18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bb14:	f7f5 fe6e 	bl	80017f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800bb18:	490f      	ldr	r1, [pc, #60]	; (800bb58 <MX_USB_DEVICE_Init+0x58>)
 800bb1a:	480e      	ldr	r0, [pc, #56]	; (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb1c:	f7fe fd04 	bl	800a528 <USBD_RegisterClass>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d001      	beq.n	800bb2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bb26:	f7f5 fe65 	bl	80017f4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800bb2a:	490c      	ldr	r1, [pc, #48]	; (800bb5c <MX_USB_DEVICE_Init+0x5c>)
 800bb2c:	4809      	ldr	r0, [pc, #36]	; (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb2e:	f7fe fc3b 	bl	800a3a8 <USBD_CDC_RegisterInterface>
 800bb32:	4603      	mov	r3, r0
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d001      	beq.n	800bb3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800bb38:	f7f5 fe5c 	bl	80017f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800bb3c:	4805      	ldr	r0, [pc, #20]	; (800bb54 <MX_USB_DEVICE_Init+0x54>)
 800bb3e:	f7fe fd29 	bl	800a594 <USBD_Start>
 800bb42:	4603      	mov	r3, r0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d001      	beq.n	800bb4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800bb48:	f7f5 fe54 	bl	80017f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bb4c:	bf00      	nop
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	20000138 	.word	0x20000138
 800bb54:	20000668 	.word	0x20000668
 800bb58:	200000a4 	.word	0x200000a4
 800bb5c:	20000124 	.word	0x20000124

0800bb60 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800bb64:	2200      	movs	r2, #0
 800bb66:	4905      	ldr	r1, [pc, #20]	; (800bb7c <CDC_Init_HS+0x1c>)
 800bb68:	4805      	ldr	r0, [pc, #20]	; (800bb80 <CDC_Init_HS+0x20>)
 800bb6a:	f7fe fc37 	bl	800a3dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800bb6e:	4905      	ldr	r1, [pc, #20]	; (800bb84 <CDC_Init_HS+0x24>)
 800bb70:	4803      	ldr	r0, [pc, #12]	; (800bb80 <CDC_Init_HS+0x20>)
 800bb72:	f7fe fc55 	bl	800a420 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800bb76:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800bb78:	4618      	mov	r0, r3
 800bb7a:	bd80      	pop	{r7, pc}
 800bb7c:	20001144 	.word	0x20001144
 800bb80:	20000668 	.word	0x20000668
 800bb84:	20000944 	.word	0x20000944

0800bb88 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800bb8c:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	46bd      	mov	sp, r7
 800bb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb96:	4770      	bx	lr

0800bb98 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800bb98:	b480      	push	{r7}
 800bb9a:	b083      	sub	sp, #12
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	4603      	mov	r3, r0
 800bba0:	6039      	str	r1, [r7, #0]
 800bba2:	71fb      	strb	r3, [r7, #7]
 800bba4:	4613      	mov	r3, r2
 800bba6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800bba8:	79fb      	ldrb	r3, [r7, #7]
 800bbaa:	2b23      	cmp	r3, #35	; 0x23
 800bbac:	d84a      	bhi.n	800bc44 <CDC_Control_HS+0xac>
 800bbae:	a201      	add	r2, pc, #4	; (adr r2, 800bbb4 <CDC_Control_HS+0x1c>)
 800bbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbb4:	0800bc45 	.word	0x0800bc45
 800bbb8:	0800bc45 	.word	0x0800bc45
 800bbbc:	0800bc45 	.word	0x0800bc45
 800bbc0:	0800bc45 	.word	0x0800bc45
 800bbc4:	0800bc45 	.word	0x0800bc45
 800bbc8:	0800bc45 	.word	0x0800bc45
 800bbcc:	0800bc45 	.word	0x0800bc45
 800bbd0:	0800bc45 	.word	0x0800bc45
 800bbd4:	0800bc45 	.word	0x0800bc45
 800bbd8:	0800bc45 	.word	0x0800bc45
 800bbdc:	0800bc45 	.word	0x0800bc45
 800bbe0:	0800bc45 	.word	0x0800bc45
 800bbe4:	0800bc45 	.word	0x0800bc45
 800bbe8:	0800bc45 	.word	0x0800bc45
 800bbec:	0800bc45 	.word	0x0800bc45
 800bbf0:	0800bc45 	.word	0x0800bc45
 800bbf4:	0800bc45 	.word	0x0800bc45
 800bbf8:	0800bc45 	.word	0x0800bc45
 800bbfc:	0800bc45 	.word	0x0800bc45
 800bc00:	0800bc45 	.word	0x0800bc45
 800bc04:	0800bc45 	.word	0x0800bc45
 800bc08:	0800bc45 	.word	0x0800bc45
 800bc0c:	0800bc45 	.word	0x0800bc45
 800bc10:	0800bc45 	.word	0x0800bc45
 800bc14:	0800bc45 	.word	0x0800bc45
 800bc18:	0800bc45 	.word	0x0800bc45
 800bc1c:	0800bc45 	.word	0x0800bc45
 800bc20:	0800bc45 	.word	0x0800bc45
 800bc24:	0800bc45 	.word	0x0800bc45
 800bc28:	0800bc45 	.word	0x0800bc45
 800bc2c:	0800bc45 	.word	0x0800bc45
 800bc30:	0800bc45 	.word	0x0800bc45
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc45 	.word	0x0800bc45
 800bc3c:	0800bc45 	.word	0x0800bc45
 800bc40:	0800bc45 	.word	0x0800bc45
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800bc44:	bf00      	nop
  }

  return (USBD_OK);
 800bc46:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	370c      	adds	r7, #12
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b082      	sub	sp, #8
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
 800bc5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	4805      	ldr	r0, [pc, #20]	; (800bc78 <CDC_Receive_HS+0x24>)
 800bc62:	f7fe fbdd 	bl	800a420 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800bc66:	4804      	ldr	r0, [pc, #16]	; (800bc78 <CDC_Receive_HS+0x24>)
 800bc68:	f7fe fbf8 	bl	800a45c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800bc6c:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3708      	adds	r7, #8
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd80      	pop	{r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000668 	.word	0x20000668

0800bc7c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800bc7c:	b480      	push	{r7}
 800bc7e:	b087      	sub	sp, #28
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	60f8      	str	r0, [r7, #12]
 800bc84:	60b9      	str	r1, [r7, #8]
 800bc86:	4613      	mov	r3, r2
 800bc88:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800bc8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc92:	4618      	mov	r0, r3
 800bc94:	371c      	adds	r7, #28
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
	...

0800bca0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	4603      	mov	r3, r0
 800bca8:	6039      	str	r1, [r7, #0]
 800bcaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800bcac:	683b      	ldr	r3, [r7, #0]
 800bcae:	2212      	movs	r2, #18
 800bcb0:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800bcb2:	4b03      	ldr	r3, [pc, #12]	; (800bcc0 <USBD_HS_DeviceDescriptor+0x20>)
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr
 800bcc0:	20000158 	.word	0x20000158

0800bcc4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b083      	sub	sp, #12
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	4603      	mov	r3, r0
 800bccc:	6039      	str	r1, [r7, #0]
 800bcce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	2204      	movs	r2, #4
 800bcd4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bcd6:	4b03      	ldr	r3, [pc, #12]	; (800bce4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	370c      	adds	r7, #12
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce2:	4770      	bx	lr
 800bce4:	20000178 	.word	0x20000178

0800bce8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bce8:	b580      	push	{r7, lr}
 800bcea:	b082      	sub	sp, #8
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	4603      	mov	r3, r0
 800bcf0:	6039      	str	r1, [r7, #0]
 800bcf2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bcf4:	79fb      	ldrb	r3, [r7, #7]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d105      	bne.n	800bd06 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	4907      	ldr	r1, [pc, #28]	; (800bd1c <USBD_HS_ProductStrDescriptor+0x34>)
 800bcfe:	4808      	ldr	r0, [pc, #32]	; (800bd20 <USBD_HS_ProductStrDescriptor+0x38>)
 800bd00:	f7ff fe1e 	bl	800b940 <USBD_GetString>
 800bd04:	e004      	b.n	800bd10 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800bd06:	683a      	ldr	r2, [r7, #0]
 800bd08:	4904      	ldr	r1, [pc, #16]	; (800bd1c <USBD_HS_ProductStrDescriptor+0x34>)
 800bd0a:	4805      	ldr	r0, [pc, #20]	; (800bd20 <USBD_HS_ProductStrDescriptor+0x38>)
 800bd0c:	f7ff fe18 	bl	800b940 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd10:	4b02      	ldr	r3, [pc, #8]	; (800bd1c <USBD_HS_ProductStrDescriptor+0x34>)
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3708      	adds	r7, #8
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20001944 	.word	0x20001944
 800bd20:	0800d0b8 	.word	0x0800d0b8

0800bd24 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	4603      	mov	r3, r0
 800bd2c:	6039      	str	r1, [r7, #0]
 800bd2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	4904      	ldr	r1, [pc, #16]	; (800bd44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800bd34:	4804      	ldr	r0, [pc, #16]	; (800bd48 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800bd36:	f7ff fe03 	bl	800b940 <USBD_GetString>
  return USBD_StrDesc;
 800bd3a:	4b02      	ldr	r3, [pc, #8]	; (800bd44 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3708      	adds	r7, #8
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}
 800bd44:	20001944 	.word	0x20001944
 800bd48:	0800d0d0 	.word	0x0800d0d0

0800bd4c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b082      	sub	sp, #8
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	4603      	mov	r3, r0
 800bd54:	6039      	str	r1, [r7, #0]
 800bd56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	221a      	movs	r2, #26
 800bd5c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bd5e:	f000 f855 	bl	800be0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800bd62:	4b02      	ldr	r3, [pc, #8]	; (800bd6c <USBD_HS_SerialStrDescriptor+0x20>)
}
 800bd64:	4618      	mov	r0, r3
 800bd66:	3708      	adds	r7, #8
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	bd80      	pop	{r7, pc}
 800bd6c:	2000017c 	.word	0x2000017c

0800bd70 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b082      	sub	sp, #8
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	4603      	mov	r3, r0
 800bd78:	6039      	str	r1, [r7, #0]
 800bd7a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bd7c:	79fb      	ldrb	r3, [r7, #7]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d105      	bne.n	800bd8e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bd82:	683a      	ldr	r2, [r7, #0]
 800bd84:	4907      	ldr	r1, [pc, #28]	; (800bda4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bd86:	4808      	ldr	r0, [pc, #32]	; (800bda8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bd88:	f7ff fdda 	bl	800b940 <USBD_GetString>
 800bd8c:	e004      	b.n	800bd98 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800bd8e:	683a      	ldr	r2, [r7, #0]
 800bd90:	4904      	ldr	r1, [pc, #16]	; (800bda4 <USBD_HS_ConfigStrDescriptor+0x34>)
 800bd92:	4805      	ldr	r0, [pc, #20]	; (800bda8 <USBD_HS_ConfigStrDescriptor+0x38>)
 800bd94:	f7ff fdd4 	bl	800b940 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bd98:	4b02      	ldr	r3, [pc, #8]	; (800bda4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	3708      	adds	r7, #8
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	bd80      	pop	{r7, pc}
 800bda2:	bf00      	nop
 800bda4:	20001944 	.word	0x20001944
 800bda8:	0800d0e4 	.word	0x0800d0e4

0800bdac <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdac:	b580      	push	{r7, lr}
 800bdae:	b082      	sub	sp, #8
 800bdb0:	af00      	add	r7, sp, #0
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	6039      	str	r1, [r7, #0]
 800bdb6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bdb8:	79fb      	ldrb	r3, [r7, #7]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d105      	bne.n	800bdca <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bdbe:	683a      	ldr	r2, [r7, #0]
 800bdc0:	4907      	ldr	r1, [pc, #28]	; (800bde0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bdc2:	4808      	ldr	r0, [pc, #32]	; (800bde4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bdc4:	f7ff fdbc 	bl	800b940 <USBD_GetString>
 800bdc8:	e004      	b.n	800bdd4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800bdca:	683a      	ldr	r2, [r7, #0]
 800bdcc:	4904      	ldr	r1, [pc, #16]	; (800bde0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 800bdce:	4805      	ldr	r0, [pc, #20]	; (800bde4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800bdd0:	f7ff fdb6 	bl	800b940 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bdd4:	4b02      	ldr	r3, [pc, #8]	; (800bde0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800bdd6:	4618      	mov	r0, r3
 800bdd8:	3708      	adds	r7, #8
 800bdda:	46bd      	mov	sp, r7
 800bddc:	bd80      	pop	{r7, pc}
 800bdde:	bf00      	nop
 800bde0:	20001944 	.word	0x20001944
 800bde4:	0800d0f0 	.word	0x0800d0f0

0800bde8 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b083      	sub	sp, #12
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	6039      	str	r1, [r7, #0]
 800bdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	220c      	movs	r2, #12
 800bdf8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800bdfa:	4b03      	ldr	r3, [pc, #12]	; (800be08 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr
 800be08:	2000016c 	.word	0x2000016c

0800be0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800be0c:	b580      	push	{r7, lr}
 800be0e:	b084      	sub	sp, #16
 800be10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800be12:	4b0f      	ldr	r3, [pc, #60]	; (800be50 <Get_SerialNum+0x44>)
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800be18:	4b0e      	ldr	r3, [pc, #56]	; (800be54 <Get_SerialNum+0x48>)
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800be1e:	4b0e      	ldr	r3, [pc, #56]	; (800be58 <Get_SerialNum+0x4c>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	4413      	add	r3, r2
 800be2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d009      	beq.n	800be46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800be32:	2208      	movs	r2, #8
 800be34:	4909      	ldr	r1, [pc, #36]	; (800be5c <Get_SerialNum+0x50>)
 800be36:	68f8      	ldr	r0, [r7, #12]
 800be38:	f000 f814 	bl	800be64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800be3c:	2204      	movs	r2, #4
 800be3e:	4908      	ldr	r1, [pc, #32]	; (800be60 <Get_SerialNum+0x54>)
 800be40:	68b8      	ldr	r0, [r7, #8]
 800be42:	f000 f80f 	bl	800be64 <IntToUnicode>
  }
}
 800be46:	bf00      	nop
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop
 800be50:	1ff0f420 	.word	0x1ff0f420
 800be54:	1ff0f424 	.word	0x1ff0f424
 800be58:	1ff0f428 	.word	0x1ff0f428
 800be5c:	2000017e 	.word	0x2000017e
 800be60:	2000018e 	.word	0x2000018e

0800be64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800be64:	b480      	push	{r7}
 800be66:	b087      	sub	sp, #28
 800be68:	af00      	add	r7, sp, #0
 800be6a:	60f8      	str	r0, [r7, #12]
 800be6c:	60b9      	str	r1, [r7, #8]
 800be6e:	4613      	mov	r3, r2
 800be70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800be72:	2300      	movs	r3, #0
 800be74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800be76:	2300      	movs	r3, #0
 800be78:	75fb      	strb	r3, [r7, #23]
 800be7a:	e027      	b.n	800becc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	0f1b      	lsrs	r3, r3, #28
 800be80:	2b09      	cmp	r3, #9
 800be82:	d80b      	bhi.n	800be9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	0f1b      	lsrs	r3, r3, #28
 800be88:	b2da      	uxtb	r2, r3
 800be8a:	7dfb      	ldrb	r3, [r7, #23]
 800be8c:	005b      	lsls	r3, r3, #1
 800be8e:	4619      	mov	r1, r3
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	440b      	add	r3, r1
 800be94:	3230      	adds	r2, #48	; 0x30
 800be96:	b2d2      	uxtb	r2, r2
 800be98:	701a      	strb	r2, [r3, #0]
 800be9a:	e00a      	b.n	800beb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800be9c:	68fb      	ldr	r3, [r7, #12]
 800be9e:	0f1b      	lsrs	r3, r3, #28
 800bea0:	b2da      	uxtb	r2, r3
 800bea2:	7dfb      	ldrb	r3, [r7, #23]
 800bea4:	005b      	lsls	r3, r3, #1
 800bea6:	4619      	mov	r1, r3
 800bea8:	68bb      	ldr	r3, [r7, #8]
 800beaa:	440b      	add	r3, r1
 800beac:	3237      	adds	r2, #55	; 0x37
 800beae:	b2d2      	uxtb	r2, r2
 800beb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	011b      	lsls	r3, r3, #4
 800beb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800beb8:	7dfb      	ldrb	r3, [r7, #23]
 800beba:	005b      	lsls	r3, r3, #1
 800bebc:	3301      	adds	r3, #1
 800bebe:	68ba      	ldr	r2, [r7, #8]
 800bec0:	4413      	add	r3, r2
 800bec2:	2200      	movs	r2, #0
 800bec4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bec6:	7dfb      	ldrb	r3, [r7, #23]
 800bec8:	3301      	adds	r3, #1
 800beca:	75fb      	strb	r3, [r7, #23]
 800becc:	7dfa      	ldrb	r2, [r7, #23]
 800bece:	79fb      	ldrb	r3, [r7, #7]
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d3d3      	bcc.n	800be7c <IntToUnicode+0x18>
  }
}
 800bed4:	bf00      	nop
 800bed6:	bf00      	nop
 800bed8:	371c      	adds	r7, #28
 800beda:	46bd      	mov	sp, r7
 800bedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bee0:	4770      	bx	lr
	...

0800bee4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b0aa      	sub	sp, #168	; 0xa8
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800beec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800bef0:	2200      	movs	r2, #0
 800bef2:	601a      	str	r2, [r3, #0]
 800bef4:	605a      	str	r2, [r3, #4]
 800bef6:	609a      	str	r2, [r3, #8]
 800bef8:	60da      	str	r2, [r3, #12]
 800befa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800befc:	f107 0310 	add.w	r3, r7, #16
 800bf00:	2284      	movs	r2, #132	; 0x84
 800bf02:	2100      	movs	r1, #0
 800bf04:	4618      	mov	r0, r3
 800bf06:	f000 fc33 	bl	800c770 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4a26      	ldr	r2, [pc, #152]	; (800bfa8 <HAL_PCD_MspInit+0xc4>)
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d145      	bne.n	800bfa0 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800bf14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bf18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800bf20:	f107 0310 	add.w	r3, r7, #16
 800bf24:	4618      	mov	r0, r3
 800bf26:	f7fa fd75 	bl	8006a14 <HAL_RCCEx_PeriphCLKConfig>
 800bf2a:	4603      	mov	r3, r0
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d001      	beq.n	800bf34 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800bf30:	f7f5 fc60 	bl	80017f4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bf34:	4b1d      	ldr	r3, [pc, #116]	; (800bfac <HAL_PCD_MspInit+0xc8>)
 800bf36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf38:	4a1c      	ldr	r2, [pc, #112]	; (800bfac <HAL_PCD_MspInit+0xc8>)
 800bf3a:	f043 0302 	orr.w	r3, r3, #2
 800bf3e:	6313      	str	r3, [r2, #48]	; 0x30
 800bf40:	4b1a      	ldr	r3, [pc, #104]	; (800bfac <HAL_PCD_MspInit+0xc8>)
 800bf42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf44:	f003 0302 	and.w	r3, r3, #2
 800bf48:	60fb      	str	r3, [r7, #12]
 800bf4a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800bf4c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800bf50:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf54:	2302      	movs	r3, #2
 800bf56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf60:	2303      	movs	r3, #3
 800bf62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800bf66:	230c      	movs	r3, #12
 800bf68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf6c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800bf70:	4619      	mov	r1, r3
 800bf72:	480f      	ldr	r0, [pc, #60]	; (800bfb0 <HAL_PCD_MspInit+0xcc>)
 800bf74:	f7f8 fb9e 	bl	80046b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800bf78:	4b0c      	ldr	r3, [pc, #48]	; (800bfac <HAL_PCD_MspInit+0xc8>)
 800bf7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf7c:	4a0b      	ldr	r2, [pc, #44]	; (800bfac <HAL_PCD_MspInit+0xc8>)
 800bf7e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf82:	6313      	str	r3, [r2, #48]	; 0x30
 800bf84:	4b09      	ldr	r3, [pc, #36]	; (800bfac <HAL_PCD_MspInit+0xc8>)
 800bf86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf8c:	60bb      	str	r3, [r7, #8]
 800bf8e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800bf90:	2200      	movs	r2, #0
 800bf92:	2100      	movs	r1, #0
 800bf94:	204d      	movs	r0, #77	; 0x4d
 800bf96:	f7f8 f86c 	bl	8004072 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800bf9a:	204d      	movs	r0, #77	; 0x4d
 800bf9c:	f7f8 f885 	bl	80040aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800bfa0:	bf00      	nop
 800bfa2:	37a8      	adds	r7, #168	; 0xa8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	40040000 	.word	0x40040000
 800bfac:	40023800 	.word	0x40023800
 800bfb0:	40020400 	.word	0x40020400

0800bfb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b082      	sub	sp, #8
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bfc8:	4619      	mov	r1, r3
 800bfca:	4610      	mov	r0, r2
 800bfcc:	f7fe fb2f 	bl	800a62e <USBD_LL_SetupStage>
}
 800bfd0:	bf00      	nop
 800bfd2:	3708      	adds	r7, #8
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	bd80      	pop	{r7, pc}

0800bfd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b082      	sub	sp, #8
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
 800bfe0:	460b      	mov	r3, r1
 800bfe2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800bfea:	78fa      	ldrb	r2, [r7, #3]
 800bfec:	6879      	ldr	r1, [r7, #4]
 800bfee:	4613      	mov	r3, r2
 800bff0:	00db      	lsls	r3, r3, #3
 800bff2:	4413      	add	r3, r2
 800bff4:	009b      	lsls	r3, r3, #2
 800bff6:	440b      	add	r3, r1
 800bff8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	78fb      	ldrb	r3, [r7, #3]
 800c000:	4619      	mov	r1, r3
 800c002:	f7fe fb69 	bl	800a6d8 <USBD_LL_DataOutStage>
}
 800c006:	bf00      	nop
 800c008:	3708      	adds	r7, #8
 800c00a:	46bd      	mov	sp, r7
 800c00c:	bd80      	pop	{r7, pc}

0800c00e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c00e:	b580      	push	{r7, lr}
 800c010:	b082      	sub	sp, #8
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800c020:	78fa      	ldrb	r2, [r7, #3]
 800c022:	6879      	ldr	r1, [r7, #4]
 800c024:	4613      	mov	r3, r2
 800c026:	00db      	lsls	r3, r3, #3
 800c028:	4413      	add	r3, r2
 800c02a:	009b      	lsls	r3, r3, #2
 800c02c:	440b      	add	r3, r1
 800c02e:	334c      	adds	r3, #76	; 0x4c
 800c030:	681a      	ldr	r2, [r3, #0]
 800c032:	78fb      	ldrb	r3, [r7, #3]
 800c034:	4619      	mov	r1, r3
 800c036:	f7fe fc02 	bl	800a83e <USBD_LL_DataInStage>
}
 800c03a:	bf00      	nop
 800c03c:	3708      	adds	r7, #8
 800c03e:	46bd      	mov	sp, r7
 800c040:	bd80      	pop	{r7, pc}

0800c042 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c042:	b580      	push	{r7, lr}
 800c044:	b082      	sub	sp, #8
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c050:	4618      	mov	r0, r3
 800c052:	f7fe fd36 	bl	800aac2 <USBD_LL_SOF>
}
 800c056:	bf00      	nop
 800c058:	3708      	adds	r7, #8
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c05e:	b580      	push	{r7, lr}
 800c060:	b084      	sub	sp, #16
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c066:	2301      	movs	r3, #1
 800c068:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	68db      	ldr	r3, [r3, #12]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d102      	bne.n	800c078 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c072:	2300      	movs	r3, #0
 800c074:	73fb      	strb	r3, [r7, #15]
 800c076:	e008      	b.n	800c08a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	68db      	ldr	r3, [r3, #12]
 800c07c:	2b02      	cmp	r3, #2
 800c07e:	d102      	bne.n	800c086 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c080:	2301      	movs	r3, #1
 800c082:	73fb      	strb	r3, [r7, #15]
 800c084:	e001      	b.n	800c08a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c086:	f7f5 fbb5 	bl	80017f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c090:	7bfa      	ldrb	r2, [r7, #15]
 800c092:	4611      	mov	r1, r2
 800c094:	4618      	mov	r0, r3
 800c096:	f7fe fcd6 	bl	800aa46 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7fe fc7e 	bl	800a9a2 <USBD_LL_Reset>
}
 800c0a6:	bf00      	nop
 800c0a8:	3710      	adds	r7, #16
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
	...

0800c0b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f7fe fcd1 	bl	800aa66 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	687a      	ldr	r2, [r7, #4]
 800c0d0:	6812      	ldr	r2, [r2, #0]
 800c0d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c0d6:	f043 0301 	orr.w	r3, r3, #1
 800c0da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a1b      	ldr	r3, [r3, #32]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d005      	beq.n	800c0f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c0e4:	4b04      	ldr	r3, [pc, #16]	; (800c0f8 <HAL_PCD_SuspendCallback+0x48>)
 800c0e6:	691b      	ldr	r3, [r3, #16]
 800c0e8:	4a03      	ldr	r2, [pc, #12]	; (800c0f8 <HAL_PCD_SuspendCallback+0x48>)
 800c0ea:	f043 0306 	orr.w	r3, r3, #6
 800c0ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c0f0:	bf00      	nop
 800c0f2:	3708      	adds	r7, #8
 800c0f4:	46bd      	mov	sp, r7
 800c0f6:	bd80      	pop	{r7, pc}
 800c0f8:	e000ed00 	.word	0xe000ed00

0800c0fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b082      	sub	sp, #8
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c10a:	4618      	mov	r0, r3
 800c10c:	f7fe fcc1 	bl	800aa92 <USBD_LL_Resume>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c118:	b580      	push	{r7, lr}
 800c11a:	b082      	sub	sp, #8
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
 800c120:	460b      	mov	r3, r1
 800c122:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c12a:	78fa      	ldrb	r2, [r7, #3]
 800c12c:	4611      	mov	r1, r2
 800c12e:	4618      	mov	r0, r3
 800c130:	f7fe fd19 	bl	800ab66 <USBD_LL_IsoOUTIncomplete>
}
 800c134:	bf00      	nop
 800c136:	3708      	adds	r7, #8
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b082      	sub	sp, #8
 800c140:	af00      	add	r7, sp, #0
 800c142:	6078      	str	r0, [r7, #4]
 800c144:	460b      	mov	r3, r1
 800c146:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c14e:	78fa      	ldrb	r2, [r7, #3]
 800c150:	4611      	mov	r1, r2
 800c152:	4618      	mov	r0, r3
 800c154:	f7fe fcd5 	bl	800ab02 <USBD_LL_IsoINIncomplete>
}
 800c158:	bf00      	nop
 800c15a:	3708      	adds	r7, #8
 800c15c:	46bd      	mov	sp, r7
 800c15e:	bd80      	pop	{r7, pc}

0800c160 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c160:	b580      	push	{r7, lr}
 800c162:	b082      	sub	sp, #8
 800c164:	af00      	add	r7, sp, #0
 800c166:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c16e:	4618      	mov	r0, r3
 800c170:	f7fe fd2b 	bl	800abca <USBD_LL_DevConnected>
}
 800c174:	bf00      	nop
 800c176:	3708      	adds	r7, #8
 800c178:	46bd      	mov	sp, r7
 800c17a:	bd80      	pop	{r7, pc}

0800c17c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c17c:	b580      	push	{r7, lr}
 800c17e:	b082      	sub	sp, #8
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c18a:	4618      	mov	r0, r3
 800c18c:	f7fe fd28 	bl	800abe0 <USBD_LL_DevDisconnected>
}
 800c190:	bf00      	nop
 800c192:	3708      	adds	r7, #8
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}

0800c198 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	2b01      	cmp	r3, #1
 800c1a6:	d140      	bne.n	800c22a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c1a8:	4a22      	ldr	r2, [pc, #136]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	4a20      	ldr	r2, [pc, #128]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c1b8:	4b1e      	ldr	r3, [pc, #120]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1ba:	4a1f      	ldr	r2, [pc, #124]	; (800c238 <USBD_LL_Init+0xa0>)
 800c1bc:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800c1be:	4b1d      	ldr	r3, [pc, #116]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1c0:	2208      	movs	r2, #8
 800c1c2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c1c4:	4b1b      	ldr	r3, [pc, #108]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1c6:	2202      	movs	r2, #2
 800c1c8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c1ca:	4b1a      	ldr	r3, [pc, #104]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1cc:	2200      	movs	r2, #0
 800c1ce:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c1d0:	4b18      	ldr	r3, [pc, #96]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1d2:	2202      	movs	r2, #2
 800c1d4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c1d6:	4b17      	ldr	r3, [pc, #92]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1d8:	2200      	movs	r2, #0
 800c1da:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c1dc:	4b15      	ldr	r3, [pc, #84]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1de:	2200      	movs	r2, #0
 800c1e0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c1e2:	4b14      	ldr	r3, [pc, #80]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c1e8:	4b12      	ldr	r3, [pc, #72]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1ea:	2200      	movs	r2, #0
 800c1ec:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c1ee:	4b11      	ldr	r3, [pc, #68]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c1f4:	4b0f      	ldr	r3, [pc, #60]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c1fa:	480e      	ldr	r0, [pc, #56]	; (800c234 <USBD_LL_Init+0x9c>)
 800c1fc:	f7f8 fc39 	bl	8004a72 <HAL_PCD_Init>
 800c200:	4603      	mov	r3, r0
 800c202:	2b00      	cmp	r3, #0
 800c204:	d001      	beq.n	800c20a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c206:	f7f5 faf5 	bl	80017f4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c20a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c20e:	4809      	ldr	r0, [pc, #36]	; (800c234 <USBD_LL_Init+0x9c>)
 800c210:	f7f9 feb3 	bl	8005f7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c214:	2280      	movs	r2, #128	; 0x80
 800c216:	2100      	movs	r1, #0
 800c218:	4806      	ldr	r0, [pc, #24]	; (800c234 <USBD_LL_Init+0x9c>)
 800c21a:	f7f9 fe67 	bl	8005eec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c21e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c222:	2101      	movs	r1, #1
 800c224:	4803      	ldr	r0, [pc, #12]	; (800c234 <USBD_LL_Init+0x9c>)
 800c226:	f7f9 fe61 	bl	8005eec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c22a:	2300      	movs	r3, #0
}
 800c22c:	4618      	mov	r0, r3
 800c22e:	3708      	adds	r7, #8
 800c230:	46bd      	mov	sp, r7
 800c232:	bd80      	pop	{r7, pc}
 800c234:	20001b44 	.word	0x20001b44
 800c238:	40040000 	.word	0x40040000

0800c23c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b084      	sub	sp, #16
 800c240:	af00      	add	r7, sp, #0
 800c242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c244:	2300      	movs	r3, #0
 800c246:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c248:	2300      	movs	r3, #0
 800c24a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c252:	4618      	mov	r0, r3
 800c254:	f7f8 fd31 	bl	8004cba <HAL_PCD_Start>
 800c258:	4603      	mov	r3, r0
 800c25a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c25c:	7bfb      	ldrb	r3, [r7, #15]
 800c25e:	4618      	mov	r0, r3
 800c260:	f000 f97e 	bl	800c560 <USBD_Get_USB_Status>
 800c264:	4603      	mov	r3, r0
 800c266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c268:	7bbb      	ldrb	r3, [r7, #14]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	3710      	adds	r7, #16
 800c26e:	46bd      	mov	sp, r7
 800c270:	bd80      	pop	{r7, pc}

0800c272 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c272:	b580      	push	{r7, lr}
 800c274:	b084      	sub	sp, #16
 800c276:	af00      	add	r7, sp, #0
 800c278:	6078      	str	r0, [r7, #4]
 800c27a:	4608      	mov	r0, r1
 800c27c:	4611      	mov	r1, r2
 800c27e:	461a      	mov	r2, r3
 800c280:	4603      	mov	r3, r0
 800c282:	70fb      	strb	r3, [r7, #3]
 800c284:	460b      	mov	r3, r1
 800c286:	70bb      	strb	r3, [r7, #2]
 800c288:	4613      	mov	r3, r2
 800c28a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c290:	2300      	movs	r3, #0
 800c292:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c29a:	78bb      	ldrb	r3, [r7, #2]
 800c29c:	883a      	ldrh	r2, [r7, #0]
 800c29e:	78f9      	ldrb	r1, [r7, #3]
 800c2a0:	f7f9 fa1e 	bl	80056e0 <HAL_PCD_EP_Open>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2a8:	7bfb      	ldrb	r3, [r7, #15]
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f000 f958 	bl	800c560 <USBD_Get_USB_Status>
 800c2b0:	4603      	mov	r3, r0
 800c2b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	3710      	adds	r7, #16
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	bd80      	pop	{r7, pc}

0800c2be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2be:	b580      	push	{r7, lr}
 800c2c0:	b084      	sub	sp, #16
 800c2c2:	af00      	add	r7, sp, #0
 800c2c4:	6078      	str	r0, [r7, #4]
 800c2c6:	460b      	mov	r3, r1
 800c2c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	4611      	mov	r1, r2
 800c2dc:	4618      	mov	r0, r3
 800c2de:	f7f9 fa67 	bl	80057b0 <HAL_PCD_EP_Close>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c2e6:	7bfb      	ldrb	r3, [r7, #15]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f000 f939 	bl	800c560 <USBD_Get_USB_Status>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c2f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2f4:	4618      	mov	r0, r3
 800c2f6:	3710      	adds	r7, #16
 800c2f8:	46bd      	mov	sp, r7
 800c2fa:	bd80      	pop	{r7, pc}

0800c2fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b084      	sub	sp, #16
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
 800c304:	460b      	mov	r3, r1
 800c306:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c30c:	2300      	movs	r3, #0
 800c30e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c316:	78fa      	ldrb	r2, [r7, #3]
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7f9 fb3f 	bl	800599e <HAL_PCD_EP_SetStall>
 800c320:	4603      	mov	r3, r0
 800c322:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c324:	7bfb      	ldrb	r3, [r7, #15]
 800c326:	4618      	mov	r0, r3
 800c328:	f000 f91a 	bl	800c560 <USBD_Get_USB_Status>
 800c32c:	4603      	mov	r3, r0
 800c32e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c330:	7bbb      	ldrb	r3, [r7, #14]
}
 800c332:	4618      	mov	r0, r3
 800c334:	3710      	adds	r7, #16
 800c336:	46bd      	mov	sp, r7
 800c338:	bd80      	pop	{r7, pc}

0800c33a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c33a:	b580      	push	{r7, lr}
 800c33c:	b084      	sub	sp, #16
 800c33e:	af00      	add	r7, sp, #0
 800c340:	6078      	str	r0, [r7, #4]
 800c342:	460b      	mov	r3, r1
 800c344:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c346:	2300      	movs	r3, #0
 800c348:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c34a:	2300      	movs	r3, #0
 800c34c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c354:	78fa      	ldrb	r2, [r7, #3]
 800c356:	4611      	mov	r1, r2
 800c358:	4618      	mov	r0, r3
 800c35a:	f7f9 fb84 	bl	8005a66 <HAL_PCD_EP_ClrStall>
 800c35e:	4603      	mov	r3, r0
 800c360:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c362:	7bfb      	ldrb	r3, [r7, #15]
 800c364:	4618      	mov	r0, r3
 800c366:	f000 f8fb 	bl	800c560 <USBD_Get_USB_Status>
 800c36a:	4603      	mov	r3, r0
 800c36c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c36e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c370:	4618      	mov	r0, r3
 800c372:	3710      	adds	r7, #16
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c378:	b480      	push	{r7}
 800c37a:	b085      	sub	sp, #20
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	460b      	mov	r3, r1
 800c382:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c38a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c38c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c390:	2b00      	cmp	r3, #0
 800c392:	da0b      	bge.n	800c3ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c394:	78fb      	ldrb	r3, [r7, #3]
 800c396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c39a:	68f9      	ldr	r1, [r7, #12]
 800c39c:	4613      	mov	r3, r2
 800c39e:	00db      	lsls	r3, r3, #3
 800c3a0:	4413      	add	r3, r2
 800c3a2:	009b      	lsls	r3, r3, #2
 800c3a4:	440b      	add	r3, r1
 800c3a6:	333e      	adds	r3, #62	; 0x3e
 800c3a8:	781b      	ldrb	r3, [r3, #0]
 800c3aa:	e00b      	b.n	800c3c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c3ac:	78fb      	ldrb	r3, [r7, #3]
 800c3ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c3b2:	68f9      	ldr	r1, [r7, #12]
 800c3b4:	4613      	mov	r3, r2
 800c3b6:	00db      	lsls	r3, r3, #3
 800c3b8:	4413      	add	r3, r2
 800c3ba:	009b      	lsls	r3, r3, #2
 800c3bc:	440b      	add	r3, r1
 800c3be:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c3c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3714      	adds	r7, #20
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	460b      	mov	r3, r1
 800c3da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3ea:	78fa      	ldrb	r2, [r7, #3]
 800c3ec:	4611      	mov	r1, r2
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f7f9 f951 	bl	8005696 <HAL_PCD_SetAddress>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	f000 f8b0 	bl	800c560 <USBD_Get_USB_Status>
 800c400:	4603      	mov	r3, r0
 800c402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c404:	7bbb      	ldrb	r3, [r7, #14]
}
 800c406:	4618      	mov	r0, r3
 800c408:	3710      	adds	r7, #16
 800c40a:	46bd      	mov	sp, r7
 800c40c:	bd80      	pop	{r7, pc}

0800c40e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c40e:	b580      	push	{r7, lr}
 800c410:	b086      	sub	sp, #24
 800c412:	af00      	add	r7, sp, #0
 800c414:	60f8      	str	r0, [r7, #12]
 800c416:	607a      	str	r2, [r7, #4]
 800c418:	603b      	str	r3, [r7, #0]
 800c41a:	460b      	mov	r3, r1
 800c41c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c41e:	2300      	movs	r3, #0
 800c420:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c42c:	7af9      	ldrb	r1, [r7, #11]
 800c42e:	683b      	ldr	r3, [r7, #0]
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	f7f9 fa6a 	bl	800590a <HAL_PCD_EP_Transmit>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	4618      	mov	r0, r3
 800c43e:	f000 f88f 	bl	800c560 <USBD_Get_USB_Status>
 800c442:	4603      	mov	r3, r0
 800c444:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c446:	7dbb      	ldrb	r3, [r7, #22]
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3718      	adds	r7, #24
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	607a      	str	r2, [r7, #4]
 800c45a:	603b      	str	r3, [r7, #0]
 800c45c:	460b      	mov	r3, r1
 800c45e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c464:	2300      	movs	r3, #0
 800c466:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c46e:	7af9      	ldrb	r1, [r7, #11]
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	f7f9 f9e6 	bl	8005844 <HAL_PCD_EP_Receive>
 800c478:	4603      	mov	r3, r0
 800c47a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c47c:	7dfb      	ldrb	r3, [r7, #23]
 800c47e:	4618      	mov	r0, r3
 800c480:	f000 f86e 	bl	800c560 <USBD_Get_USB_Status>
 800c484:	4603      	mov	r3, r0
 800c486:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c488:	7dbb      	ldrb	r3, [r7, #22]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3718      	adds	r7, #24
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b082      	sub	sp, #8
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	460b      	mov	r3, r1
 800c49c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4a4:	78fa      	ldrb	r2, [r7, #3]
 800c4a6:	4611      	mov	r1, r2
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	f7f9 fa16 	bl	80058da <HAL_PCD_EP_GetRxCount>
 800c4ae:	4603      	mov	r3, r0
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}

0800c4b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b082      	sub	sp, #8
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	6078      	str	r0, [r7, #4]
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800c4c4:	78fb      	ldrb	r3, [r7, #3]
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d002      	beq.n	800c4d0 <HAL_PCDEx_LPM_Callback+0x18>
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d01f      	beq.n	800c50e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800c4ce:	e03b      	b.n	800c548 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d007      	beq.n	800c4e8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800c4d8:	f000 f83c 	bl	800c554 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c4dc:	4b1c      	ldr	r3, [pc, #112]	; (800c550 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	4a1b      	ldr	r2, [pc, #108]	; (800c550 <HAL_PCDEx_LPM_Callback+0x98>)
 800c4e2:	f023 0306 	bic.w	r3, r3, #6
 800c4e6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	6812      	ldr	r2, [r2, #0]
 800c4f6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c4fa:	f023 0301 	bic.w	r3, r3, #1
 800c4fe:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c506:	4618      	mov	r0, r3
 800c508:	f7fe fac3 	bl	800aa92 <USBD_LL_Resume>
    break;
 800c50c:	e01c      	b.n	800c548 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	6812      	ldr	r2, [r2, #0]
 800c51c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c520:	f043 0301 	orr.w	r3, r3, #1
 800c524:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c52c:	4618      	mov	r0, r3
 800c52e:	f7fe fa9a 	bl	800aa66 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6a1b      	ldr	r3, [r3, #32]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d005      	beq.n	800c546 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <HAL_PCDEx_LPM_Callback+0x98>)
 800c53c:	691b      	ldr	r3, [r3, #16]
 800c53e:	4a04      	ldr	r2, [pc, #16]	; (800c550 <HAL_PCDEx_LPM_Callback+0x98>)
 800c540:	f043 0306 	orr.w	r3, r3, #6
 800c544:	6113      	str	r3, [r2, #16]
    break;
 800c546:	bf00      	nop
}
 800c548:	bf00      	nop
 800c54a:	3708      	adds	r7, #8
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	e000ed00 	.word	0xe000ed00

0800c554 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800c558:	f7f4 fd88 	bl	800106c <SystemClock_Config>
}
 800c55c:	bf00      	nop
 800c55e:	bd80      	pop	{r7, pc}

0800c560 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	4603      	mov	r3, r0
 800c568:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c56a:	2300      	movs	r3, #0
 800c56c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c56e:	79fb      	ldrb	r3, [r7, #7]
 800c570:	2b03      	cmp	r3, #3
 800c572:	d817      	bhi.n	800c5a4 <USBD_Get_USB_Status+0x44>
 800c574:	a201      	add	r2, pc, #4	; (adr r2, 800c57c <USBD_Get_USB_Status+0x1c>)
 800c576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c57a:	bf00      	nop
 800c57c:	0800c58d 	.word	0x0800c58d
 800c580:	0800c593 	.word	0x0800c593
 800c584:	0800c599 	.word	0x0800c599
 800c588:	0800c59f 	.word	0x0800c59f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c58c:	2300      	movs	r3, #0
 800c58e:	73fb      	strb	r3, [r7, #15]
    break;
 800c590:	e00b      	b.n	800c5aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	73fb      	strb	r3, [r7, #15]
    break;
 800c596:	e008      	b.n	800c5aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c598:	2301      	movs	r3, #1
 800c59a:	73fb      	strb	r3, [r7, #15]
    break;
 800c59c:	e005      	b.n	800c5aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c59e:	2303      	movs	r3, #3
 800c5a0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a2:	e002      	b.n	800c5aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5a4:	2303      	movs	r3, #3
 800c5a6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5a8:	bf00      	nop
  }
  return usb_status;
 800c5aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <malloc>:
 800c5b8:	4b02      	ldr	r3, [pc, #8]	; (800c5c4 <malloc+0xc>)
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	6818      	ldr	r0, [r3, #0]
 800c5be:	f000 b82b 	b.w	800c618 <_malloc_r>
 800c5c2:	bf00      	nop
 800c5c4:	200001e4 	.word	0x200001e4

0800c5c8 <free>:
 800c5c8:	4b02      	ldr	r3, [pc, #8]	; (800c5d4 <free+0xc>)
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	6818      	ldr	r0, [r3, #0]
 800c5ce:	f000 b913 	b.w	800c7f8 <_free_r>
 800c5d2:	bf00      	nop
 800c5d4:	200001e4 	.word	0x200001e4

0800c5d8 <sbrk_aligned>:
 800c5d8:	b570      	push	{r4, r5, r6, lr}
 800c5da:	4e0e      	ldr	r6, [pc, #56]	; (800c614 <sbrk_aligned+0x3c>)
 800c5dc:	460c      	mov	r4, r1
 800c5de:	6831      	ldr	r1, [r6, #0]
 800c5e0:	4605      	mov	r5, r0
 800c5e2:	b911      	cbnz	r1, 800c5ea <sbrk_aligned+0x12>
 800c5e4:	f000 f8cc 	bl	800c780 <_sbrk_r>
 800c5e8:	6030      	str	r0, [r6, #0]
 800c5ea:	4621      	mov	r1, r4
 800c5ec:	4628      	mov	r0, r5
 800c5ee:	f000 f8c7 	bl	800c780 <_sbrk_r>
 800c5f2:	1c43      	adds	r3, r0, #1
 800c5f4:	d00a      	beq.n	800c60c <sbrk_aligned+0x34>
 800c5f6:	1cc4      	adds	r4, r0, #3
 800c5f8:	f024 0403 	bic.w	r4, r4, #3
 800c5fc:	42a0      	cmp	r0, r4
 800c5fe:	d007      	beq.n	800c610 <sbrk_aligned+0x38>
 800c600:	1a21      	subs	r1, r4, r0
 800c602:	4628      	mov	r0, r5
 800c604:	f000 f8bc 	bl	800c780 <_sbrk_r>
 800c608:	3001      	adds	r0, #1
 800c60a:	d101      	bne.n	800c610 <sbrk_aligned+0x38>
 800c60c:	f04f 34ff 	mov.w	r4, #4294967295
 800c610:	4620      	mov	r0, r4
 800c612:	bd70      	pop	{r4, r5, r6, pc}
 800c614:	20002050 	.word	0x20002050

0800c618 <_malloc_r>:
 800c618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c61c:	1ccd      	adds	r5, r1, #3
 800c61e:	f025 0503 	bic.w	r5, r5, #3
 800c622:	3508      	adds	r5, #8
 800c624:	2d0c      	cmp	r5, #12
 800c626:	bf38      	it	cc
 800c628:	250c      	movcc	r5, #12
 800c62a:	2d00      	cmp	r5, #0
 800c62c:	4607      	mov	r7, r0
 800c62e:	db01      	blt.n	800c634 <_malloc_r+0x1c>
 800c630:	42a9      	cmp	r1, r5
 800c632:	d905      	bls.n	800c640 <_malloc_r+0x28>
 800c634:	230c      	movs	r3, #12
 800c636:	603b      	str	r3, [r7, #0]
 800c638:	2600      	movs	r6, #0
 800c63a:	4630      	mov	r0, r6
 800c63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c640:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c714 <_malloc_r+0xfc>
 800c644:	f000 f868 	bl	800c718 <__malloc_lock>
 800c648:	f8d8 3000 	ldr.w	r3, [r8]
 800c64c:	461c      	mov	r4, r3
 800c64e:	bb5c      	cbnz	r4, 800c6a8 <_malloc_r+0x90>
 800c650:	4629      	mov	r1, r5
 800c652:	4638      	mov	r0, r7
 800c654:	f7ff ffc0 	bl	800c5d8 <sbrk_aligned>
 800c658:	1c43      	adds	r3, r0, #1
 800c65a:	4604      	mov	r4, r0
 800c65c:	d155      	bne.n	800c70a <_malloc_r+0xf2>
 800c65e:	f8d8 4000 	ldr.w	r4, [r8]
 800c662:	4626      	mov	r6, r4
 800c664:	2e00      	cmp	r6, #0
 800c666:	d145      	bne.n	800c6f4 <_malloc_r+0xdc>
 800c668:	2c00      	cmp	r4, #0
 800c66a:	d048      	beq.n	800c6fe <_malloc_r+0xe6>
 800c66c:	6823      	ldr	r3, [r4, #0]
 800c66e:	4631      	mov	r1, r6
 800c670:	4638      	mov	r0, r7
 800c672:	eb04 0903 	add.w	r9, r4, r3
 800c676:	f000 f883 	bl	800c780 <_sbrk_r>
 800c67a:	4581      	cmp	r9, r0
 800c67c:	d13f      	bne.n	800c6fe <_malloc_r+0xe6>
 800c67e:	6821      	ldr	r1, [r4, #0]
 800c680:	1a6d      	subs	r5, r5, r1
 800c682:	4629      	mov	r1, r5
 800c684:	4638      	mov	r0, r7
 800c686:	f7ff ffa7 	bl	800c5d8 <sbrk_aligned>
 800c68a:	3001      	adds	r0, #1
 800c68c:	d037      	beq.n	800c6fe <_malloc_r+0xe6>
 800c68e:	6823      	ldr	r3, [r4, #0]
 800c690:	442b      	add	r3, r5
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	f8d8 3000 	ldr.w	r3, [r8]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d038      	beq.n	800c70e <_malloc_r+0xf6>
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	42a2      	cmp	r2, r4
 800c6a0:	d12b      	bne.n	800c6fa <_malloc_r+0xe2>
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	605a      	str	r2, [r3, #4]
 800c6a6:	e00f      	b.n	800c6c8 <_malloc_r+0xb0>
 800c6a8:	6822      	ldr	r2, [r4, #0]
 800c6aa:	1b52      	subs	r2, r2, r5
 800c6ac:	d41f      	bmi.n	800c6ee <_malloc_r+0xd6>
 800c6ae:	2a0b      	cmp	r2, #11
 800c6b0:	d917      	bls.n	800c6e2 <_malloc_r+0xca>
 800c6b2:	1961      	adds	r1, r4, r5
 800c6b4:	42a3      	cmp	r3, r4
 800c6b6:	6025      	str	r5, [r4, #0]
 800c6b8:	bf18      	it	ne
 800c6ba:	6059      	strne	r1, [r3, #4]
 800c6bc:	6863      	ldr	r3, [r4, #4]
 800c6be:	bf08      	it	eq
 800c6c0:	f8c8 1000 	streq.w	r1, [r8]
 800c6c4:	5162      	str	r2, [r4, r5]
 800c6c6:	604b      	str	r3, [r1, #4]
 800c6c8:	4638      	mov	r0, r7
 800c6ca:	f104 060b 	add.w	r6, r4, #11
 800c6ce:	f000 f829 	bl	800c724 <__malloc_unlock>
 800c6d2:	f026 0607 	bic.w	r6, r6, #7
 800c6d6:	1d23      	adds	r3, r4, #4
 800c6d8:	1af2      	subs	r2, r6, r3
 800c6da:	d0ae      	beq.n	800c63a <_malloc_r+0x22>
 800c6dc:	1b9b      	subs	r3, r3, r6
 800c6de:	50a3      	str	r3, [r4, r2]
 800c6e0:	e7ab      	b.n	800c63a <_malloc_r+0x22>
 800c6e2:	42a3      	cmp	r3, r4
 800c6e4:	6862      	ldr	r2, [r4, #4]
 800c6e6:	d1dd      	bne.n	800c6a4 <_malloc_r+0x8c>
 800c6e8:	f8c8 2000 	str.w	r2, [r8]
 800c6ec:	e7ec      	b.n	800c6c8 <_malloc_r+0xb0>
 800c6ee:	4623      	mov	r3, r4
 800c6f0:	6864      	ldr	r4, [r4, #4]
 800c6f2:	e7ac      	b.n	800c64e <_malloc_r+0x36>
 800c6f4:	4634      	mov	r4, r6
 800c6f6:	6876      	ldr	r6, [r6, #4]
 800c6f8:	e7b4      	b.n	800c664 <_malloc_r+0x4c>
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	e7cc      	b.n	800c698 <_malloc_r+0x80>
 800c6fe:	230c      	movs	r3, #12
 800c700:	603b      	str	r3, [r7, #0]
 800c702:	4638      	mov	r0, r7
 800c704:	f000 f80e 	bl	800c724 <__malloc_unlock>
 800c708:	e797      	b.n	800c63a <_malloc_r+0x22>
 800c70a:	6025      	str	r5, [r4, #0]
 800c70c:	e7dc      	b.n	800c6c8 <_malloc_r+0xb0>
 800c70e:	605b      	str	r3, [r3, #4]
 800c710:	deff      	udf	#255	; 0xff
 800c712:	bf00      	nop
 800c714:	2000204c 	.word	0x2000204c

0800c718 <__malloc_lock>:
 800c718:	4801      	ldr	r0, [pc, #4]	; (800c720 <__malloc_lock+0x8>)
 800c71a:	f000 b86b 	b.w	800c7f4 <__retarget_lock_acquire_recursive>
 800c71e:	bf00      	nop
 800c720:	20002190 	.word	0x20002190

0800c724 <__malloc_unlock>:
 800c724:	4801      	ldr	r0, [pc, #4]	; (800c72c <__malloc_unlock+0x8>)
 800c726:	f000 b866 	b.w	800c7f6 <__retarget_lock_release_recursive>
 800c72a:	bf00      	nop
 800c72c:	20002190 	.word	0x20002190

0800c730 <siprintf>:
 800c730:	b40e      	push	{r1, r2, r3}
 800c732:	b500      	push	{lr}
 800c734:	b09c      	sub	sp, #112	; 0x70
 800c736:	ab1d      	add	r3, sp, #116	; 0x74
 800c738:	9002      	str	r0, [sp, #8]
 800c73a:	9006      	str	r0, [sp, #24]
 800c73c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c740:	4809      	ldr	r0, [pc, #36]	; (800c768 <siprintf+0x38>)
 800c742:	9107      	str	r1, [sp, #28]
 800c744:	9104      	str	r1, [sp, #16]
 800c746:	4909      	ldr	r1, [pc, #36]	; (800c76c <siprintf+0x3c>)
 800c748:	f853 2b04 	ldr.w	r2, [r3], #4
 800c74c:	9105      	str	r1, [sp, #20]
 800c74e:	6800      	ldr	r0, [r0, #0]
 800c750:	9301      	str	r3, [sp, #4]
 800c752:	a902      	add	r1, sp, #8
 800c754:	f000 f8f6 	bl	800c944 <_svfiprintf_r>
 800c758:	9b02      	ldr	r3, [sp, #8]
 800c75a:	2200      	movs	r2, #0
 800c75c:	701a      	strb	r2, [r3, #0]
 800c75e:	b01c      	add	sp, #112	; 0x70
 800c760:	f85d eb04 	ldr.w	lr, [sp], #4
 800c764:	b003      	add	sp, #12
 800c766:	4770      	bx	lr
 800c768:	200001e4 	.word	0x200001e4
 800c76c:	ffff0208 	.word	0xffff0208

0800c770 <memset>:
 800c770:	4402      	add	r2, r0
 800c772:	4603      	mov	r3, r0
 800c774:	4293      	cmp	r3, r2
 800c776:	d100      	bne.n	800c77a <memset+0xa>
 800c778:	4770      	bx	lr
 800c77a:	f803 1b01 	strb.w	r1, [r3], #1
 800c77e:	e7f9      	b.n	800c774 <memset+0x4>

0800c780 <_sbrk_r>:
 800c780:	b538      	push	{r3, r4, r5, lr}
 800c782:	4d06      	ldr	r5, [pc, #24]	; (800c79c <_sbrk_r+0x1c>)
 800c784:	2300      	movs	r3, #0
 800c786:	4604      	mov	r4, r0
 800c788:	4608      	mov	r0, r1
 800c78a:	602b      	str	r3, [r5, #0]
 800c78c:	f7f5 fbbc 	bl	8001f08 <_sbrk>
 800c790:	1c43      	adds	r3, r0, #1
 800c792:	d102      	bne.n	800c79a <_sbrk_r+0x1a>
 800c794:	682b      	ldr	r3, [r5, #0]
 800c796:	b103      	cbz	r3, 800c79a <_sbrk_r+0x1a>
 800c798:	6023      	str	r3, [r4, #0]
 800c79a:	bd38      	pop	{r3, r4, r5, pc}
 800c79c:	2000218c 	.word	0x2000218c

0800c7a0 <__errno>:
 800c7a0:	4b01      	ldr	r3, [pc, #4]	; (800c7a8 <__errno+0x8>)
 800c7a2:	6818      	ldr	r0, [r3, #0]
 800c7a4:	4770      	bx	lr
 800c7a6:	bf00      	nop
 800c7a8:	200001e4 	.word	0x200001e4

0800c7ac <__libc_init_array>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	4d0d      	ldr	r5, [pc, #52]	; (800c7e4 <__libc_init_array+0x38>)
 800c7b0:	4c0d      	ldr	r4, [pc, #52]	; (800c7e8 <__libc_init_array+0x3c>)
 800c7b2:	1b64      	subs	r4, r4, r5
 800c7b4:	10a4      	asrs	r4, r4, #2
 800c7b6:	2600      	movs	r6, #0
 800c7b8:	42a6      	cmp	r6, r4
 800c7ba:	d109      	bne.n	800c7d0 <__libc_init_array+0x24>
 800c7bc:	4d0b      	ldr	r5, [pc, #44]	; (800c7ec <__libc_init_array+0x40>)
 800c7be:	4c0c      	ldr	r4, [pc, #48]	; (800c7f0 <__libc_init_array+0x44>)
 800c7c0:	f000 fbae 	bl	800cf20 <_init>
 800c7c4:	1b64      	subs	r4, r4, r5
 800c7c6:	10a4      	asrs	r4, r4, #2
 800c7c8:	2600      	movs	r6, #0
 800c7ca:	42a6      	cmp	r6, r4
 800c7cc:	d105      	bne.n	800c7da <__libc_init_array+0x2e>
 800c7ce:	bd70      	pop	{r4, r5, r6, pc}
 800c7d0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7d4:	4798      	blx	r3
 800c7d6:	3601      	adds	r6, #1
 800c7d8:	e7ee      	b.n	800c7b8 <__libc_init_array+0xc>
 800c7da:	f855 3b04 	ldr.w	r3, [r5], #4
 800c7de:	4798      	blx	r3
 800c7e0:	3601      	adds	r6, #1
 800c7e2:	e7f2      	b.n	800c7ca <__libc_init_array+0x1e>
 800c7e4:	0801c58c 	.word	0x0801c58c
 800c7e8:	0801c58c 	.word	0x0801c58c
 800c7ec:	0801c58c 	.word	0x0801c58c
 800c7f0:	0801c590 	.word	0x0801c590

0800c7f4 <__retarget_lock_acquire_recursive>:
 800c7f4:	4770      	bx	lr

0800c7f6 <__retarget_lock_release_recursive>:
 800c7f6:	4770      	bx	lr

0800c7f8 <_free_r>:
 800c7f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c7fa:	2900      	cmp	r1, #0
 800c7fc:	d044      	beq.n	800c888 <_free_r+0x90>
 800c7fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c802:	9001      	str	r0, [sp, #4]
 800c804:	2b00      	cmp	r3, #0
 800c806:	f1a1 0404 	sub.w	r4, r1, #4
 800c80a:	bfb8      	it	lt
 800c80c:	18e4      	addlt	r4, r4, r3
 800c80e:	f7ff ff83 	bl	800c718 <__malloc_lock>
 800c812:	4a1e      	ldr	r2, [pc, #120]	; (800c88c <_free_r+0x94>)
 800c814:	9801      	ldr	r0, [sp, #4]
 800c816:	6813      	ldr	r3, [r2, #0]
 800c818:	b933      	cbnz	r3, 800c828 <_free_r+0x30>
 800c81a:	6063      	str	r3, [r4, #4]
 800c81c:	6014      	str	r4, [r2, #0]
 800c81e:	b003      	add	sp, #12
 800c820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c824:	f7ff bf7e 	b.w	800c724 <__malloc_unlock>
 800c828:	42a3      	cmp	r3, r4
 800c82a:	d908      	bls.n	800c83e <_free_r+0x46>
 800c82c:	6825      	ldr	r5, [r4, #0]
 800c82e:	1961      	adds	r1, r4, r5
 800c830:	428b      	cmp	r3, r1
 800c832:	bf01      	itttt	eq
 800c834:	6819      	ldreq	r1, [r3, #0]
 800c836:	685b      	ldreq	r3, [r3, #4]
 800c838:	1949      	addeq	r1, r1, r5
 800c83a:	6021      	streq	r1, [r4, #0]
 800c83c:	e7ed      	b.n	800c81a <_free_r+0x22>
 800c83e:	461a      	mov	r2, r3
 800c840:	685b      	ldr	r3, [r3, #4]
 800c842:	b10b      	cbz	r3, 800c848 <_free_r+0x50>
 800c844:	42a3      	cmp	r3, r4
 800c846:	d9fa      	bls.n	800c83e <_free_r+0x46>
 800c848:	6811      	ldr	r1, [r2, #0]
 800c84a:	1855      	adds	r5, r2, r1
 800c84c:	42a5      	cmp	r5, r4
 800c84e:	d10b      	bne.n	800c868 <_free_r+0x70>
 800c850:	6824      	ldr	r4, [r4, #0]
 800c852:	4421      	add	r1, r4
 800c854:	1854      	adds	r4, r2, r1
 800c856:	42a3      	cmp	r3, r4
 800c858:	6011      	str	r1, [r2, #0]
 800c85a:	d1e0      	bne.n	800c81e <_free_r+0x26>
 800c85c:	681c      	ldr	r4, [r3, #0]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	6053      	str	r3, [r2, #4]
 800c862:	440c      	add	r4, r1
 800c864:	6014      	str	r4, [r2, #0]
 800c866:	e7da      	b.n	800c81e <_free_r+0x26>
 800c868:	d902      	bls.n	800c870 <_free_r+0x78>
 800c86a:	230c      	movs	r3, #12
 800c86c:	6003      	str	r3, [r0, #0]
 800c86e:	e7d6      	b.n	800c81e <_free_r+0x26>
 800c870:	6825      	ldr	r5, [r4, #0]
 800c872:	1961      	adds	r1, r4, r5
 800c874:	428b      	cmp	r3, r1
 800c876:	bf04      	itt	eq
 800c878:	6819      	ldreq	r1, [r3, #0]
 800c87a:	685b      	ldreq	r3, [r3, #4]
 800c87c:	6063      	str	r3, [r4, #4]
 800c87e:	bf04      	itt	eq
 800c880:	1949      	addeq	r1, r1, r5
 800c882:	6021      	streq	r1, [r4, #0]
 800c884:	6054      	str	r4, [r2, #4]
 800c886:	e7ca      	b.n	800c81e <_free_r+0x26>
 800c888:	b003      	add	sp, #12
 800c88a:	bd30      	pop	{r4, r5, pc}
 800c88c:	2000204c 	.word	0x2000204c

0800c890 <__ssputs_r>:
 800c890:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c894:	688e      	ldr	r6, [r1, #8]
 800c896:	461f      	mov	r7, r3
 800c898:	42be      	cmp	r6, r7
 800c89a:	680b      	ldr	r3, [r1, #0]
 800c89c:	4682      	mov	sl, r0
 800c89e:	460c      	mov	r4, r1
 800c8a0:	4690      	mov	r8, r2
 800c8a2:	d82c      	bhi.n	800c8fe <__ssputs_r+0x6e>
 800c8a4:	898a      	ldrh	r2, [r1, #12]
 800c8a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c8aa:	d026      	beq.n	800c8fa <__ssputs_r+0x6a>
 800c8ac:	6965      	ldr	r5, [r4, #20]
 800c8ae:	6909      	ldr	r1, [r1, #16]
 800c8b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c8b4:	eba3 0901 	sub.w	r9, r3, r1
 800c8b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c8bc:	1c7b      	adds	r3, r7, #1
 800c8be:	444b      	add	r3, r9
 800c8c0:	106d      	asrs	r5, r5, #1
 800c8c2:	429d      	cmp	r5, r3
 800c8c4:	bf38      	it	cc
 800c8c6:	461d      	movcc	r5, r3
 800c8c8:	0553      	lsls	r3, r2, #21
 800c8ca:	d527      	bpl.n	800c91c <__ssputs_r+0x8c>
 800c8cc:	4629      	mov	r1, r5
 800c8ce:	f7ff fea3 	bl	800c618 <_malloc_r>
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	b360      	cbz	r0, 800c930 <__ssputs_r+0xa0>
 800c8d6:	6921      	ldr	r1, [r4, #16]
 800c8d8:	464a      	mov	r2, r9
 800c8da:	f000 fadb 	bl	800ce94 <memcpy>
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c8e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c8e8:	81a3      	strh	r3, [r4, #12]
 800c8ea:	6126      	str	r6, [r4, #16]
 800c8ec:	6165      	str	r5, [r4, #20]
 800c8ee:	444e      	add	r6, r9
 800c8f0:	eba5 0509 	sub.w	r5, r5, r9
 800c8f4:	6026      	str	r6, [r4, #0]
 800c8f6:	60a5      	str	r5, [r4, #8]
 800c8f8:	463e      	mov	r6, r7
 800c8fa:	42be      	cmp	r6, r7
 800c8fc:	d900      	bls.n	800c900 <__ssputs_r+0x70>
 800c8fe:	463e      	mov	r6, r7
 800c900:	6820      	ldr	r0, [r4, #0]
 800c902:	4632      	mov	r2, r6
 800c904:	4641      	mov	r1, r8
 800c906:	f000 faab 	bl	800ce60 <memmove>
 800c90a:	68a3      	ldr	r3, [r4, #8]
 800c90c:	1b9b      	subs	r3, r3, r6
 800c90e:	60a3      	str	r3, [r4, #8]
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	4433      	add	r3, r6
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	2000      	movs	r0, #0
 800c918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c91c:	462a      	mov	r2, r5
 800c91e:	f000 fac7 	bl	800ceb0 <_realloc_r>
 800c922:	4606      	mov	r6, r0
 800c924:	2800      	cmp	r0, #0
 800c926:	d1e0      	bne.n	800c8ea <__ssputs_r+0x5a>
 800c928:	6921      	ldr	r1, [r4, #16]
 800c92a:	4650      	mov	r0, sl
 800c92c:	f7ff ff64 	bl	800c7f8 <_free_r>
 800c930:	230c      	movs	r3, #12
 800c932:	f8ca 3000 	str.w	r3, [sl]
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	f04f 30ff 	mov.w	r0, #4294967295
 800c942:	e7e9      	b.n	800c918 <__ssputs_r+0x88>

0800c944 <_svfiprintf_r>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	4698      	mov	r8, r3
 800c94a:	898b      	ldrh	r3, [r1, #12]
 800c94c:	061b      	lsls	r3, r3, #24
 800c94e:	b09d      	sub	sp, #116	; 0x74
 800c950:	4607      	mov	r7, r0
 800c952:	460d      	mov	r5, r1
 800c954:	4614      	mov	r4, r2
 800c956:	d50e      	bpl.n	800c976 <_svfiprintf_r+0x32>
 800c958:	690b      	ldr	r3, [r1, #16]
 800c95a:	b963      	cbnz	r3, 800c976 <_svfiprintf_r+0x32>
 800c95c:	2140      	movs	r1, #64	; 0x40
 800c95e:	f7ff fe5b 	bl	800c618 <_malloc_r>
 800c962:	6028      	str	r0, [r5, #0]
 800c964:	6128      	str	r0, [r5, #16]
 800c966:	b920      	cbnz	r0, 800c972 <_svfiprintf_r+0x2e>
 800c968:	230c      	movs	r3, #12
 800c96a:	603b      	str	r3, [r7, #0]
 800c96c:	f04f 30ff 	mov.w	r0, #4294967295
 800c970:	e0d0      	b.n	800cb14 <_svfiprintf_r+0x1d0>
 800c972:	2340      	movs	r3, #64	; 0x40
 800c974:	616b      	str	r3, [r5, #20]
 800c976:	2300      	movs	r3, #0
 800c978:	9309      	str	r3, [sp, #36]	; 0x24
 800c97a:	2320      	movs	r3, #32
 800c97c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c980:	f8cd 800c 	str.w	r8, [sp, #12]
 800c984:	2330      	movs	r3, #48	; 0x30
 800c986:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800cb2c <_svfiprintf_r+0x1e8>
 800c98a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c98e:	f04f 0901 	mov.w	r9, #1
 800c992:	4623      	mov	r3, r4
 800c994:	469a      	mov	sl, r3
 800c996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c99a:	b10a      	cbz	r2, 800c9a0 <_svfiprintf_r+0x5c>
 800c99c:	2a25      	cmp	r2, #37	; 0x25
 800c99e:	d1f9      	bne.n	800c994 <_svfiprintf_r+0x50>
 800c9a0:	ebba 0b04 	subs.w	fp, sl, r4
 800c9a4:	d00b      	beq.n	800c9be <_svfiprintf_r+0x7a>
 800c9a6:	465b      	mov	r3, fp
 800c9a8:	4622      	mov	r2, r4
 800c9aa:	4629      	mov	r1, r5
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	f7ff ff6f 	bl	800c890 <__ssputs_r>
 800c9b2:	3001      	adds	r0, #1
 800c9b4:	f000 80a9 	beq.w	800cb0a <_svfiprintf_r+0x1c6>
 800c9b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c9ba:	445a      	add	r2, fp
 800c9bc:	9209      	str	r2, [sp, #36]	; 0x24
 800c9be:	f89a 3000 	ldrb.w	r3, [sl]
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	f000 80a1 	beq.w	800cb0a <_svfiprintf_r+0x1c6>
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c9ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c9d2:	f10a 0a01 	add.w	sl, sl, #1
 800c9d6:	9304      	str	r3, [sp, #16]
 800c9d8:	9307      	str	r3, [sp, #28]
 800c9da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c9de:	931a      	str	r3, [sp, #104]	; 0x68
 800c9e0:	4654      	mov	r4, sl
 800c9e2:	2205      	movs	r2, #5
 800c9e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9e8:	4850      	ldr	r0, [pc, #320]	; (800cb2c <_svfiprintf_r+0x1e8>)
 800c9ea:	f7f3 fc11 	bl	8000210 <memchr>
 800c9ee:	9a04      	ldr	r2, [sp, #16]
 800c9f0:	b9d8      	cbnz	r0, 800ca2a <_svfiprintf_r+0xe6>
 800c9f2:	06d0      	lsls	r0, r2, #27
 800c9f4:	bf44      	itt	mi
 800c9f6:	2320      	movmi	r3, #32
 800c9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c9fc:	0711      	lsls	r1, r2, #28
 800c9fe:	bf44      	itt	mi
 800ca00:	232b      	movmi	r3, #43	; 0x2b
 800ca02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca06:	f89a 3000 	ldrb.w	r3, [sl]
 800ca0a:	2b2a      	cmp	r3, #42	; 0x2a
 800ca0c:	d015      	beq.n	800ca3a <_svfiprintf_r+0xf6>
 800ca0e:	9a07      	ldr	r2, [sp, #28]
 800ca10:	4654      	mov	r4, sl
 800ca12:	2000      	movs	r0, #0
 800ca14:	f04f 0c0a 	mov.w	ip, #10
 800ca18:	4621      	mov	r1, r4
 800ca1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca1e:	3b30      	subs	r3, #48	; 0x30
 800ca20:	2b09      	cmp	r3, #9
 800ca22:	d94d      	bls.n	800cac0 <_svfiprintf_r+0x17c>
 800ca24:	b1b0      	cbz	r0, 800ca54 <_svfiprintf_r+0x110>
 800ca26:	9207      	str	r2, [sp, #28]
 800ca28:	e014      	b.n	800ca54 <_svfiprintf_r+0x110>
 800ca2a:	eba0 0308 	sub.w	r3, r0, r8
 800ca2e:	fa09 f303 	lsl.w	r3, r9, r3
 800ca32:	4313      	orrs	r3, r2
 800ca34:	9304      	str	r3, [sp, #16]
 800ca36:	46a2      	mov	sl, r4
 800ca38:	e7d2      	b.n	800c9e0 <_svfiprintf_r+0x9c>
 800ca3a:	9b03      	ldr	r3, [sp, #12]
 800ca3c:	1d19      	adds	r1, r3, #4
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	9103      	str	r1, [sp, #12]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	bfbb      	ittet	lt
 800ca46:	425b      	neglt	r3, r3
 800ca48:	f042 0202 	orrlt.w	r2, r2, #2
 800ca4c:	9307      	strge	r3, [sp, #28]
 800ca4e:	9307      	strlt	r3, [sp, #28]
 800ca50:	bfb8      	it	lt
 800ca52:	9204      	strlt	r2, [sp, #16]
 800ca54:	7823      	ldrb	r3, [r4, #0]
 800ca56:	2b2e      	cmp	r3, #46	; 0x2e
 800ca58:	d10c      	bne.n	800ca74 <_svfiprintf_r+0x130>
 800ca5a:	7863      	ldrb	r3, [r4, #1]
 800ca5c:	2b2a      	cmp	r3, #42	; 0x2a
 800ca5e:	d134      	bne.n	800caca <_svfiprintf_r+0x186>
 800ca60:	9b03      	ldr	r3, [sp, #12]
 800ca62:	1d1a      	adds	r2, r3, #4
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	9203      	str	r2, [sp, #12]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	bfb8      	it	lt
 800ca6c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ca70:	3402      	adds	r4, #2
 800ca72:	9305      	str	r3, [sp, #20]
 800ca74:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800cb3c <_svfiprintf_r+0x1f8>
 800ca78:	7821      	ldrb	r1, [r4, #0]
 800ca7a:	2203      	movs	r2, #3
 800ca7c:	4650      	mov	r0, sl
 800ca7e:	f7f3 fbc7 	bl	8000210 <memchr>
 800ca82:	b138      	cbz	r0, 800ca94 <_svfiprintf_r+0x150>
 800ca84:	9b04      	ldr	r3, [sp, #16]
 800ca86:	eba0 000a 	sub.w	r0, r0, sl
 800ca8a:	2240      	movs	r2, #64	; 0x40
 800ca8c:	4082      	lsls	r2, r0
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	3401      	adds	r4, #1
 800ca92:	9304      	str	r3, [sp, #16]
 800ca94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca98:	4825      	ldr	r0, [pc, #148]	; (800cb30 <_svfiprintf_r+0x1ec>)
 800ca9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca9e:	2206      	movs	r2, #6
 800caa0:	f7f3 fbb6 	bl	8000210 <memchr>
 800caa4:	2800      	cmp	r0, #0
 800caa6:	d038      	beq.n	800cb1a <_svfiprintf_r+0x1d6>
 800caa8:	4b22      	ldr	r3, [pc, #136]	; (800cb34 <_svfiprintf_r+0x1f0>)
 800caaa:	bb1b      	cbnz	r3, 800caf4 <_svfiprintf_r+0x1b0>
 800caac:	9b03      	ldr	r3, [sp, #12]
 800caae:	3307      	adds	r3, #7
 800cab0:	f023 0307 	bic.w	r3, r3, #7
 800cab4:	3308      	adds	r3, #8
 800cab6:	9303      	str	r3, [sp, #12]
 800cab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800caba:	4433      	add	r3, r6
 800cabc:	9309      	str	r3, [sp, #36]	; 0x24
 800cabe:	e768      	b.n	800c992 <_svfiprintf_r+0x4e>
 800cac0:	fb0c 3202 	mla	r2, ip, r2, r3
 800cac4:	460c      	mov	r4, r1
 800cac6:	2001      	movs	r0, #1
 800cac8:	e7a6      	b.n	800ca18 <_svfiprintf_r+0xd4>
 800caca:	2300      	movs	r3, #0
 800cacc:	3401      	adds	r4, #1
 800cace:	9305      	str	r3, [sp, #20]
 800cad0:	4619      	mov	r1, r3
 800cad2:	f04f 0c0a 	mov.w	ip, #10
 800cad6:	4620      	mov	r0, r4
 800cad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cadc:	3a30      	subs	r2, #48	; 0x30
 800cade:	2a09      	cmp	r2, #9
 800cae0:	d903      	bls.n	800caea <_svfiprintf_r+0x1a6>
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d0c6      	beq.n	800ca74 <_svfiprintf_r+0x130>
 800cae6:	9105      	str	r1, [sp, #20]
 800cae8:	e7c4      	b.n	800ca74 <_svfiprintf_r+0x130>
 800caea:	fb0c 2101 	mla	r1, ip, r1, r2
 800caee:	4604      	mov	r4, r0
 800caf0:	2301      	movs	r3, #1
 800caf2:	e7f0      	b.n	800cad6 <_svfiprintf_r+0x192>
 800caf4:	ab03      	add	r3, sp, #12
 800caf6:	9300      	str	r3, [sp, #0]
 800caf8:	462a      	mov	r2, r5
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <_svfiprintf_r+0x1f4>)
 800cafc:	a904      	add	r1, sp, #16
 800cafe:	4638      	mov	r0, r7
 800cb00:	f3af 8000 	nop.w
 800cb04:	1c42      	adds	r2, r0, #1
 800cb06:	4606      	mov	r6, r0
 800cb08:	d1d6      	bne.n	800cab8 <_svfiprintf_r+0x174>
 800cb0a:	89ab      	ldrh	r3, [r5, #12]
 800cb0c:	065b      	lsls	r3, r3, #25
 800cb0e:	f53f af2d 	bmi.w	800c96c <_svfiprintf_r+0x28>
 800cb12:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb14:	b01d      	add	sp, #116	; 0x74
 800cb16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb1a:	ab03      	add	r3, sp, #12
 800cb1c:	9300      	str	r3, [sp, #0]
 800cb1e:	462a      	mov	r2, r5
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <_svfiprintf_r+0x1f4>)
 800cb22:	a904      	add	r1, sp, #16
 800cb24:	4638      	mov	r0, r7
 800cb26:	f000 f879 	bl	800cc1c <_printf_i>
 800cb2a:	e7eb      	b.n	800cb04 <_svfiprintf_r+0x1c0>
 800cb2c:	0801c550 	.word	0x0801c550
 800cb30:	0801c55a 	.word	0x0801c55a
 800cb34:	00000000 	.word	0x00000000
 800cb38:	0800c891 	.word	0x0800c891
 800cb3c:	0801c556 	.word	0x0801c556

0800cb40 <_printf_common>:
 800cb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb44:	4616      	mov	r6, r2
 800cb46:	4699      	mov	r9, r3
 800cb48:	688a      	ldr	r2, [r1, #8]
 800cb4a:	690b      	ldr	r3, [r1, #16]
 800cb4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb50:	4293      	cmp	r3, r2
 800cb52:	bfb8      	it	lt
 800cb54:	4613      	movlt	r3, r2
 800cb56:	6033      	str	r3, [r6, #0]
 800cb58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb5c:	4607      	mov	r7, r0
 800cb5e:	460c      	mov	r4, r1
 800cb60:	b10a      	cbz	r2, 800cb66 <_printf_common+0x26>
 800cb62:	3301      	adds	r3, #1
 800cb64:	6033      	str	r3, [r6, #0]
 800cb66:	6823      	ldr	r3, [r4, #0]
 800cb68:	0699      	lsls	r1, r3, #26
 800cb6a:	bf42      	ittt	mi
 800cb6c:	6833      	ldrmi	r3, [r6, #0]
 800cb6e:	3302      	addmi	r3, #2
 800cb70:	6033      	strmi	r3, [r6, #0]
 800cb72:	6825      	ldr	r5, [r4, #0]
 800cb74:	f015 0506 	ands.w	r5, r5, #6
 800cb78:	d106      	bne.n	800cb88 <_printf_common+0x48>
 800cb7a:	f104 0a19 	add.w	sl, r4, #25
 800cb7e:	68e3      	ldr	r3, [r4, #12]
 800cb80:	6832      	ldr	r2, [r6, #0]
 800cb82:	1a9b      	subs	r3, r3, r2
 800cb84:	42ab      	cmp	r3, r5
 800cb86:	dc26      	bgt.n	800cbd6 <_printf_common+0x96>
 800cb88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cb8c:	1e13      	subs	r3, r2, #0
 800cb8e:	6822      	ldr	r2, [r4, #0]
 800cb90:	bf18      	it	ne
 800cb92:	2301      	movne	r3, #1
 800cb94:	0692      	lsls	r2, r2, #26
 800cb96:	d42b      	bmi.n	800cbf0 <_printf_common+0xb0>
 800cb98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb9c:	4649      	mov	r1, r9
 800cb9e:	4638      	mov	r0, r7
 800cba0:	47c0      	blx	r8
 800cba2:	3001      	adds	r0, #1
 800cba4:	d01e      	beq.n	800cbe4 <_printf_common+0xa4>
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	6922      	ldr	r2, [r4, #16]
 800cbaa:	f003 0306 	and.w	r3, r3, #6
 800cbae:	2b04      	cmp	r3, #4
 800cbb0:	bf02      	ittt	eq
 800cbb2:	68e5      	ldreq	r5, [r4, #12]
 800cbb4:	6833      	ldreq	r3, [r6, #0]
 800cbb6:	1aed      	subeq	r5, r5, r3
 800cbb8:	68a3      	ldr	r3, [r4, #8]
 800cbba:	bf0c      	ite	eq
 800cbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbc0:	2500      	movne	r5, #0
 800cbc2:	4293      	cmp	r3, r2
 800cbc4:	bfc4      	itt	gt
 800cbc6:	1a9b      	subgt	r3, r3, r2
 800cbc8:	18ed      	addgt	r5, r5, r3
 800cbca:	2600      	movs	r6, #0
 800cbcc:	341a      	adds	r4, #26
 800cbce:	42b5      	cmp	r5, r6
 800cbd0:	d11a      	bne.n	800cc08 <_printf_common+0xc8>
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	e008      	b.n	800cbe8 <_printf_common+0xa8>
 800cbd6:	2301      	movs	r3, #1
 800cbd8:	4652      	mov	r2, sl
 800cbda:	4649      	mov	r1, r9
 800cbdc:	4638      	mov	r0, r7
 800cbde:	47c0      	blx	r8
 800cbe0:	3001      	adds	r0, #1
 800cbe2:	d103      	bne.n	800cbec <_printf_common+0xac>
 800cbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800cbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbec:	3501      	adds	r5, #1
 800cbee:	e7c6      	b.n	800cb7e <_printf_common+0x3e>
 800cbf0:	18e1      	adds	r1, r4, r3
 800cbf2:	1c5a      	adds	r2, r3, #1
 800cbf4:	2030      	movs	r0, #48	; 0x30
 800cbf6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbfa:	4422      	add	r2, r4
 800cbfc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc04:	3302      	adds	r3, #2
 800cc06:	e7c7      	b.n	800cb98 <_printf_common+0x58>
 800cc08:	2301      	movs	r3, #1
 800cc0a:	4622      	mov	r2, r4
 800cc0c:	4649      	mov	r1, r9
 800cc0e:	4638      	mov	r0, r7
 800cc10:	47c0      	blx	r8
 800cc12:	3001      	adds	r0, #1
 800cc14:	d0e6      	beq.n	800cbe4 <_printf_common+0xa4>
 800cc16:	3601      	adds	r6, #1
 800cc18:	e7d9      	b.n	800cbce <_printf_common+0x8e>
	...

0800cc1c <_printf_i>:
 800cc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc20:	7e0f      	ldrb	r7, [r1, #24]
 800cc22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc24:	2f78      	cmp	r7, #120	; 0x78
 800cc26:	4691      	mov	r9, r2
 800cc28:	4680      	mov	r8, r0
 800cc2a:	460c      	mov	r4, r1
 800cc2c:	469a      	mov	sl, r3
 800cc2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc32:	d807      	bhi.n	800cc44 <_printf_i+0x28>
 800cc34:	2f62      	cmp	r7, #98	; 0x62
 800cc36:	d80a      	bhi.n	800cc4e <_printf_i+0x32>
 800cc38:	2f00      	cmp	r7, #0
 800cc3a:	f000 80d4 	beq.w	800cde6 <_printf_i+0x1ca>
 800cc3e:	2f58      	cmp	r7, #88	; 0x58
 800cc40:	f000 80c0 	beq.w	800cdc4 <_printf_i+0x1a8>
 800cc44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc4c:	e03a      	b.n	800ccc4 <_printf_i+0xa8>
 800cc4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc52:	2b15      	cmp	r3, #21
 800cc54:	d8f6      	bhi.n	800cc44 <_printf_i+0x28>
 800cc56:	a101      	add	r1, pc, #4	; (adr r1, 800cc5c <_printf_i+0x40>)
 800cc58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc5c:	0800ccb5 	.word	0x0800ccb5
 800cc60:	0800ccc9 	.word	0x0800ccc9
 800cc64:	0800cc45 	.word	0x0800cc45
 800cc68:	0800cc45 	.word	0x0800cc45
 800cc6c:	0800cc45 	.word	0x0800cc45
 800cc70:	0800cc45 	.word	0x0800cc45
 800cc74:	0800ccc9 	.word	0x0800ccc9
 800cc78:	0800cc45 	.word	0x0800cc45
 800cc7c:	0800cc45 	.word	0x0800cc45
 800cc80:	0800cc45 	.word	0x0800cc45
 800cc84:	0800cc45 	.word	0x0800cc45
 800cc88:	0800cdcd 	.word	0x0800cdcd
 800cc8c:	0800ccf5 	.word	0x0800ccf5
 800cc90:	0800cd87 	.word	0x0800cd87
 800cc94:	0800cc45 	.word	0x0800cc45
 800cc98:	0800cc45 	.word	0x0800cc45
 800cc9c:	0800cdef 	.word	0x0800cdef
 800cca0:	0800cc45 	.word	0x0800cc45
 800cca4:	0800ccf5 	.word	0x0800ccf5
 800cca8:	0800cc45 	.word	0x0800cc45
 800ccac:	0800cc45 	.word	0x0800cc45
 800ccb0:	0800cd8f 	.word	0x0800cd8f
 800ccb4:	682b      	ldr	r3, [r5, #0]
 800ccb6:	1d1a      	adds	r2, r3, #4
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	602a      	str	r2, [r5, #0]
 800ccbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e09f      	b.n	800ce08 <_printf_i+0x1ec>
 800ccc8:	6820      	ldr	r0, [r4, #0]
 800ccca:	682b      	ldr	r3, [r5, #0]
 800cccc:	0607      	lsls	r7, r0, #24
 800ccce:	f103 0104 	add.w	r1, r3, #4
 800ccd2:	6029      	str	r1, [r5, #0]
 800ccd4:	d501      	bpl.n	800ccda <_printf_i+0xbe>
 800ccd6:	681e      	ldr	r6, [r3, #0]
 800ccd8:	e003      	b.n	800cce2 <_printf_i+0xc6>
 800ccda:	0646      	lsls	r6, r0, #25
 800ccdc:	d5fb      	bpl.n	800ccd6 <_printf_i+0xba>
 800ccde:	f9b3 6000 	ldrsh.w	r6, [r3]
 800cce2:	2e00      	cmp	r6, #0
 800cce4:	da03      	bge.n	800ccee <_printf_i+0xd2>
 800cce6:	232d      	movs	r3, #45	; 0x2d
 800cce8:	4276      	negs	r6, r6
 800ccea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccee:	485a      	ldr	r0, [pc, #360]	; (800ce58 <_printf_i+0x23c>)
 800ccf0:	230a      	movs	r3, #10
 800ccf2:	e012      	b.n	800cd1a <_printf_i+0xfe>
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	6820      	ldr	r0, [r4, #0]
 800ccf8:	1d19      	adds	r1, r3, #4
 800ccfa:	6029      	str	r1, [r5, #0]
 800ccfc:	0605      	lsls	r5, r0, #24
 800ccfe:	d501      	bpl.n	800cd04 <_printf_i+0xe8>
 800cd00:	681e      	ldr	r6, [r3, #0]
 800cd02:	e002      	b.n	800cd0a <_printf_i+0xee>
 800cd04:	0641      	lsls	r1, r0, #25
 800cd06:	d5fb      	bpl.n	800cd00 <_printf_i+0xe4>
 800cd08:	881e      	ldrh	r6, [r3, #0]
 800cd0a:	4853      	ldr	r0, [pc, #332]	; (800ce58 <_printf_i+0x23c>)
 800cd0c:	2f6f      	cmp	r7, #111	; 0x6f
 800cd0e:	bf0c      	ite	eq
 800cd10:	2308      	moveq	r3, #8
 800cd12:	230a      	movne	r3, #10
 800cd14:	2100      	movs	r1, #0
 800cd16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd1a:	6865      	ldr	r5, [r4, #4]
 800cd1c:	60a5      	str	r5, [r4, #8]
 800cd1e:	2d00      	cmp	r5, #0
 800cd20:	bfa2      	ittt	ge
 800cd22:	6821      	ldrge	r1, [r4, #0]
 800cd24:	f021 0104 	bicge.w	r1, r1, #4
 800cd28:	6021      	strge	r1, [r4, #0]
 800cd2a:	b90e      	cbnz	r6, 800cd30 <_printf_i+0x114>
 800cd2c:	2d00      	cmp	r5, #0
 800cd2e:	d04b      	beq.n	800cdc8 <_printf_i+0x1ac>
 800cd30:	4615      	mov	r5, r2
 800cd32:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd36:	fb03 6711 	mls	r7, r3, r1, r6
 800cd3a:	5dc7      	ldrb	r7, [r0, r7]
 800cd3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd40:	4637      	mov	r7, r6
 800cd42:	42bb      	cmp	r3, r7
 800cd44:	460e      	mov	r6, r1
 800cd46:	d9f4      	bls.n	800cd32 <_printf_i+0x116>
 800cd48:	2b08      	cmp	r3, #8
 800cd4a:	d10b      	bne.n	800cd64 <_printf_i+0x148>
 800cd4c:	6823      	ldr	r3, [r4, #0]
 800cd4e:	07de      	lsls	r6, r3, #31
 800cd50:	d508      	bpl.n	800cd64 <_printf_i+0x148>
 800cd52:	6923      	ldr	r3, [r4, #16]
 800cd54:	6861      	ldr	r1, [r4, #4]
 800cd56:	4299      	cmp	r1, r3
 800cd58:	bfde      	ittt	le
 800cd5a:	2330      	movle	r3, #48	; 0x30
 800cd5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd60:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cd64:	1b52      	subs	r2, r2, r5
 800cd66:	6122      	str	r2, [r4, #16]
 800cd68:	f8cd a000 	str.w	sl, [sp]
 800cd6c:	464b      	mov	r3, r9
 800cd6e:	aa03      	add	r2, sp, #12
 800cd70:	4621      	mov	r1, r4
 800cd72:	4640      	mov	r0, r8
 800cd74:	f7ff fee4 	bl	800cb40 <_printf_common>
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d14a      	bne.n	800ce12 <_printf_i+0x1f6>
 800cd7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd80:	b004      	add	sp, #16
 800cd82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd86:	6823      	ldr	r3, [r4, #0]
 800cd88:	f043 0320 	orr.w	r3, r3, #32
 800cd8c:	6023      	str	r3, [r4, #0]
 800cd8e:	4833      	ldr	r0, [pc, #204]	; (800ce5c <_printf_i+0x240>)
 800cd90:	2778      	movs	r7, #120	; 0x78
 800cd92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800cd96:	6823      	ldr	r3, [r4, #0]
 800cd98:	6829      	ldr	r1, [r5, #0]
 800cd9a:	061f      	lsls	r7, r3, #24
 800cd9c:	f851 6b04 	ldr.w	r6, [r1], #4
 800cda0:	d402      	bmi.n	800cda8 <_printf_i+0x18c>
 800cda2:	065f      	lsls	r7, r3, #25
 800cda4:	bf48      	it	mi
 800cda6:	b2b6      	uxthmi	r6, r6
 800cda8:	07df      	lsls	r7, r3, #31
 800cdaa:	bf48      	it	mi
 800cdac:	f043 0320 	orrmi.w	r3, r3, #32
 800cdb0:	6029      	str	r1, [r5, #0]
 800cdb2:	bf48      	it	mi
 800cdb4:	6023      	strmi	r3, [r4, #0]
 800cdb6:	b91e      	cbnz	r6, 800cdc0 <_printf_i+0x1a4>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	f023 0320 	bic.w	r3, r3, #32
 800cdbe:	6023      	str	r3, [r4, #0]
 800cdc0:	2310      	movs	r3, #16
 800cdc2:	e7a7      	b.n	800cd14 <_printf_i+0xf8>
 800cdc4:	4824      	ldr	r0, [pc, #144]	; (800ce58 <_printf_i+0x23c>)
 800cdc6:	e7e4      	b.n	800cd92 <_printf_i+0x176>
 800cdc8:	4615      	mov	r5, r2
 800cdca:	e7bd      	b.n	800cd48 <_printf_i+0x12c>
 800cdcc:	682b      	ldr	r3, [r5, #0]
 800cdce:	6826      	ldr	r6, [r4, #0]
 800cdd0:	6961      	ldr	r1, [r4, #20]
 800cdd2:	1d18      	adds	r0, r3, #4
 800cdd4:	6028      	str	r0, [r5, #0]
 800cdd6:	0635      	lsls	r5, r6, #24
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	d501      	bpl.n	800cde0 <_printf_i+0x1c4>
 800cddc:	6019      	str	r1, [r3, #0]
 800cdde:	e002      	b.n	800cde6 <_printf_i+0x1ca>
 800cde0:	0670      	lsls	r0, r6, #25
 800cde2:	d5fb      	bpl.n	800cddc <_printf_i+0x1c0>
 800cde4:	8019      	strh	r1, [r3, #0]
 800cde6:	2300      	movs	r3, #0
 800cde8:	6123      	str	r3, [r4, #16]
 800cdea:	4615      	mov	r5, r2
 800cdec:	e7bc      	b.n	800cd68 <_printf_i+0x14c>
 800cdee:	682b      	ldr	r3, [r5, #0]
 800cdf0:	1d1a      	adds	r2, r3, #4
 800cdf2:	602a      	str	r2, [r5, #0]
 800cdf4:	681d      	ldr	r5, [r3, #0]
 800cdf6:	6862      	ldr	r2, [r4, #4]
 800cdf8:	2100      	movs	r1, #0
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	f7f3 fa08 	bl	8000210 <memchr>
 800ce00:	b108      	cbz	r0, 800ce06 <_printf_i+0x1ea>
 800ce02:	1b40      	subs	r0, r0, r5
 800ce04:	6060      	str	r0, [r4, #4]
 800ce06:	6863      	ldr	r3, [r4, #4]
 800ce08:	6123      	str	r3, [r4, #16]
 800ce0a:	2300      	movs	r3, #0
 800ce0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce10:	e7aa      	b.n	800cd68 <_printf_i+0x14c>
 800ce12:	6923      	ldr	r3, [r4, #16]
 800ce14:	462a      	mov	r2, r5
 800ce16:	4649      	mov	r1, r9
 800ce18:	4640      	mov	r0, r8
 800ce1a:	47d0      	blx	sl
 800ce1c:	3001      	adds	r0, #1
 800ce1e:	d0ad      	beq.n	800cd7c <_printf_i+0x160>
 800ce20:	6823      	ldr	r3, [r4, #0]
 800ce22:	079b      	lsls	r3, r3, #30
 800ce24:	d413      	bmi.n	800ce4e <_printf_i+0x232>
 800ce26:	68e0      	ldr	r0, [r4, #12]
 800ce28:	9b03      	ldr	r3, [sp, #12]
 800ce2a:	4298      	cmp	r0, r3
 800ce2c:	bfb8      	it	lt
 800ce2e:	4618      	movlt	r0, r3
 800ce30:	e7a6      	b.n	800cd80 <_printf_i+0x164>
 800ce32:	2301      	movs	r3, #1
 800ce34:	4632      	mov	r2, r6
 800ce36:	4649      	mov	r1, r9
 800ce38:	4640      	mov	r0, r8
 800ce3a:	47d0      	blx	sl
 800ce3c:	3001      	adds	r0, #1
 800ce3e:	d09d      	beq.n	800cd7c <_printf_i+0x160>
 800ce40:	3501      	adds	r5, #1
 800ce42:	68e3      	ldr	r3, [r4, #12]
 800ce44:	9903      	ldr	r1, [sp, #12]
 800ce46:	1a5b      	subs	r3, r3, r1
 800ce48:	42ab      	cmp	r3, r5
 800ce4a:	dcf2      	bgt.n	800ce32 <_printf_i+0x216>
 800ce4c:	e7eb      	b.n	800ce26 <_printf_i+0x20a>
 800ce4e:	2500      	movs	r5, #0
 800ce50:	f104 0619 	add.w	r6, r4, #25
 800ce54:	e7f5      	b.n	800ce42 <_printf_i+0x226>
 800ce56:	bf00      	nop
 800ce58:	0801c561 	.word	0x0801c561
 800ce5c:	0801c572 	.word	0x0801c572

0800ce60 <memmove>:
 800ce60:	4288      	cmp	r0, r1
 800ce62:	b510      	push	{r4, lr}
 800ce64:	eb01 0402 	add.w	r4, r1, r2
 800ce68:	d902      	bls.n	800ce70 <memmove+0x10>
 800ce6a:	4284      	cmp	r4, r0
 800ce6c:	4623      	mov	r3, r4
 800ce6e:	d807      	bhi.n	800ce80 <memmove+0x20>
 800ce70:	1e43      	subs	r3, r0, #1
 800ce72:	42a1      	cmp	r1, r4
 800ce74:	d008      	beq.n	800ce88 <memmove+0x28>
 800ce76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ce7e:	e7f8      	b.n	800ce72 <memmove+0x12>
 800ce80:	4402      	add	r2, r0
 800ce82:	4601      	mov	r1, r0
 800ce84:	428a      	cmp	r2, r1
 800ce86:	d100      	bne.n	800ce8a <memmove+0x2a>
 800ce88:	bd10      	pop	{r4, pc}
 800ce8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ce8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ce92:	e7f7      	b.n	800ce84 <memmove+0x24>

0800ce94 <memcpy>:
 800ce94:	440a      	add	r2, r1
 800ce96:	4291      	cmp	r1, r2
 800ce98:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce9c:	d100      	bne.n	800cea0 <memcpy+0xc>
 800ce9e:	4770      	bx	lr
 800cea0:	b510      	push	{r4, lr}
 800cea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ceaa:	4291      	cmp	r1, r2
 800ceac:	d1f9      	bne.n	800cea2 <memcpy+0xe>
 800ceae:	bd10      	pop	{r4, pc}

0800ceb0 <_realloc_r>:
 800ceb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ceb4:	4680      	mov	r8, r0
 800ceb6:	4614      	mov	r4, r2
 800ceb8:	460e      	mov	r6, r1
 800ceba:	b921      	cbnz	r1, 800cec6 <_realloc_r+0x16>
 800cebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cec0:	4611      	mov	r1, r2
 800cec2:	f7ff bba9 	b.w	800c618 <_malloc_r>
 800cec6:	b92a      	cbnz	r2, 800ced4 <_realloc_r+0x24>
 800cec8:	f7ff fc96 	bl	800c7f8 <_free_r>
 800cecc:	4625      	mov	r5, r4
 800cece:	4628      	mov	r0, r5
 800ced0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ced4:	f000 f81b 	bl	800cf0e <_malloc_usable_size_r>
 800ced8:	4284      	cmp	r4, r0
 800ceda:	4607      	mov	r7, r0
 800cedc:	d802      	bhi.n	800cee4 <_realloc_r+0x34>
 800cede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cee2:	d812      	bhi.n	800cf0a <_realloc_r+0x5a>
 800cee4:	4621      	mov	r1, r4
 800cee6:	4640      	mov	r0, r8
 800cee8:	f7ff fb96 	bl	800c618 <_malloc_r>
 800ceec:	4605      	mov	r5, r0
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d0ed      	beq.n	800cece <_realloc_r+0x1e>
 800cef2:	42bc      	cmp	r4, r7
 800cef4:	4622      	mov	r2, r4
 800cef6:	4631      	mov	r1, r6
 800cef8:	bf28      	it	cs
 800cefa:	463a      	movcs	r2, r7
 800cefc:	f7ff ffca 	bl	800ce94 <memcpy>
 800cf00:	4631      	mov	r1, r6
 800cf02:	4640      	mov	r0, r8
 800cf04:	f7ff fc78 	bl	800c7f8 <_free_r>
 800cf08:	e7e1      	b.n	800cece <_realloc_r+0x1e>
 800cf0a:	4635      	mov	r5, r6
 800cf0c:	e7df      	b.n	800cece <_realloc_r+0x1e>

0800cf0e <_malloc_usable_size_r>:
 800cf0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf12:	1f18      	subs	r0, r3, #4
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	bfbc      	itt	lt
 800cf18:	580b      	ldrlt	r3, [r1, r0]
 800cf1a:	18c0      	addlt	r0, r0, r3
 800cf1c:	4770      	bx	lr
	...

0800cf20 <_init>:
 800cf20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf22:	bf00      	nop
 800cf24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf26:	bc08      	pop	{r3}
 800cf28:	469e      	mov	lr, r3
 800cf2a:	4770      	bx	lr

0800cf2c <_fini>:
 800cf2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf2e:	bf00      	nop
 800cf30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf32:	bc08      	pop	{r3}
 800cf34:	469e      	mov	lr, r3
 800cf36:	4770      	bx	lr
