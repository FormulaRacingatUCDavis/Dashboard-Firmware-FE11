
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e49c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f780  0800e66c  0800e66c  0001e66c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ddec  0801ddec  000300ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801ddec  0801ddec  0002ddec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ddf4  0801ddf4  000300ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ddf4  0801ddf4  0002ddf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ddf8  0801ddf8  0002ddf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  0801ddfc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004920  200000ec  0801dee8  000300ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004a0c  0801dee8  00034a0c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300ec  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003011c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002372c  00000000  00000000  0003015f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004978  00000000  00000000  0005388b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002058  00000000  00000000  00058208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000018fa  00000000  00000000  0005a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d45c  00000000  00000000  0005bb5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00028381  00000000  00000000  00088fb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107200  00000000  00000000  000b1337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008f98  00000000  00000000  001b8538  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001c14d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000ec 	.word	0x200000ec
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e654 	.word	0x0800e654

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000f0 	.word	0x200000f0
 800020c:	0800e654 	.word	0x0800e654

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <HAL_CAN_RxFifo0MsgPendingCallback>:

CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e04:	2100      	movs	r1, #0
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f004 fede 	bl	8005bc8 <HAL_CAN_GetRxMessage>
	save_can_rx_data(RxHeader, RxData);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e10:	9203      	str	r2, [sp, #12]
 8000e12:	466c      	mov	r4, sp
 8000e14:	f103 0210 	add.w	r2, r3, #16
 8000e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	f000 f808 	bl	8000e34 <save_can_rx_data>
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	2000013c 	.word	0x2000013c
 8000e30:	20000120 	.word	0x20000120

08000e34 <save_can_rx_data>:


/************ CAN RX ************/

void save_can_rx_data(CAN_RxHeaderTypeDef RxHeader, uint8_t RxData[]) {
 8000e34:	b084      	sub	sp, #16
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	f107 0c10 	add.w	ip, r7, #16
 8000e40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // gets message and updates values
	switch (RxHeader.StdId) {
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f240 4273 	movw	r2, #1139	; 0x473
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f200 812f 	bhi.w	80010ae <save_can_rx_data+0x27a>
 8000e50:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000e54:	d20d      	bcs.n	8000e72 <save_can_rx_data+0x3e>
 8000e56:	f240 3287 	movw	r2, #903	; 0x387
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	f000 80b3 	beq.w	8000fc6 <save_can_rx_data+0x192>
 8000e60:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 8000e64:	f080 8123 	bcs.w	80010ae <save_can_rx_data+0x27a>
 8000e68:	2bc2      	cmp	r3, #194	; 0xc2
 8000e6a:	d853      	bhi.n	8000f14 <save_can_rx_data+0xe0>
 8000e6c:	2ba7      	cmp	r3, #167	; 0xa7
 8000e6e:	d211      	bcs.n	8000e94 <save_can_rx_data+0x60>
			back_left_wheel_speed = (RxData[0] << 8) ;
			back_left_wheel_speed += RxData[1];
			break;
		default:
			// no valid input received
			break;
 8000e70:	e11d      	b.n	80010ae <save_can_rx_data+0x27a>
	switch (RxHeader.StdId) {
 8000e72:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	f200 8119 	bhi.w	80010ae <save_can_rx_data+0x27a>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <save_can_rx_data+0x50>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	0800103d 	.word	0x0800103d
 8000e88:	08001017 	.word	0x08001017
 8000e8c:	08001089 	.word	0x08001089
 8000e90:	08001063 	.word	0x08001063
 8000e94:	3ba7      	subs	r3, #167	; 0xa7
 8000e96:	2b1b      	cmp	r3, #27
 8000e98:	f200 8109 	bhi.w	80010ae <save_can_rx_data+0x27a>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <save_can_rx_data+0x70>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000f7f 	.word	0x08000f7f
 8000ea8:	080010af 	.word	0x080010af
 8000eac:	080010af 	.word	0x080010af
 8000eb0:	08000fa5 	.word	0x08000fa5
 8000eb4:	08000fd1 	.word	0x08000fd1
 8000eb8:	080010af 	.word	0x080010af
 8000ebc:	080010af 	.word	0x080010af
 8000ec0:	080010af 	.word	0x080010af
 8000ec4:	080010af 	.word	0x080010af
 8000ec8:	080010af 	.word	0x080010af
 8000ecc:	080010af 	.word	0x080010af
 8000ed0:	080010af 	.word	0x080010af
 8000ed4:	080010af 	.word	0x080010af
 8000ed8:	080010af 	.word	0x080010af
 8000edc:	080010af 	.word	0x080010af
 8000ee0:	080010af 	.word	0x080010af
 8000ee4:	080010af 	.word	0x080010af
 8000ee8:	080010af 	.word	0x080010af
 8000eec:	080010af 	.word	0x080010af
 8000ef0:	080010af 	.word	0x080010af
 8000ef4:	080010af 	.word	0x080010af
 8000ef8:	080010af 	.word	0x080010af
 8000efc:	080010af 	.word	0x080010af
 8000f00:	080010af 	.word	0x080010af
 8000f04:	080010af 	.word	0x080010af
 8000f08:	080010af 	.word	0x080010af
 8000f0c:	080010af 	.word	0x080010af
 8000f10:	08000ffd 	.word	0x08000ffd
 8000f14:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000f18:	f040 80c9 	bne.w	80010ae <save_can_rx_data+0x27a>
			PACK_TEMP = RxData[0];
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <save_can_rx_data+0x290>)
 8000f22:	701a      	strb	r2, [r3, #0]
			soc = RxData[1];
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	785a      	ldrb	r2, [r3, #1]
 8000f28:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <save_can_rx_data+0x294>)
 8000f2a:	701a      	strb	r2, [r3, #0]
			bms_status = (RxData[2] << 8);
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	3302      	adds	r3, #2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <save_can_rx_data+0x298>)
 8000f3a:	801a      	strh	r2, [r3, #0]
			bms_status += RxData[3];
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	3303      	adds	r3, #3
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b61      	ldr	r3, [pc, #388]	; (80010cc <save_can_rx_data+0x298>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <save_can_rx_data+0x298>)
 8000f50:	801a      	strh	r2, [r3, #0]
			pack_voltage = (RxData[4] << 8);
 8000f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f54:	3304      	adds	r3, #4
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <save_can_rx_data+0x29c>)
 8000f60:	801a      	strh	r2, [r3, #0]
			pack_voltage += RxData[5];
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	3305      	adds	r3, #5
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <save_can_rx_data+0x29c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <save_can_rx_data+0x29c>)
 8000f76:	801a      	strh	r2, [r3, #0]
			temp_attenuate();
 8000f78:	f001 ff56 	bl	8002e28 <temp_attenuate>
			break;
 8000f7c:	e09a      	b.n	80010b4 <save_can_rx_data+0x280>
			capacitor_volt = (RxData[0] << 8); // upper bits
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <save_can_rx_data+0x2a0>)
 8000f8a:	801a      	strh	r2, [r3, #0]
			capacitor_volt += RxData[1]; // lower bits
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	3301      	adds	r3, #1
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <save_can_rx_data+0x2a0>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <save_can_rx_data+0x2a0>)
 8000fa0:	801a      	strh	r2, [r3, #0]
			break;
 8000fa2:	e087      	b.n	80010b4 <save_can_rx_data+0x280>
			mc_lockout = RxData[6] & 0b1000000;
 8000fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa6:	3306      	adds	r3, #6
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <save_can_rx_data+0x2a4>)
 8000fb2:	701a      	strb	r2, [r3, #0]
			mc_enabled = RxData[6] & 0b1;
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <save_can_rx_data+0x2a8>)
 8000fc2:	701a      	strb	r2, [r3, #0]
			break;
 8000fc4:	e076      	b.n	80010b4 <save_can_rx_data+0x280>
			shutdown_flags = RxData[2];
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	789a      	ldrb	r2, [r3, #2]
 8000fca:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <save_can_rx_data+0x2ac>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			break;
 8000fce:	e071      	b.n	80010b4 <save_can_rx_data+0x280>
			for (uint8_t i = 0; i < 8; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	e00f      	b.n	8000ff6 <save_can_rx_data+0x1c2>
				if (RxData[i] > 0) {
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <save_can_rx_data+0x1b6>
					mc_fault = 1;
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <save_can_rx_data+0x2b0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
					break;
 8000fe8:	e008      	b.n	8000ffc <save_can_rx_data+0x1c8>
					mc_fault = 0;
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <save_can_rx_data+0x2b0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	d9ec      	bls.n	8000fd6 <save_can_rx_data+0x1a2>
			if (RxData[0] == 0x20 && RxData[2] == 1) {
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b20      	cmp	r3, #32
 8001002:	d156      	bne.n	80010b2 <save_can_rx_data+0x27e>
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	3302      	adds	r3, #2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d151      	bne.n	80010b2 <save_can_rx_data+0x27e>
				mc_fault_clear_success = 1;
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <save_can_rx_data+0x2b4>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
			break;
 8001014:	e04d      	b.n	80010b2 <save_can_rx_data+0x27e>
			front_right_wheel_speed = (RxData[0] << 8) ;
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <save_can_rx_data+0x2b8>)
 8001022:	801a      	strh	r2, [r3, #0]
			front_right_wheel_speed += RxData[1];
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <save_can_rx_data+0x2b8>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <save_can_rx_data+0x2b8>)
 8001038:	801a      	strh	r2, [r3, #0]
			break;
 800103a:	e03b      	b.n	80010b4 <save_can_rx_data+0x280>
			front_left_wheel_speed = (RxData[0] << 8) ;
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <save_can_rx_data+0x2bc>)
 8001048:	801a      	strh	r2, [r3, #0]
			front_left_wheel_speed += RxData[1];
 800104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <save_can_rx_data+0x2bc>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <save_can_rx_data+0x2bc>)
 800105e:	801a      	strh	r2, [r3, #0]
			break;
 8001060:	e028      	b.n	80010b4 <save_can_rx_data+0x280>
			back_right_wheel_speed = (RxData[0] << 8) ;
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <save_can_rx_data+0x2c0>)
 800106e:	801a      	strh	r2, [r3, #0]
			back_right_wheel_speed += RxData[1];
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <save_can_rx_data+0x2c0>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <save_can_rx_data+0x2c0>)
 8001084:	801a      	strh	r2, [r3, #0]
			break;
 8001086:	e015      	b.n	80010b4 <save_can_rx_data+0x280>
			back_left_wheel_speed = (RxData[0] << 8) ;
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <save_can_rx_data+0x2c4>)
 8001094:	801a      	strh	r2, [r3, #0]
			back_left_wheel_speed += RxData[1];
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	3301      	adds	r3, #1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <save_can_rx_data+0x2c4>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <save_can_rx_data+0x2c4>)
 80010aa:	801a      	strh	r2, [r3, #0]
			break;
 80010ac:	e002      	b.n	80010b4 <save_can_rx_data+0x280>
			break;
 80010ae:	bf00      	nop
 80010b0:	e000      	b.n	80010b4 <save_can_rx_data+0x280>
			break;
 80010b2:	bf00      	nop
	}

}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010be:	b004      	add	sp, #16
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000010d 	.word	0x2000010d
 80010c8:	2000010f 	.word	0x2000010f
 80010cc:	20000110 	.word	0x20000110
 80010d0:	20000114 	.word	0x20000114
 80010d4:	2000010a 	.word	0x2000010a
 80010d8:	20000108 	.word	0x20000108
 80010dc:	20000109 	.word	0x20000109
 80010e0:	20000000 	.word	0x20000000
 80010e4:	2000010e 	.word	0x2000010e
 80010e8:	20000112 	.word	0x20000112
 80010ec:	20000116 	.word	0x20000116
 80010f0:	20000118 	.word	0x20000118
 80010f4:	2000011a 	.word	0x2000011a
 80010f8:	2000011c 	.word	0x2000011c

080010fc <can_tx_vcu_state>:

CAN_TxHeaderTypeDef   TxHeader;
uint32_t              TxMailbox;

//  transmit state
void can_tx_vcu_state(CAN_HandleTypeDef *hcan){
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001104:	4b19      	ldr	r3, [pc, #100]	; (800116c <can_tx_vcu_state+0x70>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = VEHICLE_STATE;
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <can_tx_vcu_state+0x70>)
 800110c:	f240 7266 	movw	r2, #1894	; 0x766
 8001110:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <can_tx_vcu_state+0x70>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 6;
 8001118:	4b14      	ldr	r3, [pc, #80]	; (800116c <can_tx_vcu_state+0x70>)
 800111a:	2206      	movs	r2, #6
 800111c:	611a      	str	r2, [r3, #16]
	uint8_t data_tx_state[6] = {
 800111e:	2300      	movs	r3, #0
 8001120:	723b      	strb	r3, [r7, #8]
        0,
        hv_requested(),
 8001122:	f000 fd1b 	bl	8001b5c <hv_requested>
 8001126:	4603      	mov	r3, r0
	uint8_t data_tx_state[6] = {
 8001128:	727b      	strb	r3, [r7, #9]
        throttle1.percent,
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <can_tx_vcu_state+0x74>)
 800112c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 800112e:	b2db      	uxtb	r3, r3
 8001130:	72bb      	strb	r3, [r7, #10]
        throttle2.percent,
 8001132:	4b10      	ldr	r3, [pc, #64]	; (8001174 <can_tx_vcu_state+0x78>)
 8001134:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 8001136:	b2db      	uxtb	r3, r3
 8001138:	72fb      	strb	r3, [r7, #11]
		brake.percent,
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <can_tx_vcu_state+0x7c>)
 800113c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[6] = {
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
        one_byte_state(),
 8001142:	f000 fd39 	bl	8001bb8 <one_byte_state>
 8001146:	4603      	mov	r3, r0
	uint8_t data_tx_state[6] = {
 8001148:	737b      	strb	r3, [r7, #13]

    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_state, &TxMailbox) != HAL_OK)
 800114a:	f107 0208 	add.w	r2, r7, #8
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <can_tx_vcu_state+0x80>)
 8001150:	4906      	ldr	r1, [pc, #24]	; (800116c <can_tx_vcu_state+0x70>)
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f004 fc68 	bl	8005a28 <HAL_CAN_AddTxMessage>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d002      	beq.n	8001164 <can_tx_vcu_state+0x68>
	{
	  print("CAN Tx failed\r\n");
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <can_tx_vcu_state+0x84>)
 8001160:	f001 ff67 	bl	8003032 <print>
	}
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	20000144 	.word	0x20000144
 8001170:	200027d4 	.word	0x200027d4
 8001174:	200027e0 	.word	0x200027e0
 8001178:	200027ec 	.word	0x200027ec
 800117c:	2000015c 	.word	0x2000015c
 8001180:	0800e66c 	.word	0x0800e66c

08001184 <can_tx_torque_request>:


// transmit torque request
void can_tx_torque_request(CAN_HandleTypeDef *hcan){
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800118c:	4b2c      	ldr	r3, [pc, #176]	; (8001240 <can_tx_torque_request+0xbc>)
 800118e:	2200      	movs	r2, #0
 8001190:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TORQUE_REQUEST;
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <can_tx_torque_request+0xbc>)
 8001194:	22c0      	movs	r2, #192	; 0xc0
 8001196:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001198:	4b29      	ldr	r3, [pc, #164]	; (8001240 <can_tx_torque_request+0xbc>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <can_tx_torque_request+0xbc>)
 80011a0:	2208      	movs	r2, #8
 80011a2:	611a      	str	r2, [r3, #16]

    uint16_t throttle_msg_byte = 0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	82fb      	strh	r3, [r7, #22]
    if (state == DRIVE) {
 80011a8:	4b26      	ldr	r3, [pc, #152]	; (8001244 <can_tx_torque_request+0xc0>)
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d10e      	bne.n	80011d0 <can_tx_torque_request+0x4c>
    	uint16_t throttle_req = requested_throttle();
 80011b2:	f001 fe09 	bl	8002dc8 <requested_throttle>
 80011b6:	4603      	mov	r3, r0
 80011b8:	82bb      	strh	r3, [r7, #20]
    	if (throttle_req  < 50) {
 80011ba:	8abb      	ldrh	r3, [r7, #20]
 80011bc:	2b31      	cmp	r3, #49	; 0x31
 80011be:	d801      	bhi.n	80011c4 <can_tx_torque_request+0x40>
    		throttle_req = 0;
 80011c0:	2300      	movs	r3, #0
 80011c2:	82bb      	strh	r3, [r7, #20]
    	}
        throttle_msg_byte = throttle_req - TC_torque_adjustment;
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <can_tx_torque_request+0xc4>)
 80011c6:	881b      	ldrh	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	8aba      	ldrh	r2, [r7, #20]
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	82fb      	strh	r3, [r7, #22]
    }

    uint8_t byte5 = 0b010;   //speed mode | discharge_enable | inverter enable
 80011d0:	2302      	movs	r3, #2
 80011d2:	74fb      	strb	r3, [r7, #19]

    if (state == DRIVE) {
 80011d4:	4b1b      	ldr	r3, [pc, #108]	; (8001244 <can_tx_torque_request+0xc0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b03      	cmp	r3, #3
 80011dc:	d10a      	bne.n	80011f4 <can_tx_torque_request+0x70>
    	byte5 |= (hv_requested() & 0x01);  //set inverter enable bit
 80011de:	f000 fcbd 	bl	8001b5c <hv_requested>
 80011e2:	4603      	mov	r3, r0
 80011e4:	f003 0301 	and.w	r3, r3, #1
 80011e8:	b25a      	sxtb	r2, r3
 80011ea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b25b      	sxtb	r3, r3
 80011f2:	74fb      	strb	r3, [r7, #19]
    }


    uint8_t data_tx_torque[8] = {
        (uint8_t)(throttle_msg_byte & 0xff), // 0 - torque command lower (Nm*10)
 80011f4:	8afb      	ldrh	r3, [r7, #22]
 80011f6:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 80011f8:	723b      	strb	r3, [r7, #8]
        (uint8_t)(throttle_msg_byte >> 8) & 0xFF, // 1 - torque command upper (Nm*10)
 80011fa:	8afb      	ldrh	r3, [r7, #22]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	b29b      	uxth	r3, r3
 8001200:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 8001202:	727b      	strb	r3, [r7, #9]
 8001204:	2300      	movs	r3, #0
 8001206:	72bb      	strb	r3, [r7, #10]
 8001208:	2300      	movs	r3, #0
 800120a:	72fb      	strb	r3, [r7, #11]
 800120c:	2301      	movs	r3, #1
 800120e:	733b      	strb	r3, [r7, #12]
 8001210:	7cfb      	ldrb	r3, [r7, #19]
 8001212:	737b      	strb	r3, [r7, #13]
 8001214:	2300      	movs	r3, #0
 8001216:	73bb      	strb	r3, [r7, #14]
 8001218:	2300      	movs	r3, #0
 800121a:	73fb      	strb	r3, [r7, #15]
        byte5, // 5 - speed mode | discharge_enable | inverter enable
        0, // 6 - torque limit lower (if 0, default EEPROM value used)
        0 // 7 - torque limit upper (if 0, default EEPROM value used)
    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
 800121c:	f107 0208 	add.w	r2, r7, #8
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <can_tx_torque_request+0xc8>)
 8001222:	4907      	ldr	r1, [pc, #28]	; (8001240 <can_tx_torque_request+0xbc>)
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f004 fbff 	bl	8005a28 <HAL_CAN_AddTxMessage>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d002      	beq.n	8001236 <can_tx_torque_request+0xb2>
	{
	  print("CAN Tx failed\r\n");
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <can_tx_torque_request+0xcc>)
 8001232:	f001 fefe 	bl	8003032 <print>
	}
}
 8001236:	bf00      	nop
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000144 	.word	0x20000144
 8001244:	2000008d 	.word	0x2000008d
 8001248:	2000280a 	.word	0x2000280a
 800124c:	2000015c 	.word	0x2000015c
 8001250:	0800e66c 	.word	0x0800e66c

08001254 <can_clear_MC_fault>:
	{
	  print("CAN Tx failed\r\n");
	}
}

void can_clear_MC_fault(CAN_HandleTypeDef *hcan) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800125c:	4b17      	ldr	r3, [pc, #92]	; (80012bc <can_clear_MC_fault+0x68>)
 800125e:	2200      	movs	r2, #0
 8001260:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = MC_PARAM_COMMAND;
 8001262:	4b16      	ldr	r3, [pc, #88]	; (80012bc <can_clear_MC_fault+0x68>)
 8001264:	22c1      	movs	r2, #193	; 0xc1
 8001266:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001268:	4b14      	ldr	r3, [pc, #80]	; (80012bc <can_clear_MC_fault+0x68>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <can_clear_MC_fault+0x68>)
 8001270:	2208      	movs	r2, #8
 8001272:	611a      	str	r2, [r3, #16]

	const uint16_t param_addr = 20;
 8001274:	2314      	movs	r3, #20
 8001276:	82fb      	strh	r3, [r7, #22]
	uint8_t data_tx_param_command[8] = {
 8001278:	8afb      	ldrh	r3, [r7, #22]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	733b      	strb	r3, [r7, #12]
 800127e:	2300      	movs	r3, #0
 8001280:	737b      	strb	r3, [r7, #13]
 8001282:	2301      	movs	r3, #1
 8001284:	73bb      	strb	r3, [r7, #14]
 8001286:	2300      	movs	r3, #0
 8001288:	73fb      	strb	r3, [r7, #15]
 800128a:	2300      	movs	r3, #0
 800128c:	743b      	strb	r3, [r7, #16]
 800128e:	2300      	movs	r3, #0
 8001290:	747b      	strb	r3, [r7, #17]
 8001292:	2300      	movs	r3, #0
 8001294:	74bb      	strb	r3, [r7, #18]
 8001296:	2300      	movs	r3, #0
 8001298:	74fb      	strb	r3, [r7, #19]
			0, // data
			0, // reserved
			0 // reserved
	};

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_param_command, &TxMailbox) != HAL_OK)
 800129a:	f107 020c 	add.w	r2, r7, #12
 800129e:	4b08      	ldr	r3, [pc, #32]	; (80012c0 <can_clear_MC_fault+0x6c>)
 80012a0:	4906      	ldr	r1, [pc, #24]	; (80012bc <can_clear_MC_fault+0x68>)
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f004 fbc0 	bl	8005a28 <HAL_CAN_AddTxMessage>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <can_clear_MC_fault+0x60>
	{
	  print("CAN Tx failed\r\n");
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <can_clear_MC_fault+0x70>)
 80012b0:	f001 febf 	bl	8003032 <print>
	}
}
 80012b4:	bf00      	nop
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20000144 	.word	0x20000144
 80012c0:	2000015c 	.word	0x2000015c
 80012c4:	0800e66c 	.word	0x0800e66c

080012c8 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
	SSD1963_Init();
 80012cc:	f003 fa4c 	bl	8004768 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 80012d0:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80012d8:	490b      	ldr	r1, [pc, #44]	; (8001308 <Display_Init+0x40>)
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <Display_Init+0x44>)
 80012dc:	f002 fcc8 	bl	8003c70 <UG_Init>

	UG_FontSetVSpace(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f002 ff69 	bl	80041b8 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 80012e6:	2000      	movs	r0, #0
 80012e8:	f002 ff52 	bl	8004190 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80012ec:	4908      	ldr	r1, [pc, #32]	; (8001310 <Display_Init+0x48>)
 80012ee:	2001      	movs	r0, #1
 80012f0:	f003 fa0e 	bl	8004710 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 80012f4:	4907      	ldr	r1, [pc, #28]	; (8001314 <Display_Init+0x4c>)
 80012f6:	2000      	movs	r0, #0
 80012f8:	f003 fa0a 	bl	8004710 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 80012fc:	4906      	ldr	r1, [pc, #24]	; (8001318 <Display_Init+0x50>)
 80012fe:	2003      	movs	r0, #3
 8001300:	f003 fa06 	bl	8004710 <UG_DriverRegister>
}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	0800492b 	.word	0x0800492b
 800130c:	20000190 	.word	0x20000190
 8001310:	080049b5 	.word	0x080049b5
 8001314:	08004a7f 	.word	0x08004a7f
 8001318:	08004b33 	.word	0x08004b33

0800131c <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 8001322:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001326:	f002 fd4f 	bl	8003dc8 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 800132a:	231f      	movs	r3, #31
 800132c:	9300      	str	r3, [sp, #0]
 800132e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001332:	220a      	movs	r2, #10
 8001334:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001338:	2000      	movs	r0, #0
 800133a:	f002 fd67 	bl	8003e0c <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 800133e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	230a      	movs	r3, #10
 8001346:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800134a:	2100      	movs	r1, #0
 800134c:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8001350:	f002 fd5c 	bl	8003e0c <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8001354:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800135e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001362:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001366:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800136a:	f002 fd4f 	bl	8003e0c <UG_FillFrame>
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <Display_DriveTemplate>:
//	glv_v_box.last_color = C_BLACK;  // force box redraw

}

void Display_DriveTemplate()
{
 8001374:	b5b0      	push	{r4, r5, r7, lr}
 8001376:	af00      	add	r7, sp, #0
    debug_mode = false;
 8001378:	4b43      	ldr	r3, [pc, #268]	; (8001488 <Display_DriveTemplate+0x114>)
 800137a:	2200      	movs	r2, #0
 800137c:	701a      	strb	r2, [r3, #0]

    // clear screen
    UG_FillScreen(C_BLACK);
 800137e:	2000      	movs	r0, #0
 8001380:	f002 fd22 	bl	8003dc8 <UG_FillScreen>

    // draw labels
    UG_PutString(68, 10, "PACK SOC");
 8001384:	4a41      	ldr	r2, [pc, #260]	; (800148c <Display_DriveTemplate+0x118>)
 8001386:	210a      	movs	r1, #10
 8001388:	2044      	movs	r0, #68	; 0x44
 800138a:	f002 fdaf 	bl	8003eec <UG_PutString>
    UG_PutString(297, 10, "MAX PACK T");
 800138e:	4a40      	ldr	r2, [pc, #256]	; (8001490 <Display_DriveTemplate+0x11c>)
 8001390:	210a      	movs	r1, #10
 8001392:	f240 1029 	movw	r0, #297	; 0x129
 8001396:	f002 fda9 	bl	8003eec <UG_PutString>
    UG_PutString(30, 180, "STATE:");
 800139a:	4a3e      	ldr	r2, [pc, #248]	; (8001494 <Display_DriveTemplate+0x120>)
 800139c:	21b4      	movs	r1, #180	; 0xb4
 800139e:	201e      	movs	r0, #30
 80013a0:	f002 fda4 	bl	8003eec <UG_PutString>
    UG_PutString(275, 180, "GLV V:");
 80013a4:	4a3c      	ldr	r2, [pc, #240]	; (8001498 <Display_DriveTemplate+0x124>)
 80013a6:	21b4      	movs	r1, #180	; 0xb4
 80013a8:	f240 1013 	movw	r0, #275	; 0x113
 80013ac:	f002 fd9e 	bl	8003eec <UG_PutString>

    // setup textbox configs
    soc_box.box_x1 = 30;
 80013b0:	4b3a      	ldr	r3, [pc, #232]	; (800149c <Display_DriveTemplate+0x128>)
 80013b2:	221e      	movs	r2, #30
 80013b4:	801a      	strh	r2, [r3, #0]
    soc_box.box_y1 = 35;
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <Display_DriveTemplate+0x128>)
 80013b8:	2223      	movs	r2, #35	; 0x23
 80013ba:	805a      	strh	r2, [r3, #2]
    soc_box.box_x2 = 210;
 80013bc:	4b37      	ldr	r3, [pc, #220]	; (800149c <Display_DriveTemplate+0x128>)
 80013be:	22d2      	movs	r2, #210	; 0xd2
 80013c0:	809a      	strh	r2, [r3, #4]
    soc_box.box_y2 = 170;
 80013c2:	4b36      	ldr	r3, [pc, #216]	; (800149c <Display_DriveTemplate+0x128>)
 80013c4:	22aa      	movs	r2, #170	; 0xaa
 80013c6:	80da      	strh	r2, [r3, #6]
    soc_box.font = FONT_32X53;
 80013c8:	4b34      	ldr	r3, [pc, #208]	; (800149c <Display_DriveTemplate+0x128>)
 80013ca:	4a35      	ldr	r2, [pc, #212]	; (80014a0 <Display_DriveTemplate+0x12c>)
 80013cc:	f103 0410 	add.w	r4, r3, #16
 80013d0:	4615      	mov	r5, r2
 80013d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80013d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	6023      	str	r3, [r4, #0]
    soc_box.last_color = C_BLACK;  // force box redraw
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <Display_DriveTemplate+0x128>)
 80013dc:	2200      	movs	r2, #0
 80013de:	849a      	strh	r2, [r3, #36]	; 0x24
    soc_box.last_value = 255;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <Display_DriveTemplate+0x128>)
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	84da      	strh	r2, [r3, #38]	; 0x26

    bms_temp_box.box_x1 = 270;
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <Display_DriveTemplate+0x130>)
 80013e8:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80013ec:	801a      	strh	r2, [r3, #0]
	bms_temp_box.box_y1 = 35;
 80013ee:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <Display_DriveTemplate+0x130>)
 80013f0:	2223      	movs	r2, #35	; 0x23
 80013f2:	805a      	strh	r2, [r3, #2]
	bms_temp_box.box_x2 = 450;
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <Display_DriveTemplate+0x130>)
 80013f6:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80013fa:	809a      	strh	r2, [r3, #4]
	bms_temp_box.box_y2 = 170;
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <Display_DriveTemplate+0x130>)
 80013fe:	22aa      	movs	r2, #170	; 0xaa
 8001400:	80da      	strh	r2, [r3, #6]
	bms_temp_box.font = FONT_32X53;
 8001402:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <Display_DriveTemplate+0x130>)
 8001404:	4a26      	ldr	r2, [pc, #152]	; (80014a0 <Display_DriveTemplate+0x12c>)
 8001406:	f103 0410 	add.w	r4, r3, #16
 800140a:	4615      	mov	r5, r2
 800140c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800140e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001410:	682b      	ldr	r3, [r5, #0]
 8001412:	6023      	str	r3, [r4, #0]
	bms_temp_box.last_color = C_BLACK;  // force box redraw
 8001414:	4b23      	ldr	r3, [pc, #140]	; (80014a4 <Display_DriveTemplate+0x130>)
 8001416:	2200      	movs	r2, #0
 8001418:	849a      	strh	r2, [r3, #36]	; 0x24
	bms_temp_box.last_value = 255;
 800141a:	4b22      	ldr	r3, [pc, #136]	; (80014a4 <Display_DriveTemplate+0x130>)
 800141c:	22ff      	movs	r2, #255	; 0xff
 800141e:	84da      	strh	r2, [r3, #38]	; 0x26

	state_box.box_x1 = 30;
 8001420:	4b21      	ldr	r3, [pc, #132]	; (80014a8 <Display_DriveTemplate+0x134>)
 8001422:	221e      	movs	r2, #30
 8001424:	801a      	strh	r2, [r3, #0]
	state_box.box_y1 = 200;
 8001426:	4b20      	ldr	r3, [pc, #128]	; (80014a8 <Display_DriveTemplate+0x134>)
 8001428:	22c8      	movs	r2, #200	; 0xc8
 800142a:	805a      	strh	r2, [r3, #2]
	state_box.box_x2 = 210;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <Display_DriveTemplate+0x134>)
 800142e:	22d2      	movs	r2, #210	; 0xd2
 8001430:	809a      	strh	r2, [r3, #4]
	state_box.box_y2 = 230;
 8001432:	4b1d      	ldr	r3, [pc, #116]	; (80014a8 <Display_DriveTemplate+0x134>)
 8001434:	22e6      	movs	r2, #230	; 0xe6
 8001436:	80da      	strh	r2, [r3, #6]
	state_box.font = FONT_12X16;
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <Display_DriveTemplate+0x134>)
 800143a:	4a1c      	ldr	r2, [pc, #112]	; (80014ac <Display_DriveTemplate+0x138>)
 800143c:	f103 0410 	add.w	r4, r3, #16
 8001440:	4615      	mov	r5, r2
 8001442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001446:	682b      	ldr	r3, [r5, #0]
 8001448:	6023      	str	r3, [r4, #0]
	state_box.last_color = C_BLACK;  // force box redraw
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <Display_DriveTemplate+0x134>)
 800144c:	2200      	movs	r2, #0
 800144e:	849a      	strh	r2, [r3, #36]	; 0x24

	glv_v_box.box_x1 = 270;
 8001450:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <Display_DriveTemplate+0x13c>)
 8001452:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001456:	801a      	strh	r2, [r3, #0]
	glv_v_box.box_y1 = 200;
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <Display_DriveTemplate+0x13c>)
 800145a:	22c8      	movs	r2, #200	; 0xc8
 800145c:	805a      	strh	r2, [r3, #2]
	glv_v_box.box_x2 = 450;
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <Display_DriveTemplate+0x13c>)
 8001460:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001464:	809a      	strh	r2, [r3, #4]
	glv_v_box.box_y2 = 230;
 8001466:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <Display_DriveTemplate+0x13c>)
 8001468:	22e6      	movs	r2, #230	; 0xe6
 800146a:	80da      	strh	r2, [r3, #6]
	glv_v_box.font = FONT_12X16;
 800146c:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <Display_DriveTemplate+0x13c>)
 800146e:	4a0f      	ldr	r2, [pc, #60]	; (80014ac <Display_DriveTemplate+0x138>)
 8001470:	f103 0410 	add.w	r4, r3, #16
 8001474:	4615      	mov	r5, r2
 8001476:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001478:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	6023      	str	r3, [r4, #0]
	glv_v_box.last_color = C_BLACK;  // force box redraw
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <Display_DriveTemplate+0x13c>)
 8001480:	2200      	movs	r2, #0
 8001482:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8001484:	bf00      	nop
 8001486:	bdb0      	pop	{r4, r5, r7, pc}
 8001488:	2000018c 	.word	0x2000018c
 800148c:	0800e6d8 	.word	0x0800e6d8
 8001490:	0800e6e4 	.word	0x0800e6e4
 8001494:	0800e69c 	.word	0x0800e69c
 8001498:	0800e6ac 	.word	0x0800e6ac
 800149c:	20000004 	.word	0x20000004
 80014a0:	0801dd08 	.word	0x0801dd08
 80014a4:	20000030 	.word	0x20000030
 80014a8:	20000160 	.word	0x20000160
 80014ac:	0801dcf4 	.word	0x0801dcf4
 80014b0:	2000005c 	.word	0x2000005c

080014b4 <Display_Update>:

void Display_Update()
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
	static uint32_t glv_v = 99999;
//	soc = soc+1 ;
//	glv_v+=1;

    draw_soc(soc);
 80014b8:	4b0f      	ldr	r3, [pc, #60]	; (80014f8 <Display_Update+0x44>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	b29b      	uxth	r3, r3
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f821 	bl	8001508 <draw_soc>
    draw_bms_temp(PACK_TEMP);
 80014c6:	4b0d      	ldr	r3, [pc, #52]	; (80014fc <Display_Update+0x48>)
 80014c8:	781b      	ldrb	r3, [r3, #0]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	b29b      	uxth	r3, r3
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 f82a 	bl	8001528 <draw_bms_temp>
    draw_state(one_byte_state(), bms_status);
 80014d4:	f000 fb70 	bl	8001bb8 <one_byte_state>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	4b08      	ldr	r3, [pc, #32]	; (8001500 <Display_Update+0x4c>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	4619      	mov	r1, r3
 80014e4:	4610      	mov	r0, r2
 80014e6:	f000 f82f 	bl	8001548 <draw_state>
    draw_glv_v(glv_v);
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <Display_Update+0x50>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f000 f9e4 	bl	80018bc <draw_glv_v>
}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	2000010f 	.word	0x2000010f
 80014fc:	2000010d 	.word	0x2000010d
 8001500:	20000110 	.word	0x20000110
 8001504:	20000088 	.word	0x20000088

08001508 <draw_soc>:


void draw_soc(uint16_t soc)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&soc_box, soc);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	4619      	mov	r1, r3
 8001516:	4803      	ldr	r0, [pc, #12]	; (8001524 <draw_soc+0x1c>)
 8001518:	f000 fa50 	bl	80019bc <draw_value_textbox>
}
 800151c:	bf00      	nop
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000004 	.word	0x20000004

08001528 <draw_bms_temp>:

void draw_bms_temp(uint16_t temp)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&bms_temp_box, temp);
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	4619      	mov	r1, r3
 8001536:	4803      	ldr	r0, [pc, #12]	; (8001544 <draw_bms_temp+0x1c>)
 8001538:	f000 fa40 	bl	80019bc <draw_value_textbox>
}
 800153c:	bf00      	nop
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000030 	.word	0x20000030

08001548 <draw_state>:

void draw_state(uint8_t state, uint16_t bms_status)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	460a      	mov	r2, r1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	4613      	mov	r3, r2
 8001556:	80bb      	strh	r3, [r7, #4]
    static uint8_t last_state = 255;
    static uint16_t last_bms_status;

    if((state == last_state) && (bms_status == last_bms_status))  // skip function if value is the same
 8001558:	4ba9      	ldr	r3, [pc, #676]	; (8001800 <draw_state+0x2b8>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	79fa      	ldrb	r2, [r7, #7]
 800155e:	429a      	cmp	r2, r3
 8001560:	d105      	bne.n	800156e <draw_state+0x26>
 8001562:	4ba8      	ldr	r3, [pc, #672]	; (8001804 <draw_state+0x2bc>)
 8001564:	881b      	ldrh	r3, [r3, #0]
 8001566:	88ba      	ldrh	r2, [r7, #4]
 8001568:	429a      	cmp	r2, r3
 800156a:	f000 819b 	beq.w	80018a4 <draw_state+0x35c>
    }

    UG_COLOR color;
    char string[15];

    switch(bms_status)  // BMS faults more important than VCU faults
 800156e:	88bb      	ldrh	r3, [r7, #4]
 8001570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001574:	d052      	beq.n	800161c <draw_state+0xd4>
 8001576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800157a:	dc59      	bgt.n	8001630 <draw_state+0xe8>
 800157c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001580:	d03f      	beq.n	8001602 <draw_state+0xba>
 8001582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001586:	dc53      	bgt.n	8001630 <draw_state+0xe8>
 8001588:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158c:	d02f      	beq.n	80015ee <draw_state+0xa6>
 800158e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001592:	dc4d      	bgt.n	8001630 <draw_state+0xe8>
 8001594:	2b40      	cmp	r3, #64	; 0x40
 8001596:	d020      	beq.n	80015da <draw_state+0x92>
 8001598:	2b40      	cmp	r3, #64	; 0x40
 800159a:	dc49      	bgt.n	8001630 <draw_state+0xe8>
 800159c:	2b10      	cmp	r3, #16
 800159e:	d012      	beq.n	80015c6 <draw_state+0x7e>
 80015a0:	2b10      	cmp	r3, #16
 80015a2:	dc45      	bgt.n	8001630 <draw_state+0xe8>
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d001      	beq.n	80015ac <draw_state+0x64>
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d141      	bne.n	8001630 <draw_state+0xe8>
    {
        case PACK_TEMP_OVER:
        case PACK_TEMP_UNDER:
            color = C_RED;
 80015ac:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015b0:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " BMS TEMP ");
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4a94      	ldr	r2, [pc, #592]	; (8001808 <draw_state+0x2c0>)
 80015b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80015ba:	c303      	stmia	r3!, {r0, r1}
 80015bc:	801a      	strh	r2, [r3, #0]
 80015be:	3302      	adds	r3, #2
 80015c0:	0c12      	lsrs	r2, r2, #16
 80015c2:	701a      	strb	r2, [r3, #0]
            break;
 80015c4:	e166      	b.n	8001894 <draw_state+0x34c>
        case LOW_SOC:
            color = C_RED;
 80015c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015ca:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " LOW SOC ");
 80015cc:	f107 030c 	add.w	r3, r7, #12
 80015d0:	4a8e      	ldr	r2, [pc, #568]	; (800180c <draw_state+0x2c4>)
 80015d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80015d4:	c303      	stmia	r3!, {r0, r1}
 80015d6:	801a      	strh	r2, [r3, #0]
            break;
 80015d8:	e15c      	b.n	8001894 <draw_state+0x34c>
        case IMBALANCE:
            color = C_RED;
 80015da:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015de:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "IMBALANCE");
 80015e0:	f107 030c 	add.w	r3, r7, #12
 80015e4:	4a8a      	ldr	r2, [pc, #552]	; (8001810 <draw_state+0x2c8>)
 80015e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80015e8:	c303      	stmia	r3!, {r0, r1}
 80015ea:	801a      	strh	r2, [r3, #0]
            break;
 80015ec:	e152      	b.n	8001894 <draw_state+0x34c>
        case SPI_FAULT:
            color = C_RED;
 80015ee:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80015f2:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "SPI FAULT");
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4a86      	ldr	r2, [pc, #536]	; (8001814 <draw_state+0x2cc>)
 80015fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80015fc:	c303      	stmia	r3!, {r0, r1}
 80015fe:	801a      	strh	r2, [r3, #0]
            break;
 8001600:	e148      	b.n	8001894 <draw_state+0x34c>
        case CELL_VOLT_OVER:
            color = C_RED;
 8001602:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001606:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " OVERVOLT ");
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	4a82      	ldr	r2, [pc, #520]	; (8001818 <draw_state+0x2d0>)
 800160e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001610:	c303      	stmia	r3!, {r0, r1}
 8001612:	801a      	strh	r2, [r3, #0]
 8001614:	3302      	adds	r3, #2
 8001616:	0c12      	lsrs	r2, r2, #16
 8001618:	701a      	strb	r2, [r3, #0]
            break;
 800161a:	e13b      	b.n	8001894 <draw_state+0x34c>
        case CELL_VOLT_UNDER:
            color = C_RED;
 800161c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001620:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "UNDERVOLT");
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	4a7d      	ldr	r2, [pc, #500]	; (800181c <draw_state+0x2d4>)
 8001628:	ca07      	ldmia	r2, {r0, r1, r2}
 800162a:	c303      	stmia	r3!, {r0, r1}
 800162c:	801a      	strh	r2, [r3, #0]
            break;
 800162e:	e131      	b.n	8001894 <draw_state+0x34c>
        default:
            // check fault bit
            if (state & 0x80) {
 8001630:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001634:	2b00      	cmp	r3, #0
 8001636:	f280 80be 	bge.w	80017b6 <draw_state+0x26e>
                // *************** FAULTS ***************
                uint8_t fault = state & 0x7f; // mask off fault bit
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001640:	777b      	strb	r3, [r7, #29]
                switch(fault)
 8001642:	7f7b      	ldrb	r3, [r7, #29]
 8001644:	2b0a      	cmp	r3, #10
 8001646:	dc1d      	bgt.n	8001684 <draw_state+0x13c>
 8001648:	2b00      	cmp	r3, #0
 800164a:	f340 80aa 	ble.w	80017a2 <draw_state+0x25a>
 800164e:	3b01      	subs	r3, #1
 8001650:	2b09      	cmp	r3, #9
 8001652:	f200 80a6 	bhi.w	80017a2 <draw_state+0x25a>
 8001656:	a201      	add	r2, pc, #4	; (adr r2, 800165c <draw_state+0x114>)
 8001658:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800165c:	080016a5 	.word	0x080016a5
 8001660:	080016bf 	.word	0x080016bf
 8001664:	080016d9 	.word	0x080016d9
 8001668:	080016f3 	.word	0x080016f3
 800166c:	0800170d 	.word	0x0800170d
 8001670:	08001727 	.word	0x08001727
 8001674:	08001741 	.word	0x08001741
 8001678:	0800175b 	.word	0x0800175b
 800167c:	08001775 	.word	0x08001775
 8001680:	08001789 	.word	0x08001789
 8001684:	2bff      	cmp	r3, #255	; 0xff
 8001686:	f040 808c 	bne.w	80017a2 <draw_state+0x25a>
                {
//                    case NONE: // STARTUP (effectively)
                	case 255:
                        // not obtainable via CAN
                        // would only show when hardcoded on startup
                        color = C_YELLOW;
 800168a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800168e:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " STARTUP  ");
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4a62      	ldr	r2, [pc, #392]	; (8001820 <draw_state+0x2d8>)
 8001696:	ca07      	ldmia	r2, {r0, r1, r2}
 8001698:	c303      	stmia	r3!, {r0, r1}
 800169a:	801a      	strh	r2, [r3, #0]
 800169c:	3302      	adds	r3, #2
 800169e:	0c12      	lsrs	r2, r2, #16
 80016a0:	701a      	strb	r2, [r3, #0]
                        break;
 80016a2:	e0f7      	b.n	8001894 <draw_state+0x34c>
                    case DRIVE_REQUEST_FROM_LV:
                        color = C_RED;
 80016a4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016a8:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "DRV FRM LV");
 80016aa:	f107 030c 	add.w	r3, r7, #12
 80016ae:	4a5d      	ldr	r2, [pc, #372]	; (8001824 <draw_state+0x2dc>)
 80016b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b2:	c303      	stmia	r3!, {r0, r1}
 80016b4:	801a      	strh	r2, [r3, #0]
 80016b6:	3302      	adds	r3, #2
 80016b8:	0c12      	lsrs	r2, r2, #16
 80016ba:	701a      	strb	r2, [r3, #0]
                        break;
 80016bc:	e0ea      	b.n	8001894 <draw_state+0x34c>
                    case CONSERVATIVE_TIMER_MAXED:
                        color = C_RED;
 80016be:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016c2:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "PRE TM OUT");
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4a57      	ldr	r2, [pc, #348]	; (8001828 <draw_state+0x2e0>)
 80016ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80016cc:	c303      	stmia	r3!, {r0, r1}
 80016ce:	801a      	strh	r2, [r3, #0]
 80016d0:	3302      	adds	r3, #2
 80016d2:	0c12      	lsrs	r2, r2, #16
 80016d4:	701a      	strb	r2, [r3, #0]
                        break;
 80016d6:	e0dd      	b.n	8001894 <draw_state+0x34c>
                    case BRAKE_NOT_PRESSED:
                        color = C_RED;
 80016d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016dc:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BR NOT PRS");
 80016de:	f107 030c 	add.w	r3, r7, #12
 80016e2:	4a52      	ldr	r2, [pc, #328]	; (800182c <draw_state+0x2e4>)
 80016e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80016e6:	c303      	stmia	r3!, {r0, r1}
 80016e8:	801a      	strh	r2, [r3, #0]
 80016ea:	3302      	adds	r3, #2
 80016ec:	0c12      	lsrs	r2, r2, #16
 80016ee:	701a      	strb	r2, [r3, #0]
                        break;
 80016f0:	e0d0      	b.n	8001894 <draw_state+0x34c>
                    case HV_DISABLED_WHILE_DRIVING:
                        color = C_RED;
 80016f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80016f6:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HV OFF DRV");
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4a4c      	ldr	r2, [pc, #304]	; (8001830 <draw_state+0x2e8>)
 80016fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001700:	c303      	stmia	r3!, {r0, r1}
 8001702:	801a      	strh	r2, [r3, #0]
 8001704:	3302      	adds	r3, #2
 8001706:	0c12      	lsrs	r2, r2, #16
 8001708:	701a      	strb	r2, [r3, #0]
                        break;
 800170a:	e0c3      	b.n	8001894 <draw_state+0x34c>
                    case SENSOR_DISCREPANCY:
                        color = C_RED;
 800170c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001710:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SNSR DSCRP");
 8001712:	f107 030c 	add.w	r3, r7, #12
 8001716:	4a47      	ldr	r2, [pc, #284]	; (8001834 <draw_state+0x2ec>)
 8001718:	ca07      	ldmia	r2, {r0, r1, r2}
 800171a:	c303      	stmia	r3!, {r0, r1}
 800171c:	801a      	strh	r2, [r3, #0]
 800171e:	3302      	adds	r3, #2
 8001720:	0c12      	lsrs	r2, r2, #16
 8001722:	701a      	strb	r2, [r3, #0]
                        break;
 8001724:	e0b6      	b.n	8001894 <draw_state+0x34c>
                    case BRAKE_IMPLAUSIBLE:
                        color = C_YELLOW;
 8001726:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800172a:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BSPD TRIPD");
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	4a41      	ldr	r2, [pc, #260]	; (8001838 <draw_state+0x2f0>)
 8001732:	ca07      	ldmia	r2, {r0, r1, r2}
 8001734:	c303      	stmia	r3!, {r0, r1}
 8001736:	801a      	strh	r2, [r3, #0]
 8001738:	3302      	adds	r3, #2
 800173a:	0c12      	lsrs	r2, r2, #16
 800173c:	701a      	strb	r2, [r3, #0]
                        break;
 800173e:	e0a9      	b.n	8001894 <draw_state+0x34c>
                    case SHUTDOWN_CIRCUIT_OPEN:
                        color = C_RED;
 8001740:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001744:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SHTDWN OPN");
 8001746:	f107 030c 	add.w	r3, r7, #12
 800174a:	4a3c      	ldr	r2, [pc, #240]	; (800183c <draw_state+0x2f4>)
 800174c:	ca07      	ldmia	r2, {r0, r1, r2}
 800174e:	c303      	stmia	r3!, {r0, r1}
 8001750:	801a      	strh	r2, [r3, #0]
 8001752:	3302      	adds	r3, #2
 8001754:	0c12      	lsrs	r2, r2, #16
 8001756:	701a      	strb	r2, [r3, #0]
                        break;
 8001758:	e09c      	b.n	8001894 <draw_state+0x34c>
                    case UNCALIBRATED:
                        color = C_RED;
 800175a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800175e:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "UNCALIBRTD");
 8001760:	f107 030c 	add.w	r3, r7, #12
 8001764:	4a36      	ldr	r2, [pc, #216]	; (8001840 <draw_state+0x2f8>)
 8001766:	ca07      	ldmia	r2, {r0, r1, r2}
 8001768:	c303      	stmia	r3!, {r0, r1}
 800176a:	801a      	strh	r2, [r3, #0]
 800176c:	3302      	adds	r3, #2
 800176e:	0c12      	lsrs	r2, r2, #16
 8001770:	701a      	strb	r2, [r3, #0]
                        break;
 8001772:	e08f      	b.n	8001894 <draw_state+0x34c>
                    case HARD_BSPD:
                        color = C_RED;
 8001774:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001778:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HARD BSPD");
 800177a:	f107 030c 	add.w	r3, r7, #12
 800177e:	4a31      	ldr	r2, [pc, #196]	; (8001844 <draw_state+0x2fc>)
 8001780:	ca07      	ldmia	r2, {r0, r1, r2}
 8001782:	c303      	stmia	r3!, {r0, r1}
 8001784:	801a      	strh	r2, [r3, #0]
                        break;
 8001786:	e085      	b.n	8001894 <draw_state+0x34c>
                    case MC_FAULT:
                        color = C_RED;
 8001788:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800178c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " MC FAULT ");
 800178e:	f107 030c 	add.w	r3, r7, #12
 8001792:	4a2d      	ldr	r2, [pc, #180]	; (8001848 <draw_state+0x300>)
 8001794:	ca07      	ldmia	r2, {r0, r1, r2}
 8001796:	c303      	stmia	r3!, {r0, r1}
 8001798:	801a      	strh	r2, [r3, #0]
 800179a:	3302      	adds	r3, #2
 800179c:	0c12      	lsrs	r2, r2, #16
 800179e:	701a      	strb	r2, [r3, #0]
                        break;
 80017a0:	e078      	b.n	8001894 <draw_state+0x34c>
                    default:
                        color = C_RED;
 80017a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017a6:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " YO WTF? ");
 80017a8:	f107 030c 	add.w	r3, r7, #12
 80017ac:	4a27      	ldr	r2, [pc, #156]	; (800184c <draw_state+0x304>)
 80017ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80017b0:	c303      	stmia	r3!, {r0, r1}
 80017b2:	801a      	strh	r2, [r3, #0]
                        break;
 80017b4:	e06e      	b.n	8001894 <draw_state+0x34c>
                }
            }
            else
            {
                // *************** NO FAULTS ***************
                color = C_GREEN;
 80017b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80017ba:	83fb      	strh	r3, [r7, #30]
                switch(state)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d85e      	bhi.n	8001880 <draw_state+0x338>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <draw_state+0x280>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017ed 	.word	0x080017ed
 80017d0:	08001859 	.word	0x08001859
 80017d4:	0800186d 	.word	0x0800186d
                {
                    case LV:
                        strcpy(string, "    LV    ");
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4a1c      	ldr	r2, [pc, #112]	; (8001850 <draw_state+0x308>)
 80017de:	ca07      	ldmia	r2, {r0, r1, r2}
 80017e0:	c303      	stmia	r3!, {r0, r1}
 80017e2:	801a      	strh	r2, [r3, #0]
 80017e4:	3302      	adds	r3, #2
 80017e6:	0c12      	lsrs	r2, r2, #16
 80017e8:	701a      	strb	r2, [r3, #0]
                        break;
 80017ea:	e053      	b.n	8001894 <draw_state+0x34c>
                    case PRECHARGING:
                        strcpy(string, "PRECHARGE ");
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	4a18      	ldr	r2, [pc, #96]	; (8001854 <draw_state+0x30c>)
 80017f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f4:	c303      	stmia	r3!, {r0, r1}
 80017f6:	801a      	strh	r2, [r3, #0]
 80017f8:	3302      	adds	r3, #2
 80017fa:	0c12      	lsrs	r2, r2, #16
 80017fc:	701a      	strb	r2, [r3, #0]
                        break;
 80017fe:	e049      	b.n	8001894 <draw_state+0x34c>
 8001800:	2000008c 	.word	0x2000008c
 8001804:	20000214 	.word	0x20000214
 8001808:	0800e6f0 	.word	0x0800e6f0
 800180c:	0800e6fc 	.word	0x0800e6fc
 8001810:	0800e708 	.word	0x0800e708
 8001814:	0800e714 	.word	0x0800e714
 8001818:	0800e720 	.word	0x0800e720
 800181c:	0800e72c 	.word	0x0800e72c
 8001820:	0800e738 	.word	0x0800e738
 8001824:	0800e744 	.word	0x0800e744
 8001828:	0800e750 	.word	0x0800e750
 800182c:	0800e75c 	.word	0x0800e75c
 8001830:	0800e768 	.word	0x0800e768
 8001834:	0800e774 	.word	0x0800e774
 8001838:	0800e780 	.word	0x0800e780
 800183c:	0800e78c 	.word	0x0800e78c
 8001840:	0800e798 	.word	0x0800e798
 8001844:	0800e7a4 	.word	0x0800e7a4
 8001848:	0800e7b0 	.word	0x0800e7b0
 800184c:	0800e7bc 	.word	0x0800e7bc
 8001850:	0800e7c8 	.word	0x0800e7c8
 8001854:	0800e7d4 	.word	0x0800e7d4
                    case HV_ENABLED:
                        strcpy(string, "HV ENABLED");
 8001858:	f107 030c 	add.w	r3, r7, #12
 800185c:	4a13      	ldr	r2, [pc, #76]	; (80018ac <draw_state+0x364>)
 800185e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001860:	c303      	stmia	r3!, {r0, r1}
 8001862:	801a      	strh	r2, [r3, #0]
 8001864:	3302      	adds	r3, #2
 8001866:	0c12      	lsrs	r2, r2, #16
 8001868:	701a      	strb	r2, [r3, #0]
                        break;
 800186a:	e013      	b.n	8001894 <draw_state+0x34c>
                    case DRIVE:
                        strcpy(string, "  DRIVE   ");
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <draw_state+0x368>)
 8001872:	ca07      	ldmia	r2, {r0, r1, r2}
 8001874:	c303      	stmia	r3!, {r0, r1}
 8001876:	801a      	strh	r2, [r3, #0]
 8001878:	3302      	adds	r3, #2
 800187a:	0c12      	lsrs	r2, r2, #16
 800187c:	701a      	strb	r2, [r3, #0]
                        break;
 800187e:	e009      	b.n	8001894 <draw_state+0x34c>
                    default:
						color = C_RED;
 8001880:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001884:	83fb      	strh	r3, [r7, #30]
						strcpy(string, " YO WTF? ");
 8001886:	f107 030c 	add.w	r3, r7, #12
 800188a:	4a0a      	ldr	r2, [pc, #40]	; (80018b4 <draw_state+0x36c>)
 800188c:	ca07      	ldmia	r2, {r0, r1, r2}
 800188e:	c303      	stmia	r3!, {r0, r1}
 8001890:	801a      	strh	r2, [r3, #0]
						break;
 8001892:	bf00      	nop
                }
            }
    }

    draw_textbox(&state_box, color, string, 11);
 8001894:	f107 020c 	add.w	r2, r7, #12
 8001898:	8bf9      	ldrh	r1, [r7, #30]
 800189a:	230b      	movs	r3, #11
 800189c:	4806      	ldr	r0, [pc, #24]	; (80018b8 <draw_state+0x370>)
 800189e:	f000 f8c7 	bl	8001a30 <draw_textbox>
 80018a2:	e000      	b.n	80018a6 <draw_state+0x35e>
        return;
 80018a4:	bf00      	nop
}
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	0800e7e0 	.word	0x0800e7e0
 80018b0:	0800e7ec 	.word	0x0800e7ec
 80018b4:	0800e7bc 	.word	0x0800e7bc
 80018b8:	20000160 	.word	0x20000160

080018bc <draw_glv_v>:


void draw_glv_v(uint32_t data) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
    // translate from voltage divider measurement to true voltage
    // y = 0.4295x + 18.254
    data *= 859;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f240 325b 	movw	r2, #859	; 0x35b
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	607b      	str	r3, [r7, #4]
    data /= 2000; // 0.4295
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4a17      	ldr	r2, [pc, #92]	; (8001930 <draw_glv_v+0x74>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	09db      	lsrs	r3, r3, #7
 80018da:	607b      	str	r3, [r7, #4]
    data += 18;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3312      	adds	r3, #18
 80018e0:	607b      	str	r3, [r7, #4]
    UG_COLOR color;
    if (data > 1150) {
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f240 427e 	movw	r2, #1150	; 0x47e
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d903      	bls.n	80018f4 <draw_glv_v+0x38>
        color = C_GREEN;
 80018ec:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80018f0:	81fb      	strh	r3, [r7, #14]
 80018f2:	e00b      	b.n	800190c <draw_glv_v+0x50>
    } else if (data > 1100) {
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f240 424c 	movw	r2, #1100	; 0x44c
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d903      	bls.n	8001906 <draw_glv_v+0x4a>
        color = C_YELLOW;
 80018fe:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001902:	81fb      	strh	r3, [r7, #14]
 8001904:	e002      	b.n	800190c <draw_glv_v+0x50>
    } else {
    	color = C_RED;
 8001906:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800190a:	81fb      	strh	r3, [r7, #14]
    }

    char str[6];
    sprintf(str, "%ld", data);
 800190c:	f107 0308 	add.w	r3, r7, #8
 8001910:	687a      	ldr	r2, [r7, #4]
 8001912:	4908      	ldr	r1, [pc, #32]	; (8001934 <draw_glv_v+0x78>)
 8001914:	4618      	mov	r0, r3
 8001916:	f00c f9f9 	bl	800dd0c <siprintf>
    draw_textbox(&glv_v_box, color, str, 11);
 800191a:	f107 0208 	add.w	r2, r7, #8
 800191e:	89f9      	ldrh	r1, [r7, #14]
 8001920:	230b      	movs	r3, #11
 8001922:	4805      	ldr	r0, [pc, #20]	; (8001938 <draw_glv_v+0x7c>)
 8001924:	f000 f884 	bl	8001a30 <draw_textbox>
}
 8001928:	bf00      	nop
 800192a:	3710      	adds	r7, #16
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	10624dd3 	.word	0x10624dd3
 8001934:	0800e7f8 	.word	0x0800e7f8
 8001938:	2000005c 	.word	0x2000005c

0800193c <value_to_color>:



UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value)
{
 800193c:	b084      	sub	sp, #16
 800193e:	b490      	push	{r4, r7}
 8001940:	af00      	add	r7, sp, #0
 8001942:	f107 0408 	add.w	r4, r7, #8
 8001946:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(cfg.grn_ylw_cutoff > cfg.ylw_org_cutoff)   // green for large red for small
 800194a:	8a3a      	ldrh	r2, [r7, #16]
 800194c:	8a7b      	ldrh	r3, [r7, #18]
 800194e:	429a      	cmp	r2, r3
 8001950:	d917      	bls.n	8001982 <value_to_color+0x46>
    {
        if(value > cfg.grn_ylw_cutoff)
 8001952:	8a3b      	ldrh	r3, [r7, #16]
 8001954:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001956:	429a      	cmp	r2, r3
 8001958:	d902      	bls.n	8001960 <value_to_color+0x24>
        {
            return C_GREEN;
 800195a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800195e:	e027      	b.n	80019b0 <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 8001960:	8a7b      	ldrh	r3, [r7, #18]
 8001962:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001964:	429a      	cmp	r2, r3
 8001966:	d902      	bls.n	800196e <value_to_color+0x32>
        {
            return C_YELLOW;
 8001968:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800196c:	e020      	b.n	80019b0 <value_to_color+0x74>
        }
        else if(value > cfg.org_red_cutoff)
 800196e:	8abb      	ldrh	r3, [r7, #20]
 8001970:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001972:	429a      	cmp	r2, r3
 8001974:	d902      	bls.n	800197c <value_to_color+0x40>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8001976:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 800197a:	e019      	b.n	80019b0 <value_to_color+0x74>
        }
        else
        {
            return C_RED;
 800197c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001980:	e016      	b.n	80019b0 <value_to_color+0x74>
        }
    }
    else  // red for large green for small
    {
        if(value > cfg.org_red_cutoff)
 8001982:	8abb      	ldrh	r3, [r7, #20]
 8001984:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001986:	429a      	cmp	r2, r3
 8001988:	d902      	bls.n	8001990 <value_to_color+0x54>
        {
            return C_RED;
 800198a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800198e:	e00f      	b.n	80019b0 <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 8001990:	8a7b      	ldrh	r3, [r7, #18]
 8001992:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001994:	429a      	cmp	r2, r3
 8001996:	d902      	bls.n	800199e <value_to_color+0x62>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8001998:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 800199c:	e008      	b.n	80019b0 <value_to_color+0x74>
        }
        else if(value > cfg.grn_ylw_cutoff)
 800199e:	8a3b      	ldrh	r3, [r7, #16]
 80019a0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d902      	bls.n	80019ac <value_to_color+0x70>
        {
            return C_YELLOW;
 80019a6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80019aa:	e001      	b.n	80019b0 <value_to_color+0x74>
        }
        else
        {
            return C_GREEN;
 80019ac:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
        }
    }
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc90      	pop	{r4, r7}
 80019b6:	b004      	add	sp, #16
 80019b8:	4770      	bx	lr
	...

080019bc <draw_value_textbox>:

void draw_value_textbox(TEXTBOX_CONFIG* cfg, uint16_t value)
{
 80019bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019be:	b08f      	sub	sp, #60	; 0x3c
 80019c0:	af08      	add	r7, sp, #32
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	807b      	strh	r3, [r7, #2]
	if(value == cfg->last_value)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019cc:	887a      	ldrh	r2, [r7, #2]
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d028      	beq.n	8001a24 <draw_value_textbox+0x68>
	{
		return;
	}

	cfg->last_value = value;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	887a      	ldrh	r2, [r7, #2]
 80019d6:	84da      	strh	r2, [r3, #38]	; 0x26

	UG_COLOR color = value_to_color(*cfg, value);
 80019d8:	687e      	ldr	r6, [r7, #4]
 80019da:	887b      	ldrh	r3, [r7, #2]
 80019dc:	9307      	str	r3, [sp, #28]
 80019de:	466d      	mov	r5, sp
 80019e0:	f106 0410 	add.w	r4, r6, #16
 80019e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019e8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80019ec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80019f0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80019f4:	f7ff ffa2 	bl	800193c <value_to_color>
 80019f8:	4603      	mov	r3, r0
 80019fa:	82fb      	strh	r3, [r7, #22]
	char string[10];
	uint16_t str_len = sprintf(string, "%d%c", value, cfg->units);
 80019fc:	887a      	ldrh	r2, [r7, #2]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a04:	f107 0008 	add.w	r0, r7, #8
 8001a08:	4908      	ldr	r1, [pc, #32]	; (8001a2c <draw_value_textbox+0x70>)
 8001a0a:	f00c f97f 	bl	800dd0c <siprintf>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	82bb      	strh	r3, [r7, #20]

	draw_textbox(cfg, color, string, str_len);
 8001a12:	8abb      	ldrh	r3, [r7, #20]
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	f107 0208 	add.w	r2, r7, #8
 8001a1a:	8af9      	ldrh	r1, [r7, #22]
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f807 	bl	8001a30 <draw_textbox>
 8001a22:	e000      	b.n	8001a26 <draw_value_textbox+0x6a>
		return;
 8001a24:	bf00      	nop
}
 8001a26:	371c      	adds	r7, #28
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a2c:	0800e7fc 	.word	0x0800e7fc

08001a30 <draw_textbox>:

void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len)
{
 8001a30:	b590      	push	{r4, r7, lr}
 8001a32:	b089      	sub	sp, #36	; 0x24
 8001a34:	af02      	add	r7, sp, #8
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	607a      	str	r2, [r7, #4]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	817b      	strh	r3, [r7, #10]
 8001a40:	4613      	mov	r3, r2
 8001a42:	727b      	strb	r3, [r7, #9]
    // determine x and y coordinates to center text
    uint16_t text_x = (cfg->box_x2 + cfg->box_x1)/2 - ((str_len * cfg->font.char_width)/2);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	889b      	ldrh	r3, [r3, #4]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	881b      	ldrh	r3, [r3, #0]
 8001a4e:	4413      	add	r3, r2
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	da00      	bge.n	8001a56 <draw_textbox+0x26>
 8001a54:	3301      	adds	r3, #1
 8001a56:	105b      	asrs	r3, r3, #1
 8001a58:	b29a      	uxth	r2, r3
 8001a5a:	7a7b      	ldrb	r3, [r7, #9]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001a62:	fb01 f303 	mul.w	r3, r1, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da00      	bge.n	8001a6c <draw_textbox+0x3c>
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	105b      	asrs	r3, r3, #1
 8001a6e:	425b      	negs	r3, r3
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	82fb      	strh	r3, [r7, #22]
    uint16_t text_y = (cfg->box_y2 + cfg->box_y1)/2 - (cfg->font.char_height/2);
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	88db      	ldrh	r3, [r3, #6]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	885b      	ldrh	r3, [r3, #2]
 8001a80:	4413      	add	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da00      	bge.n	8001a88 <draw_textbox+0x58>
 8001a86:	3301      	adds	r3, #1
 8001a88:	105b      	asrs	r3, r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	da00      	bge.n	8001a98 <draw_textbox+0x68>
 8001a96:	3301      	adds	r3, #1
 8001a98:	105b      	asrs	r3, r3, #1
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	82bb      	strh	r3, [r7, #20]

    if(color != cfg->last_color)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001aa6:	897a      	ldrh	r2, [r7, #10]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d013      	beq.n	8001ad4 <draw_textbox+0xa4>
    {
        UG_FillFrame(cfg->box_x1, cfg->box_y1, cfg->box_x2, cfg->box_y2, color);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	881b      	ldrh	r3, [r3, #0]
 8001ab0:	b218      	sxth	r0, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	885b      	ldrh	r3, [r3, #2]
 8001ab6:	b219      	sxth	r1, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	889b      	ldrh	r3, [r3, #4]
 8001abc:	b21a      	sxth	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	88db      	ldrh	r3, [r3, #6]
 8001ac2:	b21c      	sxth	r4, r3
 8001ac4:	897b      	ldrh	r3, [r7, #10]
 8001ac6:	9300      	str	r3, [sp, #0]
 8001ac8:	4623      	mov	r3, r4
 8001aca:	f002 f99f 	bl	8003e0c <UG_FillFrame>
        cfg->last_color = color;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	897a      	ldrh	r2, [r7, #10]
 8001ad2:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    UG_FontSelect(&cfg->font);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	3310      	adds	r3, #16
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f002 f95f 	bl	8003d9c <UG_FontSelect>
    UG_PutColorString(text_x, text_y, string, C_BLACK, color);
 8001ade:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001ae2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001ae6:	897b      	ldrh	r3, [r7, #10]
 8001ae8:	9300      	str	r3, [sp, #0]
 8001aea:	2300      	movs	r3, #0
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	f002 fa83 	bl	8003ff8 <UG_PutColorString>
}
 8001af2:	bf00      	nop
 8001af4:	371c      	adds	r7, #28
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd90      	pop	{r4, r7, pc}
	...

08001afc <change_state>:
volatile state_t state = STARTUP;
volatile error_t error = NONE;

/************ States ************/

void change_state(const state_t new_state) {
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
    // Handle edge cases
    if (state == FAULT && new_state != FAULT) {
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <change_state+0x34>)
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d105      	bne.n	8001b1c <change_state+0x20>
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2b04      	cmp	r3, #4
 8001b14:	d002      	beq.n	8001b1c <change_state+0x20>
        // Reset the error cause when exiting fault state
        error = NONE;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <change_state+0x38>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
    }

    state = new_state;
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <change_state+0x34>)
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	7013      	strb	r3, [r2, #0]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000008d 	.word	0x2000008d
 8001b34:	20000216 	.word	0x20000216

08001b38 <report_fault>:

void report_fault(error_t _error) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
    change_state(FAULT);
 8001b42:	2004      	movs	r0, #4
 8001b44:	f7ff ffda 	bl	8001afc <change_state>
    // Cause of error
    error = _error;
 8001b48:	4a03      	ldr	r2, [pc, #12]	; (8001b58 <report_fault+0x20>)
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	7013      	strb	r3, [r2, #0]
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000216 	.word	0x20000216

08001b5c <hv_requested>:

uint8_t hv_requested(){
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
    return (state == PRECHARGING)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <hv_requested+0x54>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	b2db      	uxtb	r3, r3
        || (state == HV_ENABLED)
        || (state == DRIVE)
        || (error == BRAKE_NOT_PRESSED)
        || (error == SENSOR_DISCREPANCY)
        || (error == BRAKE_IMPLAUSIBLE);
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d018      	beq.n	8001b9c <hv_requested+0x40>
        || (state == HV_ENABLED)
 8001b6a:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <hv_requested+0x54>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d013      	beq.n	8001b9c <hv_requested+0x40>
        || (state == DRIVE)
 8001b74:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <hv_requested+0x54>)
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b03      	cmp	r3, #3
 8001b7c:	d00e      	beq.n	8001b9c <hv_requested+0x40>
        || (error == BRAKE_NOT_PRESSED)
 8001b7e:	4b0d      	ldr	r3, [pc, #52]	; (8001bb4 <hv_requested+0x58>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	2b03      	cmp	r3, #3
 8001b86:	d009      	beq.n	8001b9c <hv_requested+0x40>
        || (error == SENSOR_DISCREPANCY)
 8001b88:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <hv_requested+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b05      	cmp	r3, #5
 8001b90:	d004      	beq.n	8001b9c <hv_requested+0x40>
        || (error == BRAKE_IMPLAUSIBLE);
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <hv_requested+0x58>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	2b06      	cmp	r3, #6
 8001b9a:	d101      	bne.n	8001ba0 <hv_requested+0x44>
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e000      	b.n	8001ba2 <hv_requested+0x46>
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	b2db      	uxtb	r3, r3
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	2000008d 	.word	0x2000008d
 8001bb4:	20000216 	.word	0x20000216

08001bb8 <one_byte_state>:

uint8_t one_byte_state(){
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
    uint8_t state_byte = state;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	; (8001be8 <one_byte_state+0x30>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	71fb      	strb	r3, [r7, #7]
    if (state == FAULT) {
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <one_byte_state+0x30>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d104      	bne.n	8001bd8 <one_byte_state+0x20>
        state_byte = 0b10000000 + error; // greatest bit = 1 if fault
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <one_byte_state+0x34>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	3b80      	subs	r3, #128	; 0x80
 8001bd6:	71fb      	strb	r3, [r7, #7]
    }

    return state_byte;
 8001bd8:	79fb      	ldrb	r3, [r7, #7]
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	2000008d 	.word	0x2000008d
 8001bec:	20000216 	.word	0x20000216

08001bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	db0b      	blt.n	8001c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	f003 021f 	and.w	r2, r3, #31
 8001c08:	4907      	ldr	r1, [pc, #28]	; (8001c28 <__NVIC_EnableIRQ+0x38>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	095b      	lsrs	r3, r3, #5
 8001c10:	2001      	movs	r0, #1
 8001c12:	fa00 f202 	lsl.w	r2, r0, r2
 8001c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000e100 	.word	0xe000e100

08001c2c <bufclear>:
uint32_t byteswritten, bytesread; /* File write/read counts */

extern CAN_RxHeaderTypeDef RxHeader;
extern uint8_t RxData[8];

void bufclear(void){
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
	for(int i = 0; i<8192; i++){
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	e007      	b.n	8001c48 <bufclear+0x1c>
		buffer[i] = '\0';
 8001c38:	4a09      	ldr	r2, [pc, #36]	; (8001c60 <bufclear+0x34>)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8192; i++){
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	3301      	adds	r3, #1
 8001c46:	607b      	str	r3, [r7, #4]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001c4e:	dbf3      	blt.n	8001c38 <bufclear+0xc>
	}
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	370c      	adds	r7, #12
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	20000218 	.word	0x20000218

08001c64 <mount_sd_card>:

void mount_sd_card(void){
 8001c64:	b5b0      	push	{r4, r5, r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  	 res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	4919      	ldr	r1, [pc, #100]	; (8001cd0 <mount_sd_card+0x6c>)
 8001c6c:	4819      	ldr	r0, [pc, #100]	; (8001cd4 <mount_sd_card+0x70>)
 8001c6e:	f00b fba3 	bl	800d3b8 <f_mount>
 8001c72:	4603      	mov	r3, r0
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <mount_sd_card+0x74>)
 8001c78:	701a      	strb	r2, [r3, #0]
	           //Open file for writing (Create)
	 res = f_open(&SDFile, "CANData.txt",  FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_WRITE);
 8001c7a:	2232      	movs	r2, #50	; 0x32
 8001c7c:	4917      	ldr	r1, [pc, #92]	; (8001cdc <mount_sd_card+0x78>)
 8001c7e:	4818      	ldr	r0, [pc, #96]	; (8001ce0 <mount_sd_card+0x7c>)
 8001c80:	f00b fbe0 	bl	800d444 <f_open>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461a      	mov	r2, r3
 8001c88:	4b13      	ldr	r3, [pc, #76]	; (8001cd8 <mount_sd_card+0x74>)
 8001c8a:	701a      	strb	r2, [r3, #0]
	 strcpy (buffer, "This file is for saving CAN Data\n");
 8001c8c:	4a15      	ldr	r2, [pc, #84]	; (8001ce4 <mount_sd_card+0x80>)
 8001c8e:	4b16      	ldr	r3, [pc, #88]	; (8001ce8 <mount_sd_card+0x84>)
 8001c90:	4614      	mov	r4, r2
 8001c92:	461d      	mov	r5, r3
 8001c94:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	8023      	strh	r3, [r4, #0]
	 res = f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8001ca0:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <mount_sd_card+0x80>)
 8001ca2:	f7fe fab5 	bl	8000210 <strlen>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	4b10      	ldr	r3, [pc, #64]	; (8001cec <mount_sd_card+0x88>)
 8001caa:	490e      	ldr	r1, [pc, #56]	; (8001ce4 <mount_sd_card+0x80>)
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <mount_sd_card+0x7c>)
 8001cae:	f00b fd95 	bl	800d7dc <f_write>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <mount_sd_card+0x74>)
 8001cb8:	701a      	strb	r2, [r3, #0]
	 res = f_close(&SDFile);
 8001cba:	4809      	ldr	r0, [pc, #36]	; (8001ce0 <mount_sd_card+0x7c>)
 8001cbc:	f00b ffa0 	bl	800dc00 <f_close>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <mount_sd_card+0x74>)
 8001cc6:	701a      	strb	r2, [r3, #0]
	 bufclear();
 8001cc8:	f7ff ffb0 	bl	8001c2c <bufclear>
}
 8001ccc:	bf00      	nop
 8001cce:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd0:	20002820 	.word	0x20002820
 8001cd4:	20002824 	.word	0x20002824
 8001cd8:	20002218 	.word	0x20002218
 8001cdc:	0800e804 	.word	0x0800e804
 8001ce0:	20003858 	.word	0x20003858
 8001ce4:	20000218 	.word	0x20000218
 8001ce8:	0800e810 	.word	0x0800e810
 8001cec:	2000221c 	.word	0x2000221c

08001cf0 <write_to_sd>:

void write_to_sd(void){
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	b08d      	sub	sp, #52	; 0x34
 8001cf4:	af08      	add	r7, sp, #32
  int TimeRightAfter_Get_From_Slave = HAL_GetTick();
 8001cf6:	f003 f84d 	bl	8004d94 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	60fb      	str	r3, [r7, #12]

  res = f_open(&SDFile, "CANData.txt",  FA_OPEN_APPEND | FA_WRITE);
 8001cfe:	2232      	movs	r2, #50	; 0x32
 8001d00:	4921      	ldr	r1, [pc, #132]	; (8001d88 <write_to_sd+0x98>)
 8001d02:	4822      	ldr	r0, [pc, #136]	; (8001d8c <write_to_sd+0x9c>)
 8001d04:	f00b fb9e 	bl	800d444 <f_open>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <write_to_sd+0xa0>)
 8001d0e:	701a      	strb	r2, [r3, #0]
  sprintf(buffer,"%lX, %d, %d, %d, %d, %d, %d, %d, %d, %d \n ", RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7], TimeRightAfter_Get_From_Slave );
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <write_to_sd+0xa4>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b20      	ldr	r3, [pc, #128]	; (8001d98 <write_to_sd+0xa8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	469c      	mov	ip, r3
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	; (8001d98 <write_to_sd+0xa8>)
 8001d1c:	785b      	ldrb	r3, [r3, #1]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4b1d      	ldr	r3, [pc, #116]	; (8001d98 <write_to_sd+0xa8>)
 8001d22:	789b      	ldrb	r3, [r3, #2]
 8001d24:	4618      	mov	r0, r3
 8001d26:	4b1c      	ldr	r3, [pc, #112]	; (8001d98 <write_to_sd+0xa8>)
 8001d28:	78db      	ldrb	r3, [r3, #3]
 8001d2a:	461c      	mov	r4, r3
 8001d2c:	4b1a      	ldr	r3, [pc, #104]	; (8001d98 <write_to_sd+0xa8>)
 8001d2e:	791b      	ldrb	r3, [r3, #4]
 8001d30:	461d      	mov	r5, r3
 8001d32:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <write_to_sd+0xa8>)
 8001d34:	795b      	ldrb	r3, [r3, #5]
 8001d36:	461e      	mov	r6, r3
 8001d38:	4b17      	ldr	r3, [pc, #92]	; (8001d98 <write_to_sd+0xa8>)
 8001d3a:	799b      	ldrb	r3, [r3, #6]
 8001d3c:	607b      	str	r3, [r7, #4]
 8001d3e:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <write_to_sd+0xa8>)
 8001d40:	79db      	ldrb	r3, [r3, #7]
 8001d42:	603b      	str	r3, [r7, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	9307      	str	r3, [sp, #28]
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	9306      	str	r3, [sp, #24]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	9305      	str	r3, [sp, #20]
 8001d50:	9604      	str	r6, [sp, #16]
 8001d52:	9503      	str	r5, [sp, #12]
 8001d54:	9402      	str	r4, [sp, #8]
 8001d56:	9001      	str	r0, [sp, #4]
 8001d58:	9100      	str	r1, [sp, #0]
 8001d5a:	4663      	mov	r3, ip
 8001d5c:	490f      	ldr	r1, [pc, #60]	; (8001d9c <write_to_sd+0xac>)
 8001d5e:	4810      	ldr	r0, [pc, #64]	; (8001da0 <write_to_sd+0xb0>)
 8001d60:	f00b ffd4 	bl	800dd0c <siprintf>
  f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8001d64:	480e      	ldr	r0, [pc, #56]	; (8001da0 <write_to_sd+0xb0>)
 8001d66:	f7fe fa53 	bl	8000210 <strlen>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <write_to_sd+0xb4>)
 8001d6e:	490c      	ldr	r1, [pc, #48]	; (8001da0 <write_to_sd+0xb0>)
 8001d70:	4806      	ldr	r0, [pc, #24]	; (8001d8c <write_to_sd+0x9c>)
 8001d72:	f00b fd33 	bl	800d7dc <f_write>

  f_close(&SDFile);
 8001d76:	4805      	ldr	r0, [pc, #20]	; (8001d8c <write_to_sd+0x9c>)
 8001d78:	f00b ff42 	bl	800dc00 <f_close>
  bufclear();
 8001d7c:	f7ff ff56 	bl	8001c2c <bufclear>
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d88:	0800e804 	.word	0x0800e804
 8001d8c:	20003858 	.word	0x20003858
 8001d90:	20002218 	.word	0x20002218
 8001d94:	20000120 	.word	0x20000120
 8001d98:	2000013c 	.word	0x2000013c
 8001d9c:	0800e834 	.word	0x0800e834
 8001da0:	20000218 	.word	0x20000218
 8001da4:	2000221c 	.word	0x2000221c

08001da8 <traction_control_enable>:
 *  - TC = switches & 0b100
 *  - Hv = switches & 0b10
 *  - Dr = switches & 0b1
 */

uint8_t traction_control_enable() {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOG, BUTTON_1_Pin);
 8001dac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <traction_control_enable+0x14>)
 8001db2:	f005 f8d5 	bl	8006f60 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	40021800 	.word	0x40021800

08001dc0 <hv_switch>:

uint8_t display_debug_enabled() {
	return HAL_GPIO_ReadPin(GPIOG, BUTTON_2_Pin);
}

uint8_t hv_switch() {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOG, HV_REQUEST_Pin);
 8001dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001dc8:	4805      	ldr	r0, [pc, #20]	; (8001de0 <hv_switch+0x20>)
 8001dca:	f005 f8c9 	bl	8006f60 <HAL_GPIO_ReadPin>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40021800 	.word	0x40021800

08001de4 <drive_switch>:

uint8_t drive_switch() {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOG, DRIVE_REQUEST_Pin);
 8001de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dec:	4805      	ldr	r0, [pc, #20]	; (8001e04 <drive_switch+0x20>)
 8001dee:	f005 f8b7 	bl	8006f60 <HAL_GPIO_ReadPin>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	bf0c      	ite	eq
 8001df8:	2301      	moveq	r3, #1
 8001dfa:	2300      	movne	r3, #0
 8001dfc:	b2db      	uxtb	r3, r3
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40021800 	.word	0x40021800

08001e08 <shutdown_closed>:


uint8_t shutdown_closed() {
 8001e08:	b480      	push	{r7}
 8001e0a:	af00      	add	r7, sp, #0
    if (estop_flags) return 0;
 8001e0c:	4b0a      	ldr	r3, [pc, #40]	; (8001e38 <shutdown_closed+0x30>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <shutdown_closed+0x12>
 8001e16:	2300      	movs	r3, #0
 8001e18:	e009      	b.n	8001e2e <shutdown_closed+0x26>
    return (shutdown_flags & 0b00111000) == 0b00111000;
 8001e1a:	4b08      	ldr	r3, [pc, #32]	; (8001e3c <shutdown_closed+0x34>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e24:	2b38      	cmp	r3, #56	; 0x38
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr
 8001e38:	2000010c 	.word	0x2000010c
 8001e3c:	20000000 	.word	0x20000000

08001e40 <HAL_TIM_PeriodElapsedCallback>:

// TEST

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim7)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0e      	ldr	r2, [pc, #56]	; (8001e84 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d115      	bne.n	8001e7c <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
	  if (state == PRECHARGING) {
 8001e50:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d10d      	bne.n	8001e76 <HAL_TIM_PeriodElapsedCallback+0x36>
		  precharge_timer_ms += TMR1_PERIOD_MS;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	3314      	adds	r3, #20
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e62:	6013      	str	r3, [r2, #0]
		  if (precharge_timer_ms > PRECHARGE_TIMEOUT_MS) {
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e6c:	d906      	bls.n	8001e7c <HAL_TIM_PeriodElapsedCallback+0x3c>
			  report_fault(CONSERVATIVE_TIMER_MAXED);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	f7ff fe62 	bl	8001b38 <report_fault>
		  }
	  } else {
		  precharge_timer_ms = 0;
	  }
  }
}
 8001e74:	e002      	b.n	8001e7c <HAL_TIM_PeriodElapsedCallback+0x3c>
		  precharge_timer_ms = 0;
 8001e76:	4b05      	ldr	r3, [pc, #20]	; (8001e8c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	2000259c 	.word	0x2000259c
 8001e88:	2000008d 	.word	0x2000008d
 8001e8c:	200027cc 	.word	0x200027cc

08001e90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b09c      	sub	sp, #112	; 0x70
 8001e94:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e96:	f002 ff2c 	bl	8004cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e9a:	f000 f9bf 	bl	800221c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e9e:	f000 fdbf 	bl	8002a20 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ea2:	f000 fd25 	bl	80028f0 <MX_DMA_Init>
  MX_CAN2_Init();
 8001ea6:	f000 fb55 	bl	8002554 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 8001eaa:	f000 fb89 	bl	80025c0 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8001eae:	f000 fa21 	bl	80022f4 <MX_ADC1_Init>
  MX_ADC3_Init();
 8001eb2:	f000 fa89 	bl	80023c8 <MX_ADC3_Init>
  MX_TIM2_Init();
 8001eb6:	f000 fba3 	bl	8002600 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001eba:	f000 fbf7 	bl	80026ac <MX_TIM4_Init>
  MX_UART4_Init();
 8001ebe:	f000 fc87 	bl	80027d0 <MX_UART4_Init>
  MX_UART7_Init();
 8001ec2:	f000 fcb5 	bl	8002830 <MX_UART7_Init>
  MX_FMC_Init();
 8001ec6:	f000 fd49 	bl	800295c <MX_FMC_Init>
  MX_CAN1_Init();
 8001eca:	f000 fadb 	bl	8002484 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8001ece:	f000 fcdf 	bl	8002890 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 8001ed2:	f000 fc43 	bl	800275c <MX_TIM7_Init>
  MX_FATFS_Init();
 8001ed6:	f009 fa43 	bl	800b360 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_sensors();
 8001eda:	f000 fe6f 	bl	8002bbc <init_sensors>

  Display_Init();
 8001ede:	f7ff f9f3 	bl	80012c8 <Display_Init>
  UG_FontSelect(&FONT_12X16);
 8001ee2:	48bf      	ldr	r0, [pc, #764]	; (80021e0 <main+0x350>)
 8001ee4:	f001 ff5a 	bl	8003d9c <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f002 f93f 	bl	800416c <UG_SetBackcolor>
  UG_SetForecolor(C_YELLOW);
 8001eee:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 8001ef2:	f002 f929 	bl	8004148 <UG_SetForecolor>

  Display_CalibrateScreen();
 8001ef6:	f7ff fa11 	bl	800131c <Display_CalibrateScreen>

  Display_DriveTemplate();
 8001efa:	f7ff fa3b 	bl	8001374 <Display_DriveTemplate>

  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) {
 8001efe:	48b9      	ldr	r0, [pc, #740]	; (80021e4 <main+0x354>)
 8001f00:	f007 fb30 	bl	8009564 <HAL_TIM_Base_Start_IT>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <main+0x7e>
      Error_Handler();
 8001f0a:	f000 fe4b 	bl	8002ba4 <Error_Handler>
  }


  mount_sd_card();
 8001f0e:	f7ff fea9 	bl	8001c64 <mount_sd_card>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Display_Update();
 8001f12:	f7ff facf 	bl	80014b4 <Display_Update>

	  write_to_sd();
 8001f16:	f7ff feeb 	bl	8001cf0 <write_to_sd>

	  char sstr[100];
	  sprintf(sstr, "apps1: %d, apps2: %d, bse: %d      ", throttle1.percent, throttle2.percent, brake.percent);
 8001f1a:	4bb3      	ldr	r3, [pc, #716]	; (80021e8 <main+0x358>)
 8001f1c:	891b      	ldrh	r3, [r3, #8]
 8001f1e:	461a      	mov	r2, r3
 8001f20:	4bb2      	ldr	r3, [pc, #712]	; (80021ec <main+0x35c>)
 8001f22:	891b      	ldrh	r3, [r3, #8]
 8001f24:	4619      	mov	r1, r3
 8001f26:	4bb2      	ldr	r3, [pc, #712]	; (80021f0 <main+0x360>)
 8001f28:	891b      	ldrh	r3, [r3, #8]
 8001f2a:	1d38      	adds	r0, r7, #4
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	49b0      	ldr	r1, [pc, #704]	; (80021f4 <main+0x364>)
 8001f32:	f00b feeb 	bl	800dd0c <siprintf>
	  UG_PutString(5, 250, sstr);
 8001f36:	1d3b      	adds	r3, r7, #4
 8001f38:	461a      	mov	r2, r3
 8001f3a:	21fa      	movs	r1, #250	; 0xfa
 8001f3c:	2005      	movs	r0, #5
 8001f3e:	f001 ffd5 	bl	8003eec <UG_PutString>

	  update_sensor_vals(&hadc1, &hadc3);
 8001f42:	49ad      	ldr	r1, [pc, #692]	; (80021f8 <main+0x368>)
 8001f44:	48ad      	ldr	r0, [pc, #692]	; (80021fc <main+0x36c>)
 8001f46:	f000 fef1 	bl	8002d2c <update_sensor_vals>

	  can_tx_vcu_state(&hcan1);
 8001f4a:	48ad      	ldr	r0, [pc, #692]	; (8002200 <main+0x370>)
 8001f4c:	f7ff f8d6 	bl	80010fc <can_tx_vcu_state>

	  can_tx_torque_request(&hcan1);
 8001f50:	48ab      	ldr	r0, [pc, #684]	; (8002200 <main+0x370>)
 8001f52:	f7ff f917 	bl	8001184 <can_tx_torque_request>

	  // Traction control
	  if (traction_control_enable()) {
 8001f56:	f7ff ff27 	bl	8001da8 <traction_control_enable>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <main+0xd4>
		  traction_control_PID();
 8001f60:	f001 fdb6 	bl	8003ad0 <traction_control_PID>
	  }

	  // If shutdown circuit opens in any state
	  if (!shutdown_closed()) {
 8001f64:	f7ff ff50 	bl	8001e08 <shutdown_closed>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <main+0xe4>
		  report_fault(SHUTDOWN_CIRCUIT_OPEN);
 8001f6e:	2007      	movs	r0, #7
 8001f70:	f7ff fde2 	bl	8001b38 <report_fault>
//	  if (mc_fault) {
//		  report_fault(MC_FAULT);
//	  }


	  if (!init_fault_cleared) {
 8001f74:	4ba3      	ldr	r3, [pc, #652]	; (8002204 <main+0x374>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	b2db      	uxtb	r3, r3
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d10a      	bne.n	8001f94 <main+0x104>
		  can_clear_MC_fault(&hcan1);
 8001f7e:	48a0      	ldr	r0, [pc, #640]	; (8002200 <main+0x370>)
 8001f80:	f7ff f968 	bl	8001254 <can_clear_MC_fault>
		  if (mc_fault_clear_success) {
 8001f84:	4ba0      	ldr	r3, [pc, #640]	; (8002208 <main+0x378>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <main+0x104>
			 init_fault_cleared = 1;
 8001f8e:	4b9d      	ldr	r3, [pc, #628]	; (8002204 <main+0x374>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
//	  }
//	  else {
//		  Display_DriveTemplate();
//	  }

	  switch (state) {
 8001f94:	4b9d      	ldr	r3, [pc, #628]	; (800220c <main+0x37c>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b05      	cmp	r3, #5
 8001f9c:	d8b9      	bhi.n	8001f12 <main+0x82>
 8001f9e:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <main+0x114>)
 8001fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa4:	08001fe1 	.word	0x08001fe1
 8001fa8:	0800201d 	.word	0x0800201d
 8001fac:	08002059 	.word	0x08002059
 8001fb0:	0800207f 	.word	0x0800207f
 8001fb4:	080020a5 	.word	0x080020a5
 8001fb8:	08001fbd 	.word	0x08001fbd
		  case STARTUP:
			  run_calibration();
 8001fbc:	f000 fea2 	bl	8002d04 <run_calibration>

			  if (!hv_switch() && !drive_switch()) {
 8001fc0:	f7ff fefe 	bl	8001dc0 <hv_switch>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f040 80ff 	bne.w	80021ca <main+0x33a>
 8001fcc:	f7ff ff0a 	bl	8001de4 <drive_switch>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f040 80f9 	bne.w	80021ca <main+0x33a>
				  change_state(LV);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fd8f 	bl	8001afc <change_state>
			  }
			  break;
 8001fde:	e0f4      	b.n	80021ca <main+0x33a>
		  case LV:
			  run_calibration();
 8001fe0:	f000 fe90 	bl	8002d04 <run_calibration>

			  if (drive_switch()) {
 8001fe4:	f7ff fefe 	bl	8001de4 <drive_switch>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <main+0x166>
				  // Drive switch should not be enabled during LV
				  report_fault(DRIVE_REQUEST_FROM_LV);
 8001fee:	2001      	movs	r0, #1
 8001ff0:	f7ff fda2 	bl	8001b38 <report_fault>
				  break;
 8001ff4:	e0f3      	b.n	80021de <main+0x34e>
			  }

			  if (hv_switch()) {
 8001ff6:	f7ff fee3 	bl	8001dc0 <hv_switch>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	f000 80e6 	beq.w	80021ce <main+0x33e>
				  // HV switch was flipped
				  // check if APPS pedal was calibrated
				  if (sensors_calibrated()) {
 8002002:	f000 ff3d 	bl	8002e80 <sensors_calibrated>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <main+0x184>
					  // Start charging the car to high voltage state
					  change_state(PRECHARGING);
 800200c:	2001      	movs	r0, #1
 800200e:	f7ff fd75 	bl	8001afc <change_state>
				  } else {
					  report_fault(UNCALIBRATED);
				  }
			  }

			  break;
 8002012:	e0dc      	b.n	80021ce <main+0x33e>
					  report_fault(UNCALIBRATED);
 8002014:	2008      	movs	r0, #8
 8002016:	f7ff fd8f 	bl	8001b38 <report_fault>
			  break;
 800201a:	e0d8      	b.n	80021ce <main+0x33e>
		  case PRECHARGING:
//			  if (capacitor_volt > PRECHARGE_THRESHOLD) {

			  // if main AIRs closed
			  if (shutdown_flags & 0b110) {
 800201c:	4b7c      	ldr	r3, [pc, #496]	; (8002210 <main+0x380>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 0306 	and.w	r3, r3, #6
 8002026:	2b00      	cmp	r3, #0
 8002028:	d003      	beq.n	8002032 <main+0x1a2>
				  // Finished charging to HV on time
				  change_state(HV_ENABLED);
 800202a:	2002      	movs	r0, #2
 800202c:	f7ff fd66 	bl	8001afc <change_state>
				  break;
 8002030:	e0d5      	b.n	80021de <main+0x34e>
			  }
			  if (!hv_switch()) {
 8002032:	f7ff fec5 	bl	8001dc0 <hv_switch>
 8002036:	4603      	mov	r3, r0
 8002038:	2b00      	cmp	r3, #0
 800203a:	d103      	bne.n	8002044 <main+0x1b4>
				  // Driver flipped off HV switch
				  change_state(LV);
 800203c:	2000      	movs	r0, #0
 800203e:	f7ff fd5d 	bl	8001afc <change_state>
				  break;
 8002042:	e0cc      	b.n	80021de <main+0x34e>
			  }
			  if (drive_switch()) {
 8002044:	f7ff fece 	bl	8001de4 <drive_switch>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80c1 	beq.w	80021d2 <main+0x342>
				  // Drive switch should not be enabled during PRECHARGING
				  report_fault(DRIVE_REQUEST_FROM_LV);
 8002050:	2001      	movs	r0, #1
 8002052:	f7ff fd71 	bl	8001b38 <report_fault>
				  break;
 8002056:	e0c2      	b.n	80021de <main+0x34e>
			  }
			  break;
		  case HV_ENABLED:
			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules
 8002058:	f7ff feb2 	bl	8001dc0 <hv_switch>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d103      	bne.n	800206a <main+0x1da>
				  // Driver flipped off HV switch
				  change_state(LV);
 8002062:	2000      	movs	r0, #0
 8002064:	f7ff fd4a 	bl	8001afc <change_state>
				  break;
 8002068:	e0b9      	b.n	80021de <main+0x34e>
			  }

			  if (drive_switch()) {
 800206a:	f7ff febb 	bl	8001de4 <drive_switch>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	f000 80b0 	beq.w	80021d6 <main+0x346>
				  // Driver flipped on drive switch
				  // Need to press on pedal at the same time to go to drive

//				  if (brake_mashed()) {
					  change_state(DRIVE);
 8002076:	2003      	movs	r0, #3
 8002078:	f7ff fd40 	bl	8001afc <change_state>
//					  // Driver didn't press pedal
//					  report_fault(BRAKE_NOT_PRESSED);
//				  }
			  }

			  break;
 800207c:	e0ab      	b.n	80021d6 <main+0x346>
		  case DRIVE:
			  if (!drive_switch()) {
 800207e:	f7ff feb1 	bl	8001de4 <drive_switch>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d103      	bne.n	8002090 <main+0x200>
				  // Drive switch was flipped off
				  // Revert to HV
				  change_state(HV_ENABLED);
 8002088:	2002      	movs	r0, #2
 800208a:	f7ff fd37 	bl	8001afc <change_state>
				 break;
 800208e:	e0a6      	b.n	80021de <main+0x34e>
			  }

			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules || capacitor_volt < PRECHARGE_THRESHOLD) {
 8002090:	f7ff fe96 	bl	8001dc0 <hv_switch>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	f040 809f 	bne.w	80021da <main+0x34a>
				  // HV switched flipped off, so can't drive
				  // or capacitor dropped below threshold
				  report_fault(HV_DISABLED_WHILE_DRIVING);
 800209c:	2004      	movs	r0, #4
 800209e:	f7ff fd4b 	bl	8001b38 <report_fault>
				  break;
 80020a2:	e09c      	b.n	80021de <main+0x34e>
//				  report_fault(BRAKE_IMPLAUSIBLE);
//			  }

			  break;
		  case FAULT:
			  switch (error) {
 80020a4:	4b5b      	ldr	r3, [pc, #364]	; (8002214 <main+0x384>)
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	3b03      	subs	r3, #3
 80020ac:	2b06      	cmp	r3, #6
 80020ae:	d872      	bhi.n	8002196 <main+0x306>
 80020b0:	a201      	add	r2, pc, #4	; (adr r2, 80020b8 <main+0x228>)
 80020b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b6:	bf00      	nop
 80020b8:	080020d5 	.word	0x080020d5
 80020bc:	08002197 	.word	0x08002197
 80020c0:	080020f7 	.word	0x080020f7
 80020c4:	0800211f 	.word	0x0800211f
 80020c8:	08002185 	.word	0x08002185
 80020cc:	08002197 	.word	0x08002197
 80020d0:	080021b3 	.word	0x080021b3
				  case BRAKE_NOT_PRESSED:
					  if (!hv_switch())
 80020d4:	f7ff fe74 	bl	8001dc0 <hv_switch>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d102      	bne.n	80020e4 <main+0x254>
						  change_state(LV);
 80020de:	2000      	movs	r0, #0
 80020e0:	f7ff fd0c 	bl	8001afc <change_state>

					  if (!drive_switch()) {
 80020e4:	f7ff fe7e 	bl	8001de4 <drive_switch>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d163      	bne.n	80021b6 <main+0x326>
						  // reset drive switch and try again
						  change_state(HV_ENABLED);
 80020ee:	2002      	movs	r0, #2
 80020f0:	f7ff fd04 	bl	8001afc <change_state>
					  }
					  break;
 80020f4:	e05f      	b.n	80021b6 <main+0x326>
				  case SENSOR_DISCREPANCY:
					  // stop power to motors if discrepancy persists for >100ms
					  // see rule T.4.2.5 in FSAE 2022 rulebook
					  if (!drive_switch()) {
 80020f6:	f7ff fe75 	bl	8001de4 <drive_switch>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <main+0x27c>
						  discrepancy_timer_ms = 0;
 8002100:	4b45      	ldr	r3, [pc, #276]	; (8002218 <main+0x388>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
						  change_state(HV_ENABLED);
 8002106:	2002      	movs	r0, #2
 8002108:	f7ff fcf8 	bl	8001afc <change_state>
					  }

					  if (!hv_switch())
 800210c:	f7ff fe58 	bl	8001dc0 <hv_switch>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d151      	bne.n	80021ba <main+0x32a>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 8002116:	2004      	movs	r0, #4
 8002118:	f7ff fd0e 	bl	8001b38 <report_fault>

					  break;
 800211c:	e04d      	b.n	80021ba <main+0x32a>
				  case BRAKE_IMPLAUSIBLE:
					  if (!brake_implausible() && hv_switch() && drive_switch())
 800211e:	f000 fef3 	bl	8002f08 <brake_implausible>
 8002122:	4603      	mov	r3, r0
 8002124:	f083 0301 	eor.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00c      	beq.n	8002148 <main+0x2b8>
 800212e:	f7ff fe47 	bl	8001dc0 <hv_switch>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <main+0x2b8>
 8002138:	f7ff fe54 	bl	8001de4 <drive_switch>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <main+0x2b8>
						  change_state(DRIVE);
 8002142:	2003      	movs	r0, #3
 8002144:	f7ff fcda 	bl	8001afc <change_state>

					  if (!hv_switch() && !drive_switch())
 8002148:	f7ff fe3a 	bl	8001dc0 <hv_switch>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d107      	bne.n	8002162 <main+0x2d2>
 8002152:	f7ff fe47 	bl	8001de4 <drive_switch>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d102      	bne.n	8002162 <main+0x2d2>
						  change_state(LV);
 800215c:	2000      	movs	r0, #0
 800215e:	f7ff fccd 	bl	8001afc <change_state>

					  if (!drive_switch())
 8002162:	f7ff fe3f 	bl	8001de4 <drive_switch>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <main+0x2e2>
						  change_state(HV_ENABLED);
 800216c:	2002      	movs	r0, #2
 800216e:	f7ff fcc5 	bl	8001afc <change_state>

					  if (!hv_switch())
 8002172:	f7ff fe25 	bl	8001dc0 <hv_switch>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d120      	bne.n	80021be <main+0x32e>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 800217c:	2004      	movs	r0, #4
 800217e:	f7ff fcdb 	bl	8001b38 <report_fault>

					  break;
 8002182:	e01c      	b.n	80021be <main+0x32e>
				  case SHUTDOWN_CIRCUIT_OPEN:
					  if (shutdown_closed()) {
 8002184:	f7ff fe40 	bl	8001e08 <shutdown_closed>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d019      	beq.n	80021c2 <main+0x332>
						  change_state(LV);
 800218e:	2000      	movs	r0, #0
 8002190:	f7ff fcb4 	bl	8001afc <change_state>
					  }
					  break;
 8002194:	e015      	b.n	80021c2 <main+0x332>
 //					  if (!HAL_GPIO_ReadPin(BSPD_LATCH) {
 //						  change_state(LV);
 //			  		  }
					  break;
				  default:  //UNCALIBRATED, DRIVE_REQUEST_FROM_LV, CONSERVATIVE_TIMER_MAXED, HV_DISABLED_WHILE_DRIVING, MC FAULT
					  if (!hv_switch() && !drive_switch()) {
 8002196:	f7ff fe13 	bl	8001dc0 <hv_switch>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d112      	bne.n	80021c6 <main+0x336>
 80021a0:	f7ff fe20 	bl	8001de4 <drive_switch>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10d      	bne.n	80021c6 <main+0x336>
						  change_state(LV);
 80021aa:	2000      	movs	r0, #0
 80021ac:	f7ff fca6 	bl	8001afc <change_state>
					  }
					  break;
 80021b0:	e009      	b.n	80021c6 <main+0x336>
					  break;
 80021b2:	bf00      	nop
 80021b4:	e013      	b.n	80021de <main+0x34e>
					  break;
 80021b6:	bf00      	nop
 80021b8:	e011      	b.n	80021de <main+0x34e>
					  break;
 80021ba:	bf00      	nop
 80021bc:	e00f      	b.n	80021de <main+0x34e>
					  break;
 80021be:	bf00      	nop
 80021c0:	e00d      	b.n	80021de <main+0x34e>
					  break;
 80021c2:	bf00      	nop
 80021c4:	e00b      	b.n	80021de <main+0x34e>
					  break;
 80021c6:	bf00      	nop
			  }
			  break;
 80021c8:	e009      	b.n	80021de <main+0x34e>
			  break;
 80021ca:	bf00      	nop
 80021cc:	e6a1      	b.n	8001f12 <main+0x82>
			  break;
 80021ce:	bf00      	nop
 80021d0:	e69f      	b.n	8001f12 <main+0x82>
			  break;
 80021d2:	bf00      	nop
 80021d4:	e69d      	b.n	8001f12 <main+0x82>
			  break;
 80021d6:	bf00      	nop
 80021d8:	e69b      	b.n	8001f12 <main+0x82>
			  break;
 80021da:	bf00      	nop
 80021dc:	e699      	b.n	8001f12 <main+0x82>
  {
 80021de:	e698      	b.n	8001f12 <main+0x82>
 80021e0:	0801dcf4 	.word	0x0801dcf4
 80021e4:	2000259c 	.word	0x2000259c
 80021e8:	200027d4 	.word	0x200027d4
 80021ec:	200027e0 	.word	0x200027e0
 80021f0:	200027ec 	.word	0x200027ec
 80021f4:	0800e860 	.word	0x0800e860
 80021f8:	20002268 	.word	0x20002268
 80021fc:	20002220 	.word	0x20002220
 8002200:	20002370 	.word	0x20002370
 8002204:	200027d0 	.word	0x200027d0
 8002208:	20000112 	.word	0x20000112
 800220c:	2000008d 	.word	0x2000008d
 8002210:	20000000 	.word	0x20000000
 8002214:	20000216 	.word	0x20000216
 8002218:	200027f8 	.word	0x200027f8

0800221c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b094      	sub	sp, #80	; 0x50
 8002220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002222:	f107 0320 	add.w	r3, r7, #32
 8002226:	2230      	movs	r2, #48	; 0x30
 8002228:	2100      	movs	r1, #0
 800222a:	4618      	mov	r0, r3
 800222c:	f00b fd8e 	bl	800dd4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002230:	f107 030c 	add.w	r3, r7, #12
 8002234:	2200      	movs	r2, #0
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	605a      	str	r2, [r3, #4]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	60da      	str	r2, [r3, #12]
 800223e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002240:	4b2a      	ldr	r3, [pc, #168]	; (80022ec <SystemClock_Config+0xd0>)
 8002242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002244:	4a29      	ldr	r2, [pc, #164]	; (80022ec <SystemClock_Config+0xd0>)
 8002246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800224a:	6413      	str	r3, [r2, #64]	; 0x40
 800224c:	4b27      	ldr	r3, [pc, #156]	; (80022ec <SystemClock_Config+0xd0>)
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002254:	60bb      	str	r3, [r7, #8]
 8002256:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002258:	4b25      	ldr	r3, [pc, #148]	; (80022f0 <SystemClock_Config+0xd4>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a24      	ldr	r2, [pc, #144]	; (80022f0 <SystemClock_Config+0xd4>)
 800225e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	4b22      	ldr	r3, [pc, #136]	; (80022f0 <SystemClock_Config+0xd4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002270:	2301      	movs	r3, #1
 8002272:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002278:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800227a:	2302      	movs	r3, #2
 800227c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800227e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002282:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002284:	2308      	movs	r3, #8
 8002286:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002288:	23d8      	movs	r3, #216	; 0xd8
 800228a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800228c:	2302      	movs	r3, #2
 800228e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8002290:	2309      	movs	r3, #9
 8002292:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002294:	f107 0320 	add.w	r3, r7, #32
 8002298:	4618      	mov	r0, r3
 800229a:	f004 fee3 	bl	8007064 <HAL_RCC_OscConfig>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80022a4:	f000 fc7e 	bl	8002ba4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022a8:	f004 fe8c 	bl	8006fc4 <HAL_PWREx_EnableOverDrive>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022b2:	f000 fc77 	bl	8002ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022b6:	230f      	movs	r3, #15
 80022b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ba:	2302      	movs	r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022c2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022cc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80022ce:	f107 030c 	add.w	r3, r7, #12
 80022d2:	2107      	movs	r1, #7
 80022d4:	4618      	mov	r0, r3
 80022d6:	f005 f969 	bl	80075ac <HAL_RCC_ClockConfig>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80022e0:	f000 fc60 	bl	8002ba4 <Error_Handler>
  }
}
 80022e4:	bf00      	nop
 80022e6:	3750      	adds	r7, #80	; 0x50
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	40023800 	.word	0x40023800
 80022f0:	40007000 	.word	0x40007000

080022f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80022fa:	463b      	mov	r3, r7
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
 8002300:	605a      	str	r2, [r3, #4]
 8002302:	609a      	str	r2, [r3, #8]
 8002304:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002308:	4a2d      	ldr	r2, [pc, #180]	; (80023c0 <MX_ADC1_Init+0xcc>)
 800230a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800230c:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <MX_ADC1_Init+0xc8>)
 800230e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002312:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002314:	4b29      	ldr	r3, [pc, #164]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800231a:	4b28      	ldr	r3, [pc, #160]	; (80023bc <MX_ADC1_Init+0xc8>)
 800231c:	2201      	movs	r2, #1
 800231e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002320:	4b26      	ldr	r3, [pc, #152]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002322:	2200      	movs	r2, #0
 8002324:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002326:	4b25      	ldr	r3, [pc, #148]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002328:	2200      	movs	r2, #0
 800232a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800232e:	4b23      	ldr	r3, [pc, #140]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002330:	2200      	movs	r2, #0
 8002332:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002334:	4b21      	ldr	r3, [pc, #132]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002336:	4a23      	ldr	r2, [pc, #140]	; (80023c4 <MX_ADC1_Init+0xd0>)
 8002338:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800233a:	4b20      	ldr	r3, [pc, #128]	; (80023bc <MX_ADC1_Init+0xc8>)
 800233c:	2200      	movs	r2, #0
 800233e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8002340:	4b1e      	ldr	r3, [pc, #120]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002342:	2203      	movs	r2, #3
 8002344:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002346:	4b1d      	ldr	r3, [pc, #116]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800234e:	4b1b      	ldr	r3, [pc, #108]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002350:	2201      	movs	r2, #1
 8002352:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002354:	4819      	ldr	r0, [pc, #100]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002356:	f002 fd4d 	bl	8004df4 <HAL_ADC_Init>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002360:	f000 fc20 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002364:	230a      	movs	r3, #10
 8002366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002368:	2301      	movs	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800236c:	2300      	movs	r3, #0
 800236e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002370:	463b      	mov	r3, r7
 8002372:	4619      	mov	r1, r3
 8002374:	4811      	ldr	r0, [pc, #68]	; (80023bc <MX_ADC1_Init+0xc8>)
 8002376:	f002 fee7 	bl	8005148 <HAL_ADC_ConfigChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002380:	f000 fc10 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002384:	2302      	movs	r3, #2
 8002386:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002388:	463b      	mov	r3, r7
 800238a:	4619      	mov	r1, r3
 800238c:	480b      	ldr	r0, [pc, #44]	; (80023bc <MX_ADC1_Init+0xc8>)
 800238e:	f002 fedb 	bl	8005148 <HAL_ADC_ConfigChannel>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d001      	beq.n	800239c <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8002398:	f000 fc04 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800239c:	2303      	movs	r3, #3
 800239e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80023a0:	463b      	mov	r3, r7
 80023a2:	4619      	mov	r1, r3
 80023a4:	4805      	ldr	r0, [pc, #20]	; (80023bc <MX_ADC1_Init+0xc8>)
 80023a6:	f002 fecf 	bl	8005148 <HAL_ADC_ConfigChannel>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_ADC1_Init+0xc0>
  {
    Error_Handler();
 80023b0:	f000 fbf8 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//
  /* USER CODE END ADC1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	3710      	adds	r7, #16
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20002220 	.word	0x20002220
 80023c0:	40012000 	.word	0x40012000
 80023c4:	0f000001 	.word	0x0f000001

080023c8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80023ce:	463b      	mov	r3, r7
 80023d0:	2200      	movs	r2, #0
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	605a      	str	r2, [r3, #4]
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80023da:	4b27      	ldr	r3, [pc, #156]	; (8002478 <MX_ADC3_Init+0xb0>)
 80023dc:	4a27      	ldr	r2, [pc, #156]	; (800247c <MX_ADC3_Init+0xb4>)
 80023de:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80023e0:	4b25      	ldr	r3, [pc, #148]	; (8002478 <MX_ADC3_Init+0xb0>)
 80023e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023e6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80023e8:	4b23      	ldr	r3, [pc, #140]	; (8002478 <MX_ADC3_Init+0xb0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80023ee:	4b22      	ldr	r3, [pc, #136]	; (8002478 <MX_ADC3_Init+0xb0>)
 80023f0:	2201      	movs	r2, #1
 80023f2:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <MX_ADC3_Init+0xb0>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80023fa:	4b1f      	ldr	r3, [pc, #124]	; (8002478 <MX_ADC3_Init+0xb0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002402:	4b1d      	ldr	r3, [pc, #116]	; (8002478 <MX_ADC3_Init+0xb0>)
 8002404:	2200      	movs	r2, #0
 8002406:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002408:	4b1b      	ldr	r3, [pc, #108]	; (8002478 <MX_ADC3_Init+0xb0>)
 800240a:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <MX_ADC3_Init+0xb8>)
 800240c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800240e:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <MX_ADC3_Init+0xb0>)
 8002410:	2200      	movs	r2, #0
 8002412:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 8002414:	4b18      	ldr	r3, [pc, #96]	; (8002478 <MX_ADC3_Init+0xb0>)
 8002416:	2202      	movs	r2, #2
 8002418:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800241a:	4b17      	ldr	r3, [pc, #92]	; (8002478 <MX_ADC3_Init+0xb0>)
 800241c:	2200      	movs	r2, #0
 800241e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <MX_ADC3_Init+0xb0>)
 8002424:	2201      	movs	r2, #1
 8002426:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002428:	4813      	ldr	r0, [pc, #76]	; (8002478 <MX_ADC3_Init+0xb0>)
 800242a:	f002 fce3 	bl	8004df4 <HAL_ADC_Init>
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8002434:	f000 fbb6 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8002438:	2308      	movs	r3, #8
 800243a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800243c:	2301      	movs	r3, #1
 800243e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002444:	463b      	mov	r3, r7
 8002446:	4619      	mov	r1, r3
 8002448:	480b      	ldr	r0, [pc, #44]	; (8002478 <MX_ADC3_Init+0xb0>)
 800244a:	f002 fe7d 	bl	8005148 <HAL_ADC_ConfigChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8002454:	f000 fba6 	bl	8002ba4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002458:	2302      	movs	r3, #2
 800245a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800245c:	463b      	mov	r3, r7
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	; (8002478 <MX_ADC3_Init+0xb0>)
 8002462:	f002 fe71 	bl	8005148 <HAL_ADC_ConfigChannel>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <MX_ADC3_Init+0xa8>
  {
    Error_Handler();
 800246c:	f000 fb9a 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	20002268 	.word	0x20002268
 800247c:	40012200 	.word	0x40012200
 8002480:	0f000001 	.word	0x0f000001

08002484 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <MX_CAN1_Init+0xc8>)
 800248c:	4a30      	ldr	r2, [pc, #192]	; (8002550 <MX_CAN1_Init+0xcc>)
 800248e:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8002490:	4b2e      	ldr	r3, [pc, #184]	; (800254c <MX_CAN1_Init+0xc8>)
 8002492:	2212      	movs	r2, #18
 8002494:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002496:	4b2d      	ldr	r3, [pc, #180]	; (800254c <MX_CAN1_Init+0xc8>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800249c:	4b2b      	ldr	r3, [pc, #172]	; (800254c <MX_CAN1_Init+0xc8>)
 800249e:	2200      	movs	r2, #0
 80024a0:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80024a2:	4b2a      	ldr	r3, [pc, #168]	; (800254c <MX_CAN1_Init+0xc8>)
 80024a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024a8:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 80024aa:	4b28      	ldr	r3, [pc, #160]	; (800254c <MX_CAN1_Init+0xc8>)
 80024ac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80024b0:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80024b2:	4b26      	ldr	r3, [pc, #152]	; (800254c <MX_CAN1_Init+0xc8>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80024b8:	4b24      	ldr	r3, [pc, #144]	; (800254c <MX_CAN1_Init+0xc8>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80024be:	4b23      	ldr	r3, [pc, #140]	; (800254c <MX_CAN1_Init+0xc8>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <MX_CAN1_Init+0xc8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <MX_CAN1_Init+0xc8>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80024d0:	4b1e      	ldr	r3, [pc, #120]	; (800254c <MX_CAN1_Init+0xc8>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80024d6:	481d      	ldr	r0, [pc, #116]	; (800254c <MX_CAN1_Init+0xc8>)
 80024d8:	f003 f886 	bl	80055e8 <HAL_CAN_Init>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80024e2:	f000 fb5f 	bl	8002ba4 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /*##-2- Configure the CAN Filter ###########################################*/
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 80024e6:	2301      	movs	r3, #1
 80024e8:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 80024ea:	2312      	movs	r3, #18
 80024ec:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0;
 80024f2:	2300      	movs	r3, #0
 80024f4:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0;
 80024f6:	2300      	movs	r3, #0
 80024f8:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002502:	2300      	movs	r3, #0
 8002504:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002506:	2301      	movs	r3, #1
 8002508:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800250a:	2314      	movs	r3, #20
 800250c:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 800250e:	463b      	mov	r3, r7
 8002510:	4619      	mov	r1, r3
 8002512:	480e      	ldr	r0, [pc, #56]	; (800254c <MX_CAN1_Init+0xc8>)
 8002514:	f003 f964 	bl	80057e0 <HAL_CAN_ConfigFilter>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d001      	beq.n	8002522 <MX_CAN1_Init+0x9e>
  	{
  	  /* Filter configuration Error */
  	  Error_Handler();
 800251e:	f000 fb41 	bl	8002ba4 <Error_Handler>
  	}

  	/*##-3- Start the CAN peripheral ###########################################*/
  	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 8002522:	480a      	ldr	r0, [pc, #40]	; (800254c <MX_CAN1_Init+0xc8>)
 8002524:	f003 fa3c 	bl	80059a0 <HAL_CAN_Start>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d001      	beq.n	8002532 <MX_CAN1_Init+0xae>
  	{
  	  /* Start Error */
  	  Error_Handler();
 800252e:	f000 fb39 	bl	8002ba4 <Error_Handler>
  	}

  	/*##-4- Activate CAN RX notification #######################################*/
  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 8002532:	2102      	movs	r1, #2
 8002534:	4805      	ldr	r0, [pc, #20]	; (800254c <MX_CAN1_Init+0xc8>)
 8002536:	f003 fc59 	bl	8005dec <HAL_CAN_ActivateNotification>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d001      	beq.n	8002544 <MX_CAN1_Init+0xc0>
  	{
  	  /* Notification Error */
  	  Error_Handler();
 8002540:	f000 fb30 	bl	8002ba4 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 8002544:	bf00      	nop
 8002546:	3728      	adds	r7, #40	; 0x28
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20002370 	.word	0x20002370
 8002550:	40006400 	.word	0x40006400

08002554 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002558:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_CAN2_Init+0x64>)
 800255a:	4a18      	ldr	r2, [pc, #96]	; (80025bc <MX_CAN2_Init+0x68>)
 800255c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 800255e:	4b16      	ldr	r3, [pc, #88]	; (80025b8 <MX_CAN2_Init+0x64>)
 8002560:	2212      	movs	r2, #18
 8002562:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8002564:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_CAN2_Init+0x64>)
 8002566:	2200      	movs	r2, #0
 8002568:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800256a:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <MX_CAN2_Init+0x64>)
 800256c:	2200      	movs	r2, #0
 800256e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_CAN2_Init+0x64>)
 8002572:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002576:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_CAN2_Init+0x64>)
 800257a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800257e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002580:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <MX_CAN2_Init+0x64>)
 8002582:	2200      	movs	r2, #0
 8002584:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <MX_CAN2_Init+0x64>)
 8002588:	2200      	movs	r2, #0
 800258a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <MX_CAN2_Init+0x64>)
 800258e:	2200      	movs	r2, #0
 8002590:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002592:	4b09      	ldr	r3, [pc, #36]	; (80025b8 <MX_CAN2_Init+0x64>)
 8002594:	2200      	movs	r2, #0
 8002596:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8002598:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <MX_CAN2_Init+0x64>)
 800259a:	2200      	movs	r2, #0
 800259c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <MX_CAN2_Init+0x64>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80025a4:	4804      	ldr	r0, [pc, #16]	; (80025b8 <MX_CAN2_Init+0x64>)
 80025a6:	f003 f81f 	bl	80055e8 <HAL_CAN_Init>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d001      	beq.n	80025b4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80025b0:	f000 faf8 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80025b4:	bf00      	nop
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20002398 	.word	0x20002398
 80025bc:	40006800 	.word	0x40006800

080025c0 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80025c4:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <MX_SDMMC1_SD_Init+0x3c>)
 80025c8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80025ca:	4b0b      	ldr	r3, [pc, #44]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80025d0:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80025d6:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025d8:	2200      	movs	r2, #0
 80025da:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025de:	2200      	movs	r2, #0
 80025e0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025e4:	2200      	movs	r2, #0
 80025e6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <MX_SDMMC1_SD_Init+0x38>)
 80025ea:	2200      	movs	r2, #0
 80025ec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80025ee:	bf00      	nop
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr
 80025f8:	200023c0 	.word	0x200023c0
 80025fc:	40012c00 	.word	0x40012c00

08002600 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b088      	sub	sp, #32
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
 8002610:	609a      	str	r2, [r3, #8]
 8002612:	60da      	str	r2, [r3, #12]
 8002614:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002616:	463b      	mov	r3, r7
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	605a      	str	r2, [r3, #4]
 800261e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002620:	4b21      	ldr	r3, [pc, #132]	; (80026a8 <MX_TIM2_Init+0xa8>)
 8002622:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002626:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002628:	4b1f      	ldr	r3, [pc, #124]	; (80026a8 <MX_TIM2_Init+0xa8>)
 800262a:	2200      	movs	r2, #0
 800262c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <MX_TIM2_Init+0xa8>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002634:	4b1c      	ldr	r3, [pc, #112]	; (80026a8 <MX_TIM2_Init+0xa8>)
 8002636:	f04f 32ff 	mov.w	r2, #4294967295
 800263a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263c:	4b1a      	ldr	r3, [pc, #104]	; (80026a8 <MX_TIM2_Init+0xa8>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b19      	ldr	r3, [pc, #100]	; (80026a8 <MX_TIM2_Init+0xa8>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002648:	4817      	ldr	r0, [pc, #92]	; (80026a8 <MX_TIM2_Init+0xa8>)
 800264a:	f006 ff33 	bl	80094b4 <HAL_TIM_Base_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8002654:	f000 faa6 	bl	8002ba4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002658:	2307      	movs	r3, #7
 800265a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800265c:	2370      	movs	r3, #112	; 0x70
 800265e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800266c:	f107 030c 	add.w	r3, r7, #12
 8002670:	4619      	mov	r1, r3
 8002672:	480d      	ldr	r0, [pc, #52]	; (80026a8 <MX_TIM2_Init+0xa8>)
 8002674:	f007 f90d 	bl	8009892 <HAL_TIM_SlaveConfigSynchro>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800267e:	f000 fa91 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002682:	2300      	movs	r3, #0
 8002684:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002686:	2300      	movs	r3, #0
 8002688:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800268a:	463b      	mov	r3, r7
 800268c:	4619      	mov	r1, r3
 800268e:	4806      	ldr	r0, [pc, #24]	; (80026a8 <MX_TIM2_Init+0xa8>)
 8002690:	f007 fb1e 	bl	8009cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800269a:	f000 fa83 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800269e:	bf00      	nop
 80026a0:	3720      	adds	r7, #32
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	20002504 	.word	0x20002504

080026ac <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b088      	sub	sp, #32
 80026b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	2200      	movs	r2, #0
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	605a      	str	r2, [r3, #4]
 80026bc:	609a      	str	r2, [r3, #8]
 80026be:	60da      	str	r2, [r3, #12]
 80026c0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026c2:	463b      	mov	r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80026cc:	4b21      	ldr	r3, [pc, #132]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026ce:	4a22      	ldr	r2, [pc, #136]	; (8002758 <MX_TIM4_Init+0xac>)
 80026d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 80026d2:	4b20      	ldr	r3, [pc, #128]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026d4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80026d8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026da:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026e6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026e8:	4b1a      	ldr	r3, [pc, #104]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80026f4:	4817      	ldr	r0, [pc, #92]	; (8002754 <MX_TIM4_Init+0xa8>)
 80026f6:	f006 fedd 	bl	80094b4 <HAL_TIM_Base_Init>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002700:	f000 fa50 	bl	8002ba4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002704:	2307      	movs	r3, #7
 8002706:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8002708:	2370      	movs	r3, #112	; 0x70
 800270a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8002710:	2300      	movs	r3, #0
 8002712:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8002718:	f107 030c 	add.w	r3, r7, #12
 800271c:	4619      	mov	r1, r3
 800271e:	480d      	ldr	r0, [pc, #52]	; (8002754 <MX_TIM4_Init+0xa8>)
 8002720:	f007 f8b7 	bl	8009892 <HAL_TIM_SlaveConfigSynchro>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800272a:	f000 fa3b 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272e:	2300      	movs	r3, #0
 8002730:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002736:	463b      	mov	r3, r7
 8002738:	4619      	mov	r1, r3
 800273a:	4806      	ldr	r0, [pc, #24]	; (8002754 <MX_TIM4_Init+0xa8>)
 800273c:	f007 fac8 	bl	8009cd0 <HAL_TIMEx_MasterConfigSynchronization>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d001      	beq.n	800274a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8002746:	f000 fa2d 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800274a:	bf00      	nop
 800274c:	3720      	adds	r7, #32
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20002550 	.word	0x20002550
 8002758:	40000800 	.word	0x40000800

0800275c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b084      	sub	sp, #16
 8002760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002762:	1d3b      	adds	r3, r7, #4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800276c:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <MX_TIM7_Init+0x6c>)
 800276e:	4a17      	ldr	r2, [pc, #92]	; (80027cc <MX_TIM7_Init+0x70>)
 8002770:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000;
 8002772:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <MX_TIM7_Init+0x6c>)
 8002774:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002778:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277a:	4b13      	ldr	r3, [pc, #76]	; (80027c8 <MX_TIM7_Init+0x6c>)
 800277c:	2200      	movs	r2, #0
 800277e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8002780:	4b11      	ldr	r3, [pc, #68]	; (80027c8 <MX_TIM7_Init+0x6c>)
 8002782:	f241 3288 	movw	r2, #5000	; 0x1388
 8002786:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002788:	4b0f      	ldr	r3, [pc, #60]	; (80027c8 <MX_TIM7_Init+0x6c>)
 800278a:	2200      	movs	r2, #0
 800278c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800278e:	480e      	ldr	r0, [pc, #56]	; (80027c8 <MX_TIM7_Init+0x6c>)
 8002790:	f006 fe90 	bl	80094b4 <HAL_TIM_Base_Init>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800279a:	f000 fa03 	bl	8002ba4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800279e:	2300      	movs	r3, #0
 80027a0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027a2:	2300      	movs	r3, #0
 80027a4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4619      	mov	r1, r3
 80027aa:	4807      	ldr	r0, [pc, #28]	; (80027c8 <MX_TIM7_Init+0x6c>)
 80027ac:	f007 fa90 	bl	8009cd0 <HAL_TIMEx_MasterConfigSynchronization>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80027b6:	f000 f9f5 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  NVIC_EnableIRQ(TIM7_IRQn);
 80027ba:	2037      	movs	r0, #55	; 0x37
 80027bc:	f7ff fa18 	bl	8001bf0 <__NVIC_EnableIRQ>

  /* USER CODE END TIM7_Init 2 */

}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000259c 	.word	0x2000259c
 80027cc:	40001400 	.word	0x40001400

080027d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <MX_UART4_Init+0x58>)
 80027d6:	4a15      	ldr	r2, [pc, #84]	; (800282c <MX_UART4_Init+0x5c>)
 80027d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80027da:	4b13      	ldr	r3, [pc, #76]	; (8002828 <MX_UART4_Init+0x58>)
 80027dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80027e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80027e2:	4b11      	ldr	r3, [pc, #68]	; (8002828 <MX_UART4_Init+0x58>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80027e8:	4b0f      	ldr	r3, [pc, #60]	; (8002828 <MX_UART4_Init+0x58>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80027ee:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <MX_UART4_Init+0x58>)
 80027f0:	2200      	movs	r2, #0
 80027f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80027f4:	4b0c      	ldr	r3, [pc, #48]	; (8002828 <MX_UART4_Init+0x58>)
 80027f6:	220c      	movs	r2, #12
 80027f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027fa:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <MX_UART4_Init+0x58>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <MX_UART4_Init+0x58>)
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002806:	4b08      	ldr	r3, [pc, #32]	; (8002828 <MX_UART4_Init+0x58>)
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800280c:	4b06      	ldr	r3, [pc, #24]	; (8002828 <MX_UART4_Init+0x58>)
 800280e:	2200      	movs	r2, #0
 8002810:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002812:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_UART4_Init+0x58>)
 8002814:	f007 fb08 	bl	8009e28 <HAL_UART_Init>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 800281e:	f000 f9c1 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	200025e8 	.word	0x200025e8
 800282c:	40004c00 	.word	0x40004c00

08002830 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <MX_UART7_Init+0x58>)
 8002836:	4a15      	ldr	r2, [pc, #84]	; (800288c <MX_UART7_Init+0x5c>)
 8002838:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <MX_UART7_Init+0x58>)
 800283c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002840:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002842:	4b11      	ldr	r3, [pc, #68]	; (8002888 <MX_UART7_Init+0x58>)
 8002844:	2200      	movs	r2, #0
 8002846:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002848:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <MX_UART7_Init+0x58>)
 800284a:	2200      	movs	r2, #0
 800284c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800284e:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <MX_UART7_Init+0x58>)
 8002850:	2200      	movs	r2, #0
 8002852:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <MX_UART7_Init+0x58>)
 8002856:	220c      	movs	r2, #12
 8002858:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800285a:	4b0b      	ldr	r3, [pc, #44]	; (8002888 <MX_UART7_Init+0x58>)
 800285c:	2200      	movs	r2, #0
 800285e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002860:	4b09      	ldr	r3, [pc, #36]	; (8002888 <MX_UART7_Init+0x58>)
 8002862:	2200      	movs	r2, #0
 8002864:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002866:	4b08      	ldr	r3, [pc, #32]	; (8002888 <MX_UART7_Init+0x58>)
 8002868:	2200      	movs	r2, #0
 800286a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <MX_UART7_Init+0x58>)
 800286e:	2200      	movs	r2, #0
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002872:	4805      	ldr	r0, [pc, #20]	; (8002888 <MX_UART7_Init+0x58>)
 8002874:	f007 fad8 	bl	8009e28 <HAL_UART_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800287e:	f000 f991 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	20002670 	.word	0x20002670
 800288c:	40007800 	.word	0x40007800

08002890 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002894:	4b14      	ldr	r3, [pc, #80]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 8002896:	4a15      	ldr	r2, [pc, #84]	; (80028ec <MX_USART3_UART_Init+0x5c>)
 8002898:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800289a:	4b13      	ldr	r3, [pc, #76]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 800289c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028a0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028a2:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80028ae:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028b6:	220c      	movs	r2, #12
 80028b8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ba:	4b0b      	ldr	r3, [pc, #44]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028bc:	2200      	movs	r2, #0
 80028be:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80028c0:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028c2:	2200      	movs	r2, #0
 80028c4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80028c6:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80028cc:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80028d2:	4805      	ldr	r0, [pc, #20]	; (80028e8 <MX_USART3_UART_Init+0x58>)
 80028d4:	f007 faa8 	bl	8009e28 <HAL_UART_Init>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80028de:	f000 f961 	bl	8002ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200026f8 	.word	0x200026f8
 80028ec:	40004800 	.word	0x40004800

080028f0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <MX_DMA_Init+0x68>)
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <MX_DMA_Init+0x68>)
 80028fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002900:	6313      	str	r3, [r2, #48]	; 0x30
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <MX_DMA_Init+0x68>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800290e:	2200      	movs	r2, #0
 8002910:	2100      	movs	r1, #0
 8002912:	2038      	movs	r0, #56	; 0x38
 8002914:	f003 fd9b 	bl	800644e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002918:	2038      	movs	r0, #56	; 0x38
 800291a:	f003 fdb4 	bl	8006486 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800291e:	2200      	movs	r2, #0
 8002920:	2100      	movs	r1, #0
 8002922:	2039      	movs	r0, #57	; 0x39
 8002924:	f003 fd93 	bl	800644e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002928:	2039      	movs	r0, #57	; 0x39
 800292a:	f003 fdac 	bl	8006486 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800292e:	2200      	movs	r2, #0
 8002930:	2100      	movs	r1, #0
 8002932:	203b      	movs	r0, #59	; 0x3b
 8002934:	f003 fd8b 	bl	800644e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002938:	203b      	movs	r0, #59	; 0x3b
 800293a:	f003 fda4 	bl	8006486 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	2045      	movs	r0, #69	; 0x45
 8002944:	f003 fd83 	bl	800644e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002948:	2045      	movs	r0, #69	; 0x45
 800294a:	f003 fd9c 	bl	8006486 <HAL_NVIC_EnableIRQ>

}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40023800 	.word	0x40023800

0800295c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002962:	1d3b      	adds	r3, r7, #4
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	615a      	str	r2, [r3, #20]
 8002972:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <MX_FMC_Init+0xbc>)
 8002976:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800297a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 800297c:	4b26      	ldr	r3, [pc, #152]	; (8002a18 <MX_FMC_Init+0xbc>)
 800297e:	4a27      	ldr	r2, [pc, #156]	; (8002a1c <MX_FMC_Init+0xc0>)
 8002980:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002982:	4b25      	ldr	r3, [pc, #148]	; (8002a18 <MX_FMC_Init+0xbc>)
 8002984:	2200      	movs	r2, #0
 8002986:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002988:	4b23      	ldr	r3, [pc, #140]	; (8002a18 <MX_FMC_Init+0xbc>)
 800298a:	2200      	movs	r2, #0
 800298c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800298e:	4b22      	ldr	r3, [pc, #136]	; (8002a18 <MX_FMC_Init+0xbc>)
 8002990:	2200      	movs	r2, #0
 8002992:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002994:	4b20      	ldr	r3, [pc, #128]	; (8002a18 <MX_FMC_Init+0xbc>)
 8002996:	2210      	movs	r2, #16
 8002998:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800299a:	4b1f      	ldr	r3, [pc, #124]	; (8002a18 <MX_FMC_Init+0xbc>)
 800299c:	2200      	movs	r2, #0
 800299e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80029a0:	4b1d      	ldr	r3, [pc, #116]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80029a6:	4b1c      	ldr	r3, [pc, #112]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80029ac:	4b1a      	ldr	r3, [pc, #104]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80029b4:	4b18      	ldr	r3, [pc, #96]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80029ba:	4b17      	ldr	r3, [pc, #92]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029bc:	2200      	movs	r2, #0
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80029c0:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80029c6:	4b14      	ldr	r3, [pc, #80]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80029d2:	4b11      	ldr	r3, [pc, #68]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80029d8:	4b0f      	ldr	r3, [pc, #60]	; (8002a18 <MX_FMC_Init+0xbc>)
 80029da:	2200      	movs	r2, #0
 80029dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 80029de:	230f      	movs	r3, #15
 80029e0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80029e2:	230f      	movs	r3, #15
 80029e4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80029e6:	23ff      	movs	r3, #255	; 0xff
 80029e8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80029ea:	230f      	movs	r3, #15
 80029ec:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80029ee:	2310      	movs	r3, #16
 80029f0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80029f2:	2311      	movs	r3, #17
 80029f4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80029fa:	1d3b      	adds	r3, r7, #4
 80029fc:	2200      	movs	r2, #0
 80029fe:	4619      	mov	r1, r3
 8002a00:	4805      	ldr	r0, [pc, #20]	; (8002a18 <MX_FMC_Init+0xbc>)
 8002a02:	f006 fd0f 	bl	8009424 <HAL_SRAM_Init>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d001      	beq.n	8002a10 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8002a0c:	f000 f8ca 	bl	8002ba4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002a10:	bf00      	nop
 8002a12:	3720      	adds	r7, #32
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20002780 	.word	0x20002780
 8002a1c:	a0000104 	.word	0xa0000104

08002a20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b08e      	sub	sp, #56	; 0x38
 8002a24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	605a      	str	r2, [r3, #4]
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	60da      	str	r2, [r3, #12]
 8002a34:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002a36:	4b55      	ldr	r3, [pc, #340]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3a:	4a54      	ldr	r2, [pc, #336]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a3c:	f043 0320 	orr.w	r3, r3, #32
 8002a40:	6313      	str	r3, [r2, #48]	; 0x30
 8002a42:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a46:	f003 0320 	and.w	r3, r3, #32
 8002a4a:	623b      	str	r3, [r7, #32]
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002a4e:	4b4f      	ldr	r3, [pc, #316]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a52:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a58:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5a:	4b4c      	ldr	r3, [pc, #304]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a62:	61fb      	str	r3, [r7, #28]
 8002a64:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a66:	4b49      	ldr	r3, [pc, #292]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a6a:	4a48      	ldr	r2, [pc, #288]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a6c:	f043 0304 	orr.w	r3, r3, #4
 8002a70:	6313      	str	r3, [r2, #48]	; 0x30
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	61bb      	str	r3, [r7, #24]
 8002a7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a7e:	4b43      	ldr	r3, [pc, #268]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a82:	4a42      	ldr	r2, [pc, #264]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a84:	f043 0301 	orr.w	r3, r3, #1
 8002a88:	6313      	str	r3, [r2, #48]	; 0x30
 8002a8a:	4b40      	ldr	r3, [pc, #256]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a96:	4b3d      	ldr	r3, [pc, #244]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9a:	4a3c      	ldr	r2, [pc, #240]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002a9c:	f043 0310 	orr.w	r3, r3, #16
 8002aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aa6:	f003 0310 	and.w	r3, r3, #16
 8002aaa:	613b      	str	r3, [r7, #16]
 8002aac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aae:	4b37      	ldr	r3, [pc, #220]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a36      	ldr	r2, [pc, #216]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002ab4:	f043 0302 	orr.w	r3, r3, #2
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b34      	ldr	r3, [pc, #208]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	60fb      	str	r3, [r7, #12]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ac6:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a30      	ldr	r2, [pc, #192]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002acc:	f043 0308 	orr.w	r3, r3, #8
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0308 	and.w	r3, r3, #8
 8002ada:	60bb      	str	r3, [r7, #8]
 8002adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ade:	4b2b      	ldr	r3, [pc, #172]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a2a      	ldr	r2, [pc, #168]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002ae4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b28      	ldr	r3, [pc, #160]	; (8002b8c <MX_GPIO_Init+0x16c>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002af2:	607b      	str	r3, [r7, #4]
 8002af4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2108      	movs	r1, #8
 8002afa:	4825      	ldr	r0, [pc, #148]	; (8002b90 <MX_GPIO_Init+0x170>)
 8002afc:	f004 fa48 	bl	8006f90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF2 EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|EXTRA_SENS2_Pin;
 8002b00:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b06:	2300      	movs	r3, #0
 8002b08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b12:	4619      	mov	r1, r3
 8002b14:	481f      	ldr	r0, [pc, #124]	; (8002b94 <MX_GPIO_Init+0x174>)
 8002b16:	f004 f877 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b22:	2300      	movs	r3, #0
 8002b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 8002b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	481a      	ldr	r0, [pc, #104]	; (8002b98 <MX_GPIO_Init+0x178>)
 8002b2e:	f004 f86b 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8002b32:	2308      	movs	r3, #8
 8002b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b36:	2301      	movs	r3, #1
 8002b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8002b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b46:	4619      	mov	r1, r3
 8002b48:	4811      	ldr	r0, [pc, #68]	; (8002b90 <MX_GPIO_Init+0x170>)
 8002b4a:	f004 f85d 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHORTED_TO_PB11_Pin SHORTED_TO_PB10_Pin BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = SHORTED_TO_PB11_Pin|SHORTED_TO_PB10_Pin|BAT_12V_MEASURE_Pin;
 8002b4e:	f24c 0308 	movw	r3, #49160	; 0xc008
 8002b52:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b60:	4619      	mov	r1, r3
 8002b62:	480e      	ldr	r0, [pc, #56]	; (8002b9c <MX_GPIO_Init+0x17c>)
 8002b64:	f004 f850 	bl	8006c08 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin BUTTON_2_Pin BUTTON_1_Pin
                           HV_REQUEST_Pin DRIVE_REQUEST_Pin GASP_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_1_Pin
 8002b68:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8002b6c:	627b      	str	r3, [r7, #36]	; 0x24
                          |HV_REQUEST_Pin|DRIVE_REQUEST_Pin|GASP_INTERRUPT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4808      	ldr	r0, [pc, #32]	; (8002ba0 <MX_GPIO_Init+0x180>)
 8002b7e:	f004 f843 	bl	8006c08 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002b82:	bf00      	nop
 8002b84:	3738      	adds	r7, #56	; 0x38
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40020000 	.word	0x40020000
 8002b94:	40021400 	.word	0x40021400
 8002b98:	40020800 	.word	0x40020800
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40021800 	.word	0x40021800

08002ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ba8:	b672      	cpsid	i
}
 8002baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  UG_PutString(5, 250, "HAL ERROR");
 8002bac:	4a02      	ldr	r2, [pc, #8]	; (8002bb8 <Error_Handler+0x14>)
 8002bae:	21fa      	movs	r1, #250	; 0xfa
 8002bb0:	2005      	movs	r0, #5
 8002bb2:	f001 f99b 	bl	8003eec <UG_PutString>
 8002bb6:	e7f9      	b.n	8002bac <Error_Handler+0x8>
 8002bb8:	0800e884 	.word	0x0800e884

08002bbc <init_sensors>:

/************ Timer ************/
unsigned int discrepancy_timer_ms = 0;


void init_sensors(){
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 8002bc0:	4b11      	ldr	r3, [pc, #68]	; (8002c08 <init_sensors+0x4c>)
 8002bc2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002bc6:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <init_sensors+0x4c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 8002bce:	4b0e      	ldr	r3, [pc, #56]	; (8002c08 <init_sensors+0x4c>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 8002bd4:	4b0d      	ldr	r3, [pc, #52]	; (8002c0c <init_sensors+0x50>)
 8002bd6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002bda:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	; (8002c0c <init_sensors+0x50>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 8002be2:	4b0a      	ldr	r3, [pc, #40]	; (8002c0c <init_sensors+0x50>)
 8002be4:	2201      	movs	r2, #1
 8002be6:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <init_sensors+0x54>)
 8002bea:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002bee:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 8002bf0:	4b07      	ldr	r3, [pc, #28]	; (8002c10 <init_sensors+0x54>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <init_sensors+0x54>)
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	80da      	strh	r2, [r3, #6]
}
 8002bfc:	bf00      	nop
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	200027d4 	.word	0x200027d4
 8002c0c:	200027e0 	.word	0x200027e0
 8002c10:	200027ec 	.word	0x200027ec

08002c14 <select_adc_channel>:
// APPS
uint8_t THROTTLE_MULTIPLIER = 100;
const uint8_t THROTTLE_MAP[8] = { 95, 71, 59, 47, 35, 23, 11, 5 };

void select_adc_channel(ADC_HandleTypeDef *hadc, ADC_CHAN channel)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 8002c20:	f107 0308 	add.w	r3, r7, #8
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
    switch (channel)
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	2b04      	cmp	r3, #4
 8002c36:	d844      	bhi.n	8002cc2 <select_adc_channel+0xae>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <select_adc_channel+0x2c>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c55 	.word	0x08002c55
 8002c44:	08002c6b 	.word	0x08002c6b
 8002c48:	08002c81 	.word	0x08002c81
 8002c4c:	08002c97 	.word	0x08002c97
 8002c50:	08002cad 	.word	0x08002cad
    {
        case APPS1:
            sConfig.Channel = ADC_CHANNEL_10;
 8002c54:	230a      	movs	r3, #10
 8002c56:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	60fb      	str	r3, [r7, #12]

			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002c5c:	f107 0308 	add.w	r3, r7, #8
 8002c60:	4619      	mov	r1, r3
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f002 fa70 	bl	8005148 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002c68:	e02c      	b.n	8002cc4 <select_adc_channel+0xb0>

        case APPS2:
			sConfig.Channel = ADC_CHANNEL_8;
 8002c6a:	2308      	movs	r3, #8
 8002c6c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002c72:	f107 0308 	add.w	r3, r7, #8
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f002 fa65 	bl	8005148 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002c7e:	e021      	b.n	8002cc4 <select_adc_channel+0xb0>
        case BSE:
			sConfig.Channel = ADC_CHANNEL_15;
 8002c80:	230f      	movs	r3, #15
 8002c82:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002c88:	f107 0308 	add.w	r3, r7, #8
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f002 fa5a 	bl	8005148 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002c94:	e016      	b.n	8002cc4 <select_adc_channel+0xb0>
        case KNOB1:
			sConfig.Channel = ADC_CHANNEL_13;
 8002c96:	230d      	movs	r3, #13
 8002c98:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002c9e:	f107 0308 	add.w	r3, r7, #8
 8002ca2:	4619      	mov	r1, r3
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f002 fa4f 	bl	8005148 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002caa:	e00b      	b.n	8002cc4 <select_adc_channel+0xb0>
        case KNOB2:
			sConfig.Channel = ADC_CHANNEL_12;
 8002cac:	230c      	movs	r3, #12
 8002cae:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002cb4:	f107 0308 	add.w	r3, r7, #8
 8002cb8:	4619      	mov	r1, r3
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f002 fa44 	bl	8005148 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002cc0:	e000      	b.n	8002cc4 <select_adc_channel+0xb0>
        default:
            break;
 8002cc2:	bf00      	nop
    }
}
 8002cc4:	bf00      	nop
 8002cc6:	3718      	adds	r7, #24
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <get_adc_conversion>:

uint32_t get_adc_conversion(ADC_HandleTypeDef *hadc, ADC_CHAN channel) {
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]

	select_adc_channel(hadc, channel);
 8002cd8:	78fb      	ldrb	r3, [r7, #3]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff ff99 	bl	8002c14 <select_adc_channel>

	uint32_t conversion;

	HAL_ADC_Start(hadc);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f002 f8ca 	bl	8004e7c <HAL_ADC_Start>

	// Wait for the conversion to complete
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f002 f993 	bl	8005018 <HAL_ADC_PollForConversion>

	// Get the ADC value
	conversion = HAL_ADC_GetValue(hadc);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f002 fa1b 	bl	800512e <HAL_ADC_GetValue>
 8002cf8:	60f8      	str	r0, [r7, #12]

	return conversion;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <run_calibration>:


// Update sensors

void run_calibration() {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
    update_minmax(&throttle1);
 8002d08:	4805      	ldr	r0, [pc, #20]	; (8002d20 <run_calibration+0x1c>)
 8002d0a:	f000 f949 	bl	8002fa0 <update_minmax>
    update_minmax(&throttle2);
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <run_calibration+0x20>)
 8002d10:	f000 f946 	bl	8002fa0 <update_minmax>
    update_minmax(&brake);
 8002d14:	4804      	ldr	r0, [pc, #16]	; (8002d28 <run_calibration+0x24>)
 8002d16:	f000 f943 	bl	8002fa0 <update_minmax>
}
 8002d1a:	bf00      	nop
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	200027d4 	.word	0x200027d4
 8002d24:	200027e0 	.word	0x200027e0
 8002d28:	200027ec 	.word	0x200027ec

08002d2c <update_sensor_vals>:

void update_sensor_vals(ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc3) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
 8002d34:	6039      	str	r1, [r7, #0]
    throttle1.raw = get_adc_conversion(hadc1, APPS1);
 8002d36:	2100      	movs	r1, #0
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ffc7 	bl	8002ccc <get_adc_conversion>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	4b1c      	ldr	r3, [pc, #112]	; (8002db4 <update_sensor_vals+0x88>)
 8002d44:	801a      	strh	r2, [r3, #0]
    update_percent(&throttle1);
 8002d46:	481b      	ldr	r0, [pc, #108]	; (8002db4 <update_sensor_vals+0x88>)
 8002d48:	f000 f908 	bl	8002f5c <update_percent>
    throttle2.raw = get_adc_conversion(hadc3, APPS2);
 8002d4c:	2101      	movs	r1, #1
 8002d4e:	6838      	ldr	r0, [r7, #0]
 8002d50:	f7ff ffbc 	bl	8002ccc <get_adc_conversion>
 8002d54:	4603      	mov	r3, r0
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <update_sensor_vals+0x8c>)
 8002d5a:	801a      	strh	r2, [r3, #0]
    update_percent(&throttle2);
 8002d5c:	4816      	ldr	r0, [pc, #88]	; (8002db8 <update_sensor_vals+0x8c>)
 8002d5e:	f000 f8fd 	bl	8002f5c <update_percent>
    brake.raw = get_adc_conversion(hadc3, BSE);
 8002d62:	2102      	movs	r1, #2
 8002d64:	6838      	ldr	r0, [r7, #0]
 8002d66:	f7ff ffb1 	bl	8002ccc <get_adc_conversion>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <update_sensor_vals+0x90>)
 8002d70:	801a      	strh	r2, [r3, #0]
    update_percent(&brake);
 8002d72:	4812      	ldr	r0, [pc, #72]	; (8002dbc <update_sensor_vals+0x90>)
 8002d74:	f000 f8f2 	bl	8002f5c <update_percent>
     * be immediately stopped completely.
     *
     * It is not necessary to Open the Shutdown Circuit, the motor
     * controller(s) stopping the power to the Motor(s) is sufficient.
     */
    if (has_discrepancy()) {
 8002d78:	f000 f894 	bl	8002ea4 <has_discrepancy>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d011      	beq.n	8002da6 <update_sensor_vals+0x7a>
        discrepancy_timer_ms += TMR1_PERIOD_MS;
 8002d82:	4b0f      	ldr	r3, [pc, #60]	; (8002dc0 <update_sensor_vals+0x94>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	3314      	adds	r3, #20
 8002d88:	4a0d      	ldr	r2, [pc, #52]	; (8002dc0 <update_sensor_vals+0x94>)
 8002d8a:	6013      	str	r3, [r2, #0]
        if (discrepancy_timer_ms > MAX_DISCREPANCY_MS && state == DRIVE) {
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	; (8002dc0 <update_sensor_vals+0x94>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b64      	cmp	r3, #100	; 0x64
 8002d92:	d90b      	bls.n	8002dac <update_sensor_vals+0x80>
 8002d94:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <update_sensor_vals+0x98>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d106      	bne.n	8002dac <update_sensor_vals+0x80>
            report_fault(SENSOR_DISCREPANCY);
 8002d9e:	2005      	movs	r0, #5
 8002da0:	f7fe feca 	bl	8001b38 <report_fault>
        }
    } else {
        discrepancy_timer_ms = 0;
    }
}
 8002da4:	e002      	b.n	8002dac <update_sensor_vals+0x80>
        discrepancy_timer_ms = 0;
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <update_sensor_vals+0x94>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]
}
 8002dac:	bf00      	nop
 8002dae:	3708      	adds	r7, #8
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	200027d4 	.word	0x200027d4
 8002db8:	200027e0 	.word	0x200027e0
 8002dbc:	200027ec 	.word	0x200027ec
 8002dc0:	200027f8 	.word	0x200027f8
 8002dc4:	2000008d 	.word	0x2000008d

08002dc8 <requested_throttle>:

uint16_t requested_throttle(){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
    temp_attenuate();
 8002dce:	f000 f82b 	bl	8002e28 <temp_attenuate>


    uint32_t throttle = ((uint32_t)throttle2.percent * MAX_TORQUE) / 100;  //upscale for MC code
 8002dd2:	4b12      	ldr	r3, [pc, #72]	; (8002e1c <requested_throttle+0x54>)
 8002dd4:	891b      	ldrh	r3, [r3, #8]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002ddc:	fb02 f303 	mul.w	r3, r2, r3
 8002de0:	4a0f      	ldr	r2, [pc, #60]	; (8002e20 <requested_throttle+0x58>)
 8002de2:	fba2 2303 	umull	r2, r3, r2, r3
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	607b      	str	r3, [r7, #4]

    throttle = (throttle * THROTTLE_MULTIPLIER) / 100;       //attenuate for temperature
 8002dea:	4b0e      	ldr	r3, [pc, #56]	; (8002e24 <requested_throttle+0x5c>)
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	461a      	mov	r2, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	fb02 f303 	mul.w	r3, r2, r3
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <requested_throttle+0x58>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	607b      	str	r3, [r7, #4]

    if (throttle >= 5.0) {			//case 1: if the pedal is actually being pressed return on a 1:1 scale
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d902      	bls.n	8002e0c <requested_throttle+0x44>
    	return (uint16_t)throttle;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	e003      	b.n	8002e14 <requested_throttle+0x4c>
    } else {						//case 2: if we don't know if it's being pressed or just car shaking
    	return (uint16_t)throttle / 2;	//return on 1:1/2 scale
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	085b      	lsrs	r3, r3, #1
 8002e12:	b29b      	uxth	r3, r3
    }
	return 1;
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200027e0 	.word	0x200027e0
 8002e20:	51eb851f 	.word	0x51eb851f
 8002e24:	2000008e 	.word	0x2000008e

08002e28 <temp_attenuate>:

void temp_attenuate() {
 8002e28:	b480      	push	{r7}
 8002e2a:	b083      	sub	sp, #12
 8002e2c:	af00      	add	r7, sp, #0
    int t = PACK_TEMP - 50;
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <temp_attenuate+0x4c>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3b32      	subs	r3, #50	; 0x32
 8002e36:	607b      	str	r3, [r7, #4]
    if (t < 0) {
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	da03      	bge.n	8002e46 <temp_attenuate+0x1e>
        THROTTLE_MULTIPLIER = 100;
 8002e3e:	4b0e      	ldr	r3, [pc, #56]	; (8002e78 <temp_attenuate+0x50>)
 8002e40:	2264      	movs	r2, #100	; 0x64
 8002e42:	701a      	strb	r2, [r3, #0]
    } else if (t < 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
    } else if (t >= 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
    }
}
 8002e44:	e00f      	b.n	8002e66 <temp_attenuate+0x3e>
    } else if (t < 8) {
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b07      	cmp	r3, #7
 8002e4a:	dc06      	bgt.n	8002e5a <temp_attenuate+0x32>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
 8002e4c:	4a0b      	ldr	r2, [pc, #44]	; (8002e7c <temp_attenuate+0x54>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	4b08      	ldr	r3, [pc, #32]	; (8002e78 <temp_attenuate+0x50>)
 8002e56:	701a      	strb	r2, [r3, #0]
}
 8002e58:	e005      	b.n	8002e66 <temp_attenuate+0x3e>
    } else if (t >= 8) {
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	dd02      	ble.n	8002e66 <temp_attenuate+0x3e>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
 8002e60:	2205      	movs	r2, #5
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <temp_attenuate+0x50>)
 8002e64:	701a      	strb	r2, [r3, #0]
}
 8002e66:	bf00      	nop
 8002e68:	370c      	adds	r7, #12
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	2000010d 	.word	0x2000010d
 8002e78:	2000008e 	.word	0x2000008e
 8002e7c:	0800e8d4 	.word	0x0800e8d4

08002e80 <sensors_calibrated>:

bool sensors_calibrated(){
 8002e80:	b480      	push	{r7}
 8002e82:	af00      	add	r7, sp, #0
    if(throttle2.range < APPS1_MIN_RANGE) return 0;
 8002e84:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <sensors_calibrated+0x20>)
 8002e86:	88db      	ldrh	r3, [r3, #6]
 8002e88:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e8c:	d201      	bcs.n	8002e92 <sensors_calibrated+0x12>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e000      	b.n	8002e94 <sensors_calibrated+0x14>
    if(brake.range < BRAKE_MIN_RANGE) return 0;

    return 1;
 8002e92:	2301      	movs	r3, #1
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
 8002e9e:	bf00      	nop
 8002ea0:	200027e0 	.word	0x200027e0

08002ea4 <has_discrepancy>:
}

// check differential between the throttle sensors
// returns true only if the sensor discrepancy is > 10%
// Note: after verifying there's no discrepancy, can use either sensor(1 or 2) for remaining checks
bool has_discrepancy() {
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
    if(abs((int)throttle1.percent - (int)throttle2.percent) > 10) return 1;  //percentage discrepancy
 8002ea8:	4b15      	ldr	r3, [pc, #84]	; (8002f00 <has_discrepancy+0x5c>)
 8002eaa:	891b      	ldrh	r3, [r3, #8]
 8002eac:	461a      	mov	r2, r3
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <has_discrepancy+0x60>)
 8002eb0:	891b      	ldrh	r3, [r3, #8]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	bfb8      	it	lt
 8002eb8:	425b      	neglt	r3, r3
 8002eba:	2b0a      	cmp	r3, #10
 8002ebc:	dd01      	ble.n	8002ec2 <has_discrepancy+0x1e>
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e019      	b.n	8002ef6 <has_discrepancy+0x52>

    return (throttle1.raw < APPS_OPEN_THRESH)
 8002ec2:	4b0f      	ldr	r3, [pc, #60]	; (8002f00 <has_discrepancy+0x5c>)
 8002ec4:	881b      	ldrh	r3, [r3, #0]
        || (throttle1.raw > APPS_SHORT_THRESH)
        || (throttle2.raw < APPS_OPEN_THRESH)
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 8002ec6:	2bc7      	cmp	r3, #199	; 0xc7
 8002ec8:	d90f      	bls.n	8002eea <has_discrepancy+0x46>
        || (throttle1.raw > APPS_SHORT_THRESH)
 8002eca:	4b0d      	ldr	r3, [pc, #52]	; (8002f00 <has_discrepancy+0x5c>)
 8002ecc:	881b      	ldrh	r3, [r3, #0]
 8002ece:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d809      	bhi.n	8002eea <has_discrepancy+0x46>
        || (throttle2.raw < APPS_OPEN_THRESH)
 8002ed6:	4b0b      	ldr	r3, [pc, #44]	; (8002f04 <has_discrepancy+0x60>)
 8002ed8:	881b      	ldrh	r3, [r3, #0]
 8002eda:	2bc7      	cmp	r3, #199	; 0xc7
 8002edc:	d905      	bls.n	8002eea <has_discrepancy+0x46>
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 8002ede:	4b09      	ldr	r3, [pc, #36]	; (8002f04 <has_discrepancy+0x60>)
 8002ee0:	881b      	ldrh	r3, [r3, #0]
 8002ee2:	f640 723c 	movw	r2, #3900	; 0xf3c
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d901      	bls.n	8002eee <has_discrepancy+0x4a>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <has_discrepancy+0x4c>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
	return false;

}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efe:	4770      	bx	lr
 8002f00:	200027d4 	.word	0x200027d4
 8002f04:	200027e0 	.word	0x200027e0

08002f08 <brake_implausible>:

// check for soft BSPD
// see EV.5.7 of FSAE 2022 rulebook
bool brake_implausible() {
 8002f08:	b480      	push	{r7}
 8002f0a:	af00      	add	r7, sp, #0
    if (error == BRAKE_IMPLAUSIBLE) {
 8002f0c:	4b10      	ldr	r3, [pc, #64]	; (8002f50 <brake_implausible+0x48>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b06      	cmp	r3, #6
 8002f14:	d107      	bne.n	8002f26 <brake_implausible+0x1e>
        // once brake implausibility detected,
        // can only revert to normal if throttle unapplied
        return !(throttle1.percent <= APPS1_BSPD_RESET);
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <brake_implausible+0x4c>)
 8002f18:	891b      	ldrh	r3, [r3, #8]
 8002f1a:	2b05      	cmp	r3, #5
 8002f1c:	bf8c      	ite	hi
 8002f1e:	2301      	movhi	r3, #1
 8002f20:	2300      	movls	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	e00e      	b.n	8002f44 <brake_implausible+0x3c>
    }

    // if both brake and throttle applied, brake implausible
    //return (temp_brake > 0 && temp_throttle > throttle_range * 0.25);
    return (brake.raw >= BRAKE_BSPD_THRESHOLD && throttle1.percent > APPS1_BSPD_THRESHOLD);
 8002f26:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <brake_implausible+0x50>)
 8002f28:	881b      	ldrh	r3, [r3, #0]
 8002f2a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f2e:	d305      	bcc.n	8002f3c <brake_implausible+0x34>
 8002f30:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <brake_implausible+0x4c>)
 8002f32:	891b      	ldrh	r3, [r3, #8]
 8002f34:	2b19      	cmp	r3, #25
 8002f36:	d901      	bls.n	8002f3c <brake_implausible+0x34>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <brake_implausible+0x36>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	b2db      	uxtb	r3, r3
	return false;
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	20000216 	.word	0x20000216
 8002f54:	200027d4 	.word	0x200027d4
 8002f58:	200027ec 	.word	0x200027ec

08002f5c <update_percent>:

void update_percent(CALIBRATED_SENSOR_t* sensor){
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
    uint32_t raw = (uint32_t)clamp(sensor->raw, sensor->min, sensor->max);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	8818      	ldrh	r0, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	8859      	ldrh	r1, [r3, #2]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	889b      	ldrh	r3, [r3, #4]
 8002f70:	461a      	mov	r2, r3
 8002f72:	f000 f842 	bl	8002ffa <clamp>
 8002f76:	4603      	mov	r3, r0
 8002f78:	60fb      	str	r3, [r7, #12]
    sensor->percent = (uint16_t)((100*(raw-sensor->min))/((sensor->range)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	885b      	ldrh	r3, [r3, #2]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	2264      	movs	r2, #100	; 0x64
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	88d2      	ldrh	r2, [r2, #6]
 8002f8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	811a      	strh	r2, [r3, #8]
}
 8002f98:	bf00      	nop
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <update_minmax>:

void update_minmax(CALIBRATED_SENSOR_t* sensor){
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
    if (sensor->raw > sensor->max) sensor->max = sensor->raw;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	881a      	ldrh	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d904      	bls.n	8002fbe <update_minmax+0x1e>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	809a      	strh	r2, [r3, #4]
 8002fbc:	e009      	b.n	8002fd2 <update_minmax+0x32>
    else if (sensor->raw < sensor->min) sensor->min = sensor->raw;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	881a      	ldrh	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	885b      	ldrh	r3, [r3, #2]
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d203      	bcs.n	8002fd2 <update_minmax+0x32>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	805a      	strh	r2, [r3, #2]
    if(sensor->max > sensor->min) sensor->range = sensor->max - sensor->min;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	889a      	ldrh	r2, [r3, #4]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	885b      	ldrh	r3, [r3, #2]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d907      	bls.n	8002fee <update_minmax+0x4e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	889a      	ldrh	r2, [r3, #4]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	885b      	ldrh	r3, [r3, #2]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	b29a      	uxth	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	80da      	strh	r2, [r3, #6]
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr

08002ffa <clamp>:

uint16_t clamp(uint16_t in, uint16_t min, uint16_t max){
 8002ffa:	b480      	push	{r7}
 8002ffc:	b083      	sub	sp, #12
 8002ffe:	af00      	add	r7, sp, #0
 8003000:	4603      	mov	r3, r0
 8003002:	80fb      	strh	r3, [r7, #6]
 8003004:	460b      	mov	r3, r1
 8003006:	80bb      	strh	r3, [r7, #4]
 8003008:	4613      	mov	r3, r2
 800300a:	807b      	strh	r3, [r7, #2]
    if(in > max) return max;
 800300c:	88fa      	ldrh	r2, [r7, #6]
 800300e:	887b      	ldrh	r3, [r7, #2]
 8003010:	429a      	cmp	r2, r3
 8003012:	d901      	bls.n	8003018 <clamp+0x1e>
 8003014:	887b      	ldrh	r3, [r7, #2]
 8003016:	e006      	b.n	8003026 <clamp+0x2c>
    if(in < min) return min;
 8003018:	88fa      	ldrh	r2, [r7, #6]
 800301a:	88bb      	ldrh	r3, [r7, #4]
 800301c:	429a      	cmp	r2, r3
 800301e:	d201      	bcs.n	8003024 <clamp+0x2a>
 8003020:	88bb      	ldrh	r3, [r7, #4]
 8003022:	e000      	b.n	8003026 <clamp+0x2c>
    return in;
 8003024:	88fb      	ldrh	r3, [r7, #6]
}
 8003026:	4618      	mov	r0, r3
 8003028:	370c      	adds	r7, #12
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr

08003032 <print>:
#include "serial_print.h"

void print(char *str) {
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003048:	b480      	push	{r7}
 800304a:	b083      	sub	sp, #12
 800304c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800304e:	4b0f      	ldr	r3, [pc, #60]	; (800308c <HAL_MspInit+0x44>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a0e      	ldr	r2, [pc, #56]	; (800308c <HAL_MspInit+0x44>)
 8003054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b0c      	ldr	r3, [pc, #48]	; (800308c <HAL_MspInit+0x44>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003062:	607b      	str	r3, [r7, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_MspInit+0x44>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a08      	ldr	r2, [pc, #32]	; (800308c <HAL_MspInit+0x44>)
 800306c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b06      	ldr	r3, [pc, #24]	; (800308c <HAL_MspInit+0x44>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307a:	603b      	str	r3, [r7, #0]
 800307c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800

08003090 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003098:	f107 031c 	add.w	r3, r7, #28
 800309c:	2200      	movs	r2, #0
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	605a      	str	r2, [r3, #4]
 80030a2:	609a      	str	r2, [r3, #8]
 80030a4:	60da      	str	r2, [r3, #12]
 80030a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a5b      	ldr	r2, [pc, #364]	; (800321c <HAL_ADC_MspInit+0x18c>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d154      	bne.n	800315c <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030b2:	4b5b      	ldr	r3, [pc, #364]	; (8003220 <HAL_ADC_MspInit+0x190>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	4a5a      	ldr	r2, [pc, #360]	; (8003220 <HAL_ADC_MspInit+0x190>)
 80030b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030bc:	6453      	str	r3, [r2, #68]	; 0x44
 80030be:	4b58      	ldr	r3, [pc, #352]	; (8003220 <HAL_ADC_MspInit+0x190>)
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030ca:	4b55      	ldr	r3, [pc, #340]	; (8003220 <HAL_ADC_MspInit+0x190>)
 80030cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ce:	4a54      	ldr	r2, [pc, #336]	; (8003220 <HAL_ADC_MspInit+0x190>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	6313      	str	r3, [r2, #48]	; 0x30
 80030d6:	4b52      	ldr	r3, [pc, #328]	; (8003220 <HAL_ADC_MspInit+0x190>)
 80030d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030da:	f003 0304 	and.w	r3, r3, #4
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 80030e2:	230d      	movs	r3, #13
 80030e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80030e6:	2303      	movs	r3, #3
 80030e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030ee:	f107 031c 	add.w	r3, r7, #28
 80030f2:	4619      	mov	r1, r3
 80030f4:	484b      	ldr	r0, [pc, #300]	; (8003224 <HAL_ADC_MspInit+0x194>)
 80030f6:	f003 fd87 	bl	8006c08 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80030fa:	4b4b      	ldr	r3, [pc, #300]	; (8003228 <HAL_ADC_MspInit+0x198>)
 80030fc:	4a4b      	ldr	r2, [pc, #300]	; (800322c <HAL_ADC_MspInit+0x19c>)
 80030fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003100:	4b49      	ldr	r3, [pc, #292]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003102:	2200      	movs	r2, #0
 8003104:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003106:	4b48      	ldr	r3, [pc, #288]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003108:	2200      	movs	r2, #0
 800310a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800310c:	4b46      	ldr	r3, [pc, #280]	; (8003228 <HAL_ADC_MspInit+0x198>)
 800310e:	2200      	movs	r2, #0
 8003110:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003112:	4b45      	ldr	r3, [pc, #276]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003114:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003118:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800311a:	4b43      	ldr	r3, [pc, #268]	; (8003228 <HAL_ADC_MspInit+0x198>)
 800311c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003120:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003122:	4b41      	ldr	r3, [pc, #260]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003124:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003128:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800312a:	4b3f      	ldr	r3, [pc, #252]	; (8003228 <HAL_ADC_MspInit+0x198>)
 800312c:	2200      	movs	r2, #0
 800312e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003130:	4b3d      	ldr	r3, [pc, #244]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003132:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003136:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003138:	4b3b      	ldr	r3, [pc, #236]	; (8003228 <HAL_ADC_MspInit+0x198>)
 800313a:	2200      	movs	r2, #0
 800313c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800313e:	483a      	ldr	r0, [pc, #232]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003140:	f003 f9bc 	bl	80064bc <HAL_DMA_Init>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 800314a:	f7ff fd2b 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a35      	ldr	r2, [pc, #212]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003152:	639a      	str	r2, [r3, #56]	; 0x38
 8003154:	4a34      	ldr	r2, [pc, #208]	; (8003228 <HAL_ADC_MspInit+0x198>)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800315a:	e05b      	b.n	8003214 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a33      	ldr	r2, [pc, #204]	; (8003230 <HAL_ADC_MspInit+0x1a0>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d156      	bne.n	8003214 <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003166:	4b2e      	ldr	r3, [pc, #184]	; (8003220 <HAL_ADC_MspInit+0x190>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a2d      	ldr	r2, [pc, #180]	; (8003220 <HAL_ADC_MspInit+0x190>)
 800316c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b2b      	ldr	r3, [pc, #172]	; (8003220 <HAL_ADC_MspInit+0x190>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800317e:	4b28      	ldr	r3, [pc, #160]	; (8003220 <HAL_ADC_MspInit+0x190>)
 8003180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003182:	4a27      	ldr	r2, [pc, #156]	; (8003220 <HAL_ADC_MspInit+0x190>)
 8003184:	f043 0320 	orr.w	r3, r3, #32
 8003188:	6313      	str	r3, [r2, #48]	; 0x30
 800318a:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_ADC_MspInit+0x190>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	60fb      	str	r3, [r7, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSE_Pin|APP2_Pin;
 8003196:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800319a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800319c:	2303      	movs	r3, #3
 800319e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a0:	2300      	movs	r3, #0
 80031a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80031a4:	f107 031c 	add.w	r3, r7, #28
 80031a8:	4619      	mov	r1, r3
 80031aa:	4822      	ldr	r0, [pc, #136]	; (8003234 <HAL_ADC_MspInit+0x1a4>)
 80031ac:	f003 fd2c 	bl	8006c08 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 80031b0:	4b21      	ldr	r3, [pc, #132]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031b2:	4a22      	ldr	r2, [pc, #136]	; (800323c <HAL_ADC_MspInit+0x1ac>)
 80031b4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 80031b6:	4b20      	ldr	r3, [pc, #128]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031b8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80031bc:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80031be:	4b1e      	ldr	r3, [pc, #120]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80031c4:	4b1c      	ldr	r3, [pc, #112]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 80031ca:	4b1b      	ldr	r3, [pc, #108]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031d0:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80031d2:	4b19      	ldr	r3, [pc, #100]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031d8:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80031da:	4b17      	ldr	r3, [pc, #92]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031e0:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 80031e2:	4b15      	ldr	r3, [pc, #84]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031e8:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80031f0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 80031f8:	480f      	ldr	r0, [pc, #60]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 80031fa:	f003 f95f 	bl	80064bc <HAL_DMA_Init>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <HAL_ADC_MspInit+0x178>
      Error_Handler();
 8003204:	f7ff fcce 	bl	8002ba4 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a0b      	ldr	r2, [pc, #44]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 800320c:	639a      	str	r2, [r3, #56]	; 0x38
 800320e:	4a0a      	ldr	r2, [pc, #40]	; (8003238 <HAL_ADC_MspInit+0x1a8>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003214:	bf00      	nop
 8003216:	3730      	adds	r7, #48	; 0x30
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40012000 	.word	0x40012000
 8003220:	40023800 	.word	0x40023800
 8003224:	40020800 	.word	0x40020800
 8003228:	200022b0 	.word	0x200022b0
 800322c:	40026410 	.word	0x40026410
 8003230:	40012200 	.word	0x40012200
 8003234:	40021400 	.word	0x40021400
 8003238:	20002310 	.word	0x20002310
 800323c:	40026428 	.word	0x40026428

08003240 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b08c      	sub	sp, #48	; 0x30
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003248:	f107 031c 	add.w	r3, r7, #28
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]
 8003250:	605a      	str	r2, [r3, #4]
 8003252:	609a      	str	r2, [r3, #8]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a42      	ldr	r2, [pc, #264]	; (8003368 <HAL_CAN_MspInit+0x128>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d13a      	bne.n	80032d8 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003262:	4b42      	ldr	r3, [pc, #264]	; (800336c <HAL_CAN_MspInit+0x12c>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	4a40      	ldr	r2, [pc, #256]	; (800336c <HAL_CAN_MspInit+0x12c>)
 800326a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800326c:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_CAN_MspInit+0x12c>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d10b      	bne.n	800328c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003274:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_CAN_MspInit+0x130>)
 8003276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003278:	4a3d      	ldr	r2, [pc, #244]	; (8003370 <HAL_CAN_MspInit+0x130>)
 800327a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800327e:	6413      	str	r3, [r2, #64]	; 0x40
 8003280:	4b3b      	ldr	r3, [pc, #236]	; (8003370 <HAL_CAN_MspInit+0x130>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003288:	61bb      	str	r3, [r7, #24]
 800328a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800328c:	4b38      	ldr	r3, [pc, #224]	; (8003370 <HAL_CAN_MspInit+0x130>)
 800328e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003290:	4a37      	ldr	r2, [pc, #220]	; (8003370 <HAL_CAN_MspInit+0x130>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6313      	str	r3, [r2, #48]	; 0x30
 8003298:	4b35      	ldr	r3, [pc, #212]	; (8003370 <HAL_CAN_MspInit+0x130>)
 800329a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329c:	f003 0301 	and.w	r3, r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 80032a4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80032a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032aa:	2302      	movs	r3, #2
 80032ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032b2:	2303      	movs	r3, #3
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80032b6:	2309      	movs	r3, #9
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ba:	f107 031c 	add.w	r3, r7, #28
 80032be:	4619      	mov	r1, r3
 80032c0:	482c      	ldr	r0, [pc, #176]	; (8003374 <HAL_CAN_MspInit+0x134>)
 80032c2:	f003 fca1 	bl	8006c08 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80032c6:	2200      	movs	r2, #0
 80032c8:	2100      	movs	r1, #0
 80032ca:	2014      	movs	r0, #20
 80032cc:	f003 f8bf 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80032d0:	2014      	movs	r0, #20
 80032d2:	f003 f8d8 	bl	8006486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 80032d6:	e042      	b.n	800335e <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a26      	ldr	r2, [pc, #152]	; (8003378 <HAL_CAN_MspInit+0x138>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d13d      	bne.n	800335e <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80032e2:	4b23      	ldr	r3, [pc, #140]	; (8003370 <HAL_CAN_MspInit+0x130>)
 80032e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e6:	4a22      	ldr	r2, [pc, #136]	; (8003370 <HAL_CAN_MspInit+0x130>)
 80032e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032ec:	6413      	str	r3, [r2, #64]	; 0x40
 80032ee:	4b20      	ldr	r3, [pc, #128]	; (8003370 <HAL_CAN_MspInit+0x130>)
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032f6:	613b      	str	r3, [r7, #16]
 80032f8:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80032fa:	4b1c      	ldr	r3, [pc, #112]	; (800336c <HAL_CAN_MspInit+0x12c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3301      	adds	r3, #1
 8003300:	4a1a      	ldr	r2, [pc, #104]	; (800336c <HAL_CAN_MspInit+0x12c>)
 8003302:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_CAN_MspInit+0x12c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d10b      	bne.n	8003324 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800330c:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_CAN_MspInit+0x130>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003310:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_CAN_MspInit+0x130>)
 8003312:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003316:	6413      	str	r3, [r2, #64]	; 0x40
 8003318:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_CAN_MspInit+0x130>)
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003324:	4b12      	ldr	r3, [pc, #72]	; (8003370 <HAL_CAN_MspInit+0x130>)
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	4a11      	ldr	r2, [pc, #68]	; (8003370 <HAL_CAN_MspInit+0x130>)
 800332a:	f043 0302 	orr.w	r3, r3, #2
 800332e:	6313      	str	r3, [r2, #48]	; 0x30
 8003330:	4b0f      	ldr	r3, [pc, #60]	; (8003370 <HAL_CAN_MspInit+0x130>)
 8003332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	60bb      	str	r3, [r7, #8]
 800333a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 800333c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003342:	2302      	movs	r3, #2
 8003344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003346:	2300      	movs	r3, #0
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334a:	2303      	movs	r3, #3
 800334c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800334e:	2309      	movs	r3, #9
 8003350:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003352:	f107 031c 	add.w	r3, r7, #28
 8003356:	4619      	mov	r1, r3
 8003358:	4808      	ldr	r0, [pc, #32]	; (800337c <HAL_CAN_MspInit+0x13c>)
 800335a:	f003 fc55 	bl	8006c08 <HAL_GPIO_Init>
}
 800335e:	bf00      	nop
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40006400 	.word	0x40006400
 800336c:	200027fc 	.word	0x200027fc
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	40006800 	.word	0x40006800
 800337c:	40020400 	.word	0x40020400

08003380 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b0ac      	sub	sp, #176	; 0xb0
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003388:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800338c:	2200      	movs	r2, #0
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	605a      	str	r2, [r3, #4]
 8003392:	609a      	str	r2, [r3, #8]
 8003394:	60da      	str	r2, [r3, #12]
 8003396:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003398:	f107 0318 	add.w	r3, r7, #24
 800339c:	2284      	movs	r2, #132	; 0x84
 800339e:	2100      	movs	r1, #0
 80033a0:	4618      	mov	r0, r3
 80033a2:	f00a fcd3 	bl	800dd4c <memset>
  if(hsd->Instance==SDMMC1)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a74      	ldr	r2, [pc, #464]	; (800357c <HAL_SD_MspInit+0x1fc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	f040 80e0 	bne.w	8003572 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80033b2:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80033b6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80033be:	2300      	movs	r3, #0
 80033c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033c4:	f107 0318 	add.w	r3, r7, #24
 80033c8:	4618      	mov	r0, r3
 80033ca:	f004 fb13 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80033d4:	f7ff fbe6 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80033d8:	4b69      	ldr	r3, [pc, #420]	; (8003580 <HAL_SD_MspInit+0x200>)
 80033da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033dc:	4a68      	ldr	r2, [pc, #416]	; (8003580 <HAL_SD_MspInit+0x200>)
 80033de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80033e2:	6453      	str	r3, [r2, #68]	; 0x44
 80033e4:	4b66      	ldr	r3, [pc, #408]	; (8003580 <HAL_SD_MspInit+0x200>)
 80033e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ec:	617b      	str	r3, [r7, #20]
 80033ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f0:	4b63      	ldr	r3, [pc, #396]	; (8003580 <HAL_SD_MspInit+0x200>)
 80033f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f4:	4a62      	ldr	r2, [pc, #392]	; (8003580 <HAL_SD_MspInit+0x200>)
 80033f6:	f043 0304 	orr.w	r3, r3, #4
 80033fa:	6313      	str	r3, [r2, #48]	; 0x30
 80033fc:	4b60      	ldr	r3, [pc, #384]	; (8003580 <HAL_SD_MspInit+0x200>)
 80033fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003400:	f003 0304 	and.w	r3, r3, #4
 8003404:	613b      	str	r3, [r7, #16]
 8003406:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003408:	4b5d      	ldr	r3, [pc, #372]	; (8003580 <HAL_SD_MspInit+0x200>)
 800340a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340c:	4a5c      	ldr	r2, [pc, #368]	; (8003580 <HAL_SD_MspInit+0x200>)
 800340e:	f043 0308 	orr.w	r3, r3, #8
 8003412:	6313      	str	r3, [r2, #48]	; 0x30
 8003414:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <HAL_SD_MspInit+0x200>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	60fb      	str	r3, [r7, #12]
 800341e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8003420:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 8003424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003428:	2302      	movs	r3, #2
 800342a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800342e:	2301      	movs	r3, #1
 8003430:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003434:	2303      	movs	r3, #3
 8003436:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800343a:	230c      	movs	r3, #12
 800343c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003440:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003444:	4619      	mov	r1, r3
 8003446:	484f      	ldr	r0, [pc, #316]	; (8003584 <HAL_SD_MspInit+0x204>)
 8003448:	f003 fbde 	bl	8006c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800344c:	2304      	movs	r3, #4
 800344e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003452:	2302      	movs	r3, #2
 8003454:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003458:	2301      	movs	r3, #1
 800345a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800345e:	2303      	movs	r3, #3
 8003460:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003464:	230c      	movs	r3, #12
 8003466:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800346a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800346e:	4619      	mov	r1, r3
 8003470:	4845      	ldr	r0, [pc, #276]	; (8003588 <HAL_SD_MspInit+0x208>)
 8003472:	f003 fbc9 	bl	8006c08 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003476:	4b45      	ldr	r3, [pc, #276]	; (800358c <HAL_SD_MspInit+0x20c>)
 8003478:	4a45      	ldr	r2, [pc, #276]	; (8003590 <HAL_SD_MspInit+0x210>)
 800347a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800347c:	4b43      	ldr	r3, [pc, #268]	; (800358c <HAL_SD_MspInit+0x20c>)
 800347e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003482:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003484:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_SD_MspInit+0x20c>)
 8003486:	2200      	movs	r2, #0
 8003488:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800348a:	4b40      	ldr	r3, [pc, #256]	; (800358c <HAL_SD_MspInit+0x20c>)
 800348c:	2200      	movs	r2, #0
 800348e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003490:	4b3e      	ldr	r3, [pc, #248]	; (800358c <HAL_SD_MspInit+0x20c>)
 8003492:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003496:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003498:	4b3c      	ldr	r3, [pc, #240]	; (800358c <HAL_SD_MspInit+0x20c>)
 800349a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800349e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034a0:	4b3a      	ldr	r3, [pc, #232]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034a6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80034a8:	4b38      	ldr	r3, [pc, #224]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034aa:	2220      	movs	r2, #32
 80034ac:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80034b4:	4b35      	ldr	r3, [pc, #212]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034b6:	2204      	movs	r2, #4
 80034b8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80034ba:	4b34      	ldr	r3, [pc, #208]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034bc:	2203      	movs	r2, #3
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80034c0:	4b32      	ldr	r3, [pc, #200]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80034c8:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80034d0:	482e      	ldr	r0, [pc, #184]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034d2:	f002 fff3 	bl	80064bc <HAL_DMA_Init>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80034dc:	f7ff fb62 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a2a      	ldr	r2, [pc, #168]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
 80034e6:	4a29      	ldr	r2, [pc, #164]	; (800358c <HAL_SD_MspInit+0x20c>)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 80034ec:	4b29      	ldr	r3, [pc, #164]	; (8003594 <HAL_SD_MspInit+0x214>)
 80034ee:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <HAL_SD_MspInit+0x218>)
 80034f0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80034f2:	4b28      	ldr	r3, [pc, #160]	; (8003594 <HAL_SD_MspInit+0x214>)
 80034f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034f8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <HAL_SD_MspInit+0x214>)
 80034fc:	2240      	movs	r2, #64	; 0x40
 80034fe:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003506:	4b23      	ldr	r3, [pc, #140]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003508:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800350c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800350e:	4b21      	ldr	r3, [pc, #132]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003510:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003514:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003516:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003518:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800351c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003520:	2220      	movs	r2, #32
 8003522:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003526:	2200      	movs	r2, #0
 8003528:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800352a:	4b1a      	ldr	r3, [pc, #104]	; (8003594 <HAL_SD_MspInit+0x214>)
 800352c:	2204      	movs	r2, #4
 800352e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003530:	4b18      	ldr	r3, [pc, #96]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003532:	2203      	movs	r2, #3
 8003534:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003536:	4b17      	ldr	r3, [pc, #92]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003538:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800353c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800353e:	4b15      	ldr	r3, [pc, #84]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003540:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003546:	4813      	ldr	r0, [pc, #76]	; (8003594 <HAL_SD_MspInit+0x214>)
 8003548:	f002 ffb8 	bl	80064bc <HAL_DMA_Init>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8003552:	f7ff fb27 	bl	8002ba4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a0e      	ldr	r2, [pc, #56]	; (8003594 <HAL_SD_MspInit+0x214>)
 800355a:	63da      	str	r2, [r3, #60]	; 0x3c
 800355c:	4a0d      	ldr	r2, [pc, #52]	; (8003594 <HAL_SD_MspInit+0x214>)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003562:	2200      	movs	r2, #0
 8003564:	2100      	movs	r1, #0
 8003566:	2031      	movs	r0, #49	; 0x31
 8003568:	f002 ff71 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800356c:	2031      	movs	r0, #49	; 0x31
 800356e:	f002 ff8a 	bl	8006486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003572:	bf00      	nop
 8003574:	37b0      	adds	r7, #176	; 0xb0
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	40012c00 	.word	0x40012c00
 8003580:	40023800 	.word	0x40023800
 8003584:	40020800 	.word	0x40020800
 8003588:	40020c00 	.word	0x40020c00
 800358c:	20002444 	.word	0x20002444
 8003590:	40026458 	.word	0x40026458
 8003594:	200024a4 	.word	0x200024a4
 8003598:	400264a0 	.word	0x400264a0

0800359c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08c      	sub	sp, #48	; 0x30
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a4:	f107 031c 	add.w	r3, r7, #28
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	605a      	str	r2, [r3, #4]
 80035ae:	609a      	str	r2, [r3, #8]
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035bc:	d129      	bne.n	8003612 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	4a39      	ldr	r2, [pc, #228]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6413      	str	r3, [r2, #64]	; 0x40
 80035ca:	4b37      	ldr	r3, [pc, #220]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d6:	4b34      	ldr	r3, [pc, #208]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a33      	ldr	r2, [pc, #204]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 80035dc:	f043 0301 	orr.w	r3, r3, #1
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b31      	ldr	r3, [pc, #196]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80035ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035f4:	2302      	movs	r3, #2
 80035f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035fc:	2300      	movs	r3, #0
 80035fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003600:	2301      	movs	r3, #1
 8003602:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003604:	f107 031c 	add.w	r3, r7, #28
 8003608:	4619      	mov	r1, r3
 800360a:	4828      	ldr	r0, [pc, #160]	; (80036ac <HAL_TIM_Base_MspInit+0x110>)
 800360c:	f003 fafc 	bl	8006c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003610:	e046      	b.n	80036a0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a26      	ldr	r2, [pc, #152]	; (80036b0 <HAL_TIM_Base_MspInit+0x114>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d128      	bne.n	800366e <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800361c:	4b22      	ldr	r3, [pc, #136]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a21      	ldr	r2, [pc, #132]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 8003622:	f043 0304 	orr.w	r3, r3, #4
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b1f      	ldr	r3, [pc, #124]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	613b      	str	r3, [r7, #16]
 8003632:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 8003636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003638:	4a1b      	ldr	r2, [pc, #108]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 800363a:	f043 0310 	orr.w	r3, r3, #16
 800363e:	6313      	str	r3, [r2, #48]	; 0x30
 8003640:	4b19      	ldr	r3, [pc, #100]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 8003642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	60fb      	str	r3, [r7, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800364c:	2301      	movs	r3, #1
 800364e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003650:	2302      	movs	r3, #2
 8003652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003654:	2300      	movs	r3, #0
 8003656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003658:	2300      	movs	r3, #0
 800365a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800365c:	2302      	movs	r3, #2
 800365e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003660:	f107 031c 	add.w	r3, r7, #28
 8003664:	4619      	mov	r1, r3
 8003666:	4813      	ldr	r0, [pc, #76]	; (80036b4 <HAL_TIM_Base_MspInit+0x118>)
 8003668:	f003 face 	bl	8006c08 <HAL_GPIO_Init>
}
 800366c:	e018      	b.n	80036a0 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM7)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a11      	ldr	r2, [pc, #68]	; (80036b8 <HAL_TIM_Base_MspInit+0x11c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d113      	bne.n	80036a0 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 800367e:	f043 0320 	orr.w	r3, r3, #32
 8003682:	6413      	str	r3, [r2, #64]	; 0x40
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_TIM_Base_MspInit+0x10c>)
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f003 0320 	and.w	r3, r3, #32
 800368c:	60bb      	str	r3, [r7, #8]
 800368e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2037      	movs	r0, #55	; 0x37
 8003696:	f002 feda 	bl	800644e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800369a:	2037      	movs	r0, #55	; 0x37
 800369c:	f002 fef3 	bl	8006486 <HAL_NVIC_EnableIRQ>
}
 80036a0:	bf00      	nop
 80036a2:	3730      	adds	r7, #48	; 0x30
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40023800 	.word	0x40023800
 80036ac:	40020000 	.word	0x40020000
 80036b0:	40000800 	.word	0x40000800
 80036b4:	40021000 	.word	0x40021000
 80036b8:	40001400 	.word	0x40001400

080036bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b0ae      	sub	sp, #184	; 0xb8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	609a      	str	r2, [r3, #8]
 80036d0:	60da      	str	r2, [r3, #12]
 80036d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80036d4:	f107 0320 	add.w	r3, r7, #32
 80036d8:	2284      	movs	r2, #132	; 0x84
 80036da:	2100      	movs	r1, #0
 80036dc:	4618      	mov	r0, r3
 80036de:	f00a fb35 	bl	800dd4c <memset>
  if(huart->Instance==UART4)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a64      	ldr	r2, [pc, #400]	; (8003878 <HAL_UART_MspInit+0x1bc>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d13c      	bne.n	8003766 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80036ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036f0:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80036f2:	2300      	movs	r3, #0
 80036f4:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036f6:	f107 0320 	add.w	r3, r7, #32
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 f97a 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003706:	f7ff fa4d 	bl	8002ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800370a:	4b5c      	ldr	r3, [pc, #368]	; (800387c <HAL_UART_MspInit+0x1c0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	4a5b      	ldr	r2, [pc, #364]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003714:	6413      	str	r3, [r2, #64]	; 0x40
 8003716:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003722:	4b56      	ldr	r3, [pc, #344]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a55      	ldr	r2, [pc, #340]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b53      	ldr	r3, [pc, #332]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 800373a:	2303      	movs	r3, #3
 800373c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003740:	2302      	movs	r3, #2
 8003742:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374c:	2303      	movs	r3, #3
 800374e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003752:	2308      	movs	r3, #8
 8003754:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003758:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800375c:	4619      	mov	r1, r3
 800375e:	4848      	ldr	r0, [pc, #288]	; (8003880 <HAL_UART_MspInit+0x1c4>)
 8003760:	f003 fa52 	bl	8006c08 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003764:	e083      	b.n	800386e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a46      	ldr	r2, [pc, #280]	; (8003884 <HAL_UART_MspInit+0x1c8>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d13c      	bne.n	80037ea <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8003770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003774:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8003776:	2300      	movs	r3, #0
 8003778:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800377a:	f107 0320 	add.w	r3, r7, #32
 800377e:	4618      	mov	r0, r3
 8003780:	f004 f938 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 800378a:	f7ff fa0b 	bl	8002ba4 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 800378e:	4b3b      	ldr	r3, [pc, #236]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	4a3a      	ldr	r2, [pc, #232]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003794:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003798:	6413      	str	r3, [r2, #64]	; 0x40
 800379a:	4b38      	ldr	r3, [pc, #224]	; (800387c <HAL_UART_MspInit+0x1c0>)
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80037a6:	4b35      	ldr	r3, [pc, #212]	; (800387c <HAL_UART_MspInit+0x1c0>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a34      	ldr	r2, [pc, #208]	; (800387c <HAL_UART_MspInit+0x1c0>)
 80037ac:	f043 0320 	orr.w	r3, r3, #32
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b32      	ldr	r3, [pc, #200]	; (800387c <HAL_UART_MspInit+0x1c0>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f003 0320 	and.w	r3, r3, #32
 80037ba:	613b      	str	r3, [r7, #16]
 80037bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 80037be:	23c0      	movs	r3, #192	; 0xc0
 80037c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037c4:	2302      	movs	r3, #2
 80037c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d0:	2303      	movs	r3, #3
 80037d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80037d6:	2308      	movs	r3, #8
 80037d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80037dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4829      	ldr	r0, [pc, #164]	; (8003888 <HAL_UART_MspInit+0x1cc>)
 80037e4:	f003 fa10 	bl	8006c08 <HAL_GPIO_Init>
}
 80037e8:	e041      	b.n	800386e <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a27      	ldr	r2, [pc, #156]	; (800388c <HAL_UART_MspInit+0x1d0>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d13c      	bne.n	800386e <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80037f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037f8:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80037fa:	2300      	movs	r3, #0
 80037fc:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037fe:	f107 0320 	add.w	r3, r7, #32
 8003802:	4618      	mov	r0, r3
 8003804:	f004 f8f6 	bl	80079f4 <HAL_RCCEx_PeriphCLKConfig>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <HAL_UART_MspInit+0x156>
      Error_Handler();
 800380e:	f7ff f9c9 	bl	8002ba4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	4a19      	ldr	r2, [pc, #100]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6413      	str	r3, [r2, #64]	; 0x40
 800381e:	4b17      	ldr	r3, [pc, #92]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <HAL_UART_MspInit+0x1c0>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a13      	ldr	r2, [pc, #76]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003830:	f043 0302 	orr.w	r3, r3, #2
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_UART_MspInit+0x1c0>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003842:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003846:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800384a:	2302      	movs	r3, #2
 800384c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003850:	2300      	movs	r3, #0
 8003852:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003856:	2303      	movs	r3, #3
 8003858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800385c:	2307      	movs	r3, #7
 800385e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003862:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003866:	4619      	mov	r1, r3
 8003868:	4809      	ldr	r0, [pc, #36]	; (8003890 <HAL_UART_MspInit+0x1d4>)
 800386a:	f003 f9cd 	bl	8006c08 <HAL_GPIO_Init>
}
 800386e:	bf00      	nop
 8003870:	37b8      	adds	r7, #184	; 0xb8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40004c00 	.word	0x40004c00
 800387c:	40023800 	.word	0x40023800
 8003880:	40020000 	.word	0x40020000
 8003884:	40007800 	.word	0x40007800
 8003888:	40021400 	.word	0x40021400
 800388c:	40004800 	.word	0x40004800
 8003890:	40020400 	.word	0x40020400

08003894 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800389a:	1d3b      	adds	r3, r7, #4
 800389c:	2200      	movs	r2, #0
 800389e:	601a      	str	r2, [r3, #0]
 80038a0:	605a      	str	r2, [r3, #4]
 80038a2:	609a      	str	r2, [r3, #8]
 80038a4:	60da      	str	r2, [r3, #12]
 80038a6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <HAL_FMC_MspInit+0xa4>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d13f      	bne.n	8003930 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <HAL_FMC_MspInit+0xa4>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80038b6:	4b21      	ldr	r3, [pc, #132]	; (800393c <HAL_FMC_MspInit+0xa8>)
 80038b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ba:	4a20      	ldr	r2, [pc, #128]	; (800393c <HAL_FMC_MspInit+0xa8>)
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	6393      	str	r3, [r2, #56]	; 0x38
 80038c2:	4b1e      	ldr	r3, [pc, #120]	; (800393c <HAL_FMC_MspInit+0xa8>)
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	603b      	str	r3, [r7, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80038ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d4:	2302      	movs	r3, #2
 80038d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038dc:	2303      	movs	r3, #3
 80038de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80038e0:	230c      	movs	r3, #12
 80038e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80038e4:	1d3b      	adds	r3, r7, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4815      	ldr	r0, [pc, #84]	; (8003940 <HAL_FMC_MspInit+0xac>)
 80038ea:	f003 f98d 	bl	8006c08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80038ee:	f64f 7380 	movw	r3, #65408	; 0xff80
 80038f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038f4:	2302      	movs	r3, #2
 80038f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038f8:	2300      	movs	r3, #0
 80038fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038fc:	2303      	movs	r3, #3
 80038fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003900:	230c      	movs	r3, #12
 8003902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003904:	1d3b      	adds	r3, r7, #4
 8003906:	4619      	mov	r1, r3
 8003908:	480e      	ldr	r0, [pc, #56]	; (8003944 <HAL_FMC_MspInit+0xb0>)
 800390a:	f003 f97d 	bl	8006c08 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800390e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003912:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2302      	movs	r3, #2
 8003916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391c:	2303      	movs	r3, #3
 800391e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003920:	230c      	movs	r3, #12
 8003922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4807      	ldr	r0, [pc, #28]	; (8003948 <HAL_FMC_MspInit+0xb4>)
 800392a:	f003 f96d 	bl	8006c08 <HAL_GPIO_Init>
 800392e:	e000      	b.n	8003932 <HAL_FMC_MspInit+0x9e>
    return;
 8003930:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003932:	3718      	adds	r7, #24
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20002800 	.word	0x20002800
 800393c:	40023800 	.word	0x40023800
 8003940:	40021400 	.word	0x40021400
 8003944:	40021000 	.word	0x40021000
 8003948:	40020c00 	.word	0x40020c00

0800394c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003954:	f7ff ff9e 	bl	8003894 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003958:	bf00      	nop
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003964:	e7fe      	b.n	8003964 <NMI_Handler+0x4>

08003966 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800396a:	e7fe      	b.n	800396a <HardFault_Handler+0x4>

0800396c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003970:	e7fe      	b.n	8003970 <MemManage_Handler+0x4>

08003972 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003972:	b480      	push	{r7}
 8003974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003976:	e7fe      	b.n	8003976 <BusFault_Handler+0x4>

08003978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800397c:	e7fe      	b.n	800397c <UsageFault_Handler+0x4>

0800397e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800397e:	b480      	push	{r7}
 8003980:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003982:	bf00      	nop
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800398c:	b480      	push	{r7}
 800398e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003990:	bf00      	nop
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800399a:	b480      	push	{r7}
 800399c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800399e:	bf00      	nop
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80039ac:	f001 f9de 	bl	8004d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <CAN1_RX0_IRQHandler+0x10>)
 80039ba:	f002 fa3d 	bl	8005e38 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20002370 	.word	0x20002370

080039c8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <SDMMC1_IRQHandler+0x10>)
 80039ce:	f004 fe81 	bl	80086d4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	200023c0 	.word	0x200023c0

080039dc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <TIM7_IRQHandler+0x10>)
 80039e2:	f005 fe37 	bl	8009654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	2000259c 	.word	0x2000259c

080039f0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <DMA2_Stream0_IRQHandler+0x10>)
 80039f6:	f002 fe91 	bl	800671c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200022b0 	.word	0x200022b0

08003a04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <DMA2_Stream1_IRQHandler+0x10>)
 8003a0a:	f002 fe87 	bl	800671c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20002310 	.word	0x20002310

08003a18 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA2_Stream3_IRQHandler+0x10>)
 8003a1e:	f002 fe7d 	bl	800671c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20002444 	.word	0x20002444

08003a2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <DMA2_Stream6_IRQHandler+0x10>)
 8003a32:	f002 fe73 	bl	800671c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200024a4 	.word	0x200024a4

08003a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a48:	4a14      	ldr	r2, [pc, #80]	; (8003a9c <_sbrk+0x5c>)
 8003a4a:	4b15      	ldr	r3, [pc, #84]	; (8003aa0 <_sbrk+0x60>)
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a54:	4b13      	ldr	r3, [pc, #76]	; (8003aa4 <_sbrk+0x64>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d102      	bne.n	8003a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <_sbrk+0x64>)
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <_sbrk+0x68>)
 8003a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a62:	4b10      	ldr	r3, [pc, #64]	; (8003aa4 <_sbrk+0x64>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4413      	add	r3, r2
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d207      	bcs.n	8003a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a70:	f00a f974 	bl	800dd5c <__errno>
 8003a74:	4603      	mov	r3, r0
 8003a76:	220c      	movs	r2, #12
 8003a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a7a:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7e:	e009      	b.n	8003a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a80:	4b08      	ldr	r3, [pc, #32]	; (8003aa4 <_sbrk+0x64>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <_sbrk+0x64>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <_sbrk+0x64>)
 8003a90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a92:	68fb      	ldr	r3, [r7, #12]
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	20050000 	.word	0x20050000
 8003aa0:	00000400 	.word	0x00000400
 8003aa4:	20002804 	.word	0x20002804
 8003aa8:	20004a10 	.word	0x20004a10

08003aac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aac:	b480      	push	{r7}
 8003aae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <SystemInit+0x20>)
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	4a05      	ldr	r2, [pc, #20]	; (8003acc <SystemInit+0x20>)
 8003ab8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003abc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	e000ed00 	.word	0xe000ed00

08003ad0 <traction_control_PID>:
const uint8_t kI = 0;
const uint8_t kD = 0;

const uint16_t TC_torque_limit = 100;

void traction_control_PID(){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
    if (state != DRIVE) return;
 8003ad6:	4b59      	ldr	r3, [pc, #356]	; (8003c3c <traction_control_PID+0x16c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	f040 80a8 	bne.w	8003c32 <traction_control_PID+0x162>

    // note: wheel speeds are in units of pulses/20ms
    const float avg_front_wheel_speed = (front_right_wheel_speed + front_left_wheel_speed)/2.0;
 8003ae2:	4b57      	ldr	r3, [pc, #348]	; (8003c40 <traction_control_PID+0x170>)
 8003ae4:	881b      	ldrh	r3, [r3, #0]
 8003ae6:	b29b      	uxth	r3, r3
 8003ae8:	461a      	mov	r2, r3
 8003aea:	4b56      	ldr	r3, [pc, #344]	; (8003c44 <traction_control_PID+0x174>)
 8003aec:	881b      	ldrh	r3, [r3, #0]
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	4413      	add	r3, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fc fd36 	bl	8000564 <__aeabi_i2d>
 8003af8:	f04f 0200 	mov.w	r2, #0
 8003afc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b00:	f7fc fec4 	bl	800088c <__aeabi_ddiv>
 8003b04:	4602      	mov	r2, r0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4610      	mov	r0, r2
 8003b0a:	4619      	mov	r1, r3
 8003b0c:	f7fc ffa6 	bl	8000a5c <__aeabi_d2f>
 8003b10:	4603      	mov	r3, r0
 8003b12:	60fb      	str	r3, [r7, #12]
    const float avg_back_wheel_speed = (back_right_wheel_speed + back_left_wheel_speed)/2.0;
 8003b14:	4b4c      	ldr	r3, [pc, #304]	; (8003c48 <traction_control_PID+0x178>)
 8003b16:	881b      	ldrh	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	4b4b      	ldr	r3, [pc, #300]	; (8003c4c <traction_control_PID+0x17c>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fc fd1d 	bl	8000564 <__aeabi_i2d>
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003b32:	f7fc feab 	bl	800088c <__aeabi_ddiv>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4610      	mov	r0, r2
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	f7fc ff8d 	bl	8000a5c <__aeabi_d2f>
 8003b42:	4603      	mov	r3, r0
 8003b44:	60bb      	str	r3, [r7, #8]
    const float conversion_factor = (2*pi*wheel_radius)/pulses_per_rev;
 8003b46:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003c50 <traction_control_PID+0x180>
 8003b4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003b4e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003b52:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003b56:	233c      	movs	r3, #60	; 0x3c
 8003b58:	ee07 3a90 	vmov	s15, r3
 8003b5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b64:	edc7 7a01 	vstr	s15, [r7, #4]
    const float current_slip_ratio = (avg_back_wheel_speed*conversion_factor) / (avg_front_wheel_speed*conversion_factor);
 8003b68:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b6c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b70:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003b74:	ed97 7a03 	vldr	s14, [r7, #12]
 8003b78:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b84:	edc7 7a00 	vstr	s15, [r7]

    // if target slip ratio has been achieved
//    if (current_slip_ratio < target_slip_ratio + 0.001 || current_slip_ratio > target_slip_ratio - 0.001) return;

    pid_error = target_slip_ratio - current_slip_ratio;
 8003b88:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003c54 <traction_control_PID+0x184>
 8003b8c:	edd7 7a00 	vldr	s15, [r7]
 8003b90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b98:	ee17 3a90 	vmov	r3, s15
 8003b9c:	b29a      	uxth	r2, r3
 8003b9e:	4b2e      	ldr	r3, [pc, #184]	; (8003c58 <traction_control_PID+0x188>)
 8003ba0:	801a      	strh	r2, [r3, #0]
    integral = integral + pid_error;
 8003ba2:	4b2e      	ldr	r3, [pc, #184]	; (8003c5c <traction_control_PID+0x18c>)
 8003ba4:	881b      	ldrh	r3, [r3, #0]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <traction_control_PID+0x188>)
 8003baa:	881b      	ldrh	r3, [r3, #0]
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	4413      	add	r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	4b2a      	ldr	r3, [pc, #168]	; (8003c5c <traction_control_PID+0x18c>)
 8003bb4:	801a      	strh	r2, [r3, #0]
    derivative = pid_error - prev_pid_error;
 8003bb6:	4b28      	ldr	r3, [pc, #160]	; (8003c58 <traction_control_PID+0x188>)
 8003bb8:	881b      	ldrh	r3, [r3, #0]
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	4b28      	ldr	r3, [pc, #160]	; (8003c60 <traction_control_PID+0x190>)
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	4b27      	ldr	r3, [pc, #156]	; (8003c64 <traction_control_PID+0x194>)
 8003bc8:	801a      	strh	r2, [r3, #0]

    TC_control_var = (kP * pid_error) + (kI * integral) + (kD * derivative);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	b29a      	uxth	r2, r3
 8003bce:	4b22      	ldr	r3, [pc, #136]	; (8003c58 <traction_control_PID+0x188>)
 8003bd0:	881b      	ldrh	r3, [r3, #0]
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	fb12 f303 	smulbb	r3, r2, r3
 8003bd8:	b29a      	uxth	r2, r3
 8003bda:	2300      	movs	r3, #0
 8003bdc:	b299      	uxth	r1, r3
 8003bde:	4b1f      	ldr	r3, [pc, #124]	; (8003c5c <traction_control_PID+0x18c>)
 8003be0:	881b      	ldrh	r3, [r3, #0]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	fb11 f303 	smulbb	r3, r1, r3
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	4413      	add	r3, r2
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	b299      	uxth	r1, r3
 8003bf2:	4b1c      	ldr	r3, [pc, #112]	; (8003c64 <traction_control_PID+0x194>)
 8003bf4:	881b      	ldrh	r3, [r3, #0]
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	fb11 f303 	smulbb	r3, r1, r3
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	4b19      	ldr	r3, [pc, #100]	; (8003c68 <traction_control_PID+0x198>)
 8003c04:	801a      	strh	r2, [r3, #0]

    // limit PID torque request
    if (TC_control_var > TC_torque_limit) TC_control_var = TC_torque_limit;
 8003c06:	4b18      	ldr	r3, [pc, #96]	; (8003c68 <traction_control_PID+0x198>)
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	2264      	movs	r2, #100	; 0x64
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d902      	bls.n	8003c18 <traction_control_PID+0x148>
 8003c12:	2264      	movs	r2, #100	; 0x64
 8003c14:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <traction_control_PID+0x198>)
 8003c16:	801a      	strh	r2, [r3, #0]
    if (TC_control_var < 0) TC_control_var = 0; // not the best way but works for now
 8003c18:	4b13      	ldr	r3, [pc, #76]	; (8003c68 <traction_control_PID+0x198>)
 8003c1a:	881b      	ldrh	r3, [r3, #0]

    TC_torque_adjustment = TC_control_var;
 8003c1c:	4b12      	ldr	r3, [pc, #72]	; (8003c68 <traction_control_PID+0x198>)
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	4b12      	ldr	r3, [pc, #72]	; (8003c6c <traction_control_PID+0x19c>)
 8003c24:	801a      	strh	r2, [r3, #0]

    prev_pid_error = pid_error;
 8003c26:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <traction_control_PID+0x188>)
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b29a      	uxth	r2, r3
 8003c2c:	4b0c      	ldr	r3, [pc, #48]	; (8003c60 <traction_control_PID+0x190>)
 8003c2e:	801a      	strh	r2, [r3, #0]
 8003c30:	e000      	b.n	8003c34 <traction_control_PID+0x164>
    if (state != DRIVE) return;
 8003c32:	bf00      	nop
}
 8003c34:	3710      	adds	r7, #16
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000008d 	.word	0x2000008d
 8003c40:	20000116 	.word	0x20000116
 8003c44:	20000118 	.word	0x20000118
 8003c48:	2000011a 	.word	0x2000011a
 8003c4c:	2000011c 	.word	0x2000011c
 8003c50:	4048f5c3 	.word	0x4048f5c3
 8003c54:	3dcccccd 	.word	0x3dcccccd
 8003c58:	2000280c 	.word	0x2000280c
 8003c5c:	20002810 	.word	0x20002810
 8003c60:	2000280e 	.word	0x2000280e
 8003c64:	20002812 	.word	0x20002812
 8003c68:	20002808 	.word	0x20002808
 8003c6c:	2000280a 	.word	0x2000280a

08003c70 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	4611      	mov	r1, r2
 8003c7c:	461a      	mov	r2, r3
 8003c7e:	460b      	mov	r3, r1
 8003c80:	80fb      	strh	r3, [r7, #6]
 8003c82:	4613      	mov	r3, r2
 8003c84:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	68ba      	ldr	r2, [r7, #8]
 8003c8a:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	88fa      	ldrh	r2, [r7, #6]
 8003c90:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	88ba      	ldrh	r2, [r7, #4]
 8003c96:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2204      	movs	r2, #4
 8003c9c:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2204      	movs	r2, #4
 8003ca2:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	b29b      	uxth	r3, r3
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	b21a      	sxth	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003cd0:	b29b      	uxth	r3, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	b21a      	sxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8003d2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d38:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2200      	movs	r2, #0
 8003d48:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
 8003d5a:	e010      	b.n	8003d7e <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 8003d5c:	7dfb      	ldrb	r3, [r7, #23]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	3309      	adds	r3, #9
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	4413      	add	r3, r2
 8003d66:	2200      	movs	r2, #0
 8003d68:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8003d6a:	7dfb      	ldrb	r3, [r7, #23]
 8003d6c:	68fa      	ldr	r2, [r7, #12]
 8003d6e:	3309      	adds	r3, #9
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4413      	add	r3, r2
 8003d74:	2200      	movs	r2, #0
 8003d76:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	75fb      	strb	r3, [r7, #23]
 8003d7e:	7dfb      	ldrb	r3, [r7, #23]
 8003d80:	2b06      	cmp	r3, #6
 8003d82:	d9eb      	bls.n	8003d5c <UG_Init+0xec>
   }

   gui = g;
 8003d84:	4a04      	ldr	r2, [pc, #16]	; (8003d98 <UG_Init+0x128>)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6013      	str	r3, [r2, #0]
   return 1;
 8003d8a:	2301      	movs	r3, #1
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	371c      	adds	r7, #28
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	20002814 	.word	0x20002814

08003d9c <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8003d9c:	b4b0      	push	{r4, r5, r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 8003da4:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <UG_FontSelect+0x28>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8003dae:	4615      	mov	r5, r2
 8003db0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003db2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003db4:	682b      	ldr	r3, [r5, #0]
 8003db6:	6023      	str	r3, [r4, #0]
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bcb0      	pop	{r4, r5, r7}
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	20002814 	.word	0x20002814

08003dc8 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b084      	sub	sp, #16
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	4603      	mov	r3, r0
 8003dd0:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	; (8003e08 <UG_FillScreen+0x40>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	b21a      	sxth	r2, r3
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <UG_FillScreen+0x40>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	3b01      	subs	r3, #1
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	b219      	sxth	r1, r3
 8003df2:	88fb      	ldrh	r3, [r7, #6]
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	460b      	mov	r3, r1
 8003df8:	2100      	movs	r1, #0
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	f000 f806 	bl	8003e0c <UG_FillFrame>
}
 8003e00:	bf00      	nop
 8003e02:	3708      	adds	r7, #8
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}
 8003e08:	20002814 	.word	0x20002814

08003e0c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8003e0c:	b5b0      	push	{r4, r5, r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	4604      	mov	r4, r0
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4623      	mov	r3, r4
 8003e1c:	80fb      	strh	r3, [r7, #6]
 8003e1e:	4603      	mov	r3, r0
 8003e20:	80bb      	strh	r3, [r7, #4]
 8003e22:	460b      	mov	r3, r1
 8003e24:	807b      	strh	r3, [r7, #2]
 8003e26:	4613      	mov	r3, r2
 8003e28:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8003e2a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	da05      	bge.n	8003e42 <UG_FillFrame+0x36>
   {
      n = x2;
 8003e36:	887b      	ldrh	r3, [r7, #2]
 8003e38:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	807b      	strh	r3, [r7, #2]
      x1 = n;
 8003e3e:	89fb      	ldrh	r3, [r7, #14]
 8003e40:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 8003e42:	f9b7 2000 	ldrsh.w	r2, [r7]
 8003e46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	da05      	bge.n	8003e5a <UG_FillFrame+0x4e>
   {
      n = y2;
 8003e4e:	883b      	ldrh	r3, [r7, #0]
 8003e50:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 8003e52:	88bb      	ldrh	r3, [r7, #4]
 8003e54:	803b      	strh	r3, [r7, #0]
      y1 = n;
 8003e56:	89fb      	ldrh	r3, [r7, #14]
 8003e58:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8003e5a:	4b23      	ldr	r3, [pc, #140]	; (8003ee8 <UG_FillFrame+0xdc>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d012      	beq.n	8003e90 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8003e6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ee8 <UG_FillFrame+0xdc>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e70:	461d      	mov	r5, r3
 8003e72:	f9b7 4000 	ldrsh.w	r4, [r7]
 8003e76:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003e7a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8003e7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8003e82:	8c3b      	ldrh	r3, [r7, #32]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	4623      	mov	r3, r4
 8003e88:	47a8      	blx	r5
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d027      	beq.n	8003ee0 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8003e90:	88bb      	ldrh	r3, [r7, #4]
 8003e92:	81bb      	strh	r3, [r7, #12]
 8003e94:	e01d      	b.n	8003ed2 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8003e96:	88fb      	ldrh	r3, [r7, #6]
 8003e98:	81fb      	strh	r3, [r7, #14]
 8003e9a:	e00e      	b.n	8003eba <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8003e9c:	4b12      	ldr	r3, [pc, #72]	; (8003ee8 <UG_FillFrame+0xdc>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	8c3a      	ldrh	r2, [r7, #32]
 8003ea4:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8003ea8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8003eac:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8003eae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	81fb      	strh	r3, [r7, #14]
 8003eba:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003ebe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	ddea      	ble.n	8003e9c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8003ec6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003eca:	b29b      	uxth	r3, r3
 8003ecc:	3301      	adds	r3, #1
 8003ece:	b29b      	uxth	r3, r3
 8003ed0:	81bb      	strh	r3, [r7, #12]
 8003ed2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003ed6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003eda:	429a      	cmp	r2, r3
 8003edc:	dddb      	ble.n	8003e96 <UG_FillFrame+0x8a>
 8003ede:	e000      	b.n	8003ee2 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8003ee0:	bf00      	nop
      }
   }
}
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bdb0      	pop	{r4, r5, r7, pc}
 8003ee8:	20002814 	.word	0x20002814

08003eec <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8003eec:	b590      	push	{r4, r7, lr}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af02      	add	r7, sp, #8
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	603a      	str	r2, [r7, #0]
 8003ef6:	80fb      	strh	r3, [r7, #6]
 8003ef8:	460b      	mov	r3, r1
 8003efa:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8003efc:	88fb      	ldrh	r3, [r7, #6]
 8003efe:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8003f00:	88bb      	ldrh	r3, [r7, #4]
 8003f02:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8003f04:	e06d      	b.n	8003fe2 <UG_PutString+0xf6>
   {
      chr = *str++;
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	603a      	str	r2, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	4b37      	ldr	r3, [pc, #220]	; (8003ff4 <UG_PutString+0x108>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d361      	bcc.n	8003fe2 <UG_PutString+0xf6>
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	4b34      	ldr	r3, [pc, #208]	; (8003ff4 <UG_PutString+0x108>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d900      	bls.n	8003f2e <UG_PutString+0x42>
 8003f2c:	e059      	b.n	8003fe2 <UG_PutString+0xf6>
      if ( chr == '\n' )
 8003f2e:	7afb      	ldrb	r3, [r7, #11]
 8003f30:	2b0a      	cmp	r3, #10
 8003f32:	d104      	bne.n	8003f3e <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 8003f34:	4b2f      	ldr	r3, [pc, #188]	; (8003ff4 <UG_PutString+0x108>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	889b      	ldrh	r3, [r3, #4]
 8003f3a:	81fb      	strh	r3, [r7, #14]
         continue;
 8003f3c:	e051      	b.n	8003fe2 <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8003f3e:	4b2d      	ldr	r3, [pc, #180]	; (8003ff4 <UG_PutString+0x108>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00a      	beq.n	8003f5e <UG_PutString+0x72>
 8003f48:	4b2a      	ldr	r3, [pc, #168]	; (8003ff4 <UG_PutString+0x108>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f4e:	7afa      	ldrb	r2, [r7, #11]
 8003f50:	4928      	ldr	r1, [pc, #160]	; (8003ff4 <UG_PutString+0x108>)
 8003f52:	6809      	ldr	r1, [r1, #0]
 8003f54:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8003f56:	1a52      	subs	r2, r2, r1
 8003f58:	4413      	add	r3, r2
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	e004      	b.n	8003f68 <UG_PutString+0x7c>
 8003f5e:	4b25      	ldr	r3, [pc, #148]	; (8003ff4 <UG_PutString+0x108>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 8003f6a:	4b22      	ldr	r3, [pc, #136]	; (8003ff4 <UG_PutString+0x108>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003f78:	7abb      	ldrb	r3, [r7, #10]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	4299      	cmp	r1, r3
 8003f7e:	dc11      	bgt.n	8003fa4 <UG_PutString+0xb8>
      {
         xp = x;
 8003f80:	88fb      	ldrh	r3, [r7, #6]
 8003f82:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <UG_PutString+0x108>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	4b19      	ldr	r3, [pc, #100]	; (8003ff4 <UG_PutString+0x108>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	4413      	add	r3, r2
 8003f9a:	b29a      	uxth	r2, r3
 8003f9c:	89bb      	ldrh	r3, [r7, #12]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8003fa4:	4b13      	ldr	r3, [pc, #76]	; (8003ff4 <UG_PutString+0x108>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8003fac:	4b11      	ldr	r3, [pc, #68]	; (8003ff4 <UG_PutString+0x108>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8003fb4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003fb8:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8003fbc:	7af8      	ldrb	r0, [r7, #11]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	f000 f89d 	bl	8004100 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8003fc6:	7abb      	ldrb	r3, [r7, #10]
 8003fc8:	b21a      	sxth	r2, r3
 8003fca:	4b0a      	ldr	r3, [pc, #40]	; (8003ff4 <UG_PutString+0x108>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8003fd2:	b21b      	sxth	r3, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	b21b      	sxth	r3, r3
 8003fd8:	b29a      	uxth	r2, r3
 8003fda:	89fb      	ldrh	r3, [r7, #14]
 8003fdc:	4413      	add	r3, r2
 8003fde:	b29b      	uxth	r3, r3
 8003fe0:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d18d      	bne.n	8003f06 <UG_PutString+0x1a>
   }
}
 8003fea:	bf00      	nop
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd90      	pop	{r4, r7, pc}
 8003ff4:	20002814 	.word	0x20002814

08003ff8 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b089      	sub	sp, #36	; 0x24
 8003ffc:	af02      	add	r7, sp, #8
 8003ffe:	60ba      	str	r2, [r7, #8]
 8004000:	461a      	mov	r2, r3
 8004002:	4603      	mov	r3, r0
 8004004:	81fb      	strh	r3, [r7, #14]
 8004006:	460b      	mov	r3, r1
 8004008:	81bb      	strh	r3, [r7, #12]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 800400e:	89fb      	ldrh	r3, [r7, #14]
 8004010:	82fb      	strh	r3, [r7, #22]
   yp=y;
 8004012:	89bb      	ldrh	r3, [r7, #12]
 8004014:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 8004016:	e067      	b.n	80040e8 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	60ba      	str	r2, [r7, #8]
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8004022:	7cfb      	ldrb	r3, [r7, #19]
 8004024:	b29a      	uxth	r2, r3
 8004026:	4b35      	ldr	r3, [pc, #212]	; (80040fc <UG_PutColorString+0x104>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800402c:	429a      	cmp	r2, r3
 800402e:	d35b      	bcc.n	80040e8 <UG_PutColorString+0xf0>
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	b29a      	uxth	r2, r3
 8004034:	4b31      	ldr	r3, [pc, #196]	; (80040fc <UG_PutColorString+0x104>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800403a:	429a      	cmp	r2, r3
 800403c:	d900      	bls.n	8004040 <UG_PutColorString+0x48>
 800403e:	e053      	b.n	80040e8 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 8004040:	7cfb      	ldrb	r3, [r7, #19]
 8004042:	2b0a      	cmp	r3, #10
 8004044:	d104      	bne.n	8004050 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 8004046:	4b2d      	ldr	r3, [pc, #180]	; (80040fc <UG_PutColorString+0x104>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	889b      	ldrh	r3, [r3, #4]
 800404c:	82fb      	strh	r3, [r7, #22]
         continue;
 800404e:	e04b      	b.n	80040e8 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8004050:	4b2a      	ldr	r3, [pc, #168]	; (80040fc <UG_PutColorString+0x104>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004056:	2b00      	cmp	r3, #0
 8004058:	d00a      	beq.n	8004070 <UG_PutColorString+0x78>
 800405a:	4b28      	ldr	r3, [pc, #160]	; (80040fc <UG_PutColorString+0x104>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004060:	7cfa      	ldrb	r2, [r7, #19]
 8004062:	4926      	ldr	r1, [pc, #152]	; (80040fc <UG_PutColorString+0x104>)
 8004064:	6809      	ldr	r1, [r1, #0]
 8004066:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8004068:	1a52      	subs	r2, r2, r1
 800406a:	4413      	add	r3, r2
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	e004      	b.n	800407a <UG_PutColorString+0x82>
 8004070:	4b22      	ldr	r3, [pc, #136]	; (80040fc <UG_PutColorString+0x104>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8004078:	b2db      	uxtb	r3, r3
 800407a:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 800407c:	4b1f      	ldr	r3, [pc, #124]	; (80040fc <UG_PutColorString+0x104>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004084:	4619      	mov	r1, r3
 8004086:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800408a:	7cbb      	ldrb	r3, [r7, #18]
 800408c:	4413      	add	r3, r2
 800408e:	4299      	cmp	r1, r3
 8004090:	dc11      	bgt.n	80040b6 <UG_PutColorString+0xbe>
      {
         xp = x;
 8004092:	89fb      	ldrh	r3, [r7, #14]
 8004094:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <UG_PutColorString+0x104>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800409e:	b29a      	uxth	r2, r3
 80040a0:	4b16      	ldr	r3, [pc, #88]	; (80040fc <UG_PutColorString+0x104>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	4413      	add	r3, r2
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	8abb      	ldrh	r3, [r7, #20]
 80040b0:	4413      	add	r3, r2
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 80040b6:	88fc      	ldrh	r4, [r7, #6]
 80040b8:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80040bc:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80040c0:	7cf8      	ldrb	r0, [r7, #19]
 80040c2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	4623      	mov	r3, r4
 80040c8:	f000 f81a 	bl	8004100 <UG_PutChar>

      xp += cw + gui->char_h_space;
 80040cc:	7cbb      	ldrb	r3, [r7, #18]
 80040ce:	b21a      	sxth	r2, r3
 80040d0:	4b0a      	ldr	r3, [pc, #40]	; (80040fc <UG_PutColorString+0x104>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 80040d8:	b21b      	sxth	r3, r3
 80040da:	4413      	add	r3, r2
 80040dc:	b21b      	sxth	r3, r3
 80040de:	b29a      	uxth	r2, r3
 80040e0:	8afb      	ldrh	r3, [r7, #22]
 80040e2:	4413      	add	r3, r2
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d193      	bne.n	8004018 <UG_PutColorString+0x20>
   }
}
 80040f0:	bf00      	nop
 80040f2:	bf00      	nop
 80040f4:	371c      	adds	r7, #28
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd90      	pop	{r4, r7, pc}
 80040fa:	bf00      	nop
 80040fc:	20002814 	.word	0x20002814

08004100 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8004100:	b590      	push	{r4, r7, lr}
 8004102:	b085      	sub	sp, #20
 8004104:	af02      	add	r7, sp, #8
 8004106:	4604      	mov	r4, r0
 8004108:	4608      	mov	r0, r1
 800410a:	4611      	mov	r1, r2
 800410c:	461a      	mov	r2, r3
 800410e:	4623      	mov	r3, r4
 8004110:	71fb      	strb	r3, [r7, #7]
 8004112:	4603      	mov	r3, r0
 8004114:	80bb      	strh	r3, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	807b      	strh	r3, [r7, #2]
 800411a:	4613      	mov	r3, r2
 800411c:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 800411e:	4b09      	ldr	r3, [pc, #36]	; (8004144 <UG_PutChar+0x44>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	332c      	adds	r3, #44	; 0x2c
 8004124:	883c      	ldrh	r4, [r7, #0]
 8004126:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800412a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800412e:	79f8      	ldrb	r0, [r7, #7]
 8004130:	9301      	str	r3, [sp, #4]
 8004132:	8b3b      	ldrh	r3, [r7, #24]
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	4623      	mov	r3, r4
 8004138:	f000 f852 	bl	80041e0 <_UG_PutChar>
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bd90      	pop	{r4, r7, pc}
 8004144:	20002814 	.word	0x20002814

08004148 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	4603      	mov	r3, r0
 8004150:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8004152:	4b05      	ldr	r3, [pc, #20]	; (8004168 <UG_SetForecolor+0x20>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	20002814 	.word	0x20002814

0800416c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	4603      	mov	r3, r0
 8004174:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8004176:	4b05      	ldr	r3, [pc, #20]	; (800418c <UG_SetBackcolor+0x20>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	88fa      	ldrh	r2, [r7, #6]
 800417c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	20002814 	.word	0x20002814

08004190 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	4603      	mov	r3, r0
 8004198:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800419a:	4b06      	ldr	r3, [pc, #24]	; (80041b4 <UG_FontSetHSpace+0x24>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	88fa      	ldrh	r2, [r7, #6]
 80041a0:	b252      	sxtb	r2, r2
 80041a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80041a6:	bf00      	nop
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	20002814 	.word	0x20002814

080041b8 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	4603      	mov	r3, r0
 80041c0:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 80041c2:	4b06      	ldr	r3, [pc, #24]	; (80041dc <UG_FontSetVSpace+0x24>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	88fa      	ldrh	r2, [r7, #6]
 80041c8:	b252      	sxtb	r2, r2
 80041ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 80041ce:	bf00      	nop
 80041d0:	370c      	adds	r7, #12
 80041d2:	46bd      	mov	sp, r7
 80041d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d8:	4770      	bx	lr
 80041da:	bf00      	nop
 80041dc:	20002814 	.word	0x20002814

080041e0 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 80041e0:	b5b0      	push	{r4, r5, r7, lr}
 80041e2:	b08a      	sub	sp, #40	; 0x28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	4611      	mov	r1, r2
 80041ec:	461a      	mov	r2, r3
 80041ee:	4623      	mov	r3, r4
 80041f0:	71fb      	strb	r3, [r7, #7]
 80041f2:	4603      	mov	r3, r0
 80041f4:	80bb      	strh	r3, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	807b      	strh	r3, [r7, #2]
 80041fa:	4613      	mov	r3, r2
 80041fc:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 80041fe:	79fb      	ldrb	r3, [r7, #7]
 8004200:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8004202:	7e3b      	ldrb	r3, [r7, #24]
 8004204:	2bfc      	cmp	r3, #252	; 0xfc
 8004206:	dc77      	bgt.n	80042f8 <_UG_PutChar+0x118>
 8004208:	2bd6      	cmp	r3, #214	; 0xd6
 800420a:	da08      	bge.n	800421e <_UG_PutChar+0x3e>
 800420c:	2bc4      	cmp	r3, #196	; 0xc4
 800420e:	d06a      	beq.n	80042e6 <_UG_PutChar+0x106>
 8004210:	2bc4      	cmp	r3, #196	; 0xc4
 8004212:	dc71      	bgt.n	80042f8 <_UG_PutChar+0x118>
 8004214:	2bb0      	cmp	r3, #176	; 0xb0
 8004216:	d06c      	beq.n	80042f2 <_UG_PutChar+0x112>
 8004218:	2bb5      	cmp	r3, #181	; 0xb5
 800421a:	d067      	beq.n	80042ec <_UG_PutChar+0x10c>
 800421c:	e06c      	b.n	80042f8 <_UG_PutChar+0x118>
 800421e:	3bd6      	subs	r3, #214	; 0xd6
 8004220:	2b26      	cmp	r3, #38	; 0x26
 8004222:	d869      	bhi.n	80042f8 <_UG_PutChar+0x118>
 8004224:	a201      	add	r2, pc, #4	; (adr r2, 800422c <_UG_PutChar+0x4c>)
 8004226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800422a:	bf00      	nop
 800422c:	080042cf 	.word	0x080042cf
 8004230:	080042f9 	.word	0x080042f9
 8004234:	080042f9 	.word	0x080042f9
 8004238:	080042f9 	.word	0x080042f9
 800423c:	080042f9 	.word	0x080042f9
 8004240:	080042f9 	.word	0x080042f9
 8004244:	080042db 	.word	0x080042db
 8004248:	080042f9 	.word	0x080042f9
 800424c:	080042f9 	.word	0x080042f9
 8004250:	080042f9 	.word	0x080042f9
 8004254:	080042f9 	.word	0x080042f9
 8004258:	080042f9 	.word	0x080042f9
 800425c:	080042f9 	.word	0x080042f9
 8004260:	080042f9 	.word	0x080042f9
 8004264:	080042e1 	.word	0x080042e1
 8004268:	080042f9 	.word	0x080042f9
 800426c:	080042f9 	.word	0x080042f9
 8004270:	080042f9 	.word	0x080042f9
 8004274:	080042f9 	.word	0x080042f9
 8004278:	080042f9 	.word	0x080042f9
 800427c:	080042f9 	.word	0x080042f9
 8004280:	080042f9 	.word	0x080042f9
 8004284:	080042f9 	.word	0x080042f9
 8004288:	080042f9 	.word	0x080042f9
 800428c:	080042f9 	.word	0x080042f9
 8004290:	080042f9 	.word	0x080042f9
 8004294:	080042f9 	.word	0x080042f9
 8004298:	080042f9 	.word	0x080042f9
 800429c:	080042f9 	.word	0x080042f9
 80042a0:	080042f9 	.word	0x080042f9
 80042a4:	080042f9 	.word	0x080042f9
 80042a8:	080042f9 	.word	0x080042f9
 80042ac:	080042c9 	.word	0x080042c9
 80042b0:	080042f9 	.word	0x080042f9
 80042b4:	080042f9 	.word	0x080042f9
 80042b8:	080042f9 	.word	0x080042f9
 80042bc:	080042f9 	.word	0x080042f9
 80042c0:	080042f9 	.word	0x080042f9
 80042c4:	080042d5 	.word	0x080042d5
   {
      case 0xF6: bt = 0x94; break; // ö
 80042c8:	2394      	movs	r3, #148	; 0x94
 80042ca:	763b      	strb	r3, [r7, #24]
 80042cc:	e014      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 80042ce:	2399      	movs	r3, #153	; 0x99
 80042d0:	763b      	strb	r3, [r7, #24]
 80042d2:	e011      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 80042d4:	2381      	movs	r3, #129	; 0x81
 80042d6:	763b      	strb	r3, [r7, #24]
 80042d8:	e00e      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 80042da:	239a      	movs	r3, #154	; 0x9a
 80042dc:	763b      	strb	r3, [r7, #24]
 80042de:	e00b      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 80042e0:	2384      	movs	r3, #132	; 0x84
 80042e2:	763b      	strb	r3, [r7, #24]
 80042e4:	e008      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 80042e6:	238e      	movs	r3, #142	; 0x8e
 80042e8:	763b      	strb	r3, [r7, #24]
 80042ea:	e005      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 80042ec:	23e6      	movs	r3, #230	; 0xe6
 80042ee:	763b      	strb	r3, [r7, #24]
 80042f0:	e002      	b.n	80042f8 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 80042f2:	23f8      	movs	r3, #248	; 0xf8
 80042f4:	763b      	strb	r3, [r7, #24]
 80042f6:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 80042f8:	7e3b      	ldrb	r3, [r7, #24]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042fe:	895b      	ldrh	r3, [r3, #10]
 8004300:	429a      	cmp	r2, r3
 8004302:	f0c0 81fc 	bcc.w	80046fe <_UG_PutChar+0x51e>
 8004306:	7e3b      	ldrb	r3, [r7, #24]
 8004308:	b29a      	uxth	r2, r3
 800430a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430c:	899b      	ldrh	r3, [r3, #12]
 800430e:	429a      	cmp	r2, r3
 8004310:	f200 81f5 	bhi.w	80046fe <_UG_PutChar+0x51e>

   yo = y;
 8004314:	887b      	ldrh	r3, [r7, #2]
 8004316:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8004318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800431e:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8004320:	8b7b      	ldrh	r3, [r7, #26]
 8004322:	2b00      	cmp	r3, #0
 8004324:	f000 81ed 	beq.w	8004702 <_UG_PutChar+0x522>
   bn >>= 3;
 8004328:	8b7b      	ldrh	r3, [r7, #26]
 800432a:	08db      	lsrs	r3, r3, #3
 800432c:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 800432e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004330:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004334:	b29b      	uxth	r3, r3
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	b29b      	uxth	r3, r3
 800433c:	2b00      	cmp	r3, #0
 800433e:	d002      	beq.n	8004346 <_UG_PutChar+0x166>
 8004340:	8b7b      	ldrh	r3, [r7, #26]
 8004342:	3301      	adds	r3, #1
 8004344:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8004346:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d009      	beq.n	8004362 <_UG_PutChar+0x182>
 800434e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004350:	691b      	ldr	r3, [r3, #16]
 8004352:	7e3a      	ldrb	r2, [r7, #24]
 8004354:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004356:	8949      	ldrh	r1, [r1, #10]
 8004358:	1a52      	subs	r2, r2, r1
 800435a:	4413      	add	r3, r2
 800435c:	781b      	ldrb	r3, [r3, #0]
 800435e:	b29b      	uxth	r3, r3
 8004360:	e003      	b.n	800436a <_UG_PutChar+0x18a>
 8004362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004364:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004368:	b29b      	uxth	r3, r3
 800436a:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 800436c:	4b93      	ldr	r3, [pc, #588]	; (80045bc <_UG_PutChar+0x3dc>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 80d8 	beq.w	800452e <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 800437e:	4b8f      	ldr	r3, [pc, #572]	; (80045bc <_UG_PutChar+0x3dc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004384:	461d      	mov	r5, r3
 8004386:	88ba      	ldrh	r2, [r7, #4]
 8004388:	8a7b      	ldrh	r3, [r7, #18]
 800438a:	4413      	add	r3, r2
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29b      	uxth	r3, r3
 8004392:	b21c      	sxth	r4, r3
 8004394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004396:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800439a:	b29a      	uxth	r2, r3
 800439c:	887b      	ldrh	r3, [r7, #2]
 800439e:	4413      	add	r3, r2
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	b21b      	sxth	r3, r3
 80043a8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80043ac:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80043b0:	4622      	mov	r2, r4
 80043b2:	47a8      	blx	r5
 80043b4:	4603      	mov	r3, r0
 80043b6:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 80043b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d14d      	bne.n	800445c <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 80043c0:	7e3b      	ldrb	r3, [r7, #24]
 80043c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043c4:	8952      	ldrh	r2, [r2, #10]
 80043c6:	1a9b      	subs	r3, r3, r2
 80043c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80043ca:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80043ce:	fb02 f303 	mul.w	r3, r2, r3
 80043d2:	8b7a      	ldrh	r2, [r7, #26]
 80043d4:	fb02 f303 	mul.w	r3, r2, r3
 80043d8:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 80043da:	2300      	movs	r3, #0
 80043dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80043de:	e036      	b.n	800444e <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 80043e0:	8a7b      	ldrh	r3, [r7, #18]
 80043e2:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 80043e4:	2300      	movs	r3, #0
 80043e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80043e8:	e02a      	b.n	8004440 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 80043ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	1c59      	adds	r1, r3, #1
 80043f2:	6179      	str	r1, [r7, #20]
 80043f4:	4413      	add	r3, r2
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 80043fa:	2300      	movs	r3, #0
 80043fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80043fe:	e016      	b.n	800442e <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8004400:	7e7b      	ldrb	r3, [r7, #25]
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	d004      	beq.n	8004414 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 800440a:	883a      	ldrh	r2, [r7, #0]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	4610      	mov	r0, r2
 8004410:	4798      	blx	r3
 8004412:	e003      	b.n	800441c <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8004414:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4610      	mov	r0, r2
 800441a:	4798      	blx	r3
				   }
				   b >>= 1;
 800441c:	7e7b      	ldrb	r3, [r7, #25]
 800441e:	085b      	lsrs	r3, r3, #1
 8004420:	767b      	strb	r3, [r7, #25]
				   c--;
 8004422:	8bbb      	ldrh	r3, [r7, #28]
 8004424:	3b01      	subs	r3, #1
 8004426:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8004428:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800442a:	3301      	adds	r3, #1
 800442c:	847b      	strh	r3, [r7, #34]	; 0x22
 800442e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004430:	2b07      	cmp	r3, #7
 8004432:	d802      	bhi.n	800443a <_UG_PutChar+0x25a>
 8004434:	8bbb      	ldrh	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e2      	bne.n	8004400 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 800443a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800443c:	3301      	adds	r3, #1
 800443e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004440:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004442:	8b7b      	ldrh	r3, [r7, #26]
 8004444:	429a      	cmp	r2, r3
 8004446:	d3d0      	bcc.n	80043ea <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8004448:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800444a:	3301      	adds	r3, #1
 800444c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800444e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004450:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004452:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004456:	4293      	cmp	r3, r2
 8004458:	dbc2      	blt.n	80043e0 <_UG_PutChar+0x200>
 800445a:	e153      	b.n	8004704 <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 800445c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445e:	791b      	ldrb	r3, [r3, #4]
 8004460:	2b01      	cmp	r3, #1
 8004462:	f040 814f 	bne.w	8004704 <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8004466:	7e3b      	ldrb	r3, [r7, #24]
 8004468:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800446a:	8952      	ldrh	r2, [r2, #10]
 800446c:	1a9b      	subs	r3, r3, r2
 800446e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004470:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004474:	fb02 f303 	mul.w	r3, r2, r3
 8004478:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800447a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800447e:	fb02 f303 	mul.w	r3, r2, r3
 8004482:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8004484:	2300      	movs	r3, #0
 8004486:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004488:	e04a      	b.n	8004520 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 800448a:	2300      	movs	r3, #0
 800448c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800448e:	e036      	b.n	80044fe <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8004490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	6179      	str	r1, [r7, #20]
 800449a:	4413      	add	r3, r2
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 80044a0:	883b      	ldrh	r3, [r7, #0]
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	7e7a      	ldrb	r2, [r7, #25]
 80044a6:	fb03 f202 	mul.w	r2, r3, r2
 80044aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	7e79      	ldrb	r1, [r7, #25]
 80044b0:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	121b      	asrs	r3, r3, #8
 80044bc:	b21b      	sxth	r3, r3
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	b21a      	sxth	r2, r3
 80044c2:	883b      	ldrh	r3, [r7, #0]
 80044c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044c8:	7e79      	ldrb	r1, [r7, #25]
 80044ca:	fb03 f101 	mul.w	r1, r3, r1
 80044ce:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80044d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80044d4:	7e78      	ldrb	r0, [r7, #25]
 80044d6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 80044da:	fb00 f303 	mul.w	r3, r0, r3
 80044de:	440b      	add	r3, r1
 80044e0:	121b      	asrs	r3, r3, #8
 80044e2:	b21b      	sxth	r3, r3
 80044e4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044e8:	b21b      	sxth	r3, r3
 80044ea:	4313      	orrs	r3, r2
 80044ec:	b21b      	sxth	r3, r3
 80044ee:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 80044f0:	8a3a      	ldrh	r2, [r7, #16]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	4610      	mov	r0, r2
 80044f6:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 80044f8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044fa:	3301      	adds	r3, #1
 80044fc:	84fb      	strh	r3, [r7, #38]	; 0x26
 80044fe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004500:	8a7b      	ldrh	r3, [r7, #18]
 8004502:	429a      	cmp	r2, r3
 8004504:	d3c4      	bcc.n	8004490 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 8004506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004508:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800450c:	461a      	mov	r2, r3
 800450e:	8a7b      	ldrh	r3, [r7, #18]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	461a      	mov	r2, r3
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 800451a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800451c:	3301      	adds	r3, #1
 800451e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004520:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004522:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004524:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004528:	4293      	cmp	r3, r2
 800452a:	dbae      	blt.n	800448a <_UG_PutChar+0x2aa>
 800452c:	e0ea      	b.n	8004704 <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 800452e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004530:	791b      	ldrb	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d16e      	bne.n	8004614 <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 8004536:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 800453a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800453e:	8a7b      	ldrh	r3, [r7, #18]
 8004540:	4413      	add	r3, r2
 8004542:	3b01      	subs	r3, #1
 8004544:	461c      	mov	r4, r3
 8004546:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800454a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800454e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004550:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004554:	4413      	add	r3, r2
 8004556:	3b01      	subs	r3, #1
 8004558:	460a      	mov	r2, r1
 800455a:	4621      	mov	r1, r4
 800455c:	f000 f99c 	bl	8004898 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8004560:	f000 fa14 	bl	800498c <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8004564:	7e3b      	ldrb	r3, [r7, #24]
 8004566:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004568:	8952      	ldrh	r2, [r2, #10]
 800456a:	1a9b      	subs	r3, r3, r2
 800456c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800456e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	8b7a      	ldrh	r2, [r7, #26]
 8004578:	fb02 f303 	mul.w	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 800457e:	2300      	movs	r3, #0
 8004580:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004582:	e040      	b.n	8004606 <_UG_PutChar+0x426>
         {
           xo = x;
 8004584:	88bb      	ldrh	r3, [r7, #4]
 8004586:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8004588:	8a7b      	ldrh	r3, [r7, #18]
 800458a:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 800458c:	2300      	movs	r3, #0
 800458e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004590:	e02f      	b.n	80045f2 <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 8004592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004594:	681a      	ldr	r2, [r3, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1c59      	adds	r1, r3, #1
 800459a:	6179      	str	r1, [r7, #20]
 800459c:	4413      	add	r3, r2
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 80045a2:	2300      	movs	r3, #0
 80045a4:	847b      	strh	r3, [r7, #34]	; 0x22
 80045a6:	e01b      	b.n	80045e0 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 80045a8:	7e7b      	ldrb	r3, [r7, #25]
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d006      	beq.n	80045c0 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 80045b2:	883b      	ldrh	r3, [r7, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f000 f9f0 	bl	800499a <SSD1963_ConsecutivePSet>
 80045ba:	e005      	b.n	80045c8 <_UG_PutChar+0x3e8>
 80045bc:	20002814 	.word	0x20002814
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 80045c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 f9e9 	bl	800499a <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 80045c8:	7e7b      	ldrb	r3, [r7, #25]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	767b      	strb	r3, [r7, #25]
               xo++;
 80045ce:	8c3b      	ldrh	r3, [r7, #32]
 80045d0:	3301      	adds	r3, #1
 80045d2:	843b      	strh	r3, [r7, #32]
               c--;
 80045d4:	8bbb      	ldrh	r3, [r7, #28]
 80045d6:	3b01      	subs	r3, #1
 80045d8:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 80045da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045dc:	3301      	adds	r3, #1
 80045de:	847b      	strh	r3, [r7, #34]	; 0x22
 80045e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045e2:	2b07      	cmp	r3, #7
 80045e4:	d802      	bhi.n	80045ec <_UG_PutChar+0x40c>
 80045e6:	8bbb      	ldrh	r3, [r7, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d1dd      	bne.n	80045a8 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 80045ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045ee:	3301      	adds	r3, #1
 80045f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80045f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80045f4:	8b7b      	ldrh	r3, [r7, #26]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d3cb      	bcc.n	8004592 <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 80045fa:	8bfb      	ldrh	r3, [r7, #30]
 80045fc:	3301      	adds	r3, #1
 80045fe:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8004600:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004602:	3301      	adds	r3, #1
 8004604:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004608:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800460a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800460e:	4293      	cmp	r3, r2
 8004610:	dbb8      	blt.n	8004584 <_UG_PutChar+0x3a4>
 8004612:	e077      	b.n	8004704 <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8004614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004616:	791b      	ldrb	r3, [r3, #4]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d173      	bne.n	8004704 <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 800461c:	7e3b      	ldrb	r3, [r7, #24]
 800461e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004620:	8952      	ldrh	r2, [r2, #10]
 8004622:	1a9b      	subs	r3, r3, r2
 8004624:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004626:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004630:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8004634:	fb02 f303 	mul.w	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 800463a:	2300      	movs	r3, #0
 800463c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800463e:	e057      	b.n	80046f0 <_UG_PutChar+0x510>
         {
            xo = x;
 8004640:	88bb      	ldrh	r3, [r7, #4]
 8004642:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8004644:	2300      	movs	r3, #0
 8004646:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004648:	e03e      	b.n	80046c8 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 800464a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	1c59      	adds	r1, r3, #1
 8004652:	6179      	str	r1, [r7, #20]
 8004654:	4413      	add	r3, r2
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 800465a:	883b      	ldrh	r3, [r7, #0]
 800465c:	b2db      	uxtb	r3, r3
 800465e:	7e7a      	ldrb	r2, [r7, #25]
 8004660:	fb03 f202 	mul.w	r2, r3, r2
 8004664:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004666:	b2db      	uxtb	r3, r3
 8004668:	7e79      	ldrb	r1, [r7, #25]
 800466a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	121b      	asrs	r3, r3, #8
 8004676:	b21b      	sxth	r3, r3
 8004678:	b2db      	uxtb	r3, r3
 800467a:	b21a      	sxth	r2, r3
 800467c:	883b      	ldrh	r3, [r7, #0]
 800467e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004682:	7e79      	ldrb	r1, [r7, #25]
 8004684:	fb03 f101 	mul.w	r1, r3, r1
 8004688:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800468a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800468e:	7e78      	ldrb	r0, [r7, #25]
 8004690:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004694:	fb00 f303 	mul.w	r3, r0, r3
 8004698:	440b      	add	r3, r1
 800469a:	121b      	asrs	r3, r3, #8
 800469c:	b21b      	sxth	r3, r3
 800469e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046a2:	b21b      	sxth	r3, r3
 80046a4:	4313      	orrs	r3, r2
 80046a6:	b21b      	sxth	r3, r3
 80046a8:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 80046aa:	4b18      	ldr	r3, [pc, #96]	; (800470c <_UG_PutChar+0x52c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 80046b4:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 80046b8:	8a3a      	ldrh	r2, [r7, #16]
 80046ba:	4798      	blx	r3
               xo++;
 80046bc:	8c3b      	ldrh	r3, [r7, #32]
 80046be:	3301      	adds	r3, #1
 80046c0:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 80046c2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046c4:	3301      	adds	r3, #1
 80046c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046c8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80046ca:	8a7b      	ldrh	r3, [r7, #18]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d3bc      	bcc.n	800464a <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 80046d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046d2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80046d6:	461a      	mov	r2, r3
 80046d8:	8a7b      	ldrh	r3, [r7, #18]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	461a      	mov	r2, r3
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	4413      	add	r3, r2
 80046e2:	617b      	str	r3, [r7, #20]
            yo++;
 80046e4:	8bfb      	ldrh	r3, [r7, #30]
 80046e6:	3301      	adds	r3, #1
 80046e8:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 80046ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046ec:	3301      	adds	r3, #1
 80046ee:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046f2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046f4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80046f8:	4293      	cmp	r3, r2
 80046fa:	dba1      	blt.n	8004640 <_UG_PutChar+0x460>
 80046fc:	e002      	b.n	8004704 <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 80046fe:	bf00      	nop
 8004700:	e000      	b.n	8004704 <_UG_PutChar+0x524>
   if ( !bn ) return;
 8004702:	bf00      	nop
         }
      }
   }
}
 8004704:	3728      	adds	r7, #40	; 0x28
 8004706:	46bd      	mov	sp, r7
 8004708:	bdb0      	pop	{r4, r5, r7, pc}
 800470a:	bf00      	nop
 800470c:	20002814 	.word	0x20002814

08004710 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
 8004716:	4603      	mov	r3, r0
 8004718:	6039      	str	r1, [r7, #0]
 800471a:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	2b06      	cmp	r3, #6
 8004720:	d810      	bhi.n	8004744 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <UG_DriverRegister+0x40>)
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	79fb      	ldrb	r3, [r7, #7]
 8004728:	3309      	adds	r3, #9
 800472a:	00db      	lsls	r3, r3, #3
 800472c:	4413      	add	r3, r2
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8004732:	4b07      	ldr	r3, [pc, #28]	; (8004750 <UG_DriverRegister+0x40>)
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	3309      	adds	r3, #9
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	2203      	movs	r2, #3
 8004740:	721a      	strb	r2, [r3, #8]
 8004742:	e000      	b.n	8004746 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8004744:	bf00      	nop
}
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	20002814 	.word	0x20002814

08004754 <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 8004758:	2001      	movs	r0, #1
 800475a:	f000 fa3e 	bl	8004bda <write_command>
    HAL_Delay(10);
 800475e:	200a      	movs	r0, #10
 8004760:	f000 fb24 	bl	8004dac <HAL_Delay>
}
 8004764:	bf00      	nop
 8004766:	bd80      	pop	{r7, pc}

08004768 <SSD1963_Init>:

void SSD1963_Init()
{
 8004768:	b580      	push	{r7, lr}
 800476a:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 800476c:	f7ff fff2 	bl	8004754 <SSD1963_Reset>

    write_command(0xe0);
 8004770:	20e0      	movs	r0, #224	; 0xe0
 8004772:	f000 fa32 	bl	8004bda <write_command>
    write_data(0x01);            //Enable PLL
 8004776:	2001      	movs	r0, #1
 8004778:	f000 fa4a 	bl	8004c10 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 800477c:	20e0      	movs	r0, #224	; 0xe0
 800477e:	f000 fa2c 	bl	8004bda <write_command>
    write_data(0x03);            //Lock PLL
 8004782:	2003      	movs	r0, #3
 8004784:	f000 fa44 	bl	8004c10 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8004788:	f7ff ffe4 	bl	8004754 <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 800478c:	20b0      	movs	r0, #176	; 0xb0
 800478e:	f000 fa24 	bl	8004bda <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8004792:	2008      	movs	r0, #8
 8004794:	f000 fa3c 	bl	8004c10 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8004798:	2080      	movs	r0, #128	; 0x80
 800479a:	f000 fa39 	bl	8004c10 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 800479e:	2001      	movs	r0, #1
 80047a0:	f000 fa36 	bl	8004c10 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 80047a4:	20df      	movs	r0, #223	; 0xdf
 80047a6:	f000 fa33 	bl	8004c10 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 80047aa:	2001      	movs	r0, #1
 80047ac:	f000 fa30 	bl	8004c10 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 80047b0:	200f      	movs	r0, #15
 80047b2:	f000 fa2d 	bl	8004c10 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 80047b6:	2000      	movs	r0, #0
 80047b8:	f000 fa2a 	bl	8004c10 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 80047bc:	20f0      	movs	r0, #240	; 0xf0
 80047be:	f000 fa0c 	bl	8004bda <write_command>
    write_data(0x03);
 80047c2:	2003      	movs	r0, #3
 80047c4:	f000 fa24 	bl	8004c10 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 80047c8:	20e6      	movs	r0, #230	; 0xe6
 80047ca:	f000 fa06 	bl	8004bda <write_command>
    write_data(0x01);    //02
 80047ce:	2001      	movs	r0, #1
 80047d0:	f000 fa1e 	bl	8004c10 <write_data>
    write_data(0x45);    //ff
 80047d4:	2045      	movs	r0, #69	; 0x45
 80047d6:	f000 fa1b 	bl	8004c10 <write_data>
    write_data(0x47);    //ff
 80047da:	2047      	movs	r0, #71	; 0x47
 80047dc:	f000 fa18 	bl	8004c10 <write_data>

    write_command(0xb4); //set HBP
 80047e0:	20b4      	movs	r0, #180	; 0xb4
 80047e2:	f000 f9fa 	bl	8004bda <write_command>
    write_data(0x02); //set Hsync = 600
 80047e6:	2002      	movs	r0, #2
 80047e8:	f000 fa12 	bl	8004c10 <write_data>
    write_data(0x0d);
 80047ec:	200d      	movs	r0, #13
 80047ee:	f000 fa0f 	bl	8004c10 <write_data>
    write_data(0x00);    //set HBP 68
 80047f2:	2000      	movs	r0, #0
 80047f4:	f000 fa0c 	bl	8004c10 <write_data>
    write_data(0x2b);
 80047f8:	202b      	movs	r0, #43	; 0x2b
 80047fa:	f000 fa09 	bl	8004c10 <write_data>
    write_data(0x28);    //set VBP 16
 80047fe:	2028      	movs	r0, #40	; 0x28
 8004800:	f000 fa06 	bl	8004c10 <write_data>
    write_data(0x00);    //Set Hsync start position
 8004804:	2000      	movs	r0, #0
 8004806:	f000 fa03 	bl	8004c10 <write_data>
    write_data(0x00);
 800480a:	2000      	movs	r0, #0
 800480c:	f000 fa00 	bl	8004c10 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8004810:	2000      	movs	r0, #0
 8004812:	f000 f9fd 	bl	8004c10 <write_data>

    write_command(0xb6); //set VBP
 8004816:	20b6      	movs	r0, #182	; 0xb6
 8004818:	f000 f9df 	bl	8004bda <write_command>
    write_data(0x01);    //set Vsync total 360
 800481c:	2001      	movs	r0, #1
 800481e:	f000 f9f7 	bl	8004c10 <write_data>
    write_data(0x1d);
 8004822:	201d      	movs	r0, #29
 8004824:	f000 f9f4 	bl	8004c10 <write_data>
    write_data(0x00);    //set VBP = 19
 8004828:	2000      	movs	r0, #0
 800482a:	f000 f9f1 	bl	8004c10 <write_data>
    write_data(0x0c);
 800482e:	200c      	movs	r0, #12
 8004830:	f000 f9ee 	bl	8004c10 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 8004834:	2009      	movs	r0, #9
 8004836:	f000 f9eb 	bl	8004c10 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 800483a:	2000      	movs	r0, #0
 800483c:	f000 f9e8 	bl	8004c10 <write_data>
    write_data(0x00);
 8004840:	2000      	movs	r0, #0
 8004842:	f000 f9e5 	bl	8004c10 <write_data>

    write_command(0x2a); //set column address
 8004846:	202a      	movs	r0, #42	; 0x2a
 8004848:	f000 f9c7 	bl	8004bda <write_command>
    write_data(0x00);    //set start column address 0
 800484c:	2000      	movs	r0, #0
 800484e:	f000 f9df 	bl	8004c10 <write_data>
    write_data(0x00);
 8004852:	2000      	movs	r0, #0
 8004854:	f000 f9dc 	bl	8004c10 <write_data>
    write_data(0x01);    //set end column address = 479
 8004858:	2001      	movs	r0, #1
 800485a:	f000 f9d9 	bl	8004c10 <write_data>
    write_data(0xdf);
 800485e:	20df      	movs	r0, #223	; 0xdf
 8004860:	f000 f9d6 	bl	8004c10 <write_data>

    write_command(0x2b); //set page address
 8004864:	202b      	movs	r0, #43	; 0x2b
 8004866:	f000 f9b8 	bl	8004bda <write_command>
    write_data(0x00);    //set start page address = 0
 800486a:	2000      	movs	r0, #0
 800486c:	f000 f9d0 	bl	8004c10 <write_data>
    write_data(0x00);
 8004870:	2000      	movs	r0, #0
 8004872:	f000 f9cd 	bl	8004c10 <write_data>
    write_data(0x01);    //set end column address = 479
 8004876:	2001      	movs	r0, #1
 8004878:	f000 f9ca 	bl	8004c10 <write_data>
    write_data(0x0f);
 800487c:	200f      	movs	r0, #15
 800487e:	f000 f9c7 	bl	8004c10 <write_data>

    write_command(0x13); //set normal mode
 8004882:	2013      	movs	r0, #19
 8004884:	f000 f9a9 	bl	8004bda <write_command>
    write_command(0x38); //set normal mode
 8004888:	2038      	movs	r0, #56	; 0x38
 800488a:	f000 f9a6 	bl	8004bda <write_command>
    write_command(0x29); //set display on
 800488e:	2029      	movs	r0, #41	; 0x29
 8004890:	f000 f9a3 	bl	8004bda <write_command>
}
 8004894:	bf00      	nop
 8004896:	bd80      	pop	{r7, pc}

08004898 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	0a1b      	lsrs	r3, r3, #8
 80048aa:	b29b      	uxth	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	b29b      	uxth	r3, r3
 80048b0:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	0a1b      	lsrs	r3, r3, #8
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 80048d2:	202a      	movs	r0, #42	; 0x2a
 80048d4:	f000 f981 	bl	8004bda <write_command>
    write_multi_data(data, 4);
 80048d8:	f107 0310 	add.w	r3, r7, #16
 80048dc:	2104      	movs	r1, #4
 80048de:	4618      	mov	r0, r3
 80048e0:	f000 f9b0 	bl	8004c44 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	0a1b      	lsrs	r3, r3, #8
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	b2db      	uxtb	r3, r3
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	b29b      	uxth	r3, r3
 8004900:	b2db      	uxtb	r3, r3
 8004902:	b29b      	uxth	r3, r3
 8004904:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b29b      	uxth	r3, r3
 800490a:	b2db      	uxtb	r3, r3
 800490c:	b29b      	uxth	r3, r3
 800490e:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8004910:	202b      	movs	r0, #43	; 0x2b
 8004912:	f000 f962 	bl	8004bda <write_command>
    write_multi_data(data, 4);
 8004916:	f107 0310 	add.w	r3, r7, #16
 800491a:	2104      	movs	r1, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f991 	bl	8004c44 <write_multi_data>
}
 8004922:	bf00      	nop
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b082      	sub	sp, #8
 800492e:	af00      	add	r7, sp, #0
 8004930:	4603      	mov	r3, r0
 8004932:	80fb      	strh	r3, [r7, #6]
 8004934:	460b      	mov	r3, r1
 8004936:	80bb      	strh	r3, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 800493c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004940:	2b00      	cmp	r3, #0
 8004942:	db1f      	blt.n	8004984 <SSD1963_PSet+0x5a>
 8004944:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004948:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800494c:	da1a      	bge.n	8004984 <SSD1963_PSet+0x5a>
 800494e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	db16      	blt.n	8004984 <SSD1963_PSet+0x5a>
 8004956:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800495a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800495e:	da11      	bge.n	8004984 <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8004960:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004968:	3301      	adds	r3, #1
 800496a:	4619      	mov	r1, r3
 800496c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004970:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004974:	3301      	adds	r3, #1
 8004976:	f7ff ff8f 	bl	8004898 <SSD1963_WindowSet>
    write_data(c);
 800497a:	887b      	ldrh	r3, [r7, #2]
 800497c:	4618      	mov	r0, r3
 800497e:	f000 f947 	bl	8004c10 <write_data>
 8004982:	e000      	b.n	8004986 <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8004984:	bf00      	nop
}
 8004986:	3708      	adds	r7, #8
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8004990:	202c      	movs	r0, #44	; 0x2c
 8004992:	f000 f922 	bl	8004bda <write_command>
}
 8004996:	bf00      	nop
 8004998:	bd80      	pop	{r7, pc}

0800499a <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b082      	sub	sp, #8
 800499e:	af00      	add	r7, sp, #0
 80049a0:	4603      	mov	r3, r0
 80049a2:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 80049a4:	88fb      	ldrh	r3, [r7, #6]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f000 f932 	bl	8004c10 <write_data>
}
 80049ac:	bf00      	nop
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 80049b4:	b590      	push	{r4, r7, lr}
 80049b6:	b085      	sub	sp, #20
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4604      	mov	r4, r0
 80049bc:	4608      	mov	r0, r1
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	4623      	mov	r3, r4
 80049c4:	80fb      	strh	r3, [r7, #6]
 80049c6:	4603      	mov	r3, r0
 80049c8:	80bb      	strh	r3, [r7, #4]
 80049ca:	460b      	mov	r3, r1
 80049cc:	807b      	strh	r3, [r7, #2]
 80049ce:	4613      	mov	r3, r2
 80049d0:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80049d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	db0d      	blt.n	80049f6 <HW_FillFrame+0x42>
 80049da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049de:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80049e2:	da08      	bge.n	80049f6 <HW_FillFrame+0x42>
 80049e4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	db04      	blt.n	80049f6 <HW_FillFrame+0x42>
 80049ec:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049f0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80049f4:	db02      	blt.n	80049fc <HW_FillFrame+0x48>
 80049f6:	f04f 33ff 	mov.w	r3, #4294967295
 80049fa:	e03c      	b.n	8004a76 <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80049fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	db0d      	blt.n	8004a20 <HW_FillFrame+0x6c>
 8004a04:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004a08:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004a0c:	da08      	bge.n	8004a20 <HW_FillFrame+0x6c>
 8004a0e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	db04      	blt.n	8004a20 <HW_FillFrame+0x6c>
 8004a16:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a1a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004a1e:	db02      	blt.n	8004a26 <HW_FillFrame+0x72>
 8004a20:	f04f 33ff 	mov.w	r3, #4294967295
 8004a24:	e027      	b.n	8004a76 <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004a26:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004a2a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004a2e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004a32:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004a36:	f7ff ff2f 	bl	8004898 <SSD1963_WindowSet>

    write_command(0x2c);
 8004a3a:	202c      	movs	r0, #44	; 0x2c
 8004a3c:	f000 f8cd 	bl	8004bda <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8004a40:	88fb      	ldrh	r3, [r7, #6]
 8004a42:	81fb      	strh	r3, [r7, #14]
 8004a44:	e011      	b.n	8004a6a <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8004a46:	88bb      	ldrh	r3, [r7, #4]
 8004a48:	81bb      	strh	r3, [r7, #12]
 8004a4a:	e006      	b.n	8004a5a <HW_FillFrame+0xa6>
        {
            write_data(c);
 8004a4c:	8c3b      	ldrh	r3, [r7, #32]
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 f8de 	bl	8004c10 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8004a54:	89bb      	ldrh	r3, [r7, #12]
 8004a56:	3301      	adds	r3, #1
 8004a58:	81bb      	strh	r3, [r7, #12]
 8004a5a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004a5e:	89bb      	ldrh	r3, [r7, #12]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	daf3      	bge.n	8004a4c <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8004a64:	89fb      	ldrh	r3, [r7, #14]
 8004a66:	3301      	adds	r3, #1
 8004a68:	81fb      	strh	r3, [r7, #14]
 8004a6a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004a6e:	89fb      	ldrh	r3, [r7, #14]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	dae8      	bge.n	8004a46 <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3714      	adds	r7, #20
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd90      	pop	{r4, r7, pc}

08004a7e <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8004a7e:	b590      	push	{r4, r7, lr}
 8004a80:	b085      	sub	sp, #20
 8004a82:	af02      	add	r7, sp, #8
 8004a84:	4604      	mov	r4, r0
 8004a86:	4608      	mov	r0, r1
 8004a88:	4611      	mov	r1, r2
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	4623      	mov	r3, r4
 8004a8e:	80fb      	strh	r3, [r7, #6]
 8004a90:	4603      	mov	r3, r0
 8004a92:	80bb      	strh	r3, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	807b      	strh	r3, [r7, #2]
 8004a98:	4613      	mov	r3, r2
 8004a9a:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004a9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	db0d      	blt.n	8004ac0 <HW_DrawLine+0x42>
 8004aa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004aa8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004aac:	da08      	bge.n	8004ac0 <HW_DrawLine+0x42>
 8004aae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	db04      	blt.n	8004ac0 <HW_DrawLine+0x42>
 8004ab6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004aba:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004abe:	db02      	blt.n	8004ac6 <HW_DrawLine+0x48>
 8004ac0:	f04f 33ff 	mov.w	r3, #4294967295
 8004ac4:	e031      	b.n	8004b2a <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004ac6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	db0d      	blt.n	8004aea <HW_DrawLine+0x6c>
 8004ace:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004ad2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004ad6:	da08      	bge.n	8004aea <HW_DrawLine+0x6c>
 8004ad8:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	db04      	blt.n	8004aea <HW_DrawLine+0x6c>
 8004ae0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ae4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004ae8:	db02      	blt.n	8004af0 <HW_DrawLine+0x72>
 8004aea:	f04f 33ff 	mov.w	r3, #4294967295
 8004aee:	e01c      	b.n	8004b2a <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8004af0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004af4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d005      	beq.n	8004b08 <HW_DrawLine+0x8a>
 8004afc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004b00:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d10e      	bne.n	8004b26 <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8004b08:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004b0c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004b10:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004b14:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004b18:	8b3b      	ldrh	r3, [r7, #24]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	4623      	mov	r3, r4
 8004b1e:	f7ff ff49 	bl	80049b4 <HW_FillFrame>
        return UG_RESULT_OK;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e001      	b.n	8004b2a <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 8004b26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd90      	pop	{r4, r7, pc}

08004b32 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 8004b32:	b590      	push	{r4, r7, lr}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	4604      	mov	r4, r0
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4611      	mov	r1, r2
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4623      	mov	r3, r4
 8004b42:	80fb      	strh	r3, [r7, #6]
 8004b44:	4603      	mov	r3, r0
 8004b46:	80bb      	strh	r3, [r7, #4]
 8004b48:	460b      	mov	r3, r1
 8004b4a:	807b      	strh	r3, [r7, #2]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	db0d      	blt.n	8004b74 <HW_DrawImage+0x42>
 8004b58:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b5c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004b60:	da08      	bge.n	8004b74 <HW_DrawImage+0x42>
 8004b62:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	db04      	blt.n	8004b74 <HW_DrawImage+0x42>
 8004b6a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b6e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004b72:	db02      	blt.n	8004b7a <HW_DrawImage+0x48>
 8004b74:	f04f 33ff 	mov.w	r3, #4294967295
 8004b78:	e02b      	b.n	8004bd2 <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004b7a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	db0d      	blt.n	8004b9e <HW_DrawImage+0x6c>
 8004b82:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004b86:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004b8a:	da08      	bge.n	8004b9e <HW_DrawImage+0x6c>
 8004b8c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	db04      	blt.n	8004b9e <HW_DrawImage+0x6c>
 8004b94:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004b98:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004b9c:	db02      	blt.n	8004ba4 <HW_DrawImage+0x72>
 8004b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ba2:	e016      	b.n	8004bd2 <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004ba4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004ba8:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004bac:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004bb0:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004bb4:	f7ff fe70 	bl	8004898 <SSD1963_WindowSet>

    write_command(0x2c);
 8004bb8:	202c      	movs	r0, #44	; 0x2c
 8004bba:	f000 f80e 	bl	8004bda <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 8004bbe:	8bbb      	ldrh	r3, [r7, #28]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	0052      	lsls	r2, r2, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	4619      	mov	r1, r3
 8004bca:	69b8      	ldr	r0, [r7, #24]
 8004bcc:	f000 f83a 	bl	8004c44 <write_multi_data>

    return UG_RESULT_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	370c      	adds	r7, #12
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd90      	pop	{r4, r7, pc}

08004bda <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	4603      	mov	r3, r0
 8004be2:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 8004be4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004be8:	79fa      	ldrb	r2, [r7, #7]
 8004bea:	b292      	uxth	r2, r2
 8004bec:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004bee:	2300      	movs	r3, #0
 8004bf0:	81fb      	strh	r3, [r7, #14]
 8004bf2:	e002      	b.n	8004bfa <write_command+0x20>
 8004bf4:	89fb      	ldrh	r3, [r7, #14]
 8004bf6:	3301      	adds	r3, #1
 8004bf8:	81fb      	strh	r3, [r7, #14]
 8004bfa:	89fb      	ldrh	r3, [r7, #14]
 8004bfc:	2b0b      	cmp	r3, #11
 8004bfe:	d9f9      	bls.n	8004bf4 <write_command+0x1a>
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
	...

08004c10 <write_data>:


void write_data(DATA_t data)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b085      	sub	sp, #20
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	4603      	mov	r3, r0
 8004c18:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 8004c1a:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <write_data+0x30>)
 8004c1c:	88fb      	ldrh	r3, [r7, #6]
 8004c1e:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004c20:	2300      	movs	r3, #0
 8004c22:	81fb      	strh	r3, [r7, #14]
 8004c24:	e002      	b.n	8004c2c <write_data+0x1c>
 8004c26:	89fb      	ldrh	r3, [r7, #14]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	81fb      	strh	r3, [r7, #14]
 8004c2c:	89fb      	ldrh	r3, [r7, #14]
 8004c2e:	2b0b      	cmp	r3, #11
 8004c30:	d9f9      	bls.n	8004c26 <write_data+0x16>
 }
 8004c32:	bf00      	nop
 8004c34:	bf00      	nop
 8004c36:	3714      	adds	r7, #20
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr
 8004c40:	60000100 	.word	0x60000100

08004c44 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 8004c50:	2300      	movs	r3, #0
 8004c52:	81fb      	strh	r3, [r7, #14]
 8004c54:	e016      	b.n	8004c84 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 8004c56:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	4413      	add	r3, r2
 8004c60:	4a0e      	ldr	r2, [pc, #56]	; (8004c9c <write_multi_data+0x58>)
 8004c62:	881b      	ldrh	r3, [r3, #0]
 8004c64:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004c66:	2300      	movs	r3, #0
 8004c68:	81bb      	strh	r3, [r7, #12]
 8004c6a:	e002      	b.n	8004c72 <write_multi_data+0x2e>
 8004c6c:	89bb      	ldrh	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	81bb      	strh	r3, [r7, #12]
 8004c72:	89bb      	ldrh	r3, [r7, #12]
 8004c74:	2b0b      	cmp	r3, #11
 8004c76:	d9f9      	bls.n	8004c6c <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 8004c78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	3301      	adds	r3, #1
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	81fb      	strh	r3, [r7, #14]
 8004c84:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004c88:	887b      	ldrh	r3, [r7, #2]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	dbe3      	blt.n	8004c56 <write_multi_data+0x12>
    }
}
 8004c8e:	bf00      	nop
 8004c90:	bf00      	nop
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	60000100 	.word	0x60000100

08004ca0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cd8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004ca4:	480d      	ldr	r0, [pc, #52]	; (8004cdc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004ca6:	490e      	ldr	r1, [pc, #56]	; (8004ce0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004ca8:	4a0e      	ldr	r2, [pc, #56]	; (8004ce4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004cac:	e002      	b.n	8004cb4 <LoopCopyDataInit>

08004cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004cb2:	3304      	adds	r3, #4

08004cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004cb8:	d3f9      	bcc.n	8004cae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004cba:	4a0b      	ldr	r2, [pc, #44]	; (8004ce8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004cbc:	4c0b      	ldr	r4, [pc, #44]	; (8004cec <LoopFillZerobss+0x26>)
  movs r3, #0
 8004cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004cc0:	e001      	b.n	8004cc6 <LoopFillZerobss>

08004cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004cc4:	3204      	adds	r2, #4

08004cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004cc8:	d3fb      	bcc.n	8004cc2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004cca:	f7fe feef 	bl	8003aac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004cce:	f009 f84b 	bl	800dd68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cd2:	f7fd f8dd 	bl	8001e90 <main>
  bx  lr    
 8004cd6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ce0:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 8004ce4:	0801ddfc 	.word	0x0801ddfc
  ldr r2, =_sbss
 8004ce8:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 8004cec:	20004a0c 	.word	0x20004a0c

08004cf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004cf0:	e7fe      	b.n	8004cf0 <ADC_IRQHandler>

08004cf2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf6:	2003      	movs	r0, #3
 8004cf8:	f001 fb9e 	bl	8006438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cfc:	200f      	movs	r0, #15
 8004cfe:	f000 f805 	bl	8004d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004d02:	f7fe f9a1 	bl	8003048 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004d14:	4b12      	ldr	r3, [pc, #72]	; (8004d60 <HAL_InitTick+0x54>)
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	4b12      	ldr	r3, [pc, #72]	; (8004d64 <HAL_InitTick+0x58>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f001 fbb9 	bl	80064a2 <HAL_SYSTICK_Config>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d001      	beq.n	8004d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e00e      	b.n	8004d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b0f      	cmp	r3, #15
 8004d3e:	d80a      	bhi.n	8004d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004d40:	2200      	movs	r2, #0
 8004d42:	6879      	ldr	r1, [r7, #4]
 8004d44:	f04f 30ff 	mov.w	r0, #4294967295
 8004d48:	f001 fb81 	bl	800644e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004d4c:	4a06      	ldr	r2, [pc, #24]	; (8004d68 <HAL_InitTick+0x5c>)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
 8004d54:	e000      	b.n	8004d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004d56:	2301      	movs	r3, #1
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3708      	adds	r7, #8
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20000090 	.word	0x20000090
 8004d64:	20000098 	.word	0x20000098
 8004d68:	20000094 	.word	0x20000094

08004d6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004d70:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <HAL_IncTick+0x20>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_IncTick+0x24>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	4a04      	ldr	r2, [pc, #16]	; (8004d90 <HAL_IncTick+0x24>)
 8004d7e:	6013      	str	r3, [r2, #0]
}
 8004d80:	bf00      	nop
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	20000098 	.word	0x20000098
 8004d90:	20002818 	.word	0x20002818

08004d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return uwTick;
 8004d98:	4b03      	ldr	r3, [pc, #12]	; (8004da8 <HAL_GetTick+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20002818 	.word	0x20002818

08004dac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7ff ffee 	bl	8004d94 <HAL_GetTick>
 8004db8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d005      	beq.n	8004dd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004dc6:	4b0a      	ldr	r3, [pc, #40]	; (8004df0 <HAL_Delay+0x44>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	461a      	mov	r2, r3
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4413      	add	r3, r2
 8004dd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004dd2:	bf00      	nop
 8004dd4:	f7ff ffde 	bl	8004d94 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d8f7      	bhi.n	8004dd4 <HAL_Delay+0x28>
  {
  }
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	20000098 	.word	0x20000098

08004df4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e031      	b.n	8004e6e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fe f93c 	bl	8003090 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d116      	bne.n	8004e60 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_ADC_Init+0x84>)
 8004e38:	4013      	ands	r3, r2
 8004e3a:	f043 0202 	orr.w	r2, r3, #2
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f000 fad6 	bl	80053f4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e52:	f023 0303 	bic.w	r3, r3, #3
 8004e56:	f043 0201 	orr.w	r2, r3, #1
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	641a      	str	r2, [r3, #64]	; 0x40
 8004e5e:	e001      	b.n	8004e64 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	ffffeefd 	.word	0xffffeefd

08004e7c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004e84:	2300      	movs	r3, #0
 8004e86:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e8e:	2b01      	cmp	r3, #1
 8004e90:	d101      	bne.n	8004e96 <HAL_ADC_Start+0x1a>
 8004e92:	2302      	movs	r3, #2
 8004e94:	e0ad      	b.n	8004ff2 <HAL_ADC_Start+0x176>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2201      	movs	r2, #1
 8004e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d018      	beq.n	8004ede <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f042 0201 	orr.w	r2, r2, #1
 8004eba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004ebc:	4b50      	ldr	r3, [pc, #320]	; (8005000 <HAL_ADC_Start+0x184>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a50      	ldr	r2, [pc, #320]	; (8005004 <HAL_ADC_Start+0x188>)
 8004ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec6:	0c9a      	lsrs	r2, r3, #18
 8004ec8:	4613      	mov	r3, r2
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	4413      	add	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004ed0:	e002      	b.n	8004ed8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	3b01      	subs	r3, #1
 8004ed6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1f9      	bne.n	8004ed2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d175      	bne.n	8004fd8 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ef0:	4b45      	ldr	r3, [pc, #276]	; (8005008 <HAL_ADC_Start+0x18c>)
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d007      	beq.n	8004f1a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004f12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f26:	d106      	bne.n	8004f36 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2c:	f023 0206 	bic.w	r2, r3, #6
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	645a      	str	r2, [r3, #68]	; 0x44
 8004f34:	e002      	b.n	8004f3c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004f4c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004f4e:	4b2f      	ldr	r3, [pc, #188]	; (800500c <HAL_ADC_Start+0x190>)
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 031f 	and.w	r3, r3, #31
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d10f      	bne.n	8004f7a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d143      	bne.n	8004ff0 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f76:	609a      	str	r2, [r3, #8]
 8004f78:	e03a      	b.n	8004ff0 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a24      	ldr	r2, [pc, #144]	; (8005010 <HAL_ADC_Start+0x194>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d10e      	bne.n	8004fa2 <HAL_ADC_Start+0x126>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d107      	bne.n	8004fa2 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689a      	ldr	r2, [r3, #8]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004fa0:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004fa2:	4b1a      	ldr	r3, [pc, #104]	; (800500c <HAL_ADC_Start+0x190>)
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d120      	bne.n	8004ff0 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a18      	ldr	r2, [pc, #96]	; (8005014 <HAL_ADC_Start+0x198>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d11b      	bne.n	8004ff0 <HAL_ADC_Start+0x174>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d114      	bne.n	8004ff0 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	689a      	ldr	r2, [r3, #8]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004fd4:	609a      	str	r2, [r3, #8]
 8004fd6:	e00b      	b.n	8004ff0 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	f043 0210 	orr.w	r2, r3, #16
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe8:	f043 0201 	orr.w	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004ff0:	2300      	movs	r3, #0
}
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
 8004ffe:	bf00      	nop
 8005000:	20000090 	.word	0x20000090
 8005004:	431bde83 	.word	0x431bde83
 8005008:	fffff8fe 	.word	0xfffff8fe
 800500c:	40012300 	.word	0x40012300
 8005010:	40012000 	.word	0x40012000
 8005014:	40012200 	.word	0x40012200

08005018 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b084      	sub	sp, #16
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005034:	d113      	bne.n	800505e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	d10b      	bne.n	800505e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	f043 0220 	orr.w	r2, r3, #32
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e063      	b.n	8005126 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800505e:	f7ff fe99 	bl	8004d94 <HAL_GetTick>
 8005062:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005064:	e021      	b.n	80050aa <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d01d      	beq.n	80050aa <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d007      	beq.n	8005084 <HAL_ADC_PollForConversion+0x6c>
 8005074:	f7ff fe8e 	bl	8004d94 <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	683a      	ldr	r2, [r7, #0]
 8005080:	429a      	cmp	r2, r3
 8005082:	d212      	bcs.n	80050aa <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b02      	cmp	r3, #2
 8005090:	d00b      	beq.n	80050aa <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005096:	f043 0204 	orr.w	r2, r3, #4
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e03d      	b.n	8005126 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b02      	cmp	r3, #2
 80050b6:	d1d6      	bne.n	8005066 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f06f 0212 	mvn.w	r2, #18
 80050c0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d123      	bne.n	8005124 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d11f      	bne.n	8005124 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ea:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d111      	bne.n	8005124 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005110:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d105      	bne.n	8005124 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	f043 0201 	orr.w	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800512e:	b480      	push	{r7}
 8005130:	b083      	sub	sp, #12
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800515c:	2b01      	cmp	r3, #1
 800515e:	d101      	bne.n	8005164 <HAL_ADC_ConfigChannel+0x1c>
 8005160:	2302      	movs	r3, #2
 8005162:	e136      	b.n	80053d2 <HAL_ADC_ConfigChannel+0x28a>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b09      	cmp	r3, #9
 8005172:	d93a      	bls.n	80051ea <HAL_ADC_ConfigChannel+0xa2>
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800517c:	d035      	beq.n	80051ea <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68d9      	ldr	r1, [r3, #12]
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	461a      	mov	r2, r3
 800518c:	4613      	mov	r3, r2
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	4413      	add	r3, r2
 8005192:	3b1e      	subs	r3, #30
 8005194:	2207      	movs	r2, #7
 8005196:	fa02 f303 	lsl.w	r3, r2, r3
 800519a:	43da      	mvns	r2, r3
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	400a      	ands	r2, r1
 80051a2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a8d      	ldr	r2, [pc, #564]	; (80053e0 <HAL_ADC_ConfigChannel+0x298>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d10a      	bne.n	80051c4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68d9      	ldr	r1, [r3, #12]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	061a      	lsls	r2, r3, #24
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	430a      	orrs	r2, r1
 80051c0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051c2:	e035      	b.n	8005230 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68d9      	ldr	r1, [r3, #12]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	4618      	mov	r0, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	005b      	lsls	r3, r3, #1
 80051da:	4403      	add	r3, r0
 80051dc:	3b1e      	subs	r3, #30
 80051de:	409a      	lsls	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	430a      	orrs	r2, r1
 80051e6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80051e8:	e022      	b.n	8005230 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6919      	ldr	r1, [r3, #16]
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	461a      	mov	r2, r3
 80051f8:	4613      	mov	r3, r2
 80051fa:	005b      	lsls	r3, r3, #1
 80051fc:	4413      	add	r3, r2
 80051fe:	2207      	movs	r2, #7
 8005200:	fa02 f303 	lsl.w	r3, r2, r3
 8005204:	43da      	mvns	r2, r3
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	400a      	ands	r2, r1
 800520c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6919      	ldr	r1, [r3, #16]
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	689a      	ldr	r2, [r3, #8]
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	b29b      	uxth	r3, r3
 800521e:	4618      	mov	r0, r3
 8005220:	4603      	mov	r3, r0
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	4403      	add	r3, r0
 8005226:	409a      	lsls	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	430a      	orrs	r2, r1
 800522e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	2b06      	cmp	r3, #6
 8005236:	d824      	bhi.n	8005282 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	4613      	mov	r3, r2
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	4413      	add	r3, r2
 8005248:	3b05      	subs	r3, #5
 800524a:	221f      	movs	r2, #31
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	43da      	mvns	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	400a      	ands	r2, r1
 8005258:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	4618      	mov	r0, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	4613      	mov	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	4413      	add	r3, r2
 8005272:	3b05      	subs	r3, #5
 8005274:	fa00 f203 	lsl.w	r2, r0, r3
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	430a      	orrs	r2, r1
 800527e:	635a      	str	r2, [r3, #52]	; 0x34
 8005280:	e04c      	b.n	800531c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d824      	bhi.n	80052d4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	685a      	ldr	r2, [r3, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	009b      	lsls	r3, r3, #2
 8005298:	4413      	add	r3, r2
 800529a:	3b23      	subs	r3, #35	; 0x23
 800529c:	221f      	movs	r2, #31
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43da      	mvns	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	400a      	ands	r2, r1
 80052aa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	4618      	mov	r0, r3
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	685a      	ldr	r2, [r3, #4]
 80052be:	4613      	mov	r3, r2
 80052c0:	009b      	lsls	r3, r3, #2
 80052c2:	4413      	add	r3, r2
 80052c4:	3b23      	subs	r3, #35	; 0x23
 80052c6:	fa00 f203 	lsl.w	r2, r0, r3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	631a      	str	r2, [r3, #48]	; 0x30
 80052d2:	e023      	b.n	800531c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	3b41      	subs	r3, #65	; 0x41
 80052e6:	221f      	movs	r2, #31
 80052e8:	fa02 f303 	lsl.w	r3, r2, r3
 80052ec:	43da      	mvns	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	400a      	ands	r2, r1
 80052f4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	b29b      	uxth	r3, r3
 8005302:	4618      	mov	r0, r3
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	3b41      	subs	r3, #65	; 0x41
 8005310:	fa00 f203 	lsl.w	r2, r0, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	430a      	orrs	r2, r1
 800531a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a30      	ldr	r2, [pc, #192]	; (80053e4 <HAL_ADC_ConfigChannel+0x29c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d10a      	bne.n	800533c <HAL_ADC_ConfigChannel+0x1f4>
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800532e:	d105      	bne.n	800533c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005330:	4b2d      	ldr	r3, [pc, #180]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a2c      	ldr	r2, [pc, #176]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005336:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800533a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a28      	ldr	r2, [pc, #160]	; (80053e4 <HAL_ADC_ConfigChannel+0x29c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d10f      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x21e>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b12      	cmp	r3, #18
 800534c:	d10b      	bne.n	8005366 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800534e:	4b26      	ldr	r3, [pc, #152]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	4a25      	ldr	r2, [pc, #148]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005354:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005358:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800535a:	4b23      	ldr	r3, [pc, #140]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	4a22      	ldr	r2, [pc, #136]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005360:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005364:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a1e      	ldr	r2, [pc, #120]	; (80053e4 <HAL_ADC_ConfigChannel+0x29c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d12b      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x280>
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a1a      	ldr	r2, [pc, #104]	; (80053e0 <HAL_ADC_ConfigChannel+0x298>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d003      	beq.n	8005382 <HAL_ADC_ConfigChannel+0x23a>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b11      	cmp	r3, #17
 8005380:	d122      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005382:	4b19      	ldr	r3, [pc, #100]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	4a18      	ldr	r2, [pc, #96]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005388:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800538c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <HAL_ADC_ConfigChannel+0x2a0>)
 8005394:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005398:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a10      	ldr	r2, [pc, #64]	; (80053e0 <HAL_ADC_ConfigChannel+0x298>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d111      	bne.n	80053c8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <HAL_ADC_ConfigChannel+0x2a4>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	4a11      	ldr	r2, [pc, #68]	; (80053f0 <HAL_ADC_ConfigChannel+0x2a8>)
 80053aa:	fba2 2303 	umull	r2, r3, r2, r3
 80053ae:	0c9a      	lsrs	r2, r3, #18
 80053b0:	4613      	mov	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	4413      	add	r3, r2
 80053b6:	005b      	lsls	r3, r3, #1
 80053b8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053ba:	e002      	b.n	80053c2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3b01      	subs	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1f9      	bne.n	80053bc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2200      	movs	r2, #0
 80053cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3714      	adds	r7, #20
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	10000012 	.word	0x10000012
 80053e4:	40012000 	.word	0x40012000
 80053e8:	40012300 	.word	0x40012300
 80053ec:	20000090 	.word	0x20000090
 80053f0:	431bde83 	.word	0x431bde83

080053f4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80053f4:	b480      	push	{r7}
 80053f6:	b083      	sub	sp, #12
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80053fc:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <ADC_Init+0x1ec>)
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	4a77      	ldr	r2, [pc, #476]	; (80055e0 <ADC_Init+0x1ec>)
 8005402:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005406:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005408:	4b75      	ldr	r3, [pc, #468]	; (80055e0 <ADC_Init+0x1ec>)
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	4973      	ldr	r1, [pc, #460]	; (80055e0 <ADC_Init+0x1ec>)
 8005412:	4313      	orrs	r3, r2
 8005414:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005424:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	6859      	ldr	r1, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	021a      	lsls	r2, r3, #8
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005448:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	6859      	ldr	r1, [r3, #4]
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	689a      	ldr	r2, [r3, #8]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800546a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	6899      	ldr	r1, [r3, #8]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	430a      	orrs	r2, r1
 800547c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005482:	4a58      	ldr	r2, [pc, #352]	; (80055e4 <ADC_Init+0x1f0>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d022      	beq.n	80054ce <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	689a      	ldr	r2, [r3, #8]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005496:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	6899      	ldr	r1, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	430a      	orrs	r2, r1
 80054ca:	609a      	str	r2, [r3, #8]
 80054cc:	e00f      	b.n	80054ee <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80054dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80054ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	689a      	ldr	r2, [r3, #8]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0202 	bic.w	r2, r2, #2
 80054fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6899      	ldr	r1, [r3, #8]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	699b      	ldr	r3, [r3, #24]
 8005508:	005a      	lsls	r2, r3, #1
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800552a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800553a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6859      	ldr	r1, [r3, #4]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005546:	3b01      	subs	r3, #1
 8005548:	035a      	lsls	r2, r3, #13
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	605a      	str	r2, [r3, #4]
 8005552:	e007      	b.n	8005564 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005562:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	3b01      	subs	r3, #1
 8005580:	051a      	lsls	r2, r3, #20
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005598:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055a6:	025a      	lsls	r2, r3, #9
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	430a      	orrs	r2, r1
 80055ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	689a      	ldr	r2, [r3, #8]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6899      	ldr	r1, [r3, #8]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	029a      	lsls	r2, r3, #10
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	430a      	orrs	r2, r1
 80055d2:	609a      	str	r2, [r3, #8]
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr
 80055e0:	40012300 	.word	0x40012300
 80055e4:	0f000001 	.word	0x0f000001

080055e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d101      	bne.n	80055fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0ed      	b.n	80057d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7fd fe1a 	bl	8003240 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800561c:	f7ff fbba 	bl	8004d94 <HAL_GetTick>
 8005620:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005622:	e012      	b.n	800564a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005624:	f7ff fbb6 	bl	8004d94 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b0a      	cmp	r3, #10
 8005630:	d90b      	bls.n	800564a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2205      	movs	r2, #5
 8005642:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e0c5      	b.n	80057d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	f003 0301 	and.w	r3, r3, #1
 8005654:	2b00      	cmp	r3, #0
 8005656:	d0e5      	beq.n	8005624 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0202 	bic.w	r2, r2, #2
 8005666:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005668:	f7ff fb94 	bl	8004d94 <HAL_GetTick>
 800566c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800566e:	e012      	b.n	8005696 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005670:	f7ff fb90 	bl	8004d94 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b0a      	cmp	r3, #10
 800567c:	d90b      	bls.n	8005696 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2205      	movs	r2, #5
 800568e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e09f      	b.n	80057d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e5      	bne.n	8005670 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	7e1b      	ldrb	r3, [r3, #24]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d108      	bne.n	80056be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	e007      	b.n	80056ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80056cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	7e5b      	ldrb	r3, [r3, #25]
 80056d2:	2b01      	cmp	r3, #1
 80056d4:	d108      	bne.n	80056e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80056e4:	601a      	str	r2, [r3, #0]
 80056e6:	e007      	b.n	80056f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	7e9b      	ldrb	r3, [r3, #26]
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d108      	bne.n	8005712 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f042 0220 	orr.w	r2, r2, #32
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e007      	b.n	8005722 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f022 0220 	bic.w	r2, r2, #32
 8005720:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	7edb      	ldrb	r3, [r3, #27]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d108      	bne.n	800573c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0210 	bic.w	r2, r2, #16
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	e007      	b.n	800574c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 0210 	orr.w	r2, r2, #16
 800574a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	7f1b      	ldrb	r3, [r3, #28]
 8005750:	2b01      	cmp	r3, #1
 8005752:	d108      	bne.n	8005766 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f042 0208 	orr.w	r2, r2, #8
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	e007      	b.n	8005776 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 0208 	bic.w	r2, r2, #8
 8005774:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	7f5b      	ldrb	r3, [r3, #29]
 800577a:	2b01      	cmp	r3, #1
 800577c:	d108      	bne.n	8005790 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f042 0204 	orr.w	r2, r2, #4
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	e007      	b.n	80057a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f022 0204 	bic.w	r2, r2, #4
 800579e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	431a      	orrs	r2, r3
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	431a      	orrs	r2, r3
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	695b      	ldr	r3, [r3, #20]
 80057b4:	ea42 0103 	orr.w	r1, r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	1e5a      	subs	r2, r3, #1
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	430a      	orrs	r2, r1
 80057c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3710      	adds	r7, #16
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
	...

080057e0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b087      	sub	sp, #28
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80057f8:	7cfb      	ldrb	r3, [r7, #19]
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d003      	beq.n	8005806 <HAL_CAN_ConfigFilter+0x26>
 80057fe:	7cfb      	ldrb	r3, [r7, #19]
 8005800:	2b02      	cmp	r3, #2
 8005802:	f040 80be 	bne.w	8005982 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005806:	4b65      	ldr	r3, [pc, #404]	; (800599c <HAL_CAN_ConfigFilter+0x1bc>)
 8005808:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005810:	f043 0201 	orr.w	r2, r3, #1
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005820:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005834:	021b      	lsls	r3, r3, #8
 8005836:	431a      	orrs	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	695b      	ldr	r3, [r3, #20]
 8005842:	f003 031f 	and.w	r3, r3, #31
 8005846:	2201      	movs	r2, #1
 8005848:	fa02 f303 	lsl.w	r3, r2, r3
 800584c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	43db      	mvns	r3, r3
 8005858:	401a      	ands	r2, r3
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d123      	bne.n	80058b0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	43db      	mvns	r3, r3
 8005872:	401a      	ands	r2, r3
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800588a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	3248      	adds	r2, #72	; 0x48
 8005890:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058a4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	3348      	adds	r3, #72	; 0x48
 80058aa:	00db      	lsls	r3, r3, #3
 80058ac:	440b      	add	r3, r1
 80058ae:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	69db      	ldr	r3, [r3, #28]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d122      	bne.n	80058fe <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80058b8:	697b      	ldr	r3, [r7, #20]
 80058ba:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058d4:	683a      	ldr	r2, [r7, #0]
 80058d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80058d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	3248      	adds	r2, #72	; 0x48
 80058de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80058f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80058f4:	6979      	ldr	r1, [r7, #20]
 80058f6:	3348      	adds	r3, #72	; 0x48
 80058f8:	00db      	lsls	r3, r3, #3
 80058fa:	440b      	add	r3, r1
 80058fc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d109      	bne.n	800591a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	43db      	mvns	r3, r3
 8005910:	401a      	ands	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005918:	e007      	b.n	800592a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	431a      	orrs	r2, r3
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d109      	bne.n	8005946 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	401a      	ands	r2, r3
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005944:	e007      	b.n	8005956 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	431a      	orrs	r2, r3
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	6a1b      	ldr	r3, [r3, #32]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	431a      	orrs	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005974:	f023 0201 	bic.w	r2, r3, #1
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	e006      	b.n	8005990 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
  }
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	40006400 	.word	0x40006400

080059a0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d12e      	bne.n	8005a12 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2202      	movs	r2, #2
 80059b8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681a      	ldr	r2, [r3, #0]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f022 0201 	bic.w	r2, r2, #1
 80059ca:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80059cc:	f7ff f9e2 	bl	8004d94 <HAL_GetTick>
 80059d0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80059d2:	e012      	b.n	80059fa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80059d4:	f7ff f9de 	bl	8004d94 <HAL_GetTick>
 80059d8:	4602      	mov	r2, r0
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	2b0a      	cmp	r3, #10
 80059e0:	d90b      	bls.n	80059fa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2205      	movs	r2, #5
 80059f2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e012      	b.n	8005a20 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d1e5      	bne.n	80059d4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e006      	b.n	8005a20 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
  }
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3710      	adds	r7, #16
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b089      	sub	sp, #36	; 0x24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d003      	beq.n	8005a54 <HAL_CAN_AddTxMessage+0x2c>
 8005a4c:	7ffb      	ldrb	r3, [r7, #31]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	f040 80ad 	bne.w	8005bae <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10a      	bne.n	8005a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d105      	bne.n	8005a74 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005a68:	69bb      	ldr	r3, [r7, #24]
 8005a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8095 	beq.w	8005b9e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	0e1b      	lsrs	r3, r3, #24
 8005a78:	f003 0303 	and.w	r3, r3, #3
 8005a7c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005a7e:	2201      	movs	r2, #1
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	409a      	lsls	r2, r3
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10d      	bne.n	8005aac <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005a9a:	68f9      	ldr	r1, [r7, #12]
 8005a9c:	6809      	ldr	r1, [r1, #0]
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	3318      	adds	r3, #24
 8005aa4:	011b      	lsls	r3, r3, #4
 8005aa6:	440b      	add	r3, r1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e00f      	b.n	8005acc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ab6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005abc:	68f9      	ldr	r1, [r7, #12]
 8005abe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005ac0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	3318      	adds	r3, #24
 8005ac6:	011b      	lsls	r3, r3, #4
 8005ac8:	440b      	add	r3, r1
 8005aca:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6819      	ldr	r1, [r3, #0]
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	691a      	ldr	r2, [r3, #16]
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	3318      	adds	r3, #24
 8005ad8:	011b      	lsls	r3, r3, #4
 8005ada:	440b      	add	r3, r1
 8005adc:	3304      	adds	r3, #4
 8005ade:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	7d1b      	ldrb	r3, [r3, #20]
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d111      	bne.n	8005b0c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681a      	ldr	r2, [r3, #0]
 8005aec:	697b      	ldr	r3, [r7, #20]
 8005aee:	3318      	adds	r3, #24
 8005af0:	011b      	lsls	r3, r3, #4
 8005af2:	4413      	add	r3, r2
 8005af4:	3304      	adds	r3, #4
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	6811      	ldr	r1, [r2, #0]
 8005afc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	3318      	adds	r3, #24
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	440b      	add	r3, r1
 8005b08:	3304      	adds	r3, #4
 8005b0a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	3307      	adds	r3, #7
 8005b10:	781b      	ldrb	r3, [r3, #0]
 8005b12:	061a      	lsls	r2, r3, #24
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	3306      	adds	r3, #6
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	041b      	lsls	r3, r3, #16
 8005b1c:	431a      	orrs	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3305      	adds	r3, #5
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	4313      	orrs	r3, r2
 8005b28:	687a      	ldr	r2, [r7, #4]
 8005b2a:	3204      	adds	r2, #4
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	4610      	mov	r0, r2
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	6811      	ldr	r1, [r2, #0]
 8005b34:	ea43 0200 	orr.w	r2, r3, r0
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	011b      	lsls	r3, r3, #4
 8005b3c:	440b      	add	r3, r1
 8005b3e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005b42:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	3303      	adds	r3, #3
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	061a      	lsls	r2, r3, #24
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3302      	adds	r3, #2
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	041b      	lsls	r3, r3, #16
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	021b      	lsls	r3, r3, #8
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	7812      	ldrb	r2, [r2, #0]
 8005b64:	4610      	mov	r0, r2
 8005b66:	68fa      	ldr	r2, [r7, #12]
 8005b68:	6811      	ldr	r1, [r2, #0]
 8005b6a:	ea43 0200 	orr.w	r2, r3, r0
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	011b      	lsls	r3, r3, #4
 8005b72:	440b      	add	r3, r1
 8005b74:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005b78:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	3318      	adds	r3, #24
 8005b82:	011b      	lsls	r3, r3, #4
 8005b84:	4413      	add	r3, r2
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6811      	ldr	r1, [r2, #0]
 8005b8c:	f043 0201 	orr.w	r2, r3, #1
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3318      	adds	r3, #24
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	440b      	add	r3, r1
 8005b98:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	e00e      	b.n	8005bbc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005baa:	2301      	movs	r3, #1
 8005bac:	e006      	b.n	8005bbc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
  }
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3724      	adds	r7, #36	; 0x24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bdc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005bde:	7dfb      	ldrb	r3, [r7, #23]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d003      	beq.n	8005bec <HAL_CAN_GetRxMessage+0x24>
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	f040 80f3 	bne.w	8005dd2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10e      	bne.n	8005c10 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	f003 0303 	and.w	r3, r3, #3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d116      	bne.n	8005c2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	e0e7      	b.n	8005de0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	f003 0303 	and.w	r3, r3, #3
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d107      	bne.n	8005c2e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c22:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e0d8      	b.n	8005de0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	331b      	adds	r3, #27
 8005c36:	011b      	lsls	r3, r3, #4
 8005c38:	4413      	add	r3, r2
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 0204 	and.w	r2, r3, #4
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d10c      	bne.n	8005c66 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	331b      	adds	r3, #27
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	4413      	add	r3, r2
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	0d5b      	lsrs	r3, r3, #21
 8005c5c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	e00b      	b.n	8005c7e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	331b      	adds	r3, #27
 8005c6e:	011b      	lsls	r3, r3, #4
 8005c70:	4413      	add	r3, r2
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	08db      	lsrs	r3, r3, #3
 8005c76:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	331b      	adds	r3, #27
 8005c86:	011b      	lsls	r3, r3, #4
 8005c88:	4413      	add	r3, r2
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0202 	and.w	r2, r3, #2
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	331b      	adds	r3, #27
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	4413      	add	r3, r2
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 020f 	and.w	r2, r3, #15
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	331b      	adds	r3, #27
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	0a1b      	lsrs	r3, r3, #8
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681a      	ldr	r2, [r3, #0]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	331b      	adds	r3, #27
 8005ccc:	011b      	lsls	r3, r3, #4
 8005cce:	4413      	add	r3, r2
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	0c1b      	lsrs	r3, r3, #16
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	011b      	lsls	r3, r3, #4
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	011b      	lsls	r3, r3, #4
 8005cfa:	4413      	add	r3, r2
 8005cfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	0a1a      	lsrs	r2, r3, #8
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	3301      	adds	r3, #1
 8005d08:	b2d2      	uxtb	r2, r2
 8005d0a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	011b      	lsls	r3, r3, #4
 8005d14:	4413      	add	r3, r2
 8005d16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	0c1a      	lsrs	r2, r3, #16
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	3302      	adds	r3, #2
 8005d22:	b2d2      	uxtb	r2, r2
 8005d24:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	4413      	add	r3, r2
 8005d30:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	0e1a      	lsrs	r2, r3, #24
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	3303      	adds	r3, #3
 8005d3c:	b2d2      	uxtb	r2, r2
 8005d3e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	011b      	lsls	r3, r3, #4
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d4e:	681a      	ldr	r2, [r3, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	3304      	adds	r3, #4
 8005d54:	b2d2      	uxtb	r2, r2
 8005d56:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	011b      	lsls	r3, r3, #4
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	0a1a      	lsrs	r2, r3, #8
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	3305      	adds	r3, #5
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	0c1a      	lsrs	r2, r3, #16
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	3306      	adds	r3, #6
 8005d88:	b2d2      	uxtb	r2, r2
 8005d8a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	011b      	lsls	r3, r3, #4
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	0e1a      	lsrs	r2, r3, #24
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	3307      	adds	r3, #7
 8005da2:	b2d2      	uxtb	r2, r2
 8005da4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d108      	bne.n	8005dbe <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f042 0220 	orr.w	r2, r2, #32
 8005dba:	60da      	str	r2, [r3, #12]
 8005dbc:	e007      	b.n	8005dce <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	691a      	ldr	r2, [r3, #16]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f042 0220 	orr.w	r2, r2, #32
 8005dcc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	e006      	b.n	8005de0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dd6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
  }
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	371c      	adds	r7, #28
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005dfc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005dfe:	7bfb      	ldrb	r3, [r7, #15]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d002      	beq.n	8005e0a <HAL_CAN_ActivateNotification+0x1e>
 8005e04:	7bfb      	ldrb	r3, [r7, #15]
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d109      	bne.n	8005e1e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6959      	ldr	r1, [r3, #20]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	683a      	ldr	r2, [r7, #0]
 8005e16:	430a      	orrs	r2, r1
 8005e18:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	e006      	b.n	8005e2c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
  }
}
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	3714      	adds	r7, #20
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b08a      	sub	sp, #40	; 0x28
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005e40:	2300      	movs	r3, #0
 8005e42:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	695b      	ldr	r3, [r3, #20]
 8005e4a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	699b      	ldr	r3, [r3, #24]
 8005e72:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	f003 0301 	and.w	r3, r3, #1
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d07c      	beq.n	8005f78 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005e7e:	69bb      	ldr	r3, [r7, #24]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d023      	beq.n	8005ed0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 f983 	bl	80061a6 <HAL_CAN_TxMailbox0CompleteCallback>
 8005ea0:	e016      	b.n	8005ed0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	f003 0304 	and.w	r3, r3, #4
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d004      	beq.n	8005eb6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005eb2:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb4:	e00c      	b.n	8005ed0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005eb6:	69bb      	ldr	r3, [r7, #24]
 8005eb8:	f003 0308 	and.w	r3, r3, #8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec8:	e002      	b.n	8005ed0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f000 f989 	bl	80061e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005ed0:	69bb      	ldr	r3, [r7, #24]
 8005ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d024      	beq.n	8005f24 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d003      	beq.n	8005ef6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 f963 	bl	80061ba <HAL_CAN_TxMailbox1CompleteCallback>
 8005ef4:	e016      	b.n	8005f24 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005ef6:	69bb      	ldr	r3, [r7, #24]
 8005ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d004      	beq.n	8005f0a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005f06:	627b      	str	r3, [r7, #36]	; 0x24
 8005f08:	e00c      	b.n	8005f24 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d004      	beq.n	8005f1e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1c:	e002      	b.n	8005f24 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f969 	bl	80061f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d024      	beq.n	8005f78 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005f36:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005f38:	69bb      	ldr	r3, [r7, #24]
 8005f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d003      	beq.n	8005f4a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f943 	bl	80061ce <HAL_CAN_TxMailbox2CompleteCallback>
 8005f48:	e016      	b.n	8005f78 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d004      	beq.n	8005f5e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f5c:	e00c      	b.n	8005f78 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005f5e:	69bb      	ldr	r3, [r7, #24]
 8005f60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d004      	beq.n	8005f72 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005f70:	e002      	b.n	8005f78 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 f949 	bl	800620a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005f78:	6a3b      	ldr	r3, [r7, #32]
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00c      	beq.n	8005f9c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	f003 0310 	and.w	r3, r3, #16
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d007      	beq.n	8005f9c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2210      	movs	r2, #16
 8005f9a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	f003 0304 	and.w	r3, r3, #4
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	f003 0308 	and.w	r3, r3, #8
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d006      	beq.n	8005fbe <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	2208      	movs	r2, #8
 8005fb6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f930 	bl	800621e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	f003 0302 	and.w	r3, r3, #2
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d009      	beq.n	8005fdc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	f003 0303 	and.w	r3, r3, #3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f7fa ff0e 	bl	8000df8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005fdc:	6a3b      	ldr	r3, [r7, #32]
 8005fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00c      	beq.n	8006000 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d007      	beq.n	8006000 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2210      	movs	r2, #16
 8005ffe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006000:	6a3b      	ldr	r3, [r7, #32]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	f003 0308 	and.w	r3, r3, #8
 8006010:	2b00      	cmp	r3, #0
 8006012:	d006      	beq.n	8006022 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	2208      	movs	r2, #8
 800601a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 f912 	bl	8006246 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006022:	6a3b      	ldr	r3, [r7, #32]
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	2b00      	cmp	r3, #0
 800602a:	d009      	beq.n	8006040 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	f003 0303 	and.w	r3, r3, #3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d002      	beq.n	8006040 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 f8f9 	bl	8006232 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006040:	6a3b      	ldr	r3, [r7, #32]
 8006042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00b      	beq.n	8006062 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	f003 0310 	and.w	r3, r3, #16
 8006050:	2b00      	cmp	r3, #0
 8006052:	d006      	beq.n	8006062 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	2210      	movs	r2, #16
 800605a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f8fc 	bl	800625a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006062:	6a3b      	ldr	r3, [r7, #32]
 8006064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00b      	beq.n	8006084 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d006      	beq.n	8006084 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2208      	movs	r2, #8
 800607c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f8f5 	bl	800626e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800608a:	2b00      	cmp	r3, #0
 800608c:	d07b      	beq.n	8006186 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	f003 0304 	and.w	r3, r3, #4
 8006094:	2b00      	cmp	r3, #0
 8006096:	d072      	beq.n	800617e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	f043 0301 	orr.w	r3, r3, #1
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80060b4:	6a3b      	ldr	r3, [r7, #32]
 80060b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d008      	beq.n	80060d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d003      	beq.n	80060d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80060c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ca:	f043 0302 	orr.w	r3, r3, #2
 80060ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d008      	beq.n	80060ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80060e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e6:	f043 0304 	orr.w	r3, r3, #4
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d043      	beq.n	800617e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d03e      	beq.n	800617e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006106:	2b60      	cmp	r3, #96	; 0x60
 8006108:	d02b      	beq.n	8006162 <HAL_CAN_IRQHandler+0x32a>
 800610a:	2b60      	cmp	r3, #96	; 0x60
 800610c:	d82e      	bhi.n	800616c <HAL_CAN_IRQHandler+0x334>
 800610e:	2b50      	cmp	r3, #80	; 0x50
 8006110:	d022      	beq.n	8006158 <HAL_CAN_IRQHandler+0x320>
 8006112:	2b50      	cmp	r3, #80	; 0x50
 8006114:	d82a      	bhi.n	800616c <HAL_CAN_IRQHandler+0x334>
 8006116:	2b40      	cmp	r3, #64	; 0x40
 8006118:	d019      	beq.n	800614e <HAL_CAN_IRQHandler+0x316>
 800611a:	2b40      	cmp	r3, #64	; 0x40
 800611c:	d826      	bhi.n	800616c <HAL_CAN_IRQHandler+0x334>
 800611e:	2b30      	cmp	r3, #48	; 0x30
 8006120:	d010      	beq.n	8006144 <HAL_CAN_IRQHandler+0x30c>
 8006122:	2b30      	cmp	r3, #48	; 0x30
 8006124:	d822      	bhi.n	800616c <HAL_CAN_IRQHandler+0x334>
 8006126:	2b10      	cmp	r3, #16
 8006128:	d002      	beq.n	8006130 <HAL_CAN_IRQHandler+0x2f8>
 800612a:	2b20      	cmp	r3, #32
 800612c:	d005      	beq.n	800613a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800612e:	e01d      	b.n	800616c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	f043 0308 	orr.w	r3, r3, #8
 8006136:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006138:	e019      	b.n	800616e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	f043 0310 	orr.w	r3, r3, #16
 8006140:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006142:	e014      	b.n	800616e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006146:	f043 0320 	orr.w	r3, r3, #32
 800614a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800614c:	e00f      	b.n	800616e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006154:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006156:	e00a      	b.n	800616e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800615e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006160:	e005      	b.n	800616e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800616a:	e000      	b.n	800616e <HAL_CAN_IRQHandler+0x336>
            break;
 800616c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	699a      	ldr	r2, [r3, #24]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800617c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2204      	movs	r2, #4
 8006184:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006188:	2b00      	cmp	r3, #0
 800618a:	d008      	beq.n	800619e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f872 	bl	8006282 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800619e:	bf00      	nop
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80061ae:	bf00      	nop
 80061b0:	370c      	adds	r7, #12
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b083      	sub	sp, #12
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80061c2:	bf00      	nop
 80061c4:	370c      	adds	r7, #12
 80061c6:	46bd      	mov	sp, r7
 80061c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061cc:	4770      	bx	lr

080061ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80061ce:	b480      	push	{r7}
 80061d0:	b083      	sub	sp, #12
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80061e2:	b480      	push	{r7}
 80061e4:	b083      	sub	sp, #12
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80061ea:	bf00      	nop
 80061ec:	370c      	adds	r7, #12
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr

080061f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80061f6:	b480      	push	{r7}
 80061f8:	b083      	sub	sp, #12
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80061fe:	bf00      	nop
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr

0800620a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800620a:	b480      	push	{r7}
 800620c:	b083      	sub	sp, #12
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006212:	bf00      	nop
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006226:	bf00      	nop
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006232:	b480      	push	{r7}
 8006234:	b083      	sub	sp, #12
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800623a:	bf00      	nop
 800623c:	370c      	adds	r7, #12
 800623e:	46bd      	mov	sp, r7
 8006240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006244:	4770      	bx	lr

08006246 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800624e:	bf00      	nop
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr

0800625a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800625a:	b480      	push	{r7}
 800625c:	b083      	sub	sp, #12
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006262:	bf00      	nop
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626c:	4770      	bx	lr

0800626e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800626e:	b480      	push	{r7}
 8006270:	b083      	sub	sp, #12
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006276:	bf00      	nop
 8006278:	370c      	adds	r7, #12
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800628a:	bf00      	nop
 800628c:	370c      	adds	r7, #12
 800628e:	46bd      	mov	sp, r7
 8006290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006294:	4770      	bx	lr
	...

08006298 <__NVIC_SetPriorityGrouping>:
{
 8006298:	b480      	push	{r7}
 800629a:	b085      	sub	sp, #20
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062a8:	4b0b      	ldr	r3, [pc, #44]	; (80062d8 <__NVIC_SetPriorityGrouping+0x40>)
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062b4:	4013      	ands	r3, r2
 80062b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <__NVIC_SetPriorityGrouping+0x44>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80062c6:	4a04      	ldr	r2, [pc, #16]	; (80062d8 <__NVIC_SetPriorityGrouping+0x40>)
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	60d3      	str	r3, [r2, #12]
}
 80062cc:	bf00      	nop
 80062ce:	3714      	adds	r7, #20
 80062d0:	46bd      	mov	sp, r7
 80062d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d6:	4770      	bx	lr
 80062d8:	e000ed00 	.word	0xe000ed00
 80062dc:	05fa0000 	.word	0x05fa0000

080062e0 <__NVIC_GetPriorityGrouping>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062e4:	4b04      	ldr	r3, [pc, #16]	; (80062f8 <__NVIC_GetPriorityGrouping+0x18>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	0a1b      	lsrs	r3, r3, #8
 80062ea:	f003 0307 	and.w	r3, r3, #7
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr
 80062f8:	e000ed00 	.word	0xe000ed00

080062fc <__NVIC_EnableIRQ>:
{
 80062fc:	b480      	push	{r7}
 80062fe:	b083      	sub	sp, #12
 8006300:	af00      	add	r7, sp, #0
 8006302:	4603      	mov	r3, r0
 8006304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800630a:	2b00      	cmp	r3, #0
 800630c:	db0b      	blt.n	8006326 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	f003 021f 	and.w	r2, r3, #31
 8006314:	4907      	ldr	r1, [pc, #28]	; (8006334 <__NVIC_EnableIRQ+0x38>)
 8006316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800631a:	095b      	lsrs	r3, r3, #5
 800631c:	2001      	movs	r0, #1
 800631e:	fa00 f202 	lsl.w	r2, r0, r2
 8006322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	e000e100 	.word	0xe000e100

08006338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	6039      	str	r1, [r7, #0]
 8006342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006348:	2b00      	cmp	r3, #0
 800634a:	db0a      	blt.n	8006362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	b2da      	uxtb	r2, r3
 8006350:	490c      	ldr	r1, [pc, #48]	; (8006384 <__NVIC_SetPriority+0x4c>)
 8006352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006356:	0112      	lsls	r2, r2, #4
 8006358:	b2d2      	uxtb	r2, r2
 800635a:	440b      	add	r3, r1
 800635c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006360:	e00a      	b.n	8006378 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	b2da      	uxtb	r2, r3
 8006366:	4908      	ldr	r1, [pc, #32]	; (8006388 <__NVIC_SetPriority+0x50>)
 8006368:	79fb      	ldrb	r3, [r7, #7]
 800636a:	f003 030f 	and.w	r3, r3, #15
 800636e:	3b04      	subs	r3, #4
 8006370:	0112      	lsls	r2, r2, #4
 8006372:	b2d2      	uxtb	r2, r2
 8006374:	440b      	add	r3, r1
 8006376:	761a      	strb	r2, [r3, #24]
}
 8006378:	bf00      	nop
 800637a:	370c      	adds	r7, #12
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	e000e100 	.word	0xe000e100
 8006388:	e000ed00 	.word	0xe000ed00

0800638c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800638c:	b480      	push	{r7}
 800638e:	b089      	sub	sp, #36	; 0x24
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	f1c3 0307 	rsb	r3, r3, #7
 80063a6:	2b04      	cmp	r3, #4
 80063a8:	bf28      	it	cs
 80063aa:	2304      	movcs	r3, #4
 80063ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	3304      	adds	r3, #4
 80063b2:	2b06      	cmp	r3, #6
 80063b4:	d902      	bls.n	80063bc <NVIC_EncodePriority+0x30>
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	3b03      	subs	r3, #3
 80063ba:	e000      	b.n	80063be <NVIC_EncodePriority+0x32>
 80063bc:	2300      	movs	r3, #0
 80063be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063c0:	f04f 32ff 	mov.w	r2, #4294967295
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	fa02 f303 	lsl.w	r3, r2, r3
 80063ca:	43da      	mvns	r2, r3
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	401a      	ands	r2, r3
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063d4:	f04f 31ff 	mov.w	r1, #4294967295
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	fa01 f303 	lsl.w	r3, r1, r3
 80063de:	43d9      	mvns	r1, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063e4:	4313      	orrs	r3, r2
         );
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3724      	adds	r7, #36	; 0x24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr
	...

080063f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b082      	sub	sp, #8
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	3b01      	subs	r3, #1
 8006400:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006404:	d301      	bcc.n	800640a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006406:	2301      	movs	r3, #1
 8006408:	e00f      	b.n	800642a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800640a:	4a0a      	ldr	r2, [pc, #40]	; (8006434 <SysTick_Config+0x40>)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3b01      	subs	r3, #1
 8006410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006412:	210f      	movs	r1, #15
 8006414:	f04f 30ff 	mov.w	r0, #4294967295
 8006418:	f7ff ff8e 	bl	8006338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800641c:	4b05      	ldr	r3, [pc, #20]	; (8006434 <SysTick_Config+0x40>)
 800641e:	2200      	movs	r2, #0
 8006420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006422:	4b04      	ldr	r3, [pc, #16]	; (8006434 <SysTick_Config+0x40>)
 8006424:	2207      	movs	r2, #7
 8006426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	e000e010 	.word	0xe000e010

08006438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7ff ff29 	bl	8006298 <__NVIC_SetPriorityGrouping>
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800644e:	b580      	push	{r7, lr}
 8006450:	b086      	sub	sp, #24
 8006452:	af00      	add	r7, sp, #0
 8006454:	4603      	mov	r3, r0
 8006456:	60b9      	str	r1, [r7, #8]
 8006458:	607a      	str	r2, [r7, #4]
 800645a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800645c:	2300      	movs	r3, #0
 800645e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006460:	f7ff ff3e 	bl	80062e0 <__NVIC_GetPriorityGrouping>
 8006464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006466:	687a      	ldr	r2, [r7, #4]
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	6978      	ldr	r0, [r7, #20]
 800646c:	f7ff ff8e 	bl	800638c <NVIC_EncodePriority>
 8006470:	4602      	mov	r2, r0
 8006472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006476:	4611      	mov	r1, r2
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff ff5d 	bl	8006338 <__NVIC_SetPriority>
}
 800647e:	bf00      	nop
 8006480:	3718      	adds	r7, #24
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}

08006486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b082      	sub	sp, #8
 800648a:	af00      	add	r7, sp, #0
 800648c:	4603      	mov	r3, r0
 800648e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006494:	4618      	mov	r0, r3
 8006496:	f7ff ff31 	bl	80062fc <__NVIC_EnableIRQ>
}
 800649a:	bf00      	nop
 800649c:	3708      	adds	r7, #8
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80064a2:	b580      	push	{r7, lr}
 80064a4:	b082      	sub	sp, #8
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f7ff ffa2 	bl	80063f4 <SysTick_Config>
 80064b0:	4603      	mov	r3, r0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3708      	adds	r7, #8
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80064c8:	f7fe fc64 	bl	8004d94 <HAL_GetTick>
 80064cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d101      	bne.n	80064d8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	e099      	b.n	800660c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f022 0201 	bic.w	r2, r2, #1
 80064f6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064f8:	e00f      	b.n	800651a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064fa:	f7fe fc4b 	bl	8004d94 <HAL_GetTick>
 80064fe:	4602      	mov	r2, r0
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1ad3      	subs	r3, r2, r3
 8006504:	2b05      	cmp	r3, #5
 8006506:	d908      	bls.n	800651a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2220      	movs	r2, #32
 800650c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2203      	movs	r2, #3
 8006512:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006516:	2303      	movs	r3, #3
 8006518:	e078      	b.n	800660c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0301 	and.w	r3, r3, #1
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e8      	bne.n	80064fa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006530:	697a      	ldr	r2, [r7, #20]
 8006532:	4b38      	ldr	r3, [pc, #224]	; (8006614 <HAL_DMA_Init+0x158>)
 8006534:	4013      	ands	r3, r2
 8006536:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685a      	ldr	r2, [r3, #4]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006546:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	699b      	ldr	r3, [r3, #24]
 8006558:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800655e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a1b      	ldr	r3, [r3, #32]
 8006564:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	4313      	orrs	r3, r2
 800656a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	2b04      	cmp	r3, #4
 8006572:	d107      	bne.n	8006584 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800657c:	4313      	orrs	r3, r2
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065aa:	2b04      	cmp	r3, #4
 80065ac:	d117      	bne.n	80065de <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	4313      	orrs	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d00e      	beq.n	80065de <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	f000 faa5 	bl	8006b10 <DMA_CheckFifoParam>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d008      	beq.n	80065de <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2240      	movs	r2, #64	; 0x40
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065da:	2301      	movs	r3, #1
 80065dc:	e016      	b.n	800660c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fa5c 	bl	8006aa4 <DMA_CalcBaseAndBitshift>
 80065ec:	4603      	mov	r3, r0
 80065ee:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065f4:	223f      	movs	r2, #63	; 0x3f
 80065f6:	409a      	lsls	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2201      	movs	r2, #1
 8006606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800660a:	2300      	movs	r3, #0
}
 800660c:	4618      	mov	r0, r3
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}
 8006614:	f010803f 	.word	0xf010803f

08006618 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006626:	2300      	movs	r3, #0
 8006628:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800662e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_DMA_Start_IT+0x26>
 800663a:	2302      	movs	r3, #2
 800663c:	e048      	b.n	80066d0 <HAL_DMA_Start_IT+0xb8>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2201      	movs	r2, #1
 8006642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	d137      	bne.n	80066c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2200      	movs	r2, #0
 800665e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68b9      	ldr	r1, [r7, #8]
 8006666:	68f8      	ldr	r0, [r7, #12]
 8006668:	f000 f9ee 	bl	8006a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006670:	223f      	movs	r2, #63	; 0x3f
 8006672:	409a      	lsls	r2, r3
 8006674:	693b      	ldr	r3, [r7, #16]
 8006676:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f042 0216 	orr.w	r2, r2, #22
 8006686:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	695a      	ldr	r2, [r3, #20]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006696:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669c:	2b00      	cmp	r3, #0
 800669e:	d007      	beq.n	80066b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f042 0208 	orr.w	r2, r2, #8
 80066ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f042 0201 	orr.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]
 80066c0:	e005      	b.n	80066ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80066ca:	2302      	movs	r3, #2
 80066cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80066ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d004      	beq.n	80066f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2280      	movs	r2, #128	; 0x80
 80066f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066f2:	2301      	movs	r3, #1
 80066f4:	e00c      	b.n	8006710 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2205      	movs	r2, #5
 80066fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f022 0201 	bic.w	r2, r2, #1
 800670c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006728:	4b8e      	ldr	r3, [pc, #568]	; (8006964 <HAL_DMA_IRQHandler+0x248>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a8e      	ldr	r2, [pc, #568]	; (8006968 <HAL_DMA_IRQHandler+0x24c>)
 800672e:	fba2 2303 	umull	r2, r3, r2, r3
 8006732:	0a9b      	lsrs	r3, r3, #10
 8006734:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800673a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006746:	2208      	movs	r2, #8
 8006748:	409a      	lsls	r2, r3
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4013      	ands	r3, r2
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01a      	beq.n	8006788 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f003 0304 	and.w	r3, r3, #4
 800675c:	2b00      	cmp	r3, #0
 800675e:	d013      	beq.n	8006788 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f022 0204 	bic.w	r2, r2, #4
 800676e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006774:	2208      	movs	r2, #8
 8006776:	409a      	lsls	r2, r3
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006780:	f043 0201 	orr.w	r2, r3, #1
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678c:	2201      	movs	r2, #1
 800678e:	409a      	lsls	r2, r3
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	4013      	ands	r3, r2
 8006794:	2b00      	cmp	r3, #0
 8006796:	d012      	beq.n	80067be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067aa:	2201      	movs	r2, #1
 80067ac:	409a      	lsls	r2, r3
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067b6:	f043 0202 	orr.w	r2, r3, #2
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c2:	2204      	movs	r2, #4
 80067c4:	409a      	lsls	r2, r3
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4013      	ands	r3, r2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d012      	beq.n	80067f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f003 0302 	and.w	r3, r3, #2
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00b      	beq.n	80067f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e0:	2204      	movs	r2, #4
 80067e2:	409a      	lsls	r2, r3
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ec:	f043 0204 	orr.w	r2, r3, #4
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067f8:	2210      	movs	r2, #16
 80067fa:	409a      	lsls	r2, r3
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	4013      	ands	r3, r2
 8006800:	2b00      	cmp	r3, #0
 8006802:	d043      	beq.n	800688c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0308 	and.w	r3, r3, #8
 800680e:	2b00      	cmp	r3, #0
 8006810:	d03c      	beq.n	800688c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006816:	2210      	movs	r2, #16
 8006818:	409a      	lsls	r2, r3
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d018      	beq.n	800685e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006836:	2b00      	cmp	r3, #0
 8006838:	d108      	bne.n	800684c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800683e:	2b00      	cmp	r3, #0
 8006840:	d024      	beq.n	800688c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	4798      	blx	r3
 800684a:	e01f      	b.n	800688c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006850:	2b00      	cmp	r3, #0
 8006852:	d01b      	beq.n	800688c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
 800685c:	e016      	b.n	800688c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006868:	2b00      	cmp	r3, #0
 800686a:	d107      	bne.n	800687c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f022 0208 	bic.w	r2, r2, #8
 800687a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b00      	cmp	r3, #0
 8006882:	d003      	beq.n	800688c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	2220      	movs	r2, #32
 8006892:	409a      	lsls	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4013      	ands	r3, r2
 8006898:	2b00      	cmp	r3, #0
 800689a:	f000 808f 	beq.w	80069bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 0310 	and.w	r3, r3, #16
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 8087 	beq.w	80069bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b2:	2220      	movs	r2, #32
 80068b4:	409a      	lsls	r2, r3
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b05      	cmp	r3, #5
 80068c4:	d136      	bne.n	8006934 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f022 0216 	bic.w	r2, r2, #22
 80068d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	695a      	ldr	r2, [r3, #20]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80068e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d103      	bne.n	80068f6 <HAL_DMA_IRQHandler+0x1da>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d007      	beq.n	8006906 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f022 0208 	bic.w	r2, r2, #8
 8006904:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800690a:	223f      	movs	r2, #63	; 0x3f
 800690c:	409a      	lsls	r2, r3
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006926:	2b00      	cmp	r3, #0
 8006928:	d07e      	beq.n	8006a28 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	4798      	blx	r3
        }
        return;
 8006932:	e079      	b.n	8006a28 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d01d      	beq.n	800697e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800694c:	2b00      	cmp	r3, #0
 800694e:	d10d      	bne.n	800696c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006954:	2b00      	cmp	r3, #0
 8006956:	d031      	beq.n	80069bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
 8006960:	e02c      	b.n	80069bc <HAL_DMA_IRQHandler+0x2a0>
 8006962:	bf00      	nop
 8006964:	20000090 	.word	0x20000090
 8006968:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d023      	beq.n	80069bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
 800697c:	e01e      	b.n	80069bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10f      	bne.n	80069ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f022 0210 	bic.w	r2, r2, #16
 800699a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d003      	beq.n	80069bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d032      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c8:	f003 0301 	and.w	r3, r3, #1
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d022      	beq.n	8006a16 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2205      	movs	r2, #5
 80069d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681a      	ldr	r2, [r3, #0]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f022 0201 	bic.w	r2, r2, #1
 80069e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	3301      	adds	r3, #1
 80069ec:	60bb      	str	r3, [r7, #8]
 80069ee:	697a      	ldr	r2, [r7, #20]
 80069f0:	429a      	cmp	r2, r3
 80069f2:	d307      	bcc.n	8006a04 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1f2      	bne.n	80069e8 <HAL_DMA_IRQHandler+0x2cc>
 8006a02:	e000      	b.n	8006a06 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006a04:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d005      	beq.n	8006a2a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
 8006a26:	e000      	b.n	8006a2a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006a28:	bf00      	nop
    }
  }
}
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006a3c:	4618      	mov	r0, r3
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b085      	sub	sp, #20
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
 8006a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	2b40      	cmp	r3, #64	; 0x40
 8006a74:	d108      	bne.n	8006a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006a86:	e007      	b.n	8006a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	687a      	ldr	r2, [r7, #4]
 8006a96:	60da      	str	r2, [r3, #12]
}
 8006a98:	bf00      	nop
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b10      	subs	r3, #16
 8006ab4:	4a13      	ldr	r2, [pc, #76]	; (8006b04 <DMA_CalcBaseAndBitshift+0x60>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006abe:	4a12      	ldr	r2, [pc, #72]	; (8006b08 <DMA_CalcBaseAndBitshift+0x64>)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	781b      	ldrb	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b03      	cmp	r3, #3
 8006ad0:	d908      	bls.n	8006ae4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	461a      	mov	r2, r3
 8006ad8:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <DMA_CalcBaseAndBitshift+0x68>)
 8006ada:	4013      	ands	r3, r2
 8006adc:	1d1a      	adds	r2, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	659a      	str	r2, [r3, #88]	; 0x58
 8006ae2:	e006      	b.n	8006af2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	461a      	mov	r2, r3
 8006aea:	4b08      	ldr	r3, [pc, #32]	; (8006b0c <DMA_CalcBaseAndBitshift+0x68>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	aaaaaaab 	.word	0xaaaaaaab
 8006b08:	0801dd1c 	.word	0x0801dd1c
 8006b0c:	fffffc00 	.word	0xfffffc00

08006b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	699b      	ldr	r3, [r3, #24]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d11f      	bne.n	8006b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b03      	cmp	r3, #3
 8006b2e:	d856      	bhi.n	8006bde <DMA_CheckFifoParam+0xce>
 8006b30:	a201      	add	r2, pc, #4	; (adr r2, 8006b38 <DMA_CheckFifoParam+0x28>)
 8006b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b36:	bf00      	nop
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b5b 	.word	0x08006b5b
 8006b40:	08006b49 	.word	0x08006b49
 8006b44:	08006bdf 	.word	0x08006bdf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d046      	beq.n	8006be2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b58:	e043      	b.n	8006be2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006b62:	d140      	bne.n	8006be6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006b68:	e03d      	b.n	8006be6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b72:	d121      	bne.n	8006bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	2b03      	cmp	r3, #3
 8006b78:	d837      	bhi.n	8006bea <DMA_CheckFifoParam+0xda>
 8006b7a:	a201      	add	r2, pc, #4	; (adr r2, 8006b80 <DMA_CheckFifoParam+0x70>)
 8006b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b80:	08006b91 	.word	0x08006b91
 8006b84:	08006b97 	.word	0x08006b97
 8006b88:	08006b91 	.word	0x08006b91
 8006b8c:	08006ba9 	.word	0x08006ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	73fb      	strb	r3, [r7, #15]
      break;
 8006b94:	e030      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d025      	beq.n	8006bee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006ba6:	e022      	b.n	8006bee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bb0:	d11f      	bne.n	8006bf2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006bb6:	e01c      	b.n	8006bf2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d903      	bls.n	8006bc6 <DMA_CheckFifoParam+0xb6>
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d003      	beq.n	8006bcc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006bc4:	e018      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8006bca:	e015      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
      break;
 8006bdc:	e00b      	b.n	8006bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8006bde:	bf00      	nop
 8006be0:	e00a      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006be2:	bf00      	nop
 8006be4:	e008      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006be6:	bf00      	nop
 8006be8:	e006      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bea:	bf00      	nop
 8006bec:	e004      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bee:	bf00      	nop
 8006bf0:	e002      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;   
 8006bf2:	bf00      	nop
 8006bf4:	e000      	b.n	8006bf8 <DMA_CheckFifoParam+0xe8>
      break;
 8006bf6:	bf00      	nop
    }
  } 
  
  return status; 
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3714      	adds	r7, #20
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop

08006c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b089      	sub	sp, #36	; 0x24
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006c16:	2300      	movs	r3, #0
 8006c18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006c22:	2300      	movs	r3, #0
 8006c24:	61fb      	str	r3, [r7, #28]
 8006c26:	e175      	b.n	8006f14 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006c28:	2201      	movs	r2, #1
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c3c:	693a      	ldr	r2, [r7, #16]
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	f040 8164 	bne.w	8006f0e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	f003 0303 	and.w	r3, r3, #3
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	d005      	beq.n	8006c5e <HAL_GPIO_Init+0x56>
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b02      	cmp	r3, #2
 8006c5c:	d130      	bne.n	8006cc0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	689b      	ldr	r3, [r3, #8]
 8006c62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	2203      	movs	r2, #3
 8006c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c6e:	43db      	mvns	r3, r3
 8006c70:	69ba      	ldr	r2, [r7, #24]
 8006c72:	4013      	ands	r3, r2
 8006c74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	68da      	ldr	r2, [r3, #12]
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	005b      	lsls	r3, r3, #1
 8006c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c82:	69ba      	ldr	r2, [r7, #24]
 8006c84:	4313      	orrs	r3, r2
 8006c86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	69ba      	ldr	r2, [r7, #24]
 8006c8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006c94:	2201      	movs	r2, #1
 8006c96:	69fb      	ldr	r3, [r7, #28]
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	091b      	lsrs	r3, r3, #4
 8006caa:	f003 0201 	and.w	r2, r3, #1
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f003 0303 	and.w	r3, r3, #3
 8006cc8:	2b03      	cmp	r3, #3
 8006cca:	d017      	beq.n	8006cfc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	68db      	ldr	r3, [r3, #12]
 8006cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006cd2:	69fb      	ldr	r3, [r7, #28]
 8006cd4:	005b      	lsls	r3, r3, #1
 8006cd6:	2203      	movs	r2, #3
 8006cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cdc:	43db      	mvns	r3, r3
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689a      	ldr	r2, [r3, #8]
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf0:	69ba      	ldr	r2, [r7, #24]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	69ba      	ldr	r2, [r7, #24]
 8006cfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	f003 0303 	and.w	r3, r3, #3
 8006d04:	2b02      	cmp	r3, #2
 8006d06:	d123      	bne.n	8006d50 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	08da      	lsrs	r2, r3, #3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	3208      	adds	r2, #8
 8006d10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006d16:	69fb      	ldr	r3, [r7, #28]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	220f      	movs	r2, #15
 8006d20:	fa02 f303 	lsl.w	r3, r2, r3
 8006d24:	43db      	mvns	r3, r3
 8006d26:	69ba      	ldr	r2, [r7, #24]
 8006d28:	4013      	ands	r3, r2
 8006d2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	691a      	ldr	r2, [r3, #16]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	f003 0307 	and.w	r3, r3, #7
 8006d36:	009b      	lsls	r3, r3, #2
 8006d38:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	08da      	lsrs	r2, r3, #3
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3208      	adds	r2, #8
 8006d4a:	69b9      	ldr	r1, [r7, #24]
 8006d4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 0203 	and.w	r2, r3, #3
 8006d70:	69fb      	ldr	r3, [r7, #28]
 8006d72:	005b      	lsls	r3, r3, #1
 8006d74:	fa02 f303 	lsl.w	r3, r2, r3
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 80be 	beq.w	8006f0e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d92:	4b66      	ldr	r3, [pc, #408]	; (8006f2c <HAL_GPIO_Init+0x324>)
 8006d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d96:	4a65      	ldr	r2, [pc, #404]	; (8006f2c <HAL_GPIO_Init+0x324>)
 8006d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8006d9e:	4b63      	ldr	r3, [pc, #396]	; (8006f2c <HAL_GPIO_Init+0x324>)
 8006da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da6:	60fb      	str	r3, [r7, #12]
 8006da8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006daa:	4a61      	ldr	r2, [pc, #388]	; (8006f30 <HAL_GPIO_Init+0x328>)
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	089b      	lsrs	r3, r3, #2
 8006db0:	3302      	adds	r3, #2
 8006db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	f003 0303 	and.w	r3, r3, #3
 8006dbe:	009b      	lsls	r3, r3, #2
 8006dc0:	220f      	movs	r2, #15
 8006dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc6:	43db      	mvns	r3, r3
 8006dc8:	69ba      	ldr	r2, [r7, #24]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	4a58      	ldr	r2, [pc, #352]	; (8006f34 <HAL_GPIO_Init+0x32c>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d037      	beq.n	8006e46 <HAL_GPIO_Init+0x23e>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	4a57      	ldr	r2, [pc, #348]	; (8006f38 <HAL_GPIO_Init+0x330>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d031      	beq.n	8006e42 <HAL_GPIO_Init+0x23a>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a56      	ldr	r2, [pc, #344]	; (8006f3c <HAL_GPIO_Init+0x334>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d02b      	beq.n	8006e3e <HAL_GPIO_Init+0x236>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a55      	ldr	r2, [pc, #340]	; (8006f40 <HAL_GPIO_Init+0x338>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d025      	beq.n	8006e3a <HAL_GPIO_Init+0x232>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a54      	ldr	r2, [pc, #336]	; (8006f44 <HAL_GPIO_Init+0x33c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01f      	beq.n	8006e36 <HAL_GPIO_Init+0x22e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a53      	ldr	r2, [pc, #332]	; (8006f48 <HAL_GPIO_Init+0x340>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d019      	beq.n	8006e32 <HAL_GPIO_Init+0x22a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a52      	ldr	r2, [pc, #328]	; (8006f4c <HAL_GPIO_Init+0x344>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <HAL_GPIO_Init+0x226>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a51      	ldr	r2, [pc, #324]	; (8006f50 <HAL_GPIO_Init+0x348>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00d      	beq.n	8006e2a <HAL_GPIO_Init+0x222>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a50      	ldr	r2, [pc, #320]	; (8006f54 <HAL_GPIO_Init+0x34c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <HAL_GPIO_Init+0x21e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a4f      	ldr	r2, [pc, #316]	; (8006f58 <HAL_GPIO_Init+0x350>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d101      	bne.n	8006e22 <HAL_GPIO_Init+0x21a>
 8006e1e:	2309      	movs	r3, #9
 8006e20:	e012      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e22:	230a      	movs	r3, #10
 8006e24:	e010      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e26:	2308      	movs	r3, #8
 8006e28:	e00e      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e2a:	2307      	movs	r3, #7
 8006e2c:	e00c      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e2e:	2306      	movs	r3, #6
 8006e30:	e00a      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e32:	2305      	movs	r3, #5
 8006e34:	e008      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e36:	2304      	movs	r3, #4
 8006e38:	e006      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e3a:	2303      	movs	r3, #3
 8006e3c:	e004      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e3e:	2302      	movs	r3, #2
 8006e40:	e002      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <HAL_GPIO_Init+0x240>
 8006e46:	2300      	movs	r3, #0
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	f002 0203 	and.w	r2, r2, #3
 8006e4e:	0092      	lsls	r2, r2, #2
 8006e50:	4093      	lsls	r3, r2
 8006e52:	69ba      	ldr	r2, [r7, #24]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006e58:	4935      	ldr	r1, [pc, #212]	; (8006f30 <HAL_GPIO_Init+0x328>)
 8006e5a:	69fb      	ldr	r3, [r7, #28]
 8006e5c:	089b      	lsrs	r3, r3, #2
 8006e5e:	3302      	adds	r3, #2
 8006e60:	69ba      	ldr	r2, [r7, #24]
 8006e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006e66:	4b3d      	ldr	r3, [pc, #244]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e6c:	693b      	ldr	r3, [r7, #16]
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	4013      	ands	r3, r2
 8006e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d003      	beq.n	8006e8a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006e82:	69ba      	ldr	r2, [r7, #24]
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006e8a:	4a34      	ldr	r2, [pc, #208]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006e90:	4b32      	ldr	r3, [pc, #200]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	69ba      	ldr	r2, [r7, #24]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d003      	beq.n	8006eb4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006eac:	69ba      	ldr	r2, [r7, #24]
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006eb4:	4a29      	ldr	r2, [pc, #164]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006eba:	4b28      	ldr	r3, [pc, #160]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	43db      	mvns	r3, r3
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	685b      	ldr	r3, [r3, #4]
 8006ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006ed6:	69ba      	ldr	r2, [r7, #24]
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006ede:	4a1f      	ldr	r2, [pc, #124]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006ee0:	69bb      	ldr	r3, [r7, #24]
 8006ee2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ee4:	4b1d      	ldr	r3, [pc, #116]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d003      	beq.n	8006f08 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	4313      	orrs	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f08:	4a14      	ldr	r2, [pc, #80]	; (8006f5c <HAL_GPIO_Init+0x354>)
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006f0e:	69fb      	ldr	r3, [r7, #28]
 8006f10:	3301      	adds	r3, #1
 8006f12:	61fb      	str	r3, [r7, #28]
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	2b0f      	cmp	r3, #15
 8006f18:	f67f ae86 	bls.w	8006c28 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	bf00      	nop
 8006f20:	3724      	adds	r7, #36	; 0x24
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr
 8006f2a:	bf00      	nop
 8006f2c:	40023800 	.word	0x40023800
 8006f30:	40013800 	.word	0x40013800
 8006f34:	40020000 	.word	0x40020000
 8006f38:	40020400 	.word	0x40020400
 8006f3c:	40020800 	.word	0x40020800
 8006f40:	40020c00 	.word	0x40020c00
 8006f44:	40021000 	.word	0x40021000
 8006f48:	40021400 	.word	0x40021400
 8006f4c:	40021800 	.word	0x40021800
 8006f50:	40021c00 	.word	0x40021c00
 8006f54:	40022000 	.word	0x40022000
 8006f58:	40022400 	.word	0x40022400
 8006f5c:	40013c00 	.word	0x40013c00

08006f60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b085      	sub	sp, #20
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
 8006f68:	460b      	mov	r3, r1
 8006f6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	887b      	ldrh	r3, [r7, #2]
 8006f72:	4013      	ands	r3, r2
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d002      	beq.n	8006f7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
 8006f7c:	e001      	b.n	8006f82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3714      	adds	r7, #20
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b083      	sub	sp, #12
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	807b      	strh	r3, [r7, #2]
 8006f9c:	4613      	mov	r3, r2
 8006f9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006fa0:	787b      	ldrb	r3, [r7, #1]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d003      	beq.n	8006fae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006fa6:	887a      	ldrh	r2, [r7, #2]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006fac:	e003      	b.n	8006fb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006fae:	887b      	ldrh	r3, [r7, #2]
 8006fb0:	041a      	lsls	r2, r3, #16
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	619a      	str	r2, [r3, #24]
}
 8006fb6:	bf00      	nop
 8006fb8:	370c      	adds	r7, #12
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
	...

08006fc4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b082      	sub	sp, #8
 8006fc8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006fca:	2300      	movs	r3, #0
 8006fcc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006fce:	4b23      	ldr	r3, [pc, #140]	; (800705c <HAL_PWREx_EnableOverDrive+0x98>)
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	4a22      	ldr	r2, [pc, #136]	; (800705c <HAL_PWREx_EnableOverDrive+0x98>)
 8006fd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd8:	6413      	str	r3, [r2, #64]	; 0x40
 8006fda:	4b20      	ldr	r3, [pc, #128]	; (800705c <HAL_PWREx_EnableOverDrive+0x98>)
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006fe6:	4b1e      	ldr	r3, [pc, #120]	; (8007060 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1d      	ldr	r2, [pc, #116]	; (8007060 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ff0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ff2:	f7fd fecf 	bl	8004d94 <HAL_GetTick>
 8006ff6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ff8:	e009      	b.n	800700e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ffa:	f7fd fecb 	bl	8004d94 <HAL_GetTick>
 8006ffe:	4602      	mov	r2, r0
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	1ad3      	subs	r3, r2, r3
 8007004:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007008:	d901      	bls.n	800700e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e022      	b.n	8007054 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800700e:	4b14      	ldr	r3, [pc, #80]	; (8007060 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007016:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800701a:	d1ee      	bne.n	8006ffa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800701c:	4b10      	ldr	r3, [pc, #64]	; (8007060 <HAL_PWREx_EnableOverDrive+0x9c>)
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a0f      	ldr	r2, [pc, #60]	; (8007060 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007022:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007026:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007028:	f7fd feb4 	bl	8004d94 <HAL_GetTick>
 800702c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800702e:	e009      	b.n	8007044 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007030:	f7fd feb0 	bl	8004d94 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800703e:	d901      	bls.n	8007044 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007040:	2303      	movs	r3, #3
 8007042:	e007      	b.n	8007054 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007044:	4b06      	ldr	r3, [pc, #24]	; (8007060 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800704c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007050:	d1ee      	bne.n	8007030 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007052:	2300      	movs	r3, #0
}
 8007054:	4618      	mov	r0, r3
 8007056:	3708      	adds	r7, #8
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	40023800 	.word	0x40023800
 8007060:	40007000 	.word	0x40007000

08007064 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800706c:	2300      	movs	r3, #0
 800706e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007076:	2301      	movs	r3, #1
 8007078:	e291      	b.n	800759e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8087 	beq.w	8007196 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007088:	4b96      	ldr	r3, [pc, #600]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f003 030c 	and.w	r3, r3, #12
 8007090:	2b04      	cmp	r3, #4
 8007092:	d00c      	beq.n	80070ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007094:	4b93      	ldr	r3, [pc, #588]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 030c 	and.w	r3, r3, #12
 800709c:	2b08      	cmp	r3, #8
 800709e:	d112      	bne.n	80070c6 <HAL_RCC_OscConfig+0x62>
 80070a0:	4b90      	ldr	r3, [pc, #576]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ac:	d10b      	bne.n	80070c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ae:	4b8d      	ldr	r3, [pc, #564]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d06c      	beq.n	8007194 <HAL_RCC_OscConfig+0x130>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d168      	bne.n	8007194 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e26b      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ce:	d106      	bne.n	80070de <HAL_RCC_OscConfig+0x7a>
 80070d0:	4b84      	ldr	r3, [pc, #528]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a83      	ldr	r2, [pc, #524]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070da:	6013      	str	r3, [r2, #0]
 80070dc:	e02e      	b.n	800713c <HAL_RCC_OscConfig+0xd8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d10c      	bne.n	8007100 <HAL_RCC_OscConfig+0x9c>
 80070e6:	4b7f      	ldr	r3, [pc, #508]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a7e      	ldr	r2, [pc, #504]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070f0:	6013      	str	r3, [r2, #0]
 80070f2:	4b7c      	ldr	r3, [pc, #496]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a7b      	ldr	r2, [pc, #492]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80070f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070fc:	6013      	str	r3, [r2, #0]
 80070fe:	e01d      	b.n	800713c <HAL_RCC_OscConfig+0xd8>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007108:	d10c      	bne.n	8007124 <HAL_RCC_OscConfig+0xc0>
 800710a:	4b76      	ldr	r3, [pc, #472]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a75      	ldr	r2, [pc, #468]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007110:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007114:	6013      	str	r3, [r2, #0]
 8007116:	4b73      	ldr	r3, [pc, #460]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a72      	ldr	r2, [pc, #456]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800711c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007120:	6013      	str	r3, [r2, #0]
 8007122:	e00b      	b.n	800713c <HAL_RCC_OscConfig+0xd8>
 8007124:	4b6f      	ldr	r3, [pc, #444]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4a6e      	ldr	r2, [pc, #440]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800712a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	4b6c      	ldr	r3, [pc, #432]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	4a6b      	ldr	r2, [pc, #428]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007136:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800713a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d013      	beq.n	800716c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007144:	f7fd fe26 	bl	8004d94 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800714c:	f7fd fe22 	bl	8004d94 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b64      	cmp	r3, #100	; 0x64
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e21f      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800715e:	4b61      	ldr	r3, [pc, #388]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0xe8>
 800716a:	e014      	b.n	8007196 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800716c:	f7fd fe12 	bl	8004d94 <HAL_GetTick>
 8007170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007172:	e008      	b.n	8007186 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007174:	f7fd fe0e 	bl	8004d94 <HAL_GetTick>
 8007178:	4602      	mov	r2, r0
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	1ad3      	subs	r3, r2, r3
 800717e:	2b64      	cmp	r3, #100	; 0x64
 8007180:	d901      	bls.n	8007186 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007182:	2303      	movs	r3, #3
 8007184:	e20b      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007186:	4b57      	ldr	r3, [pc, #348]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d1f0      	bne.n	8007174 <HAL_RCC_OscConfig+0x110>
 8007192:	e000      	b.n	8007196 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007194:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d069      	beq.n	8007276 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80071a2:	4b50      	ldr	r3, [pc, #320]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	f003 030c 	and.w	r3, r3, #12
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d00b      	beq.n	80071c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ae:	4b4d      	ldr	r3, [pc, #308]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f003 030c 	and.w	r3, r3, #12
 80071b6:	2b08      	cmp	r3, #8
 80071b8:	d11c      	bne.n	80071f4 <HAL_RCC_OscConfig+0x190>
 80071ba:	4b4a      	ldr	r3, [pc, #296]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d116      	bne.n	80071f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071c6:	4b47      	ldr	r3, [pc, #284]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d005      	beq.n	80071de <HAL_RCC_OscConfig+0x17a>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	68db      	ldr	r3, [r3, #12]
 80071d6:	2b01      	cmp	r3, #1
 80071d8:	d001      	beq.n	80071de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e1df      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071de:	4b41      	ldr	r3, [pc, #260]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	00db      	lsls	r3, r3, #3
 80071ec:	493d      	ldr	r1, [pc, #244]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071f2:	e040      	b.n	8007276 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d023      	beq.n	8007244 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80071fc:	4b39      	ldr	r3, [pc, #228]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a38      	ldr	r2, [pc, #224]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007202:	f043 0301 	orr.w	r3, r3, #1
 8007206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007208:	f7fd fdc4 	bl	8004d94 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007210:	f7fd fdc0 	bl	8004d94 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b02      	cmp	r3, #2
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1bd      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007222:	4b30      	ldr	r3, [pc, #192]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f003 0302 	and.w	r3, r3, #2
 800722a:	2b00      	cmp	r3, #0
 800722c:	d0f0      	beq.n	8007210 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800722e:	4b2d      	ldr	r3, [pc, #180]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4929      	ldr	r1, [pc, #164]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800723e:	4313      	orrs	r3, r2
 8007240:	600b      	str	r3, [r1, #0]
 8007242:	e018      	b.n	8007276 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007244:	4b27      	ldr	r3, [pc, #156]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a26      	ldr	r2, [pc, #152]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800724a:	f023 0301 	bic.w	r3, r3, #1
 800724e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007250:	f7fd fda0 	bl	8004d94 <HAL_GetTick>
 8007254:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007256:	e008      	b.n	800726a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007258:	f7fd fd9c 	bl	8004d94 <HAL_GetTick>
 800725c:	4602      	mov	r2, r0
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	1ad3      	subs	r3, r2, r3
 8007262:	2b02      	cmp	r3, #2
 8007264:	d901      	bls.n	800726a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007266:	2303      	movs	r3, #3
 8007268:	e199      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800726a:	4b1e      	ldr	r3, [pc, #120]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1f0      	bne.n	8007258 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0308 	and.w	r3, r3, #8
 800727e:	2b00      	cmp	r3, #0
 8007280:	d038      	beq.n	80072f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	695b      	ldr	r3, [r3, #20]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d019      	beq.n	80072be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800728a:	4b16      	ldr	r3, [pc, #88]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 800728c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728e:	4a15      	ldr	r2, [pc, #84]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 8007290:	f043 0301 	orr.w	r3, r3, #1
 8007294:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007296:	f7fd fd7d 	bl	8004d94 <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800729e:	f7fd fd79 	bl	8004d94 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e176      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072b0:	4b0c      	ldr	r3, [pc, #48]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80072b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072b4:	f003 0302 	and.w	r3, r3, #2
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f0      	beq.n	800729e <HAL_RCC_OscConfig+0x23a>
 80072bc:	e01a      	b.n	80072f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072be:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80072c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072c2:	4a08      	ldr	r2, [pc, #32]	; (80072e4 <HAL_RCC_OscConfig+0x280>)
 80072c4:	f023 0301 	bic.w	r3, r3, #1
 80072c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ca:	f7fd fd63 	bl	8004d94 <HAL_GetTick>
 80072ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d0:	e00a      	b.n	80072e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80072d2:	f7fd fd5f 	bl	8004d94 <HAL_GetTick>
 80072d6:	4602      	mov	r2, r0
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	2b02      	cmp	r3, #2
 80072de:	d903      	bls.n	80072e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80072e0:	2303      	movs	r3, #3
 80072e2:	e15c      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
 80072e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072e8:	4b91      	ldr	r3, [pc, #580]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80072ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072ec:	f003 0302 	and.w	r3, r3, #2
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d1ee      	bne.n	80072d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f003 0304 	and.w	r3, r3, #4
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	f000 80a4 	beq.w	800744a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007302:	4b8b      	ldr	r3, [pc, #556]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d10d      	bne.n	800732a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800730e:	4b88      	ldr	r3, [pc, #544]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	4a87      	ldr	r2, [pc, #540]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007314:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007318:	6413      	str	r3, [r2, #64]	; 0x40
 800731a:	4b85      	ldr	r3, [pc, #532]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007322:	60bb      	str	r3, [r7, #8]
 8007324:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007326:	2301      	movs	r3, #1
 8007328:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800732a:	4b82      	ldr	r3, [pc, #520]	; (8007534 <HAL_RCC_OscConfig+0x4d0>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007332:	2b00      	cmp	r3, #0
 8007334:	d118      	bne.n	8007368 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007336:	4b7f      	ldr	r3, [pc, #508]	; (8007534 <HAL_RCC_OscConfig+0x4d0>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a7e      	ldr	r2, [pc, #504]	; (8007534 <HAL_RCC_OscConfig+0x4d0>)
 800733c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007340:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007342:	f7fd fd27 	bl	8004d94 <HAL_GetTick>
 8007346:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007348:	e008      	b.n	800735c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800734a:	f7fd fd23 	bl	8004d94 <HAL_GetTick>
 800734e:	4602      	mov	r2, r0
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	1ad3      	subs	r3, r2, r3
 8007354:	2b64      	cmp	r3, #100	; 0x64
 8007356:	d901      	bls.n	800735c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007358:	2303      	movs	r3, #3
 800735a:	e120      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800735c:	4b75      	ldr	r3, [pc, #468]	; (8007534 <HAL_RCC_OscConfig+0x4d0>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007364:	2b00      	cmp	r3, #0
 8007366:	d0f0      	beq.n	800734a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	689b      	ldr	r3, [r3, #8]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d106      	bne.n	800737e <HAL_RCC_OscConfig+0x31a>
 8007370:	4b6f      	ldr	r3, [pc, #444]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007374:	4a6e      	ldr	r2, [pc, #440]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007376:	f043 0301 	orr.w	r3, r3, #1
 800737a:	6713      	str	r3, [r2, #112]	; 0x70
 800737c:	e02d      	b.n	80073da <HAL_RCC_OscConfig+0x376>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10c      	bne.n	80073a0 <HAL_RCC_OscConfig+0x33c>
 8007386:	4b6a      	ldr	r3, [pc, #424]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800738a:	4a69      	ldr	r2, [pc, #420]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 800738c:	f023 0301 	bic.w	r3, r3, #1
 8007390:	6713      	str	r3, [r2, #112]	; 0x70
 8007392:	4b67      	ldr	r3, [pc, #412]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007396:	4a66      	ldr	r2, [pc, #408]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007398:	f023 0304 	bic.w	r3, r3, #4
 800739c:	6713      	str	r3, [r2, #112]	; 0x70
 800739e:	e01c      	b.n	80073da <HAL_RCC_OscConfig+0x376>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689b      	ldr	r3, [r3, #8]
 80073a4:	2b05      	cmp	r3, #5
 80073a6:	d10c      	bne.n	80073c2 <HAL_RCC_OscConfig+0x35e>
 80073a8:	4b61      	ldr	r3, [pc, #388]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ac:	4a60      	ldr	r2, [pc, #384]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073ae:	f043 0304 	orr.w	r3, r3, #4
 80073b2:	6713      	str	r3, [r2, #112]	; 0x70
 80073b4:	4b5e      	ldr	r3, [pc, #376]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a5d      	ldr	r2, [pc, #372]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073ba:	f043 0301 	orr.w	r3, r3, #1
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
 80073c0:	e00b      	b.n	80073da <HAL_RCC_OscConfig+0x376>
 80073c2:	4b5b      	ldr	r3, [pc, #364]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c6:	4a5a      	ldr	r2, [pc, #360]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073c8:	f023 0301 	bic.w	r3, r3, #1
 80073cc:	6713      	str	r3, [r2, #112]	; 0x70
 80073ce:	4b58      	ldr	r3, [pc, #352]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d2:	4a57      	ldr	r2, [pc, #348]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80073d4:	f023 0304 	bic.w	r3, r3, #4
 80073d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d015      	beq.n	800740e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073e2:	f7fd fcd7 	bl	8004d94 <HAL_GetTick>
 80073e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073e8:	e00a      	b.n	8007400 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073ea:	f7fd fcd3 	bl	8004d94 <HAL_GetTick>
 80073ee:	4602      	mov	r2, r0
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	1ad3      	subs	r3, r2, r3
 80073f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d901      	bls.n	8007400 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80073fc:	2303      	movs	r3, #3
 80073fe:	e0ce      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007400:	4b4b      	ldr	r3, [pc, #300]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007402:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007404:	f003 0302 	and.w	r3, r3, #2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0ee      	beq.n	80073ea <HAL_RCC_OscConfig+0x386>
 800740c:	e014      	b.n	8007438 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800740e:	f7fd fcc1 	bl	8004d94 <HAL_GetTick>
 8007412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007414:	e00a      	b.n	800742c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007416:	f7fd fcbd 	bl	8004d94 <HAL_GetTick>
 800741a:	4602      	mov	r2, r0
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1ad3      	subs	r3, r2, r3
 8007420:	f241 3288 	movw	r2, #5000	; 0x1388
 8007424:	4293      	cmp	r3, r2
 8007426:	d901      	bls.n	800742c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e0b8      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800742c:	4b40      	ldr	r3, [pc, #256]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 800742e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1ee      	bne.n	8007416 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007438:	7dfb      	ldrb	r3, [r7, #23]
 800743a:	2b01      	cmp	r3, #1
 800743c:	d105      	bne.n	800744a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800743e:	4b3c      	ldr	r3, [pc, #240]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	4a3b      	ldr	r2, [pc, #236]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007444:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007448:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	699b      	ldr	r3, [r3, #24]
 800744e:	2b00      	cmp	r3, #0
 8007450:	f000 80a4 	beq.w	800759c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007454:	4b36      	ldr	r3, [pc, #216]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f003 030c 	and.w	r3, r3, #12
 800745c:	2b08      	cmp	r3, #8
 800745e:	d06b      	beq.n	8007538 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	2b02      	cmp	r3, #2
 8007466:	d149      	bne.n	80074fc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007468:	4b31      	ldr	r3, [pc, #196]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a30      	ldr	r2, [pc, #192]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 800746e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fd fc8e 	bl	8004d94 <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747c:	f7fd fc8a 	bl	8004d94 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e087      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800748e:	4b28      	ldr	r3, [pc, #160]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	69da      	ldr	r2, [r3, #28]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	019b      	lsls	r3, r3, #6
 80074aa:	431a      	orrs	r2, r3
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b0:	085b      	lsrs	r3, r3, #1
 80074b2:	3b01      	subs	r3, #1
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	061b      	lsls	r3, r3, #24
 80074be:	4313      	orrs	r3, r2
 80074c0:	4a1b      	ldr	r2, [pc, #108]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80074c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074c6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074c8:	4b19      	ldr	r3, [pc, #100]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a18      	ldr	r2, [pc, #96]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80074ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80074d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d4:	f7fd fc5e 	bl	8004d94 <HAL_GetTick>
 80074d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074da:	e008      	b.n	80074ee <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074dc:	f7fd fc5a 	bl	8004d94 <HAL_GetTick>
 80074e0:	4602      	mov	r2, r0
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	1ad3      	subs	r3, r2, r3
 80074e6:	2b02      	cmp	r3, #2
 80074e8:	d901      	bls.n	80074ee <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e057      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d0f0      	beq.n	80074dc <HAL_RCC_OscConfig+0x478>
 80074fa:	e04f      	b.n	800759c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074fc:	4b0c      	ldr	r3, [pc, #48]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0b      	ldr	r2, [pc, #44]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007502:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007508:	f7fd fc44 	bl	8004d94 <HAL_GetTick>
 800750c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800750e:	e008      	b.n	8007522 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007510:	f7fd fc40 	bl	8004d94 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	2b02      	cmp	r3, #2
 800751c:	d901      	bls.n	8007522 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e03d      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007522:	4b03      	ldr	r3, [pc, #12]	; (8007530 <HAL_RCC_OscConfig+0x4cc>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752a:	2b00      	cmp	r3, #0
 800752c:	d1f0      	bne.n	8007510 <HAL_RCC_OscConfig+0x4ac>
 800752e:	e035      	b.n	800759c <HAL_RCC_OscConfig+0x538>
 8007530:	40023800 	.word	0x40023800
 8007534:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007538:	4b1b      	ldr	r3, [pc, #108]	; (80075a8 <HAL_RCC_OscConfig+0x544>)
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	2b01      	cmp	r3, #1
 8007544:	d028      	beq.n	8007598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007550:	429a      	cmp	r2, r3
 8007552:	d121      	bne.n	8007598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800755e:	429a      	cmp	r2, r3
 8007560:	d11a      	bne.n	8007598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007562:	68fa      	ldr	r2, [r7, #12]
 8007564:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007568:	4013      	ands	r3, r2
 800756a:	687a      	ldr	r2, [r7, #4]
 800756c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800756e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007570:	4293      	cmp	r3, r2
 8007572:	d111      	bne.n	8007598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	085b      	lsrs	r3, r3, #1
 8007580:	3b01      	subs	r3, #1
 8007582:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007584:	429a      	cmp	r2, r3
 8007586:	d107      	bne.n	8007598 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007592:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007594:	429a      	cmp	r2, r3
 8007596:	d001      	beq.n	800759c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e000      	b.n	800759e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	40023800 	.word	0x40023800

080075ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80075b6:	2300      	movs	r3, #0
 80075b8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80075c0:	2301      	movs	r3, #1
 80075c2:	e0d0      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80075c4:	4b6a      	ldr	r3, [pc, #424]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 030f 	and.w	r3, r3, #15
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d910      	bls.n	80075f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075d2:	4b67      	ldr	r3, [pc, #412]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f023 020f 	bic.w	r2, r3, #15
 80075da:	4965      	ldr	r1, [pc, #404]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	4313      	orrs	r3, r2
 80075e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80075e2:	4b63      	ldr	r3, [pc, #396]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 030f 	and.w	r3, r3, #15
 80075ea:	683a      	ldr	r2, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d001      	beq.n	80075f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80075f0:	2301      	movs	r3, #1
 80075f2:	e0b8      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f003 0302 	and.w	r3, r3, #2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d020      	beq.n	8007642 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f003 0304 	and.w	r3, r3, #4
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800760c:	4b59      	ldr	r3, [pc, #356]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	4a58      	ldr	r2, [pc, #352]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007612:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007616:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0308 	and.w	r3, r3, #8
 8007620:	2b00      	cmp	r3, #0
 8007622:	d005      	beq.n	8007630 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007624:	4b53      	ldr	r3, [pc, #332]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	4a52      	ldr	r2, [pc, #328]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800762a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800762e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007630:	4b50      	ldr	r3, [pc, #320]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	494d      	ldr	r1, [pc, #308]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800763e:	4313      	orrs	r3, r2
 8007640:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d040      	beq.n	80076d0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2b01      	cmp	r3, #1
 8007654:	d107      	bne.n	8007666 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007656:	4b47      	ldr	r3, [pc, #284]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d115      	bne.n	800768e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e07f      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	2b02      	cmp	r3, #2
 800766c:	d107      	bne.n	800767e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800766e:	4b41      	ldr	r3, [pc, #260]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007676:	2b00      	cmp	r3, #0
 8007678:	d109      	bne.n	800768e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e073      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800767e:	4b3d      	ldr	r3, [pc, #244]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0302 	and.w	r3, r3, #2
 8007686:	2b00      	cmp	r3, #0
 8007688:	d101      	bne.n	800768e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800768a:	2301      	movs	r3, #1
 800768c:	e06b      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800768e:	4b39      	ldr	r3, [pc, #228]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f023 0203 	bic.w	r2, r3, #3
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	4936      	ldr	r1, [pc, #216]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800769c:	4313      	orrs	r3, r2
 800769e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80076a0:	f7fd fb78 	bl	8004d94 <HAL_GetTick>
 80076a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	e00a      	b.n	80076be <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80076a8:	f7fd fb74 	bl	8004d94 <HAL_GetTick>
 80076ac:	4602      	mov	r2, r0
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e053      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076be:	4b2d      	ldr	r3, [pc, #180]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 80076c0:	689b      	ldr	r3, [r3, #8]
 80076c2:	f003 020c 	and.w	r2, r3, #12
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d1eb      	bne.n	80076a8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076d0:	4b27      	ldr	r3, [pc, #156]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f003 030f 	and.w	r3, r3, #15
 80076d8:	683a      	ldr	r2, [r7, #0]
 80076da:	429a      	cmp	r2, r3
 80076dc:	d210      	bcs.n	8007700 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076de:	4b24      	ldr	r3, [pc, #144]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f023 020f 	bic.w	r2, r3, #15
 80076e6:	4922      	ldr	r1, [pc, #136]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	4313      	orrs	r3, r2
 80076ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ee:	4b20      	ldr	r3, [pc, #128]	; (8007770 <HAL_RCC_ClockConfig+0x1c4>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 030f 	and.w	r3, r3, #15
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d001      	beq.n	8007700 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e032      	b.n	8007766 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800770c:	4b19      	ldr	r3, [pc, #100]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	68db      	ldr	r3, [r3, #12]
 8007718:	4916      	ldr	r1, [pc, #88]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800771a:	4313      	orrs	r3, r2
 800771c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0308 	and.w	r3, r3, #8
 8007726:	2b00      	cmp	r3, #0
 8007728:	d009      	beq.n	800773e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800772a:	4b12      	ldr	r3, [pc, #72]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	00db      	lsls	r3, r3, #3
 8007738:	490e      	ldr	r1, [pc, #56]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 800773a:	4313      	orrs	r3, r2
 800773c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800773e:	f000 f821 	bl	8007784 <HAL_RCC_GetSysClockFreq>
 8007742:	4602      	mov	r2, r0
 8007744:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <HAL_RCC_ClockConfig+0x1c8>)
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	091b      	lsrs	r3, r3, #4
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	490a      	ldr	r1, [pc, #40]	; (8007778 <HAL_RCC_ClockConfig+0x1cc>)
 8007750:	5ccb      	ldrb	r3, [r1, r3]
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	4a09      	ldr	r2, [pc, #36]	; (800777c <HAL_RCC_ClockConfig+0x1d0>)
 8007758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800775a:	4b09      	ldr	r3, [pc, #36]	; (8007780 <HAL_RCC_ClockConfig+0x1d4>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7fd fad4 	bl	8004d0c <HAL_InitTick>

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
 800776e:	bf00      	nop
 8007770:	40023c00 	.word	0x40023c00
 8007774:	40023800 	.word	0x40023800
 8007778:	0800e8dc 	.word	0x0800e8dc
 800777c:	20000090 	.word	0x20000090
 8007780:	20000094 	.word	0x20000094

08007784 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007788:	b094      	sub	sp, #80	; 0x50
 800778a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800778c:	2300      	movs	r3, #0
 800778e:	647b      	str	r3, [r7, #68]	; 0x44
 8007790:	2300      	movs	r3, #0
 8007792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007794:	2300      	movs	r3, #0
 8007796:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007798:	2300      	movs	r3, #0
 800779a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800779c:	4b79      	ldr	r3, [pc, #484]	; (8007984 <HAL_RCC_GetSysClockFreq+0x200>)
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 030c 	and.w	r3, r3, #12
 80077a4:	2b08      	cmp	r3, #8
 80077a6:	d00d      	beq.n	80077c4 <HAL_RCC_GetSysClockFreq+0x40>
 80077a8:	2b08      	cmp	r3, #8
 80077aa:	f200 80e1 	bhi.w	8007970 <HAL_RCC_GetSysClockFreq+0x1ec>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d002      	beq.n	80077b8 <HAL_RCC_GetSysClockFreq+0x34>
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d003      	beq.n	80077be <HAL_RCC_GetSysClockFreq+0x3a>
 80077b6:	e0db      	b.n	8007970 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80077b8:	4b73      	ldr	r3, [pc, #460]	; (8007988 <HAL_RCC_GetSysClockFreq+0x204>)
 80077ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077bc:	e0db      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80077be:	4b72      	ldr	r3, [pc, #456]	; (8007988 <HAL_RCC_GetSysClockFreq+0x204>)
 80077c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80077c2:	e0d8      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077c4:	4b6f      	ldr	r3, [pc, #444]	; (8007984 <HAL_RCC_GetSysClockFreq+0x200>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077cc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80077ce:	4b6d      	ldr	r3, [pc, #436]	; (8007984 <HAL_RCC_GetSysClockFreq+0x200>)
 80077d0:	685b      	ldr	r3, [r3, #4]
 80077d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d063      	beq.n	80078a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077da:	4b6a      	ldr	r3, [pc, #424]	; (8007984 <HAL_RCC_GetSysClockFreq+0x200>)
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	099b      	lsrs	r3, r3, #6
 80077e0:	2200      	movs	r2, #0
 80077e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80077e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80077e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ec:	633b      	str	r3, [r7, #48]	; 0x30
 80077ee:	2300      	movs	r3, #0
 80077f0:	637b      	str	r3, [r7, #52]	; 0x34
 80077f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80077f6:	4622      	mov	r2, r4
 80077f8:	462b      	mov	r3, r5
 80077fa:	f04f 0000 	mov.w	r0, #0
 80077fe:	f04f 0100 	mov.w	r1, #0
 8007802:	0159      	lsls	r1, r3, #5
 8007804:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007808:	0150      	lsls	r0, r2, #5
 800780a:	4602      	mov	r2, r0
 800780c:	460b      	mov	r3, r1
 800780e:	4621      	mov	r1, r4
 8007810:	1a51      	subs	r1, r2, r1
 8007812:	6139      	str	r1, [r7, #16]
 8007814:	4629      	mov	r1, r5
 8007816:	eb63 0301 	sbc.w	r3, r3, r1
 800781a:	617b      	str	r3, [r7, #20]
 800781c:	f04f 0200 	mov.w	r2, #0
 8007820:	f04f 0300 	mov.w	r3, #0
 8007824:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007828:	4659      	mov	r1, fp
 800782a:	018b      	lsls	r3, r1, #6
 800782c:	4651      	mov	r1, sl
 800782e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007832:	4651      	mov	r1, sl
 8007834:	018a      	lsls	r2, r1, #6
 8007836:	4651      	mov	r1, sl
 8007838:	ebb2 0801 	subs.w	r8, r2, r1
 800783c:	4659      	mov	r1, fp
 800783e:	eb63 0901 	sbc.w	r9, r3, r1
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800784e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007852:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007856:	4690      	mov	r8, r2
 8007858:	4699      	mov	r9, r3
 800785a:	4623      	mov	r3, r4
 800785c:	eb18 0303 	adds.w	r3, r8, r3
 8007860:	60bb      	str	r3, [r7, #8]
 8007862:	462b      	mov	r3, r5
 8007864:	eb49 0303 	adc.w	r3, r9, r3
 8007868:	60fb      	str	r3, [r7, #12]
 800786a:	f04f 0200 	mov.w	r2, #0
 800786e:	f04f 0300 	mov.w	r3, #0
 8007872:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007876:	4629      	mov	r1, r5
 8007878:	028b      	lsls	r3, r1, #10
 800787a:	4621      	mov	r1, r4
 800787c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007880:	4621      	mov	r1, r4
 8007882:	028a      	lsls	r2, r1, #10
 8007884:	4610      	mov	r0, r2
 8007886:	4619      	mov	r1, r3
 8007888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800788a:	2200      	movs	r2, #0
 800788c:	62bb      	str	r3, [r7, #40]	; 0x28
 800788e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007890:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007894:	f7f9 f932 	bl	8000afc <__aeabi_uldivmod>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	4613      	mov	r3, r2
 800789e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80078a0:	e058      	b.n	8007954 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80078a2:	4b38      	ldr	r3, [pc, #224]	; (8007984 <HAL_RCC_GetSysClockFreq+0x200>)
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	099b      	lsrs	r3, r3, #6
 80078a8:	2200      	movs	r2, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	4611      	mov	r1, r2
 80078ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80078b2:	623b      	str	r3, [r7, #32]
 80078b4:	2300      	movs	r3, #0
 80078b6:	627b      	str	r3, [r7, #36]	; 0x24
 80078b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80078bc:	4642      	mov	r2, r8
 80078be:	464b      	mov	r3, r9
 80078c0:	f04f 0000 	mov.w	r0, #0
 80078c4:	f04f 0100 	mov.w	r1, #0
 80078c8:	0159      	lsls	r1, r3, #5
 80078ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80078ce:	0150      	lsls	r0, r2, #5
 80078d0:	4602      	mov	r2, r0
 80078d2:	460b      	mov	r3, r1
 80078d4:	4641      	mov	r1, r8
 80078d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80078da:	4649      	mov	r1, r9
 80078dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80078ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80078f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80078f4:	ebb2 040a 	subs.w	r4, r2, sl
 80078f8:	eb63 050b 	sbc.w	r5, r3, fp
 80078fc:	f04f 0200 	mov.w	r2, #0
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	00eb      	lsls	r3, r5, #3
 8007906:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800790a:	00e2      	lsls	r2, r4, #3
 800790c:	4614      	mov	r4, r2
 800790e:	461d      	mov	r5, r3
 8007910:	4643      	mov	r3, r8
 8007912:	18e3      	adds	r3, r4, r3
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	464b      	mov	r3, r9
 8007918:	eb45 0303 	adc.w	r3, r5, r3
 800791c:	607b      	str	r3, [r7, #4]
 800791e:	f04f 0200 	mov.w	r2, #0
 8007922:	f04f 0300 	mov.w	r3, #0
 8007926:	e9d7 4500 	ldrd	r4, r5, [r7]
 800792a:	4629      	mov	r1, r5
 800792c:	028b      	lsls	r3, r1, #10
 800792e:	4621      	mov	r1, r4
 8007930:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007934:	4621      	mov	r1, r4
 8007936:	028a      	lsls	r2, r1, #10
 8007938:	4610      	mov	r0, r2
 800793a:	4619      	mov	r1, r3
 800793c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800793e:	2200      	movs	r2, #0
 8007940:	61bb      	str	r3, [r7, #24]
 8007942:	61fa      	str	r2, [r7, #28]
 8007944:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007948:	f7f9 f8d8 	bl	8000afc <__aeabi_uldivmod>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4613      	mov	r3, r2
 8007952:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007954:	4b0b      	ldr	r3, [pc, #44]	; (8007984 <HAL_RCC_GetSysClockFreq+0x200>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	0c1b      	lsrs	r3, r3, #16
 800795a:	f003 0303 	and.w	r3, r3, #3
 800795e:	3301      	adds	r3, #1
 8007960:	005b      	lsls	r3, r3, #1
 8007962:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007964:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007968:	fbb2 f3f3 	udiv	r3, r2, r3
 800796c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800796e:	e002      	b.n	8007976 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007970:	4b05      	ldr	r3, [pc, #20]	; (8007988 <HAL_RCC_GetSysClockFreq+0x204>)
 8007972:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007974:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007976:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007978:	4618      	mov	r0, r3
 800797a:	3750      	adds	r7, #80	; 0x50
 800797c:	46bd      	mov	sp, r7
 800797e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007982:	bf00      	nop
 8007984:	40023800 	.word	0x40023800
 8007988:	00f42400 	.word	0x00f42400

0800798c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800798c:	b480      	push	{r7}
 800798e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007990:	4b03      	ldr	r3, [pc, #12]	; (80079a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007992:	681b      	ldr	r3, [r3, #0]
}
 8007994:	4618      	mov	r0, r3
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr
 800799e:	bf00      	nop
 80079a0:	20000090 	.word	0x20000090

080079a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80079a8:	f7ff fff0 	bl	800798c <HAL_RCC_GetHCLKFreq>
 80079ac:	4602      	mov	r2, r0
 80079ae:	4b05      	ldr	r3, [pc, #20]	; (80079c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	0a9b      	lsrs	r3, r3, #10
 80079b4:	f003 0307 	and.w	r3, r3, #7
 80079b8:	4903      	ldr	r1, [pc, #12]	; (80079c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80079ba:	5ccb      	ldrb	r3, [r1, r3]
 80079bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	40023800 	.word	0x40023800
 80079c8:	0800e8ec 	.word	0x0800e8ec

080079cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80079d0:	f7ff ffdc 	bl	800798c <HAL_RCC_GetHCLKFreq>
 80079d4:	4602      	mov	r2, r0
 80079d6:	4b05      	ldr	r3, [pc, #20]	; (80079ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80079d8:	689b      	ldr	r3, [r3, #8]
 80079da:	0b5b      	lsrs	r3, r3, #13
 80079dc:	f003 0307 	and.w	r3, r3, #7
 80079e0:	4903      	ldr	r1, [pc, #12]	; (80079f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80079e2:	5ccb      	ldrb	r3, [r1, r3]
 80079e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	bd80      	pop	{r7, pc}
 80079ec:	40023800 	.word	0x40023800
 80079f0:	0800e8ec 	.word	0x0800e8ec

080079f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b088      	sub	sp, #32
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079fc:	2300      	movs	r3, #0
 80079fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007a04:	2300      	movs	r3, #0
 8007a06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d012      	beq.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007a1c:	4b69      	ldr	r3, [pc, #420]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	4a68      	ldr	r2, [pc, #416]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007a26:	6093      	str	r3, [r2, #8]
 8007a28:	4b66      	ldr	r3, [pc, #408]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a2a:	689a      	ldr	r2, [r3, #8]
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a30:	4964      	ldr	r1, [pc, #400]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d101      	bne.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d017      	beq.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007a4e:	4b5d      	ldr	r3, [pc, #372]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a5c:	4959      	ldr	r1, [pc, #356]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a6c:	d101      	bne.n	8007a72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d101      	bne.n	8007a7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a7a:	2301      	movs	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d017      	beq.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a8a:	4b4e      	ldr	r3, [pc, #312]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a98:	494a      	ldr	r1, [pc, #296]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007aa8:	d101      	bne.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f003 0320 	and.w	r3, r3, #32
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 808b 	beq.w	8007bee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007ad8:	4b3a      	ldr	r3, [pc, #232]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	4a39      	ldr	r2, [pc, #228]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae2:	6413      	str	r3, [r2, #64]	; 0x40
 8007ae4:	4b37      	ldr	r3, [pc, #220]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007af0:	4b35      	ldr	r3, [pc, #212]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a34      	ldr	r2, [pc, #208]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007af6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007afa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007afc:	f7fd f94a 	bl	8004d94 <HAL_GetTick>
 8007b00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b02:	e008      	b.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b04:	f7fd f946 	bl	8004d94 <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	697b      	ldr	r3, [r7, #20]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	2b64      	cmp	r3, #100	; 0x64
 8007b10:	d901      	bls.n	8007b16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007b12:	2303      	movs	r3, #3
 8007b14:	e357      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007b16:	4b2c      	ldr	r3, [pc, #176]	; (8007bc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d0f0      	beq.n	8007b04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b22:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d035      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b3a:	693a      	ldr	r2, [r7, #16]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d02e      	beq.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b40:	4b20      	ldr	r3, [pc, #128]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007b48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b4a:	4b1e      	ldr	r3, [pc, #120]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4e:	4a1d      	ldr	r2, [pc, #116]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b56:	4b1b      	ldr	r3, [pc, #108]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5a:	4a1a      	ldr	r2, [pc, #104]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b62:	4a18      	ldr	r2, [pc, #96]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b68:	4b16      	ldr	r3, [pc, #88]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6c:	f003 0301 	and.w	r3, r3, #1
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d114      	bne.n	8007b9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fd f90e 	bl	8004d94 <HAL_GetTick>
 8007b78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b7a:	e00a      	b.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b7c:	f7fd f90a 	bl	8004d94 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	697b      	ldr	r3, [r7, #20]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d901      	bls.n	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b8e:	2303      	movs	r3, #3
 8007b90:	e319      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b92:	4b0c      	ldr	r3, [pc, #48]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d0ee      	beq.n	8007b7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ba6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007baa:	d111      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007bac:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bb8:	4b04      	ldr	r3, [pc, #16]	; (8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007bba:	400b      	ands	r3, r1
 8007bbc:	4901      	ldr	r1, [pc, #4]	; (8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	608b      	str	r3, [r1, #8]
 8007bc2:	e00b      	b.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007bc4:	40023800 	.word	0x40023800
 8007bc8:	40007000 	.word	0x40007000
 8007bcc:	0ffffcff 	.word	0x0ffffcff
 8007bd0:	4baa      	ldr	r3, [pc, #680]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	4aa9      	ldr	r2, [pc, #676]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007bda:	6093      	str	r3, [r2, #8]
 8007bdc:	4ba7      	ldr	r3, [pc, #668]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007be8:	49a4      	ldr	r1, [pc, #656]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bea:	4313      	orrs	r3, r2
 8007bec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d010      	beq.n	8007c1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007bfa:	4ba0      	ldr	r3, [pc, #640]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c00:	4a9e      	ldr	r2, [pc, #632]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007c0a:	4b9c      	ldr	r3, [pc, #624]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	4999      	ldr	r1, [pc, #612]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c16:	4313      	orrs	r3, r2
 8007c18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d00a      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c28:	4b94      	ldr	r3, [pc, #592]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c36:	4991      	ldr	r1, [pc, #580]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d00a      	beq.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007c4a:	4b8c      	ldr	r3, [pc, #560]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c58:	4988      	ldr	r1, [pc, #544]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d00a      	beq.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c6c:	4b83      	ldr	r3, [pc, #524]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7a:	4980      	ldr	r1, [pc, #512]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c8e:	4b7b      	ldr	r3, [pc, #492]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c9c:	4977      	ldr	r1, [pc, #476]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d00a      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007cb0:	4b72      	ldr	r3, [pc, #456]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb6:	f023 0203 	bic.w	r2, r3, #3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbe:	496f      	ldr	r1, [pc, #444]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cc0:	4313      	orrs	r3, r2
 8007cc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007cd2:	4b6a      	ldr	r3, [pc, #424]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f023 020c 	bic.w	r2, r3, #12
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ce0:	4966      	ldr	r1, [pc, #408]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00a      	beq.n	8007d0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007cf4:	4b61      	ldr	r3, [pc, #388]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d02:	495e      	ldr	r1, [pc, #376]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d04:	4313      	orrs	r3, r2
 8007d06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00a      	beq.n	8007d2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007d16:	4b59      	ldr	r3, [pc, #356]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d24:	4955      	ldr	r1, [pc, #340]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d26:	4313      	orrs	r3, r2
 8007d28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00a      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007d38:	4b50      	ldr	r3, [pc, #320]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d46:	494d      	ldr	r1, [pc, #308]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00a      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007d5a:	4b48      	ldr	r3, [pc, #288]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d68:	4944      	ldr	r1, [pc, #272]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d00a      	beq.n	8007d92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d7c:	4b3f      	ldr	r3, [pc, #252]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d8a:	493c      	ldr	r1, [pc, #240]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00a      	beq.n	8007db4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d9e:	4b37      	ldr	r3, [pc, #220]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dac:	4933      	ldr	r1, [pc, #204]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dae:	4313      	orrs	r3, r2
 8007db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00a      	beq.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dc0:	4b2e      	ldr	r3, [pc, #184]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007dce:	492b      	ldr	r1, [pc, #172]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d011      	beq.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007de2:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007de8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007df0:	4922      	ldr	r1, [pc, #136]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007e00:	d101      	bne.n	8007e06 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007e02:	2301      	movs	r3, #1
 8007e04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 0308 	and.w	r3, r3, #8
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007e12:	2301      	movs	r3, #1
 8007e14:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d00a      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007e22:	4b16      	ldr	r3, [pc, #88]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e30:	4912      	ldr	r1, [pc, #72]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d00b      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007e44:	4b0d      	ldr	r3, [pc, #52]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e54:	4909      	ldr	r1, [pc, #36]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e56:	4313      	orrs	r3, r2
 8007e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e5c:	69fb      	ldr	r3, [r7, #28]
 8007e5e:	2b01      	cmp	r3, #1
 8007e60:	d006      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	f000 80d9 	beq.w	8008022 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e70:	4b02      	ldr	r3, [pc, #8]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a01      	ldr	r2, [pc, #4]	; (8007e7c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e76:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e7a:	e001      	b.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e82:	f7fc ff87 	bl	8004d94 <HAL_GetTick>
 8007e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e88:	e008      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e8a:	f7fc ff83 	bl	8004d94 <HAL_GetTick>
 8007e8e:	4602      	mov	r2, r0
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	1ad3      	subs	r3, r2, r3
 8007e94:	2b64      	cmp	r3, #100	; 0x64
 8007e96:	d901      	bls.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	e194      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e9c:	4b6c      	ldr	r3, [pc, #432]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f0      	bne.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d021      	beq.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d11d      	bne.n	8007ef8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ebc:	4b64      	ldr	r3, [pc, #400]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ec2:	0c1b      	lsrs	r3, r3, #16
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007eca:	4b61      	ldr	r3, [pc, #388]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ed0:	0e1b      	lsrs	r3, r3, #24
 8007ed2:	f003 030f 	and.w	r3, r3, #15
 8007ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	019a      	lsls	r2, r3, #6
 8007ede:	693b      	ldr	r3, [r7, #16]
 8007ee0:	041b      	lsls	r3, r3, #16
 8007ee2:	431a      	orrs	r2, r3
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	061b      	lsls	r3, r3, #24
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	071b      	lsls	r3, r3, #28
 8007ef0:	4957      	ldr	r1, [pc, #348]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d004      	beq.n	8007f0e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f0c:	d00a      	beq.n	8007f24 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d02e      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f22:	d129      	bne.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007f24:	4b4a      	ldr	r3, [pc, #296]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	f003 0303 	and.w	r3, r3, #3
 8007f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f32:	4b47      	ldr	r3, [pc, #284]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f38:	0f1b      	lsrs	r3, r3, #28
 8007f3a:	f003 0307 	and.w	r3, r3, #7
 8007f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	019a      	lsls	r2, r3, #6
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	041b      	lsls	r3, r3, #16
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	68db      	ldr	r3, [r3, #12]
 8007f50:	061b      	lsls	r3, r3, #24
 8007f52:	431a      	orrs	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	071b      	lsls	r3, r3, #28
 8007f58:	493d      	ldr	r1, [pc, #244]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f60:	4b3b      	ldr	r3, [pc, #236]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f66:	f023 021f 	bic.w	r2, r3, #31
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	4937      	ldr	r1, [pc, #220]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f72:	4313      	orrs	r3, r2
 8007f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d01d      	beq.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f84:	4b32      	ldr	r3, [pc, #200]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8a:	0e1b      	lsrs	r3, r3, #24
 8007f8c:	f003 030f 	and.w	r3, r3, #15
 8007f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f92:	4b2f      	ldr	r3, [pc, #188]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f98:	0f1b      	lsrs	r3, r3, #28
 8007f9a:	f003 0307 	and.w	r3, r3, #7
 8007f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	019a      	lsls	r2, r3, #6
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	041b      	lsls	r3, r3, #16
 8007fac:	431a      	orrs	r2, r3
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	061b      	lsls	r3, r3, #24
 8007fb2:	431a      	orrs	r2, r3
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	071b      	lsls	r3, r3, #28
 8007fb8:	4925      	ldr	r1, [pc, #148]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d011      	beq.n	8007ff0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	019a      	lsls	r2, r3, #6
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	041b      	lsls	r3, r3, #16
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	061b      	lsls	r3, r3, #24
 8007fe0:	431a      	orrs	r2, r3
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	689b      	ldr	r3, [r3, #8]
 8007fe6:	071b      	lsls	r3, r3, #28
 8007fe8:	4919      	ldr	r1, [pc, #100]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fea:	4313      	orrs	r3, r2
 8007fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ff0:	4b17      	ldr	r3, [pc, #92]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a16      	ldr	r2, [pc, #88]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ffc:	f7fc feca 	bl	8004d94 <HAL_GetTick>
 8008000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008002:	e008      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008004:	f7fc fec6 	bl	8004d94 <HAL_GetTick>
 8008008:	4602      	mov	r2, r0
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	1ad3      	subs	r3, r2, r3
 800800e:	2b64      	cmp	r3, #100	; 0x64
 8008010:	d901      	bls.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e0d7      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008016:	4b0e      	ldr	r3, [pc, #56]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0f0      	beq.n	8008004 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	2b01      	cmp	r3, #1
 8008026:	f040 80cd 	bne.w	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800802a:	4b09      	ldr	r3, [pc, #36]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a08      	ldr	r2, [pc, #32]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008036:	f7fc fead 	bl	8004d94 <HAL_GetTick>
 800803a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800803c:	e00a      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800803e:	f7fc fea9 	bl	8004d94 <HAL_GetTick>
 8008042:	4602      	mov	r2, r0
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	1ad3      	subs	r3, r2, r3
 8008048:	2b64      	cmp	r3, #100	; 0x64
 800804a:	d903      	bls.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800804c:	2303      	movs	r3, #3
 800804e:	e0ba      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008054:	4b5e      	ldr	r3, [pc, #376]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800805c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008060:	d0ed      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800807e:	2b00      	cmp	r3, #0
 8008080:	d02e      	beq.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008086:	2b00      	cmp	r3, #0
 8008088:	d12a      	bne.n	80080e0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800808a:	4b51      	ldr	r3, [pc, #324]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008098:	4b4d      	ldr	r3, [pc, #308]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800809a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800809e:	0f1b      	lsrs	r3, r3, #28
 80080a0:	f003 0307 	and.w	r3, r3, #7
 80080a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	695b      	ldr	r3, [r3, #20]
 80080aa:	019a      	lsls	r2, r3, #6
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	061b      	lsls	r3, r3, #24
 80080b8:	431a      	orrs	r2, r3
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	071b      	lsls	r3, r3, #28
 80080be:	4944      	ldr	r1, [pc, #272]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080c0:	4313      	orrs	r3, r2
 80080c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080c6:	4b42      	ldr	r3, [pc, #264]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080d4:	3b01      	subs	r3, #1
 80080d6:	021b      	lsls	r3, r3, #8
 80080d8:	493d      	ldr	r1, [pc, #244]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080da:	4313      	orrs	r3, r2
 80080dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d022      	beq.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080f4:	d11d      	bne.n	8008132 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080f6:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fc:	0e1b      	lsrs	r3, r3, #24
 80080fe:	f003 030f 	and.w	r3, r3, #15
 8008102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008104:	4b32      	ldr	r3, [pc, #200]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800810a:	0f1b      	lsrs	r3, r3, #28
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	695b      	ldr	r3, [r3, #20]
 8008116:	019a      	lsls	r2, r3, #6
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a1b      	ldr	r3, [r3, #32]
 800811c:	041b      	lsls	r3, r3, #16
 800811e:	431a      	orrs	r2, r3
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	061b      	lsls	r3, r3, #24
 8008124:	431a      	orrs	r2, r3
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	071b      	lsls	r3, r3, #28
 800812a:	4929      	ldr	r1, [pc, #164]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800812c:	4313      	orrs	r3, r2
 800812e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	f003 0308 	and.w	r3, r3, #8
 800813a:	2b00      	cmp	r3, #0
 800813c:	d028      	beq.n	8008190 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800813e:	4b24      	ldr	r3, [pc, #144]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008144:	0e1b      	lsrs	r3, r3, #24
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800814c:	4b20      	ldr	r3, [pc, #128]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800814e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008152:	0c1b      	lsrs	r3, r3, #16
 8008154:	f003 0303 	and.w	r3, r3, #3
 8008158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	019a      	lsls	r2, r3, #6
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	041b      	lsls	r3, r3, #16
 8008164:	431a      	orrs	r2, r3
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	061b      	lsls	r3, r3, #24
 800816a:	431a      	orrs	r2, r3
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	071b      	lsls	r3, r3, #28
 8008172:	4917      	ldr	r1, [pc, #92]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008174:	4313      	orrs	r3, r2
 8008176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800817a:	4b15      	ldr	r3, [pc, #84]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800817c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008188:	4911      	ldr	r1, [pc, #68]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800818a:	4313      	orrs	r3, r2
 800818c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008190:	4b0f      	ldr	r3, [pc, #60]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a0e      	ldr	r2, [pc, #56]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800819a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800819c:	f7fc fdfa 	bl	8004d94 <HAL_GetTick>
 80081a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081a2:	e008      	b.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80081a4:	f7fc fdf6 	bl	8004d94 <HAL_GetTick>
 80081a8:	4602      	mov	r2, r0
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	1ad3      	subs	r3, r2, r3
 80081ae:	2b64      	cmp	r3, #100	; 0x64
 80081b0:	d901      	bls.n	80081b6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80081b2:	2303      	movs	r3, #3
 80081b4:	e007      	b.n	80081c6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80081b6:	4b06      	ldr	r3, [pc, #24]	; (80081d0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081c2:	d1ef      	bne.n	80081a4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80081c4:	2300      	movs	r3, #0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3720      	adds	r7, #32
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
 80081ce:	bf00      	nop
 80081d0:	40023800 	.word	0x40023800

080081d4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d101      	bne.n	80081e6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	e022      	b.n	800822c <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081ec:	b2db      	uxtb	r3, r3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d105      	bne.n	80081fe <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80081f8:	6878      	ldr	r0, [r7, #4]
 80081fa:	f7fb f8c1 	bl	8003380 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2203      	movs	r2, #3
 8008202:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f814 	bl	8008234 <HAL_SD_InitCard>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8008212:	2301      	movs	r3, #1
 8008214:	e00a      	b.n	800822c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2200      	movs	r2, #0
 800821a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800822a:	2300      	movs	r3, #0
}
 800822c:	4618      	mov	r0, r3
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008234:	b5b0      	push	{r4, r5, r7, lr}
 8008236:	b08e      	sub	sp, #56	; 0x38
 8008238:	af04      	add	r7, sp, #16
 800823a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800823c:	2300      	movs	r3, #0
 800823e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008240:	2300      	movs	r3, #0
 8008242:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008244:	2300      	movs	r3, #0
 8008246:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008248:	2300      	movs	r3, #0
 800824a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800824c:	2300      	movs	r3, #0
 800824e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008250:	2376      	movs	r3, #118	; 0x76
 8008252:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681d      	ldr	r5, [r3, #0]
 8008258:	466c      	mov	r4, sp
 800825a:	f107 0314 	add.w	r3, r7, #20
 800825e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008262:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008266:	f107 0308 	add.w	r3, r7, #8
 800826a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800826c:	4628      	mov	r0, r5
 800826e:	f002 fb45 	bl	800a8fc <SDMMC_Init>
 8008272:	4603      	mov	r3, r0
 8008274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800827c:	2b00      	cmp	r3, #0
 800827e:	d001      	beq.n	8008284 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008280:	2301      	movs	r3, #1
 8008282:	e059      	b.n	8008338 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008292:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4618      	mov	r0, r3
 800829a:	f002 fb79 	bl	800a990 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	685a      	ldr	r2, [r3, #4]
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80082ac:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80082ae:	2002      	movs	r0, #2
 80082b0:	f7fc fd7c 	bl	8004dac <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80082b4:	6878      	ldr	r0, [r7, #4]
 80082b6:	f000 ff59 	bl	800916c <SD_PowerON>
 80082ba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082bc:	6a3b      	ldr	r3, [r7, #32]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00b      	beq.n	80082da <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082ce:	6a3b      	ldr	r3, [r7, #32]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e02e      	b.n	8008338 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80082da:	6878      	ldr	r0, [r7, #4]
 80082dc:	f000 fe78 	bl	8008fd0 <SD_InitCard>
 80082e0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082e2:	6a3b      	ldr	r3, [r7, #32]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80082f4:	6a3b      	ldr	r3, [r7, #32]
 80082f6:	431a      	orrs	r2, r3
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082fc:	2301      	movs	r3, #1
 80082fe:	e01b      	b.n	8008338 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008308:	4618      	mov	r0, r3
 800830a:	f002 fbd3 	bl	800aab4 <SDMMC_CmdBlockLength>
 800830e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d00f      	beq.n	8008336 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	4a09      	ldr	r2, [pc, #36]	; (8008340 <HAL_SD_InitCard+0x10c>)
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008322:	6a3b      	ldr	r3, [r7, #32]
 8008324:	431a      	orrs	r2, r3
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2201      	movs	r2, #1
 800832e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008332:	2301      	movs	r3, #1
 8008334:	e000      	b.n	8008338 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3728      	adds	r7, #40	; 0x28
 800833c:	46bd      	mov	sp, r7
 800833e:	bdb0      	pop	{r4, r5, r7, pc}
 8008340:	004005ff 	.word	0x004005ff

08008344 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b08c      	sub	sp, #48	; 0x30
 8008348:	af00      	add	r7, sp, #0
 800834a:	60f8      	str	r0, [r7, #12]
 800834c:	60b9      	str	r1, [r7, #8]
 800834e:	607a      	str	r2, [r7, #4]
 8008350:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d107      	bne.n	800836c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008360:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008368:	2301      	movs	r3, #1
 800836a:	e0c3      	b.n	80084f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b01      	cmp	r3, #1
 8008376:	f040 80bc 	bne.w	80084f2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	441a      	add	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838a:	429a      	cmp	r2, r3
 800838c:	d907      	bls.n	800839e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	e0aa      	b.n	80084f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2203      	movs	r2, #3
 80083a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	2200      	movs	r2, #0
 80083ac:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 80083bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c2:	4a4e      	ldr	r2, [pc, #312]	; (80084fc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80083c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ca:	4a4d      	ldr	r2, [pc, #308]	; (8008500 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80083cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083d2:	2200      	movs	r2, #0
 80083d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083da:	2200      	movs	r2, #0
 80083dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ee:	689a      	ldr	r2, [r3, #8]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	430a      	orrs	r2, r1
 80083f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	3380      	adds	r3, #128	; 0x80
 8008404:	4619      	mov	r1, r3
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	025b      	lsls	r3, r3, #9
 800840c:	089b      	lsrs	r3, r3, #2
 800840e:	f7fe f903 	bl	8006618 <HAL_DMA_Start_IT>
 8008412:	4603      	mov	r3, r0
 8008414:	2b00      	cmp	r3, #0
 8008416:	d017      	beq.n	8008448 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8008426:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a35      	ldr	r2, [pc, #212]	; (8008504 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800842e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	2201      	movs	r2, #1
 8008440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008444:	2301      	movs	r3, #1
 8008446:	e055      	b.n	80084f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	f042 0208 	orr.w	r2, r2, #8
 8008456:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800845c:	2b01      	cmp	r3, #1
 800845e:	d002      	beq.n	8008466 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008462:	025b      	lsls	r3, r3, #9
 8008464:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008466:	f04f 33ff 	mov.w	r3, #4294967295
 800846a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	025b      	lsls	r3, r3, #9
 8008470:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008472:	2390      	movs	r3, #144	; 0x90
 8008474:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008476:	2302      	movs	r3, #2
 8008478:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800847a:	2300      	movs	r3, #0
 800847c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800847e:	2301      	movs	r3, #1
 8008480:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f107 0210 	add.w	r2, r7, #16
 800848a:	4611      	mov	r1, r2
 800848c:	4618      	mov	r0, r3
 800848e:	f002 fae5 	bl	800aa5c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d90a      	bls.n	80084ae <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2282      	movs	r2, #130	; 0x82
 800849c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084a4:	4618      	mov	r0, r3
 80084a6:	f002 fb49 	bl	800ab3c <SDMMC_CmdReadMultiBlock>
 80084aa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80084ac:	e009      	b.n	80084c2 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2281      	movs	r2, #129	; 0x81
 80084b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80084ba:	4618      	mov	r0, r3
 80084bc:	f002 fb1c 	bl	800aaf8 <SDMMC_CmdReadSingleBlock>
 80084c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80084c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d012      	beq.n	80084ee <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a0d      	ldr	r2, [pc, #52]	; (8008504 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80084ce:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d6:	431a      	orrs	r2, r3
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80084ea:	2301      	movs	r3, #1
 80084ec:	e002      	b.n	80084f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80084ee:	2300      	movs	r3, #0
 80084f0:	e000      	b.n	80084f4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80084f2:	2302      	movs	r3, #2
  }
}
 80084f4:	4618      	mov	r0, r3
 80084f6:	3730      	adds	r7, #48	; 0x30
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	08008ddf 	.word	0x08008ddf
 8008500:	08008e51 	.word	0x08008e51
 8008504:	004005ff 	.word	0x004005ff

08008508 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08c      	sub	sp, #48	; 0x30
 800850c:	af00      	add	r7, sp, #0
 800850e:	60f8      	str	r0, [r7, #12]
 8008510:	60b9      	str	r1, [r7, #8]
 8008512:	607a      	str	r2, [r7, #4]
 8008514:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d107      	bne.n	8008530 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008524:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800852c:	2301      	movs	r3, #1
 800852e:	e0c6      	b.n	80086be <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2b01      	cmp	r3, #1
 800853a:	f040 80bf 	bne.w	80086bc <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2200      	movs	r2, #0
 8008542:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008544:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	441a      	add	r2, r3
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800854e:	429a      	cmp	r2, r3
 8008550:	d907      	bls.n	8008562 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008556:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800855e:	2301      	movs	r3, #1
 8008560:	e0ad      	b.n	80086be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2203      	movs	r2, #3
 8008566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	2200      	movs	r2, #0
 8008570:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f042 021a 	orr.w	r2, r2, #26
 8008580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008586:	4a50      	ldr	r2, [pc, #320]	; (80086c8 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800858e:	4a4f      	ldr	r2, [pc, #316]	; (80086cc <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008596:	2200      	movs	r2, #0
 8008598:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d002      	beq.n	80085a8 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 80085a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085a4:	025b      	lsls	r3, r3, #9
 80085a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d90a      	bls.n	80085c4 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	22a0      	movs	r2, #160	; 0xa0
 80085b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085ba:	4618      	mov	r0, r3
 80085bc:	f002 fb02 	bl	800abc4 <SDMMC_CmdWriteMultiBlock>
 80085c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80085c2:	e009      	b.n	80085d8 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2290      	movs	r2, #144	; 0x90
 80085c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085d0:	4618      	mov	r0, r3
 80085d2:	f002 fad5 	bl	800ab80 <SDMMC_CmdWriteSingleBlock>
 80085d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d012      	beq.n	8008604 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a3b      	ldr	r2, [pc, #236]	; (80086d0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80085e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085ec:	431a      	orrs	r2, r3
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	2200      	movs	r2, #0
 80085fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008600:	2301      	movs	r3, #1
 8008602:	e05c      	b.n	80086be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f042 0208 	orr.w	r2, r2, #8
 8008612:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008618:	2240      	movs	r2, #64	; 0x40
 800861a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800862c:	689a      	ldr	r2, [r3, #8]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800863c:	68b9      	ldr	r1, [r7, #8]
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	3380      	adds	r3, #128	; 0x80
 8008644:	461a      	mov	r2, r3
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	025b      	lsls	r3, r3, #9
 800864a:	089b      	lsrs	r3, r3, #2
 800864c:	f7fd ffe4 	bl	8006618 <HAL_DMA_Start_IT>
 8008650:	4603      	mov	r3, r0
 8008652:	2b00      	cmp	r3, #0
 8008654:	d01a      	beq.n	800868c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f022 021a 	bic.w	r2, r2, #26
 8008664:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800866c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008672:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2201      	movs	r2, #1
 800867e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2200      	movs	r2, #0
 8008686:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008688:	2301      	movs	r3, #1
 800868a:	e018      	b.n	80086be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800868c:	f04f 33ff 	mov.w	r3, #4294967295
 8008690:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	025b      	lsls	r3, r3, #9
 8008696:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008698:	2390      	movs	r3, #144	; 0x90
 800869a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800869c:	2300      	movs	r3, #0
 800869e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80086a0:	2300      	movs	r3, #0
 80086a2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80086a4:	2301      	movs	r3, #1
 80086a6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f107 0210 	add.w	r2, r7, #16
 80086b0:	4611      	mov	r1, r2
 80086b2:	4618      	mov	r0, r3
 80086b4:	f002 f9d2 	bl	800aa5c <SDMMC_ConfigData>

      return HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e000      	b.n	80086be <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80086bc:	2302      	movs	r3, #2
  }
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3730      	adds	r7, #48	; 0x30
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	08008db5 	.word	0x08008db5
 80086cc:	08008e51 	.word	0x08008e51
 80086d0:	004005ff 	.word	0x004005ff

080086d4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086e0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d008      	beq.n	8008702 <HAL_SD_IRQHandler+0x2e>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f003 0308 	and.w	r3, r3, #8
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d003      	beq.n	8008702 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fdec 	bl	80092d8 <SD_Read_IT>
 8008700:	e15a      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 808d 	beq.w	800882c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800871a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681a      	ldr	r2, [r3, #0]
 8008726:	4b9a      	ldr	r3, [pc, #616]	; (8008990 <HAL_SD_IRQHandler+0x2bc>)
 8008728:	400b      	ands	r3, r1
 800872a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f022 0201 	bic.w	r2, r2, #1
 800873a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f003 0308 	and.w	r3, r3, #8
 8008742:	2b00      	cmp	r3, #0
 8008744:	d039      	beq.n	80087ba <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	f003 0302 	and.w	r3, r3, #2
 800874c:	2b00      	cmp	r3, #0
 800874e:	d104      	bne.n	800875a <HAL_SD_IRQHandler+0x86>
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f003 0320 	and.w	r3, r3, #32
 8008756:	2b00      	cmp	r3, #0
 8008758:	d011      	beq.n	800877e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4618      	mov	r0, r3
 8008760:	f002 fa52 	bl	800ac08 <SDMMC_CmdStopTransfer>
 8008764:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d008      	beq.n	800877e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	431a      	orrs	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008778:	6878      	ldr	r0, [r7, #4]
 800877a:	f000 f921 	bl	80089c0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f240 523a 	movw	r2, #1338	; 0x53a
 8008786:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2200      	movs	r2, #0
 8008794:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f003 0301 	and.w	r3, r3, #1
 800879c:	2b00      	cmp	r3, #0
 800879e:	d104      	bne.n	80087aa <HAL_SD_IRQHandler+0xd6>
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d003      	beq.n	80087b2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f002 fe70 	bl	800b490 <HAL_SD_RxCpltCallback>
 80087b0:	e102      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f002 fe62 	bl	800b47c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80087b8:	e0fe      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 80f9 	beq.w	80089b8 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	f003 0320 	and.w	r3, r3, #32
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d011      	beq.n	80087f4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f002 fa17 	bl	800ac08 <SDMMC_CmdStopTransfer>
 80087da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d008      	beq.n	80087f4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	431a      	orrs	r2, r3
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 f8e6 	bl	80089c0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f003 0301 	and.w	r3, r3, #1
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f040 80dc 	bne.w	80089b8 <HAL_SD_IRQHandler+0x2e4>
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	f040 80d6 	bne.w	80089b8 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f022 0208 	bic.w	r2, r2, #8
 800881a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f002 fe29 	bl	800b47c <HAL_SD_TxCpltCallback>
}
 800882a:	e0c5      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d008      	beq.n	800884c <HAL_SD_IRQHandler+0x178>
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	f003 0308 	and.w	r3, r3, #8
 8008840:	2b00      	cmp	r3, #0
 8008842:	d003      	beq.n	800884c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 fd98 	bl	800937a <SD_Write_IT>
 800884a:	e0b5      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008852:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008856:	2b00      	cmp	r3, #0
 8008858:	f000 80ae 	beq.w	80089b8 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008862:	f003 0302 	and.w	r3, r3, #2
 8008866:	2b00      	cmp	r3, #0
 8008868:	d005      	beq.n	8008876 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886e:	f043 0202 	orr.w	r2, r3, #2
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887c:	f003 0308 	and.w	r3, r3, #8
 8008880:	2b00      	cmp	r3, #0
 8008882:	d005      	beq.n	8008890 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008888:	f043 0208 	orr.w	r2, r3, #8
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d005      	beq.n	80088aa <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a2:	f043 0220 	orr.w	r2, r3, #32
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b0:	f003 0310 	and.w	r3, r3, #16
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d005      	beq.n	80088c4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088bc:	f043 0210 	orr.w	r2, r3, #16
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f240 523a 	movw	r2, #1338	; 0x53a
 80088cc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80088dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 f990 	bl	800ac08 <SDMMC_CmdStopTransfer>
 80088e8:	4602      	mov	r2, r0
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	431a      	orrs	r2, r3
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f003 0308 	and.w	r3, r3, #8
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00a      	beq.n	8008914 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800890c:	6878      	ldr	r0, [r7, #4]
 800890e:	f000 f857 	bl	80089c0 <HAL_SD_ErrorCallback>
}
 8008912:	e051      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800891a:	2b00      	cmp	r3, #0
 800891c:	d04c      	beq.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f003 0310 	and.w	r3, r3, #16
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <HAL_SD_IRQHandler+0x25e>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f003 0320 	and.w	r3, r3, #32
 800892e:	2b00      	cmp	r3, #0
 8008930:	d011      	beq.n	8008956 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008936:	4a17      	ldr	r2, [pc, #92]	; (8008994 <HAL_SD_IRQHandler+0x2c0>)
 8008938:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800893e:	4618      	mov	r0, r3
 8008940:	f7fd feca 	bl	80066d8 <HAL_DMA_Abort_IT>
 8008944:	4603      	mov	r3, r0
 8008946:	2b00      	cmp	r3, #0
 8008948:	d036      	beq.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800894e:	4618      	mov	r0, r3
 8008950:	f000 fad0 	bl	8008ef4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008954:	e030      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f003 0301 	and.w	r3, r3, #1
 800895c:	2b00      	cmp	r3, #0
 800895e:	d104      	bne.n	800896a <HAL_SD_IRQHandler+0x296>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f003 0302 	and.w	r3, r3, #2
 8008966:	2b00      	cmp	r3, #0
 8008968:	d018      	beq.n	800899c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	4a0a      	ldr	r2, [pc, #40]	; (8008998 <HAL_SD_IRQHandler+0x2c4>)
 8008970:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	4618      	mov	r0, r3
 8008978:	f7fd feae 	bl	80066d8 <HAL_DMA_Abort_IT>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d01a      	beq.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008986:	4618      	mov	r0, r3
 8008988:	f000 faeb 	bl	8008f62 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800898c:	e014      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
 800898e:	bf00      	nop
 8008990:	ffff3ec5 	.word	0xffff3ec5
 8008994:	08008ef5 	.word	0x08008ef5
 8008998:	08008f63 	.word	0x08008f63
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2201      	movs	r2, #1
 80089a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	2200      	movs	r2, #0
 80089ae:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f002 fd59 	bl	800b468 <HAL_SD_AbortCallback>
}
 80089b6:	e7ff      	b.n	80089b8 <HAL_SD_IRQHandler+0x2e4>
 80089b8:	bf00      	nop
 80089ba:	3710      	adds	r7, #16
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
 80089dc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089e2:	0f9b      	lsrs	r3, r3, #30
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80089ee:	0e9b      	lsrs	r3, r3, #26
 80089f0:	b2db      	uxtb	r3, r3
 80089f2:	f003 030f 	and.w	r3, r3, #15
 80089f6:	b2da      	uxtb	r2, r3
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a00:	0e1b      	lsrs	r3, r3, #24
 8008a02:	b2db      	uxtb	r3, r3
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	b2da      	uxtb	r2, r3
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a12:	0c1b      	lsrs	r3, r3, #16
 8008a14:	b2da      	uxtb	r2, r3
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a1e:	0a1b      	lsrs	r3, r3, #8
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a2a:	b2da      	uxtb	r2, r3
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a34:	0d1b      	lsrs	r3, r3, #20
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a40:	0c1b      	lsrs	r3, r3, #16
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	f003 030f 	and.w	r3, r3, #15
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a52:	0bdb      	lsrs	r3, r3, #15
 8008a54:	b2db      	uxtb	r3, r3
 8008a56:	f003 0301 	and.w	r3, r3, #1
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a64:	0b9b      	lsrs	r3, r3, #14
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	f003 0301 	and.w	r3, r3, #1
 8008a6c:	b2da      	uxtb	r2, r3
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a76:	0b5b      	lsrs	r3, r3, #13
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f003 0301 	and.w	r3, r3, #1
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a88:	0b1b      	lsrs	r3, r3, #12
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	f003 0301 	and.w	r3, r3, #1
 8008a90:	b2da      	uxtb	r2, r3
 8008a92:	683b      	ldr	r3, [r7, #0]
 8008a94:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2200      	movs	r2, #0
 8008a9a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d163      	bne.n	8008b6c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008aa8:	009a      	lsls	r2, r3, #2
 8008aaa:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008aae:	4013      	ands	r3, r2
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008ab4:	0f92      	lsrs	r2, r2, #30
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ac0:	0edb      	lsrs	r3, r3, #27
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ad2:	0e1b      	lsrs	r3, r3, #24
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	f003 0307 	and.w	r3, r3, #7
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	683b      	ldr	r3, [r7, #0]
 8008ade:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ae4:	0d5b      	lsrs	r3, r3, #21
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	b2da      	uxtb	r2, r3
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008af6:	0c9b      	lsrs	r3, r3, #18
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	b2da      	uxtb	r2, r3
 8008b00:	683b      	ldr	r3, [r7, #0]
 8008b02:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b08:	0bdb      	lsrs	r3, r3, #15
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	f003 0307 	and.w	r3, r3, #7
 8008b10:	b2da      	uxtb	r2, r3
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	1c5a      	adds	r2, r3, #1
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b20:	683b      	ldr	r3, [r7, #0]
 8008b22:	7e1b      	ldrb	r3, [r3, #24]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	f003 0307 	and.w	r3, r3, #7
 8008b2a:	3302      	adds	r3, #2
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008b36:	fb03 f202 	mul.w	r2, r3, r2
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	7a1b      	ldrb	r3, [r3, #8]
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	f003 030f 	and.w	r3, r3, #15
 8008b48:	2201      	movs	r2, #1
 8008b4a:	409a      	lsls	r2, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008b58:	0a52      	lsrs	r2, r2, #9
 8008b5a:	fb03 f202 	mul.w	r2, r3, r2
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b68:	661a      	str	r2, [r3, #96]	; 0x60
 8008b6a:	e031      	b.n	8008bd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d11d      	bne.n	8008bb0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008b78:	041b      	lsls	r3, r3, #16
 8008b7a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b82:	0c1b      	lsrs	r3, r3, #16
 8008b84:	431a      	orrs	r2, r3
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	691b      	ldr	r3, [r3, #16]
 8008b8e:	3301      	adds	r3, #1
 8008b90:	029a      	lsls	r2, r3, #10
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	661a      	str	r2, [r3, #96]	; 0x60
 8008bae:	e00f      	b.n	8008bd0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a58      	ldr	r2, [pc, #352]	; (8008d18 <HAL_SD_GetCardCSD+0x344>)
 8008bb6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e09d      	b.n	8008d0c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bd4:	0b9b      	lsrs	r3, r3, #14
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	f003 0301 	and.w	r3, r3, #1
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008be6:	09db      	lsrs	r3, r3, #7
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bf8:	b2db      	uxtb	r3, r3
 8008bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c08:	0fdb      	lsrs	r3, r3, #31
 8008c0a:	b2da      	uxtb	r2, r3
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c14:	0f5b      	lsrs	r3, r3, #29
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	f003 0303 	and.w	r3, r3, #3
 8008c1c:	b2da      	uxtb	r2, r3
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c26:	0e9b      	lsrs	r3, r3, #26
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f003 0307 	and.w	r3, r3, #7
 8008c2e:	b2da      	uxtb	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c38:	0d9b      	lsrs	r3, r3, #22
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4a:	0d5b      	lsrs	r3, r3, #21
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c66:	0c1b      	lsrs	r3, r3, #16
 8008c68:	b2db      	uxtb	r3, r3
 8008c6a:	f003 0301 	and.w	r3, r3, #1
 8008c6e:	b2da      	uxtb	r2, r3
 8008c70:	683b      	ldr	r3, [r7, #0]
 8008c72:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c7a:	0bdb      	lsrs	r3, r3, #15
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	0b9b      	lsrs	r3, r3, #14
 8008c90:	b2db      	uxtb	r3, r3
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	b2da      	uxtb	r2, r3
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	0b5b      	lsrs	r3, r3, #13
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	b2da      	uxtb	r2, r3
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cb6:	0b1b      	lsrs	r3, r3, #12
 8008cb8:	b2db      	uxtb	r3, r3
 8008cba:	f003 0301 	and.w	r3, r3, #1
 8008cbe:	b2da      	uxtb	r2, r3
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	0a9b      	lsrs	r3, r3, #10
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0303 	and.w	r3, r3, #3
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cde:	0a1b      	lsrs	r3, r3, #8
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	f003 0303 	and.w	r3, r3, #3
 8008ce6:	b2da      	uxtb	r2, r3
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cf2:	085b      	lsrs	r3, r3, #1
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfa:	b2da      	uxtb	r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d02:	683b      	ldr	r3, [r7, #0]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	370c      	adds	r7, #12
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr
 8008d18:	004005ff 	.word	0x004005ff

08008d1c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	b083      	sub	sp, #12
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008d66:	2300      	movs	r3, #0
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008d7c:	2300      	movs	r3, #0
 8008d7e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008d80:	f107 030c 	add.w	r3, r7, #12
 8008d84:	4619      	mov	r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa7e 	bl	8009288 <SD_SendStatus>
 8008d8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d005      	beq.n	8008da0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	431a      	orrs	r2, r3
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	0a5b      	lsrs	r3, r3, #9
 8008da4:	f003 030f 	and.w	r3, r3, #15
 8008da8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008daa:	693b      	ldr	r3, [r7, #16]
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3718      	adds	r7, #24
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}

08008db4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b085      	sub	sp, #20
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008dd0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008dd2:	bf00      	nop
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr

08008dde <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b084      	sub	sp, #16
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dea:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008df0:	2b82      	cmp	r3, #130	; 0x82
 8008df2:	d111      	bne.n	8008e18 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	f001 ff05 	bl	800ac08 <SDMMC_CmdStopTransfer>
 8008dfe:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d008      	beq.n	8008e18 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	431a      	orrs	r2, r3
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8008e12:	68f8      	ldr	r0, [r7, #12]
 8008e14:	f7ff fdd4 	bl	80089c0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f022 0208 	bic.w	r2, r2, #8
 8008e26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	f240 523a 	movw	r2, #1338	; 0x53a
 8008e30:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8008e40:	68f8      	ldr	r0, [r7, #12]
 8008e42:	f002 fb25 	bl	800b490 <HAL_SD_RxCpltCallback>
#endif
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
	...

08008e50 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e5c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7fd fde6 	bl	8006a30 <HAL_DMA_GetError>
 8008e64:	4603      	mov	r3, r0
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d03e      	beq.n	8008ee8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8008e6a:	697b      	ldr	r3, [r7, #20]
 8008e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e70:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e78:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d002      	beq.n	8008e86 <SD_DMAError+0x36>
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d12d      	bne.n	8008ee2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a19      	ldr	r2, [pc, #100]	; (8008ef0 <SD_DMAError+0xa0>)
 8008e8c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008e8e:	697b      	ldr	r3, [r7, #20]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e94:	697b      	ldr	r3, [r7, #20]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008e9c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ea2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008eaa:	6978      	ldr	r0, [r7, #20]
 8008eac:	f7ff ff62 	bl	8008d74 <HAL_SD_GetCardState>
 8008eb0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	2b06      	cmp	r3, #6
 8008eb6:	d002      	beq.n	8008ebe <SD_DMAError+0x6e>
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	2b05      	cmp	r3, #5
 8008ebc:	d10a      	bne.n	8008ed4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f001 fea0 	bl	800ac08 <SDMMC_CmdStopTransfer>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8008ee2:	6978      	ldr	r0, [r7, #20]
 8008ee4:	f7ff fd6c 	bl	80089c0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	004005ff 	.word	0x004005ff

08008ef4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b084      	sub	sp, #16
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f00:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f0a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f7ff ff31 	bl	8008d74 <HAL_SD_GetCardState>
 8008f12:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2201      	movs	r2, #1
 8008f18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	2b06      	cmp	r3, #6
 8008f26:	d002      	beq.n	8008f2e <SD_DMATxAbort+0x3a>
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	2b05      	cmp	r3, #5
 8008f2c:	d10a      	bne.n	8008f44 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 fe68 	bl	800ac08 <SDMMC_CmdStopTransfer>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f3e:	431a      	orrs	r2, r3
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008f4c:	68f8      	ldr	r0, [r7, #12]
 8008f4e:	f002 fa8b 	bl	800b468 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008f52:	e002      	b.n	8008f5a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008f54:	68f8      	ldr	r0, [r7, #12]
 8008f56:	f7ff fd33 	bl	80089c0 <HAL_SD_ErrorCallback>
}
 8008f5a:	bf00      	nop
 8008f5c:	3710      	adds	r7, #16
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	bd80      	pop	{r7, pc}

08008f62 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8008f62:	b580      	push	{r7, lr}
 8008f64:	b084      	sub	sp, #16
 8008f66:	af00      	add	r7, sp, #0
 8008f68:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f240 523a 	movw	r2, #1338	; 0x53a
 8008f78:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8008f7a:	68f8      	ldr	r0, [r7, #12]
 8008f7c:	f7ff fefa 	bl	8008d74 <HAL_SD_GetCardState>
 8008f80:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2201      	movs	r2, #1
 8008f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	2b06      	cmp	r3, #6
 8008f94:	d002      	beq.n	8008f9c <SD_DMARxAbort+0x3a>
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	2b05      	cmp	r3, #5
 8008f9a:	d10a      	bne.n	8008fb2 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f001 fe31 	bl	800ac08 <SDMMC_CmdStopTransfer>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fac:	431a      	orrs	r2, r3
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d103      	bne.n	8008fc2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f002 fa54 	bl	800b468 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8008fc0:	e002      	b.n	8008fc8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8008fc2:	68f8      	ldr	r0, [r7, #12]
 8008fc4:	f7ff fcfc 	bl	80089c0 <HAL_SD_ErrorCallback>
}
 8008fc8:	bf00      	nop
 8008fca:	3710      	adds	r7, #16
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fd0:	b5b0      	push	{r4, r5, r7, lr}
 8008fd2:	b094      	sub	sp, #80	; 0x50
 8008fd4:	af04      	add	r7, sp, #16
 8008fd6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fd8:	2301      	movs	r3, #1
 8008fda:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 fce3 	bl	800a9ac <SDMMC_GetPowerState>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d102      	bne.n	8008ff2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008ff0:	e0b8      	b.n	8009164 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d02f      	beq.n	800905a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4618      	mov	r0, r3
 8009000:	f001 feca 	bl	800ad98 <SDMMC_CmdSendCID>
 8009004:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009008:	2b00      	cmp	r3, #0
 800900a:	d001      	beq.n	8009010 <SD_InitCard+0x40>
    {
      return errorstate;
 800900c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800900e:	e0a9      	b.n	8009164 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2100      	movs	r1, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f001 fd0d 	bl	800aa36 <SDMMC_GetResponse>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2104      	movs	r1, #4
 8009028:	4618      	mov	r0, r3
 800902a:	f001 fd04 	bl	800aa36 <SDMMC_GetResponse>
 800902e:	4602      	mov	r2, r0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	2108      	movs	r1, #8
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fcfb 	bl	800aa36 <SDMMC_GetResponse>
 8009040:	4602      	mov	r2, r0
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	210c      	movs	r1, #12
 800904c:	4618      	mov	r0, r3
 800904e:	f001 fcf2 	bl	800aa36 <SDMMC_GetResponse>
 8009052:	4602      	mov	r2, r0
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	2b03      	cmp	r3, #3
 8009060:	d00d      	beq.n	800907e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f107 020e 	add.w	r2, r7, #14
 800906a:	4611      	mov	r1, r2
 800906c:	4618      	mov	r0, r3
 800906e:	f001 fed0 	bl	800ae12 <SDMMC_CmdSetRelAdd>
 8009072:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009074:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <SD_InitCard+0xae>
    {
      return errorstate;
 800907a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800907c:	e072      	b.n	8009164 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009082:	2b03      	cmp	r3, #3
 8009084:	d036      	beq.n	80090f4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009086:	89fb      	ldrh	r3, [r7, #14]
 8009088:	461a      	mov	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009096:	041b      	lsls	r3, r3, #16
 8009098:	4619      	mov	r1, r3
 800909a:	4610      	mov	r0, r2
 800909c:	f001 fe9a 	bl	800add4 <SDMMC_CmdSendCSD>
 80090a0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80090a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <SD_InitCard+0xdc>
    {
      return errorstate;
 80090a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090aa:	e05b      	b.n	8009164 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fcbf 	bl	800aa36 <SDMMC_GetResponse>
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	2104      	movs	r1, #4
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 fcb6 	bl	800aa36 <SDMMC_GetResponse>
 80090ca:	4602      	mov	r2, r0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2108      	movs	r1, #8
 80090d6:	4618      	mov	r0, r3
 80090d8:	f001 fcad 	bl	800aa36 <SDMMC_GetResponse>
 80090dc:	4602      	mov	r2, r0
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	210c      	movs	r1, #12
 80090e8:	4618      	mov	r0, r3
 80090ea:	f001 fca4 	bl	800aa36 <SDMMC_GetResponse>
 80090ee:	4602      	mov	r2, r0
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	2104      	movs	r1, #4
 80090fa:	4618      	mov	r0, r3
 80090fc:	f001 fc9b 	bl	800aa36 <SDMMC_GetResponse>
 8009100:	4603      	mov	r3, r0
 8009102:	0d1a      	lsrs	r2, r3, #20
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009108:	f107 0310 	add.w	r3, r7, #16
 800910c:	4619      	mov	r1, r3
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f7ff fc60 	bl	80089d4 <HAL_SD_GetCardCSD>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d002      	beq.n	8009120 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800911a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800911e:	e021      	b.n	8009164 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6819      	ldr	r1, [r3, #0]
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009128:	041b      	lsls	r3, r3, #16
 800912a:	2200      	movs	r2, #0
 800912c:	461c      	mov	r4, r3
 800912e:	4615      	mov	r5, r2
 8009130:	4622      	mov	r2, r4
 8009132:	462b      	mov	r3, r5
 8009134:	4608      	mov	r0, r1
 8009136:	f001 fd89 	bl	800ac4c <SDMMC_CmdSelDesel>
 800913a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800913c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <SD_InitCard+0x176>
  {
    return errorstate;
 8009142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009144:	e00e      	b.n	8009164 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681d      	ldr	r5, [r3, #0]
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	466c      	mov	r4, sp
 800914e:	f103 0210 	add.w	r2, r3, #16
 8009152:	ca07      	ldmia	r2, {r0, r1, r2}
 8009154:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009158:	3304      	adds	r3, #4
 800915a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800915c:	4628      	mov	r0, r5
 800915e:	f001 fbcd 	bl	800a8fc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009162:	2300      	movs	r3, #0
}
 8009164:	4618      	mov	r0, r3
 8009166:	3740      	adds	r7, #64	; 0x40
 8009168:	46bd      	mov	sp, r7
 800916a:	bdb0      	pop	{r4, r5, r7, pc}

0800916c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b086      	sub	sp, #24
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009178:	2300      	movs	r3, #0
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	2300      	movs	r3, #0
 800917e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4618      	mov	r0, r3
 8009186:	f001 fd84 	bl	800ac92 <SDMMC_CmdGoIdleState>
 800918a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d001      	beq.n	8009196 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	e072      	b.n	800927c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4618      	mov	r0, r3
 800919c:	f001 fd97 	bl	800acce <SDMMC_CmdOperCond>
 80091a0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d00d      	beq.n	80091c4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	4618      	mov	r0, r3
 80091b4:	f001 fd6d 	bl	800ac92 <SDMMC_CmdGoIdleState>
 80091b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d004      	beq.n	80091ca <SD_PowerON+0x5e>
    {
      return errorstate;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	e05b      	b.n	800927c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2201      	movs	r2, #1
 80091c8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d137      	bne.n	8009242 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2100      	movs	r1, #0
 80091d8:	4618      	mov	r0, r3
 80091da:	f001 fd97 	bl	800ad0c <SDMMC_CmdAppCommand>
 80091de:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d02d      	beq.n	8009242 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091ea:	e047      	b.n	800927c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2100      	movs	r1, #0
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 fd8a 	bl	800ad0c <SDMMC_CmdAppCommand>
 80091f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d001      	beq.n	8009204 <SD_PowerON+0x98>
    {
      return errorstate;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	e03b      	b.n	800927c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	491e      	ldr	r1, [pc, #120]	; (8009284 <SD_PowerON+0x118>)
 800920a:	4618      	mov	r0, r3
 800920c:	f001 fda0 	bl	800ad50 <SDMMC_CmdAppOperCommand>
 8009210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009218:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800921c:	e02e      	b.n	800927c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2100      	movs	r1, #0
 8009224:	4618      	mov	r0, r3
 8009226:	f001 fc06 	bl	800aa36 <SDMMC_GetResponse>
 800922a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	0fdb      	lsrs	r3, r3, #31
 8009230:	2b01      	cmp	r3, #1
 8009232:	d101      	bne.n	8009238 <SD_PowerON+0xcc>
 8009234:	2301      	movs	r3, #1
 8009236:	e000      	b.n	800923a <SD_PowerON+0xce>
 8009238:	2300      	movs	r3, #0
 800923a:	613b      	str	r3, [r7, #16]

    count++;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	3301      	adds	r3, #1
 8009240:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009248:	4293      	cmp	r3, r2
 800924a:	d802      	bhi.n	8009252 <SD_PowerON+0xe6>
 800924c:	693b      	ldr	r3, [r7, #16]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0cc      	beq.n	80091ec <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009258:	4293      	cmp	r3, r2
 800925a:	d902      	bls.n	8009262 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800925c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009260:	e00c      	b.n	800927c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009268:	2b00      	cmp	r3, #0
 800926a:	d003      	beq.n	8009274 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2201      	movs	r2, #1
 8009270:	645a      	str	r2, [r3, #68]	; 0x44
 8009272:	e002      	b.n	800927a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3718      	adds	r7, #24
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}
 8009284:	c1100000 	.word	0xc1100000

08009288 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d102      	bne.n	800929e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009298:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800929c:	e018      	b.n	80092d0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681a      	ldr	r2, [r3, #0]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092a6:	041b      	lsls	r3, r3, #16
 80092a8:	4619      	mov	r1, r3
 80092aa:	4610      	mov	r0, r2
 80092ac:	f001 fdd2 	bl	800ae54 <SDMMC_CmdSendStatus>
 80092b0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d001      	beq.n	80092bc <SD_SendStatus+0x34>
  {
    return errorstate;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	e009      	b.n	80092d0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	2100      	movs	r1, #0
 80092c2:	4618      	mov	r0, r3
 80092c4:	f001 fbb7 	bl	800aa36 <SDMMC_GetResponse>
 80092c8:	4602      	mov	r2, r0
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80092d8:	b580      	push	{r7, lr}
 80092da:	b086      	sub	sp, #24
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d03f      	beq.n	8009372 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80092f2:	2300      	movs	r3, #0
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	e033      	b.n	8009360 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	4618      	mov	r0, r3
 80092fe:	f001 fb29 	bl	800a954 <SDMMC_ReadFIFO>
 8009302:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	b2da      	uxtb	r2, r3
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	3301      	adds	r3, #1
 8009310:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	3b01      	subs	r3, #1
 8009316:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	0a1b      	lsrs	r3, r3, #8
 800931c:	b2da      	uxtb	r2, r3
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	3301      	adds	r3, #1
 8009326:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	3b01      	subs	r3, #1
 800932c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800932e:	68bb      	ldr	r3, [r7, #8]
 8009330:	0c1b      	lsrs	r3, r3, #16
 8009332:	b2da      	uxtb	r2, r3
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	3301      	adds	r3, #1
 800933c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	3b01      	subs	r3, #1
 8009342:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	0e1b      	lsrs	r3, r3, #24
 8009348:	b2da      	uxtb	r2, r3
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	3301      	adds	r3, #1
 8009352:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	3b01      	subs	r3, #1
 8009358:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800935a:	697b      	ldr	r3, [r7, #20]
 800935c:	3301      	adds	r3, #1
 800935e:	617b      	str	r3, [r7, #20]
 8009360:	697b      	ldr	r3, [r7, #20]
 8009362:	2b07      	cmp	r3, #7
 8009364:	d9c8      	bls.n	80092f8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	68fa      	ldr	r2, [r7, #12]
 800936a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	693a      	ldr	r2, [r7, #16]
 8009370:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009372:	bf00      	nop
 8009374:	3718      	adds	r7, #24
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b086      	sub	sp, #24
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6a1b      	ldr	r3, [r3, #32]
 8009386:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800938c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d043      	beq.n	800941c <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009394:	2300      	movs	r3, #0
 8009396:	617b      	str	r3, [r7, #20]
 8009398:	e037      	b.n	800940a <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	3301      	adds	r3, #1
 80093a4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093a6:	693b      	ldr	r3, [r7, #16]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	781b      	ldrb	r3, [r3, #0]
 80093b0:	021a      	lsls	r2, r3, #8
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4313      	orrs	r3, r2
 80093b6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3301      	adds	r3, #1
 80093bc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	3b01      	subs	r3, #1
 80093c2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	041a      	lsls	r2, r3, #16
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	3b01      	subs	r3, #1
 80093da:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	061a      	lsls	r2, r3, #24
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	3301      	adds	r3, #1
 80093ec:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	3b01      	subs	r3, #1
 80093f2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f107 0208 	add.w	r2, r7, #8
 80093fc:	4611      	mov	r1, r2
 80093fe:	4618      	mov	r0, r3
 8009400:	f001 fab5 	bl	800a96e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009404:	697b      	ldr	r3, [r7, #20]
 8009406:	3301      	adds	r3, #1
 8009408:	617b      	str	r3, [r7, #20]
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2b07      	cmp	r3, #7
 800940e:	d9c4      	bls.n	800939a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	693a      	ldr	r2, [r7, #16]
 800941a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800941c:	bf00      	nop
 800941e:	3718      	adds	r7, #24
 8009420:	46bd      	mov	sp, r7
 8009422:	bd80      	pop	{r7, pc}

08009424 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	60f8      	str	r0, [r7, #12]
 800942c:	60b9      	str	r1, [r7, #8]
 800942e:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d101      	bne.n	800943a <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8009436:	2301      	movs	r3, #1
 8009438:	e038      	b.n	80094ac <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009440:	b2db      	uxtb	r3, r3
 8009442:	2b00      	cmp	r3, #0
 8009444:	d106      	bne.n	8009454 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	2200      	movs	r2, #0
 800944a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800944e:	68f8      	ldr	r0, [r7, #12]
 8009450:	f7fa fa7c 	bl	800394c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	3308      	adds	r3, #8
 800945c:	4619      	mov	r1, r3
 800945e:	4610      	mov	r0, r2
 8009460:	f001 f934 	bl	800a6cc <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6818      	ldr	r0, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	689b      	ldr	r3, [r3, #8]
 800946c:	461a      	mov	r2, r3
 800946e:	68b9      	ldr	r1, [r7, #8]
 8009470:	f001 f9bc 	bl	800a7ec <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	6858      	ldr	r0, [r3, #4]
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	689a      	ldr	r2, [r3, #8]
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	f001 fa03 	bl	800a88c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	68fa      	ldr	r2, [r7, #12]
 800948c:	6892      	ldr	r2, [r2, #8]
 800948e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68fa      	ldr	r2, [r7, #12]
 8009498:	6892      	ldr	r2, [r2, #8]
 800949a:	f041 0101 	orr.w	r1, r1, #1
 800949e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	2201      	movs	r2, #1
 80094a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3710      	adds	r7, #16
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b082      	sub	sp, #8
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e049      	b.n	800955a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d106      	bne.n	80094e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f7fa f85e 	bl	800359c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	2202      	movs	r2, #2
 80094e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	3304      	adds	r3, #4
 80094f0:	4619      	mov	r1, r3
 80094f2:	4610      	mov	r0, r2
 80094f4:	f000 fa38 	bl	8009968 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	2201      	movs	r2, #1
 8009504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2201      	movs	r2, #1
 800950c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2201      	movs	r2, #1
 800951c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2201      	movs	r2, #1
 8009524:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2201      	movs	r2, #1
 800952c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2201      	movs	r2, #1
 800953c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2201      	movs	r2, #1
 8009554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009558:	2300      	movs	r3, #0
}
 800955a:	4618      	mov	r0, r3
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
	...

08009564 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009564:	b480      	push	{r7}
 8009566:	b085      	sub	sp, #20
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009572:	b2db      	uxtb	r3, r3
 8009574:	2b01      	cmp	r3, #1
 8009576:	d001      	beq.n	800957c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009578:	2301      	movs	r3, #1
 800957a:	e054      	b.n	8009626 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2202      	movs	r2, #2
 8009580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	68da      	ldr	r2, [r3, #12]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	f042 0201 	orr.w	r2, r2, #1
 8009592:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	4a26      	ldr	r2, [pc, #152]	; (8009634 <HAL_TIM_Base_Start_IT+0xd0>)
 800959a:	4293      	cmp	r3, r2
 800959c:	d022      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a6:	d01d      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a22      	ldr	r2, [pc, #136]	; (8009638 <HAL_TIM_Base_Start_IT+0xd4>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d018      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a21      	ldr	r2, [pc, #132]	; (800963c <HAL_TIM_Base_Start_IT+0xd8>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d013      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a1f      	ldr	r2, [pc, #124]	; (8009640 <HAL_TIM_Base_Start_IT+0xdc>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d00e      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a1e      	ldr	r2, [pc, #120]	; (8009644 <HAL_TIM_Base_Start_IT+0xe0>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d009      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a1c      	ldr	r2, [pc, #112]	; (8009648 <HAL_TIM_Base_Start_IT+0xe4>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d004      	beq.n	80095e4 <HAL_TIM_Base_Start_IT+0x80>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a1b      	ldr	r2, [pc, #108]	; (800964c <HAL_TIM_Base_Start_IT+0xe8>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d115      	bne.n	8009610 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	689a      	ldr	r2, [r3, #8]
 80095ea:	4b19      	ldr	r3, [pc, #100]	; (8009650 <HAL_TIM_Base_Start_IT+0xec>)
 80095ec:	4013      	ands	r3, r2
 80095ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2b06      	cmp	r3, #6
 80095f4:	d015      	beq.n	8009622 <HAL_TIM_Base_Start_IT+0xbe>
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80095fc:	d011      	beq.n	8009622 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	681a      	ldr	r2, [r3, #0]
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0201 	orr.w	r2, r2, #1
 800960c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800960e:	e008      	b.n	8009622 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f042 0201 	orr.w	r2, r2, #1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e000      	b.n	8009624 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009622:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009624:	2300      	movs	r3, #0
}
 8009626:	4618      	mov	r0, r3
 8009628:	3714      	adds	r7, #20
 800962a:	46bd      	mov	sp, r7
 800962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	40010000 	.word	0x40010000
 8009638:	40000400 	.word	0x40000400
 800963c:	40000800 	.word	0x40000800
 8009640:	40000c00 	.word	0x40000c00
 8009644:	40010400 	.word	0x40010400
 8009648:	40014000 	.word	0x40014000
 800964c:	40001800 	.word	0x40001800
 8009650:	00010007 	.word	0x00010007

08009654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b082      	sub	sp, #8
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0302 	and.w	r3, r3, #2
 8009666:	2b02      	cmp	r3, #2
 8009668:	d122      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	68db      	ldr	r3, [r3, #12]
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	2b02      	cmp	r3, #2
 8009676:	d11b      	bne.n	80096b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f06f 0202 	mvn.w	r2, #2
 8009680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2201      	movs	r2, #1
 8009686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699b      	ldr	r3, [r3, #24]
 800968e:	f003 0303 	and.w	r3, r3, #3
 8009692:	2b00      	cmp	r3, #0
 8009694:	d003      	beq.n	800969e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f000 f947 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 800969c:	e005      	b.n	80096aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800969e:	6878      	ldr	r0, [r7, #4]
 80096a0:	f000 f939 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f000 f94a 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f003 0304 	and.w	r3, r3, #4
 80096ba:	2b04      	cmp	r3, #4
 80096bc:	d122      	bne.n	8009704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68db      	ldr	r3, [r3, #12]
 80096c4:	f003 0304 	and.w	r3, r3, #4
 80096c8:	2b04      	cmp	r3, #4
 80096ca:	d11b      	bne.n	8009704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f06f 0204 	mvn.w	r2, #4
 80096d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	2202      	movs	r2, #2
 80096da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	699b      	ldr	r3, [r3, #24]
 80096e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d003      	beq.n	80096f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 f91d 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 80096f0:	e005      	b.n	80096fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096f2:	6878      	ldr	r0, [r7, #4]
 80096f4:	f000 f90f 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 f920 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2200      	movs	r2, #0
 8009702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	691b      	ldr	r3, [r3, #16]
 800970a:	f003 0308 	and.w	r3, r3, #8
 800970e:	2b08      	cmp	r3, #8
 8009710:	d122      	bne.n	8009758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f003 0308 	and.w	r3, r3, #8
 800971c:	2b08      	cmp	r3, #8
 800971e:	d11b      	bne.n	8009758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f06f 0208 	mvn.w	r2, #8
 8009728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2204      	movs	r2, #4
 800972e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	69db      	ldr	r3, [r3, #28]
 8009736:	f003 0303 	and.w	r3, r3, #3
 800973a:	2b00      	cmp	r3, #0
 800973c:	d003      	beq.n	8009746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 f8f3 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 8009744:	e005      	b.n	8009752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 f8e5 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f8f6 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	f003 0310 	and.w	r3, r3, #16
 8009762:	2b10      	cmp	r3, #16
 8009764:	d122      	bne.n	80097ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0310 	and.w	r3, r3, #16
 8009770:	2b10      	cmp	r3, #16
 8009772:	d11b      	bne.n	80097ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	f06f 0210 	mvn.w	r2, #16
 800977c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2208      	movs	r2, #8
 8009782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	69db      	ldr	r3, [r3, #28]
 800978a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978e:	2b00      	cmp	r3, #0
 8009790:	d003      	beq.n	800979a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f8c9 	bl	800992a <HAL_TIM_IC_CaptureCallback>
 8009798:	e005      	b.n	80097a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f8bb 	bl	8009916 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f000 f8cc 	bl	800993e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2200      	movs	r2, #0
 80097aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	691b      	ldr	r3, [r3, #16]
 80097b2:	f003 0301 	and.w	r3, r3, #1
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d10e      	bne.n	80097d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f003 0301 	and.w	r3, r3, #1
 80097c4:	2b01      	cmp	r3, #1
 80097c6:	d107      	bne.n	80097d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f06f 0201 	mvn.w	r2, #1
 80097d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f7f8 fb34 	bl	8001e40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	691b      	ldr	r3, [r3, #16]
 80097de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e2:	2b80      	cmp	r3, #128	; 0x80
 80097e4:	d10e      	bne.n	8009804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	68db      	ldr	r3, [r3, #12]
 80097ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097f0:	2b80      	cmp	r3, #128	; 0x80
 80097f2:	d107      	bne.n	8009804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80097fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fafe 	bl	8009e00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	691b      	ldr	r3, [r3, #16]
 800980a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800980e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009812:	d10e      	bne.n	8009832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68db      	ldr	r3, [r3, #12]
 800981a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800981e:	2b80      	cmp	r3, #128	; 0x80
 8009820:	d107      	bne.n	8009832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800982a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 faf1 	bl	8009e14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800983c:	2b40      	cmp	r3, #64	; 0x40
 800983e:	d10e      	bne.n	800985e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	68db      	ldr	r3, [r3, #12]
 8009846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800984a:	2b40      	cmp	r3, #64	; 0x40
 800984c:	d107      	bne.n	800985e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f87a 	bl	8009952 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 0320 	and.w	r3, r3, #32
 8009868:	2b20      	cmp	r3, #32
 800986a:	d10e      	bne.n	800988a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f003 0320 	and.w	r3, r3, #32
 8009876:	2b20      	cmp	r3, #32
 8009878:	d107      	bne.n	800988a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f06f 0220 	mvn.w	r2, #32
 8009882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009884:	6878      	ldr	r0, [r7, #4]
 8009886:	f000 fab1 	bl	8009dec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800988a:	bf00      	nop
 800988c:	3708      	adds	r7, #8
 800988e:	46bd      	mov	sp, r7
 8009890:	bd80      	pop	{r7, pc}

08009892 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009892:	b580      	push	{r7, lr}
 8009894:	b082      	sub	sp, #8
 8009896:	af00      	add	r7, sp, #0
 8009898:	6078      	str	r0, [r7, #4]
 800989a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_TIM_SlaveConfigSynchro+0x18>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e031      	b.n	800990e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2201      	movs	r2, #1
 80098ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2202      	movs	r2, #2
 80098b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80098ba:	6839      	ldr	r1, [r7, #0]
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f000 f8f3 	bl	8009aa8 <TIM_SlaveTimer_SetConfig>
 80098c2:	4603      	mov	r3, r0
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d009      	beq.n	80098dc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80098d8:	2301      	movs	r3, #1
 80098da:	e018      	b.n	800990e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098ea:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	68da      	ldr	r2, [r3, #12]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80098fa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	3708      	adds	r7, #8
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}

08009916 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr

0800992a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800992a:	b480      	push	{r7}
 800992c:	b083      	sub	sp, #12
 800992e:	af00      	add	r7, sp, #0
 8009930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009932:	bf00      	nop
 8009934:	370c      	adds	r7, #12
 8009936:	46bd      	mov	sp, r7
 8009938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800993c:	4770      	bx	lr

0800993e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800993e:	b480      	push	{r7}
 8009940:	b083      	sub	sp, #12
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009946:	bf00      	nop
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr

08009952 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009952:	b480      	push	{r7}
 8009954:	b083      	sub	sp, #12
 8009956:	af00      	add	r7, sp, #0
 8009958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800995a:	bf00      	nop
 800995c:	370c      	adds	r7, #12
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
	...

08009968 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009968:	b480      	push	{r7}
 800996a:	b085      	sub	sp, #20
 800996c:	af00      	add	r7, sp, #0
 800996e:	6078      	str	r0, [r7, #4]
 8009970:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a40      	ldr	r2, [pc, #256]	; (8009a7c <TIM_Base_SetConfig+0x114>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d013      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009986:	d00f      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a3d      	ldr	r2, [pc, #244]	; (8009a80 <TIM_Base_SetConfig+0x118>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d00b      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a3c      	ldr	r2, [pc, #240]	; (8009a84 <TIM_Base_SetConfig+0x11c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d007      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a3b      	ldr	r2, [pc, #236]	; (8009a88 <TIM_Base_SetConfig+0x120>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d003      	beq.n	80099a8 <TIM_Base_SetConfig+0x40>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a3a      	ldr	r2, [pc, #232]	; (8009a8c <TIM_Base_SetConfig+0x124>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d108      	bne.n	80099ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a2f      	ldr	r2, [pc, #188]	; (8009a7c <TIM_Base_SetConfig+0x114>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d02b      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099c8:	d027      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	4a2c      	ldr	r2, [pc, #176]	; (8009a80 <TIM_Base_SetConfig+0x118>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d023      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	4a2b      	ldr	r2, [pc, #172]	; (8009a84 <TIM_Base_SetConfig+0x11c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d01f      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	4a2a      	ldr	r2, [pc, #168]	; (8009a88 <TIM_Base_SetConfig+0x120>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d01b      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	4a29      	ldr	r2, [pc, #164]	; (8009a8c <TIM_Base_SetConfig+0x124>)
 80099e6:	4293      	cmp	r3, r2
 80099e8:	d017      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	4a28      	ldr	r2, [pc, #160]	; (8009a90 <TIM_Base_SetConfig+0x128>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d013      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	4a27      	ldr	r2, [pc, #156]	; (8009a94 <TIM_Base_SetConfig+0x12c>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d00f      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a26      	ldr	r2, [pc, #152]	; (8009a98 <TIM_Base_SetConfig+0x130>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d00b      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a25      	ldr	r2, [pc, #148]	; (8009a9c <TIM_Base_SetConfig+0x134>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d007      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a24      	ldr	r2, [pc, #144]	; (8009aa0 <TIM_Base_SetConfig+0x138>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d003      	beq.n	8009a1a <TIM_Base_SetConfig+0xb2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a23      	ldr	r2, [pc, #140]	; (8009aa4 <TIM_Base_SetConfig+0x13c>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d108      	bne.n	8009a2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	68db      	ldr	r3, [r3, #12]
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	695b      	ldr	r3, [r3, #20]
 8009a36:	4313      	orrs	r3, r2
 8009a38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	68fa      	ldr	r2, [r7, #12]
 8009a3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	689a      	ldr	r2, [r3, #8]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	681a      	ldr	r2, [r3, #0]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a0a      	ldr	r2, [pc, #40]	; (8009a7c <TIM_Base_SetConfig+0x114>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d003      	beq.n	8009a60 <TIM_Base_SetConfig+0xf8>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a0c      	ldr	r2, [pc, #48]	; (8009a8c <TIM_Base_SetConfig+0x124>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d103      	bne.n	8009a68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	691a      	ldr	r2, [r3, #16]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	615a      	str	r2, [r3, #20]
}
 8009a6e:	bf00      	nop
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	40010000 	.word	0x40010000
 8009a80:	40000400 	.word	0x40000400
 8009a84:	40000800 	.word	0x40000800
 8009a88:	40000c00 	.word	0x40000c00
 8009a8c:	40010400 	.word	0x40010400
 8009a90:	40014000 	.word	0x40014000
 8009a94:	40014400 	.word	0x40014400
 8009a98:	40014800 	.word	0x40014800
 8009a9c:	40001800 	.word	0x40001800
 8009aa0:	40001c00 	.word	0x40001c00
 8009aa4:	40002000 	.word	0x40002000

08009aa8 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
 8009ab0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	689b      	ldr	r3, [r3, #8]
 8009abc:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009abe:	693b      	ldr	r3, [r7, #16]
 8009ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ac4:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009ac6:	683b      	ldr	r3, [r7, #0]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	693a      	ldr	r2, [r7, #16]
 8009acc:	4313      	orrs	r3, r2
 8009ace:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4b3e      	ldr	r3, [pc, #248]	; (8009bcc <TIM_SlaveTimer_SetConfig+0x124>)
 8009ad4:	4013      	ands	r3, r2
 8009ad6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	2b70      	cmp	r3, #112	; 0x70
 8009af0:	d01a      	beq.n	8009b28 <TIM_SlaveTimer_SetConfig+0x80>
 8009af2:	2b70      	cmp	r3, #112	; 0x70
 8009af4:	d860      	bhi.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
 8009af6:	2b60      	cmp	r3, #96	; 0x60
 8009af8:	d054      	beq.n	8009ba4 <TIM_SlaveTimer_SetConfig+0xfc>
 8009afa:	2b60      	cmp	r3, #96	; 0x60
 8009afc:	d85c      	bhi.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
 8009afe:	2b50      	cmp	r3, #80	; 0x50
 8009b00:	d046      	beq.n	8009b90 <TIM_SlaveTimer_SetConfig+0xe8>
 8009b02:	2b50      	cmp	r3, #80	; 0x50
 8009b04:	d858      	bhi.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
 8009b06:	2b40      	cmp	r3, #64	; 0x40
 8009b08:	d019      	beq.n	8009b3e <TIM_SlaveTimer_SetConfig+0x96>
 8009b0a:	2b40      	cmp	r3, #64	; 0x40
 8009b0c:	d854      	bhi.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
 8009b0e:	2b30      	cmp	r3, #48	; 0x30
 8009b10:	d055      	beq.n	8009bbe <TIM_SlaveTimer_SetConfig+0x116>
 8009b12:	2b30      	cmp	r3, #48	; 0x30
 8009b14:	d850      	bhi.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	d051      	beq.n	8009bbe <TIM_SlaveTimer_SetConfig+0x116>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	d84c      	bhi.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d04d      	beq.n	8009bbe <TIM_SlaveTimer_SetConfig+0x116>
 8009b22:	2b10      	cmp	r3, #16
 8009b24:	d04b      	beq.n	8009bbe <TIM_SlaveTimer_SetConfig+0x116>
 8009b26:	e047      	b.n	8009bb8 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009b34:	683b      	ldr	r3, [r7, #0]
 8009b36:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009b38:	f000 f8a9 	bl	8009c8e <TIM_ETR_SetConfig>
      break;
 8009b3c:	e040      	b.n	8009bc0 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	2b05      	cmp	r3, #5
 8009b44:	d101      	bne.n	8009b4a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e03b      	b.n	8009bc2 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	6a1b      	ldr	r3, [r3, #32]
 8009b50:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6a1a      	ldr	r2, [r3, #32]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f022 0201 	bic.w	r2, r2, #1
 8009b60:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009b70:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	011b      	lsls	r3, r3, #4
 8009b78:	68ba      	ldr	r2, [r7, #8]
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	621a      	str	r2, [r3, #32]
      break;
 8009b8e:	e017      	b.n	8009bc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b9c:	461a      	mov	r2, r3
 8009b9e:	f000 f817 	bl	8009bd0 <TIM_TI1_ConfigInputStage>
      break;
 8009ba2:	e00d      	b.n	8009bc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009bb0:	461a      	mov	r2, r3
 8009bb2:	f000 f83c 	bl	8009c2e <TIM_TI2_ConfigInputStage>
      break;
 8009bb6:	e003      	b.n	8009bc0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	75fb      	strb	r3, [r7, #23]
      break;
 8009bbc:	e000      	b.n	8009bc0 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009bbe:	bf00      	nop
  }

  return status;
 8009bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3718      	adds	r7, #24
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}
 8009bca:	bf00      	nop
 8009bcc:	fffefff8 	.word	0xfffefff8

08009bd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b087      	sub	sp, #28
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	60b9      	str	r1, [r7, #8]
 8009bda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6a1b      	ldr	r3, [r3, #32]
 8009be0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	6a1b      	ldr	r3, [r3, #32]
 8009be6:	f023 0201 	bic.w	r2, r3, #1
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	699b      	ldr	r3, [r3, #24]
 8009bf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	011b      	lsls	r3, r3, #4
 8009c00:	693a      	ldr	r2, [r7, #16]
 8009c02:	4313      	orrs	r3, r2
 8009c04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f023 030a 	bic.w	r3, r3, #10
 8009c0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	4313      	orrs	r3, r2
 8009c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	693a      	ldr	r2, [r7, #16]
 8009c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	697a      	ldr	r2, [r7, #20]
 8009c20:	621a      	str	r2, [r3, #32]
}
 8009c22:	bf00      	nop
 8009c24:	371c      	adds	r7, #28
 8009c26:	46bd      	mov	sp, r7
 8009c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2c:	4770      	bx	lr

08009c2e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c2e:	b480      	push	{r7}
 8009c30:	b087      	sub	sp, #28
 8009c32:	af00      	add	r7, sp, #0
 8009c34:	60f8      	str	r0, [r7, #12]
 8009c36:	60b9      	str	r1, [r7, #8]
 8009c38:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	6a1b      	ldr	r3, [r3, #32]
 8009c3e:	f023 0210 	bic.w	r2, r3, #16
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	6a1b      	ldr	r3, [r3, #32]
 8009c50:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c52:	697b      	ldr	r3, [r7, #20]
 8009c54:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c58:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	031b      	lsls	r3, r3, #12
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	4313      	orrs	r3, r2
 8009c62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c6a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c6c:	68bb      	ldr	r3, [r7, #8]
 8009c6e:	011b      	lsls	r3, r3, #4
 8009c70:	693a      	ldr	r2, [r7, #16]
 8009c72:	4313      	orrs	r3, r2
 8009c74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	697a      	ldr	r2, [r7, #20]
 8009c7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr

08009c8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009c8e:	b480      	push	{r7}
 8009c90:	b087      	sub	sp, #28
 8009c92:	af00      	add	r7, sp, #0
 8009c94:	60f8      	str	r0, [r7, #12]
 8009c96:	60b9      	str	r1, [r7, #8]
 8009c98:	607a      	str	r2, [r7, #4]
 8009c9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ca8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	021a      	lsls	r2, r3, #8
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	431a      	orrs	r2, r3
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	697a      	ldr	r2, [r7, #20]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	697a      	ldr	r2, [r7, #20]
 8009cc0:	609a      	str	r2, [r3, #8]
}
 8009cc2:	bf00      	nop
 8009cc4:	371c      	adds	r7, #28
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ccc:	4770      	bx	lr
	...

08009cd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b085      	sub	sp, #20
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ce0:	2b01      	cmp	r3, #1
 8009ce2:	d101      	bne.n	8009ce8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e06d      	b.n	8009dc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a30      	ldr	r2, [pc, #192]	; (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d004      	beq.n	8009d1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a2f      	ldr	r2, [pc, #188]	; (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d18:	4293      	cmp	r3, r2
 8009d1a:	d108      	bne.n	8009d2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	685b      	ldr	r3, [r3, #4]
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	68fa      	ldr	r2, [r7, #12]
 8009d46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	4a20      	ldr	r2, [pc, #128]	; (8009dd0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009d4e:	4293      	cmp	r3, r2
 8009d50:	d022      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009d5a:	d01d      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a1d      	ldr	r2, [pc, #116]	; (8009dd8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d018      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a1c      	ldr	r2, [pc, #112]	; (8009ddc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009d6c:	4293      	cmp	r3, r2
 8009d6e:	d013      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	4a1a      	ldr	r2, [pc, #104]	; (8009de0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00e      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a15      	ldr	r2, [pc, #84]	; (8009dd4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d009      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a16      	ldr	r2, [pc, #88]	; (8009de4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d004      	beq.n	8009d98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a15      	ldr	r2, [pc, #84]	; (8009de8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d10c      	bne.n	8009db2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	689b      	ldr	r3, [r3, #8]
 8009da4:	68ba      	ldr	r2, [r7, #8]
 8009da6:	4313      	orrs	r3, r2
 8009da8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68ba      	ldr	r2, [r7, #8]
 8009db0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	2201      	movs	r2, #1
 8009db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009dc2:	2300      	movs	r3, #0
}
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	40010000 	.word	0x40010000
 8009dd4:	40010400 	.word	0x40010400
 8009dd8:	40000400 	.word	0x40000400
 8009ddc:	40000800 	.word	0x40000800
 8009de0:	40000c00 	.word	0x40000c00
 8009de4:	40014000 	.word	0x40014000
 8009de8:	40001800 	.word	0x40001800

08009dec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009dec:	b480      	push	{r7}
 8009dee:	b083      	sub	sp, #12
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009df4:	bf00      	nop
 8009df6:	370c      	adds	r7, #12
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfe:	4770      	bx	lr

08009e00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr

08009e14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d101      	bne.n	8009e3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009e36:	2301      	movs	r3, #1
 8009e38:	e040      	b.n	8009ebc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d106      	bne.n	8009e50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f9 fc36 	bl	80036bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2224      	movs	r2, #36	; 0x24
 8009e54:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	681a      	ldr	r2, [r3, #0]
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	f022 0201 	bic.w	r2, r2, #1
 8009e64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f82c 	bl	8009ec4 <UART_SetConfig>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d101      	bne.n	8009e76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e022      	b.n	8009ebc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d002      	beq.n	8009e84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fa84 	bl	800a38c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009e92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	689a      	ldr	r2, [r3, #8]
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ea2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f042 0201 	orr.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fb0b 	bl	800a4d0 <UART_CheckIdleState>
 8009eba:	4603      	mov	r3, r0
}
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	3708      	adds	r7, #8
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}

08009ec4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b088      	sub	sp, #32
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	689a      	ldr	r2, [r3, #8]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	695b      	ldr	r3, [r3, #20]
 8009ede:	431a      	orrs	r2, r3
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	69db      	ldr	r3, [r3, #28]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	681a      	ldr	r2, [r3, #0]
 8009eee:	4ba6      	ldr	r3, [pc, #664]	; (800a188 <UART_SetConfig+0x2c4>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6812      	ldr	r2, [r2, #0]
 8009ef6:	6979      	ldr	r1, [r7, #20]
 8009ef8:	430b      	orrs	r3, r1
 8009efa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	685b      	ldr	r3, [r3, #4]
 8009f02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68da      	ldr	r2, [r3, #12]
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	430a      	orrs	r2, r1
 8009f10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a1b      	ldr	r3, [r3, #32]
 8009f1c:	697a      	ldr	r2, [r7, #20]
 8009f1e:	4313      	orrs	r3, r2
 8009f20:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	697a      	ldr	r2, [r7, #20]
 8009f32:	430a      	orrs	r2, r1
 8009f34:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	4a94      	ldr	r2, [pc, #592]	; (800a18c <UART_SetConfig+0x2c8>)
 8009f3c:	4293      	cmp	r3, r2
 8009f3e:	d120      	bne.n	8009f82 <UART_SetConfig+0xbe>
 8009f40:	4b93      	ldr	r3, [pc, #588]	; (800a190 <UART_SetConfig+0x2cc>)
 8009f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	2b03      	cmp	r3, #3
 8009f4c:	d816      	bhi.n	8009f7c <UART_SetConfig+0xb8>
 8009f4e:	a201      	add	r2, pc, #4	; (adr r2, 8009f54 <UART_SetConfig+0x90>)
 8009f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009f71 	.word	0x08009f71
 8009f5c:	08009f6b 	.word	0x08009f6b
 8009f60:	08009f77 	.word	0x08009f77
 8009f64:	2301      	movs	r3, #1
 8009f66:	77fb      	strb	r3, [r7, #31]
 8009f68:	e150      	b.n	800a20c <UART_SetConfig+0x348>
 8009f6a:	2302      	movs	r3, #2
 8009f6c:	77fb      	strb	r3, [r7, #31]
 8009f6e:	e14d      	b.n	800a20c <UART_SetConfig+0x348>
 8009f70:	2304      	movs	r3, #4
 8009f72:	77fb      	strb	r3, [r7, #31]
 8009f74:	e14a      	b.n	800a20c <UART_SetConfig+0x348>
 8009f76:	2308      	movs	r3, #8
 8009f78:	77fb      	strb	r3, [r7, #31]
 8009f7a:	e147      	b.n	800a20c <UART_SetConfig+0x348>
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	77fb      	strb	r3, [r7, #31]
 8009f80:	e144      	b.n	800a20c <UART_SetConfig+0x348>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4a83      	ldr	r2, [pc, #524]	; (800a194 <UART_SetConfig+0x2d0>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d132      	bne.n	8009ff2 <UART_SetConfig+0x12e>
 8009f8c:	4b80      	ldr	r3, [pc, #512]	; (800a190 <UART_SetConfig+0x2cc>)
 8009f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f92:	f003 030c 	and.w	r3, r3, #12
 8009f96:	2b0c      	cmp	r3, #12
 8009f98:	d828      	bhi.n	8009fec <UART_SetConfig+0x128>
 8009f9a:	a201      	add	r2, pc, #4	; (adr r2, 8009fa0 <UART_SetConfig+0xdc>)
 8009f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa0:	08009fd5 	.word	0x08009fd5
 8009fa4:	08009fed 	.word	0x08009fed
 8009fa8:	08009fed 	.word	0x08009fed
 8009fac:	08009fed 	.word	0x08009fed
 8009fb0:	08009fe1 	.word	0x08009fe1
 8009fb4:	08009fed 	.word	0x08009fed
 8009fb8:	08009fed 	.word	0x08009fed
 8009fbc:	08009fed 	.word	0x08009fed
 8009fc0:	08009fdb 	.word	0x08009fdb
 8009fc4:	08009fed 	.word	0x08009fed
 8009fc8:	08009fed 	.word	0x08009fed
 8009fcc:	08009fed 	.word	0x08009fed
 8009fd0:	08009fe7 	.word	0x08009fe7
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	77fb      	strb	r3, [r7, #31]
 8009fd8:	e118      	b.n	800a20c <UART_SetConfig+0x348>
 8009fda:	2302      	movs	r3, #2
 8009fdc:	77fb      	strb	r3, [r7, #31]
 8009fde:	e115      	b.n	800a20c <UART_SetConfig+0x348>
 8009fe0:	2304      	movs	r3, #4
 8009fe2:	77fb      	strb	r3, [r7, #31]
 8009fe4:	e112      	b.n	800a20c <UART_SetConfig+0x348>
 8009fe6:	2308      	movs	r3, #8
 8009fe8:	77fb      	strb	r3, [r7, #31]
 8009fea:	e10f      	b.n	800a20c <UART_SetConfig+0x348>
 8009fec:	2310      	movs	r3, #16
 8009fee:	77fb      	strb	r3, [r7, #31]
 8009ff0:	e10c      	b.n	800a20c <UART_SetConfig+0x348>
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a68      	ldr	r2, [pc, #416]	; (800a198 <UART_SetConfig+0x2d4>)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	d120      	bne.n	800a03e <UART_SetConfig+0x17a>
 8009ffc:	4b64      	ldr	r3, [pc, #400]	; (800a190 <UART_SetConfig+0x2cc>)
 8009ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a002:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a006:	2b30      	cmp	r3, #48	; 0x30
 800a008:	d013      	beq.n	800a032 <UART_SetConfig+0x16e>
 800a00a:	2b30      	cmp	r3, #48	; 0x30
 800a00c:	d814      	bhi.n	800a038 <UART_SetConfig+0x174>
 800a00e:	2b20      	cmp	r3, #32
 800a010:	d009      	beq.n	800a026 <UART_SetConfig+0x162>
 800a012:	2b20      	cmp	r3, #32
 800a014:	d810      	bhi.n	800a038 <UART_SetConfig+0x174>
 800a016:	2b00      	cmp	r3, #0
 800a018:	d002      	beq.n	800a020 <UART_SetConfig+0x15c>
 800a01a:	2b10      	cmp	r3, #16
 800a01c:	d006      	beq.n	800a02c <UART_SetConfig+0x168>
 800a01e:	e00b      	b.n	800a038 <UART_SetConfig+0x174>
 800a020:	2300      	movs	r3, #0
 800a022:	77fb      	strb	r3, [r7, #31]
 800a024:	e0f2      	b.n	800a20c <UART_SetConfig+0x348>
 800a026:	2302      	movs	r3, #2
 800a028:	77fb      	strb	r3, [r7, #31]
 800a02a:	e0ef      	b.n	800a20c <UART_SetConfig+0x348>
 800a02c:	2304      	movs	r3, #4
 800a02e:	77fb      	strb	r3, [r7, #31]
 800a030:	e0ec      	b.n	800a20c <UART_SetConfig+0x348>
 800a032:	2308      	movs	r3, #8
 800a034:	77fb      	strb	r3, [r7, #31]
 800a036:	e0e9      	b.n	800a20c <UART_SetConfig+0x348>
 800a038:	2310      	movs	r3, #16
 800a03a:	77fb      	strb	r3, [r7, #31]
 800a03c:	e0e6      	b.n	800a20c <UART_SetConfig+0x348>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a56      	ldr	r2, [pc, #344]	; (800a19c <UART_SetConfig+0x2d8>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d120      	bne.n	800a08a <UART_SetConfig+0x1c6>
 800a048:	4b51      	ldr	r3, [pc, #324]	; (800a190 <UART_SetConfig+0x2cc>)
 800a04a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a04e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a052:	2bc0      	cmp	r3, #192	; 0xc0
 800a054:	d013      	beq.n	800a07e <UART_SetConfig+0x1ba>
 800a056:	2bc0      	cmp	r3, #192	; 0xc0
 800a058:	d814      	bhi.n	800a084 <UART_SetConfig+0x1c0>
 800a05a:	2b80      	cmp	r3, #128	; 0x80
 800a05c:	d009      	beq.n	800a072 <UART_SetConfig+0x1ae>
 800a05e:	2b80      	cmp	r3, #128	; 0x80
 800a060:	d810      	bhi.n	800a084 <UART_SetConfig+0x1c0>
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <UART_SetConfig+0x1a8>
 800a066:	2b40      	cmp	r3, #64	; 0x40
 800a068:	d006      	beq.n	800a078 <UART_SetConfig+0x1b4>
 800a06a:	e00b      	b.n	800a084 <UART_SetConfig+0x1c0>
 800a06c:	2300      	movs	r3, #0
 800a06e:	77fb      	strb	r3, [r7, #31]
 800a070:	e0cc      	b.n	800a20c <UART_SetConfig+0x348>
 800a072:	2302      	movs	r3, #2
 800a074:	77fb      	strb	r3, [r7, #31]
 800a076:	e0c9      	b.n	800a20c <UART_SetConfig+0x348>
 800a078:	2304      	movs	r3, #4
 800a07a:	77fb      	strb	r3, [r7, #31]
 800a07c:	e0c6      	b.n	800a20c <UART_SetConfig+0x348>
 800a07e:	2308      	movs	r3, #8
 800a080:	77fb      	strb	r3, [r7, #31]
 800a082:	e0c3      	b.n	800a20c <UART_SetConfig+0x348>
 800a084:	2310      	movs	r3, #16
 800a086:	77fb      	strb	r3, [r7, #31]
 800a088:	e0c0      	b.n	800a20c <UART_SetConfig+0x348>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a44      	ldr	r2, [pc, #272]	; (800a1a0 <UART_SetConfig+0x2dc>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d125      	bne.n	800a0e0 <UART_SetConfig+0x21c>
 800a094:	4b3e      	ldr	r3, [pc, #248]	; (800a190 <UART_SetConfig+0x2cc>)
 800a096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a09a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a09e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0a2:	d017      	beq.n	800a0d4 <UART_SetConfig+0x210>
 800a0a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0a8:	d817      	bhi.n	800a0da <UART_SetConfig+0x216>
 800a0aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ae:	d00b      	beq.n	800a0c8 <UART_SetConfig+0x204>
 800a0b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0b4:	d811      	bhi.n	800a0da <UART_SetConfig+0x216>
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d003      	beq.n	800a0c2 <UART_SetConfig+0x1fe>
 800a0ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0be:	d006      	beq.n	800a0ce <UART_SetConfig+0x20a>
 800a0c0:	e00b      	b.n	800a0da <UART_SetConfig+0x216>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	77fb      	strb	r3, [r7, #31]
 800a0c6:	e0a1      	b.n	800a20c <UART_SetConfig+0x348>
 800a0c8:	2302      	movs	r3, #2
 800a0ca:	77fb      	strb	r3, [r7, #31]
 800a0cc:	e09e      	b.n	800a20c <UART_SetConfig+0x348>
 800a0ce:	2304      	movs	r3, #4
 800a0d0:	77fb      	strb	r3, [r7, #31]
 800a0d2:	e09b      	b.n	800a20c <UART_SetConfig+0x348>
 800a0d4:	2308      	movs	r3, #8
 800a0d6:	77fb      	strb	r3, [r7, #31]
 800a0d8:	e098      	b.n	800a20c <UART_SetConfig+0x348>
 800a0da:	2310      	movs	r3, #16
 800a0dc:	77fb      	strb	r3, [r7, #31]
 800a0de:	e095      	b.n	800a20c <UART_SetConfig+0x348>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a2f      	ldr	r2, [pc, #188]	; (800a1a4 <UART_SetConfig+0x2e0>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d125      	bne.n	800a136 <UART_SetConfig+0x272>
 800a0ea:	4b29      	ldr	r3, [pc, #164]	; (800a190 <UART_SetConfig+0x2cc>)
 800a0ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a0f0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a0f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0f8:	d017      	beq.n	800a12a <UART_SetConfig+0x266>
 800a0fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a0fe:	d817      	bhi.n	800a130 <UART_SetConfig+0x26c>
 800a100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a104:	d00b      	beq.n	800a11e <UART_SetConfig+0x25a>
 800a106:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a10a:	d811      	bhi.n	800a130 <UART_SetConfig+0x26c>
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d003      	beq.n	800a118 <UART_SetConfig+0x254>
 800a110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a114:	d006      	beq.n	800a124 <UART_SetConfig+0x260>
 800a116:	e00b      	b.n	800a130 <UART_SetConfig+0x26c>
 800a118:	2301      	movs	r3, #1
 800a11a:	77fb      	strb	r3, [r7, #31]
 800a11c:	e076      	b.n	800a20c <UART_SetConfig+0x348>
 800a11e:	2302      	movs	r3, #2
 800a120:	77fb      	strb	r3, [r7, #31]
 800a122:	e073      	b.n	800a20c <UART_SetConfig+0x348>
 800a124:	2304      	movs	r3, #4
 800a126:	77fb      	strb	r3, [r7, #31]
 800a128:	e070      	b.n	800a20c <UART_SetConfig+0x348>
 800a12a:	2308      	movs	r3, #8
 800a12c:	77fb      	strb	r3, [r7, #31]
 800a12e:	e06d      	b.n	800a20c <UART_SetConfig+0x348>
 800a130:	2310      	movs	r3, #16
 800a132:	77fb      	strb	r3, [r7, #31]
 800a134:	e06a      	b.n	800a20c <UART_SetConfig+0x348>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a1b      	ldr	r2, [pc, #108]	; (800a1a8 <UART_SetConfig+0x2e4>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d138      	bne.n	800a1b2 <UART_SetConfig+0x2ee>
 800a140:	4b13      	ldr	r3, [pc, #76]	; (800a190 <UART_SetConfig+0x2cc>)
 800a142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a146:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a14a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a14e:	d017      	beq.n	800a180 <UART_SetConfig+0x2bc>
 800a150:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a154:	d82a      	bhi.n	800a1ac <UART_SetConfig+0x2e8>
 800a156:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a15a:	d00b      	beq.n	800a174 <UART_SetConfig+0x2b0>
 800a15c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a160:	d824      	bhi.n	800a1ac <UART_SetConfig+0x2e8>
 800a162:	2b00      	cmp	r3, #0
 800a164:	d003      	beq.n	800a16e <UART_SetConfig+0x2aa>
 800a166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a16a:	d006      	beq.n	800a17a <UART_SetConfig+0x2b6>
 800a16c:	e01e      	b.n	800a1ac <UART_SetConfig+0x2e8>
 800a16e:	2300      	movs	r3, #0
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	e04b      	b.n	800a20c <UART_SetConfig+0x348>
 800a174:	2302      	movs	r3, #2
 800a176:	77fb      	strb	r3, [r7, #31]
 800a178:	e048      	b.n	800a20c <UART_SetConfig+0x348>
 800a17a:	2304      	movs	r3, #4
 800a17c:	77fb      	strb	r3, [r7, #31]
 800a17e:	e045      	b.n	800a20c <UART_SetConfig+0x348>
 800a180:	2308      	movs	r3, #8
 800a182:	77fb      	strb	r3, [r7, #31]
 800a184:	e042      	b.n	800a20c <UART_SetConfig+0x348>
 800a186:	bf00      	nop
 800a188:	efff69f3 	.word	0xefff69f3
 800a18c:	40011000 	.word	0x40011000
 800a190:	40023800 	.word	0x40023800
 800a194:	40004400 	.word	0x40004400
 800a198:	40004800 	.word	0x40004800
 800a19c:	40004c00 	.word	0x40004c00
 800a1a0:	40005000 	.word	0x40005000
 800a1a4:	40011400 	.word	0x40011400
 800a1a8:	40007800 	.word	0x40007800
 800a1ac:	2310      	movs	r3, #16
 800a1ae:	77fb      	strb	r3, [r7, #31]
 800a1b0:	e02c      	b.n	800a20c <UART_SetConfig+0x348>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	4a72      	ldr	r2, [pc, #456]	; (800a380 <UART_SetConfig+0x4bc>)
 800a1b8:	4293      	cmp	r3, r2
 800a1ba:	d125      	bne.n	800a208 <UART_SetConfig+0x344>
 800a1bc:	4b71      	ldr	r3, [pc, #452]	; (800a384 <UART_SetConfig+0x4c0>)
 800a1be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a1c6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1ca:	d017      	beq.n	800a1fc <UART_SetConfig+0x338>
 800a1cc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a1d0:	d817      	bhi.n	800a202 <UART_SetConfig+0x33e>
 800a1d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1d6:	d00b      	beq.n	800a1f0 <UART_SetConfig+0x32c>
 800a1d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a1dc:	d811      	bhi.n	800a202 <UART_SetConfig+0x33e>
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d003      	beq.n	800a1ea <UART_SetConfig+0x326>
 800a1e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a1e6:	d006      	beq.n	800a1f6 <UART_SetConfig+0x332>
 800a1e8:	e00b      	b.n	800a202 <UART_SetConfig+0x33e>
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	77fb      	strb	r3, [r7, #31]
 800a1ee:	e00d      	b.n	800a20c <UART_SetConfig+0x348>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	77fb      	strb	r3, [r7, #31]
 800a1f4:	e00a      	b.n	800a20c <UART_SetConfig+0x348>
 800a1f6:	2304      	movs	r3, #4
 800a1f8:	77fb      	strb	r3, [r7, #31]
 800a1fa:	e007      	b.n	800a20c <UART_SetConfig+0x348>
 800a1fc:	2308      	movs	r3, #8
 800a1fe:	77fb      	strb	r3, [r7, #31]
 800a200:	e004      	b.n	800a20c <UART_SetConfig+0x348>
 800a202:	2310      	movs	r3, #16
 800a204:	77fb      	strb	r3, [r7, #31]
 800a206:	e001      	b.n	800a20c <UART_SetConfig+0x348>
 800a208:	2310      	movs	r3, #16
 800a20a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	69db      	ldr	r3, [r3, #28]
 800a210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a214:	d15b      	bne.n	800a2ce <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a216:	7ffb      	ldrb	r3, [r7, #31]
 800a218:	2b08      	cmp	r3, #8
 800a21a:	d828      	bhi.n	800a26e <UART_SetConfig+0x3aa>
 800a21c:	a201      	add	r2, pc, #4	; (adr r2, 800a224 <UART_SetConfig+0x360>)
 800a21e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a222:	bf00      	nop
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a251 	.word	0x0800a251
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	0800a26f 	.word	0x0800a26f
 800a234:	0800a25f 	.word	0x0800a25f
 800a238:	0800a26f 	.word	0x0800a26f
 800a23c:	0800a26f 	.word	0x0800a26f
 800a240:	0800a26f 	.word	0x0800a26f
 800a244:	0800a267 	.word	0x0800a267
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a248:	f7fd fbac 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 800a24c:	61b8      	str	r0, [r7, #24]
        break;
 800a24e:	e013      	b.n	800a278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a250:	f7fd fbbc 	bl	80079cc <HAL_RCC_GetPCLK2Freq>
 800a254:	61b8      	str	r0, [r7, #24]
        break;
 800a256:	e00f      	b.n	800a278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a258:	4b4b      	ldr	r3, [pc, #300]	; (800a388 <UART_SetConfig+0x4c4>)
 800a25a:	61bb      	str	r3, [r7, #24]
        break;
 800a25c:	e00c      	b.n	800a278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a25e:	f7fd fa91 	bl	8007784 <HAL_RCC_GetSysClockFreq>
 800a262:	61b8      	str	r0, [r7, #24]
        break;
 800a264:	e008      	b.n	800a278 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a266:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a26a:	61bb      	str	r3, [r7, #24]
        break;
 800a26c:	e004      	b.n	800a278 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a26e:	2300      	movs	r3, #0
 800a270:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a272:	2301      	movs	r3, #1
 800a274:	77bb      	strb	r3, [r7, #30]
        break;
 800a276:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d074      	beq.n	800a368 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	005a      	lsls	r2, r3, #1
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	085b      	lsrs	r3, r3, #1
 800a288:	441a      	add	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a292:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a294:	693b      	ldr	r3, [r7, #16]
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d916      	bls.n	800a2c8 <UART_SetConfig+0x404>
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a0:	d212      	bcs.n	800a2c8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	b29b      	uxth	r3, r3
 800a2a6:	f023 030f 	bic.w	r3, r3, #15
 800a2aa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a2ac:	693b      	ldr	r3, [r7, #16]
 800a2ae:	085b      	lsrs	r3, r3, #1
 800a2b0:	b29b      	uxth	r3, r3
 800a2b2:	f003 0307 	and.w	r3, r3, #7
 800a2b6:	b29a      	uxth	r2, r3
 800a2b8:	89fb      	ldrh	r3, [r7, #14]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	89fa      	ldrh	r2, [r7, #14]
 800a2c4:	60da      	str	r2, [r3, #12]
 800a2c6:	e04f      	b.n	800a368 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	77bb      	strb	r3, [r7, #30]
 800a2cc:	e04c      	b.n	800a368 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a2ce:	7ffb      	ldrb	r3, [r7, #31]
 800a2d0:	2b08      	cmp	r3, #8
 800a2d2:	d828      	bhi.n	800a326 <UART_SetConfig+0x462>
 800a2d4:	a201      	add	r2, pc, #4	; (adr r2, 800a2dc <UART_SetConfig+0x418>)
 800a2d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2da:	bf00      	nop
 800a2dc:	0800a301 	.word	0x0800a301
 800a2e0:	0800a309 	.word	0x0800a309
 800a2e4:	0800a311 	.word	0x0800a311
 800a2e8:	0800a327 	.word	0x0800a327
 800a2ec:	0800a317 	.word	0x0800a317
 800a2f0:	0800a327 	.word	0x0800a327
 800a2f4:	0800a327 	.word	0x0800a327
 800a2f8:	0800a327 	.word	0x0800a327
 800a2fc:	0800a31f 	.word	0x0800a31f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a300:	f7fd fb50 	bl	80079a4 <HAL_RCC_GetPCLK1Freq>
 800a304:	61b8      	str	r0, [r7, #24]
        break;
 800a306:	e013      	b.n	800a330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a308:	f7fd fb60 	bl	80079cc <HAL_RCC_GetPCLK2Freq>
 800a30c:	61b8      	str	r0, [r7, #24]
        break;
 800a30e:	e00f      	b.n	800a330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a310:	4b1d      	ldr	r3, [pc, #116]	; (800a388 <UART_SetConfig+0x4c4>)
 800a312:	61bb      	str	r3, [r7, #24]
        break;
 800a314:	e00c      	b.n	800a330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a316:	f7fd fa35 	bl	8007784 <HAL_RCC_GetSysClockFreq>
 800a31a:	61b8      	str	r0, [r7, #24]
        break;
 800a31c:	e008      	b.n	800a330 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a31e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a322:	61bb      	str	r3, [r7, #24]
        break;
 800a324:	e004      	b.n	800a330 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	77bb      	strb	r3, [r7, #30]
        break;
 800a32e:	bf00      	nop
    }

    if (pclk != 0U)
 800a330:	69bb      	ldr	r3, [r7, #24]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d018      	beq.n	800a368 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	085a      	lsrs	r2, r3, #1
 800a33c:	69bb      	ldr	r3, [r7, #24]
 800a33e:	441a      	add	r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	fbb2 f3f3 	udiv	r3, r2, r3
 800a348:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b0f      	cmp	r3, #15
 800a34e:	d909      	bls.n	800a364 <UART_SetConfig+0x4a0>
 800a350:	693b      	ldr	r3, [r7, #16]
 800a352:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a356:	d205      	bcs.n	800a364 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	b29a      	uxth	r2, r3
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	60da      	str	r2, [r3, #12]
 800a362:	e001      	b.n	800a368 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a374:	7fbb      	ldrb	r3, [r7, #30]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3720      	adds	r7, #32
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	40007c00 	.word	0x40007c00
 800a384:	40023800 	.word	0x40023800
 800a388:	00f42400 	.word	0x00f42400

0800a38c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a398:	f003 0301 	and.w	r3, r3, #1
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d00a      	beq.n	800a3b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	685b      	ldr	r3, [r3, #4]
 800a3a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	430a      	orrs	r2, r1
 800a3b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ba:	f003 0302 	and.w	r3, r3, #2
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d00a      	beq.n	800a3d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	430a      	orrs	r2, r1
 800a3d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3dc:	f003 0304 	and.w	r3, r3, #4
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d00a      	beq.n	800a3fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fe:	f003 0308 	and.w	r3, r3, #8
 800a402:	2b00      	cmp	r3, #0
 800a404:	d00a      	beq.n	800a41c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	430a      	orrs	r2, r1
 800a41a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a420:	f003 0310 	and.w	r3, r3, #16
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00a      	beq.n	800a43e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	689b      	ldr	r3, [r3, #8]
 800a42e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	430a      	orrs	r2, r1
 800a43c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	f003 0320 	and.w	r3, r3, #32
 800a446:	2b00      	cmp	r3, #0
 800a448:	d00a      	beq.n	800a460 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	689b      	ldr	r3, [r3, #8]
 800a450:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	430a      	orrs	r2, r1
 800a45e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d01a      	beq.n	800a4a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	430a      	orrs	r2, r1
 800a480:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a48a:	d10a      	bne.n	800a4a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d00a      	beq.n	800a4c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	605a      	str	r2, [r3, #4]
  }
}
 800a4c4:	bf00      	nop
 800a4c6:	370c      	adds	r7, #12
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ce:	4770      	bx	lr

0800a4d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b086      	sub	sp, #24
 800a4d4:	af02      	add	r7, sp, #8
 800a4d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a4e0:	f7fa fc58 	bl	8004d94 <HAL_GetTick>
 800a4e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	f003 0308 	and.w	r3, r3, #8
 800a4f0:	2b08      	cmp	r3, #8
 800a4f2:	d10e      	bne.n	800a512 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a4f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a4f8:	9300      	str	r3, [sp, #0]
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a502:	6878      	ldr	r0, [r7, #4]
 800a504:	f000 f81b 	bl	800a53e <UART_WaitOnFlagUntilTimeout>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d001      	beq.n	800a512 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a50e:	2303      	movs	r3, #3
 800a510:	e011      	b.n	800a536 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2220      	movs	r2, #32
 800a516:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2220      	movs	r2, #32
 800a51c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2200      	movs	r2, #0
 800a524:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	2200      	movs	r2, #0
 800a52a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2200      	movs	r2, #0
 800a530:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a534:	2300      	movs	r3, #0
}
 800a536:	4618      	mov	r0, r3
 800a538:	3710      	adds	r7, #16
 800a53a:	46bd      	mov	sp, r7
 800a53c:	bd80      	pop	{r7, pc}

0800a53e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a53e:	b580      	push	{r7, lr}
 800a540:	b09c      	sub	sp, #112	; 0x70
 800a542:	af00      	add	r7, sp, #0
 800a544:	60f8      	str	r0, [r7, #12]
 800a546:	60b9      	str	r1, [r7, #8]
 800a548:	603b      	str	r3, [r7, #0]
 800a54a:	4613      	mov	r3, r2
 800a54c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a54e:	e0a7      	b.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a556:	f000 80a3 	beq.w	800a6a0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a55a:	f7fa fc1b 	bl	8004d94 <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	683b      	ldr	r3, [r7, #0]
 800a562:	1ad3      	subs	r3, r2, r3
 800a564:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a566:	429a      	cmp	r2, r3
 800a568:	d302      	bcc.n	800a570 <UART_WaitOnFlagUntilTimeout+0x32>
 800a56a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d13f      	bne.n	800a5f0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a576:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a578:	e853 3f00 	ldrex	r3, [r3]
 800a57c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a57e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a580:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a584:	667b      	str	r3, [r7, #100]	; 0x64
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	461a      	mov	r2, r3
 800a58c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a58e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a590:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a592:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a594:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a596:	e841 2300 	strex	r3, r2, [r1]
 800a59a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a59c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1e6      	bne.n	800a570 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5a2:	68fb      	ldr	r3, [r7, #12]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	3308      	adds	r3, #8
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5ac:	e853 3f00 	ldrex	r3, [r3]
 800a5b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	f023 0301 	bic.w	r3, r3, #1
 800a5b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a5c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a5c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5ca:	e841 2300 	strex	r3, r2, [r1]
 800a5ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d1e5      	bne.n	800a5a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	2220      	movs	r2, #32
 800a5da:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	2220      	movs	r2, #32
 800a5e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e068      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0304 	and.w	r3, r3, #4
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d050      	beq.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	69db      	ldr	r3, [r3, #28]
 800a604:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a60c:	d148      	bne.n	800a6a0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a616:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a620:	e853 3f00 	ldrex	r3, [r3]
 800a624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a628:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a62c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	461a      	mov	r2, r3
 800a634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a636:	637b      	str	r3, [r7, #52]	; 0x34
 800a638:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a63c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a63e:	e841 2300 	strex	r3, r2, [r1]
 800a642:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1e6      	bne.n	800a618 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	3308      	adds	r3, #8
 800a650:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	e853 3f00 	ldrex	r3, [r3]
 800a658:	613b      	str	r3, [r7, #16]
   return(result);
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	f023 0301 	bic.w	r3, r3, #1
 800a660:	66bb      	str	r3, [r7, #104]	; 0x68
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3308      	adds	r3, #8
 800a668:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a66a:	623a      	str	r2, [r7, #32]
 800a66c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a66e:	69f9      	ldr	r1, [r7, #28]
 800a670:	6a3a      	ldr	r2, [r7, #32]
 800a672:	e841 2300 	strex	r3, r2, [r1]
 800a676:	61bb      	str	r3, [r7, #24]
   return(result);
 800a678:	69bb      	ldr	r3, [r7, #24]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d1e5      	bne.n	800a64a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2220      	movs	r2, #32
 800a682:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2220      	movs	r2, #32
 800a688:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2220      	movs	r2, #32
 800a690:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2200      	movs	r2, #0
 800a698:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e010      	b.n	800a6c2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	69da      	ldr	r2, [r3, #28]
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	4013      	ands	r3, r2
 800a6aa:	68ba      	ldr	r2, [r7, #8]
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	bf0c      	ite	eq
 800a6b0:	2301      	moveq	r3, #1
 800a6b2:	2300      	movne	r3, #0
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	79fb      	ldrb	r3, [r7, #7]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	f43f af48 	beq.w	800a550 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a6c0:	2300      	movs	r3, #0
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3770      	adds	r7, #112	; 0x70
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6e0:	683a      	ldr	r2, [r7, #0]
 800a6e2:	6812      	ldr	r2, [r2, #0]
 800a6e4:	f023 0101 	bic.w	r1, r3, #1
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	2b08      	cmp	r3, #8
 800a6f4:	d102      	bne.n	800a6fc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a6f6:	2340      	movs	r3, #64	; 0x40
 800a6f8:	617b      	str	r3, [r7, #20]
 800a6fa:	e001      	b.n	800a700 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a704:	697b      	ldr	r3, [r7, #20]
 800a706:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a70c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a712:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a714:	683b      	ldr	r3, [r7, #0]
 800a716:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a718:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a71e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a720:	683b      	ldr	r3, [r7, #0]
 800a722:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a724:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a72a:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a72c:	683b      	ldr	r3, [r7, #0]
 800a72e:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a730:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a736:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a73c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a742:	4313      	orrs	r3, r2
 800a744:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	4313      	orrs	r3, r2
 800a74e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a754:	693a      	ldr	r2, [r7, #16]
 800a756:	4313      	orrs	r3, r2
 800a758:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	4313      	orrs	r3, r2
 800a762:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800a764:	4b20      	ldr	r3, [pc, #128]	; (800a7e8 <FMC_NORSRAM_Init+0x11c>)
 800a766:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a76e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a776:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a77e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	43db      	mvns	r3, r3
 800a78e:	ea02 0103 	and.w	r1, r2, r3
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	681a      	ldr	r2, [r3, #0]
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	4319      	orrs	r1, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7a8:	d10c      	bne.n	800a7c4 <FMC_NORSRAM_Init+0xf8>
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d008      	beq.n	800a7c4 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7be:	431a      	orrs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d006      	beq.n	800a7da <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681a      	ldr	r2, [r3, #0]
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d4:	431a      	orrs	r2, r3
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	371c      	adds	r7, #28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	0008fb7f 	.word	0x0008fb7f

0800a7ec <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b087      	sub	sp, #28
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	60f8      	str	r0, [r7, #12]
 800a7f4:	60b9      	str	r1, [r7, #8]
 800a7f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	1c5a      	adds	r2, r3, #1
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a802:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	431a      	orrs	r2, r3
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	021b      	lsls	r3, r3, #8
 800a818:	431a      	orrs	r2, r3
 800a81a:	68bb      	ldr	r3, [r7, #8]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	041b      	lsls	r3, r3, #16
 800a820:	431a      	orrs	r2, r3
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	3b01      	subs	r3, #1
 800a828:	051b      	lsls	r3, r3, #20
 800a82a:	431a      	orrs	r2, r3
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	695b      	ldr	r3, [r3, #20]
 800a830:	3b02      	subs	r3, #2
 800a832:	061b      	lsls	r3, r3, #24
 800a834:	431a      	orrs	r2, r3
 800a836:	68bb      	ldr	r3, [r7, #8]
 800a838:	699b      	ldr	r3, [r3, #24]
 800a83a:	4313      	orrs	r3, r2
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	3201      	adds	r2, #1
 800a840:	4319      	orrs	r1, r3
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a850:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a854:	d113      	bne.n	800a87e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	685b      	ldr	r3, [r3, #4]
 800a85a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a85e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	691b      	ldr	r3, [r3, #16]
 800a864:	3b01      	subs	r3, #1
 800a866:	051b      	lsls	r3, r3, #20
 800a868:	697a      	ldr	r2, [r7, #20]
 800a86a:	4313      	orrs	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	685b      	ldr	r3, [r3, #4]
 800a872:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	431a      	orrs	r2, r3
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	371c      	adds	r7, #28
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b085      	sub	sp, #20
 800a890:	af00      	add	r7, sp, #0
 800a892:	60f8      	str	r0, [r7, #12]
 800a894:	60b9      	str	r1, [r7, #8]
 800a896:	607a      	str	r2, [r7, #4]
 800a898:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a8a0:	d11d      	bne.n	800a8de <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a8aa:	4b13      	ldr	r3, [pc, #76]	; (800a8f8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a8ac:	4013      	ands	r3, r2
 800a8ae:	68ba      	ldr	r2, [r7, #8]
 800a8b0:	6811      	ldr	r1, [r2, #0]
 800a8b2:	68ba      	ldr	r2, [r7, #8]
 800a8b4:	6852      	ldr	r2, [r2, #4]
 800a8b6:	0112      	lsls	r2, r2, #4
 800a8b8:	4311      	orrs	r1, r2
 800a8ba:	68ba      	ldr	r2, [r7, #8]
 800a8bc:	6892      	ldr	r2, [r2, #8]
 800a8be:	0212      	lsls	r2, r2, #8
 800a8c0:	4311      	orrs	r1, r2
 800a8c2:	68ba      	ldr	r2, [r7, #8]
 800a8c4:	6992      	ldr	r2, [r2, #24]
 800a8c6:	4311      	orrs	r1, r2
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	68d2      	ldr	r2, [r2, #12]
 800a8cc:	0412      	lsls	r2, r2, #16
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	ea43 0102 	orr.w	r1, r3, r2
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a8dc:	e005      	b.n	800a8ea <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a8e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a8ea:	2300      	movs	r3, #0
}
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	3714      	adds	r7, #20
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr
 800a8f8:	cff00000 	.word	0xcff00000

0800a8fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a8fc:	b084      	sub	sp, #16
 800a8fe:	b480      	push	{r7}
 800a900:	b085      	sub	sp, #20
 800a902:	af00      	add	r7, sp, #0
 800a904:	6078      	str	r0, [r7, #4]
 800a906:	f107 001c 	add.w	r0, r7, #28
 800a90a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a90e:	2300      	movs	r3, #0
 800a910:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a912:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800a914:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a916:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800a918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800a91a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a91c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800a91e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800a922:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800a926:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a928:	68fa      	ldr	r2, [r7, #12]
 800a92a:	4313      	orrs	r3, r2
 800a92c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	685a      	ldr	r2, [r3, #4]
 800a932:	4b07      	ldr	r3, [pc, #28]	; (800a950 <SDMMC_Init+0x54>)
 800a934:	4013      	ands	r3, r2
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	431a      	orrs	r2, r3
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a93e:	2300      	movs	r3, #0
}
 800a940:	4618      	mov	r0, r3
 800a942:	3714      	adds	r7, #20
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	b004      	add	sp, #16
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	ffff8100 	.word	0xffff8100

0800a954 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a962:	4618      	mov	r0, r3
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr

0800a96e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800a96e:	b480      	push	{r7}
 800a970:	b083      	sub	sp, #12
 800a972:	af00      	add	r7, sp, #0
 800a974:	6078      	str	r0, [r7, #4]
 800a976:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a982:	2300      	movs	r3, #0
}
 800a984:	4618      	mov	r0, r3
 800a986:	370c      	adds	r7, #12
 800a988:	46bd      	mov	sp, r7
 800a98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98e:	4770      	bx	lr

0800a990 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800a990:	b480      	push	{r7}
 800a992:	b083      	sub	sp, #12
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	2203      	movs	r2, #3
 800a99c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a99e:	2300      	movs	r3, #0
}
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	370c      	adds	r7, #12
 800a9a4:	46bd      	mov	sp, r7
 800a9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9aa:	4770      	bx	lr

0800a9ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0303 	and.w	r3, r3, #3
}
 800a9bc:	4618      	mov	r0, r3
 800a9be:	370c      	adds	r7, #12
 800a9c0:	46bd      	mov	sp, r7
 800a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c6:	4770      	bx	lr

0800a9c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
 800a9d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9de:	683b      	ldr	r3, [r7, #0]
 800a9e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a9ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a9f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a9f4:	68fa      	ldr	r2, [r7, #12]
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	68da      	ldr	r2, [r3, #12]
 800a9fe:	4b06      	ldr	r3, [pc, #24]	; (800aa18 <SDMMC_SendCommand+0x50>)
 800aa00:	4013      	ands	r3, r2
 800aa02:	68fa      	ldr	r2, [r7, #12]
 800aa04:	431a      	orrs	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800aa0a:	2300      	movs	r3, #0
}
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	3714      	adds	r7, #20
 800aa10:	46bd      	mov	sp, r7
 800aa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa16:	4770      	bx	lr
 800aa18:	fffff000 	.word	0xfffff000

0800aa1c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800aa1c:	b480      	push	{r7}
 800aa1e:	b083      	sub	sp, #12
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	691b      	ldr	r3, [r3, #16]
 800aa28:	b2db      	uxtb	r3, r3
}
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	370c      	adds	r7, #12
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa34:	4770      	bx	lr

0800aa36 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800aa36:	b480      	push	{r7}
 800aa38:	b085      	sub	sp, #20
 800aa3a:	af00      	add	r7, sp, #0
 800aa3c:	6078      	str	r0, [r7, #4]
 800aa3e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	3314      	adds	r3, #20
 800aa44:	461a      	mov	r2, r3
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	4413      	add	r3, r2
 800aa4a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
}  
 800aa50:	4618      	mov	r0, r3
 800aa52:	3714      	adds	r7, #20
 800aa54:	46bd      	mov	sp, r7
 800aa56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5a:	4770      	bx	lr

0800aa5c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b085      	sub	sp, #20
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
 800aa64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800aa66:	2300      	movs	r3, #0
 800aa68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800aa72:	683b      	ldr	r3, [r7, #0]
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa82:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800aa88:	431a      	orrs	r2, r3
                       Data->DPSM);
 800aa8a:	683b      	ldr	r3, [r7, #0]
 800aa8c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800aa8e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa9a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	431a      	orrs	r2, r3
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800aaa6:	2300      	movs	r3, #0

}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3714      	adds	r7, #20
 800aaac:	46bd      	mov	sp, r7
 800aaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab2:	4770      	bx	lr

0800aab4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b088      	sub	sp, #32
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
 800aabc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800aac2:	2310      	movs	r3, #16
 800aac4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aac6:	2340      	movs	r3, #64	; 0x40
 800aac8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaca:	2300      	movs	r3, #0
 800aacc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aace:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aad2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aad4:	f107 0308 	add.w	r3, r7, #8
 800aad8:	4619      	mov	r1, r3
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f7ff ff74 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800aae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aae4:	2110      	movs	r1, #16
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f000 f9d6 	bl	800ae98 <SDMMC_GetCmdResp1>
 800aaec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aaee:	69fb      	ldr	r3, [r7, #28]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3720      	adds	r7, #32
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ab06:	2311      	movs	r3, #17
 800ab08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab0a:	2340      	movs	r3, #64	; 0x40
 800ab0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab0e:	2300      	movs	r3, #0
 800ab10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab18:	f107 0308 	add.w	r3, r7, #8
 800ab1c:	4619      	mov	r1, r3
 800ab1e:	6878      	ldr	r0, [r7, #4]
 800ab20:	f7ff ff52 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ab24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab28:	2111      	movs	r1, #17
 800ab2a:	6878      	ldr	r0, [r7, #4]
 800ab2c:	f000 f9b4 	bl	800ae98 <SDMMC_GetCmdResp1>
 800ab30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab32:	69fb      	ldr	r3, [r7, #28]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3720      	adds	r7, #32
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b088      	sub	sp, #32
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ab4a:	2312      	movs	r3, #18
 800ab4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab4e:	2340      	movs	r3, #64	; 0x40
 800ab50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab52:	2300      	movs	r3, #0
 800ab54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab5c:	f107 0308 	add.w	r3, r7, #8
 800ab60:	4619      	mov	r1, r3
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f7ff ff30 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ab68:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab6c:	2112      	movs	r1, #18
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f000 f992 	bl	800ae98 <SDMMC_GetCmdResp1>
 800ab74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab76:	69fb      	ldr	r3, [r7, #28]
}
 800ab78:	4618      	mov	r0, r3
 800ab7a:	3720      	adds	r7, #32
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bd80      	pop	{r7, pc}

0800ab80 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b088      	sub	sp, #32
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
 800ab88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ab8e:	2318      	movs	r3, #24
 800ab90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab92:	2340      	movs	r3, #64	; 0x40
 800ab94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab96:	2300      	movs	r3, #0
 800ab98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aba0:	f107 0308 	add.w	r3, r7, #8
 800aba4:	4619      	mov	r1, r3
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f7ff ff0e 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800abac:	f241 3288 	movw	r2, #5000	; 0x1388
 800abb0:	2118      	movs	r1, #24
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f000 f970 	bl	800ae98 <SDMMC_GetCmdResp1>
 800abb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abba:	69fb      	ldr	r3, [r7, #28]
}
 800abbc:	4618      	mov	r0, r3
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}

0800abc4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800abd2:	2319      	movs	r3, #25
 800abd4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800abd6:	2340      	movs	r3, #64	; 0x40
 800abd8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abda:	2300      	movs	r3, #0
 800abdc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abe4:	f107 0308 	add.w	r3, r7, #8
 800abe8:	4619      	mov	r1, r3
 800abea:	6878      	ldr	r0, [r7, #4]
 800abec:	f7ff feec 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800abf0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abf4:	2119      	movs	r1, #25
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 f94e 	bl	800ae98 <SDMMC_GetCmdResp1>
 800abfc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800abfe:	69fb      	ldr	r3, [r7, #28]
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3720      	adds	r7, #32
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}

0800ac08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b088      	sub	sp, #32
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ac10:	2300      	movs	r3, #0
 800ac12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ac14:	230c      	movs	r3, #12
 800ac16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac18:	2340      	movs	r3, #64	; 0x40
 800ac1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac26:	f107 0308 	add.w	r3, r7, #8
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f7ff fecb 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ac32:	4a05      	ldr	r2, [pc, #20]	; (800ac48 <SDMMC_CmdStopTransfer+0x40>)
 800ac34:	210c      	movs	r1, #12
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f000 f92e 	bl	800ae98 <SDMMC_GetCmdResp1>
 800ac3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac3e:	69fb      	ldr	r3, [r7, #28]
}
 800ac40:	4618      	mov	r0, r3
 800ac42:	3720      	adds	r7, #32
 800ac44:	46bd      	mov	sp, r7
 800ac46:	bd80      	pop	{r7, pc}
 800ac48:	05f5e100 	.word	0x05f5e100

0800ac4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b08a      	sub	sp, #40	; 0x28
 800ac50:	af00      	add	r7, sp, #0
 800ac52:	60f8      	str	r0, [r7, #12]
 800ac54:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ac58:	683b      	ldr	r3, [r7, #0]
 800ac5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ac5c:	2307      	movs	r3, #7
 800ac5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac60:	2340      	movs	r3, #64	; 0x40
 800ac62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac64:	2300      	movs	r3, #0
 800ac66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac6c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac6e:	f107 0310 	add.w	r3, r7, #16
 800ac72:	4619      	mov	r1, r3
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f7ff fea7 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ac7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac7e:	2107      	movs	r1, #7
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f000 f909 	bl	800ae98 <SDMMC_GetCmdResp1>
 800ac86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ac88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3728      	adds	r7, #40	; 0x28
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}

0800ac92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ac92:	b580      	push	{r7, lr}
 800ac94:	b088      	sub	sp, #32
 800ac96:	af00      	add	r7, sp, #0
 800ac98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800ac9a:	2300      	movs	r3, #0
 800ac9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ac9e:	2300      	movs	r3, #0
 800aca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800aca2:	2300      	movs	r3, #0
 800aca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acb0:	f107 0308 	add.w	r3, r7, #8
 800acb4:	4619      	mov	r1, r3
 800acb6:	6878      	ldr	r0, [r7, #4]
 800acb8:	f7ff fe86 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fb23 	bl	800b308 <SDMMC_GetCmdError>
 800acc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acc4:	69fb      	ldr	r3, [r7, #28]
}
 800acc6:	4618      	mov	r0, r3
 800acc8:	3720      	adds	r7, #32
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}

0800acce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800acce:	b580      	push	{r7, lr}
 800acd0:	b088      	sub	sp, #32
 800acd2:	af00      	add	r7, sp, #0
 800acd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800acd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800acda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800acdc:	2308      	movs	r3, #8
 800acde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ace0:	2340      	movs	r3, #64	; 0x40
 800ace2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ace4:	2300      	movs	r3, #0
 800ace6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ace8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acee:	f107 0308 	add.w	r3, r7, #8
 800acf2:	4619      	mov	r1, r3
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f7ff fe67 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800acfa:	6878      	ldr	r0, [r7, #4]
 800acfc:	f000 fab6 	bl	800b26c <SDMMC_GetCmdResp7>
 800ad00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad02:	69fb      	ldr	r3, [r7, #28]
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3720      	adds	r7, #32
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b088      	sub	sp, #32
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ad1a:	2337      	movs	r3, #55	; 0x37
 800ad1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad1e:	2340      	movs	r3, #64	; 0x40
 800ad20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad2c:	f107 0308 	add.w	r3, r7, #8
 800ad30:	4619      	mov	r1, r3
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f7ff fe48 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ad38:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad3c:	2137      	movs	r1, #55	; 0x37
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f8aa 	bl	800ae98 <SDMMC_GetCmdResp1>
 800ad44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad46:	69fb      	ldr	r3, [r7, #28]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3720      	adds	r7, #32
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b088      	sub	sp, #32
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	4b0d      	ldr	r3, [pc, #52]	; (800ad94 <SDMMC_CmdAppOperCommand+0x44>)
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ad62:	2329      	movs	r3, #41	; 0x29
 800ad64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad66:	2340      	movs	r3, #64	; 0x40
 800ad68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad74:	f107 0308 	add.w	r3, r7, #8
 800ad78:	4619      	mov	r1, r3
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fe24 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f9bf 	bl	800b104 <SDMMC_GetCmdResp3>
 800ad86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad88:	69fb      	ldr	r3, [r7, #28]
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3720      	adds	r7, #32
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
 800ad92:	bf00      	nop
 800ad94:	80100000 	.word	0x80100000

0800ad98 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ad98:	b580      	push	{r7, lr}
 800ad9a:	b088      	sub	sp, #32
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ada0:	2300      	movs	r3, #0
 800ada2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ada4:	2302      	movs	r3, #2
 800ada6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ada8:	23c0      	movs	r3, #192	; 0xc0
 800adaa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adac:	2300      	movs	r3, #0
 800adae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb6:	f107 0308 	add.w	r3, r7, #8
 800adba:	4619      	mov	r1, r3
 800adbc:	6878      	ldr	r0, [r7, #4]
 800adbe:	f7ff fe03 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f956 	bl	800b074 <SDMMC_GetCmdResp2>
 800adc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800ade2:	2309      	movs	r3, #9
 800ade4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ade6:	23c0      	movs	r3, #192	; 0xc0
 800ade8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adea:	2300      	movs	r3, #0
 800adec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf4:	f107 0308 	add.w	r3, r7, #8
 800adf8:	4619      	mov	r1, r3
 800adfa:	6878      	ldr	r0, [r7, #4]
 800adfc:	f7ff fde4 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	f000 f937 	bl	800b074 <SDMMC_GetCmdResp2>
 800ae06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae08:	69fb      	ldr	r3, [r7, #28]
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3720      	adds	r7, #32
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b088      	sub	sp, #32
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
 800ae1a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ae20:	2303      	movs	r3, #3
 800ae22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae24:	2340      	movs	r3, #64	; 0x40
 800ae26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae32:	f107 0308 	add.w	r3, r7, #8
 800ae36:	4619      	mov	r1, r3
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f7ff fdc5 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	2103      	movs	r1, #3
 800ae42:	6878      	ldr	r0, [r7, #4]
 800ae44:	f000 f99c 	bl	800b180 <SDMMC_GetCmdResp6>
 800ae48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4a:	69fb      	ldr	r3, [r7, #28]
}
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	3720      	adds	r7, #32
 800ae50:	46bd      	mov	sp, r7
 800ae52:	bd80      	pop	{r7, pc}

0800ae54 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae54:	b580      	push	{r7, lr}
 800ae56:	b088      	sub	sp, #32
 800ae58:	af00      	add	r7, sp, #0
 800ae5a:	6078      	str	r0, [r7, #4]
 800ae5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae62:	230d      	movs	r3, #13
 800ae64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae66:	2340      	movs	r3, #64	; 0x40
 800ae68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae74:	f107 0308 	add.w	r3, r7, #8
 800ae78:	4619      	mov	r1, r3
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f7ff fda4 	bl	800a9c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ae80:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae84:	210d      	movs	r1, #13
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 f806 	bl	800ae98 <SDMMC_GetCmdResp1>
 800ae8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	60f8      	str	r0, [r7, #12]
 800aea0:	460b      	mov	r3, r1
 800aea2:	607a      	str	r2, [r7, #4]
 800aea4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800aea6:	4b70      	ldr	r3, [pc, #448]	; (800b068 <SDMMC_GetCmdResp1+0x1d0>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a70      	ldr	r2, [pc, #448]	; (800b06c <SDMMC_GetCmdResp1+0x1d4>)
 800aeac:	fba2 2303 	umull	r2, r3, r2, r3
 800aeb0:	0a5a      	lsrs	r2, r3, #9
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	fb02 f303 	mul.w	r3, r2, r3
 800aeb8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	1e5a      	subs	r2, r3, #1
 800aebe:	61fa      	str	r2, [r7, #28]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d102      	bne.n	800aeca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800aec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aec8:	e0c9      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aece:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d0ef      	beq.n	800aeba <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800aeda:	69bb      	ldr	r3, [r7, #24]
 800aedc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d1ea      	bne.n	800aeba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aee8:	f003 0304 	and.w	r3, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d004      	beq.n	800aefa <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2204      	movs	r2, #4
 800aef4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800aef6:	2304      	movs	r3, #4
 800aef8:	e0b1      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aefe:	f003 0301 	and.w	r3, r3, #1
 800af02:	2b00      	cmp	r3, #0
 800af04:	d004      	beq.n	800af10 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2201      	movs	r2, #1
 800af0a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af0c:	2301      	movs	r3, #1
 800af0e:	e0a6      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	22c5      	movs	r2, #197	; 0xc5
 800af14:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800af16:	68f8      	ldr	r0, [r7, #12]
 800af18:	f7ff fd80 	bl	800aa1c <SDMMC_GetCommandResponse>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	7afb      	ldrb	r3, [r7, #11]
 800af22:	4293      	cmp	r3, r2
 800af24:	d001      	beq.n	800af2a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800af26:	2301      	movs	r3, #1
 800af28:	e099      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800af2a:	2100      	movs	r1, #0
 800af2c:	68f8      	ldr	r0, [r7, #12]
 800af2e:	f7ff fd82 	bl	800aa36 <SDMMC_GetResponse>
 800af32:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800af34:	697a      	ldr	r2, [r7, #20]
 800af36:	4b4e      	ldr	r3, [pc, #312]	; (800b070 <SDMMC_GetCmdResp1+0x1d8>)
 800af38:	4013      	ands	r3, r2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d101      	bne.n	800af42 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800af3e:	2300      	movs	r3, #0
 800af40:	e08d      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800af42:	697b      	ldr	r3, [r7, #20]
 800af44:	2b00      	cmp	r3, #0
 800af46:	da02      	bge.n	800af4e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800af48:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800af4c:	e087      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d001      	beq.n	800af5c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800af58:	2340      	movs	r3, #64	; 0x40
 800af5a:	e080      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af62:	2b00      	cmp	r3, #0
 800af64:	d001      	beq.n	800af6a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800af66:	2380      	movs	r3, #128	; 0x80
 800af68:	e079      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800af6a:	697b      	ldr	r3, [r7, #20]
 800af6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af70:	2b00      	cmp	r3, #0
 800af72:	d002      	beq.n	800af7a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800af74:	f44f 7380 	mov.w	r3, #256	; 0x100
 800af78:	e071      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af80:	2b00      	cmp	r3, #0
 800af82:	d002      	beq.n	800af8a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800af84:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af88:	e069      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800af8a:	697b      	ldr	r3, [r7, #20]
 800af8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800af90:	2b00      	cmp	r3, #0
 800af92:	d002      	beq.n	800af9a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800af94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af98:	e061      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800af9a:	697b      	ldr	r3, [r7, #20]
 800af9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d002      	beq.n	800afaa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800afa4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800afa8:	e059      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d002      	beq.n	800afba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800afb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800afb8:	e051      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800afba:	697b      	ldr	r3, [r7, #20]
 800afbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d002      	beq.n	800afca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800afc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800afc8:	e049      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800afca:	697b      	ldr	r3, [r7, #20]
 800afcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800afd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800afd8:	e041      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800afda:	697b      	ldr	r3, [r7, #20]
 800afdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d002      	beq.n	800afea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800afe4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800afe8:	e039      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d002      	beq.n	800affa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800aff4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800aff8:	e031      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b000:	2b00      	cmp	r3, #0
 800b002:	d002      	beq.n	800b00a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b004:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b008:	e029      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b010:	2b00      	cmp	r3, #0
 800b012:	d002      	beq.n	800b01a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b014:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b018:	e021      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b020:	2b00      	cmp	r3, #0
 800b022:	d002      	beq.n	800b02a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b024:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b028:	e019      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b034:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b038:	e011      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b03a:	697b      	ldr	r3, [r7, #20]
 800b03c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b044:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b048:	e009      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	f003 0308 	and.w	r3, r3, #8
 800b050:	2b00      	cmp	r3, #0
 800b052:	d002      	beq.n	800b05a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b054:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b058:	e001      	b.n	800b05e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b05a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b05e:	4618      	mov	r0, r3
 800b060:	3720      	adds	r7, #32
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	20000090 	.word	0x20000090
 800b06c:	10624dd3 	.word	0x10624dd3
 800b070:	fdffe008 	.word	0xfdffe008

0800b074 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b074:	b480      	push	{r7}
 800b076:	b085      	sub	sp, #20
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b07c:	4b1f      	ldr	r3, [pc, #124]	; (800b0fc <SDMMC_GetCmdResp2+0x88>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a1f      	ldr	r2, [pc, #124]	; (800b100 <SDMMC_GetCmdResp2+0x8c>)
 800b082:	fba2 2303 	umull	r2, r3, r2, r3
 800b086:	0a5b      	lsrs	r3, r3, #9
 800b088:	f241 3288 	movw	r2, #5000	; 0x1388
 800b08c:	fb02 f303 	mul.w	r3, r2, r3
 800b090:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	1e5a      	subs	r2, r3, #1
 800b096:	60fa      	str	r2, [r7, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d102      	bne.n	800b0a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b09c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0a0:	e026      	b.n	800b0f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d0ef      	beq.n	800b092 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1ea      	bne.n	800b092 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0c0:	f003 0304 	and.w	r3, r3, #4
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d004      	beq.n	800b0d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2204      	movs	r2, #4
 800b0cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b0ce:	2304      	movs	r3, #4
 800b0d0:	e00e      	b.n	800b0f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d004      	beq.n	800b0e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	e003      	b.n	800b0f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	22c5      	movs	r2, #197	; 0xc5
 800b0ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr
 800b0fc:	20000090 	.word	0x20000090
 800b100:	10624dd3 	.word	0x10624dd3

0800b104 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b104:	b480      	push	{r7}
 800b106:	b085      	sub	sp, #20
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b10c:	4b1a      	ldr	r3, [pc, #104]	; (800b178 <SDMMC_GetCmdResp3+0x74>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a1a      	ldr	r2, [pc, #104]	; (800b17c <SDMMC_GetCmdResp3+0x78>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	0a5b      	lsrs	r3, r3, #9
 800b118:	f241 3288 	movw	r2, #5000	; 0x1388
 800b11c:	fb02 f303 	mul.w	r3, r2, r3
 800b120:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	1e5a      	subs	r2, r3, #1
 800b126:	60fa      	str	r2, [r7, #12]
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d102      	bne.n	800b132 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b12c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b130:	e01b      	b.n	800b16a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b136:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d0ef      	beq.n	800b122 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d1ea      	bne.n	800b122 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b150:	f003 0304 	and.w	r3, r3, #4
 800b154:	2b00      	cmp	r3, #0
 800b156:	d004      	beq.n	800b162 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	2204      	movs	r2, #4
 800b15c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b15e:	2304      	movs	r3, #4
 800b160:	e003      	b.n	800b16a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	22c5      	movs	r2, #197	; 0xc5
 800b166:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b168:	2300      	movs	r3, #0
}
 800b16a:	4618      	mov	r0, r3
 800b16c:	3714      	adds	r7, #20
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	20000090 	.word	0x20000090
 800b17c:	10624dd3 	.word	0x10624dd3

0800b180 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b180:	b580      	push	{r7, lr}
 800b182:	b088      	sub	sp, #32
 800b184:	af00      	add	r7, sp, #0
 800b186:	60f8      	str	r0, [r7, #12]
 800b188:	460b      	mov	r3, r1
 800b18a:	607a      	str	r2, [r7, #4]
 800b18c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b18e:	4b35      	ldr	r3, [pc, #212]	; (800b264 <SDMMC_GetCmdResp6+0xe4>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	4a35      	ldr	r2, [pc, #212]	; (800b268 <SDMMC_GetCmdResp6+0xe8>)
 800b194:	fba2 2303 	umull	r2, r3, r2, r3
 800b198:	0a5b      	lsrs	r3, r3, #9
 800b19a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b19e:	fb02 f303 	mul.w	r3, r2, r3
 800b1a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b1a4:	69fb      	ldr	r3, [r7, #28]
 800b1a6:	1e5a      	subs	r2, r3, #1
 800b1a8:	61fa      	str	r2, [r7, #28]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d102      	bne.n	800b1b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1b2:	e052      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1ba:	69bb      	ldr	r3, [r7, #24]
 800b1bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d0ef      	beq.n	800b1a4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b1c4:	69bb      	ldr	r3, [r7, #24]
 800b1c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d1ea      	bne.n	800b1a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1d2:	f003 0304 	and.w	r3, r3, #4
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d004      	beq.n	800b1e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	2204      	movs	r2, #4
 800b1de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1e0:	2304      	movs	r3, #4
 800b1e2:	e03a      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1e8:	f003 0301 	and.w	r3, r3, #1
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d004      	beq.n	800b1fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	e02f      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f7ff fc0e 	bl	800aa1c <SDMMC_GetCommandResponse>
 800b200:	4603      	mov	r3, r0
 800b202:	461a      	mov	r2, r3
 800b204:	7afb      	ldrb	r3, [r7, #11]
 800b206:	4293      	cmp	r3, r2
 800b208:	d001      	beq.n	800b20e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e025      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	22c5      	movs	r2, #197	; 0xc5
 800b212:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b214:	2100      	movs	r1, #0
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f7ff fc0d 	bl	800aa36 <SDMMC_GetResponse>
 800b21c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d106      	bne.n	800b236 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b228:	697b      	ldr	r3, [r7, #20]
 800b22a:	0c1b      	lsrs	r3, r3, #16
 800b22c:	b29a      	uxth	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b232:	2300      	movs	r3, #0
 800b234:	e011      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d002      	beq.n	800b246 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b244:	e009      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d002      	beq.n	800b256 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b254:	e001      	b.n	800b25a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b256:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3720      	adds	r7, #32
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	20000090 	.word	0x20000090
 800b268:	10624dd3 	.word	0x10624dd3

0800b26c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b26c:	b480      	push	{r7}
 800b26e:	b085      	sub	sp, #20
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b274:	4b22      	ldr	r3, [pc, #136]	; (800b300 <SDMMC_GetCmdResp7+0x94>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	4a22      	ldr	r2, [pc, #136]	; (800b304 <SDMMC_GetCmdResp7+0x98>)
 800b27a:	fba2 2303 	umull	r2, r3, r2, r3
 800b27e:	0a5b      	lsrs	r3, r3, #9
 800b280:	f241 3288 	movw	r2, #5000	; 0x1388
 800b284:	fb02 f303 	mul.w	r3, r2, r3
 800b288:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	1e5a      	subs	r2, r3, #1
 800b28e:	60fa      	str	r2, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d102      	bne.n	800b29a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b298:	e02c      	b.n	800b2f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d0ef      	beq.n	800b28a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d1ea      	bne.n	800b28a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b8:	f003 0304 	and.w	r3, r3, #4
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2204      	movs	r2, #4
 800b2c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2c6:	2304      	movs	r3, #4
 800b2c8:	e014      	b.n	800b2f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2ce:	f003 0301 	and.w	r3, r3, #1
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d004      	beq.n	800b2e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	2201      	movs	r2, #1
 800b2da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2dc:	2301      	movs	r3, #1
 800b2de:	e009      	b.n	800b2f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	2240      	movs	r2, #64	; 0x40
 800b2f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b2f2:	2300      	movs	r3, #0
  
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr
 800b300:	20000090 	.word	0x20000090
 800b304:	10624dd3 	.word	0x10624dd3

0800b308 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b310:	4b11      	ldr	r3, [pc, #68]	; (800b358 <SDMMC_GetCmdError+0x50>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a11      	ldr	r2, [pc, #68]	; (800b35c <SDMMC_GetCmdError+0x54>)
 800b316:	fba2 2303 	umull	r2, r3, r2, r3
 800b31a:	0a5b      	lsrs	r3, r3, #9
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	fb02 f303 	mul.w	r3, r2, r3
 800b324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1e5a      	subs	r2, r3, #1
 800b32a:	60fa      	str	r2, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b334:	e009      	b.n	800b34a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d0f1      	beq.n	800b326 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	22c5      	movs	r2, #197	; 0xc5
 800b346:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3714      	adds	r7, #20
 800b34e:	46bd      	mov	sp, r7
 800b350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b354:	4770      	bx	lr
 800b356:	bf00      	nop
 800b358:	20000090 	.word	0x20000090
 800b35c:	10624dd3 	.word	0x10624dd3

0800b360 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b364:	4904      	ldr	r1, [pc, #16]	; (800b378 <MX_FATFS_Init+0x18>)
 800b366:	4805      	ldr	r0, [pc, #20]	; (800b37c <MX_FATFS_Init+0x1c>)
 800b368:	f002 fcc0 	bl	800dcec <FATFS_LinkDriver>
 800b36c:	4603      	mov	r3, r0
 800b36e:	461a      	mov	r2, r3
 800b370:	4b03      	ldr	r3, [pc, #12]	; (800b380 <MX_FATFS_Init+0x20>)
 800b372:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b374:	bf00      	nop
 800b376:	bd80      	pop	{r7, pc}
 800b378:	20002820 	.word	0x20002820
 800b37c:	0801dd24 	.word	0x0801dd24
 800b380:	2000281c 	.word	0x2000281c

0800b384 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b384:	b480      	push	{r7}
 800b386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b388:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b38a:	4618      	mov	r0, r3
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b39a:	2300      	movs	r3, #0
 800b39c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b39e:	f000 f888 	bl	800b4b2 <BSP_SD_IsDetected>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	2b01      	cmp	r3, #1
 800b3a6:	d001      	beq.n	800b3ac <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b3a8:	2302      	movs	r3, #2
 800b3aa:	e005      	b.n	800b3b8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b3ac:	4804      	ldr	r0, [pc, #16]	; (800b3c0 <BSP_SD_Init+0x2c>)
 800b3ae:	f7fc ff11 	bl	80081d4 <HAL_SD_Init>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b3b6:	79fb      	ldrb	r3, [r7, #7]
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}
 800b3c0:	200023c0 	.word	0x200023c0

0800b3c4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b086      	sub	sp, #24
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	60f8      	str	r0, [r7, #12]
 800b3cc:	60b9      	str	r1, [r7, #8]
 800b3ce:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b3d0:	2300      	movs	r3, #0
 800b3d2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	68ba      	ldr	r2, [r7, #8]
 800b3d8:	68f9      	ldr	r1, [r7, #12]
 800b3da:	4806      	ldr	r0, [pc, #24]	; (800b3f4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b3dc:	f7fc ffb2 	bl	8008344 <HAL_SD_ReadBlocks_DMA>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b3e6:	2301      	movs	r3, #1
 800b3e8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b3ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3718      	adds	r7, #24
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}
 800b3f4:	200023c0 	.word	0x200023c0

0800b3f8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b3f8:	b580      	push	{r7, lr}
 800b3fa:	b086      	sub	sp, #24
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b404:	2300      	movs	r3, #0
 800b406:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	68f9      	ldr	r1, [r7, #12]
 800b40e:	4806      	ldr	r0, [pc, #24]	; (800b428 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b410:	f7fd f87a 	bl	8008508 <HAL_SD_WriteBlocks_DMA>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d001      	beq.n	800b41e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b41a:	2301      	movs	r3, #1
 800b41c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	200023c0 	.word	0x200023c0

0800b42c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b430:	4805      	ldr	r0, [pc, #20]	; (800b448 <BSP_SD_GetCardState+0x1c>)
 800b432:	f7fd fc9f 	bl	8008d74 <HAL_SD_GetCardState>
 800b436:	4603      	mov	r3, r0
 800b438:	2b04      	cmp	r3, #4
 800b43a:	bf14      	ite	ne
 800b43c:	2301      	movne	r3, #1
 800b43e:	2300      	moveq	r3, #0
 800b440:	b2db      	uxtb	r3, r3
}
 800b442:	4618      	mov	r0, r3
 800b444:	bd80      	pop	{r7, pc}
 800b446:	bf00      	nop
 800b448:	200023c0 	.word	0x200023c0

0800b44c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b454:	6879      	ldr	r1, [r7, #4]
 800b456:	4803      	ldr	r0, [pc, #12]	; (800b464 <BSP_SD_GetCardInfo+0x18>)
 800b458:	f7fd fc60 	bl	8008d1c <HAL_SD_GetCardInfo>
}
 800b45c:	bf00      	nop
 800b45e:	3708      	adds	r7, #8
 800b460:	46bd      	mov	sp, r7
 800b462:	bd80      	pop	{r7, pc}
 800b464:	200023c0 	.word	0x200023c0

0800b468 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b082      	sub	sp, #8
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b470:	f000 f818 	bl	800b4a4 <BSP_SD_AbortCallback>
}
 800b474:	bf00      	nop
 800b476:	3708      	adds	r7, #8
 800b478:	46bd      	mov	sp, r7
 800b47a:	bd80      	pop	{r7, pc}

0800b47c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b484:	f000 f98c 	bl	800b7a0 <BSP_SD_WriteCpltCallback>
}
 800b488:	bf00      	nop
 800b48a:	3708      	adds	r7, #8
 800b48c:	46bd      	mov	sp, r7
 800b48e:	bd80      	pop	{r7, pc}

0800b490 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b498:	f000 f98e 	bl	800b7b8 <BSP_SD_ReadCpltCallback>
}
 800b49c:	bf00      	nop
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}

0800b4a4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	af00      	add	r7, sp, #0

}
 800b4a8:	bf00      	nop
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b4b2:	b480      	push	{r7}
 800b4b4:	b083      	sub	sp, #12
 800b4b6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 800b4bc:	79fb      	ldrb	r3, [r7, #7]
 800b4be:	b2db      	uxtb	r3, r3
}
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	370c      	adds	r7, #12
 800b4c4:	46bd      	mov	sp, r7
 800b4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ca:	4770      	bx	lr

0800b4cc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b4d4:	f7f9 fc5e 	bl	8004d94 <HAL_GetTick>
 800b4d8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b4da:	e006      	b.n	800b4ea <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b4dc:	f7ff ffa6 	bl	800b42c <BSP_SD_GetCardState>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d101      	bne.n	800b4ea <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	e009      	b.n	800b4fe <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b4ea:	f7f9 fc53 	bl	8004d94 <HAL_GetTick>
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	1ad3      	subs	r3, r2, r3
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	429a      	cmp	r2, r3
 800b4f8:	d8f0      	bhi.n	800b4dc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b4fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
	...

0800b508 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b082      	sub	sp, #8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	4603      	mov	r3, r0
 800b510:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b512:	4b0b      	ldr	r3, [pc, #44]	; (800b540 <SD_CheckStatus+0x38>)
 800b514:	2201      	movs	r2, #1
 800b516:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b518:	f7ff ff88 	bl	800b42c <BSP_SD_GetCardState>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d107      	bne.n	800b532 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b522:	4b07      	ldr	r3, [pc, #28]	; (800b540 <SD_CheckStatus+0x38>)
 800b524:	781b      	ldrb	r3, [r3, #0]
 800b526:	b2db      	uxtb	r3, r3
 800b528:	f023 0301 	bic.w	r3, r3, #1
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	4b04      	ldr	r3, [pc, #16]	; (800b540 <SD_CheckStatus+0x38>)
 800b530:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b532:	4b03      	ldr	r3, [pc, #12]	; (800b540 <SD_CheckStatus+0x38>)
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	b2db      	uxtb	r3, r3
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3708      	adds	r7, #8
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}
 800b540:	20000099 	.word	0x20000099

0800b544 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b544:	b580      	push	{r7, lr}
 800b546:	b082      	sub	sp, #8
 800b548:	af00      	add	r7, sp, #0
 800b54a:	4603      	mov	r3, r0
 800b54c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b54e:	f7ff ff21 	bl	800b394 <BSP_SD_Init>
 800b552:	4603      	mov	r3, r0
 800b554:	2b00      	cmp	r3, #0
 800b556:	d107      	bne.n	800b568 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b558:	79fb      	ldrb	r3, [r7, #7]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7ff ffd4 	bl	800b508 <SD_CheckStatus>
 800b560:	4603      	mov	r3, r0
 800b562:	461a      	mov	r2, r3
 800b564:	4b04      	ldr	r3, [pc, #16]	; (800b578 <SD_initialize+0x34>)
 800b566:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b568:	4b03      	ldr	r3, [pc, #12]	; (800b578 <SD_initialize+0x34>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	b2db      	uxtb	r3, r3
}
 800b56e:	4618      	mov	r0, r3
 800b570:	3708      	adds	r7, #8
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}
 800b576:	bf00      	nop
 800b578:	20000099 	.word	0x20000099

0800b57c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b082      	sub	sp, #8
 800b580:	af00      	add	r7, sp, #0
 800b582:	4603      	mov	r3, r0
 800b584:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	4618      	mov	r0, r3
 800b58a:	f7ff ffbd 	bl	800b508 <SD_CheckStatus>
 800b58e:	4603      	mov	r3, r0
}
 800b590:	4618      	mov	r0, r3
 800b592:	3708      	adds	r7, #8
 800b594:	46bd      	mov	sp, r7
 800b596:	bd80      	pop	{r7, pc}

0800b598 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b598:	b580      	push	{r7, lr}
 800b59a:	b086      	sub	sp, #24
 800b59c:	af00      	add	r7, sp, #0
 800b59e:	60b9      	str	r1, [r7, #8]
 800b5a0:	607a      	str	r2, [r7, #4]
 800b5a2:	603b      	str	r3, [r7, #0]
 800b5a4:	4603      	mov	r3, r0
 800b5a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b5ac:	f247 5030 	movw	r0, #30000	; 0x7530
 800b5b0:	f7ff ff8c 	bl	800b4cc <SD_CheckStatusWithTimeout>
 800b5b4:	4603      	mov	r3, r0
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	da01      	bge.n	800b5be <SD_read+0x26>
  {
    return res;
 800b5ba:	7dfb      	ldrb	r3, [r7, #23]
 800b5bc:	e03b      	b.n	800b636 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b5be:	683a      	ldr	r2, [r7, #0]
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	68b8      	ldr	r0, [r7, #8]
 800b5c4:	f7ff fefe 	bl	800b3c4 <BSP_SD_ReadBlocks_DMA>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d132      	bne.n	800b634 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b5ce:	4b1c      	ldr	r3, [pc, #112]	; (800b640 <SD_read+0xa8>)
 800b5d0:	2200      	movs	r2, #0
 800b5d2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b5d4:	f7f9 fbde 	bl	8004d94 <HAL_GetTick>
 800b5d8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b5da:	bf00      	nop
 800b5dc:	4b18      	ldr	r3, [pc, #96]	; (800b640 <SD_read+0xa8>)
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d108      	bne.n	800b5f6 <SD_read+0x5e>
 800b5e4:	f7f9 fbd6 	bl	8004d94 <HAL_GetTick>
 800b5e8:	4602      	mov	r2, r0
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	1ad3      	subs	r3, r2, r3
 800b5ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800b5f2:	4293      	cmp	r3, r2
 800b5f4:	d9f2      	bls.n	800b5dc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b5f6:	4b12      	ldr	r3, [pc, #72]	; (800b640 <SD_read+0xa8>)
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d102      	bne.n	800b604 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	75fb      	strb	r3, [r7, #23]
 800b602:	e017      	b.n	800b634 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b604:	4b0e      	ldr	r3, [pc, #56]	; (800b640 <SD_read+0xa8>)
 800b606:	2200      	movs	r2, #0
 800b608:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b60a:	f7f9 fbc3 	bl	8004d94 <HAL_GetTick>
 800b60e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b610:	e007      	b.n	800b622 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b612:	f7ff ff0b 	bl	800b42c <BSP_SD_GetCardState>
 800b616:	4603      	mov	r3, r0
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d102      	bne.n	800b622 <SD_read+0x8a>
          {
            res = RES_OK;
 800b61c:	2300      	movs	r3, #0
 800b61e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b620:	e008      	b.n	800b634 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b622:	f7f9 fbb7 	bl	8004d94 <HAL_GetTick>
 800b626:	4602      	mov	r2, r0
 800b628:	693b      	ldr	r3, [r7, #16]
 800b62a:	1ad3      	subs	r3, r2, r3
 800b62c:	f247 522f 	movw	r2, #29999	; 0x752f
 800b630:	4293      	cmp	r3, r2
 800b632:	d9ee      	bls.n	800b612 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b634:	7dfb      	ldrb	r3, [r7, #23]
}
 800b636:	4618      	mov	r0, r3
 800b638:	3718      	adds	r7, #24
 800b63a:	46bd      	mov	sp, r7
 800b63c:	bd80      	pop	{r7, pc}
 800b63e:	bf00      	nop
 800b640:	2000488c 	.word	0x2000488c

0800b644 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60b9      	str	r1, [r7, #8]
 800b64c:	607a      	str	r2, [r7, #4]
 800b64e:	603b      	str	r3, [r7, #0]
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b658:	4b24      	ldr	r3, [pc, #144]	; (800b6ec <SD_write+0xa8>)
 800b65a:	2200      	movs	r2, #0
 800b65c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b65e:	f247 5030 	movw	r0, #30000	; 0x7530
 800b662:	f7ff ff33 	bl	800b4cc <SD_CheckStatusWithTimeout>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	da01      	bge.n	800b670 <SD_write+0x2c>
  {
    return res;
 800b66c:	7dfb      	ldrb	r3, [r7, #23]
 800b66e:	e038      	b.n	800b6e2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b670:	683a      	ldr	r2, [r7, #0]
 800b672:	6879      	ldr	r1, [r7, #4]
 800b674:	68b8      	ldr	r0, [r7, #8]
 800b676:	f7ff febf 	bl	800b3f8 <BSP_SD_WriteBlocks_DMA>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d12f      	bne.n	800b6e0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b680:	f7f9 fb88 	bl	8004d94 <HAL_GetTick>
 800b684:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b686:	bf00      	nop
 800b688:	4b18      	ldr	r3, [pc, #96]	; (800b6ec <SD_write+0xa8>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d108      	bne.n	800b6a2 <SD_write+0x5e>
 800b690:	f7f9 fb80 	bl	8004d94 <HAL_GetTick>
 800b694:	4602      	mov	r2, r0
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	1ad3      	subs	r3, r2, r3
 800b69a:	f247 522f 	movw	r2, #29999	; 0x752f
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d9f2      	bls.n	800b688 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b6a2:	4b12      	ldr	r3, [pc, #72]	; (800b6ec <SD_write+0xa8>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d102      	bne.n	800b6b0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	75fb      	strb	r3, [r7, #23]
 800b6ae:	e017      	b.n	800b6e0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b6b0:	4b0e      	ldr	r3, [pc, #56]	; (800b6ec <SD_write+0xa8>)
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b6b6:	f7f9 fb6d 	bl	8004d94 <HAL_GetTick>
 800b6ba:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b6bc:	e007      	b.n	800b6ce <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b6be:	f7ff feb5 	bl	800b42c <BSP_SD_GetCardState>
 800b6c2:	4603      	mov	r3, r0
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d102      	bne.n	800b6ce <SD_write+0x8a>
          {
            res = RES_OK;
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	75fb      	strb	r3, [r7, #23]
            break;
 800b6cc:	e008      	b.n	800b6e0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b6ce:	f7f9 fb61 	bl	8004d94 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	f247 522f 	movw	r2, #29999	; 0x752f
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d9ee      	bls.n	800b6be <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3718      	adds	r7, #24
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	20004888 	.word	0x20004888

0800b6f0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b08c      	sub	sp, #48	; 0x30
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	603a      	str	r2, [r7, #0]
 800b6fa:	71fb      	strb	r3, [r7, #7]
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b700:	2301      	movs	r3, #1
 800b702:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800b706:	4b25      	ldr	r3, [pc, #148]	; (800b79c <SD_ioctl+0xac>)
 800b708:	781b      	ldrb	r3, [r3, #0]
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	f003 0301 	and.w	r3, r3, #1
 800b710:	2b00      	cmp	r3, #0
 800b712:	d001      	beq.n	800b718 <SD_ioctl+0x28>
 800b714:	2303      	movs	r3, #3
 800b716:	e03c      	b.n	800b792 <SD_ioctl+0xa2>

  switch (cmd)
 800b718:	79bb      	ldrb	r3, [r7, #6]
 800b71a:	2b03      	cmp	r3, #3
 800b71c:	d834      	bhi.n	800b788 <SD_ioctl+0x98>
 800b71e:	a201      	add	r2, pc, #4	; (adr r2, 800b724 <SD_ioctl+0x34>)
 800b720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b724:	0800b735 	.word	0x0800b735
 800b728:	0800b73d 	.word	0x0800b73d
 800b72c:	0800b755 	.word	0x0800b755
 800b730:	0800b76f 	.word	0x0800b76f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800b734:	2300      	movs	r3, #0
 800b736:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b73a:	e028      	b.n	800b78e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800b73c:	f107 030c 	add.w	r3, r7, #12
 800b740:	4618      	mov	r0, r3
 800b742:	f7ff fe83 	bl	800b44c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800b746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b752:	e01c      	b.n	800b78e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b754:	f107 030c 	add.w	r3, r7, #12
 800b758:	4618      	mov	r0, r3
 800b75a:	f7ff fe77 	bl	800b44c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800b75e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b760:	b29a      	uxth	r2, r3
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800b766:	2300      	movs	r3, #0
 800b768:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b76c:	e00f      	b.n	800b78e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800b76e:	f107 030c 	add.w	r3, r7, #12
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fe6a 	bl	800b44c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800b778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b77a:	0a5a      	lsrs	r2, r3, #9
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800b786:	e002      	b.n	800b78e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800b788:	2304      	movs	r3, #4
 800b78a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800b78e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b792:	4618      	mov	r0, r3
 800b794:	3730      	adds	r7, #48	; 0x30
 800b796:	46bd      	mov	sp, r7
 800b798:	bd80      	pop	{r7, pc}
 800b79a:	bf00      	nop
 800b79c:	20000099 	.word	0x20000099

0800b7a0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800b7a4:	4b03      	ldr	r3, [pc, #12]	; (800b7b4 <BSP_SD_WriteCpltCallback+0x14>)
 800b7a6:	2201      	movs	r2, #1
 800b7a8:	601a      	str	r2, [r3, #0]
}
 800b7aa:	bf00      	nop
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	20004888 	.word	0x20004888

0800b7b8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800b7bc:	4b03      	ldr	r3, [pc, #12]	; (800b7cc <BSP_SD_ReadCpltCallback+0x14>)
 800b7be:	2201      	movs	r2, #1
 800b7c0:	601a      	str	r2, [r3, #0]
}
 800b7c2:	bf00      	nop
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ca:	4770      	bx	lr
 800b7cc:	2000488c 	.word	0x2000488c

0800b7d0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b084      	sub	sp, #16
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	4603      	mov	r3, r0
 800b7d8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	4a08      	ldr	r2, [pc, #32]	; (800b800 <disk_status+0x30>)
 800b7de:	009b      	lsls	r3, r3, #2
 800b7e0:	4413      	add	r3, r2
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	685b      	ldr	r3, [r3, #4]
 800b7e6:	79fa      	ldrb	r2, [r7, #7]
 800b7e8:	4905      	ldr	r1, [pc, #20]	; (800b800 <disk_status+0x30>)
 800b7ea:	440a      	add	r2, r1
 800b7ec:	7a12      	ldrb	r2, [r2, #8]
 800b7ee:	4610      	mov	r0, r2
 800b7f0:	4798      	blx	r3
 800b7f2:	4603      	mov	r3, r0
 800b7f4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800b7f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3710      	adds	r7, #16
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	200048b8 	.word	0x200048b8

0800b804 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800b80e:	2300      	movs	r3, #0
 800b810:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800b812:	79fb      	ldrb	r3, [r7, #7]
 800b814:	4a0d      	ldr	r2, [pc, #52]	; (800b84c <disk_initialize+0x48>)
 800b816:	5cd3      	ldrb	r3, [r2, r3]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d111      	bne.n	800b840 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800b81c:	79fb      	ldrb	r3, [r7, #7]
 800b81e:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <disk_initialize+0x48>)
 800b820:	2101      	movs	r1, #1
 800b822:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800b824:	79fb      	ldrb	r3, [r7, #7]
 800b826:	4a09      	ldr	r2, [pc, #36]	; (800b84c <disk_initialize+0x48>)
 800b828:	009b      	lsls	r3, r3, #2
 800b82a:	4413      	add	r3, r2
 800b82c:	685b      	ldr	r3, [r3, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	79fa      	ldrb	r2, [r7, #7]
 800b832:	4906      	ldr	r1, [pc, #24]	; (800b84c <disk_initialize+0x48>)
 800b834:	440a      	add	r2, r1
 800b836:	7a12      	ldrb	r2, [r2, #8]
 800b838:	4610      	mov	r0, r2
 800b83a:	4798      	blx	r3
 800b83c:	4603      	mov	r3, r0
 800b83e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800b840:	7bfb      	ldrb	r3, [r7, #15]
}
 800b842:	4618      	mov	r0, r3
 800b844:	3710      	adds	r7, #16
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop
 800b84c:	200048b8 	.word	0x200048b8

0800b850 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800b850:	b590      	push	{r4, r7, lr}
 800b852:	b087      	sub	sp, #28
 800b854:	af00      	add	r7, sp, #0
 800b856:	60b9      	str	r1, [r7, #8]
 800b858:	607a      	str	r2, [r7, #4]
 800b85a:	603b      	str	r3, [r7, #0]
 800b85c:	4603      	mov	r3, r0
 800b85e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800b860:	7bfb      	ldrb	r3, [r7, #15]
 800b862:	4a0a      	ldr	r2, [pc, #40]	; (800b88c <disk_read+0x3c>)
 800b864:	009b      	lsls	r3, r3, #2
 800b866:	4413      	add	r3, r2
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	689c      	ldr	r4, [r3, #8]
 800b86c:	7bfb      	ldrb	r3, [r7, #15]
 800b86e:	4a07      	ldr	r2, [pc, #28]	; (800b88c <disk_read+0x3c>)
 800b870:	4413      	add	r3, r2
 800b872:	7a18      	ldrb	r0, [r3, #8]
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	687a      	ldr	r2, [r7, #4]
 800b878:	68b9      	ldr	r1, [r7, #8]
 800b87a:	47a0      	blx	r4
 800b87c:	4603      	mov	r3, r0
 800b87e:	75fb      	strb	r3, [r7, #23]
  return res;
 800b880:	7dfb      	ldrb	r3, [r7, #23]
}
 800b882:	4618      	mov	r0, r3
 800b884:	371c      	adds	r7, #28
 800b886:	46bd      	mov	sp, r7
 800b888:	bd90      	pop	{r4, r7, pc}
 800b88a:	bf00      	nop
 800b88c:	200048b8 	.word	0x200048b8

0800b890 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800b890:	b590      	push	{r4, r7, lr}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60b9      	str	r1, [r7, #8]
 800b898:	607a      	str	r2, [r7, #4]
 800b89a:	603b      	str	r3, [r7, #0]
 800b89c:	4603      	mov	r3, r0
 800b89e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800b8a0:	7bfb      	ldrb	r3, [r7, #15]
 800b8a2:	4a0a      	ldr	r2, [pc, #40]	; (800b8cc <disk_write+0x3c>)
 800b8a4:	009b      	lsls	r3, r3, #2
 800b8a6:	4413      	add	r3, r2
 800b8a8:	685b      	ldr	r3, [r3, #4]
 800b8aa:	68dc      	ldr	r4, [r3, #12]
 800b8ac:	7bfb      	ldrb	r3, [r7, #15]
 800b8ae:	4a07      	ldr	r2, [pc, #28]	; (800b8cc <disk_write+0x3c>)
 800b8b0:	4413      	add	r3, r2
 800b8b2:	7a18      	ldrb	r0, [r3, #8]
 800b8b4:	683b      	ldr	r3, [r7, #0]
 800b8b6:	687a      	ldr	r2, [r7, #4]
 800b8b8:	68b9      	ldr	r1, [r7, #8]
 800b8ba:	47a0      	blx	r4
 800b8bc:	4603      	mov	r3, r0
 800b8be:	75fb      	strb	r3, [r7, #23]
  return res;
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	371c      	adds	r7, #28
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd90      	pop	{r4, r7, pc}
 800b8ca:	bf00      	nop
 800b8cc:	200048b8 	.word	0x200048b8

0800b8d0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b084      	sub	sp, #16
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	4603      	mov	r3, r0
 800b8d8:	603a      	str	r2, [r7, #0]
 800b8da:	71fb      	strb	r3, [r7, #7]
 800b8dc:	460b      	mov	r3, r1
 800b8de:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	4a09      	ldr	r2, [pc, #36]	; (800b908 <disk_ioctl+0x38>)
 800b8e4:	009b      	lsls	r3, r3, #2
 800b8e6:	4413      	add	r3, r2
 800b8e8:	685b      	ldr	r3, [r3, #4]
 800b8ea:	691b      	ldr	r3, [r3, #16]
 800b8ec:	79fa      	ldrb	r2, [r7, #7]
 800b8ee:	4906      	ldr	r1, [pc, #24]	; (800b908 <disk_ioctl+0x38>)
 800b8f0:	440a      	add	r2, r1
 800b8f2:	7a10      	ldrb	r0, [r2, #8]
 800b8f4:	79b9      	ldrb	r1, [r7, #6]
 800b8f6:	683a      	ldr	r2, [r7, #0]
 800b8f8:	4798      	blx	r3
 800b8fa:	4603      	mov	r3, r0
 800b8fc:	73fb      	strb	r3, [r7, #15]
  return res;
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}
 800b908:	200048b8 	.word	0x200048b8

0800b90c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800b90c:	b480      	push	{r7}
 800b90e:	b085      	sub	sp, #20
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	3301      	adds	r3, #1
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800b91c:	89fb      	ldrh	r3, [r7, #14]
 800b91e:	021b      	lsls	r3, r3, #8
 800b920:	b21a      	sxth	r2, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	781b      	ldrb	r3, [r3, #0]
 800b926:	b21b      	sxth	r3, r3
 800b928:	4313      	orrs	r3, r2
 800b92a:	b21b      	sxth	r3, r3
 800b92c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800b92e:	89fb      	ldrh	r3, [r7, #14]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3714      	adds	r7, #20
 800b934:	46bd      	mov	sp, r7
 800b936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93a:	4770      	bx	lr

0800b93c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800b93c:	b480      	push	{r7}
 800b93e:	b085      	sub	sp, #20
 800b940:	af00      	add	r7, sp, #0
 800b942:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	3303      	adds	r3, #3
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	021b      	lsls	r3, r3, #8
 800b950:	687a      	ldr	r2, [r7, #4]
 800b952:	3202      	adds	r2, #2
 800b954:	7812      	ldrb	r2, [r2, #0]
 800b956:	4313      	orrs	r3, r2
 800b958:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	021b      	lsls	r3, r3, #8
 800b95e:	687a      	ldr	r2, [r7, #4]
 800b960:	3201      	adds	r2, #1
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	4313      	orrs	r3, r2
 800b966:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	021b      	lsls	r3, r3, #8
 800b96c:	687a      	ldr	r2, [r7, #4]
 800b96e:	7812      	ldrb	r2, [r2, #0]
 800b970:	4313      	orrs	r3, r2
 800b972:	60fb      	str	r3, [r7, #12]
	return rv;
 800b974:	68fb      	ldr	r3, [r7, #12]
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b980:	4770      	bx	lr

0800b982 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800b982:	b480      	push	{r7}
 800b984:	b083      	sub	sp, #12
 800b986:	af00      	add	r7, sp, #0
 800b988:	6078      	str	r0, [r7, #4]
 800b98a:	460b      	mov	r3, r1
 800b98c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	607a      	str	r2, [r7, #4]
 800b994:	887a      	ldrh	r2, [r7, #2]
 800b996:	b2d2      	uxtb	r2, r2
 800b998:	701a      	strb	r2, [r3, #0]
 800b99a:	887b      	ldrh	r3, [r7, #2]
 800b99c:	0a1b      	lsrs	r3, r3, #8
 800b99e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	1c5a      	adds	r2, r3, #1
 800b9a4:	607a      	str	r2, [r7, #4]
 800b9a6:	887a      	ldrh	r2, [r7, #2]
 800b9a8:	b2d2      	uxtb	r2, r2
 800b9aa:	701a      	strb	r2, [r3, #0]
}
 800b9ac:	bf00      	nop
 800b9ae:	370c      	adds	r7, #12
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	1c5a      	adds	r2, r3, #1
 800b9c6:	607a      	str	r2, [r7, #4]
 800b9c8:	683a      	ldr	r2, [r7, #0]
 800b9ca:	b2d2      	uxtb	r2, r2
 800b9cc:	701a      	strb	r2, [r3, #0]
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	0a1b      	lsrs	r3, r3, #8
 800b9d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	1c5a      	adds	r2, r3, #1
 800b9d8:	607a      	str	r2, [r7, #4]
 800b9da:	683a      	ldr	r2, [r7, #0]
 800b9dc:	b2d2      	uxtb	r2, r2
 800b9de:	701a      	strb	r2, [r3, #0]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	0a1b      	lsrs	r3, r3, #8
 800b9e4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	1c5a      	adds	r2, r3, #1
 800b9ea:	607a      	str	r2, [r7, #4]
 800b9ec:	683a      	ldr	r2, [r7, #0]
 800b9ee:	b2d2      	uxtb	r2, r2
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	0a1b      	lsrs	r3, r3, #8
 800b9f6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	1c5a      	adds	r2, r3, #1
 800b9fc:	607a      	str	r2, [r7, #4]
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	b2d2      	uxtb	r2, r2
 800ba02:	701a      	strb	r2, [r3, #0]
}
 800ba04:	bf00      	nop
 800ba06:	370c      	adds	r7, #12
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba0e:	4770      	bx	lr

0800ba10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d00d      	beq.n	800ba46 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ba2a:	693a      	ldr	r2, [r7, #16]
 800ba2c:	1c53      	adds	r3, r2, #1
 800ba2e:	613b      	str	r3, [r7, #16]
 800ba30:	697b      	ldr	r3, [r7, #20]
 800ba32:	1c59      	adds	r1, r3, #1
 800ba34:	6179      	str	r1, [r7, #20]
 800ba36:	7812      	ldrb	r2, [r2, #0]
 800ba38:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	3b01      	subs	r3, #1
 800ba3e:	607b      	str	r3, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d1f1      	bne.n	800ba2a <mem_cpy+0x1a>
	}
}
 800ba46:	bf00      	nop
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ba52:	b480      	push	{r7}
 800ba54:	b087      	sub	sp, #28
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	60f8      	str	r0, [r7, #12]
 800ba5a:	60b9      	str	r1, [r7, #8]
 800ba5c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	1c5a      	adds	r2, r3, #1
 800ba66:	617a      	str	r2, [r7, #20]
 800ba68:	68ba      	ldr	r2, [r7, #8]
 800ba6a:	b2d2      	uxtb	r2, r2
 800ba6c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	3b01      	subs	r3, #1
 800ba72:	607b      	str	r3, [r7, #4]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d1f3      	bne.n	800ba62 <mem_set+0x10>
}
 800ba7a:	bf00      	nop
 800ba7c:	bf00      	nop
 800ba7e:	371c      	adds	r7, #28
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ba88:	b480      	push	{r7}
 800ba8a:	b089      	sub	sp, #36	; 0x24
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	60f8      	str	r0, [r7, #12]
 800ba90:	60b9      	str	r1, [r7, #8]
 800ba92:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800baa0:	69fb      	ldr	r3, [r7, #28]
 800baa2:	1c5a      	adds	r2, r3, #1
 800baa4:	61fa      	str	r2, [r7, #28]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	4619      	mov	r1, r3
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	1c5a      	adds	r2, r3, #1
 800baae:	61ba      	str	r2, [r7, #24]
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	1acb      	subs	r3, r1, r3
 800bab4:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	3b01      	subs	r3, #1
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d002      	beq.n	800bac8 <mem_cmp+0x40>
 800bac2:	697b      	ldr	r3, [r7, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d0eb      	beq.n	800baa0 <mem_cmp+0x18>

	return r;
 800bac8:	697b      	ldr	r3, [r7, #20]
}
 800baca:	4618      	mov	r0, r3
 800bacc:	3724      	adds	r7, #36	; 0x24
 800bace:	46bd      	mov	sp, r7
 800bad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad4:	4770      	bx	lr

0800bad6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
 800bade:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bae0:	e002      	b.n	800bae8 <chk_chr+0x12>
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	3301      	adds	r3, #1
 800bae6:	607b      	str	r3, [r7, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d005      	beq.n	800bafc <chk_chr+0x26>
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	461a      	mov	r2, r3
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d1f2      	bne.n	800bae2 <chk_chr+0xc>
	return *str;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	781b      	ldrb	r3, [r3, #0]
}
 800bb00:	4618      	mov	r0, r3
 800bb02:	370c      	adds	r7, #12
 800bb04:	46bd      	mov	sp, r7
 800bb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0a:	4770      	bx	lr

0800bb0c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb16:	2300      	movs	r3, #0
 800bb18:	60bb      	str	r3, [r7, #8]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	60fb      	str	r3, [r7, #12]
 800bb1e:	e029      	b.n	800bb74 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800bb20:	4a27      	ldr	r2, [pc, #156]	; (800bbc0 <chk_lock+0xb4>)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	011b      	lsls	r3, r3, #4
 800bb26:	4413      	add	r3, r2
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d01d      	beq.n	800bb6a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb2e:	4a24      	ldr	r2, [pc, #144]	; (800bbc0 <chk_lock+0xb4>)
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	011b      	lsls	r3, r3, #4
 800bb34:	4413      	add	r3, r2
 800bb36:	681a      	ldr	r2, [r3, #0]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	429a      	cmp	r2, r3
 800bb3e:	d116      	bne.n	800bb6e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800bb40:	4a1f      	ldr	r2, [pc, #124]	; (800bbc0 <chk_lock+0xb4>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	011b      	lsls	r3, r3, #4
 800bb46:	4413      	add	r3, r2
 800bb48:	3304      	adds	r3, #4
 800bb4a:	681a      	ldr	r2, [r3, #0]
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800bb50:	429a      	cmp	r2, r3
 800bb52:	d10c      	bne.n	800bb6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb54:	4a1a      	ldr	r2, [pc, #104]	; (800bbc0 <chk_lock+0xb4>)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	011b      	lsls	r3, r3, #4
 800bb5a:	4413      	add	r3, r2
 800bb5c:	3308      	adds	r3, #8
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d102      	bne.n	800bb6e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800bb68:	e007      	b.n	800bb7a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d9d2      	bls.n	800bb20 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d109      	bne.n	800bb94 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d102      	bne.n	800bb8c <chk_lock+0x80>
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	d101      	bne.n	800bb90 <chk_lock+0x84>
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	e010      	b.n	800bbb2 <chk_lock+0xa6>
 800bb90:	2312      	movs	r3, #18
 800bb92:	e00e      	b.n	800bbb2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d108      	bne.n	800bbac <chk_lock+0xa0>
 800bb9a:	4a09      	ldr	r2, [pc, #36]	; (800bbc0 <chk_lock+0xb4>)
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	011b      	lsls	r3, r3, #4
 800bba0:	4413      	add	r3, r2
 800bba2:	330c      	adds	r3, #12
 800bba4:	881b      	ldrh	r3, [r3, #0]
 800bba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbaa:	d101      	bne.n	800bbb0 <chk_lock+0xa4>
 800bbac:	2310      	movs	r3, #16
 800bbae:	e000      	b.n	800bbb2 <chk_lock+0xa6>
 800bbb0:	2300      	movs	r3, #0
}
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	3714      	adds	r7, #20
 800bbb6:	46bd      	mov	sp, r7
 800bbb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbc:	4770      	bx	lr
 800bbbe:	bf00      	nop
 800bbc0:	20004898 	.word	0x20004898

0800bbc4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bbc4:	b480      	push	{r7}
 800bbc6:	b083      	sub	sp, #12
 800bbc8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bbca:	2300      	movs	r3, #0
 800bbcc:	607b      	str	r3, [r7, #4]
 800bbce:	e002      	b.n	800bbd6 <enq_lock+0x12>
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	607b      	str	r3, [r7, #4]
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d806      	bhi.n	800bbea <enq_lock+0x26>
 800bbdc:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <enq_lock+0x40>)
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	011b      	lsls	r3, r3, #4
 800bbe2:	4413      	add	r3, r2
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d1f2      	bne.n	800bbd0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	bf14      	ite	ne
 800bbf0:	2301      	movne	r3, #1
 800bbf2:	2300      	moveq	r3, #0
 800bbf4:	b2db      	uxtb	r3, r3
}
 800bbf6:	4618      	mov	r0, r3
 800bbf8:	370c      	adds	r7, #12
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc00:	4770      	bx	lr
 800bc02:	bf00      	nop
 800bc04:	20004898 	.word	0x20004898

0800bc08 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
 800bc10:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc12:	2300      	movs	r3, #0
 800bc14:	60fb      	str	r3, [r7, #12]
 800bc16:	e01f      	b.n	800bc58 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bc18:	4a41      	ldr	r2, [pc, #260]	; (800bd20 <inc_lock+0x118>)
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	011b      	lsls	r3, r3, #4
 800bc1e:	4413      	add	r3, r2
 800bc20:	681a      	ldr	r2, [r3, #0]
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d113      	bne.n	800bc52 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bc2a:	4a3d      	ldr	r2, [pc, #244]	; (800bd20 <inc_lock+0x118>)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	4413      	add	r3, r2
 800bc32:	3304      	adds	r3, #4
 800bc34:	681a      	ldr	r2, [r3, #0]
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d109      	bne.n	800bc52 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bc3e:	4a38      	ldr	r2, [pc, #224]	; (800bd20 <inc_lock+0x118>)
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	011b      	lsls	r3, r3, #4
 800bc44:	4413      	add	r3, r2
 800bc46:	3308      	adds	r3, #8
 800bc48:	681a      	ldr	r2, [r3, #0]
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d006      	beq.n	800bc60 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	3301      	adds	r3, #1
 800bc56:	60fb      	str	r3, [r7, #12]
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b01      	cmp	r3, #1
 800bc5c:	d9dc      	bls.n	800bc18 <inc_lock+0x10>
 800bc5e:	e000      	b.n	800bc62 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bc60:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d132      	bne.n	800bcce <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bc68:	2300      	movs	r3, #0
 800bc6a:	60fb      	str	r3, [r7, #12]
 800bc6c:	e002      	b.n	800bc74 <inc_lock+0x6c>
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	3301      	adds	r3, #1
 800bc72:	60fb      	str	r3, [r7, #12]
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	2b01      	cmp	r3, #1
 800bc78:	d806      	bhi.n	800bc88 <inc_lock+0x80>
 800bc7a:	4a29      	ldr	r2, [pc, #164]	; (800bd20 <inc_lock+0x118>)
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	011b      	lsls	r3, r3, #4
 800bc80:	4413      	add	r3, r2
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d1f2      	bne.n	800bc6e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2b02      	cmp	r3, #2
 800bc8c:	d101      	bne.n	800bc92 <inc_lock+0x8a>
 800bc8e:	2300      	movs	r3, #0
 800bc90:	e040      	b.n	800bd14 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	4922      	ldr	r1, [pc, #136]	; (800bd20 <inc_lock+0x118>)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	011b      	lsls	r3, r3, #4
 800bc9c:	440b      	add	r3, r1
 800bc9e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	689a      	ldr	r2, [r3, #8]
 800bca4:	491e      	ldr	r1, [pc, #120]	; (800bd20 <inc_lock+0x118>)
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	011b      	lsls	r3, r3, #4
 800bcaa:	440b      	add	r3, r1
 800bcac:	3304      	adds	r3, #4
 800bcae:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	695a      	ldr	r2, [r3, #20]
 800bcb4:	491a      	ldr	r1, [pc, #104]	; (800bd20 <inc_lock+0x118>)
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	011b      	lsls	r3, r3, #4
 800bcba:	440b      	add	r3, r1
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bcc0:	4a17      	ldr	r2, [pc, #92]	; (800bd20 <inc_lock+0x118>)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	011b      	lsls	r3, r3, #4
 800bcc6:	4413      	add	r3, r2
 800bcc8:	330c      	adds	r3, #12
 800bcca:	2200      	movs	r2, #0
 800bccc:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d009      	beq.n	800bce8 <inc_lock+0xe0>
 800bcd4:	4a12      	ldr	r2, [pc, #72]	; (800bd20 <inc_lock+0x118>)
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	011b      	lsls	r3, r3, #4
 800bcda:	4413      	add	r3, r2
 800bcdc:	330c      	adds	r3, #12
 800bcde:	881b      	ldrh	r3, [r3, #0]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d001      	beq.n	800bce8 <inc_lock+0xe0>
 800bce4:	2300      	movs	r3, #0
 800bce6:	e015      	b.n	800bd14 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d108      	bne.n	800bd00 <inc_lock+0xf8>
 800bcee:	4a0c      	ldr	r2, [pc, #48]	; (800bd20 <inc_lock+0x118>)
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	011b      	lsls	r3, r3, #4
 800bcf4:	4413      	add	r3, r2
 800bcf6:	330c      	adds	r3, #12
 800bcf8:	881b      	ldrh	r3, [r3, #0]
 800bcfa:	3301      	adds	r3, #1
 800bcfc:	b29a      	uxth	r2, r3
 800bcfe:	e001      	b.n	800bd04 <inc_lock+0xfc>
 800bd00:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd04:	4906      	ldr	r1, [pc, #24]	; (800bd20 <inc_lock+0x118>)
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	011b      	lsls	r3, r3, #4
 800bd0a:	440b      	add	r3, r1
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	3301      	adds	r3, #1
}
 800bd14:	4618      	mov	r0, r3
 800bd16:	3714      	adds	r7, #20
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20004898 	.word	0x20004898

0800bd24 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b085      	sub	sp, #20
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	3b01      	subs	r3, #1
 800bd30:	607b      	str	r3, [r7, #4]
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d825      	bhi.n	800bd84 <dec_lock+0x60>
		n = Files[i].ctr;
 800bd38:	4a17      	ldr	r2, [pc, #92]	; (800bd98 <dec_lock+0x74>)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	011b      	lsls	r3, r3, #4
 800bd3e:	4413      	add	r3, r2
 800bd40:	330c      	adds	r3, #12
 800bd42:	881b      	ldrh	r3, [r3, #0]
 800bd44:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800bd46:	89fb      	ldrh	r3, [r7, #14]
 800bd48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bd4c:	d101      	bne.n	800bd52 <dec_lock+0x2e>
 800bd4e:	2300      	movs	r3, #0
 800bd50:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800bd52:	89fb      	ldrh	r3, [r7, #14]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d002      	beq.n	800bd5e <dec_lock+0x3a>
 800bd58:	89fb      	ldrh	r3, [r7, #14]
 800bd5a:	3b01      	subs	r3, #1
 800bd5c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800bd5e:	4a0e      	ldr	r2, [pc, #56]	; (800bd98 <dec_lock+0x74>)
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	011b      	lsls	r3, r3, #4
 800bd64:	4413      	add	r3, r2
 800bd66:	330c      	adds	r3, #12
 800bd68:	89fa      	ldrh	r2, [r7, #14]
 800bd6a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800bd6c:	89fb      	ldrh	r3, [r7, #14]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d105      	bne.n	800bd7e <dec_lock+0x5a>
 800bd72:	4a09      	ldr	r2, [pc, #36]	; (800bd98 <dec_lock+0x74>)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	011b      	lsls	r3, r3, #4
 800bd78:	4413      	add	r3, r2
 800bd7a:	2200      	movs	r2, #0
 800bd7c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800bd7e:	2300      	movs	r3, #0
 800bd80:	737b      	strb	r3, [r7, #13]
 800bd82:	e001      	b.n	800bd88 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800bd84:	2302      	movs	r3, #2
 800bd86:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800bd88:	7b7b      	ldrb	r3, [r7, #13]
}
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	3714      	adds	r7, #20
 800bd8e:	46bd      	mov	sp, r7
 800bd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd94:	4770      	bx	lr
 800bd96:	bf00      	nop
 800bd98:	20004898 	.word	0x20004898

0800bd9c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800bda4:	2300      	movs	r3, #0
 800bda6:	60fb      	str	r3, [r7, #12]
 800bda8:	e010      	b.n	800bdcc <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800bdaa:	4a0d      	ldr	r2, [pc, #52]	; (800bde0 <clear_lock+0x44>)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	011b      	lsls	r3, r3, #4
 800bdb0:	4413      	add	r3, r2
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	687a      	ldr	r2, [r7, #4]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d105      	bne.n	800bdc6 <clear_lock+0x2a>
 800bdba:	4a09      	ldr	r2, [pc, #36]	; (800bde0 <clear_lock+0x44>)
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	011b      	lsls	r3, r3, #4
 800bdc0:	4413      	add	r3, r2
 800bdc2:	2200      	movs	r2, #0
 800bdc4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	60fb      	str	r3, [r7, #12]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	2b01      	cmp	r3, #1
 800bdd0:	d9eb      	bls.n	800bdaa <clear_lock+0xe>
	}
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	20004898 	.word	0x20004898

0800bde4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800bde4:	b580      	push	{r7, lr}
 800bde6:	b086      	sub	sp, #24
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800bdec:	2300      	movs	r3, #0
 800bdee:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	78db      	ldrb	r3, [r3, #3]
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d034      	beq.n	800be62 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	7858      	ldrb	r0, [r3, #1]
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be08:	2301      	movs	r3, #1
 800be0a:	697a      	ldr	r2, [r7, #20]
 800be0c:	f7ff fd40 	bl	800b890 <disk_write>
 800be10:	4603      	mov	r3, r0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d002      	beq.n	800be1c <sync_window+0x38>
			res = FR_DISK_ERR;
 800be16:	2301      	movs	r3, #1
 800be18:	73fb      	strb	r3, [r7, #15]
 800be1a:	e022      	b.n	800be62 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2200      	movs	r2, #0
 800be20:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be26:	697a      	ldr	r2, [r7, #20]
 800be28:	1ad2      	subs	r2, r2, r3
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	69db      	ldr	r3, [r3, #28]
 800be2e:	429a      	cmp	r2, r3
 800be30:	d217      	bcs.n	800be62 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	789b      	ldrb	r3, [r3, #2]
 800be36:	613b      	str	r3, [r7, #16]
 800be38:	e010      	b.n	800be5c <sync_window+0x78>
					wsect += fs->fsize;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	69db      	ldr	r3, [r3, #28]
 800be3e:	697a      	ldr	r2, [r7, #20]
 800be40:	4413      	add	r3, r2
 800be42:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	7858      	ldrb	r0, [r3, #1]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be4e:	2301      	movs	r3, #1
 800be50:	697a      	ldr	r2, [r7, #20]
 800be52:	f7ff fd1d 	bl	800b890 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800be56:	693b      	ldr	r3, [r7, #16]
 800be58:	3b01      	subs	r3, #1
 800be5a:	613b      	str	r3, [r7, #16]
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	2b01      	cmp	r3, #1
 800be60:	d8eb      	bhi.n	800be3a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800be62:	7bfb      	ldrb	r3, [r7, #15]
}
 800be64:	4618      	mov	r0, r3
 800be66:	3718      	adds	r7, #24
 800be68:	46bd      	mov	sp, r7
 800be6a:	bd80      	pop	{r7, pc}

0800be6c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
 800be74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800be76:	2300      	movs	r3, #0
 800be78:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d01b      	beq.n	800bebc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800be84:	6878      	ldr	r0, [r7, #4]
 800be86:	f7ff ffad 	bl	800bde4 <sync_window>
 800be8a:	4603      	mov	r3, r0
 800be8c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800be8e:	7bfb      	ldrb	r3, [r7, #15]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d113      	bne.n	800bebc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	7858      	ldrb	r0, [r3, #1]
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800be9e:	2301      	movs	r3, #1
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	f7ff fcd5 	bl	800b850 <disk_read>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d004      	beq.n	800beb6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800beb2:	2301      	movs	r3, #1
 800beb4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	683a      	ldr	r2, [r7, #0]
 800beba:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bebe:	4618      	mov	r0, r3
 800bec0:	3710      	adds	r7, #16
 800bec2:	46bd      	mov	sp, r7
 800bec4:	bd80      	pop	{r7, pc}
	...

0800bec8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800bec8:	b580      	push	{r7, lr}
 800beca:	b084      	sub	sp, #16
 800becc:	af00      	add	r7, sp, #0
 800bece:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f7ff ff87 	bl	800bde4 <sync_window>
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800beda:	7bfb      	ldrb	r3, [r7, #15]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d159      	bne.n	800bf94 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	781b      	ldrb	r3, [r3, #0]
 800bee4:	2b03      	cmp	r3, #3
 800bee6:	d149      	bne.n	800bf7c <sync_fs+0xb4>
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	791b      	ldrb	r3, [r3, #4]
 800beec:	2b01      	cmp	r3, #1
 800beee:	d145      	bne.n	800bf7c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	899b      	ldrh	r3, [r3, #12]
 800befa:	461a      	mov	r2, r3
 800befc:	2100      	movs	r1, #0
 800befe:	f7ff fda8 	bl	800ba52 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	3334      	adds	r3, #52	; 0x34
 800bf06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bf0a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7ff fd37 	bl	800b982 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	3334      	adds	r3, #52	; 0x34
 800bf18:	4921      	ldr	r1, [pc, #132]	; (800bfa0 <sync_fs+0xd8>)
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff fd4c 	bl	800b9b8 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	3334      	adds	r3, #52	; 0x34
 800bf24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800bf28:	491e      	ldr	r1, [pc, #120]	; (800bfa4 <sync_fs+0xdc>)
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7ff fd44 	bl	800b9b8 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	3334      	adds	r3, #52	; 0x34
 800bf34:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	695b      	ldr	r3, [r3, #20]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	4610      	mov	r0, r2
 800bf40:	f7ff fd3a 	bl	800b9b8 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	3334      	adds	r3, #52	; 0x34
 800bf48:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	4619      	mov	r1, r3
 800bf52:	4610      	mov	r0, r2
 800bf54:	f7ff fd30 	bl	800b9b8 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	6a1b      	ldr	r3, [r3, #32]
 800bf5c:	1c5a      	adds	r2, r3, #1
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7858      	ldrb	r0, [r3, #1]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf70:	2301      	movs	r3, #1
 800bf72:	f7ff fc8d 	bl	800b890 <disk_write>
			fs->fsi_flag = 0;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	2200      	movs	r2, #0
 800bf7a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	785b      	ldrb	r3, [r3, #1]
 800bf80:	2200      	movs	r2, #0
 800bf82:	2100      	movs	r1, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f7ff fca3 	bl	800b8d0 <disk_ioctl>
 800bf8a:	4603      	mov	r3, r0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d001      	beq.n	800bf94 <sync_fs+0xcc>
 800bf90:	2301      	movs	r3, #1
 800bf92:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf96:	4618      	mov	r0, r3
 800bf98:	3710      	adds	r7, #16
 800bf9a:	46bd      	mov	sp, r7
 800bf9c:	bd80      	pop	{r7, pc}
 800bf9e:	bf00      	nop
 800bfa0:	41615252 	.word	0x41615252
 800bfa4:	61417272 	.word	0x61417272

0800bfa8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800bfa8:	b480      	push	{r7}
 800bfaa:	b083      	sub	sp, #12
 800bfac:	af00      	add	r7, sp, #0
 800bfae:	6078      	str	r0, [r7, #4]
 800bfb0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	3b02      	subs	r3, #2
 800bfb6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	699b      	ldr	r3, [r3, #24]
 800bfbc:	3b02      	subs	r3, #2
 800bfbe:	683a      	ldr	r2, [r7, #0]
 800bfc0:	429a      	cmp	r2, r3
 800bfc2:	d301      	bcc.n	800bfc8 <clust2sect+0x20>
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e008      	b.n	800bfda <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	895b      	ldrh	r3, [r3, #10]
 800bfcc:	461a      	mov	r2, r3
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	fb03 f202 	mul.w	r2, r3, r2
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfd8:	4413      	add	r3, r2
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	370c      	adds	r7, #12
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe4:	4770      	bx	lr

0800bfe6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800bfe6:	b580      	push	{r7, lr}
 800bfe8:	b086      	sub	sp, #24
 800bfea:	af00      	add	r7, sp, #0
 800bfec:	6078      	str	r0, [r7, #4]
 800bfee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	2b01      	cmp	r3, #1
 800bffa:	d904      	bls.n	800c006 <get_fat+0x20>
 800bffc:	693b      	ldr	r3, [r7, #16]
 800bffe:	699b      	ldr	r3, [r3, #24]
 800c000:	683a      	ldr	r2, [r7, #0]
 800c002:	429a      	cmp	r2, r3
 800c004:	d302      	bcc.n	800c00c <get_fat+0x26>
		val = 1;	/* Internal error */
 800c006:	2301      	movs	r3, #1
 800c008:	617b      	str	r3, [r7, #20]
 800c00a:	e0bb      	b.n	800c184 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c00c:	f04f 33ff 	mov.w	r3, #4294967295
 800c010:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c012:	693b      	ldr	r3, [r7, #16]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b03      	cmp	r3, #3
 800c018:	f000 8083 	beq.w	800c122 <get_fat+0x13c>
 800c01c:	2b03      	cmp	r3, #3
 800c01e:	f300 80a7 	bgt.w	800c170 <get_fat+0x18a>
 800c022:	2b01      	cmp	r3, #1
 800c024:	d002      	beq.n	800c02c <get_fat+0x46>
 800c026:	2b02      	cmp	r3, #2
 800c028:	d056      	beq.n	800c0d8 <get_fat+0xf2>
 800c02a:	e0a1      	b.n	800c170 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c02c:	683b      	ldr	r3, [r7, #0]
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	085b      	lsrs	r3, r3, #1
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	4413      	add	r3, r2
 800c038:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c03a:	693b      	ldr	r3, [r7, #16]
 800c03c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c03e:	693b      	ldr	r3, [r7, #16]
 800c040:	899b      	ldrh	r3, [r3, #12]
 800c042:	4619      	mov	r1, r3
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	fbb3 f3f1 	udiv	r3, r3, r1
 800c04a:	4413      	add	r3, r2
 800c04c:	4619      	mov	r1, r3
 800c04e:	6938      	ldr	r0, [r7, #16]
 800c050:	f7ff ff0c 	bl	800be6c <move_window>
 800c054:	4603      	mov	r3, r0
 800c056:	2b00      	cmp	r3, #0
 800c058:	f040 808d 	bne.w	800c176 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c05c:	68fb      	ldr	r3, [r7, #12]
 800c05e:	1c5a      	adds	r2, r3, #1
 800c060:	60fa      	str	r2, [r7, #12]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	8992      	ldrh	r2, [r2, #12]
 800c066:	fbb3 f1f2 	udiv	r1, r3, r2
 800c06a:	fb01 f202 	mul.w	r2, r1, r2
 800c06e:	1a9b      	subs	r3, r3, r2
 800c070:	693a      	ldr	r2, [r7, #16]
 800c072:	4413      	add	r3, r2
 800c074:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c078:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c07a:	693b      	ldr	r3, [r7, #16]
 800c07c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c07e:	693b      	ldr	r3, [r7, #16]
 800c080:	899b      	ldrh	r3, [r3, #12]
 800c082:	4619      	mov	r1, r3
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	fbb3 f3f1 	udiv	r3, r3, r1
 800c08a:	4413      	add	r3, r2
 800c08c:	4619      	mov	r1, r3
 800c08e:	6938      	ldr	r0, [r7, #16]
 800c090:	f7ff feec 	bl	800be6c <move_window>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d16f      	bne.n	800c17a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	899b      	ldrh	r3, [r3, #12]
 800c09e:	461a      	mov	r2, r3
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	fbb3 f1f2 	udiv	r1, r3, r2
 800c0a6:	fb01 f202 	mul.w	r2, r1, r2
 800c0aa:	1a9b      	subs	r3, r3, r2
 800c0ac:	693a      	ldr	r2, [r7, #16]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800c0b4:	021b      	lsls	r3, r3, #8
 800c0b6:	461a      	mov	r2, r3
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c0be:	683b      	ldr	r3, [r7, #0]
 800c0c0:	f003 0301 	and.w	r3, r3, #1
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <get_fat+0xe8>
 800c0c8:	68bb      	ldr	r3, [r7, #8]
 800c0ca:	091b      	lsrs	r3, r3, #4
 800c0cc:	e002      	b.n	800c0d4 <get_fat+0xee>
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c0d4:	617b      	str	r3, [r7, #20]
			break;
 800c0d6:	e055      	b.n	800c184 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	899b      	ldrh	r3, [r3, #12]
 800c0e0:	085b      	lsrs	r3, r3, #1
 800c0e2:	b29b      	uxth	r3, r3
 800c0e4:	4619      	mov	r1, r3
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c0ec:	4413      	add	r3, r2
 800c0ee:	4619      	mov	r1, r3
 800c0f0:	6938      	ldr	r0, [r7, #16]
 800c0f2:	f7ff febb 	bl	800be6c <move_window>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d140      	bne.n	800c17e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c0fc:	693b      	ldr	r3, [r7, #16]
 800c0fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	005b      	lsls	r3, r3, #1
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	8992      	ldrh	r2, [r2, #12]
 800c10a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c10e:	fb00 f202 	mul.w	r2, r0, r2
 800c112:	1a9b      	subs	r3, r3, r2
 800c114:	440b      	add	r3, r1
 800c116:	4618      	mov	r0, r3
 800c118:	f7ff fbf8 	bl	800b90c <ld_word>
 800c11c:	4603      	mov	r3, r0
 800c11e:	617b      	str	r3, [r7, #20]
			break;
 800c120:	e030      	b.n	800c184 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c122:	693b      	ldr	r3, [r7, #16]
 800c124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	899b      	ldrh	r3, [r3, #12]
 800c12a:	089b      	lsrs	r3, r3, #2
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	4619      	mov	r1, r3
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	fbb3 f3f1 	udiv	r3, r3, r1
 800c136:	4413      	add	r3, r2
 800c138:	4619      	mov	r1, r3
 800c13a:	6938      	ldr	r0, [r7, #16]
 800c13c:	f7ff fe96 	bl	800be6c <move_window>
 800c140:	4603      	mov	r3, r0
 800c142:	2b00      	cmp	r3, #0
 800c144:	d11d      	bne.n	800c182 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c14c:	683b      	ldr	r3, [r7, #0]
 800c14e:	009b      	lsls	r3, r3, #2
 800c150:	693a      	ldr	r2, [r7, #16]
 800c152:	8992      	ldrh	r2, [r2, #12]
 800c154:	fbb3 f0f2 	udiv	r0, r3, r2
 800c158:	fb00 f202 	mul.w	r2, r0, r2
 800c15c:	1a9b      	subs	r3, r3, r2
 800c15e:	440b      	add	r3, r1
 800c160:	4618      	mov	r0, r3
 800c162:	f7ff fbeb 	bl	800b93c <ld_dword>
 800c166:	4603      	mov	r3, r0
 800c168:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c16c:	617b      	str	r3, [r7, #20]
			break;
 800c16e:	e009      	b.n	800c184 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c170:	2301      	movs	r3, #1
 800c172:	617b      	str	r3, [r7, #20]
 800c174:	e006      	b.n	800c184 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c176:	bf00      	nop
 800c178:	e004      	b.n	800c184 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c17a:	bf00      	nop
 800c17c:	e002      	b.n	800c184 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c17e:	bf00      	nop
 800c180:	e000      	b.n	800c184 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c182:	bf00      	nop
		}
	}

	return val;
 800c184:	697b      	ldr	r3, [r7, #20]
}
 800c186:	4618      	mov	r0, r3
 800c188:	3718      	adds	r7, #24
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c18e:	b590      	push	{r4, r7, lr}
 800c190:	b089      	sub	sp, #36	; 0x24
 800c192:	af00      	add	r7, sp, #0
 800c194:	60f8      	str	r0, [r7, #12]
 800c196:	60b9      	str	r1, [r7, #8]
 800c198:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c19a:	2302      	movs	r3, #2
 800c19c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c19e:	68bb      	ldr	r3, [r7, #8]
 800c1a0:	2b01      	cmp	r3, #1
 800c1a2:	f240 8109 	bls.w	800c3b8 <put_fat+0x22a>
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	699b      	ldr	r3, [r3, #24]
 800c1aa:	68ba      	ldr	r2, [r7, #8]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	f080 8103 	bcs.w	800c3b8 <put_fat+0x22a>
		switch (fs->fs_type) {
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	2b03      	cmp	r3, #3
 800c1b8:	f000 80b6 	beq.w	800c328 <put_fat+0x19a>
 800c1bc:	2b03      	cmp	r3, #3
 800c1be:	f300 80fb 	bgt.w	800c3b8 <put_fat+0x22a>
 800c1c2:	2b01      	cmp	r3, #1
 800c1c4:	d003      	beq.n	800c1ce <put_fat+0x40>
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	f000 8083 	beq.w	800c2d2 <put_fat+0x144>
 800c1cc:	e0f4      	b.n	800c3b8 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	61bb      	str	r3, [r7, #24]
 800c1d2:	69bb      	ldr	r3, [r7, #24]
 800c1d4:	085b      	lsrs	r3, r3, #1
 800c1d6:	69ba      	ldr	r2, [r7, #24]
 800c1d8:	4413      	add	r3, r2
 800c1da:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	899b      	ldrh	r3, [r3, #12]
 800c1e4:	4619      	mov	r1, r3
 800c1e6:	69bb      	ldr	r3, [r7, #24]
 800c1e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1ec:	4413      	add	r3, r2
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f7ff fe3b 	bl	800be6c <move_window>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c1fa:	7ffb      	ldrb	r3, [r7, #31]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	f040 80d4 	bne.w	800c3aa <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	1c5a      	adds	r2, r3, #1
 800c20c:	61ba      	str	r2, [r7, #24]
 800c20e:	68fa      	ldr	r2, [r7, #12]
 800c210:	8992      	ldrh	r2, [r2, #12]
 800c212:	fbb3 f0f2 	udiv	r0, r3, r2
 800c216:	fb00 f202 	mul.w	r2, r0, r2
 800c21a:	1a9b      	subs	r3, r3, r2
 800c21c:	440b      	add	r3, r1
 800c21e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f003 0301 	and.w	r3, r3, #1
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00d      	beq.n	800c246 <put_fat+0xb8>
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	b25b      	sxtb	r3, r3
 800c230:	f003 030f 	and.w	r3, r3, #15
 800c234:	b25a      	sxtb	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	b2db      	uxtb	r3, r3
 800c23a:	011b      	lsls	r3, r3, #4
 800c23c:	b25b      	sxtb	r3, r3
 800c23e:	4313      	orrs	r3, r2
 800c240:	b25b      	sxtb	r3, r3
 800c242:	b2db      	uxtb	r3, r3
 800c244:	e001      	b.n	800c24a <put_fat+0xbc>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	697a      	ldr	r2, [r7, #20]
 800c24c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	2201      	movs	r2, #1
 800c252:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	899b      	ldrh	r3, [r3, #12]
 800c25c:	4619      	mov	r1, r3
 800c25e:	69bb      	ldr	r3, [r7, #24]
 800c260:	fbb3 f3f1 	udiv	r3, r3, r1
 800c264:	4413      	add	r3, r2
 800c266:	4619      	mov	r1, r3
 800c268:	68f8      	ldr	r0, [r7, #12]
 800c26a:	f7ff fdff 	bl	800be6c <move_window>
 800c26e:	4603      	mov	r3, r0
 800c270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c272:	7ffb      	ldrb	r3, [r7, #31]
 800c274:	2b00      	cmp	r3, #0
 800c276:	f040 809a 	bne.w	800c3ae <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	899b      	ldrh	r3, [r3, #12]
 800c284:	461a      	mov	r2, r3
 800c286:	69bb      	ldr	r3, [r7, #24]
 800c288:	fbb3 f0f2 	udiv	r0, r3, r2
 800c28c:	fb00 f202 	mul.w	r2, r0, r2
 800c290:	1a9b      	subs	r3, r3, r2
 800c292:	440b      	add	r3, r1
 800c294:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	f003 0301 	and.w	r3, r3, #1
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d003      	beq.n	800c2a8 <put_fat+0x11a>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	091b      	lsrs	r3, r3, #4
 800c2a4:	b2db      	uxtb	r3, r3
 800c2a6:	e00e      	b.n	800c2c6 <put_fat+0x138>
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	b25b      	sxtb	r3, r3
 800c2ae:	f023 030f 	bic.w	r3, r3, #15
 800c2b2:	b25a      	sxtb	r2, r3
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	0a1b      	lsrs	r3, r3, #8
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	f003 030f 	and.w	r3, r3, #15
 800c2be:	b25b      	sxtb	r3, r3
 800c2c0:	4313      	orrs	r3, r2
 800c2c2:	b25b      	sxtb	r3, r3
 800c2c4:	b2db      	uxtb	r3, r3
 800c2c6:	697a      	ldr	r2, [r7, #20]
 800c2c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	2201      	movs	r2, #1
 800c2ce:	70da      	strb	r2, [r3, #3]
			break;
 800c2d0:	e072      	b.n	800c3b8 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c2d2:	68fb      	ldr	r3, [r7, #12]
 800c2d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	899b      	ldrh	r3, [r3, #12]
 800c2da:	085b      	lsrs	r3, r3, #1
 800c2dc:	b29b      	uxth	r3, r3
 800c2de:	4619      	mov	r1, r3
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800c2e6:	4413      	add	r3, r2
 800c2e8:	4619      	mov	r1, r3
 800c2ea:	68f8      	ldr	r0, [r7, #12]
 800c2ec:	f7ff fdbe 	bl	800be6c <move_window>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c2f4:	7ffb      	ldrb	r3, [r7, #31]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d15b      	bne.n	800c3b2 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	005b      	lsls	r3, r3, #1
 800c304:	68fa      	ldr	r2, [r7, #12]
 800c306:	8992      	ldrh	r2, [r2, #12]
 800c308:	fbb3 f0f2 	udiv	r0, r3, r2
 800c30c:	fb00 f202 	mul.w	r2, r0, r2
 800c310:	1a9b      	subs	r3, r3, r2
 800c312:	440b      	add	r3, r1
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	b292      	uxth	r2, r2
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f7ff fb31 	bl	800b982 <st_word>
			fs->wflag = 1;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	2201      	movs	r2, #1
 800c324:	70da      	strb	r2, [r3, #3]
			break;
 800c326:	e047      	b.n	800c3b8 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	899b      	ldrh	r3, [r3, #12]
 800c330:	089b      	lsrs	r3, r3, #2
 800c332:	b29b      	uxth	r3, r3
 800c334:	4619      	mov	r1, r3
 800c336:	68bb      	ldr	r3, [r7, #8]
 800c338:	fbb3 f3f1 	udiv	r3, r3, r1
 800c33c:	4413      	add	r3, r2
 800c33e:	4619      	mov	r1, r3
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f7ff fd93 	bl	800be6c <move_window>
 800c346:	4603      	mov	r3, r0
 800c348:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c34a:	7ffb      	ldrb	r3, [r7, #31]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d132      	bne.n	800c3b6 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	68fa      	ldr	r2, [r7, #12]
 800c362:	8992      	ldrh	r2, [r2, #12]
 800c364:	fbb3 f0f2 	udiv	r0, r3, r2
 800c368:	fb00 f202 	mul.w	r2, r0, r2
 800c36c:	1a9b      	subs	r3, r3, r2
 800c36e:	440b      	add	r3, r1
 800c370:	4618      	mov	r0, r3
 800c372:	f7ff fae3 	bl	800b93c <ld_dword>
 800c376:	4603      	mov	r3, r0
 800c378:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c37c:	4323      	orrs	r3, r4
 800c37e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	009b      	lsls	r3, r3, #2
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	8992      	ldrh	r2, [r2, #12]
 800c38e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c392:	fb00 f202 	mul.w	r2, r0, r2
 800c396:	1a9b      	subs	r3, r3, r2
 800c398:	440b      	add	r3, r1
 800c39a:	6879      	ldr	r1, [r7, #4]
 800c39c:	4618      	mov	r0, r3
 800c39e:	f7ff fb0b 	bl	800b9b8 <st_dword>
			fs->wflag = 1;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	2201      	movs	r2, #1
 800c3a6:	70da      	strb	r2, [r3, #3]
			break;
 800c3a8:	e006      	b.n	800c3b8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c3aa:	bf00      	nop
 800c3ac:	e004      	b.n	800c3b8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c3ae:	bf00      	nop
 800c3b0:	e002      	b.n	800c3b8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c3b2:	bf00      	nop
 800c3b4:	e000      	b.n	800c3b8 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c3b6:	bf00      	nop
		}
	}
	return res;
 800c3b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3724      	adds	r7, #36	; 0x24
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd90      	pop	{r4, r7, pc}

0800c3c2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c3c2:	b580      	push	{r7, lr}
 800c3c4:	b088      	sub	sp, #32
 800c3c6:	af00      	add	r7, sp, #0
 800c3c8:	60f8      	str	r0, [r7, #12]
 800c3ca:	60b9      	str	r1, [r7, #8]
 800c3cc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d904      	bls.n	800c3e8 <remove_chain+0x26>
 800c3de:	69bb      	ldr	r3, [r7, #24]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	429a      	cmp	r2, r3
 800c3e6:	d301      	bcc.n	800c3ec <remove_chain+0x2a>
 800c3e8:	2302      	movs	r3, #2
 800c3ea:	e04b      	b.n	800c484 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d00c      	beq.n	800c40c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c3f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c3f6:	6879      	ldr	r1, [r7, #4]
 800c3f8:	69b8      	ldr	r0, [r7, #24]
 800c3fa:	f7ff fec8 	bl	800c18e <put_fat>
 800c3fe:	4603      	mov	r3, r0
 800c400:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c402:	7ffb      	ldrb	r3, [r7, #31]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d001      	beq.n	800c40c <remove_chain+0x4a>
 800c408:	7ffb      	ldrb	r3, [r7, #31]
 800c40a:	e03b      	b.n	800c484 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c40c:	68b9      	ldr	r1, [r7, #8]
 800c40e:	68f8      	ldr	r0, [r7, #12]
 800c410:	f7ff fde9 	bl	800bfe6 <get_fat>
 800c414:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d031      	beq.n	800c480 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2b01      	cmp	r3, #1
 800c420:	d101      	bne.n	800c426 <remove_chain+0x64>
 800c422:	2302      	movs	r3, #2
 800c424:	e02e      	b.n	800c484 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c42c:	d101      	bne.n	800c432 <remove_chain+0x70>
 800c42e:	2301      	movs	r3, #1
 800c430:	e028      	b.n	800c484 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c432:	2200      	movs	r2, #0
 800c434:	68b9      	ldr	r1, [r7, #8]
 800c436:	69b8      	ldr	r0, [r7, #24]
 800c438:	f7ff fea9 	bl	800c18e <put_fat>
 800c43c:	4603      	mov	r3, r0
 800c43e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c440:	7ffb      	ldrb	r3, [r7, #31]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d001      	beq.n	800c44a <remove_chain+0x88>
 800c446:	7ffb      	ldrb	r3, [r7, #31]
 800c448:	e01c      	b.n	800c484 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	695a      	ldr	r2, [r3, #20]
 800c44e:	69bb      	ldr	r3, [r7, #24]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	3b02      	subs	r3, #2
 800c454:	429a      	cmp	r2, r3
 800c456:	d20b      	bcs.n	800c470 <remove_chain+0xae>
			fs->free_clst++;
 800c458:	69bb      	ldr	r3, [r7, #24]
 800c45a:	695b      	ldr	r3, [r3, #20]
 800c45c:	1c5a      	adds	r2, r3, #1
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800c462:	69bb      	ldr	r3, [r7, #24]
 800c464:	791b      	ldrb	r3, [r3, #4]
 800c466:	f043 0301 	orr.w	r3, r3, #1
 800c46a:	b2da      	uxtb	r2, r3
 800c46c:	69bb      	ldr	r3, [r7, #24]
 800c46e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c474:	69bb      	ldr	r3, [r7, #24]
 800c476:	699b      	ldr	r3, [r3, #24]
 800c478:	68ba      	ldr	r2, [r7, #8]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d3c6      	bcc.n	800c40c <remove_chain+0x4a>
 800c47e:	e000      	b.n	800c482 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c480:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c482:	2300      	movs	r3, #0
}
 800c484:	4618      	mov	r0, r3
 800c486:	3720      	adds	r7, #32
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}

0800c48c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c48c:	b580      	push	{r7, lr}
 800c48e:	b088      	sub	sp, #32
 800c490:	af00      	add	r7, sp, #0
 800c492:	6078      	str	r0, [r7, #4]
 800c494:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d10d      	bne.n	800c4be <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	691b      	ldr	r3, [r3, #16]
 800c4a6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c4a8:	69bb      	ldr	r3, [r7, #24]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d004      	beq.n	800c4b8 <create_chain+0x2c>
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	699b      	ldr	r3, [r3, #24]
 800c4b2:	69ba      	ldr	r2, [r7, #24]
 800c4b4:	429a      	cmp	r2, r3
 800c4b6:	d31b      	bcc.n	800c4f0 <create_chain+0x64>
 800c4b8:	2301      	movs	r3, #1
 800c4ba:	61bb      	str	r3, [r7, #24]
 800c4bc:	e018      	b.n	800c4f0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c4be:	6839      	ldr	r1, [r7, #0]
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f7ff fd90 	bl	800bfe6 <get_fat>
 800c4c6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b01      	cmp	r3, #1
 800c4cc:	d801      	bhi.n	800c4d2 <create_chain+0x46>
 800c4ce:	2301      	movs	r3, #1
 800c4d0:	e070      	b.n	800c5b4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4d8:	d101      	bne.n	800c4de <create_chain+0x52>
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	e06a      	b.n	800c5b4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	699b      	ldr	r3, [r3, #24]
 800c4e2:	68fa      	ldr	r2, [r7, #12]
 800c4e4:	429a      	cmp	r2, r3
 800c4e6:	d201      	bcs.n	800c4ec <create_chain+0x60>
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	e063      	b.n	800c5b4 <create_chain+0x128>
		scl = clst;
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c4f0:	69bb      	ldr	r3, [r7, #24]
 800c4f2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c4f4:	69fb      	ldr	r3, [r7, #28]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c4fa:	693b      	ldr	r3, [r7, #16]
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	69fa      	ldr	r2, [r7, #28]
 800c500:	429a      	cmp	r2, r3
 800c502:	d307      	bcc.n	800c514 <create_chain+0x88>
				ncl = 2;
 800c504:	2302      	movs	r3, #2
 800c506:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c508:	69fa      	ldr	r2, [r7, #28]
 800c50a:	69bb      	ldr	r3, [r7, #24]
 800c50c:	429a      	cmp	r2, r3
 800c50e:	d901      	bls.n	800c514 <create_chain+0x88>
 800c510:	2300      	movs	r3, #0
 800c512:	e04f      	b.n	800c5b4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c514:	69f9      	ldr	r1, [r7, #28]
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff fd65 	bl	800bfe6 <get_fat>
 800c51c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d00e      	beq.n	800c542 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	2b01      	cmp	r3, #1
 800c528:	d003      	beq.n	800c532 <create_chain+0xa6>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c530:	d101      	bne.n	800c536 <create_chain+0xaa>
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	e03e      	b.n	800c5b4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c536:	69fa      	ldr	r2, [r7, #28]
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d1da      	bne.n	800c4f4 <create_chain+0x68>
 800c53e:	2300      	movs	r3, #0
 800c540:	e038      	b.n	800c5b4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c542:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c544:	f04f 32ff 	mov.w	r2, #4294967295
 800c548:	69f9      	ldr	r1, [r7, #28]
 800c54a:	6938      	ldr	r0, [r7, #16]
 800c54c:	f7ff fe1f 	bl	800c18e <put_fat>
 800c550:	4603      	mov	r3, r0
 800c552:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c554:	7dfb      	ldrb	r3, [r7, #23]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d109      	bne.n	800c56e <create_chain+0xe2>
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d006      	beq.n	800c56e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c560:	69fa      	ldr	r2, [r7, #28]
 800c562:	6839      	ldr	r1, [r7, #0]
 800c564:	6938      	ldr	r0, [r7, #16]
 800c566:	f7ff fe12 	bl	800c18e <put_fat>
 800c56a:	4603      	mov	r3, r0
 800c56c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c56e:	7dfb      	ldrb	r3, [r7, #23]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d116      	bne.n	800c5a2 <create_chain+0x116>
		fs->last_clst = ncl;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	69fa      	ldr	r2, [r7, #28]
 800c578:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	695a      	ldr	r2, [r3, #20]
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	699b      	ldr	r3, [r3, #24]
 800c582:	3b02      	subs	r3, #2
 800c584:	429a      	cmp	r2, r3
 800c586:	d804      	bhi.n	800c592 <create_chain+0x106>
 800c588:	693b      	ldr	r3, [r7, #16]
 800c58a:	695b      	ldr	r3, [r3, #20]
 800c58c:	1e5a      	subs	r2, r3, #1
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	791b      	ldrb	r3, [r3, #4]
 800c596:	f043 0301 	orr.w	r3, r3, #1
 800c59a:	b2da      	uxtb	r2, r3
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	711a      	strb	r2, [r3, #4]
 800c5a0:	e007      	b.n	800c5b2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c5a2:	7dfb      	ldrb	r3, [r7, #23]
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d102      	bne.n	800c5ae <create_chain+0x122>
 800c5a8:	f04f 33ff 	mov.w	r3, #4294967295
 800c5ac:	e000      	b.n	800c5b0 <create_chain+0x124>
 800c5ae:	2301      	movs	r3, #1
 800c5b0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c5b2:	69fb      	ldr	r3, [r7, #28]
}
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	3720      	adds	r7, #32
 800c5b8:	46bd      	mov	sp, r7
 800c5ba:	bd80      	pop	{r7, pc}

0800c5bc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c5bc:	b480      	push	{r7}
 800c5be:	b087      	sub	sp, #28
 800c5c0:	af00      	add	r7, sp, #0
 800c5c2:	6078      	str	r0, [r7, #4]
 800c5c4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5d0:	3304      	adds	r3, #4
 800c5d2:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	899b      	ldrh	r3, [r3, #12]
 800c5d8:	461a      	mov	r2, r3
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	8952      	ldrh	r2, [r2, #10]
 800c5e4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c5e8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	1d1a      	adds	r2, r3, #4
 800c5ee:	613a      	str	r2, [r7, #16]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d101      	bne.n	800c5fe <clmt_clust+0x42>
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	e010      	b.n	800c620 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c5fe:	697a      	ldr	r2, [r7, #20]
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	429a      	cmp	r2, r3
 800c604:	d307      	bcc.n	800c616 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c606:	697a      	ldr	r2, [r7, #20]
 800c608:	68bb      	ldr	r3, [r7, #8]
 800c60a:	1ad3      	subs	r3, r2, r3
 800c60c:	617b      	str	r3, [r7, #20]
 800c60e:	693b      	ldr	r3, [r7, #16]
 800c610:	3304      	adds	r3, #4
 800c612:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c614:	e7e9      	b.n	800c5ea <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c616:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c618:	693b      	ldr	r3, [r7, #16]
 800c61a:	681a      	ldr	r2, [r3, #0]
 800c61c:	697b      	ldr	r3, [r7, #20]
 800c61e:	4413      	add	r3, r2
}
 800c620:	4618      	mov	r0, r3
 800c622:	371c      	adds	r7, #28
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c642:	d204      	bcs.n	800c64e <dir_sdi+0x22>
 800c644:	683b      	ldr	r3, [r7, #0]
 800c646:	f003 031f 	and.w	r3, r3, #31
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d001      	beq.n	800c652 <dir_sdi+0x26>
		return FR_INT_ERR;
 800c64e:	2302      	movs	r3, #2
 800c650:	e071      	b.n	800c736 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	683a      	ldr	r2, [r7, #0]
 800c656:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	689b      	ldr	r3, [r3, #8]
 800c65c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d106      	bne.n	800c672 <dir_sdi+0x46>
 800c664:	693b      	ldr	r3, [r7, #16]
 800c666:	781b      	ldrb	r3, [r3, #0]
 800c668:	2b02      	cmp	r3, #2
 800c66a:	d902      	bls.n	800c672 <dir_sdi+0x46>
		clst = fs->dirbase;
 800c66c:	693b      	ldr	r3, [r7, #16]
 800c66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c670:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c672:	697b      	ldr	r3, [r7, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d10c      	bne.n	800c692 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	095b      	lsrs	r3, r3, #5
 800c67c:	693a      	ldr	r2, [r7, #16]
 800c67e:	8912      	ldrh	r2, [r2, #8]
 800c680:	4293      	cmp	r3, r2
 800c682:	d301      	bcc.n	800c688 <dir_sdi+0x5c>
 800c684:	2302      	movs	r3, #2
 800c686:	e056      	b.n	800c736 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	61da      	str	r2, [r3, #28]
 800c690:	e02d      	b.n	800c6ee <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c692:	693b      	ldr	r3, [r7, #16]
 800c694:	895b      	ldrh	r3, [r3, #10]
 800c696:	461a      	mov	r2, r3
 800c698:	693b      	ldr	r3, [r7, #16]
 800c69a:	899b      	ldrh	r3, [r3, #12]
 800c69c:	fb02 f303 	mul.w	r3, r2, r3
 800c6a0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6a2:	e019      	b.n	800c6d8 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	6979      	ldr	r1, [r7, #20]
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	f7ff fc9c 	bl	800bfe6 <get_fat>
 800c6ae:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c6b6:	d101      	bne.n	800c6bc <dir_sdi+0x90>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	e03c      	b.n	800c736 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d904      	bls.n	800c6cc <dir_sdi+0xa0>
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	697a      	ldr	r2, [r7, #20]
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d301      	bcc.n	800c6d0 <dir_sdi+0xa4>
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	e032      	b.n	800c736 <dir_sdi+0x10a>
			ofs -= csz;
 800c6d0:	683a      	ldr	r2, [r7, #0]
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	1ad3      	subs	r3, r2, r3
 800c6d6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c6d8:	683a      	ldr	r2, [r7, #0]
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	d2e1      	bcs.n	800c6a4 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c6e0:	6979      	ldr	r1, [r7, #20]
 800c6e2:	6938      	ldr	r0, [r7, #16]
 800c6e4:	f7ff fc60 	bl	800bfa8 <clust2sect>
 800c6e8:	4602      	mov	r2, r0
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	697a      	ldr	r2, [r7, #20]
 800c6f2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	69db      	ldr	r3, [r3, #28]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <dir_sdi+0xd4>
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	e01a      	b.n	800c736 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	69da      	ldr	r2, [r3, #28]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	899b      	ldrh	r3, [r3, #12]
 800c708:	4619      	mov	r1, r3
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c710:	441a      	add	r2, r3
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	899b      	ldrh	r3, [r3, #12]
 800c720:	461a      	mov	r2, r3
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	fbb3 f0f2 	udiv	r0, r3, r2
 800c728:	fb00 f202 	mul.w	r2, r0, r2
 800c72c:	1a9b      	subs	r3, r3, r2
 800c72e:	18ca      	adds	r2, r1, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c734:	2300      	movs	r3, #0
}
 800c736:	4618      	mov	r0, r3
 800c738:	3718      	adds	r7, #24
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}

0800c73e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800c73e:	b580      	push	{r7, lr}
 800c740:	b086      	sub	sp, #24
 800c742:	af00      	add	r7, sp, #0
 800c744:	6078      	str	r0, [r7, #4]
 800c746:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	3320      	adds	r3, #32
 800c754:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	69db      	ldr	r3, [r3, #28]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d003      	beq.n	800c766 <dir_next+0x28>
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c764:	d301      	bcc.n	800c76a <dir_next+0x2c>
 800c766:	2304      	movs	r3, #4
 800c768:	e0bb      	b.n	800c8e2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800c76a:	68fb      	ldr	r3, [r7, #12]
 800c76c:	899b      	ldrh	r3, [r3, #12]
 800c76e:	461a      	mov	r2, r3
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	fbb3 f1f2 	udiv	r1, r3, r2
 800c776:	fb01 f202 	mul.w	r2, r1, r2
 800c77a:	1a9b      	subs	r3, r3, r2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f040 809d 	bne.w	800c8bc <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	69db      	ldr	r3, [r3, #28]
 800c786:	1c5a      	adds	r2, r3, #1
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	699b      	ldr	r3, [r3, #24]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d10b      	bne.n	800c7ac <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	095b      	lsrs	r3, r3, #5
 800c798:	68fa      	ldr	r2, [r7, #12]
 800c79a:	8912      	ldrh	r2, [r2, #8]
 800c79c:	4293      	cmp	r3, r2
 800c79e:	f0c0 808d 	bcc.w	800c8bc <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	2200      	movs	r2, #0
 800c7a6:	61da      	str	r2, [r3, #28]
 800c7a8:	2304      	movs	r3, #4
 800c7aa:	e09a      	b.n	800c8e2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	899b      	ldrh	r3, [r3, #12]
 800c7b0:	461a      	mov	r2, r3
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	fbb3 f3f2 	udiv	r3, r3, r2
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	8952      	ldrh	r2, [r2, #10]
 800c7bc:	3a01      	subs	r2, #1
 800c7be:	4013      	ands	r3, r2
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d17b      	bne.n	800c8bc <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7ff fc0a 	bl	800bfe6 <get_fat>
 800c7d2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2b01      	cmp	r3, #1
 800c7d8:	d801      	bhi.n	800c7de <dir_next+0xa0>
 800c7da:	2302      	movs	r3, #2
 800c7dc:	e081      	b.n	800c8e2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7e4:	d101      	bne.n	800c7ea <dir_next+0xac>
 800c7e6:	2301      	movs	r3, #1
 800c7e8:	e07b      	b.n	800c8e2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	699b      	ldr	r3, [r3, #24]
 800c7ee:	697a      	ldr	r2, [r7, #20]
 800c7f0:	429a      	cmp	r2, r3
 800c7f2:	d359      	bcc.n	800c8a8 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800c7f4:	683b      	ldr	r3, [r7, #0]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d104      	bne.n	800c804 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	61da      	str	r2, [r3, #28]
 800c800:	2304      	movs	r3, #4
 800c802:	e06e      	b.n	800c8e2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	699b      	ldr	r3, [r3, #24]
 800c80a:	4619      	mov	r1, r3
 800c80c:	4610      	mov	r0, r2
 800c80e:	f7ff fe3d 	bl	800c48c <create_chain>
 800c812:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800c814:	697b      	ldr	r3, [r7, #20]
 800c816:	2b00      	cmp	r3, #0
 800c818:	d101      	bne.n	800c81e <dir_next+0xe0>
 800c81a:	2307      	movs	r3, #7
 800c81c:	e061      	b.n	800c8e2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800c81e:	697b      	ldr	r3, [r7, #20]
 800c820:	2b01      	cmp	r3, #1
 800c822:	d101      	bne.n	800c828 <dir_next+0xea>
 800c824:	2302      	movs	r3, #2
 800c826:	e05c      	b.n	800c8e2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c82e:	d101      	bne.n	800c834 <dir_next+0xf6>
 800c830:	2301      	movs	r3, #1
 800c832:	e056      	b.n	800c8e2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800c834:	68f8      	ldr	r0, [r7, #12]
 800c836:	f7ff fad5 	bl	800bde4 <sync_window>
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <dir_next+0x106>
 800c840:	2301      	movs	r3, #1
 800c842:	e04e      	b.n	800c8e2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800c844:	68fb      	ldr	r3, [r7, #12]
 800c846:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	899b      	ldrh	r3, [r3, #12]
 800c84e:	461a      	mov	r2, r3
 800c850:	2100      	movs	r1, #0
 800c852:	f7ff f8fe 	bl	800ba52 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c856:	2300      	movs	r3, #0
 800c858:	613b      	str	r3, [r7, #16]
 800c85a:	6979      	ldr	r1, [r7, #20]
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff fba3 	bl	800bfa8 <clust2sect>
 800c862:	4602      	mov	r2, r0
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	631a      	str	r2, [r3, #48]	; 0x30
 800c868:	e012      	b.n	800c890 <dir_next+0x152>
						fs->wflag = 1;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	2201      	movs	r2, #1
 800c86e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800c870:	68f8      	ldr	r0, [r7, #12]
 800c872:	f7ff fab7 	bl	800bde4 <sync_window>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d001      	beq.n	800c880 <dir_next+0x142>
 800c87c:	2301      	movs	r3, #1
 800c87e:	e030      	b.n	800c8e2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	3301      	adds	r3, #1
 800c884:	613b      	str	r3, [r7, #16]
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c88a:	1c5a      	adds	r2, r3, #1
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	631a      	str	r2, [r3, #48]	; 0x30
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	895b      	ldrh	r3, [r3, #10]
 800c894:	461a      	mov	r2, r3
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	4293      	cmp	r3, r2
 800c89a:	d3e6      	bcc.n	800c86a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	1ad2      	subs	r2, r2, r3
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800c8ae:	6979      	ldr	r1, [r7, #20]
 800c8b0:	68f8      	ldr	r0, [r7, #12]
 800c8b2:	f7ff fb79 	bl	800bfa8 <clust2sect>
 800c8b6:	4602      	mov	r2, r0
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68ba      	ldr	r2, [r7, #8]
 800c8c0:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	899b      	ldrh	r3, [r3, #12]
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	fbb3 f0f2 	udiv	r0, r3, r2
 800c8d4:	fb00 f202 	mul.w	r2, r0, r2
 800c8d8:	1a9b      	subs	r3, r3, r2
 800c8da:	18ca      	adds	r2, r1, r3
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800c8e0:	2300      	movs	r3, #0
}
 800c8e2:	4618      	mov	r0, r3
 800c8e4:	3718      	adds	r7, #24
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}

0800c8ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c8ea:	b580      	push	{r7, lr}
 800c8ec:	b086      	sub	sp, #24
 800c8ee:	af00      	add	r7, sp, #0
 800c8f0:	6078      	str	r0, [r7, #4]
 800c8f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c8fa:	2100      	movs	r1, #0
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f7ff fe95 	bl	800c62c <dir_sdi>
 800c902:	4603      	mov	r3, r0
 800c904:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c906:	7dfb      	ldrb	r3, [r7, #23]
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d12b      	bne.n	800c964 <dir_alloc+0x7a>
		n = 0;
 800c90c:	2300      	movs	r3, #0
 800c90e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	69db      	ldr	r3, [r3, #28]
 800c914:	4619      	mov	r1, r3
 800c916:	68f8      	ldr	r0, [r7, #12]
 800c918:	f7ff faa8 	bl	800be6c <move_window>
 800c91c:	4603      	mov	r3, r0
 800c91e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c920:	7dfb      	ldrb	r3, [r7, #23]
 800c922:	2b00      	cmp	r3, #0
 800c924:	d11d      	bne.n	800c962 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	6a1b      	ldr	r3, [r3, #32]
 800c92a:	781b      	ldrb	r3, [r3, #0]
 800c92c:	2be5      	cmp	r3, #229	; 0xe5
 800c92e:	d004      	beq.n	800c93a <dir_alloc+0x50>
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	781b      	ldrb	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d107      	bne.n	800c94a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	3301      	adds	r3, #1
 800c93e:	613b      	str	r3, [r7, #16]
 800c940:	693a      	ldr	r2, [r7, #16]
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	429a      	cmp	r2, r3
 800c946:	d102      	bne.n	800c94e <dir_alloc+0x64>
 800c948:	e00c      	b.n	800c964 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c94e:	2101      	movs	r1, #1
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f7ff fef4 	bl	800c73e <dir_next>
 800c956:	4603      	mov	r3, r0
 800c958:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d0d7      	beq.n	800c910 <dir_alloc+0x26>
 800c960:	e000      	b.n	800c964 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800c962:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c964:	7dfb      	ldrb	r3, [r7, #23]
 800c966:	2b04      	cmp	r3, #4
 800c968:	d101      	bne.n	800c96e <dir_alloc+0x84>
 800c96a:	2307      	movs	r3, #7
 800c96c:	75fb      	strb	r3, [r7, #23]
	return res;
 800c96e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c970:	4618      	mov	r0, r3
 800c972:	3718      	adds	r7, #24
 800c974:	46bd      	mov	sp, r7
 800c976:	bd80      	pop	{r7, pc}

0800c978 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b084      	sub	sp, #16
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
 800c980:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	331a      	adds	r3, #26
 800c986:	4618      	mov	r0, r3
 800c988:	f7fe ffc0 	bl	800b90c <ld_word>
 800c98c:	4603      	mov	r3, r0
 800c98e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	781b      	ldrb	r3, [r3, #0]
 800c994:	2b03      	cmp	r3, #3
 800c996:	d109      	bne.n	800c9ac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	3314      	adds	r3, #20
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe ffb5 	bl	800b90c <ld_word>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	041b      	lsls	r3, r3, #16
 800c9a6:	68fa      	ldr	r2, [r7, #12]
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c9ac:	68fb      	ldr	r3, [r7, #12]
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3710      	adds	r7, #16
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b084      	sub	sp, #16
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	60f8      	str	r0, [r7, #12]
 800c9be:	60b9      	str	r1, [r7, #8]
 800c9c0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	331a      	adds	r3, #26
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	b292      	uxth	r2, r2
 800c9ca:	4611      	mov	r1, r2
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f7fe ffd8 	bl	800b982 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	781b      	ldrb	r3, [r3, #0]
 800c9d6:	2b03      	cmp	r3, #3
 800c9d8:	d109      	bne.n	800c9ee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	f103 0214 	add.w	r2, r3, #20
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	0c1b      	lsrs	r3, r3, #16
 800c9e4:	b29b      	uxth	r3, r3
 800c9e6:	4619      	mov	r1, r3
 800c9e8:	4610      	mov	r0, r2
 800c9ea:	f7fe ffca 	bl	800b982 <st_word>
	}
}
 800c9ee:	bf00      	nop
 800c9f0:	3710      	adds	r7, #16
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b086      	sub	sp, #24
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ca04:	2100      	movs	r1, #0
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	f7ff fe10 	bl	800c62c <dir_sdi>
 800ca0c:	4603      	mov	r3, r0
 800ca0e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d001      	beq.n	800ca1a <dir_find+0x24>
 800ca16:	7dfb      	ldrb	r3, [r7, #23]
 800ca18:	e03e      	b.n	800ca98 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	69db      	ldr	r3, [r3, #28]
 800ca1e:	4619      	mov	r1, r3
 800ca20:	6938      	ldr	r0, [r7, #16]
 800ca22:	f7ff fa23 	bl	800be6c <move_window>
 800ca26:	4603      	mov	r3, r0
 800ca28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d12f      	bne.n	800ca90 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6a1b      	ldr	r3, [r3, #32]
 800ca34:	781b      	ldrb	r3, [r3, #0]
 800ca36:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ca38:	7bfb      	ldrb	r3, [r7, #15]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d102      	bne.n	800ca44 <dir_find+0x4e>
 800ca3e:	2304      	movs	r3, #4
 800ca40:	75fb      	strb	r3, [r7, #23]
 800ca42:	e028      	b.n	800ca96 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6a1b      	ldr	r3, [r3, #32]
 800ca48:	330b      	adds	r3, #11
 800ca4a:	781b      	ldrb	r3, [r3, #0]
 800ca4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca50:	b2da      	uxtb	r2, r3
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	330b      	adds	r3, #11
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	f003 0308 	and.w	r3, r3, #8
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d10a      	bne.n	800ca7c <dir_find+0x86>
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	6a18      	ldr	r0, [r3, #32]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	3324      	adds	r3, #36	; 0x24
 800ca6e:	220b      	movs	r2, #11
 800ca70:	4619      	mov	r1, r3
 800ca72:	f7ff f809 	bl	800ba88 <mem_cmp>
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d00b      	beq.n	800ca94 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ca7c:	2100      	movs	r1, #0
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f7ff fe5d 	bl	800c73e <dir_next>
 800ca84:	4603      	mov	r3, r0
 800ca86:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ca88:	7dfb      	ldrb	r3, [r7, #23]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d0c5      	beq.n	800ca1a <dir_find+0x24>
 800ca8e:	e002      	b.n	800ca96 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ca90:	bf00      	nop
 800ca92:	e000      	b.n	800ca96 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ca94:	bf00      	nop

	return res;
 800ca96:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3718      	adds	r7, #24
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b084      	sub	sp, #16
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800caae:	2101      	movs	r1, #1
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	f7ff ff1a 	bl	800c8ea <dir_alloc>
 800cab6:	4603      	mov	r3, r0
 800cab8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800caba:	7bfb      	ldrb	r3, [r7, #15]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d11c      	bne.n	800cafa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	69db      	ldr	r3, [r3, #28]
 800cac4:	4619      	mov	r1, r3
 800cac6:	68b8      	ldr	r0, [r7, #8]
 800cac8:	f7ff f9d0 	bl	800be6c <move_window>
 800cacc:	4603      	mov	r3, r0
 800cace:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d111      	bne.n	800cafa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	6a1b      	ldr	r3, [r3, #32]
 800cada:	2220      	movs	r2, #32
 800cadc:	2100      	movs	r1, #0
 800cade:	4618      	mov	r0, r3
 800cae0:	f7fe ffb7 	bl	800ba52 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	6a18      	ldr	r0, [r3, #32]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3324      	adds	r3, #36	; 0x24
 800caec:	220b      	movs	r2, #11
 800caee:	4619      	mov	r1, r3
 800caf0:	f7fe ff8e 	bl	800ba10 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800caf4:	68bb      	ldr	r3, [r7, #8]
 800caf6:	2201      	movs	r2, #1
 800caf8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800cafa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3710      	adds	r7, #16
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3324      	adds	r3, #36	; 0x24
 800cb18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800cb1a:	220b      	movs	r2, #11
 800cb1c:	2120      	movs	r1, #32
 800cb1e:	68b8      	ldr	r0, [r7, #8]
 800cb20:	f7fe ff97 	bl	800ba52 <mem_set>
	si = i = 0; ni = 8;
 800cb24:	2300      	movs	r3, #0
 800cb26:	613b      	str	r3, [r7, #16]
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	61fb      	str	r3, [r7, #28]
 800cb2c:	2308      	movs	r3, #8
 800cb2e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800cb30:	69fb      	ldr	r3, [r7, #28]
 800cb32:	1c5a      	adds	r2, r3, #1
 800cb34:	61fa      	str	r2, [r7, #28]
 800cb36:	68fa      	ldr	r2, [r7, #12]
 800cb38:	4413      	add	r3, r2
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cb3e:	7efb      	ldrb	r3, [r7, #27]
 800cb40:	2b20      	cmp	r3, #32
 800cb42:	d94e      	bls.n	800cbe2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800cb44:	7efb      	ldrb	r3, [r7, #27]
 800cb46:	2b2f      	cmp	r3, #47	; 0x2f
 800cb48:	d006      	beq.n	800cb58 <create_name+0x54>
 800cb4a:	7efb      	ldrb	r3, [r7, #27]
 800cb4c:	2b5c      	cmp	r3, #92	; 0x5c
 800cb4e:	d110      	bne.n	800cb72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800cb50:	e002      	b.n	800cb58 <create_name+0x54>
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	3301      	adds	r3, #1
 800cb56:	61fb      	str	r3, [r7, #28]
 800cb58:	68fa      	ldr	r2, [r7, #12]
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b2f      	cmp	r3, #47	; 0x2f
 800cb62:	d0f6      	beq.n	800cb52 <create_name+0x4e>
 800cb64:	68fa      	ldr	r2, [r7, #12]
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	4413      	add	r3, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b5c      	cmp	r3, #92	; 0x5c
 800cb6e:	d0f0      	beq.n	800cb52 <create_name+0x4e>
			break;
 800cb70:	e038      	b.n	800cbe4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800cb72:	7efb      	ldrb	r3, [r7, #27]
 800cb74:	2b2e      	cmp	r3, #46	; 0x2e
 800cb76:	d003      	beq.n	800cb80 <create_name+0x7c>
 800cb78:	693a      	ldr	r2, [r7, #16]
 800cb7a:	697b      	ldr	r3, [r7, #20]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d30c      	bcc.n	800cb9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	2b0b      	cmp	r3, #11
 800cb84:	d002      	beq.n	800cb8c <create_name+0x88>
 800cb86:	7efb      	ldrb	r3, [r7, #27]
 800cb88:	2b2e      	cmp	r3, #46	; 0x2e
 800cb8a:	d001      	beq.n	800cb90 <create_name+0x8c>
 800cb8c:	2306      	movs	r3, #6
 800cb8e:	e044      	b.n	800cc1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800cb90:	2308      	movs	r3, #8
 800cb92:	613b      	str	r3, [r7, #16]
 800cb94:	230b      	movs	r3, #11
 800cb96:	617b      	str	r3, [r7, #20]
			continue;
 800cb98:	e022      	b.n	800cbe0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800cb9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	da04      	bge.n	800cbac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800cba2:	7efb      	ldrb	r3, [r7, #27]
 800cba4:	3b80      	subs	r3, #128	; 0x80
 800cba6:	4a1f      	ldr	r2, [pc, #124]	; (800cc24 <create_name+0x120>)
 800cba8:	5cd3      	ldrb	r3, [r2, r3]
 800cbaa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800cbac:	7efb      	ldrb	r3, [r7, #27]
 800cbae:	4619      	mov	r1, r3
 800cbb0:	481d      	ldr	r0, [pc, #116]	; (800cc28 <create_name+0x124>)
 800cbb2:	f7fe ff90 	bl	800bad6 <chk_chr>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d001      	beq.n	800cbc0 <create_name+0xbc>
 800cbbc:	2306      	movs	r3, #6
 800cbbe:	e02c      	b.n	800cc1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800cbc0:	7efb      	ldrb	r3, [r7, #27]
 800cbc2:	2b60      	cmp	r3, #96	; 0x60
 800cbc4:	d905      	bls.n	800cbd2 <create_name+0xce>
 800cbc6:	7efb      	ldrb	r3, [r7, #27]
 800cbc8:	2b7a      	cmp	r3, #122	; 0x7a
 800cbca:	d802      	bhi.n	800cbd2 <create_name+0xce>
 800cbcc:	7efb      	ldrb	r3, [r7, #27]
 800cbce:	3b20      	subs	r3, #32
 800cbd0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800cbd2:	693b      	ldr	r3, [r7, #16]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	613a      	str	r2, [r7, #16]
 800cbd8:	68ba      	ldr	r2, [r7, #8]
 800cbda:	4413      	add	r3, r2
 800cbdc:	7efa      	ldrb	r2, [r7, #27]
 800cbde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800cbe0:	e7a6      	b.n	800cb30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800cbe2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800cbe4:	68fa      	ldr	r2, [r7, #12]
 800cbe6:	69fb      	ldr	r3, [r7, #28]
 800cbe8:	441a      	add	r2, r3
 800cbea:	683b      	ldr	r3, [r7, #0]
 800cbec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <create_name+0xf4>
 800cbf4:	2306      	movs	r3, #6
 800cbf6:	e010      	b.n	800cc1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	781b      	ldrb	r3, [r3, #0]
 800cbfc:	2be5      	cmp	r3, #229	; 0xe5
 800cbfe:	d102      	bne.n	800cc06 <create_name+0x102>
 800cc00:	68bb      	ldr	r3, [r7, #8]
 800cc02:	2205      	movs	r2, #5
 800cc04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800cc06:	7efb      	ldrb	r3, [r7, #27]
 800cc08:	2b20      	cmp	r3, #32
 800cc0a:	d801      	bhi.n	800cc10 <create_name+0x10c>
 800cc0c:	2204      	movs	r2, #4
 800cc0e:	e000      	b.n	800cc12 <create_name+0x10e>
 800cc10:	2200      	movs	r2, #0
 800cc12:	68bb      	ldr	r3, [r7, #8]
 800cc14:	330b      	adds	r3, #11
 800cc16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800cc18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800cc1a:	4618      	mov	r0, r3
 800cc1c:	3720      	adds	r7, #32
 800cc1e:	46bd      	mov	sp, r7
 800cc20:	bd80      	pop	{r7, pc}
 800cc22:	bf00      	nop
 800cc24:	0801dd38 	.word	0x0801dd38
 800cc28:	0800e890 	.word	0x0800e890

0800cc2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
 800cc34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800cc40:	e002      	b.n	800cc48 <follow_path+0x1c>
 800cc42:	683b      	ldr	r3, [r7, #0]
 800cc44:	3301      	adds	r3, #1
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	2b2f      	cmp	r3, #47	; 0x2f
 800cc4e:	d0f8      	beq.n	800cc42 <follow_path+0x16>
 800cc50:	683b      	ldr	r3, [r7, #0]
 800cc52:	781b      	ldrb	r3, [r3, #0]
 800cc54:	2b5c      	cmp	r3, #92	; 0x5c
 800cc56:	d0f4      	beq.n	800cc42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800cc58:	693b      	ldr	r3, [r7, #16]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	2b1f      	cmp	r3, #31
 800cc64:	d80a      	bhi.n	800cc7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2280      	movs	r2, #128	; 0x80
 800cc6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800cc6e:	2100      	movs	r1, #0
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fcdb 	bl	800c62c <dir_sdi>
 800cc76:	4603      	mov	r3, r0
 800cc78:	75fb      	strb	r3, [r7, #23]
 800cc7a:	e048      	b.n	800cd0e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cc7c:	463b      	mov	r3, r7
 800cc7e:	4619      	mov	r1, r3
 800cc80:	6878      	ldr	r0, [r7, #4]
 800cc82:	f7ff ff3f 	bl	800cb04 <create_name>
 800cc86:	4603      	mov	r3, r0
 800cc88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d139      	bne.n	800cd04 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7ff feb0 	bl	800c9f6 <dir_find>
 800cc96:	4603      	mov	r3, r0
 800cc98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cca0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800cca2:	7dfb      	ldrb	r3, [r7, #23]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d00a      	beq.n	800ccbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800cca8:	7dfb      	ldrb	r3, [r7, #23]
 800ccaa:	2b04      	cmp	r3, #4
 800ccac:	d12c      	bne.n	800cd08 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ccae:	7afb      	ldrb	r3, [r7, #11]
 800ccb0:	f003 0304 	and.w	r3, r3, #4
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d127      	bne.n	800cd08 <follow_path+0xdc>
 800ccb8:	2305      	movs	r3, #5
 800ccba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ccbc:	e024      	b.n	800cd08 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ccbe:	7afb      	ldrb	r3, [r7, #11]
 800ccc0:	f003 0304 	and.w	r3, r3, #4
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d121      	bne.n	800cd0c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	799b      	ldrb	r3, [r3, #6]
 800cccc:	f003 0310 	and.w	r3, r3, #16
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d102      	bne.n	800ccda <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ccd4:	2305      	movs	r3, #5
 800ccd6:	75fb      	strb	r3, [r7, #23]
 800ccd8:	e019      	b.n	800cd0e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	695b      	ldr	r3, [r3, #20]
 800cce4:	68fa      	ldr	r2, [r7, #12]
 800cce6:	8992      	ldrh	r2, [r2, #12]
 800cce8:	fbb3 f0f2 	udiv	r0, r3, r2
 800ccec:	fb00 f202 	mul.w	r2, r0, r2
 800ccf0:	1a9b      	subs	r3, r3, r2
 800ccf2:	440b      	add	r3, r1
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	68f8      	ldr	r0, [r7, #12]
 800ccf8:	f7ff fe3e 	bl	800c978 <ld_clust>
 800ccfc:	4602      	mov	r2, r0
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800cd02:	e7bb      	b.n	800cc7c <follow_path+0x50>
			if (res != FR_OK) break;
 800cd04:	bf00      	nop
 800cd06:	e002      	b.n	800cd0e <follow_path+0xe2>
				break;
 800cd08:	bf00      	nop
 800cd0a:	e000      	b.n	800cd0e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800cd0c:	bf00      	nop
			}
		}
	}

	return res;
 800cd0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd10:	4618      	mov	r0, r3
 800cd12:	3718      	adds	r7, #24
 800cd14:	46bd      	mov	sp, r7
 800cd16:	bd80      	pop	{r7, pc}

0800cd18 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800cd18:	b480      	push	{r7}
 800cd1a:	b087      	sub	sp, #28
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800cd20:	f04f 33ff 	mov.w	r3, #4294967295
 800cd24:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d031      	beq.n	800cd92 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	617b      	str	r3, [r7, #20]
 800cd34:	e002      	b.n	800cd3c <get_ldnumber+0x24>
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	3301      	adds	r3, #1
 800cd3a:	617b      	str	r3, [r7, #20]
 800cd3c:	697b      	ldr	r3, [r7, #20]
 800cd3e:	781b      	ldrb	r3, [r3, #0]
 800cd40:	2b20      	cmp	r3, #32
 800cd42:	d903      	bls.n	800cd4c <get_ldnumber+0x34>
 800cd44:	697b      	ldr	r3, [r7, #20]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	2b3a      	cmp	r3, #58	; 0x3a
 800cd4a:	d1f4      	bne.n	800cd36 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	2b3a      	cmp	r3, #58	; 0x3a
 800cd52:	d11c      	bne.n	800cd8e <get_ldnumber+0x76>
			tp = *path;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	1c5a      	adds	r2, r3, #1
 800cd5e:	60fa      	str	r2, [r7, #12]
 800cd60:	781b      	ldrb	r3, [r3, #0]
 800cd62:	3b30      	subs	r3, #48	; 0x30
 800cd64:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800cd66:	68bb      	ldr	r3, [r7, #8]
 800cd68:	2b09      	cmp	r3, #9
 800cd6a:	d80e      	bhi.n	800cd8a <get_ldnumber+0x72>
 800cd6c:	68fa      	ldr	r2, [r7, #12]
 800cd6e:	697b      	ldr	r3, [r7, #20]
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d10a      	bne.n	800cd8a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800cd74:	68bb      	ldr	r3, [r7, #8]
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d107      	bne.n	800cd8a <get_ldnumber+0x72>
					vol = (int)i;
 800cd7a:	68bb      	ldr	r3, [r7, #8]
 800cd7c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800cd7e:	697b      	ldr	r3, [r7, #20]
 800cd80:	3301      	adds	r3, #1
 800cd82:	617b      	str	r3, [r7, #20]
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	697a      	ldr	r2, [r7, #20]
 800cd88:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800cd8a:	693b      	ldr	r3, [r7, #16]
 800cd8c:	e002      	b.n	800cd94 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800cd8e:	2300      	movs	r3, #0
 800cd90:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800cd92:	693b      	ldr	r3, [r7, #16]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	371c      	adds	r7, #28
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
 800cda8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2200      	movs	r2, #0
 800cdae:	70da      	strb	r2, [r3, #3]
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f04f 32ff 	mov.w	r2, #4294967295
 800cdb6:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	6878      	ldr	r0, [r7, #4]
 800cdbc:	f7ff f856 	bl	800be6c <move_window>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d001      	beq.n	800cdca <check_fs+0x2a>
 800cdc6:	2304      	movs	r3, #4
 800cdc8:	e038      	b.n	800ce3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	3334      	adds	r3, #52	; 0x34
 800cdce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	f7fe fd9a 	bl	800b90c <ld_word>
 800cdd8:	4603      	mov	r3, r0
 800cdda:	461a      	mov	r2, r3
 800cddc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800cde0:	429a      	cmp	r2, r3
 800cde2:	d001      	beq.n	800cde8 <check_fs+0x48>
 800cde4:	2303      	movs	r3, #3
 800cde6:	e029      	b.n	800ce3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdee:	2be9      	cmp	r3, #233	; 0xe9
 800cdf0:	d009      	beq.n	800ce06 <check_fs+0x66>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cdf8:	2beb      	cmp	r3, #235	; 0xeb
 800cdfa:	d11e      	bne.n	800ce3a <check_fs+0x9a>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ce02:	2b90      	cmp	r3, #144	; 0x90
 800ce04:	d119      	bne.n	800ce3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	3334      	adds	r3, #52	; 0x34
 800ce0a:	3336      	adds	r3, #54	; 0x36
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	f7fe fd95 	bl	800b93c <ld_dword>
 800ce12:	4603      	mov	r3, r0
 800ce14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ce18:	4a0a      	ldr	r2, [pc, #40]	; (800ce44 <check_fs+0xa4>)
 800ce1a:	4293      	cmp	r3, r2
 800ce1c:	d101      	bne.n	800ce22 <check_fs+0x82>
 800ce1e:	2300      	movs	r3, #0
 800ce20:	e00c      	b.n	800ce3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	3334      	adds	r3, #52	; 0x34
 800ce26:	3352      	adds	r3, #82	; 0x52
 800ce28:	4618      	mov	r0, r3
 800ce2a:	f7fe fd87 	bl	800b93c <ld_dword>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	4a05      	ldr	r2, [pc, #20]	; (800ce48 <check_fs+0xa8>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d101      	bne.n	800ce3a <check_fs+0x9a>
 800ce36:	2300      	movs	r3, #0
 800ce38:	e000      	b.n	800ce3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ce3a:	2302      	movs	r3, #2
}
 800ce3c:	4618      	mov	r0, r3
 800ce3e:	3708      	adds	r7, #8
 800ce40:	46bd      	mov	sp, r7
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	00544146 	.word	0x00544146
 800ce48:	33544146 	.word	0x33544146

0800ce4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b096      	sub	sp, #88	; 0x58
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	60f8      	str	r0, [r7, #12]
 800ce54:	60b9      	str	r1, [r7, #8]
 800ce56:	4613      	mov	r3, r2
 800ce58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	f7ff ff59 	bl	800cd18 <get_ldnumber>
 800ce66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ce68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	da01      	bge.n	800ce72 <find_volume+0x26>
 800ce6e:	230b      	movs	r3, #11
 800ce70:	e262      	b.n	800d338 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ce72:	4a9f      	ldr	r2, [pc, #636]	; (800d0f0 <find_volume+0x2a4>)
 800ce74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ce7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d101      	bne.n	800ce86 <find_volume+0x3a>
 800ce82:	230c      	movs	r3, #12
 800ce84:	e258      	b.n	800d338 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800ce86:	68bb      	ldr	r3, [r7, #8]
 800ce88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ce8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ce8c:	79fb      	ldrb	r3, [r7, #7]
 800ce8e:	f023 0301 	bic.w	r3, r3, #1
 800ce92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ce94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce96:	781b      	ldrb	r3, [r3, #0]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d01a      	beq.n	800ced2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800ce9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce9e:	785b      	ldrb	r3, [r3, #1]
 800cea0:	4618      	mov	r0, r3
 800cea2:	f7fe fc95 	bl	800b7d0 <disk_status>
 800cea6:	4603      	mov	r3, r0
 800cea8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ceac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d10c      	bne.n	800ced2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d007      	beq.n	800cece <find_volume+0x82>
 800cebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cec2:	f003 0304 	and.w	r3, r3, #4
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800ceca:	230a      	movs	r3, #10
 800cecc:	e234      	b.n	800d338 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800cece:	2300      	movs	r3, #0
 800ced0:	e232      	b.n	800d338 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ced2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ced4:	2200      	movs	r2, #0
 800ced6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ced8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ceda:	b2da      	uxtb	r2, r3
 800cedc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cede:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800cee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cee2:	785b      	ldrb	r3, [r3, #1]
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fc8d 	bl	800b804 <disk_initialize>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800cef0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cef4:	f003 0301 	and.w	r3, r3, #1
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d001      	beq.n	800cf00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800cefc:	2303      	movs	r3, #3
 800cefe:	e21b      	b.n	800d338 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800cf00:	79fb      	ldrb	r3, [r7, #7]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d007      	beq.n	800cf16 <find_volume+0xca>
 800cf06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cf0a:	f003 0304 	and.w	r3, r3, #4
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d001      	beq.n	800cf16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800cf12:	230a      	movs	r3, #10
 800cf14:	e210      	b.n	800d338 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800cf16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf18:	7858      	ldrb	r0, [r3, #1]
 800cf1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf1c:	330c      	adds	r3, #12
 800cf1e:	461a      	mov	r2, r3
 800cf20:	2102      	movs	r1, #2
 800cf22:	f7fe fcd5 	bl	800b8d0 <disk_ioctl>
 800cf26:	4603      	mov	r3, r0
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d001      	beq.n	800cf30 <find_volume+0xe4>
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	e203      	b.n	800d338 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800cf30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf32:	899b      	ldrh	r3, [r3, #12]
 800cf34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf38:	d80d      	bhi.n	800cf56 <find_volume+0x10a>
 800cf3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf3c:	899b      	ldrh	r3, [r3, #12]
 800cf3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cf42:	d308      	bcc.n	800cf56 <find_volume+0x10a>
 800cf44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf46:	899b      	ldrh	r3, [r3, #12]
 800cf48:	461a      	mov	r2, r3
 800cf4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf4c:	899b      	ldrh	r3, [r3, #12]
 800cf4e:	3b01      	subs	r3, #1
 800cf50:	4013      	ands	r3, r2
 800cf52:	2b00      	cmp	r3, #0
 800cf54:	d001      	beq.n	800cf5a <find_volume+0x10e>
 800cf56:	2301      	movs	r3, #1
 800cf58:	e1ee      	b.n	800d338 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800cf5e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cf60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cf62:	f7ff ff1d 	bl	800cda0 <check_fs>
 800cf66:	4603      	mov	r3, r0
 800cf68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800cf6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cf70:	2b02      	cmp	r3, #2
 800cf72:	d149      	bne.n	800d008 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cf74:	2300      	movs	r3, #0
 800cf76:	643b      	str	r3, [r7, #64]	; 0x40
 800cf78:	e01e      	b.n	800cfb8 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800cf7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf7c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800cf80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf82:	011b      	lsls	r3, r3, #4
 800cf84:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800cf88:	4413      	add	r3, r2
 800cf8a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf8e:	3304      	adds	r3, #4
 800cf90:	781b      	ldrb	r3, [r3, #0]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d006      	beq.n	800cfa4 <find_volume+0x158>
 800cf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf98:	3308      	adds	r3, #8
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fe fcce 	bl	800b93c <ld_dword>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	e000      	b.n	800cfa6 <find_volume+0x15a>
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfa8:	009b      	lsls	r3, r3, #2
 800cfaa:	3358      	adds	r3, #88	; 0x58
 800cfac:	443b      	add	r3, r7
 800cfae:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800cfb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfb4:	3301      	adds	r3, #1
 800cfb6:	643b      	str	r3, [r7, #64]	; 0x40
 800cfb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfba:	2b03      	cmp	r3, #3
 800cfbc:	d9dd      	bls.n	800cf7a <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800cfc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d002      	beq.n	800cfce <find_volume+0x182>
 800cfc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfca:	3b01      	subs	r3, #1
 800cfcc:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800cfce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	3358      	adds	r3, #88	; 0x58
 800cfd4:	443b      	add	r3, r7
 800cfd6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800cfda:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800cfdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d005      	beq.n	800cfee <find_volume+0x1a2>
 800cfe2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800cfe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800cfe6:	f7ff fedb 	bl	800cda0 <check_fs>
 800cfea:	4603      	mov	r3, r0
 800cfec:	e000      	b.n	800cff0 <find_volume+0x1a4>
 800cfee:	2303      	movs	r3, #3
 800cff0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800cff4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800cff8:	2b01      	cmp	r3, #1
 800cffa:	d905      	bls.n	800d008 <find_volume+0x1bc>
 800cffc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cffe:	3301      	adds	r3, #1
 800d000:	643b      	str	r3, [r7, #64]	; 0x40
 800d002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d004:	2b03      	cmp	r3, #3
 800d006:	d9e2      	bls.n	800cfce <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d00c:	2b04      	cmp	r3, #4
 800d00e:	d101      	bne.n	800d014 <find_volume+0x1c8>
 800d010:	2301      	movs	r3, #1
 800d012:	e191      	b.n	800d338 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d014:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d018:	2b01      	cmp	r3, #1
 800d01a:	d901      	bls.n	800d020 <find_volume+0x1d4>
 800d01c:	230d      	movs	r3, #13
 800d01e:	e18b      	b.n	800d338 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d022:	3334      	adds	r3, #52	; 0x34
 800d024:	330b      	adds	r3, #11
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe fc70 	bl	800b90c <ld_word>
 800d02c:	4603      	mov	r3, r0
 800d02e:	461a      	mov	r2, r3
 800d030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d032:	899b      	ldrh	r3, [r3, #12]
 800d034:	429a      	cmp	r2, r3
 800d036:	d001      	beq.n	800d03c <find_volume+0x1f0>
 800d038:	230d      	movs	r3, #13
 800d03a:	e17d      	b.n	800d338 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d03e:	3334      	adds	r3, #52	; 0x34
 800d040:	3316      	adds	r3, #22
 800d042:	4618      	mov	r0, r3
 800d044:	f7fe fc62 	bl	800b90c <ld_word>
 800d048:	4603      	mov	r3, r0
 800d04a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d04c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d106      	bne.n	800d060 <find_volume+0x214>
 800d052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d054:	3334      	adds	r3, #52	; 0x34
 800d056:	3324      	adds	r3, #36	; 0x24
 800d058:	4618      	mov	r0, r3
 800d05a:	f7fe fc6f 	bl	800b93c <ld_dword>
 800d05e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800d060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d062:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d064:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d068:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800d06c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d072:	789b      	ldrb	r3, [r3, #2]
 800d074:	2b01      	cmp	r3, #1
 800d076:	d005      	beq.n	800d084 <find_volume+0x238>
 800d078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d07a:	789b      	ldrb	r3, [r3, #2]
 800d07c:	2b02      	cmp	r3, #2
 800d07e:	d001      	beq.n	800d084 <find_volume+0x238>
 800d080:	230d      	movs	r3, #13
 800d082:	e159      	b.n	800d338 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d086:	789b      	ldrb	r3, [r3, #2]
 800d088:	461a      	mov	r2, r3
 800d08a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d08c:	fb02 f303 	mul.w	r3, r2, r3
 800d090:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d094:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d098:	b29a      	uxth	r2, r3
 800d09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d09c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a0:	895b      	ldrh	r3, [r3, #10]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d008      	beq.n	800d0b8 <find_volume+0x26c>
 800d0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0a8:	895b      	ldrh	r3, [r3, #10]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ae:	895b      	ldrh	r3, [r3, #10]
 800d0b0:	3b01      	subs	r3, #1
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d001      	beq.n	800d0bc <find_volume+0x270>
 800d0b8:	230d      	movs	r3, #13
 800d0ba:	e13d      	b.n	800d338 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0be:	3334      	adds	r3, #52	; 0x34
 800d0c0:	3311      	adds	r3, #17
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fc22 	bl	800b90c <ld_word>
 800d0c8:	4603      	mov	r3, r0
 800d0ca:	461a      	mov	r2, r3
 800d0cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d0d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0d2:	891b      	ldrh	r3, [r3, #8]
 800d0d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d0d6:	8992      	ldrh	r2, [r2, #12]
 800d0d8:	0952      	lsrs	r2, r2, #5
 800d0da:	b292      	uxth	r2, r2
 800d0dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800d0e0:	fb01 f202 	mul.w	r2, r1, r2
 800d0e4:	1a9b      	subs	r3, r3, r2
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <find_volume+0x2a8>
 800d0ec:	230d      	movs	r3, #13
 800d0ee:	e123      	b.n	800d338 <find_volume+0x4ec>
 800d0f0:	20004890 	.word	0x20004890

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d0f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d0f6:	3334      	adds	r3, #52	; 0x34
 800d0f8:	3313      	adds	r3, #19
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	f7fe fc06 	bl	800b90c <ld_word>
 800d100:	4603      	mov	r3, r0
 800d102:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d106:	2b00      	cmp	r3, #0
 800d108:	d106      	bne.n	800d118 <find_volume+0x2cc>
 800d10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d10c:	3334      	adds	r3, #52	; 0x34
 800d10e:	3320      	adds	r3, #32
 800d110:	4618      	mov	r0, r3
 800d112:	f7fe fc13 	bl	800b93c <ld_dword>
 800d116:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d11a:	3334      	adds	r3, #52	; 0x34
 800d11c:	330e      	adds	r3, #14
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fbf4 	bl	800b90c <ld_word>
 800d124:	4603      	mov	r3, r0
 800d126:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d128:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d101      	bne.n	800d132 <find_volume+0x2e6>
 800d12e:	230d      	movs	r3, #13
 800d130:	e102      	b.n	800d338 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d132:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d136:	4413      	add	r3, r2
 800d138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d13a:	8911      	ldrh	r1, [r2, #8]
 800d13c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d13e:	8992      	ldrh	r2, [r2, #12]
 800d140:	0952      	lsrs	r2, r2, #5
 800d142:	b292      	uxth	r2, r2
 800d144:	fbb1 f2f2 	udiv	r2, r1, r2
 800d148:	b292      	uxth	r2, r2
 800d14a:	4413      	add	r3, r2
 800d14c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d14e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d152:	429a      	cmp	r2, r3
 800d154:	d201      	bcs.n	800d15a <find_volume+0x30e>
 800d156:	230d      	movs	r3, #13
 800d158:	e0ee      	b.n	800d338 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d15a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d15e:	1ad3      	subs	r3, r2, r3
 800d160:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d162:	8952      	ldrh	r2, [r2, #10]
 800d164:	fbb3 f3f2 	udiv	r3, r3, r2
 800d168:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d101      	bne.n	800d174 <find_volume+0x328>
 800d170:	230d      	movs	r3, #13
 800d172:	e0e1      	b.n	800d338 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800d174:	2303      	movs	r3, #3
 800d176:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d17c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800d180:	4293      	cmp	r3, r2
 800d182:	d802      	bhi.n	800d18a <find_volume+0x33e>
 800d184:	2302      	movs	r3, #2
 800d186:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18c:	f640 72f5 	movw	r2, #4085	; 0xff5
 800d190:	4293      	cmp	r3, r2
 800d192:	d802      	bhi.n	800d19a <find_volume+0x34e>
 800d194:	2301      	movs	r3, #1
 800d196:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d19a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19c:	1c9a      	adds	r2, r3, #2
 800d19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a0:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800d1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1a6:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d1a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800d1aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d1ac:	441a      	add	r2, r3
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d1b2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b6:	441a      	add	r2, r3
 800d1b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1ba:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800d1bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d1c0:	2b03      	cmp	r3, #3
 800d1c2:	d11e      	bne.n	800d202 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d1c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c6:	3334      	adds	r3, #52	; 0x34
 800d1c8:	332a      	adds	r3, #42	; 0x2a
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7fe fb9e 	bl	800b90c <ld_word>
 800d1d0:	4603      	mov	r3, r0
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d001      	beq.n	800d1da <find_volume+0x38e>
 800d1d6:	230d      	movs	r3, #13
 800d1d8:	e0ae      	b.n	800d338 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1dc:	891b      	ldrh	r3, [r3, #8]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d001      	beq.n	800d1e6 <find_volume+0x39a>
 800d1e2:	230d      	movs	r3, #13
 800d1e4:	e0a8      	b.n	800d338 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d1e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1e8:	3334      	adds	r3, #52	; 0x34
 800d1ea:	332c      	adds	r3, #44	; 0x2c
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7fe fba5 	bl	800b93c <ld_dword>
 800d1f2:	4602      	mov	r2, r0
 800d1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1f6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d1f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	009b      	lsls	r3, r3, #2
 800d1fe:	647b      	str	r3, [r7, #68]	; 0x44
 800d200:	e01f      	b.n	800d242 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d204:	891b      	ldrh	r3, [r3, #8]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d101      	bne.n	800d20e <find_volume+0x3c2>
 800d20a:	230d      	movs	r3, #13
 800d20c:	e094      	b.n	800d338 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d210:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d212:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d214:	441a      	add	r2, r3
 800d216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d218:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d21a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d103      	bne.n	800d22a <find_volume+0x3de>
 800d222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d224:	699b      	ldr	r3, [r3, #24]
 800d226:	005b      	lsls	r3, r3, #1
 800d228:	e00a      	b.n	800d240 <find_volume+0x3f4>
 800d22a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d22c:	699a      	ldr	r2, [r3, #24]
 800d22e:	4613      	mov	r3, r2
 800d230:	005b      	lsls	r3, r3, #1
 800d232:	4413      	add	r3, r2
 800d234:	085a      	lsrs	r2, r3, #1
 800d236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d238:	699b      	ldr	r3, [r3, #24]
 800d23a:	f003 0301 	and.w	r3, r3, #1
 800d23e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d240:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d244:	69da      	ldr	r2, [r3, #28]
 800d246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d248:	899b      	ldrh	r3, [r3, #12]
 800d24a:	4619      	mov	r1, r3
 800d24c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d24e:	440b      	add	r3, r1
 800d250:	3b01      	subs	r3, #1
 800d252:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d254:	8989      	ldrh	r1, [r1, #12]
 800d256:	fbb3 f3f1 	udiv	r3, r3, r1
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d201      	bcs.n	800d262 <find_volume+0x416>
 800d25e:	230d      	movs	r3, #13
 800d260:	e06a      	b.n	800d338 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d264:	f04f 32ff 	mov.w	r2, #4294967295
 800d268:	615a      	str	r2, [r3, #20]
 800d26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d26c:	695a      	ldr	r2, [r3, #20]
 800d26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d270:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800d272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d274:	2280      	movs	r2, #128	; 0x80
 800d276:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800d27c:	2b03      	cmp	r3, #3
 800d27e:	d149      	bne.n	800d314 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d282:	3334      	adds	r3, #52	; 0x34
 800d284:	3330      	adds	r3, #48	; 0x30
 800d286:	4618      	mov	r0, r3
 800d288:	f7fe fb40 	bl	800b90c <ld_word>
 800d28c:	4603      	mov	r3, r0
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d140      	bne.n	800d314 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d292:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d294:	3301      	adds	r3, #1
 800d296:	4619      	mov	r1, r3
 800d298:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d29a:	f7fe fde7 	bl	800be6c <move_window>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d137      	bne.n	800d314 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800d2a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d2aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ac:	3334      	adds	r3, #52	; 0x34
 800d2ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fb2a 	bl	800b90c <ld_word>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d2c0:	429a      	cmp	r2, r3
 800d2c2:	d127      	bne.n	800d314 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d2c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2c6:	3334      	adds	r3, #52	; 0x34
 800d2c8:	4618      	mov	r0, r3
 800d2ca:	f7fe fb37 	bl	800b93c <ld_dword>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	4a1b      	ldr	r2, [pc, #108]	; (800d340 <find_volume+0x4f4>)
 800d2d2:	4293      	cmp	r3, r2
 800d2d4:	d11e      	bne.n	800d314 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d2d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2d8:	3334      	adds	r3, #52	; 0x34
 800d2da:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800d2de:	4618      	mov	r0, r3
 800d2e0:	f7fe fb2c 	bl	800b93c <ld_dword>
 800d2e4:	4603      	mov	r3, r0
 800d2e6:	4a17      	ldr	r2, [pc, #92]	; (800d344 <find_volume+0x4f8>)
 800d2e8:	4293      	cmp	r3, r2
 800d2ea:	d113      	bne.n	800d314 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d2ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ee:	3334      	adds	r3, #52	; 0x34
 800d2f0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800d2f4:	4618      	mov	r0, r3
 800d2f6:	f7fe fb21 	bl	800b93c <ld_dword>
 800d2fa:	4602      	mov	r2, r0
 800d2fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2fe:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d302:	3334      	adds	r3, #52	; 0x34
 800d304:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800d308:	4618      	mov	r0, r3
 800d30a:	f7fe fb17 	bl	800b93c <ld_dword>
 800d30e:	4602      	mov	r2, r0
 800d310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d312:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d316:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800d31a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d31c:	4b0a      	ldr	r3, [pc, #40]	; (800d348 <find_volume+0x4fc>)
 800d31e:	881b      	ldrh	r3, [r3, #0]
 800d320:	3301      	adds	r3, #1
 800d322:	b29a      	uxth	r2, r3
 800d324:	4b08      	ldr	r3, [pc, #32]	; (800d348 <find_volume+0x4fc>)
 800d326:	801a      	strh	r2, [r3, #0]
 800d328:	4b07      	ldr	r3, [pc, #28]	; (800d348 <find_volume+0x4fc>)
 800d32a:	881a      	ldrh	r2, [r3, #0]
 800d32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d32e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d330:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d332:	f7fe fd33 	bl	800bd9c <clear_lock>
#endif
	return FR_OK;
 800d336:	2300      	movs	r3, #0
}
 800d338:	4618      	mov	r0, r3
 800d33a:	3758      	adds	r7, #88	; 0x58
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}
 800d340:	41615252 	.word	0x41615252
 800d344:	61417272 	.word	0x61417272
 800d348:	20004894 	.word	0x20004894

0800d34c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b084      	sub	sp, #16
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
 800d354:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d356:	2309      	movs	r3, #9
 800d358:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d01c      	beq.n	800d39a <validate+0x4e>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d018      	beq.n	800d39a <validate+0x4e>
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	781b      	ldrb	r3, [r3, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d013      	beq.n	800d39a <validate+0x4e>
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	889a      	ldrh	r2, [r3, #4]
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	88db      	ldrh	r3, [r3, #6]
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d10c      	bne.n	800d39a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	785b      	ldrb	r3, [r3, #1]
 800d386:	4618      	mov	r0, r3
 800d388:	f7fe fa22 	bl	800b7d0 <disk_status>
 800d38c:	4603      	mov	r3, r0
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	2b00      	cmp	r3, #0
 800d394:	d101      	bne.n	800d39a <validate+0x4e>
			res = FR_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d39a:	7bfb      	ldrb	r3, [r7, #15]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d102      	bne.n	800d3a6 <validate+0x5a>
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	e000      	b.n	800d3a8 <validate+0x5c>
 800d3a6:	2300      	movs	r3, #0
 800d3a8:	683a      	ldr	r2, [r7, #0]
 800d3aa:	6013      	str	r3, [r2, #0]
	return res;
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
	...

0800d3b8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d3b8:	b580      	push	{r7, lr}
 800d3ba:	b088      	sub	sp, #32
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	60f8      	str	r0, [r7, #12]
 800d3c0:	60b9      	str	r1, [r7, #8]
 800d3c2:	4613      	mov	r3, r2
 800d3c4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d3c6:	68bb      	ldr	r3, [r7, #8]
 800d3c8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d3ca:	f107 0310 	add.w	r3, r7, #16
 800d3ce:	4618      	mov	r0, r3
 800d3d0:	f7ff fca2 	bl	800cd18 <get_ldnumber>
 800d3d4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3d6:	69fb      	ldr	r3, [r7, #28]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	da01      	bge.n	800d3e0 <f_mount+0x28>
 800d3dc:	230b      	movs	r3, #11
 800d3de:	e02b      	b.n	800d438 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d3e0:	4a17      	ldr	r2, [pc, #92]	; (800d440 <f_mount+0x88>)
 800d3e2:	69fb      	ldr	r3, [r7, #28]
 800d3e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3e8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d005      	beq.n	800d3fc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d3f0:	69b8      	ldr	r0, [r7, #24]
 800d3f2:	f7fe fcd3 	bl	800bd9c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d3f6:	69bb      	ldr	r3, [r7, #24]
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d002      	beq.n	800d408 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	490d      	ldr	r1, [pc, #52]	; (800d440 <f_mount+0x88>)
 800d40c:	69fb      	ldr	r3, [r7, #28]
 800d40e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d002      	beq.n	800d41e <f_mount+0x66>
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d001      	beq.n	800d422 <f_mount+0x6a>
 800d41e:	2300      	movs	r3, #0
 800d420:	e00a      	b.n	800d438 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d422:	f107 010c 	add.w	r1, r7, #12
 800d426:	f107 0308 	add.w	r3, r7, #8
 800d42a:	2200      	movs	r2, #0
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fd0d 	bl	800ce4c <find_volume>
 800d432:	4603      	mov	r3, r0
 800d434:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d436:	7dfb      	ldrb	r3, [r7, #23]
}
 800d438:	4618      	mov	r0, r3
 800d43a:	3720      	adds	r7, #32
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}
 800d440:	20004890 	.word	0x20004890

0800d444 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b098      	sub	sp, #96	; 0x60
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	4613      	mov	r3, r2
 800d450:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <f_open+0x18>
 800d458:	2309      	movs	r3, #9
 800d45a:	e1bb      	b.n	800d7d4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800d45c:	79fb      	ldrb	r3, [r7, #7]
 800d45e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d462:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800d464:	79fa      	ldrb	r2, [r7, #7]
 800d466:	f107 0110 	add.w	r1, r7, #16
 800d46a:	f107 0308 	add.w	r3, r7, #8
 800d46e:	4618      	mov	r0, r3
 800d470:	f7ff fcec 	bl	800ce4c <find_volume>
 800d474:	4603      	mov	r3, r0
 800d476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800d47a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d47e:	2b00      	cmp	r3, #0
 800d480:	f040 819f 	bne.w	800d7c2 <f_open+0x37e>
		dj.obj.fs = fs;
 800d484:	693b      	ldr	r3, [r7, #16]
 800d486:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800d488:	68ba      	ldr	r2, [r7, #8]
 800d48a:	f107 0314 	add.w	r3, r7, #20
 800d48e:	4611      	mov	r1, r2
 800d490:	4618      	mov	r0, r3
 800d492:	f7ff fbcb 	bl	800cc2c <follow_path>
 800d496:	4603      	mov	r3, r0
 800d498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d49c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d11a      	bne.n	800d4da <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d4a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d4a8:	b25b      	sxtb	r3, r3
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	da03      	bge.n	800d4b6 <f_open+0x72>
				res = FR_INVALID_NAME;
 800d4ae:	2306      	movs	r3, #6
 800d4b0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4b4:	e011      	b.n	800d4da <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d4b6:	79fb      	ldrb	r3, [r7, #7]
 800d4b8:	f023 0301 	bic.w	r3, r3, #1
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	bf14      	ite	ne
 800d4c0:	2301      	movne	r3, #1
 800d4c2:	2300      	moveq	r3, #0
 800d4c4:	b2db      	uxtb	r3, r3
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	f107 0314 	add.w	r3, r7, #20
 800d4cc:	4611      	mov	r1, r2
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f7fe fb1c 	bl	800bb0c <chk_lock>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d4da:	79fb      	ldrb	r3, [r7, #7]
 800d4dc:	f003 031c 	and.w	r3, r3, #28
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d07f      	beq.n	800d5e4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800d4e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d017      	beq.n	800d51c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d4ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4f0:	2b04      	cmp	r3, #4
 800d4f2:	d10e      	bne.n	800d512 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d4f4:	f7fe fb66 	bl	800bbc4 <enq_lock>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d006      	beq.n	800d50c <f_open+0xc8>
 800d4fe:	f107 0314 	add.w	r3, r7, #20
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff facc 	bl	800caa0 <dir_register>
 800d508:	4603      	mov	r3, r0
 800d50a:	e000      	b.n	800d50e <f_open+0xca>
 800d50c:	2312      	movs	r3, #18
 800d50e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	f043 0308 	orr.w	r3, r3, #8
 800d518:	71fb      	strb	r3, [r7, #7]
 800d51a:	e010      	b.n	800d53e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d51c:	7ebb      	ldrb	r3, [r7, #26]
 800d51e:	f003 0311 	and.w	r3, r3, #17
 800d522:	2b00      	cmp	r3, #0
 800d524:	d003      	beq.n	800d52e <f_open+0xea>
					res = FR_DENIED;
 800d526:	2307      	movs	r3, #7
 800d528:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d52c:	e007      	b.n	800d53e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d52e:	79fb      	ldrb	r3, [r7, #7]
 800d530:	f003 0304 	and.w	r3, r3, #4
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <f_open+0xfa>
 800d538:	2308      	movs	r3, #8
 800d53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d53e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d542:	2b00      	cmp	r3, #0
 800d544:	d168      	bne.n	800d618 <f_open+0x1d4>
 800d546:	79fb      	ldrb	r3, [r7, #7]
 800d548:	f003 0308 	and.w	r3, r3, #8
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d063      	beq.n	800d618 <f_open+0x1d4>
				dw = GET_FATTIME();
 800d550:	f7fd ff18 	bl	800b384 <get_fattime>
 800d554:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d556:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d558:	330e      	adds	r3, #14
 800d55a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d55c:	4618      	mov	r0, r3
 800d55e:	f7fe fa2b 	bl	800b9b8 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d564:	3316      	adds	r3, #22
 800d566:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d568:	4618      	mov	r0, r3
 800d56a:	f7fe fa25 	bl	800b9b8 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d570:	330b      	adds	r3, #11
 800d572:	2220      	movs	r2, #32
 800d574:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d57a:	4611      	mov	r1, r2
 800d57c:	4618      	mov	r0, r3
 800d57e:	f7ff f9fb 	bl	800c978 <ld_clust>
 800d582:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800d588:	2200      	movs	r2, #0
 800d58a:	4618      	mov	r0, r3
 800d58c:	f7ff fa13 	bl	800c9b6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d592:	331c      	adds	r3, #28
 800d594:	2100      	movs	r1, #0
 800d596:	4618      	mov	r0, r3
 800d598:	f7fe fa0e 	bl	800b9b8 <st_dword>
					fs->wflag = 1;
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	2201      	movs	r2, #1
 800d5a0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d5a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d037      	beq.n	800d618 <f_open+0x1d4>
						dw = fs->winsect;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5ac:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800d5ae:	f107 0314 	add.w	r3, r7, #20
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fe ff03 	bl	800c3c2 <remove_chain>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800d5c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d126      	bne.n	800d618 <f_open+0x1d4>
							res = move_window(fs, dw);
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d5ce:	4618      	mov	r0, r3
 800d5d0:	f7fe fc4c 	bl	800be6c <move_window>
 800d5d4:	4603      	mov	r3, r0
 800d5d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d5da:	693b      	ldr	r3, [r7, #16]
 800d5dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d5de:	3a01      	subs	r2, #1
 800d5e0:	611a      	str	r2, [r3, #16]
 800d5e2:	e019      	b.n	800d618 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d5e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d115      	bne.n	800d618 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d5ec:	7ebb      	ldrb	r3, [r7, #26]
 800d5ee:	f003 0310 	and.w	r3, r3, #16
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d003      	beq.n	800d5fe <f_open+0x1ba>
					res = FR_NO_FILE;
 800d5f6:	2304      	movs	r3, #4
 800d5f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5fc:	e00c      	b.n	800d618 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d5fe:	79fb      	ldrb	r3, [r7, #7]
 800d600:	f003 0302 	and.w	r3, r3, #2
 800d604:	2b00      	cmp	r3, #0
 800d606:	d007      	beq.n	800d618 <f_open+0x1d4>
 800d608:	7ebb      	ldrb	r3, [r7, #26]
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d002      	beq.n	800d618 <f_open+0x1d4>
						res = FR_DENIED;
 800d612:	2307      	movs	r3, #7
 800d614:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d618:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d128      	bne.n	800d672 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d620:	79fb      	ldrb	r3, [r7, #7]
 800d622:	f003 0308 	and.w	r3, r3, #8
 800d626:	2b00      	cmp	r3, #0
 800d628:	d003      	beq.n	800d632 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800d62a:	79fb      	ldrb	r3, [r7, #7]
 800d62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d630:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800d63a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d640:	79fb      	ldrb	r3, [r7, #7]
 800d642:	f023 0301 	bic.w	r3, r3, #1
 800d646:	2b00      	cmp	r3, #0
 800d648:	bf14      	ite	ne
 800d64a:	2301      	movne	r3, #1
 800d64c:	2300      	moveq	r3, #0
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	461a      	mov	r2, r3
 800d652:	f107 0314 	add.w	r3, r7, #20
 800d656:	4611      	mov	r1, r2
 800d658:	4618      	mov	r0, r3
 800d65a:	f7fe fad5 	bl	800bc08 <inc_lock>
 800d65e:	4602      	mov	r2, r0
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	691b      	ldr	r3, [r3, #16]
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d102      	bne.n	800d672 <f_open+0x22e>
 800d66c:	2302      	movs	r3, #2
 800d66e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d672:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d676:	2b00      	cmp	r3, #0
 800d678:	f040 80a3 	bne.w	800d7c2 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d680:	4611      	mov	r1, r2
 800d682:	4618      	mov	r0, r3
 800d684:	f7ff f978 	bl	800c978 <ld_clust>
 800d688:	4602      	mov	r2, r0
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d68e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d690:	331c      	adds	r3, #28
 800d692:	4618      	mov	r0, r3
 800d694:	f7fe f952 	bl	800b93c <ld_dword>
 800d698:	4602      	mov	r2, r0
 800d69a:	68fb      	ldr	r3, [r7, #12]
 800d69c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d6a4:	693a      	ldr	r2, [r7, #16]
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	88da      	ldrh	r2, [r3, #6]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	79fa      	ldrb	r2, [r7, #7]
 800d6b6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3330      	adds	r3, #48	; 0x30
 800d6ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d6d2:	2100      	movs	r1, #0
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fe f9bc 	bl	800ba52 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	f003 0320 	and.w	r3, r3, #32
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d06e      	beq.n	800d7c2 <f_open+0x37e>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	68db      	ldr	r3, [r3, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d06a      	beq.n	800d7c2 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	68da      	ldr	r2, [r3, #12]
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d6f4:	693b      	ldr	r3, [r7, #16]
 800d6f6:	895b      	ldrh	r3, [r3, #10]
 800d6f8:	461a      	mov	r2, r3
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	899b      	ldrh	r3, [r3, #12]
 800d6fe:	fb02 f303 	mul.w	r3, r2, r3
 800d702:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	689b      	ldr	r3, [r3, #8]
 800d708:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	68db      	ldr	r3, [r3, #12]
 800d70e:	657b      	str	r3, [r7, #84]	; 0x54
 800d710:	e016      	b.n	800d740 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d716:	4618      	mov	r0, r3
 800d718:	f7fe fc65 	bl	800bfe6 <get_fat>
 800d71c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800d71e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d720:	2b01      	cmp	r3, #1
 800d722:	d802      	bhi.n	800d72a <f_open+0x2e6>
 800d724:	2302      	movs	r3, #2
 800d726:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d72a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d72c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d730:	d102      	bne.n	800d738 <f_open+0x2f4>
 800d732:	2301      	movs	r3, #1
 800d734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d73c:	1ad3      	subs	r3, r2, r3
 800d73e:	657b      	str	r3, [r7, #84]	; 0x54
 800d740:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d744:	2b00      	cmp	r3, #0
 800d746:	d103      	bne.n	800d750 <f_open+0x30c>
 800d748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d74a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d74c:	429a      	cmp	r2, r3
 800d74e:	d8e0      	bhi.n	800d712 <f_open+0x2ce>
				}
				fp->clust = clst;
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d754:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d131      	bne.n	800d7c2 <f_open+0x37e>
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	899b      	ldrh	r3, [r3, #12]
 800d762:	461a      	mov	r2, r3
 800d764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d766:	fbb3 f1f2 	udiv	r1, r3, r2
 800d76a:	fb01 f202 	mul.w	r2, r1, r2
 800d76e:	1a9b      	subs	r3, r3, r2
 800d770:	2b00      	cmp	r3, #0
 800d772:	d026      	beq.n	800d7c2 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d778:	4618      	mov	r0, r3
 800d77a:	f7fe fc15 	bl	800bfa8 <clust2sect>
 800d77e:	6478      	str	r0, [r7, #68]	; 0x44
 800d780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d782:	2b00      	cmp	r3, #0
 800d784:	d103      	bne.n	800d78e <f_open+0x34a>
						res = FR_INT_ERR;
 800d786:	2302      	movs	r3, #2
 800d788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d78c:	e019      	b.n	800d7c2 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d78e:	693b      	ldr	r3, [r7, #16]
 800d790:	899b      	ldrh	r3, [r3, #12]
 800d792:	461a      	mov	r2, r3
 800d794:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d796:	fbb3 f2f2 	udiv	r2, r3, r2
 800d79a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d79c:	441a      	add	r2, r3
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	7858      	ldrb	r0, [r3, #1]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6a1a      	ldr	r2, [r3, #32]
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	f7fe f84d 	bl	800b850 <disk_read>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <f_open+0x37e>
 800d7bc:	2301      	movs	r3, #1
 800d7be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d7c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d002      	beq.n	800d7d0 <f_open+0x38c>
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d7d0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	3760      	adds	r7, #96	; 0x60
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bd80      	pop	{r7, pc}

0800d7dc <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b08c      	sub	sp, #48	; 0x30
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]
 800d7e8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	2200      	movs	r2, #0
 800d7f2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	f107 0210 	add.w	r2, r7, #16
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7ff fda5 	bl	800d34c <validate>
 800d802:	4603      	mov	r3, r0
 800d804:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d808:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d107      	bne.n	800d820 <f_write+0x44>
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	7d5b      	ldrb	r3, [r3, #21]
 800d814:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d002      	beq.n	800d826 <f_write+0x4a>
 800d820:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d824:	e16a      	b.n	800dafc <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	7d1b      	ldrb	r3, [r3, #20]
 800d82a:	f003 0302 	and.w	r3, r3, #2
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <f_write+0x5a>
 800d832:	2307      	movs	r3, #7
 800d834:	e162      	b.n	800dafc <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d836:	68fb      	ldr	r3, [r7, #12]
 800d838:	699a      	ldr	r2, [r3, #24]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	441a      	add	r2, r3
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	699b      	ldr	r3, [r3, #24]
 800d842:	429a      	cmp	r2, r3
 800d844:	f080 814c 	bcs.w	800dae0 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	699b      	ldr	r3, [r3, #24]
 800d84c:	43db      	mvns	r3, r3
 800d84e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d850:	e146      	b.n	800dae0 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	699b      	ldr	r3, [r3, #24]
 800d856:	693a      	ldr	r2, [r7, #16]
 800d858:	8992      	ldrh	r2, [r2, #12]
 800d85a:	fbb3 f1f2 	udiv	r1, r3, r2
 800d85e:	fb01 f202 	mul.w	r2, r1, r2
 800d862:	1a9b      	subs	r3, r3, r2
 800d864:	2b00      	cmp	r3, #0
 800d866:	f040 80f1 	bne.w	800da4c <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	699b      	ldr	r3, [r3, #24]
 800d86e:	693a      	ldr	r2, [r7, #16]
 800d870:	8992      	ldrh	r2, [r2, #12]
 800d872:	fbb3 f3f2 	udiv	r3, r3, r2
 800d876:	693a      	ldr	r2, [r7, #16]
 800d878:	8952      	ldrh	r2, [r2, #10]
 800d87a:	3a01      	subs	r2, #1
 800d87c:	4013      	ands	r3, r2
 800d87e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d880:	69bb      	ldr	r3, [r7, #24]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d143      	bne.n	800d90e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	699b      	ldr	r3, [r3, #24]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d10c      	bne.n	800d8a8 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d896:	2b00      	cmp	r3, #0
 800d898:	d11a      	bne.n	800d8d0 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	2100      	movs	r1, #0
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fe fdf4 	bl	800c48c <create_chain>
 800d8a4:	62b8      	str	r0, [r7, #40]	; 0x28
 800d8a6:	e013      	b.n	800d8d0 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d007      	beq.n	800d8c0 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	699b      	ldr	r3, [r3, #24]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	68f8      	ldr	r0, [r7, #12]
 800d8b8:	f7fe fe80 	bl	800c5bc <clmt_clust>
 800d8bc:	62b8      	str	r0, [r7, #40]	; 0x28
 800d8be:	e007      	b.n	800d8d0 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	69db      	ldr	r3, [r3, #28]
 800d8c6:	4619      	mov	r1, r3
 800d8c8:	4610      	mov	r0, r2
 800d8ca:	f7fe fddf 	bl	800c48c <create_chain>
 800d8ce:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d8d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	f000 8109 	beq.w	800daea <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d104      	bne.n	800d8e8 <f_write+0x10c>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	755a      	strb	r2, [r3, #21]
 800d8e4:	2302      	movs	r3, #2
 800d8e6:	e109      	b.n	800dafc <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d8e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8ee:	d104      	bne.n	800d8fa <f_write+0x11e>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	755a      	strb	r2, [r3, #21]
 800d8f6:	2301      	movs	r3, #1
 800d8f8:	e100      	b.n	800dafc <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8fe:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	689b      	ldr	r3, [r3, #8]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d102      	bne.n	800d90e <f_write+0x132>
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d90c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	7d1b      	ldrb	r3, [r3, #20]
 800d912:	b25b      	sxtb	r3, r3
 800d914:	2b00      	cmp	r3, #0
 800d916:	da18      	bge.n	800d94a <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d918:	693b      	ldr	r3, [r7, #16]
 800d91a:	7858      	ldrb	r0, [r3, #1]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	6a1a      	ldr	r2, [r3, #32]
 800d926:	2301      	movs	r3, #1
 800d928:	f7fd ffb2 	bl	800b890 <disk_write>
 800d92c:	4603      	mov	r3, r0
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d004      	beq.n	800d93c <f_write+0x160>
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	2201      	movs	r2, #1
 800d936:	755a      	strb	r2, [r3, #21]
 800d938:	2301      	movs	r3, #1
 800d93a:	e0df      	b.n	800dafc <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	7d1b      	ldrb	r3, [r3, #20]
 800d940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d944:	b2da      	uxtb	r2, r3
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d94a:	693a      	ldr	r2, [r7, #16]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	69db      	ldr	r3, [r3, #28]
 800d950:	4619      	mov	r1, r3
 800d952:	4610      	mov	r0, r2
 800d954:	f7fe fb28 	bl	800bfa8 <clust2sect>
 800d958:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d95a:	697b      	ldr	r3, [r7, #20]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d104      	bne.n	800d96a <f_write+0x18e>
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	2202      	movs	r2, #2
 800d964:	755a      	strb	r2, [r3, #21]
 800d966:	2302      	movs	r3, #2
 800d968:	e0c8      	b.n	800dafc <f_write+0x320>
			sect += csect;
 800d96a:	697a      	ldr	r2, [r7, #20]
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	4413      	add	r3, r2
 800d970:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	899b      	ldrh	r3, [r3, #12]
 800d976:	461a      	mov	r2, r3
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d97e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d980:	6a3b      	ldr	r3, [r7, #32]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d043      	beq.n	800da0e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	6a3b      	ldr	r3, [r7, #32]
 800d98a:	4413      	add	r3, r2
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	8952      	ldrh	r2, [r2, #10]
 800d990:	4293      	cmp	r3, r2
 800d992:	d905      	bls.n	800d9a0 <f_write+0x1c4>
					cc = fs->csize - csect;
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	895b      	ldrh	r3, [r3, #10]
 800d998:	461a      	mov	r2, r3
 800d99a:	69bb      	ldr	r3, [r7, #24]
 800d99c:	1ad3      	subs	r3, r2, r3
 800d99e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d9a0:	693b      	ldr	r3, [r7, #16]
 800d9a2:	7858      	ldrb	r0, [r3, #1]
 800d9a4:	6a3b      	ldr	r3, [r7, #32]
 800d9a6:	697a      	ldr	r2, [r7, #20]
 800d9a8:	69f9      	ldr	r1, [r7, #28]
 800d9aa:	f7fd ff71 	bl	800b890 <disk_write>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d004      	beq.n	800d9be <f_write+0x1e2>
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2201      	movs	r2, #1
 800d9b8:	755a      	strb	r2, [r3, #21]
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e09e      	b.n	800dafc <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	6a1a      	ldr	r2, [r3, #32]
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	1ad3      	subs	r3, r2, r3
 800d9c6:	6a3a      	ldr	r2, [r7, #32]
 800d9c8:	429a      	cmp	r2, r3
 800d9ca:	d918      	bls.n	800d9fe <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	6a1a      	ldr	r2, [r3, #32]
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	1ad3      	subs	r3, r2, r3
 800d9da:	693a      	ldr	r2, [r7, #16]
 800d9dc:	8992      	ldrh	r2, [r2, #12]
 800d9de:	fb02 f303 	mul.w	r3, r2, r3
 800d9e2:	69fa      	ldr	r2, [r7, #28]
 800d9e4:	18d1      	adds	r1, r2, r3
 800d9e6:	693b      	ldr	r3, [r7, #16]
 800d9e8:	899b      	ldrh	r3, [r3, #12]
 800d9ea:	461a      	mov	r2, r3
 800d9ec:	f7fe f810 	bl	800ba10 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	7d1b      	ldrb	r3, [r3, #20]
 800d9f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9f8:	b2da      	uxtb	r2, r3
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d9fe:	693b      	ldr	r3, [r7, #16]
 800da00:	899b      	ldrh	r3, [r3, #12]
 800da02:	461a      	mov	r2, r3
 800da04:	6a3b      	ldr	r3, [r7, #32]
 800da06:	fb02 f303 	mul.w	r3, r2, r3
 800da0a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800da0c:	e04b      	b.n	800daa6 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	697a      	ldr	r2, [r7, #20]
 800da14:	429a      	cmp	r2, r3
 800da16:	d016      	beq.n	800da46 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	699a      	ldr	r2, [r3, #24]
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800da20:	429a      	cmp	r2, r3
 800da22:	d210      	bcs.n	800da46 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800da24:	693b      	ldr	r3, [r7, #16]
 800da26:	7858      	ldrb	r0, [r3, #1]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da2e:	2301      	movs	r3, #1
 800da30:	697a      	ldr	r2, [r7, #20]
 800da32:	f7fd ff0d 	bl	800b850 <disk_read>
 800da36:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d004      	beq.n	800da46 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2201      	movs	r2, #1
 800da40:	755a      	strb	r2, [r3, #21]
 800da42:	2301      	movs	r3, #1
 800da44:	e05a      	b.n	800dafc <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	697a      	ldr	r2, [r7, #20]
 800da4a:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800da4c:	693b      	ldr	r3, [r7, #16]
 800da4e:	899b      	ldrh	r3, [r3, #12]
 800da50:	4618      	mov	r0, r3
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	699b      	ldr	r3, [r3, #24]
 800da56:	693a      	ldr	r2, [r7, #16]
 800da58:	8992      	ldrh	r2, [r2, #12]
 800da5a:	fbb3 f1f2 	udiv	r1, r3, r2
 800da5e:	fb01 f202 	mul.w	r2, r1, r2
 800da62:	1a9b      	subs	r3, r3, r2
 800da64:	1ac3      	subs	r3, r0, r3
 800da66:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800da68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	429a      	cmp	r2, r3
 800da6e:	d901      	bls.n	800da74 <f_write+0x298>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800da74:	68fb      	ldr	r3, [r7, #12]
 800da76:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	699b      	ldr	r3, [r3, #24]
 800da7e:	693a      	ldr	r2, [r7, #16]
 800da80:	8992      	ldrh	r2, [r2, #12]
 800da82:	fbb3 f0f2 	udiv	r0, r3, r2
 800da86:	fb00 f202 	mul.w	r2, r0, r2
 800da8a:	1a9b      	subs	r3, r3, r2
 800da8c:	440b      	add	r3, r1
 800da8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800da90:	69f9      	ldr	r1, [r7, #28]
 800da92:	4618      	mov	r0, r3
 800da94:	f7fd ffbc 	bl	800ba10 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	7d1b      	ldrb	r3, [r3, #20]
 800da9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800daa6:	69fa      	ldr	r2, [r7, #28]
 800daa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daaa:	4413      	add	r3, r2
 800daac:	61fb      	str	r3, [r7, #28]
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	699a      	ldr	r2, [r3, #24]
 800dab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dab4:	441a      	add	r2, r3
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	619a      	str	r2, [r3, #24]
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	68da      	ldr	r2, [r3, #12]
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	699b      	ldr	r3, [r3, #24]
 800dac2:	429a      	cmp	r2, r3
 800dac4:	bf38      	it	cc
 800dac6:	461a      	movcc	r2, r3
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	60da      	str	r2, [r3, #12]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	681a      	ldr	r2, [r3, #0]
 800dad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dad2:	441a      	add	r2, r3
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	601a      	str	r2, [r3, #0]
 800dad8:	687a      	ldr	r2, [r7, #4]
 800dada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dadc:	1ad3      	subs	r3, r2, r3
 800dade:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	f47f aeb5 	bne.w	800d852 <f_write+0x76>
 800dae8:	e000      	b.n	800daec <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800daea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	7d1b      	ldrb	r3, [r3, #20]
 800daf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daf4:	b2da      	uxtb	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800dafa:	2300      	movs	r3, #0
}
 800dafc:	4618      	mov	r0, r3
 800dafe:	3730      	adds	r7, #48	; 0x30
 800db00:	46bd      	mov	sp, r7
 800db02:	bd80      	pop	{r7, pc}

0800db04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b086      	sub	sp, #24
 800db08:	af00      	add	r7, sp, #0
 800db0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	f107 0208 	add.w	r2, r7, #8
 800db12:	4611      	mov	r1, r2
 800db14:	4618      	mov	r0, r3
 800db16:	f7ff fc19 	bl	800d34c <validate>
 800db1a:	4603      	mov	r3, r0
 800db1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800db1e:	7dfb      	ldrb	r3, [r7, #23]
 800db20:	2b00      	cmp	r3, #0
 800db22:	d168      	bne.n	800dbf6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	7d1b      	ldrb	r3, [r3, #20]
 800db28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d062      	beq.n	800dbf6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7d1b      	ldrb	r3, [r3, #20]
 800db34:	b25b      	sxtb	r3, r3
 800db36:	2b00      	cmp	r3, #0
 800db38:	da15      	bge.n	800db66 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	7858      	ldrb	r0, [r3, #1]
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1a      	ldr	r2, [r3, #32]
 800db48:	2301      	movs	r3, #1
 800db4a:	f7fd fea1 	bl	800b890 <disk_write>
 800db4e:	4603      	mov	r3, r0
 800db50:	2b00      	cmp	r3, #0
 800db52:	d001      	beq.n	800db58 <f_sync+0x54>
 800db54:	2301      	movs	r3, #1
 800db56:	e04f      	b.n	800dbf8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	7d1b      	ldrb	r3, [r3, #20]
 800db5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db60:	b2da      	uxtb	r2, r3
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800db66:	f7fd fc0d 	bl	800b384 <get_fattime>
 800db6a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db72:	4619      	mov	r1, r3
 800db74:	4610      	mov	r0, r2
 800db76:	f7fe f979 	bl	800be6c <move_window>
 800db7a:	4603      	mov	r3, r0
 800db7c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800db7e:	7dfb      	ldrb	r3, [r7, #23]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d138      	bne.n	800dbf6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db88:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	330b      	adds	r3, #11
 800db8e:	781a      	ldrb	r2, [r3, #0]
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	330b      	adds	r3, #11
 800db94:	f042 0220 	orr.w	r2, r2, #32
 800db98:	b2d2      	uxtb	r2, r2
 800db9a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6818      	ldr	r0, [r3, #0]
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	689b      	ldr	r3, [r3, #8]
 800dba4:	461a      	mov	r2, r3
 800dba6:	68f9      	ldr	r1, [r7, #12]
 800dba8:	f7fe ff05 	bl	800c9b6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	f103 021c 	add.w	r2, r3, #28
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	4619      	mov	r1, r3
 800dbb8:	4610      	mov	r0, r2
 800dbba:	f7fd fefd 	bl	800b9b8 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3316      	adds	r3, #22
 800dbc2:	6939      	ldr	r1, [r7, #16]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fd fef7 	bl	800b9b8 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	3312      	adds	r3, #18
 800dbce:	2100      	movs	r1, #0
 800dbd0:	4618      	mov	r0, r3
 800dbd2:	f7fd fed6 	bl	800b982 <st_word>
					fs->wflag = 1;
 800dbd6:	68bb      	ldr	r3, [r7, #8]
 800dbd8:	2201      	movs	r2, #1
 800dbda:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7fe f972 	bl	800bec8 <sync_fs>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7d1b      	ldrb	r3, [r3, #20]
 800dbec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dbf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3718      	adds	r7, #24
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}

0800dc00 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f7ff ff7b 	bl	800db04 <f_sync>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dc12:	7bfb      	ldrb	r3, [r7, #15]
 800dc14:	2b00      	cmp	r3, #0
 800dc16:	d118      	bne.n	800dc4a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f107 0208 	add.w	r2, r7, #8
 800dc1e:	4611      	mov	r1, r2
 800dc20:	4618      	mov	r0, r3
 800dc22:	f7ff fb93 	bl	800d34c <validate>
 800dc26:	4603      	mov	r3, r0
 800dc28:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dc2a:	7bfb      	ldrb	r3, [r7, #15]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d10c      	bne.n	800dc4a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	691b      	ldr	r3, [r3, #16]
 800dc34:	4618      	mov	r0, r3
 800dc36:	f7fe f875 	bl	800bd24 <dec_lock>
 800dc3a:	4603      	mov	r3, r0
 800dc3c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dc3e:	7bfb      	ldrb	r3, [r7, #15]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d102      	bne.n	800dc4a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	2200      	movs	r2, #0
 800dc48:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dc4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	3710      	adds	r7, #16
 800dc50:	46bd      	mov	sp, r7
 800dc52:	bd80      	pop	{r7, pc}

0800dc54 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b087      	sub	sp, #28
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	60f8      	str	r0, [r7, #12]
 800dc5c:	60b9      	str	r1, [r7, #8]
 800dc5e:	4613      	mov	r3, r2
 800dc60:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dc62:	2301      	movs	r3, #1
 800dc64:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dc66:	2300      	movs	r3, #0
 800dc68:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dc6a:	4b1f      	ldr	r3, [pc, #124]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc6c:	7a5b      	ldrb	r3, [r3, #9]
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d131      	bne.n	800dcd8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dc74:	4b1c      	ldr	r3, [pc, #112]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc76:	7a5b      	ldrb	r3, [r3, #9]
 800dc78:	b2db      	uxtb	r3, r3
 800dc7a:	461a      	mov	r2, r3
 800dc7c:	4b1a      	ldr	r3, [pc, #104]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc7e:	2100      	movs	r1, #0
 800dc80:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dc82:	4b19      	ldr	r3, [pc, #100]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc84:	7a5b      	ldrb	r3, [r3, #9]
 800dc86:	b2db      	uxtb	r3, r3
 800dc88:	4a17      	ldr	r2, [pc, #92]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc8a:	009b      	lsls	r3, r3, #2
 800dc8c:	4413      	add	r3, r2
 800dc8e:	68fa      	ldr	r2, [r7, #12]
 800dc90:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dc92:	4b15      	ldr	r3, [pc, #84]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc94:	7a5b      	ldrb	r3, [r3, #9]
 800dc96:	b2db      	uxtb	r3, r3
 800dc98:	461a      	mov	r2, r3
 800dc9a:	4b13      	ldr	r3, [pc, #76]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dc9c:	4413      	add	r3, r2
 800dc9e:	79fa      	ldrb	r2, [r7, #7]
 800dca0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dca2:	4b11      	ldr	r3, [pc, #68]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dca4:	7a5b      	ldrb	r3, [r3, #9]
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	1c5a      	adds	r2, r3, #1
 800dcaa:	b2d1      	uxtb	r1, r2
 800dcac:	4a0e      	ldr	r2, [pc, #56]	; (800dce8 <FATFS_LinkDriverEx+0x94>)
 800dcae:	7251      	strb	r1, [r2, #9]
 800dcb0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dcb2:	7dbb      	ldrb	r3, [r7, #22]
 800dcb4:	3330      	adds	r3, #48	; 0x30
 800dcb6:	b2da      	uxtb	r2, r3
 800dcb8:	68bb      	ldr	r3, [r7, #8]
 800dcba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dcbc:	68bb      	ldr	r3, [r7, #8]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	223a      	movs	r2, #58	; 0x3a
 800dcc2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dcc4:	68bb      	ldr	r3, [r7, #8]
 800dcc6:	3302      	adds	r3, #2
 800dcc8:	222f      	movs	r2, #47	; 0x2f
 800dcca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dccc:	68bb      	ldr	r3, [r7, #8]
 800dcce:	3303      	adds	r3, #3
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dcd8:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcda:	4618      	mov	r0, r3
 800dcdc:	371c      	adds	r7, #28
 800dcde:	46bd      	mov	sp, r7
 800dce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dce4:	4770      	bx	lr
 800dce6:	bf00      	nop
 800dce8:	200048b8 	.word	0x200048b8

0800dcec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b082      	sub	sp, #8
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	6078      	str	r0, [r7, #4]
 800dcf4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	6839      	ldr	r1, [r7, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f7ff ffaa 	bl	800dc54 <FATFS_LinkDriverEx>
 800dd00:	4603      	mov	r3, r0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}
	...

0800dd0c <siprintf>:
 800dd0c:	b40e      	push	{r1, r2, r3}
 800dd0e:	b500      	push	{lr}
 800dd10:	b09c      	sub	sp, #112	; 0x70
 800dd12:	ab1d      	add	r3, sp, #116	; 0x74
 800dd14:	9002      	str	r0, [sp, #8]
 800dd16:	9006      	str	r0, [sp, #24]
 800dd18:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800dd1c:	4809      	ldr	r0, [pc, #36]	; (800dd44 <siprintf+0x38>)
 800dd1e:	9107      	str	r1, [sp, #28]
 800dd20:	9104      	str	r1, [sp, #16]
 800dd22:	4909      	ldr	r1, [pc, #36]	; (800dd48 <siprintf+0x3c>)
 800dd24:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd28:	9105      	str	r1, [sp, #20]
 800dd2a:	6800      	ldr	r0, [r0, #0]
 800dd2c:	9301      	str	r3, [sp, #4]
 800dd2e:	a902      	add	r1, sp, #8
 800dd30:	f000 f992 	bl	800e058 <_svfiprintf_r>
 800dd34:	9b02      	ldr	r3, [sp, #8]
 800dd36:	2200      	movs	r2, #0
 800dd38:	701a      	strb	r2, [r3, #0]
 800dd3a:	b01c      	add	sp, #112	; 0x70
 800dd3c:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd40:	b003      	add	sp, #12
 800dd42:	4770      	bx	lr
 800dd44:	200000e8 	.word	0x200000e8
 800dd48:	ffff0208 	.word	0xffff0208

0800dd4c <memset>:
 800dd4c:	4402      	add	r2, r0
 800dd4e:	4603      	mov	r3, r0
 800dd50:	4293      	cmp	r3, r2
 800dd52:	d100      	bne.n	800dd56 <memset+0xa>
 800dd54:	4770      	bx	lr
 800dd56:	f803 1b01 	strb.w	r1, [r3], #1
 800dd5a:	e7f9      	b.n	800dd50 <memset+0x4>

0800dd5c <__errno>:
 800dd5c:	4b01      	ldr	r3, [pc, #4]	; (800dd64 <__errno+0x8>)
 800dd5e:	6818      	ldr	r0, [r3, #0]
 800dd60:	4770      	bx	lr
 800dd62:	bf00      	nop
 800dd64:	200000e8 	.word	0x200000e8

0800dd68 <__libc_init_array>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	4d0d      	ldr	r5, [pc, #52]	; (800dda0 <__libc_init_array+0x38>)
 800dd6c:	4c0d      	ldr	r4, [pc, #52]	; (800dda4 <__libc_init_array+0x3c>)
 800dd6e:	1b64      	subs	r4, r4, r5
 800dd70:	10a4      	asrs	r4, r4, #2
 800dd72:	2600      	movs	r6, #0
 800dd74:	42a6      	cmp	r6, r4
 800dd76:	d109      	bne.n	800dd8c <__libc_init_array+0x24>
 800dd78:	4d0b      	ldr	r5, [pc, #44]	; (800dda8 <__libc_init_array+0x40>)
 800dd7a:	4c0c      	ldr	r4, [pc, #48]	; (800ddac <__libc_init_array+0x44>)
 800dd7c:	f000 fc6a 	bl	800e654 <_init>
 800dd80:	1b64      	subs	r4, r4, r5
 800dd82:	10a4      	asrs	r4, r4, #2
 800dd84:	2600      	movs	r6, #0
 800dd86:	42a6      	cmp	r6, r4
 800dd88:	d105      	bne.n	800dd96 <__libc_init_array+0x2e>
 800dd8a:	bd70      	pop	{r4, r5, r6, pc}
 800dd8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd90:	4798      	blx	r3
 800dd92:	3601      	adds	r6, #1
 800dd94:	e7ee      	b.n	800dd74 <__libc_init_array+0xc>
 800dd96:	f855 3b04 	ldr.w	r3, [r5], #4
 800dd9a:	4798      	blx	r3
 800dd9c:	3601      	adds	r6, #1
 800dd9e:	e7f2      	b.n	800dd86 <__libc_init_array+0x1e>
 800dda0:	0801ddf4 	.word	0x0801ddf4
 800dda4:	0801ddf4 	.word	0x0801ddf4
 800dda8:	0801ddf4 	.word	0x0801ddf4
 800ddac:	0801ddf8 	.word	0x0801ddf8

0800ddb0 <__retarget_lock_acquire_recursive>:
 800ddb0:	4770      	bx	lr

0800ddb2 <__retarget_lock_release_recursive>:
 800ddb2:	4770      	bx	lr

0800ddb4 <_free_r>:
 800ddb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ddb6:	2900      	cmp	r1, #0
 800ddb8:	d044      	beq.n	800de44 <_free_r+0x90>
 800ddba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ddbe:	9001      	str	r0, [sp, #4]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	f1a1 0404 	sub.w	r4, r1, #4
 800ddc6:	bfb8      	it	lt
 800ddc8:	18e4      	addlt	r4, r4, r3
 800ddca:	f000 f8df 	bl	800df8c <__malloc_lock>
 800ddce:	4a1e      	ldr	r2, [pc, #120]	; (800de48 <_free_r+0x94>)
 800ddd0:	9801      	ldr	r0, [sp, #4]
 800ddd2:	6813      	ldr	r3, [r2, #0]
 800ddd4:	b933      	cbnz	r3, 800dde4 <_free_r+0x30>
 800ddd6:	6063      	str	r3, [r4, #4]
 800ddd8:	6014      	str	r4, [r2, #0]
 800ddda:	b003      	add	sp, #12
 800dddc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dde0:	f000 b8da 	b.w	800df98 <__malloc_unlock>
 800dde4:	42a3      	cmp	r3, r4
 800dde6:	d908      	bls.n	800ddfa <_free_r+0x46>
 800dde8:	6825      	ldr	r5, [r4, #0]
 800ddea:	1961      	adds	r1, r4, r5
 800ddec:	428b      	cmp	r3, r1
 800ddee:	bf01      	itttt	eq
 800ddf0:	6819      	ldreq	r1, [r3, #0]
 800ddf2:	685b      	ldreq	r3, [r3, #4]
 800ddf4:	1949      	addeq	r1, r1, r5
 800ddf6:	6021      	streq	r1, [r4, #0]
 800ddf8:	e7ed      	b.n	800ddd6 <_free_r+0x22>
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	685b      	ldr	r3, [r3, #4]
 800ddfe:	b10b      	cbz	r3, 800de04 <_free_r+0x50>
 800de00:	42a3      	cmp	r3, r4
 800de02:	d9fa      	bls.n	800ddfa <_free_r+0x46>
 800de04:	6811      	ldr	r1, [r2, #0]
 800de06:	1855      	adds	r5, r2, r1
 800de08:	42a5      	cmp	r5, r4
 800de0a:	d10b      	bne.n	800de24 <_free_r+0x70>
 800de0c:	6824      	ldr	r4, [r4, #0]
 800de0e:	4421      	add	r1, r4
 800de10:	1854      	adds	r4, r2, r1
 800de12:	42a3      	cmp	r3, r4
 800de14:	6011      	str	r1, [r2, #0]
 800de16:	d1e0      	bne.n	800ddda <_free_r+0x26>
 800de18:	681c      	ldr	r4, [r3, #0]
 800de1a:	685b      	ldr	r3, [r3, #4]
 800de1c:	6053      	str	r3, [r2, #4]
 800de1e:	440c      	add	r4, r1
 800de20:	6014      	str	r4, [r2, #0]
 800de22:	e7da      	b.n	800ddda <_free_r+0x26>
 800de24:	d902      	bls.n	800de2c <_free_r+0x78>
 800de26:	230c      	movs	r3, #12
 800de28:	6003      	str	r3, [r0, #0]
 800de2a:	e7d6      	b.n	800ddda <_free_r+0x26>
 800de2c:	6825      	ldr	r5, [r4, #0]
 800de2e:	1961      	adds	r1, r4, r5
 800de30:	428b      	cmp	r3, r1
 800de32:	bf04      	itt	eq
 800de34:	6819      	ldreq	r1, [r3, #0]
 800de36:	685b      	ldreq	r3, [r3, #4]
 800de38:	6063      	str	r3, [r4, #4]
 800de3a:	bf04      	itt	eq
 800de3c:	1949      	addeq	r1, r1, r5
 800de3e:	6021      	streq	r1, [r4, #0]
 800de40:	6054      	str	r4, [r2, #4]
 800de42:	e7ca      	b.n	800ddda <_free_r+0x26>
 800de44:	b003      	add	sp, #12
 800de46:	bd30      	pop	{r4, r5, pc}
 800de48:	20004a04 	.word	0x20004a04

0800de4c <sbrk_aligned>:
 800de4c:	b570      	push	{r4, r5, r6, lr}
 800de4e:	4e0e      	ldr	r6, [pc, #56]	; (800de88 <sbrk_aligned+0x3c>)
 800de50:	460c      	mov	r4, r1
 800de52:	6831      	ldr	r1, [r6, #0]
 800de54:	4605      	mov	r5, r0
 800de56:	b911      	cbnz	r1, 800de5e <sbrk_aligned+0x12>
 800de58:	f000 fba6 	bl	800e5a8 <_sbrk_r>
 800de5c:	6030      	str	r0, [r6, #0]
 800de5e:	4621      	mov	r1, r4
 800de60:	4628      	mov	r0, r5
 800de62:	f000 fba1 	bl	800e5a8 <_sbrk_r>
 800de66:	1c43      	adds	r3, r0, #1
 800de68:	d00a      	beq.n	800de80 <sbrk_aligned+0x34>
 800de6a:	1cc4      	adds	r4, r0, #3
 800de6c:	f024 0403 	bic.w	r4, r4, #3
 800de70:	42a0      	cmp	r0, r4
 800de72:	d007      	beq.n	800de84 <sbrk_aligned+0x38>
 800de74:	1a21      	subs	r1, r4, r0
 800de76:	4628      	mov	r0, r5
 800de78:	f000 fb96 	bl	800e5a8 <_sbrk_r>
 800de7c:	3001      	adds	r0, #1
 800de7e:	d101      	bne.n	800de84 <sbrk_aligned+0x38>
 800de80:	f04f 34ff 	mov.w	r4, #4294967295
 800de84:	4620      	mov	r0, r4
 800de86:	bd70      	pop	{r4, r5, r6, pc}
 800de88:	20004a08 	.word	0x20004a08

0800de8c <_malloc_r>:
 800de8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de90:	1ccd      	adds	r5, r1, #3
 800de92:	f025 0503 	bic.w	r5, r5, #3
 800de96:	3508      	adds	r5, #8
 800de98:	2d0c      	cmp	r5, #12
 800de9a:	bf38      	it	cc
 800de9c:	250c      	movcc	r5, #12
 800de9e:	2d00      	cmp	r5, #0
 800dea0:	4607      	mov	r7, r0
 800dea2:	db01      	blt.n	800dea8 <_malloc_r+0x1c>
 800dea4:	42a9      	cmp	r1, r5
 800dea6:	d905      	bls.n	800deb4 <_malloc_r+0x28>
 800dea8:	230c      	movs	r3, #12
 800deaa:	603b      	str	r3, [r7, #0]
 800deac:	2600      	movs	r6, #0
 800deae:	4630      	mov	r0, r6
 800deb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deb4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800df88 <_malloc_r+0xfc>
 800deb8:	f000 f868 	bl	800df8c <__malloc_lock>
 800debc:	f8d8 3000 	ldr.w	r3, [r8]
 800dec0:	461c      	mov	r4, r3
 800dec2:	bb5c      	cbnz	r4, 800df1c <_malloc_r+0x90>
 800dec4:	4629      	mov	r1, r5
 800dec6:	4638      	mov	r0, r7
 800dec8:	f7ff ffc0 	bl	800de4c <sbrk_aligned>
 800decc:	1c43      	adds	r3, r0, #1
 800dece:	4604      	mov	r4, r0
 800ded0:	d155      	bne.n	800df7e <_malloc_r+0xf2>
 800ded2:	f8d8 4000 	ldr.w	r4, [r8]
 800ded6:	4626      	mov	r6, r4
 800ded8:	2e00      	cmp	r6, #0
 800deda:	d145      	bne.n	800df68 <_malloc_r+0xdc>
 800dedc:	2c00      	cmp	r4, #0
 800dede:	d048      	beq.n	800df72 <_malloc_r+0xe6>
 800dee0:	6823      	ldr	r3, [r4, #0]
 800dee2:	4631      	mov	r1, r6
 800dee4:	4638      	mov	r0, r7
 800dee6:	eb04 0903 	add.w	r9, r4, r3
 800deea:	f000 fb5d 	bl	800e5a8 <_sbrk_r>
 800deee:	4581      	cmp	r9, r0
 800def0:	d13f      	bne.n	800df72 <_malloc_r+0xe6>
 800def2:	6821      	ldr	r1, [r4, #0]
 800def4:	1a6d      	subs	r5, r5, r1
 800def6:	4629      	mov	r1, r5
 800def8:	4638      	mov	r0, r7
 800defa:	f7ff ffa7 	bl	800de4c <sbrk_aligned>
 800defe:	3001      	adds	r0, #1
 800df00:	d037      	beq.n	800df72 <_malloc_r+0xe6>
 800df02:	6823      	ldr	r3, [r4, #0]
 800df04:	442b      	add	r3, r5
 800df06:	6023      	str	r3, [r4, #0]
 800df08:	f8d8 3000 	ldr.w	r3, [r8]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d038      	beq.n	800df82 <_malloc_r+0xf6>
 800df10:	685a      	ldr	r2, [r3, #4]
 800df12:	42a2      	cmp	r2, r4
 800df14:	d12b      	bne.n	800df6e <_malloc_r+0xe2>
 800df16:	2200      	movs	r2, #0
 800df18:	605a      	str	r2, [r3, #4]
 800df1a:	e00f      	b.n	800df3c <_malloc_r+0xb0>
 800df1c:	6822      	ldr	r2, [r4, #0]
 800df1e:	1b52      	subs	r2, r2, r5
 800df20:	d41f      	bmi.n	800df62 <_malloc_r+0xd6>
 800df22:	2a0b      	cmp	r2, #11
 800df24:	d917      	bls.n	800df56 <_malloc_r+0xca>
 800df26:	1961      	adds	r1, r4, r5
 800df28:	42a3      	cmp	r3, r4
 800df2a:	6025      	str	r5, [r4, #0]
 800df2c:	bf18      	it	ne
 800df2e:	6059      	strne	r1, [r3, #4]
 800df30:	6863      	ldr	r3, [r4, #4]
 800df32:	bf08      	it	eq
 800df34:	f8c8 1000 	streq.w	r1, [r8]
 800df38:	5162      	str	r2, [r4, r5]
 800df3a:	604b      	str	r3, [r1, #4]
 800df3c:	4638      	mov	r0, r7
 800df3e:	f104 060b 	add.w	r6, r4, #11
 800df42:	f000 f829 	bl	800df98 <__malloc_unlock>
 800df46:	f026 0607 	bic.w	r6, r6, #7
 800df4a:	1d23      	adds	r3, r4, #4
 800df4c:	1af2      	subs	r2, r6, r3
 800df4e:	d0ae      	beq.n	800deae <_malloc_r+0x22>
 800df50:	1b9b      	subs	r3, r3, r6
 800df52:	50a3      	str	r3, [r4, r2]
 800df54:	e7ab      	b.n	800deae <_malloc_r+0x22>
 800df56:	42a3      	cmp	r3, r4
 800df58:	6862      	ldr	r2, [r4, #4]
 800df5a:	d1dd      	bne.n	800df18 <_malloc_r+0x8c>
 800df5c:	f8c8 2000 	str.w	r2, [r8]
 800df60:	e7ec      	b.n	800df3c <_malloc_r+0xb0>
 800df62:	4623      	mov	r3, r4
 800df64:	6864      	ldr	r4, [r4, #4]
 800df66:	e7ac      	b.n	800dec2 <_malloc_r+0x36>
 800df68:	4634      	mov	r4, r6
 800df6a:	6876      	ldr	r6, [r6, #4]
 800df6c:	e7b4      	b.n	800ded8 <_malloc_r+0x4c>
 800df6e:	4613      	mov	r3, r2
 800df70:	e7cc      	b.n	800df0c <_malloc_r+0x80>
 800df72:	230c      	movs	r3, #12
 800df74:	603b      	str	r3, [r7, #0]
 800df76:	4638      	mov	r0, r7
 800df78:	f000 f80e 	bl	800df98 <__malloc_unlock>
 800df7c:	e797      	b.n	800deae <_malloc_r+0x22>
 800df7e:	6025      	str	r5, [r4, #0]
 800df80:	e7dc      	b.n	800df3c <_malloc_r+0xb0>
 800df82:	605b      	str	r3, [r3, #4]
 800df84:	deff      	udf	#255	; 0xff
 800df86:	bf00      	nop
 800df88:	20004a04 	.word	0x20004a04

0800df8c <__malloc_lock>:
 800df8c:	4801      	ldr	r0, [pc, #4]	; (800df94 <__malloc_lock+0x8>)
 800df8e:	f7ff bf0f 	b.w	800ddb0 <__retarget_lock_acquire_recursive>
 800df92:	bf00      	nop
 800df94:	20004a00 	.word	0x20004a00

0800df98 <__malloc_unlock>:
 800df98:	4801      	ldr	r0, [pc, #4]	; (800dfa0 <__malloc_unlock+0x8>)
 800df9a:	f7ff bf0a 	b.w	800ddb2 <__retarget_lock_release_recursive>
 800df9e:	bf00      	nop
 800dfa0:	20004a00 	.word	0x20004a00

0800dfa4 <__ssputs_r>:
 800dfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfa8:	688e      	ldr	r6, [r1, #8]
 800dfaa:	461f      	mov	r7, r3
 800dfac:	42be      	cmp	r6, r7
 800dfae:	680b      	ldr	r3, [r1, #0]
 800dfb0:	4682      	mov	sl, r0
 800dfb2:	460c      	mov	r4, r1
 800dfb4:	4690      	mov	r8, r2
 800dfb6:	d82c      	bhi.n	800e012 <__ssputs_r+0x6e>
 800dfb8:	898a      	ldrh	r2, [r1, #12]
 800dfba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800dfbe:	d026      	beq.n	800e00e <__ssputs_r+0x6a>
 800dfc0:	6965      	ldr	r5, [r4, #20]
 800dfc2:	6909      	ldr	r1, [r1, #16]
 800dfc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800dfc8:	eba3 0901 	sub.w	r9, r3, r1
 800dfcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800dfd0:	1c7b      	adds	r3, r7, #1
 800dfd2:	444b      	add	r3, r9
 800dfd4:	106d      	asrs	r5, r5, #1
 800dfd6:	429d      	cmp	r5, r3
 800dfd8:	bf38      	it	cc
 800dfda:	461d      	movcc	r5, r3
 800dfdc:	0553      	lsls	r3, r2, #21
 800dfde:	d527      	bpl.n	800e030 <__ssputs_r+0x8c>
 800dfe0:	4629      	mov	r1, r5
 800dfe2:	f7ff ff53 	bl	800de8c <_malloc_r>
 800dfe6:	4606      	mov	r6, r0
 800dfe8:	b360      	cbz	r0, 800e044 <__ssputs_r+0xa0>
 800dfea:	6921      	ldr	r1, [r4, #16]
 800dfec:	464a      	mov	r2, r9
 800dfee:	f000 faeb 	bl	800e5c8 <memcpy>
 800dff2:	89a3      	ldrh	r3, [r4, #12]
 800dff4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dffc:	81a3      	strh	r3, [r4, #12]
 800dffe:	6126      	str	r6, [r4, #16]
 800e000:	6165      	str	r5, [r4, #20]
 800e002:	444e      	add	r6, r9
 800e004:	eba5 0509 	sub.w	r5, r5, r9
 800e008:	6026      	str	r6, [r4, #0]
 800e00a:	60a5      	str	r5, [r4, #8]
 800e00c:	463e      	mov	r6, r7
 800e00e:	42be      	cmp	r6, r7
 800e010:	d900      	bls.n	800e014 <__ssputs_r+0x70>
 800e012:	463e      	mov	r6, r7
 800e014:	6820      	ldr	r0, [r4, #0]
 800e016:	4632      	mov	r2, r6
 800e018:	4641      	mov	r1, r8
 800e01a:	f000 faab 	bl	800e574 <memmove>
 800e01e:	68a3      	ldr	r3, [r4, #8]
 800e020:	1b9b      	subs	r3, r3, r6
 800e022:	60a3      	str	r3, [r4, #8]
 800e024:	6823      	ldr	r3, [r4, #0]
 800e026:	4433      	add	r3, r6
 800e028:	6023      	str	r3, [r4, #0]
 800e02a:	2000      	movs	r0, #0
 800e02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e030:	462a      	mov	r2, r5
 800e032:	f000 fad7 	bl	800e5e4 <_realloc_r>
 800e036:	4606      	mov	r6, r0
 800e038:	2800      	cmp	r0, #0
 800e03a:	d1e0      	bne.n	800dffe <__ssputs_r+0x5a>
 800e03c:	6921      	ldr	r1, [r4, #16]
 800e03e:	4650      	mov	r0, sl
 800e040:	f7ff feb8 	bl	800ddb4 <_free_r>
 800e044:	230c      	movs	r3, #12
 800e046:	f8ca 3000 	str.w	r3, [sl]
 800e04a:	89a3      	ldrh	r3, [r4, #12]
 800e04c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e050:	81a3      	strh	r3, [r4, #12]
 800e052:	f04f 30ff 	mov.w	r0, #4294967295
 800e056:	e7e9      	b.n	800e02c <__ssputs_r+0x88>

0800e058 <_svfiprintf_r>:
 800e058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05c:	4698      	mov	r8, r3
 800e05e:	898b      	ldrh	r3, [r1, #12]
 800e060:	061b      	lsls	r3, r3, #24
 800e062:	b09d      	sub	sp, #116	; 0x74
 800e064:	4607      	mov	r7, r0
 800e066:	460d      	mov	r5, r1
 800e068:	4614      	mov	r4, r2
 800e06a:	d50e      	bpl.n	800e08a <_svfiprintf_r+0x32>
 800e06c:	690b      	ldr	r3, [r1, #16]
 800e06e:	b963      	cbnz	r3, 800e08a <_svfiprintf_r+0x32>
 800e070:	2140      	movs	r1, #64	; 0x40
 800e072:	f7ff ff0b 	bl	800de8c <_malloc_r>
 800e076:	6028      	str	r0, [r5, #0]
 800e078:	6128      	str	r0, [r5, #16]
 800e07a:	b920      	cbnz	r0, 800e086 <_svfiprintf_r+0x2e>
 800e07c:	230c      	movs	r3, #12
 800e07e:	603b      	str	r3, [r7, #0]
 800e080:	f04f 30ff 	mov.w	r0, #4294967295
 800e084:	e0d0      	b.n	800e228 <_svfiprintf_r+0x1d0>
 800e086:	2340      	movs	r3, #64	; 0x40
 800e088:	616b      	str	r3, [r5, #20]
 800e08a:	2300      	movs	r3, #0
 800e08c:	9309      	str	r3, [sp, #36]	; 0x24
 800e08e:	2320      	movs	r3, #32
 800e090:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e094:	f8cd 800c 	str.w	r8, [sp, #12]
 800e098:	2330      	movs	r3, #48	; 0x30
 800e09a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800e240 <_svfiprintf_r+0x1e8>
 800e09e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0a2:	f04f 0901 	mov.w	r9, #1
 800e0a6:	4623      	mov	r3, r4
 800e0a8:	469a      	mov	sl, r3
 800e0aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0ae:	b10a      	cbz	r2, 800e0b4 <_svfiprintf_r+0x5c>
 800e0b0:	2a25      	cmp	r2, #37	; 0x25
 800e0b2:	d1f9      	bne.n	800e0a8 <_svfiprintf_r+0x50>
 800e0b4:	ebba 0b04 	subs.w	fp, sl, r4
 800e0b8:	d00b      	beq.n	800e0d2 <_svfiprintf_r+0x7a>
 800e0ba:	465b      	mov	r3, fp
 800e0bc:	4622      	mov	r2, r4
 800e0be:	4629      	mov	r1, r5
 800e0c0:	4638      	mov	r0, r7
 800e0c2:	f7ff ff6f 	bl	800dfa4 <__ssputs_r>
 800e0c6:	3001      	adds	r0, #1
 800e0c8:	f000 80a9 	beq.w	800e21e <_svfiprintf_r+0x1c6>
 800e0cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e0ce:	445a      	add	r2, fp
 800e0d0:	9209      	str	r2, [sp, #36]	; 0x24
 800e0d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	f000 80a1 	beq.w	800e21e <_svfiprintf_r+0x1c6>
 800e0dc:	2300      	movs	r3, #0
 800e0de:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e0e6:	f10a 0a01 	add.w	sl, sl, #1
 800e0ea:	9304      	str	r3, [sp, #16]
 800e0ec:	9307      	str	r3, [sp, #28]
 800e0ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e0f2:	931a      	str	r3, [sp, #104]	; 0x68
 800e0f4:	4654      	mov	r4, sl
 800e0f6:	2205      	movs	r2, #5
 800e0f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0fc:	4850      	ldr	r0, [pc, #320]	; (800e240 <_svfiprintf_r+0x1e8>)
 800e0fe:	f7f2 f88f 	bl	8000220 <memchr>
 800e102:	9a04      	ldr	r2, [sp, #16]
 800e104:	b9d8      	cbnz	r0, 800e13e <_svfiprintf_r+0xe6>
 800e106:	06d0      	lsls	r0, r2, #27
 800e108:	bf44      	itt	mi
 800e10a:	2320      	movmi	r3, #32
 800e10c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e110:	0711      	lsls	r1, r2, #28
 800e112:	bf44      	itt	mi
 800e114:	232b      	movmi	r3, #43	; 0x2b
 800e116:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e11a:	f89a 3000 	ldrb.w	r3, [sl]
 800e11e:	2b2a      	cmp	r3, #42	; 0x2a
 800e120:	d015      	beq.n	800e14e <_svfiprintf_r+0xf6>
 800e122:	9a07      	ldr	r2, [sp, #28]
 800e124:	4654      	mov	r4, sl
 800e126:	2000      	movs	r0, #0
 800e128:	f04f 0c0a 	mov.w	ip, #10
 800e12c:	4621      	mov	r1, r4
 800e12e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e132:	3b30      	subs	r3, #48	; 0x30
 800e134:	2b09      	cmp	r3, #9
 800e136:	d94d      	bls.n	800e1d4 <_svfiprintf_r+0x17c>
 800e138:	b1b0      	cbz	r0, 800e168 <_svfiprintf_r+0x110>
 800e13a:	9207      	str	r2, [sp, #28]
 800e13c:	e014      	b.n	800e168 <_svfiprintf_r+0x110>
 800e13e:	eba0 0308 	sub.w	r3, r0, r8
 800e142:	fa09 f303 	lsl.w	r3, r9, r3
 800e146:	4313      	orrs	r3, r2
 800e148:	9304      	str	r3, [sp, #16]
 800e14a:	46a2      	mov	sl, r4
 800e14c:	e7d2      	b.n	800e0f4 <_svfiprintf_r+0x9c>
 800e14e:	9b03      	ldr	r3, [sp, #12]
 800e150:	1d19      	adds	r1, r3, #4
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	9103      	str	r1, [sp, #12]
 800e156:	2b00      	cmp	r3, #0
 800e158:	bfbb      	ittet	lt
 800e15a:	425b      	neglt	r3, r3
 800e15c:	f042 0202 	orrlt.w	r2, r2, #2
 800e160:	9307      	strge	r3, [sp, #28]
 800e162:	9307      	strlt	r3, [sp, #28]
 800e164:	bfb8      	it	lt
 800e166:	9204      	strlt	r2, [sp, #16]
 800e168:	7823      	ldrb	r3, [r4, #0]
 800e16a:	2b2e      	cmp	r3, #46	; 0x2e
 800e16c:	d10c      	bne.n	800e188 <_svfiprintf_r+0x130>
 800e16e:	7863      	ldrb	r3, [r4, #1]
 800e170:	2b2a      	cmp	r3, #42	; 0x2a
 800e172:	d134      	bne.n	800e1de <_svfiprintf_r+0x186>
 800e174:	9b03      	ldr	r3, [sp, #12]
 800e176:	1d1a      	adds	r2, r3, #4
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	9203      	str	r2, [sp, #12]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	bfb8      	it	lt
 800e180:	f04f 33ff 	movlt.w	r3, #4294967295
 800e184:	3402      	adds	r4, #2
 800e186:	9305      	str	r3, [sp, #20]
 800e188:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800e250 <_svfiprintf_r+0x1f8>
 800e18c:	7821      	ldrb	r1, [r4, #0]
 800e18e:	2203      	movs	r2, #3
 800e190:	4650      	mov	r0, sl
 800e192:	f7f2 f845 	bl	8000220 <memchr>
 800e196:	b138      	cbz	r0, 800e1a8 <_svfiprintf_r+0x150>
 800e198:	9b04      	ldr	r3, [sp, #16]
 800e19a:	eba0 000a 	sub.w	r0, r0, sl
 800e19e:	2240      	movs	r2, #64	; 0x40
 800e1a0:	4082      	lsls	r2, r0
 800e1a2:	4313      	orrs	r3, r2
 800e1a4:	3401      	adds	r4, #1
 800e1a6:	9304      	str	r3, [sp, #16]
 800e1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1ac:	4825      	ldr	r0, [pc, #148]	; (800e244 <_svfiprintf_r+0x1ec>)
 800e1ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1b2:	2206      	movs	r2, #6
 800e1b4:	f7f2 f834 	bl	8000220 <memchr>
 800e1b8:	2800      	cmp	r0, #0
 800e1ba:	d038      	beq.n	800e22e <_svfiprintf_r+0x1d6>
 800e1bc:	4b22      	ldr	r3, [pc, #136]	; (800e248 <_svfiprintf_r+0x1f0>)
 800e1be:	bb1b      	cbnz	r3, 800e208 <_svfiprintf_r+0x1b0>
 800e1c0:	9b03      	ldr	r3, [sp, #12]
 800e1c2:	3307      	adds	r3, #7
 800e1c4:	f023 0307 	bic.w	r3, r3, #7
 800e1c8:	3308      	adds	r3, #8
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e1ce:	4433      	add	r3, r6
 800e1d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e1d2:	e768      	b.n	800e0a6 <_svfiprintf_r+0x4e>
 800e1d4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e1d8:	460c      	mov	r4, r1
 800e1da:	2001      	movs	r0, #1
 800e1dc:	e7a6      	b.n	800e12c <_svfiprintf_r+0xd4>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	3401      	adds	r4, #1
 800e1e2:	9305      	str	r3, [sp, #20]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	f04f 0c0a 	mov.w	ip, #10
 800e1ea:	4620      	mov	r0, r4
 800e1ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e1f0:	3a30      	subs	r2, #48	; 0x30
 800e1f2:	2a09      	cmp	r2, #9
 800e1f4:	d903      	bls.n	800e1fe <_svfiprintf_r+0x1a6>
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0c6      	beq.n	800e188 <_svfiprintf_r+0x130>
 800e1fa:	9105      	str	r1, [sp, #20]
 800e1fc:	e7c4      	b.n	800e188 <_svfiprintf_r+0x130>
 800e1fe:	fb0c 2101 	mla	r1, ip, r1, r2
 800e202:	4604      	mov	r4, r0
 800e204:	2301      	movs	r3, #1
 800e206:	e7f0      	b.n	800e1ea <_svfiprintf_r+0x192>
 800e208:	ab03      	add	r3, sp, #12
 800e20a:	9300      	str	r3, [sp, #0]
 800e20c:	462a      	mov	r2, r5
 800e20e:	4b0f      	ldr	r3, [pc, #60]	; (800e24c <_svfiprintf_r+0x1f4>)
 800e210:	a904      	add	r1, sp, #16
 800e212:	4638      	mov	r0, r7
 800e214:	f3af 8000 	nop.w
 800e218:	1c42      	adds	r2, r0, #1
 800e21a:	4606      	mov	r6, r0
 800e21c:	d1d6      	bne.n	800e1cc <_svfiprintf_r+0x174>
 800e21e:	89ab      	ldrh	r3, [r5, #12]
 800e220:	065b      	lsls	r3, r3, #25
 800e222:	f53f af2d 	bmi.w	800e080 <_svfiprintf_r+0x28>
 800e226:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e228:	b01d      	add	sp, #116	; 0x74
 800e22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e22e:	ab03      	add	r3, sp, #12
 800e230:	9300      	str	r3, [sp, #0]
 800e232:	462a      	mov	r2, r5
 800e234:	4b05      	ldr	r3, [pc, #20]	; (800e24c <_svfiprintf_r+0x1f4>)
 800e236:	a904      	add	r1, sp, #16
 800e238:	4638      	mov	r0, r7
 800e23a:	f000 f879 	bl	800e330 <_printf_i>
 800e23e:	e7eb      	b.n	800e218 <_svfiprintf_r+0x1c0>
 800e240:	0801ddb8 	.word	0x0801ddb8
 800e244:	0801ddc2 	.word	0x0801ddc2
 800e248:	00000000 	.word	0x00000000
 800e24c:	0800dfa5 	.word	0x0800dfa5
 800e250:	0801ddbe 	.word	0x0801ddbe

0800e254 <_printf_common>:
 800e254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e258:	4616      	mov	r6, r2
 800e25a:	4699      	mov	r9, r3
 800e25c:	688a      	ldr	r2, [r1, #8]
 800e25e:	690b      	ldr	r3, [r1, #16]
 800e260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e264:	4293      	cmp	r3, r2
 800e266:	bfb8      	it	lt
 800e268:	4613      	movlt	r3, r2
 800e26a:	6033      	str	r3, [r6, #0]
 800e26c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e270:	4607      	mov	r7, r0
 800e272:	460c      	mov	r4, r1
 800e274:	b10a      	cbz	r2, 800e27a <_printf_common+0x26>
 800e276:	3301      	adds	r3, #1
 800e278:	6033      	str	r3, [r6, #0]
 800e27a:	6823      	ldr	r3, [r4, #0]
 800e27c:	0699      	lsls	r1, r3, #26
 800e27e:	bf42      	ittt	mi
 800e280:	6833      	ldrmi	r3, [r6, #0]
 800e282:	3302      	addmi	r3, #2
 800e284:	6033      	strmi	r3, [r6, #0]
 800e286:	6825      	ldr	r5, [r4, #0]
 800e288:	f015 0506 	ands.w	r5, r5, #6
 800e28c:	d106      	bne.n	800e29c <_printf_common+0x48>
 800e28e:	f104 0a19 	add.w	sl, r4, #25
 800e292:	68e3      	ldr	r3, [r4, #12]
 800e294:	6832      	ldr	r2, [r6, #0]
 800e296:	1a9b      	subs	r3, r3, r2
 800e298:	42ab      	cmp	r3, r5
 800e29a:	dc26      	bgt.n	800e2ea <_printf_common+0x96>
 800e29c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e2a0:	1e13      	subs	r3, r2, #0
 800e2a2:	6822      	ldr	r2, [r4, #0]
 800e2a4:	bf18      	it	ne
 800e2a6:	2301      	movne	r3, #1
 800e2a8:	0692      	lsls	r2, r2, #26
 800e2aa:	d42b      	bmi.n	800e304 <_printf_common+0xb0>
 800e2ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e2b0:	4649      	mov	r1, r9
 800e2b2:	4638      	mov	r0, r7
 800e2b4:	47c0      	blx	r8
 800e2b6:	3001      	adds	r0, #1
 800e2b8:	d01e      	beq.n	800e2f8 <_printf_common+0xa4>
 800e2ba:	6823      	ldr	r3, [r4, #0]
 800e2bc:	6922      	ldr	r2, [r4, #16]
 800e2be:	f003 0306 	and.w	r3, r3, #6
 800e2c2:	2b04      	cmp	r3, #4
 800e2c4:	bf02      	ittt	eq
 800e2c6:	68e5      	ldreq	r5, [r4, #12]
 800e2c8:	6833      	ldreq	r3, [r6, #0]
 800e2ca:	1aed      	subeq	r5, r5, r3
 800e2cc:	68a3      	ldr	r3, [r4, #8]
 800e2ce:	bf0c      	ite	eq
 800e2d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e2d4:	2500      	movne	r5, #0
 800e2d6:	4293      	cmp	r3, r2
 800e2d8:	bfc4      	itt	gt
 800e2da:	1a9b      	subgt	r3, r3, r2
 800e2dc:	18ed      	addgt	r5, r5, r3
 800e2de:	2600      	movs	r6, #0
 800e2e0:	341a      	adds	r4, #26
 800e2e2:	42b5      	cmp	r5, r6
 800e2e4:	d11a      	bne.n	800e31c <_printf_common+0xc8>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	e008      	b.n	800e2fc <_printf_common+0xa8>
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	4652      	mov	r2, sl
 800e2ee:	4649      	mov	r1, r9
 800e2f0:	4638      	mov	r0, r7
 800e2f2:	47c0      	blx	r8
 800e2f4:	3001      	adds	r0, #1
 800e2f6:	d103      	bne.n	800e300 <_printf_common+0xac>
 800e2f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e300:	3501      	adds	r5, #1
 800e302:	e7c6      	b.n	800e292 <_printf_common+0x3e>
 800e304:	18e1      	adds	r1, r4, r3
 800e306:	1c5a      	adds	r2, r3, #1
 800e308:	2030      	movs	r0, #48	; 0x30
 800e30a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e30e:	4422      	add	r2, r4
 800e310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e318:	3302      	adds	r3, #2
 800e31a:	e7c7      	b.n	800e2ac <_printf_common+0x58>
 800e31c:	2301      	movs	r3, #1
 800e31e:	4622      	mov	r2, r4
 800e320:	4649      	mov	r1, r9
 800e322:	4638      	mov	r0, r7
 800e324:	47c0      	blx	r8
 800e326:	3001      	adds	r0, #1
 800e328:	d0e6      	beq.n	800e2f8 <_printf_common+0xa4>
 800e32a:	3601      	adds	r6, #1
 800e32c:	e7d9      	b.n	800e2e2 <_printf_common+0x8e>
	...

0800e330 <_printf_i>:
 800e330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e334:	7e0f      	ldrb	r7, [r1, #24]
 800e336:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e338:	2f78      	cmp	r7, #120	; 0x78
 800e33a:	4691      	mov	r9, r2
 800e33c:	4680      	mov	r8, r0
 800e33e:	460c      	mov	r4, r1
 800e340:	469a      	mov	sl, r3
 800e342:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e346:	d807      	bhi.n	800e358 <_printf_i+0x28>
 800e348:	2f62      	cmp	r7, #98	; 0x62
 800e34a:	d80a      	bhi.n	800e362 <_printf_i+0x32>
 800e34c:	2f00      	cmp	r7, #0
 800e34e:	f000 80d4 	beq.w	800e4fa <_printf_i+0x1ca>
 800e352:	2f58      	cmp	r7, #88	; 0x58
 800e354:	f000 80c0 	beq.w	800e4d8 <_printf_i+0x1a8>
 800e358:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e35c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e360:	e03a      	b.n	800e3d8 <_printf_i+0xa8>
 800e362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e366:	2b15      	cmp	r3, #21
 800e368:	d8f6      	bhi.n	800e358 <_printf_i+0x28>
 800e36a:	a101      	add	r1, pc, #4	; (adr r1, 800e370 <_printf_i+0x40>)
 800e36c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e370:	0800e3c9 	.word	0x0800e3c9
 800e374:	0800e3dd 	.word	0x0800e3dd
 800e378:	0800e359 	.word	0x0800e359
 800e37c:	0800e359 	.word	0x0800e359
 800e380:	0800e359 	.word	0x0800e359
 800e384:	0800e359 	.word	0x0800e359
 800e388:	0800e3dd 	.word	0x0800e3dd
 800e38c:	0800e359 	.word	0x0800e359
 800e390:	0800e359 	.word	0x0800e359
 800e394:	0800e359 	.word	0x0800e359
 800e398:	0800e359 	.word	0x0800e359
 800e39c:	0800e4e1 	.word	0x0800e4e1
 800e3a0:	0800e409 	.word	0x0800e409
 800e3a4:	0800e49b 	.word	0x0800e49b
 800e3a8:	0800e359 	.word	0x0800e359
 800e3ac:	0800e359 	.word	0x0800e359
 800e3b0:	0800e503 	.word	0x0800e503
 800e3b4:	0800e359 	.word	0x0800e359
 800e3b8:	0800e409 	.word	0x0800e409
 800e3bc:	0800e359 	.word	0x0800e359
 800e3c0:	0800e359 	.word	0x0800e359
 800e3c4:	0800e4a3 	.word	0x0800e4a3
 800e3c8:	682b      	ldr	r3, [r5, #0]
 800e3ca:	1d1a      	adds	r2, r3, #4
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	602a      	str	r2, [r5, #0]
 800e3d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e09f      	b.n	800e51c <_printf_i+0x1ec>
 800e3dc:	6820      	ldr	r0, [r4, #0]
 800e3de:	682b      	ldr	r3, [r5, #0]
 800e3e0:	0607      	lsls	r7, r0, #24
 800e3e2:	f103 0104 	add.w	r1, r3, #4
 800e3e6:	6029      	str	r1, [r5, #0]
 800e3e8:	d501      	bpl.n	800e3ee <_printf_i+0xbe>
 800e3ea:	681e      	ldr	r6, [r3, #0]
 800e3ec:	e003      	b.n	800e3f6 <_printf_i+0xc6>
 800e3ee:	0646      	lsls	r6, r0, #25
 800e3f0:	d5fb      	bpl.n	800e3ea <_printf_i+0xba>
 800e3f2:	f9b3 6000 	ldrsh.w	r6, [r3]
 800e3f6:	2e00      	cmp	r6, #0
 800e3f8:	da03      	bge.n	800e402 <_printf_i+0xd2>
 800e3fa:	232d      	movs	r3, #45	; 0x2d
 800e3fc:	4276      	negs	r6, r6
 800e3fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e402:	485a      	ldr	r0, [pc, #360]	; (800e56c <_printf_i+0x23c>)
 800e404:	230a      	movs	r3, #10
 800e406:	e012      	b.n	800e42e <_printf_i+0xfe>
 800e408:	682b      	ldr	r3, [r5, #0]
 800e40a:	6820      	ldr	r0, [r4, #0]
 800e40c:	1d19      	adds	r1, r3, #4
 800e40e:	6029      	str	r1, [r5, #0]
 800e410:	0605      	lsls	r5, r0, #24
 800e412:	d501      	bpl.n	800e418 <_printf_i+0xe8>
 800e414:	681e      	ldr	r6, [r3, #0]
 800e416:	e002      	b.n	800e41e <_printf_i+0xee>
 800e418:	0641      	lsls	r1, r0, #25
 800e41a:	d5fb      	bpl.n	800e414 <_printf_i+0xe4>
 800e41c:	881e      	ldrh	r6, [r3, #0]
 800e41e:	4853      	ldr	r0, [pc, #332]	; (800e56c <_printf_i+0x23c>)
 800e420:	2f6f      	cmp	r7, #111	; 0x6f
 800e422:	bf0c      	ite	eq
 800e424:	2308      	moveq	r3, #8
 800e426:	230a      	movne	r3, #10
 800e428:	2100      	movs	r1, #0
 800e42a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e42e:	6865      	ldr	r5, [r4, #4]
 800e430:	60a5      	str	r5, [r4, #8]
 800e432:	2d00      	cmp	r5, #0
 800e434:	bfa2      	ittt	ge
 800e436:	6821      	ldrge	r1, [r4, #0]
 800e438:	f021 0104 	bicge.w	r1, r1, #4
 800e43c:	6021      	strge	r1, [r4, #0]
 800e43e:	b90e      	cbnz	r6, 800e444 <_printf_i+0x114>
 800e440:	2d00      	cmp	r5, #0
 800e442:	d04b      	beq.n	800e4dc <_printf_i+0x1ac>
 800e444:	4615      	mov	r5, r2
 800e446:	fbb6 f1f3 	udiv	r1, r6, r3
 800e44a:	fb03 6711 	mls	r7, r3, r1, r6
 800e44e:	5dc7      	ldrb	r7, [r0, r7]
 800e450:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e454:	4637      	mov	r7, r6
 800e456:	42bb      	cmp	r3, r7
 800e458:	460e      	mov	r6, r1
 800e45a:	d9f4      	bls.n	800e446 <_printf_i+0x116>
 800e45c:	2b08      	cmp	r3, #8
 800e45e:	d10b      	bne.n	800e478 <_printf_i+0x148>
 800e460:	6823      	ldr	r3, [r4, #0]
 800e462:	07de      	lsls	r6, r3, #31
 800e464:	d508      	bpl.n	800e478 <_printf_i+0x148>
 800e466:	6923      	ldr	r3, [r4, #16]
 800e468:	6861      	ldr	r1, [r4, #4]
 800e46a:	4299      	cmp	r1, r3
 800e46c:	bfde      	ittt	le
 800e46e:	2330      	movle	r3, #48	; 0x30
 800e470:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e474:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e478:	1b52      	subs	r2, r2, r5
 800e47a:	6122      	str	r2, [r4, #16]
 800e47c:	f8cd a000 	str.w	sl, [sp]
 800e480:	464b      	mov	r3, r9
 800e482:	aa03      	add	r2, sp, #12
 800e484:	4621      	mov	r1, r4
 800e486:	4640      	mov	r0, r8
 800e488:	f7ff fee4 	bl	800e254 <_printf_common>
 800e48c:	3001      	adds	r0, #1
 800e48e:	d14a      	bne.n	800e526 <_printf_i+0x1f6>
 800e490:	f04f 30ff 	mov.w	r0, #4294967295
 800e494:	b004      	add	sp, #16
 800e496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49a:	6823      	ldr	r3, [r4, #0]
 800e49c:	f043 0320 	orr.w	r3, r3, #32
 800e4a0:	6023      	str	r3, [r4, #0]
 800e4a2:	4833      	ldr	r0, [pc, #204]	; (800e570 <_printf_i+0x240>)
 800e4a4:	2778      	movs	r7, #120	; 0x78
 800e4a6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	6829      	ldr	r1, [r5, #0]
 800e4ae:	061f      	lsls	r7, r3, #24
 800e4b0:	f851 6b04 	ldr.w	r6, [r1], #4
 800e4b4:	d402      	bmi.n	800e4bc <_printf_i+0x18c>
 800e4b6:	065f      	lsls	r7, r3, #25
 800e4b8:	bf48      	it	mi
 800e4ba:	b2b6      	uxthmi	r6, r6
 800e4bc:	07df      	lsls	r7, r3, #31
 800e4be:	bf48      	it	mi
 800e4c0:	f043 0320 	orrmi.w	r3, r3, #32
 800e4c4:	6029      	str	r1, [r5, #0]
 800e4c6:	bf48      	it	mi
 800e4c8:	6023      	strmi	r3, [r4, #0]
 800e4ca:	b91e      	cbnz	r6, 800e4d4 <_printf_i+0x1a4>
 800e4cc:	6823      	ldr	r3, [r4, #0]
 800e4ce:	f023 0320 	bic.w	r3, r3, #32
 800e4d2:	6023      	str	r3, [r4, #0]
 800e4d4:	2310      	movs	r3, #16
 800e4d6:	e7a7      	b.n	800e428 <_printf_i+0xf8>
 800e4d8:	4824      	ldr	r0, [pc, #144]	; (800e56c <_printf_i+0x23c>)
 800e4da:	e7e4      	b.n	800e4a6 <_printf_i+0x176>
 800e4dc:	4615      	mov	r5, r2
 800e4de:	e7bd      	b.n	800e45c <_printf_i+0x12c>
 800e4e0:	682b      	ldr	r3, [r5, #0]
 800e4e2:	6826      	ldr	r6, [r4, #0]
 800e4e4:	6961      	ldr	r1, [r4, #20]
 800e4e6:	1d18      	adds	r0, r3, #4
 800e4e8:	6028      	str	r0, [r5, #0]
 800e4ea:	0635      	lsls	r5, r6, #24
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	d501      	bpl.n	800e4f4 <_printf_i+0x1c4>
 800e4f0:	6019      	str	r1, [r3, #0]
 800e4f2:	e002      	b.n	800e4fa <_printf_i+0x1ca>
 800e4f4:	0670      	lsls	r0, r6, #25
 800e4f6:	d5fb      	bpl.n	800e4f0 <_printf_i+0x1c0>
 800e4f8:	8019      	strh	r1, [r3, #0]
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	6123      	str	r3, [r4, #16]
 800e4fe:	4615      	mov	r5, r2
 800e500:	e7bc      	b.n	800e47c <_printf_i+0x14c>
 800e502:	682b      	ldr	r3, [r5, #0]
 800e504:	1d1a      	adds	r2, r3, #4
 800e506:	602a      	str	r2, [r5, #0]
 800e508:	681d      	ldr	r5, [r3, #0]
 800e50a:	6862      	ldr	r2, [r4, #4]
 800e50c:	2100      	movs	r1, #0
 800e50e:	4628      	mov	r0, r5
 800e510:	f7f1 fe86 	bl	8000220 <memchr>
 800e514:	b108      	cbz	r0, 800e51a <_printf_i+0x1ea>
 800e516:	1b40      	subs	r0, r0, r5
 800e518:	6060      	str	r0, [r4, #4]
 800e51a:	6863      	ldr	r3, [r4, #4]
 800e51c:	6123      	str	r3, [r4, #16]
 800e51e:	2300      	movs	r3, #0
 800e520:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e524:	e7aa      	b.n	800e47c <_printf_i+0x14c>
 800e526:	6923      	ldr	r3, [r4, #16]
 800e528:	462a      	mov	r2, r5
 800e52a:	4649      	mov	r1, r9
 800e52c:	4640      	mov	r0, r8
 800e52e:	47d0      	blx	sl
 800e530:	3001      	adds	r0, #1
 800e532:	d0ad      	beq.n	800e490 <_printf_i+0x160>
 800e534:	6823      	ldr	r3, [r4, #0]
 800e536:	079b      	lsls	r3, r3, #30
 800e538:	d413      	bmi.n	800e562 <_printf_i+0x232>
 800e53a:	68e0      	ldr	r0, [r4, #12]
 800e53c:	9b03      	ldr	r3, [sp, #12]
 800e53e:	4298      	cmp	r0, r3
 800e540:	bfb8      	it	lt
 800e542:	4618      	movlt	r0, r3
 800e544:	e7a6      	b.n	800e494 <_printf_i+0x164>
 800e546:	2301      	movs	r3, #1
 800e548:	4632      	mov	r2, r6
 800e54a:	4649      	mov	r1, r9
 800e54c:	4640      	mov	r0, r8
 800e54e:	47d0      	blx	sl
 800e550:	3001      	adds	r0, #1
 800e552:	d09d      	beq.n	800e490 <_printf_i+0x160>
 800e554:	3501      	adds	r5, #1
 800e556:	68e3      	ldr	r3, [r4, #12]
 800e558:	9903      	ldr	r1, [sp, #12]
 800e55a:	1a5b      	subs	r3, r3, r1
 800e55c:	42ab      	cmp	r3, r5
 800e55e:	dcf2      	bgt.n	800e546 <_printf_i+0x216>
 800e560:	e7eb      	b.n	800e53a <_printf_i+0x20a>
 800e562:	2500      	movs	r5, #0
 800e564:	f104 0619 	add.w	r6, r4, #25
 800e568:	e7f5      	b.n	800e556 <_printf_i+0x226>
 800e56a:	bf00      	nop
 800e56c:	0801ddc9 	.word	0x0801ddc9
 800e570:	0801ddda 	.word	0x0801ddda

0800e574 <memmove>:
 800e574:	4288      	cmp	r0, r1
 800e576:	b510      	push	{r4, lr}
 800e578:	eb01 0402 	add.w	r4, r1, r2
 800e57c:	d902      	bls.n	800e584 <memmove+0x10>
 800e57e:	4284      	cmp	r4, r0
 800e580:	4623      	mov	r3, r4
 800e582:	d807      	bhi.n	800e594 <memmove+0x20>
 800e584:	1e43      	subs	r3, r0, #1
 800e586:	42a1      	cmp	r1, r4
 800e588:	d008      	beq.n	800e59c <memmove+0x28>
 800e58a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e58e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e592:	e7f8      	b.n	800e586 <memmove+0x12>
 800e594:	4402      	add	r2, r0
 800e596:	4601      	mov	r1, r0
 800e598:	428a      	cmp	r2, r1
 800e59a:	d100      	bne.n	800e59e <memmove+0x2a>
 800e59c:	bd10      	pop	{r4, pc}
 800e59e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5a6:	e7f7      	b.n	800e598 <memmove+0x24>

0800e5a8 <_sbrk_r>:
 800e5a8:	b538      	push	{r3, r4, r5, lr}
 800e5aa:	4d06      	ldr	r5, [pc, #24]	; (800e5c4 <_sbrk_r+0x1c>)
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	4604      	mov	r4, r0
 800e5b0:	4608      	mov	r0, r1
 800e5b2:	602b      	str	r3, [r5, #0]
 800e5b4:	f7f5 fa44 	bl	8003a40 <_sbrk>
 800e5b8:	1c43      	adds	r3, r0, #1
 800e5ba:	d102      	bne.n	800e5c2 <_sbrk_r+0x1a>
 800e5bc:	682b      	ldr	r3, [r5, #0]
 800e5be:	b103      	cbz	r3, 800e5c2 <_sbrk_r+0x1a>
 800e5c0:	6023      	str	r3, [r4, #0]
 800e5c2:	bd38      	pop	{r3, r4, r5, pc}
 800e5c4:	200049fc 	.word	0x200049fc

0800e5c8 <memcpy>:
 800e5c8:	440a      	add	r2, r1
 800e5ca:	4291      	cmp	r1, r2
 800e5cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5d0:	d100      	bne.n	800e5d4 <memcpy+0xc>
 800e5d2:	4770      	bx	lr
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5de:	4291      	cmp	r1, r2
 800e5e0:	d1f9      	bne.n	800e5d6 <memcpy+0xe>
 800e5e2:	bd10      	pop	{r4, pc}

0800e5e4 <_realloc_r>:
 800e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e8:	4680      	mov	r8, r0
 800e5ea:	4614      	mov	r4, r2
 800e5ec:	460e      	mov	r6, r1
 800e5ee:	b921      	cbnz	r1, 800e5fa <_realloc_r+0x16>
 800e5f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	f7ff bc49 	b.w	800de8c <_malloc_r>
 800e5fa:	b92a      	cbnz	r2, 800e608 <_realloc_r+0x24>
 800e5fc:	f7ff fbda 	bl	800ddb4 <_free_r>
 800e600:	4625      	mov	r5, r4
 800e602:	4628      	mov	r0, r5
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	f000 f81b 	bl	800e642 <_malloc_usable_size_r>
 800e60c:	4284      	cmp	r4, r0
 800e60e:	4607      	mov	r7, r0
 800e610:	d802      	bhi.n	800e618 <_realloc_r+0x34>
 800e612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e616:	d812      	bhi.n	800e63e <_realloc_r+0x5a>
 800e618:	4621      	mov	r1, r4
 800e61a:	4640      	mov	r0, r8
 800e61c:	f7ff fc36 	bl	800de8c <_malloc_r>
 800e620:	4605      	mov	r5, r0
 800e622:	2800      	cmp	r0, #0
 800e624:	d0ed      	beq.n	800e602 <_realloc_r+0x1e>
 800e626:	42bc      	cmp	r4, r7
 800e628:	4622      	mov	r2, r4
 800e62a:	4631      	mov	r1, r6
 800e62c:	bf28      	it	cs
 800e62e:	463a      	movcs	r2, r7
 800e630:	f7ff ffca 	bl	800e5c8 <memcpy>
 800e634:	4631      	mov	r1, r6
 800e636:	4640      	mov	r0, r8
 800e638:	f7ff fbbc 	bl	800ddb4 <_free_r>
 800e63c:	e7e1      	b.n	800e602 <_realloc_r+0x1e>
 800e63e:	4635      	mov	r5, r6
 800e640:	e7df      	b.n	800e602 <_realloc_r+0x1e>

0800e642 <_malloc_usable_size_r>:
 800e642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e646:	1f18      	subs	r0, r3, #4
 800e648:	2b00      	cmp	r3, #0
 800e64a:	bfbc      	itt	lt
 800e64c:	580b      	ldrlt	r3, [r1, r0]
 800e64e:	18c0      	addlt	r0, r0, r3
 800e650:	4770      	bx	lr
	...

0800e654 <_init>:
 800e654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e656:	bf00      	nop
 800e658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e65a:	bc08      	pop	{r3}
 800e65c:	469e      	mov	lr, r3
 800e65e:	4770      	bx	lr

0800e660 <_fini>:
 800e660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e662:	bf00      	nop
 800e664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e666:	bc08      	pop	{r3}
 800e668:	469e      	mov	lr, r3
 800e66a:	4770      	bx	lr
