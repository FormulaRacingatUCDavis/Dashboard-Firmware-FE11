
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cdec  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d49c  0800cfb4  0800cfb4  0001cfb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a450  0801a450  00030160  2**0
                  CONTENTS
  4 .ARM          00000008  0801a450  0801a450  0002a450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a458  0801a458  00030160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a458  0801a458  0002a458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a45c  0801a45c  0002a45c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  0801a460  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f94  20000160  0801a5c0  00030160  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200020f4  0801a5c0  000320f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030160  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030190  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027381  00000000  00000000  000301d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005136  00000000  00000000  00057554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002270  00000000  00000000  0005c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a84  00000000  00000000  0005e900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002e1f9  00000000  00000000  00060384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a2dc  00000000  00000000  0008e57d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107daa  00000000  00000000  000b8859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000096c0  00000000  00000000  001c0604  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000092  00000000  00000000  001c9cc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000160 	.word	0x20000160
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800cf9c 	.word	0x0800cf9c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000164 	.word	0x20000164
 8000204:	0800cf9c 	.word	0x0800cf9c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <save_can_rx_data>:
volatile uint16_t back_left_wheel_speed = 0;


/************ CAN RX ************/

void save_can_rx_data(CAN_RxHeaderTypeDef RxHeader, uint8_t RxData[]) {
 8000504:	b084      	sub	sp, #16
 8000506:	b580      	push	{r7, lr}
 8000508:	b082      	sub	sp, #8
 800050a:	af00      	add	r7, sp, #0
 800050c:	f107 0c10 	add.w	ip, r7, #16
 8000510:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // gets message and updates values
	switch (RxHeader.StdId) {
 8000514:	693b      	ldr	r3, [r7, #16]
 8000516:	f240 4273 	movw	r2, #1139	; 0x473
 800051a:	4293      	cmp	r3, r2
 800051c:	f200 80be 	bhi.w	800069c <save_can_rx_data+0x198>
 8000520:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000524:	d218      	bcs.n	8000558 <save_can_rx_data+0x54>
 8000526:	f240 3287 	movw	r2, #903	; 0x387
 800052a:	4293      	cmp	r3, r2
 800052c:	d04f      	beq.n	80005ce <save_can_rx_data+0xca>
 800052e:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 8000532:	f080 80b3 	bcs.w	800069c <save_can_rx_data+0x198>
 8000536:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 800053a:	d01d      	beq.n	8000578 <save_can_rx_data+0x74>
 800053c:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000540:	f200 80ac 	bhi.w	800069c <save_can_rx_data+0x198>
 8000544:	2bab      	cmp	r3, #171	; 0xab
 8000546:	d047      	beq.n	80005d8 <save_can_rx_data+0xd4>
 8000548:	2bab      	cmp	r3, #171	; 0xab
 800054a:	f200 80a7 	bhi.w	800069c <save_can_rx_data+0x198>
 800054e:	2ba7      	cmp	r3, #167	; 0xa7
 8000550:	d019      	beq.n	8000586 <save_can_rx_data+0x82>
 8000552:	2baa      	cmp	r3, #170	; 0xaa
 8000554:	d02a      	beq.n	80005ac <save_can_rx_data+0xa8>
			back_left_wheel_speed = (RxData[0] << 8) ;
			back_left_wheel_speed += RxData[1];
			break;
		default:
			// no valid input received
			break;
 8000556:	e0a1      	b.n	800069c <save_can_rx_data+0x198>
	switch (RxHeader.StdId) {
 8000558:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 800055c:	2b03      	cmp	r3, #3
 800055e:	f200 809d 	bhi.w	800069c <save_can_rx_data+0x198>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <save_can_rx_data+0x64>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	0800062b 	.word	0x0800062b
 800056c:	08000605 	.word	0x08000605
 8000570:	08000677 	.word	0x08000677
 8000574:	08000651 	.word	0x08000651
			PACK_TEMP = RxData[0];
 8000578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800057a:	781a      	ldrb	r2, [r3, #0]
 800057c:	4b4b      	ldr	r3, [pc, #300]	; (80006ac <save_can_rx_data+0x1a8>)
 800057e:	701a      	strb	r2, [r3, #0]
			temp_attenuate();
 8000580:	f000 fd57 	bl	8001032 <temp_attenuate>
			break;
 8000584:	e08b      	b.n	800069e <save_can_rx_data+0x19a>
			capacitor_volt = (RxData[0] << 8); // upper bits
 8000586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	b29b      	uxth	r3, r3
 800058c:	021b      	lsls	r3, r3, #8
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b47      	ldr	r3, [pc, #284]	; (80006b0 <save_can_rx_data+0x1ac>)
 8000592:	801a      	strh	r2, [r3, #0]
			capacitor_volt += RxData[1]; // lower bits
 8000594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000596:	3301      	adds	r3, #1
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	b29a      	uxth	r2, r3
 800059c:	4b44      	ldr	r3, [pc, #272]	; (80006b0 <save_can_rx_data+0x1ac>)
 800059e:	881b      	ldrh	r3, [r3, #0]
 80005a0:	b29b      	uxth	r3, r3
 80005a2:	4413      	add	r3, r2
 80005a4:	b29a      	uxth	r2, r3
 80005a6:	4b42      	ldr	r3, [pc, #264]	; (80006b0 <save_can_rx_data+0x1ac>)
 80005a8:	801a      	strh	r2, [r3, #0]
			break;
 80005aa:	e078      	b.n	800069e <save_can_rx_data+0x19a>
			mc_lockout = RxData[6] & 0b1000000;
 80005ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005ae:	3306      	adds	r3, #6
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	4b3e      	ldr	r3, [pc, #248]	; (80006b4 <save_can_rx_data+0x1b0>)
 80005ba:	701a      	strb	r2, [r3, #0]
			mc_enabled = RxData[6] & 0b1;
 80005bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005be:	3306      	adds	r3, #6
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	f003 0301 	and.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b3b      	ldr	r3, [pc, #236]	; (80006b8 <save_can_rx_data+0x1b4>)
 80005ca:	701a      	strb	r2, [r3, #0]
			break;
 80005cc:	e067      	b.n	800069e <save_can_rx_data+0x19a>
			shutdown_flags = RxData[2];
 80005ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005d0:	789a      	ldrb	r2, [r3, #2]
 80005d2:	4b3a      	ldr	r3, [pc, #232]	; (80006bc <save_can_rx_data+0x1b8>)
 80005d4:	701a      	strb	r2, [r3, #0]
			break;
 80005d6:	e062      	b.n	800069e <save_can_rx_data+0x19a>
			for (uint8_t i = 0; i < 8; i++) {
 80005d8:	2300      	movs	r3, #0
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	e00f      	b.n	80005fe <save_can_rx_data+0xfa>
				if (RxData[i] > 0) {
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80005e2:	4413      	add	r3, r2
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d003      	beq.n	80005f2 <save_can_rx_data+0xee>
					mc_fault = 1;
 80005ea:	4b35      	ldr	r3, [pc, #212]	; (80006c0 <save_can_rx_data+0x1bc>)
 80005ec:	2201      	movs	r2, #1
 80005ee:	701a      	strb	r2, [r3, #0]
					break;
 80005f0:	e008      	b.n	8000604 <save_can_rx_data+0x100>
					mc_fault = 0;
 80005f2:	4b33      	ldr	r3, [pc, #204]	; (80006c0 <save_can_rx_data+0x1bc>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 80005f8:	79fb      	ldrb	r3, [r7, #7]
 80005fa:	3301      	adds	r3, #1
 80005fc:	71fb      	strb	r3, [r7, #7]
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b07      	cmp	r3, #7
 8000602:	d9ec      	bls.n	80005de <save_can_rx_data+0xda>
			front_right_wheel_speed = (RxData[0] << 8) ;
 8000604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	b29b      	uxth	r3, r3
 800060a:	021b      	lsls	r3, r3, #8
 800060c:	b29a      	uxth	r2, r3
 800060e:	4b2d      	ldr	r3, [pc, #180]	; (80006c4 <save_can_rx_data+0x1c0>)
 8000610:	801a      	strh	r2, [r3, #0]
			front_right_wheel_speed += RxData[1];
 8000612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000614:	3301      	adds	r3, #1
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	b29a      	uxth	r2, r3
 800061a:	4b2a      	ldr	r3, [pc, #168]	; (80006c4 <save_can_rx_data+0x1c0>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	b29b      	uxth	r3, r3
 8000620:	4413      	add	r3, r2
 8000622:	b29a      	uxth	r2, r3
 8000624:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <save_can_rx_data+0x1c0>)
 8000626:	801a      	strh	r2, [r3, #0]
			break;
 8000628:	e039      	b.n	800069e <save_can_rx_data+0x19a>
			front_left_wheel_speed = (RxData[0] << 8) ;
 800062a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b29b      	uxth	r3, r3
 8000630:	021b      	lsls	r3, r3, #8
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <save_can_rx_data+0x1c4>)
 8000636:	801a      	strh	r2, [r3, #0]
			front_left_wheel_speed += RxData[1];
 8000638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800063a:	3301      	adds	r3, #1
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b21      	ldr	r3, [pc, #132]	; (80006c8 <save_can_rx_data+0x1c4>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	b29b      	uxth	r3, r3
 8000646:	4413      	add	r3, r2
 8000648:	b29a      	uxth	r2, r3
 800064a:	4b1f      	ldr	r3, [pc, #124]	; (80006c8 <save_can_rx_data+0x1c4>)
 800064c:	801a      	strh	r2, [r3, #0]
			break;
 800064e:	e026      	b.n	800069e <save_can_rx_data+0x19a>
			back_right_wheel_speed = (RxData[0] << 8) ;
 8000650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	b29b      	uxth	r3, r3
 8000656:	021b      	lsls	r3, r3, #8
 8000658:	b29a      	uxth	r2, r3
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <save_can_rx_data+0x1c8>)
 800065c:	801a      	strh	r2, [r3, #0]
			back_right_wheel_speed += RxData[1];
 800065e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000660:	3301      	adds	r3, #1
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	b29a      	uxth	r2, r3
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <save_can_rx_data+0x1c8>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	b29b      	uxth	r3, r3
 800066c:	4413      	add	r3, r2
 800066e:	b29a      	uxth	r2, r3
 8000670:	4b16      	ldr	r3, [pc, #88]	; (80006cc <save_can_rx_data+0x1c8>)
 8000672:	801a      	strh	r2, [r3, #0]
			break;
 8000674:	e013      	b.n	800069e <save_can_rx_data+0x19a>
			back_left_wheel_speed = (RxData[0] << 8) ;
 8000676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	b29b      	uxth	r3, r3
 800067c:	021b      	lsls	r3, r3, #8
 800067e:	b29a      	uxth	r2, r3
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <save_can_rx_data+0x1cc>)
 8000682:	801a      	strh	r2, [r3, #0]
			back_left_wheel_speed += RxData[1];
 8000684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000686:	3301      	adds	r3, #1
 8000688:	781b      	ldrb	r3, [r3, #0]
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <save_can_rx_data+0x1cc>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	b29b      	uxth	r3, r3
 8000692:	4413      	add	r3, r2
 8000694:	b29a      	uxth	r2, r3
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <save_can_rx_data+0x1cc>)
 8000698:	801a      	strh	r2, [r3, #0]
			break;
 800069a:	e000      	b.n	800069e <save_can_rx_data+0x19a>
			break;
 800069c:	bf00      	nop
	}

}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006a8:	b004      	add	sp, #16
 80006aa:	4770      	bx	lr
 80006ac:	20000180 	.word	0x20000180
 80006b0:	2000017e 	.word	0x2000017e
 80006b4:	2000017c 	.word	0x2000017c
 80006b8:	2000017d 	.word	0x2000017d
 80006bc:	20000000 	.word	0x20000000
 80006c0:	20000181 	.word	0x20000181
 80006c4:	20000182 	.word	0x20000182
 80006c8:	20000184 	.word	0x20000184
 80006cc:	20000186 	.word	0x20000186
 80006d0:	20000188 	.word	0x20000188

080006d4 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
	SSD1963_Init();
 80006d8:	f001 fe16 	bl	8002308 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 80006dc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80006e0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80006e4:	490b      	ldr	r1, [pc, #44]	; (8000714 <Display_Init+0x40>)
 80006e6:	480c      	ldr	r0, [pc, #48]	; (8000718 <Display_Init+0x44>)
 80006e8:	f001 f892 	bl	8001810 <UG_Init>

	UG_FontSetVSpace(0);
 80006ec:	2000      	movs	r0, #0
 80006ee:	f001 fb33 	bl	8001d58 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 80006f2:	2000      	movs	r0, #0
 80006f4:	f001 fb1c 	bl	8001d30 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80006f8:	4908      	ldr	r1, [pc, #32]	; (800071c <Display_Init+0x48>)
 80006fa:	2001      	movs	r0, #1
 80006fc:	f001 fdd8 	bl	80022b0 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 8000700:	4907      	ldr	r1, [pc, #28]	; (8000720 <Display_Init+0x4c>)
 8000702:	2000      	movs	r0, #0
 8000704:	f001 fdd4 	bl	80022b0 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 8000708:	4906      	ldr	r1, [pc, #24]	; (8000724 <Display_Init+0x50>)
 800070a:	2003      	movs	r0, #3
 800070c:	f001 fdd0 	bl	80022b0 <UG_DriverRegister>
}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	080024cb 	.word	0x080024cb
 8000718:	2000018c 	.word	0x2000018c
 800071c:	08002555 	.word	0x08002555
 8000720:	0800261f 	.word	0x0800261f
 8000724:	080026d3 	.word	0x080026d3

08000728 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 800072e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000732:	f001 f919 	bl	8001968 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 8000736:	231f      	movs	r3, #31
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800073e:	220a      	movs	r2, #10
 8000740:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000744:	2000      	movs	r0, #0
 8000746:	f001 f931 	bl	80019ac <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 800074a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800074e:	9300      	str	r3, [sp, #0]
 8000750:	230a      	movs	r3, #10
 8000752:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000756:	2100      	movs	r1, #0
 8000758:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800075c:	f001 f926 	bl	80019ac <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8000760:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	f44f 7388 	mov.w	r3, #272	; 0x110
 800076a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800076e:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000772:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8000776:	f001 f919 	bl	80019ac <UG_FillFrame>
}
 800077a:	bf00      	nop
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <HAL_CAN_RxFifo0MsgPendingCallback>:
CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

// this has to be in main I think?
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000780:	b590      	push	{r4, r7, lr}
 8000782:	b087      	sub	sp, #28
 8000784:	af04      	add	r7, sp, #16
 8000786:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800078a:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 800078c:	2100      	movs	r1, #0
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8000790:	f002 fc8f 	bl	80030b2 <HAL_CAN_GetRxMessage>
	save_can_rx_data(RxHeader, RxData);
 8000794:	4b0a      	ldr	r3, [pc, #40]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8000796:	4a09      	ldr	r2, [pc, #36]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8000798:	9203      	str	r2, [sp, #12]
 800079a:	466c      	mov	r4, sp
 800079c:	f103 0210 	add.w	r2, r3, #16
 80007a0:	ca07      	ldmia	r2, {r0, r1, r2}
 80007a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007a8:	f7ff feac 	bl	8000504 <save_can_rx_data>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_1);
 80007ac:	2102      	movs	r1, #2
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 80007b0:	f003 fa97 	bl	8003ce2 <HAL_GPIO_TogglePin>
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	bd90      	pop	{r4, r7, pc}
 80007bc:	20000584 	.word	0x20000584
 80007c0:	20000568 	.word	0x20000568
 80007c4:	200002a0 	.word	0x200002a0
 80007c8:	40020400 	.word	0x40020400

080007cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007d2:	f002 f85e 	bl	8002892 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007d6:	f000 f851 	bl	800087c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007da:	f000 fb65 	bl	8000ea8 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007de:	f000 f95d 	bl	8000a9c <MX_CAN1_Init>
  MX_CAN2_Init();
 80007e2:	f000 f98f 	bl	8000b04 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 80007e6:	f000 f9c1 	bl	8000b6c <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 80007ea:	f000 f8b3 	bl	8000954 <MX_ADC1_Init>
  MX_ADC3_Init();
 80007ee:	f000 f903 	bl	80009f8 <MX_ADC3_Init>
  MX_TIM2_Init();
 80007f2:	f000 f9eb 	bl	8000bcc <MX_TIM2_Init>
  MX_TIM4_Init();
 80007f6:	f000 fa3f 	bl	8000c78 <MX_TIM4_Init>
  MX_UART4_Init();
 80007fa:	f000 fa93 	bl	8000d24 <MX_UART4_Init>
  MX_UART7_Init();
 80007fe:	f000 fac1 	bl	8000d84 <MX_UART7_Init>
  MX_FMC_Init();
 8000802:	f000 faef 	bl	8000de4 <MX_FMC_Init>
  MX_USB_DEVICE_Init();
 8000806:	f00b fd21 	bl	800c24c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  init_sensors();
 800080a:	f000 fc19 	bl	8001040 <init_sensors>

  Display_Init();
 800080e:	f7ff ff61 	bl	80006d4 <Display_Init>
  UG_FontSelect(&FONT_32X53);
 8000812:	4816      	ldr	r0, [pc, #88]	; (800086c <main+0xa0>)
 8000814:	f001 f892 	bl	800193c <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 8000818:	2000      	movs	r0, #0
 800081a:	f001 fa77 	bl	8001d0c <UG_SetBackcolor>
  UG_SetForecolor(C_WHITE);
 800081e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000822:	f001 fa61 	bl	8001ce8 <UG_SetForecolor>

  Display_CalibrateScreen();
 8000826:	f7ff ff7f 	bl	8000728 <Display_CalibrateScreen>
  HAL_Delay(5000);
 800082a:	f241 3088 	movw	r0, #5000	; 0x1388
 800082e:	f002 f88d 	bl	800294c <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  UG_PutString(0, 0, "Hello");
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <main+0xa4>)
 8000834:	2100      	movs	r1, #0
 8000836:	2000      	movs	r0, #0
 8000838:	f001 f928 	bl	8001a8c <UG_PutString>
	  UG_PutColorString(50, 50, "It's working", C_RED, C_WHITE);
 800083c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000846:	4a0b      	ldr	r2, [pc, #44]	; (8000874 <main+0xa8>)
 8000848:	2132      	movs	r1, #50	; 0x32
 800084a:	2032      	movs	r0, #50	; 0x32
 800084c:	f001 f9a4 	bl	8001b98 <UG_PutColorString>
	  UG_PutColorString(0, 110, "still working", C_BLACK, C_WHITE);
 8000850:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000854:	9300      	str	r3, [sp, #0]
 8000856:	2300      	movs	r3, #0
 8000858:	4a07      	ldr	r2, [pc, #28]	; (8000878 <main+0xac>)
 800085a:	216e      	movs	r1, #110	; 0x6e
 800085c:	2000      	movs	r0, #0
 800085e:	f001 f99b 	bl	8001b98 <UG_PutColorString>
	  HAL_Delay(1000);
 8000862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000866:	f002 f871 	bl	800294c <HAL_Delay>
	  UG_PutString(0, 0, "Hello");
 800086a:	e7e2      	b.n	8000832 <main+0x66>
 800086c:	0801a43c 	.word	0x0801a43c
 8000870:	0800cfb4 	.word	0x0800cfb4
 8000874:	0800cfbc 	.word	0x0800cfbc
 8000878:	0800cfcc 	.word	0x0800cfcc

0800087c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b094      	sub	sp, #80	; 0x50
 8000880:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000882:	f107 0320 	add.w	r3, r7, #32
 8000886:	2230      	movs	r2, #48	; 0x30
 8000888:	2100      	movs	r1, #0
 800088a:	4618      	mov	r0, r3
 800088c:	f00c faf6 	bl	800ce7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a0:	4b2a      	ldr	r3, [pc, #168]	; (800094c <SystemClock_Config+0xd0>)
 80008a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008a4:	4a29      	ldr	r2, [pc, #164]	; (800094c <SystemClock_Config+0xd0>)
 80008a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008aa:	6413      	str	r3, [r2, #64]	; 0x40
 80008ac:	4b27      	ldr	r3, [pc, #156]	; (800094c <SystemClock_Config+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008b8:	4b25      	ldr	r3, [pc, #148]	; (8000950 <SystemClock_Config+0xd4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a24      	ldr	r2, [pc, #144]	; (8000950 <SystemClock_Config+0xd4>)
 80008be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008c2:	6013      	str	r3, [r2, #0]
 80008c4:	4b22      	ldr	r3, [pc, #136]	; (8000950 <SystemClock_Config+0xd4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008da:	2302      	movs	r3, #2
 80008dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80008e4:	2308      	movs	r3, #8
 80008e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008e8:	23d8      	movs	r3, #216	; 0xd8
 80008ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008ec:	2302      	movs	r3, #2
 80008ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008f0:	2309      	movs	r3, #9
 80008f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f4:	f107 0320 	add.w	r3, r7, #32
 80008f8:	4618      	mov	r0, r3
 80008fa:	f004 fd15 	bl	8005328 <HAL_RCC_OscConfig>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000904:	f000 fb90 	bl	8001028 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000908:	f004 fcbe 	bl	8005288 <HAL_PWREx_EnableOverDrive>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000912:	f000 fb89 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2302      	movs	r3, #2
 800091c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000922:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000926:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000928:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800092c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	2107      	movs	r1, #7
 8000934:	4618      	mov	r0, r3
 8000936:	f004 ff9b 	bl	8005870 <HAL_RCC_ClockConfig>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000940:	f000 fb72 	bl	8001028 <Error_Handler>
  }
}
 8000944:	bf00      	nop
 8000946:	3750      	adds	r7, #80	; 0x50
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800
 8000950:	40007000 	.word	0x40007000

08000954 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800095a:	463b      	mov	r3, r7
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <MX_ADC1_Init+0x98>)
 8000968:	4a21      	ldr	r2, [pc, #132]	; (80009f0 <MX_ADC1_Init+0x9c>)
 800096a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800096c:	4b1f      	ldr	r3, [pc, #124]	; (80009ec <MX_ADC1_Init+0x98>)
 800096e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <MX_ADC1_Init+0x98>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <MX_ADC1_Init+0x98>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000980:	4b1a      	ldr	r3, [pc, #104]	; (80009ec <MX_ADC1_Init+0x98>)
 8000982:	2200      	movs	r2, #0
 8000984:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000986:	4b19      	ldr	r3, [pc, #100]	; (80009ec <MX_ADC1_Init+0x98>)
 8000988:	2200      	movs	r2, #0
 800098a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <MX_ADC1_Init+0x98>)
 8000990:	2200      	movs	r2, #0
 8000992:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000994:	4b15      	ldr	r3, [pc, #84]	; (80009ec <MX_ADC1_Init+0x98>)
 8000996:	4a17      	ldr	r2, [pc, #92]	; (80009f4 <MX_ADC1_Init+0xa0>)
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800099a:	4b14      	ldr	r3, [pc, #80]	; (80009ec <MX_ADC1_Init+0x98>)
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009a0:	4b12      	ldr	r3, [pc, #72]	; (80009ec <MX_ADC1_Init+0x98>)
 80009a2:	2201      	movs	r2, #1
 80009a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <MX_ADC1_Init+0x98>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009ae:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <MX_ADC1_Init+0x98>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009b4:	480d      	ldr	r0, [pc, #52]	; (80009ec <MX_ADC1_Init+0x98>)
 80009b6:	f001 ffed 	bl	8002994 <HAL_ADC_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009c0:	f000 fb32 	bl	8001028 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80009c4:	230a      	movs	r3, #10
 80009c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009c8:	2301      	movs	r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009cc:	2300      	movs	r3, #0
 80009ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009d0:	463b      	mov	r3, r7
 80009d2:	4619      	mov	r1, r3
 80009d4:	4805      	ldr	r0, [pc, #20]	; (80009ec <MX_ADC1_Init+0x98>)
 80009d6:	f002 f821 	bl	8002a1c <HAL_ADC_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009e0:	f000 fb22 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	3710      	adds	r7, #16
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	20000210 	.word	0x20000210
 80009f0:	40012000 	.word	0x40012000
 80009f4:	0f000001 	.word	0x0f000001

080009f8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009fe:	463b      	mov	r3, r7
 8000a00:	2200      	movs	r2, #0
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	605a      	str	r2, [r3, #4]
 8000a06:	609a      	str	r2, [r3, #8]
 8000a08:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a0c:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <MX_ADC3_Init+0x9c>)
 8000a0e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a16:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000a18:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a1e:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a3a:	4a17      	ldr	r2, [pc, #92]	; (8000a98 <MX_ADC3_Init+0xa0>)
 8000a3c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a54:	2201      	movs	r2, #1
 8000a56:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a5a:	f001 ff9b 	bl	8002994 <HAL_ADC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000a64:	f000 fae0 	bl	8001028 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a68:	2308      	movs	r3, #8
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000a74:	463b      	mov	r3, r7
 8000a76:	4619      	mov	r1, r3
 8000a78:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_ADC3_Init+0x98>)
 8000a7a:	f001 ffcf 	bl	8002a1c <HAL_ADC_ConfigChannel>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000a84:	f000 fad0 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000a88:	bf00      	nop
 8000a8a:	3710      	adds	r7, #16
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000258 	.word	0x20000258
 8000a94:	40012200 	.word	0x40012200
 8000a98:	0f000001 	.word	0x0f000001

08000a9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000aa0:	4b16      	ldr	r3, [pc, #88]	; (8000afc <MX_CAN1_Init+0x60>)
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_CAN1_Init+0x64>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_CAN1_Init+0x60>)
 8000aa8:	2212      	movs	r2, #18
 8000aaa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000aac:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_CAN1_Init+0x60>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000ab8:	4b10      	ldr	r3, [pc, #64]	; (8000afc <MX_CAN1_Init+0x60>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ac4:	4b0d      	ldr	r3, [pc, #52]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_CAN1_Init+0x60>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_CAN1_Init+0x60>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000ae8:	4804      	ldr	r0, [pc, #16]	; (8000afc <MX_CAN1_Init+0x60>)
 8000aea:	f002 f9e7 	bl	8002ebc <HAL_CAN_Init>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000af4:	f000 fa98 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002a0 	.word	0x200002a0
 8000b00:	40006400 	.word	0x40006400

08000b04 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b08:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b0a:	4a17      	ldr	r2, [pc, #92]	; (8000b68 <MX_CAN2_Init+0x64>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 8000b0e:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b10:	2212      	movs	r2, #18
 8000b12:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b14:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b1a:	4b12      	ldr	r3, [pc, #72]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000b20:	4b10      	ldr	r3, [pc, #64]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000b26:	4b0f      	ldr	r3, [pc, #60]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000b2c:	4b0d      	ldr	r3, [pc, #52]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_CAN2_Init+0x60>)
 8000b52:	f002 f9b3 	bl	8002ebc <HAL_CAN_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_CAN2_Init+0x5c>
  {
    Error_Handler();
 8000b5c:	f000 fa64 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200002c8 	.word	0x200002c8
 8000b68:	40006800 	.word	0x40006800

08000b6c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_SDMMC1_SD_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000b7c:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000b82:	4b10      	ldr	r3, [pc, #64]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000b88:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b8e:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 8000b9c:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000b9e:	f005 fc7b 	bl	8006498 <HAL_SD_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SDMMC1_SD_Init+0x40>
  {
    Error_Handler();
 8000ba8:	f000 fa3e 	bl	8001028 <Error_Handler>
  }
  if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8000bac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bb0:	4804      	ldr	r0, [pc, #16]	; (8000bc4 <MX_SDMMC1_SD_Init+0x58>)
 8000bb2:	f005 fecd 	bl	8006950 <HAL_SD_ConfigWideBusOperation>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_SDMMC1_SD_Init+0x54>
  {
    Error_Handler();
 8000bbc:	f000 fa34 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200002f0 	.word	0x200002f0
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b088      	sub	sp, #32
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
 8000be0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be2:	463b      	mov	r3, r7
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bec:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bf2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bfa:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c00:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000c02:	f04f 32ff 	mov.w	r2, #4294967295
 8000c06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c08:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c14:	4817      	ldr	r0, [pc, #92]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000c16:	f006 fa42 	bl	800709e <HAL_TIM_Base_Init>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000c20:	f000 fa02 	bl	8001028 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c24:	2307      	movs	r3, #7
 8000c26:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000c28:	2370      	movs	r3, #112	; 0x70
 8000c2a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000c30:	2300      	movs	r3, #0
 8000c32:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000c38:	f107 030c 	add.w	r3, r7, #12
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000c40:	f006 fa84 	bl	800714c <HAL_TIM_SlaveConfigSynchro>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000c4a:	f000 f9ed 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c52:	2300      	movs	r3, #0
 8000c54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_TIM2_Init+0xa8>)
 8000c5c:	f006 fc6c 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000c66:	f000 f9df 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	20000374 	.word	0x20000374

08000c78 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
 8000c86:	605a      	str	r2, [r3, #4]
 8000c88:	609a      	str	r2, [r3, #8]
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c98:	4b20      	ldr	r3, [pc, #128]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000c9a:	4a21      	ldr	r2, [pc, #132]	; (8000d20 <MX_TIM4_Init+0xa8>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c9e:	4b1f      	ldr	r3, [pc, #124]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b1d      	ldr	r3, [pc, #116]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000caa:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cb0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000cbe:	4817      	ldr	r0, [pc, #92]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cc0:	f006 f9ed 	bl	800709e <HAL_TIM_Base_Init>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000cca:	f000 f9ad 	bl	8001028 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000cce:	2307      	movs	r3, #7
 8000cd0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 8000cd2:	2370      	movs	r3, #112	; 0x70
 8000cd4:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000cea:	f006 fa2f 	bl	800714c <HAL_TIM_SlaveConfigSynchro>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000cf4:	f000 f998 	bl	8001028 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000d00:	463b      	mov	r3, r7
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_TIM4_Init+0xa4>)
 8000d06:	f006 fc17 	bl	8007538 <HAL_TIMEx_MasterConfigSynchronization>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8000d10:	f000 f98a 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200003c0 	.word	0x200003c0
 8000d20:	40000800 	.word	0x40000800

08000d24 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d2a:	4a15      	ldr	r2, [pc, #84]	; (8000d80 <MX_UART4_Init+0x5c>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d34:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b0b      	ldr	r3, [pc, #44]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b09      	ldr	r3, [pc, #36]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d5a:	4b08      	ldr	r3, [pc, #32]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_UART4_Init+0x58>)
 8000d68:	f006 fc74 	bl	8007654 <HAL_UART_Init>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000d72:	f000 f959 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	bf00      	nop
 8000d7c:	2000040c 	.word	0x2000040c
 8000d80:	40004c00 	.word	0x40004c00

08000d84 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000d88:	4b14      	ldr	r3, [pc, #80]	; (8000ddc <MX_UART7_Init+0x58>)
 8000d8a:	4a15      	ldr	r2, [pc, #84]	; (8000de0 <MX_UART7_Init+0x5c>)
 8000d8c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000d8e:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_UART7_Init+0x58>)
 8000d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d94:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000d96:	4b11      	ldr	r3, [pc, #68]	; (8000ddc <MX_UART7_Init+0x58>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000d9c:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_UART7_Init+0x58>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000da2:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_UART7_Init+0x58>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000da8:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_UART7_Init+0x58>)
 8000daa:	220c      	movs	r2, #12
 8000dac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dae:	4b0b      	ldr	r3, [pc, #44]	; (8000ddc <MX_UART7_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000db4:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_UART7_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dba:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <MX_UART7_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dc0:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_UART7_Init+0x58>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000dc6:	4805      	ldr	r0, [pc, #20]	; (8000ddc <MX_UART7_Init+0x58>)
 8000dc8:	f006 fc44 	bl	8007654 <HAL_UART_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000dd2:	f000 f929 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000494 	.word	0x20000494
 8000de0:	40007800 	.word	0x40007800

08000de4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b088      	sub	sp, #32
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
 8000df4:	60da      	str	r2, [r3, #12]
 8000df6:	611a      	str	r2, [r3, #16]
 8000df8:	615a      	str	r2, [r3, #20]
 8000dfa:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000dfc:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000dfe:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e02:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e04:	4b26      	ldr	r3, [pc, #152]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e06:	4a27      	ldr	r2, [pc, #156]	; (8000ea4 <MX_FMC_Init+0xc0>)
 8000e08:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000e0a:	4b25      	ldr	r3, [pc, #148]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000e10:	4b23      	ldr	r3, [pc, #140]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000e16:	4b22      	ldr	r3, [pc, #136]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e1e:	2210      	movs	r2, #16
 8000e20:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e28:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e3a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e4e:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000e54:	4b12      	ldr	r3, [pc, #72]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000e5a:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000e66:	230f      	movs	r3, #15
 8000e68:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000e6a:	230f      	movs	r3, #15
 8000e6c:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000e6e:	23ff      	movs	r3, #255	; 0xff
 8000e70:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000e72:	230f      	movs	r3, #15
 8000e74:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000e76:	2310      	movs	r3, #16
 8000e78:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000e7a:	2311      	movs	r3, #17
 8000e7c:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	2200      	movs	r2, #0
 8000e86:	4619      	mov	r1, r3
 8000e88:	4805      	ldr	r0, [pc, #20]	; (8000ea0 <MX_FMC_Init+0xbc>)
 8000e8a:	f006 f8c0 	bl	800700e <HAL_SRAM_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000e94:	f000 f8c8 	bl	8001028 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000e98:	bf00      	nop
 8000e9a:	3720      	adds	r7, #32
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	2000051c 	.word	0x2000051c
 8000ea4:	a0000104 	.word	0xa0000104

08000ea8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08e      	sub	sp, #56	; 0x38
 8000eac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	601a      	str	r2, [r3, #0]
 8000eb6:	605a      	str	r2, [r3, #4]
 8000eb8:	609a      	str	r2, [r3, #8]
 8000eba:	60da      	str	r2, [r3, #12]
 8000ebc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ebe:	4b54      	ldr	r3, [pc, #336]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a53      	ldr	r2, [pc, #332]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ec4:	f043 0320 	orr.w	r3, r3, #32
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b51      	ldr	r3, [pc, #324]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0320 	and.w	r3, r3, #32
 8000ed2:	623b      	str	r3, [r7, #32]
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	4b4e      	ldr	r3, [pc, #312]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a4d      	ldr	r2, [pc, #308]	; (8001010 <MX_GPIO_Init+0x168>)
 8000edc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b4b      	ldr	r3, [pc, #300]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eea:	61fb      	str	r3, [r7, #28]
 8000eec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4b48      	ldr	r3, [pc, #288]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	4a47      	ldr	r2, [pc, #284]	; (8001010 <MX_GPIO_Init+0x168>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	6313      	str	r3, [r2, #48]	; 0x30
 8000efa:	4b45      	ldr	r3, [pc, #276]	; (8001010 <MX_GPIO_Init+0x168>)
 8000efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	61bb      	str	r3, [r7, #24]
 8000f04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b42      	ldr	r3, [pc, #264]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a41      	ldr	r2, [pc, #260]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	617b      	str	r3, [r7, #20]
 8000f1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f1e:	4b3c      	ldr	r3, [pc, #240]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	4a3b      	ldr	r2, [pc, #236]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f24:	f043 0310 	orr.w	r3, r3, #16
 8000f28:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2a:	4b39      	ldr	r3, [pc, #228]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	f003 0310 	and.w	r3, r3, #16
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b36      	ldr	r3, [pc, #216]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	4a35      	ldr	r2, [pc, #212]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	6313      	str	r3, [r2, #48]	; 0x30
 8000f42:	4b33      	ldr	r3, [pc, #204]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f4e:	4b30      	ldr	r3, [pc, #192]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a2f      	ldr	r2, [pc, #188]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f54:	f043 0308 	orr.w	r3, r3, #8
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0308 	and.w	r3, r3, #8
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a29      	ldr	r2, [pc, #164]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_GPIO_Init+0x168>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2108      	movs	r1, #8
 8000f82:	4824      	ldr	r0, [pc, #144]	; (8001014 <MX_GPIO_Init+0x16c>)
 8000f84:	f002 fe94 	bl	8003cb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS2_Pin;
 8000f88:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS2_GPIO_Port, &GPIO_InitStruct);
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	481e      	ldr	r0, [pc, #120]	; (8001018 <MX_GPIO_Init+0x170>)
 8000f9e:	f002 fcdb 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4819      	ldr	r0, [pc, #100]	; (800101c <MX_GPIO_Init+0x174>)
 8000fb6:	f002 fccf 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8000fba:	2308      	movs	r3, #8
 8000fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8000fca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4810      	ldr	r0, [pc, #64]	; (8001014 <MX_GPIO_Init+0x16c>)
 8000fd2:	f002 fcc1 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_2_Pin PG15 */
  GPIO_InitStruct.Pin = BUTTON_2_Pin|GPIO_PIN_15;
 8000fd6:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8000fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe8:	4619      	mov	r1, r3
 8000fea:	480d      	ldr	r0, [pc, #52]	; (8001020 <MX_GPIO_Init+0x178>)
 8000fec:	f002 fcb4 	bl	8003958 <HAL_GPIO_Init>

  /*Configure GPIO pin : BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = BAT_12V_MEASURE_Pin;
 8000ff0:	2308      	movs	r3, #8
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BAT_12V_MEASURE_GPIO_Port, &GPIO_InitStruct);
 8000ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001000:	4619      	mov	r1, r3
 8001002:	4808      	ldr	r0, [pc, #32]	; (8001024 <MX_GPIO_Init+0x17c>)
 8001004:	f002 fca8 	bl	8003958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001008:	bf00      	nop
 800100a:	3738      	adds	r7, #56	; 0x38
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40023800 	.word	0x40023800
 8001014:	40020000 	.word	0x40020000
 8001018:	40021400 	.word	0x40021400
 800101c:	40020800 	.word	0x40020800
 8001020:	40021800 	.word	0x40021800
 8001024:	40020400 	.word	0x40020400

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>

08001032 <temp_attenuate>:
//    	return (uint16_t)throttle / 2;	//return on 1:1/2 scale
//    }
	return 1;
}

void temp_attenuate() {
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
//    } else if (t < 8) {
//        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
//    } else if (t >= 8) {
//        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
//    }
}
 8001036:	bf00      	nop
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <init_sensors>:
    if(in > max) return max;
    if(in < min) return min;
    return in;
}

void init_sensors(){
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 8001044:	4b11      	ldr	r3, [pc, #68]	; (800108c <init_sensors+0x4c>)
 8001046:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800104a:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 800104c:	4b0f      	ldr	r3, [pc, #60]	; (800108c <init_sensors+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 8001052:	4b0e      	ldr	r3, [pc, #56]	; (800108c <init_sensors+0x4c>)
 8001054:	2201      	movs	r2, #1
 8001056:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <init_sensors+0x50>)
 800105a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800105e:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 8001060:	4b0b      	ldr	r3, [pc, #44]	; (8001090 <init_sensors+0x50>)
 8001062:	2200      	movs	r2, #0
 8001064:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 8001066:	4b0a      	ldr	r3, [pc, #40]	; (8001090 <init_sensors+0x50>)
 8001068:	2201      	movs	r2, #1
 800106a:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <init_sensors+0x54>)
 800106e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8001072:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <init_sensors+0x54>)
 8001076:	2200      	movs	r2, #0
 8001078:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <init_sensors+0x54>)
 800107c:	2201      	movs	r2, #1
 800107e:	80da      	strh	r2, [r3, #6]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	2000058c 	.word	0x2000058c
 8001090:	20000598 	.word	0x20000598
 8001094:	200005a4 	.word	0x200005a4

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <HAL_MspInit+0x44>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a0e      	ldr	r2, [pc, #56]	; (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <HAL_MspInit+0x44>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	; (80010dc <HAL_MspInit+0x44>)
 80010b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ba:	4a08      	ldr	r2, [pc, #32]	; (80010dc <HAL_MspInit+0x44>)
 80010bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c0:	6453      	str	r3, [r2, #68]	; 0x44
 80010c2:	4b06      	ldr	r3, [pc, #24]	; (80010dc <HAL_MspInit+0x44>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40023800 	.word	0x40023800

080010e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	; 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a2a      	ldr	r2, [pc, #168]	; (80011a8 <HAL_ADC_MspInit+0xc8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d124      	bne.n	800114c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001102:	4b2a      	ldr	r3, [pc, #168]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	4a29      	ldr	r2, [pc, #164]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110c:	6453      	str	r3, [r2, #68]	; 0x44
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001116:	61bb      	str	r3, [r7, #24]
 8001118:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	4b24      	ldr	r3, [pc, #144]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a23      	ldr	r2, [pc, #140]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001120:	f043 0304 	orr.w	r3, r3, #4
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b21      	ldr	r3, [pc, #132]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0304 	and.w	r3, r3, #4
 800112e:	617b      	str	r3, [r7, #20]
 8001130:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 8001132:	230d      	movs	r3, #13
 8001134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001136:	2303      	movs	r3, #3
 8001138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800113e:	f107 031c 	add.w	r3, r7, #28
 8001142:	4619      	mov	r1, r3
 8001144:	481a      	ldr	r0, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0xd0>)
 8001146:	f002 fc07 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800114a:	e029      	b.n	80011a0 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a18      	ldr	r2, [pc, #96]	; (80011b4 <HAL_ADC_MspInit+0xd4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d124      	bne.n	80011a0 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115a:	4a14      	ldr	r2, [pc, #80]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 800115c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001160:	6453      	str	r3, [r2, #68]	; 0x44
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	4a0e      	ldr	r2, [pc, #56]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 8001174:	f043 0320 	orr.w	r3, r3, #32
 8001178:	6313      	str	r3, [r2, #48]	; 0x30
 800117a:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <HAL_ADC_MspInit+0xcc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	f003 0320 	and.w	r3, r3, #32
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = APP2_Pin;
 8001186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118c:	2303      	movs	r3, #3
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(APP2_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 031c 	add.w	r3, r7, #28
 8001198:	4619      	mov	r1, r3
 800119a:	4807      	ldr	r0, [pc, #28]	; (80011b8 <HAL_ADC_MspInit+0xd8>)
 800119c:	f002 fbdc 	bl	8003958 <HAL_GPIO_Init>
}
 80011a0:	bf00      	nop
 80011a2:	3730      	adds	r7, #48	; 0x30
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40012000 	.word	0x40012000
 80011ac:	40023800 	.word	0x40023800
 80011b0:	40020800 	.word	0x40020800
 80011b4:	40012200 	.word	0x40012200
 80011b8:	40021400 	.word	0x40021400

080011bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08c      	sub	sp, #48	; 0x30
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c4:	f107 031c 	add.w	r3, r7, #28
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
 80011cc:	605a      	str	r2, [r3, #4]
 80011ce:	609a      	str	r2, [r3, #8]
 80011d0:	60da      	str	r2, [r3, #12]
 80011d2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a42      	ldr	r2, [pc, #264]	; (80012e4 <HAL_CAN_MspInit+0x128>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d13a      	bne.n	8001254 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80011de:	4b42      	ldr	r3, [pc, #264]	; (80012e8 <HAL_CAN_MspInit+0x12c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	3301      	adds	r3, #1
 80011e4:	4a40      	ldr	r2, [pc, #256]	; (80012e8 <HAL_CAN_MspInit+0x12c>)
 80011e6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80011e8:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <HAL_CAN_MspInit+0x12c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d10b      	bne.n	8001208 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80011f0:	4b3e      	ldr	r3, [pc, #248]	; (80012ec <HAL_CAN_MspInit+0x130>)
 80011f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f4:	4a3d      	ldr	r2, [pc, #244]	; (80012ec <HAL_CAN_MspInit+0x130>)
 80011f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80011fa:	6413      	str	r3, [r2, #64]	; 0x40
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <HAL_CAN_MspInit+0x130>)
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001204:	61bb      	str	r3, [r7, #24]
 8001206:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <HAL_CAN_MspInit+0x130>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120c:	4a37      	ldr	r2, [pc, #220]	; (80012ec <HAL_CAN_MspInit+0x130>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6313      	str	r3, [r2, #48]	; 0x30
 8001214:	4b35      	ldr	r3, [pc, #212]	; (80012ec <HAL_CAN_MspInit+0x130>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8001220:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001224:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001226:	2302      	movs	r3, #2
 8001228:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800122e:	2303      	movs	r3, #3
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001232:	2309      	movs	r3, #9
 8001234:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001236:	f107 031c 	add.w	r3, r7, #28
 800123a:	4619      	mov	r1, r3
 800123c:	482c      	ldr	r0, [pc, #176]	; (80012f0 <HAL_CAN_MspInit+0x134>)
 800123e:	f002 fb8b 	bl	8003958 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2100      	movs	r1, #0
 8001246:	2014      	movs	r0, #20
 8001248:	f002 fb4f 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800124c:	2014      	movs	r0, #20
 800124e:	f002 fb68 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001252:	e042      	b.n	80012da <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <HAL_CAN_MspInit+0x138>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d13d      	bne.n	80012da <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800125e:	4b23      	ldr	r3, [pc, #140]	; (80012ec <HAL_CAN_MspInit+0x130>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a22      	ldr	r2, [pc, #136]	; (80012ec <HAL_CAN_MspInit+0x130>)
 8001264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b20      	ldr	r3, [pc, #128]	; (80012ec <HAL_CAN_MspInit+0x130>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <HAL_CAN_MspInit+0x12c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	4a1a      	ldr	r2, [pc, #104]	; (80012e8 <HAL_CAN_MspInit+0x12c>)
 800127e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001280:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <HAL_CAN_MspInit+0x12c>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d10b      	bne.n	80012a0 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001288:	4b18      	ldr	r3, [pc, #96]	; (80012ec <HAL_CAN_MspInit+0x130>)
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	4a17      	ldr	r2, [pc, #92]	; (80012ec <HAL_CAN_MspInit+0x130>)
 800128e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001292:	6413      	str	r3, [r2, #64]	; 0x40
 8001294:	4b15      	ldr	r3, [pc, #84]	; (80012ec <HAL_CAN_MspInit+0x130>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <HAL_CAN_MspInit+0x130>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a11      	ldr	r2, [pc, #68]	; (80012ec <HAL_CAN_MspInit+0x130>)
 80012a6:	f043 0302 	orr.w	r3, r3, #2
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <HAL_CAN_MspInit+0x130>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0302 	and.w	r3, r3, #2
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 80012b8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80012bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012be:	2302      	movs	r3, #2
 80012c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	2300      	movs	r3, #0
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c6:	2303      	movs	r3, #3
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80012ca:	2309      	movs	r3, #9
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	4808      	ldr	r0, [pc, #32]	; (80012f8 <HAL_CAN_MspInit+0x13c>)
 80012d6:	f002 fb3f 	bl	8003958 <HAL_GPIO_Init>
}
 80012da:	bf00      	nop
 80012dc:	3730      	adds	r7, #48	; 0x30
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	40006400 	.word	0x40006400
 80012e8:	200005b0 	.word	0x200005b0
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40020000 	.word	0x40020000
 80012f4:	40006800 	.word	0x40006800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b0ac      	sub	sp, #176	; 0xb0
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001304:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001314:	f107 0318 	add.w	r3, r7, #24
 8001318:	2284      	movs	r2, #132	; 0x84
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f00b fdad 	bl	800ce7c <memset>
  if(hsd->Instance==SDMMC1)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a34      	ldr	r2, [pc, #208]	; (80013f8 <HAL_SD_MspInit+0xfc>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d161      	bne.n	80013f0 <HAL_SD_MspInit+0xf4>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800132c:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001330:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001332:	2300      	movs	r3, #0
 8001334:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	4618      	mov	r0, r3
 8001344:	f004 fcb8 	bl	8005cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <HAL_SD_MspInit+0x56>
    {
      Error_Handler();
 800134e:	f7ff fe6b 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001358:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800135c:	6453      	str	r3, [r2, #68]	; 0x44
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	4b24      	ldr	r3, [pc, #144]	; (80013fc <HAL_SD_MspInit+0x100>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a23      	ldr	r2, [pc, #140]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b21      	ldr	r3, [pc, #132]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0304 	and.w	r3, r3, #4
 800137e:	613b      	str	r3, [r7, #16]
 8001380:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001382:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	4a1d      	ldr	r2, [pc, #116]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001388:	f043 0308 	orr.w	r3, r3, #8
 800138c:	6313      	str	r3, [r2, #48]	; 0x30
 800138e:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <HAL_SD_MspInit+0x100>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800139a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800139e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013b4:	230c      	movs	r3, #12
 80013b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013be:	4619      	mov	r1, r3
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <HAL_SD_MspInit+0x104>)
 80013c2:	f002 fac9 	bl	8003958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013c6:	2304      	movs	r3, #4
 80013c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013de:	230c      	movs	r3, #12
 80013e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013e8:	4619      	mov	r1, r3
 80013ea:	4806      	ldr	r0, [pc, #24]	; (8001404 <HAL_SD_MspInit+0x108>)
 80013ec:	f002 fab4 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80013f0:	bf00      	nop
 80013f2:	37b0      	adds	r7, #176	; 0xb0
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40012c00 	.word	0x40012c00
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020800 	.word	0x40020800
 8001404:	40020c00 	.word	0x40020c00

08001408 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
 800141a:	609a      	str	r2, [r3, #8]
 800141c:	60da      	str	r2, [r3, #12]
 800141e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001428:	d129      	bne.n	800147e <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800142a:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a2c      	ldr	r2, [pc, #176]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 8001430:	f043 0301 	orr.w	r3, r3, #1
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f003 0301 	and.w	r3, r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a26      	ldr	r2, [pc, #152]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b24      	ldr	r3, [pc, #144]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800145a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800145e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001460:	2302      	movs	r3, #2
 8001462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800146c:	2301      	movs	r3, #1
 800146e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	4619      	mov	r1, r3
 8001476:	481b      	ldr	r0, [pc, #108]	; (80014e4 <HAL_TIM_Base_MspInit+0xdc>)
 8001478:	f002 fa6e 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800147c:	e02c      	b.n	80014d8 <HAL_TIM_Base_MspInit+0xd0>
  else if(htim_base->Instance==TIM4)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a19      	ldr	r2, [pc, #100]	; (80014e8 <HAL_TIM_Base_MspInit+0xe0>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d127      	bne.n	80014d8 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001488:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 800148a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148c:	4a14      	ldr	r2, [pc, #80]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 800148e:	f043 0304 	orr.w	r3, r3, #4
 8001492:	6413      	str	r3, [r2, #64]	; 0x40
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 8001496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001498:	f003 0304 	and.w	r3, r3, #4
 800149c:	613b      	str	r3, [r7, #16]
 800149e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80014a0:	4b0f      	ldr	r3, [pc, #60]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 80014a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a4:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 80014a6:	f043 0310 	orr.w	r3, r3, #16
 80014aa:	6313      	str	r3, [r2, #48]	; 0x30
 80014ac:	4b0c      	ldr	r3, [pc, #48]	; (80014e0 <HAL_TIM_Base_MspInit+0xd8>)
 80014ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b0:	f003 0310 	and.w	r3, r3, #16
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014c8:	2302      	movs	r3, #2
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	4619      	mov	r1, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	; (80014ec <HAL_TIM_Base_MspInit+0xe4>)
 80014d4:	f002 fa40 	bl	8003958 <HAL_GPIO_Init>
}
 80014d8:	bf00      	nop
 80014da:	3730      	adds	r7, #48	; 0x30
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40000800 	.word	0x40000800
 80014ec:	40021000 	.word	0x40021000

080014f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b0ac      	sub	sp, #176	; 0xb0
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001508:	f107 0318 	add.w	r3, r7, #24
 800150c:	2284      	movs	r2, #132	; 0x84
 800150e:	2100      	movs	r1, #0
 8001510:	4618      	mov	r0, r3
 8001512:	f00b fcb3 	bl	800ce7c <memset>
  if(huart->Instance==UART4)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a42      	ldr	r2, [pc, #264]	; (8001624 <HAL_UART_MspInit+0x134>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d13c      	bne.n	800159a <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001524:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001526:	2300      	movs	r3, #0
 8001528:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800152a:	f107 0318 	add.w	r3, r7, #24
 800152e:	4618      	mov	r0, r3
 8001530:	f004 fbc2 	bl	8005cb8 <HAL_RCCEx_PeriphCLKConfig>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800153a:	f7ff fd75 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800153e:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <HAL_UART_MspInit+0x138>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a39      	ldr	r2, [pc, #228]	; (8001628 <HAL_UART_MspInit+0x138>)
 8001544:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_UART_MspInit+0x138>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001552:	617b      	str	r3, [r7, #20]
 8001554:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001556:	4b34      	ldr	r3, [pc, #208]	; (8001628 <HAL_UART_MspInit+0x138>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	4a33      	ldr	r2, [pc, #204]	; (8001628 <HAL_UART_MspInit+0x138>)
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6313      	str	r3, [r2, #48]	; 0x30
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <HAL_UART_MspInit+0x138>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	f003 0301 	and.w	r3, r3, #1
 800156a:	613b      	str	r3, [r7, #16]
 800156c:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 800156e:	2303      	movs	r3, #3
 8001570:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001574:	2302      	movs	r3, #2
 8001576:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157a:	2300      	movs	r3, #0
 800157c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001586:	2308      	movs	r3, #8
 8001588:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001590:	4619      	mov	r1, r3
 8001592:	4826      	ldr	r0, [pc, #152]	; (800162c <HAL_UART_MspInit+0x13c>)
 8001594:	f002 f9e0 	bl	8003958 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 8001598:	e040      	b.n	800161c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==UART7)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a24      	ldr	r2, [pc, #144]	; (8001630 <HAL_UART_MspInit+0x140>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d13b      	bne.n	800161c <HAL_UART_MspInit+0x12c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80015a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	4618      	mov	r0, r3
 80015b4:	f004 fb80 	bl	8005cb8 <HAL_RCCEx_PeriphCLKConfig>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <HAL_UART_MspInit+0xd2>
      Error_Handler();
 80015be:	f7ff fd33 	bl	8001028 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80015c2:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c6:	4a18      	ldr	r2, [pc, #96]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015c8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80015cc:	6413      	str	r3, [r2, #64]	; 0x40
 80015ce:	4b16      	ldr	r3, [pc, #88]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015e0:	f043 0320 	orr.w	r3, r3, #32
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b10      	ldr	r3, [pc, #64]	; (8001628 <HAL_UART_MspInit+0x138>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0320 	and.w	r3, r3, #32
 80015ee:	60bb      	str	r3, [r7, #8]
 80015f0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 80015f2:	23c0      	movs	r3, #192	; 0xc0
 80015f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800160a:	2308      	movs	r3, #8
 800160c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001610:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	; (8001634 <HAL_UART_MspInit+0x144>)
 8001618:	f002 f99e 	bl	8003958 <HAL_GPIO_Init>
}
 800161c:	bf00      	nop
 800161e:	37b0      	adds	r7, #176	; 0xb0
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	40004c00 	.word	0x40004c00
 8001628:	40023800 	.word	0x40023800
 800162c:	40020000 	.word	0x40020000
 8001630:	40007800 	.word	0x40007800
 8001634:	40021400 	.word	0x40021400

08001638 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800163e:	1d3b      	adds	r3, r7, #4
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
 8001644:	605a      	str	r2, [r3, #4]
 8001646:	609a      	str	r2, [r3, #8]
 8001648:	60da      	str	r2, [r3, #12]
 800164a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800164c:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_FMC_MspInit+0xa4>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d13f      	bne.n	80016d4 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <HAL_FMC_MspInit+0xa4>)
 8001656:	2201      	movs	r2, #1
 8001658:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_FMC_MspInit+0xa8>)
 800165c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800165e:	4a20      	ldr	r2, [pc, #128]	; (80016e0 <HAL_FMC_MspInit+0xa8>)
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	6393      	str	r3, [r2, #56]	; 0x38
 8001666:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <HAL_FMC_MspInit+0xa8>)
 8001668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166a:	f003 0301 	and.w	r3, r3, #1
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001676:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001684:	230c      	movs	r3, #12
 8001686:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	4619      	mov	r1, r3
 800168c:	4815      	ldr	r0, [pc, #84]	; (80016e4 <HAL_FMC_MspInit+0xac>)
 800168e:	f002 f963 	bl	8003958 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001692:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001696:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016a4:	230c      	movs	r3, #12
 80016a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	4619      	mov	r1, r3
 80016ac:	480e      	ldr	r0, [pc, #56]	; (80016e8 <HAL_FMC_MspInit+0xb0>)
 80016ae:	f002 f953 	bl	8003958 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80016b2:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80016b6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c0:	2303      	movs	r3, #3
 80016c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016c4:	230c      	movs	r3, #12
 80016c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	4619      	mov	r1, r3
 80016cc:	4807      	ldr	r0, [pc, #28]	; (80016ec <HAL_FMC_MspInit+0xb4>)
 80016ce:	f002 f943 	bl	8003958 <HAL_GPIO_Init>
 80016d2:	e000      	b.n	80016d6 <HAL_FMC_MspInit+0x9e>
    return;
 80016d4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016d6:	3718      	adds	r7, #24
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	200005b4 	.word	0x200005b4
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40021400 	.word	0x40021400
 80016e8:	40021000 	.word	0x40021000
 80016ec:	40020c00 	.word	0x40020c00

080016f0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b082      	sub	sp, #8
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016f8:	f7ff ff9e 	bl	8001638 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80016fc:	bf00      	nop
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001708:	e7fe      	b.n	8001708 <NMI_Handler+0x4>

0800170a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800170e:	e7fe      	b.n	800170e <HardFault_Handler+0x4>

08001710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001714:	e7fe      	b.n	8001714 <MemManage_Handler+0x4>

08001716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800171a:	e7fe      	b.n	800171a <BusFault_Handler+0x4>

0800171c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <UsageFault_Handler+0x4>

08001722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr

0800173e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001750:	f001 f8dc 	bl	800290c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}

08001758 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <CAN1_RX0_IRQHandler+0x10>)
 800175e:	f001 fdba 	bl	80032d6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002a0 	.word	0x200002a0

0800176c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <OTG_HS_IRQHandler+0x10>)
 8001772:	f002 fc16 	bl	8003fa2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20001aa4 	.word	0x20001aa4

08001780 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b086      	sub	sp, #24
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001788:	4a14      	ldr	r2, [pc, #80]	; (80017dc <_sbrk+0x5c>)
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <_sbrk+0x60>)
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001794:	4b13      	ldr	r3, [pc, #76]	; (80017e4 <_sbrk+0x64>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d102      	bne.n	80017a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <_sbrk+0x64>)
 800179e:	4a12      	ldr	r2, [pc, #72]	; (80017e8 <_sbrk+0x68>)
 80017a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d207      	bcs.n	80017c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b0:	f00b fb7c 	bl	800ceac <__errno>
 80017b4:	4603      	mov	r3, r0
 80017b6:	220c      	movs	r2, #12
 80017b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017ba:	f04f 33ff 	mov.w	r3, #4294967295
 80017be:	e009      	b.n	80017d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <_sbrk+0x64>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017c6:	4b07      	ldr	r3, [pc, #28]	; (80017e4 <_sbrk+0x64>)
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4413      	add	r3, r2
 80017ce:	4a05      	ldr	r2, [pc, #20]	; (80017e4 <_sbrk+0x64>)
 80017d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d2:	68fb      	ldr	r3, [r7, #12]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3718      	adds	r7, #24
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	20050000 	.word	0x20050000
 80017e0:	00000400 	.word	0x00000400
 80017e4:	200005b8 	.word	0x200005b8
 80017e8:	200020f8 	.word	0x200020f8

080017ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <SystemInit+0x20>)
 80017f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017f6:	4a05      	ldr	r2, [pc, #20]	; (800180c <SystemInit+0x20>)
 80017f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	e000ed00 	.word	0xe000ed00

08001810 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8001810:	b480      	push	{r7}
 8001812:	b087      	sub	sp, #28
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	460b      	mov	r3, r1
 8001820:	80fb      	strh	r3, [r7, #6]
 8001822:	4613      	mov	r3, r2
 8001824:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	68ba      	ldr	r2, [r7, #8]
 800182a:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	88fa      	ldrh	r2, [r7, #6]
 8001830:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	88ba      	ldrh	r2, [r7, #4]
 8001836:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	2204      	movs	r2, #4
 800183c:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2204      	movs	r2, #4
 8001842:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800184a:	b29a      	uxth	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001852:	b29b      	uxth	r3, r3
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	3b01      	subs	r3, #1
 800185a:	b29b      	uxth	r3, r3
 800185c:	b21a      	sxth	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001868:	b29a      	uxth	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001870:	b29b      	uxth	r3, r3
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	b29b      	uxth	r3, r3
 8001876:	3b01      	subs	r3, #1
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21a      	sxth	r2, r3
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	2200      	movs	r2, #0
 80018b4:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	2200      	movs	r2, #0
 80018ba:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	2200      	movs	r2, #0
 80018c0:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2200      	movs	r2, #0
 80018c6:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f645 425d 	movw	r2, #23645	; 0x5c5d
 80018ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2200      	movs	r2, #0
 80018ee:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	2200      	movs	r2, #0
 80018f4:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	75fb      	strb	r3, [r7, #23]
 80018fa:	e010      	b.n	800191e <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 80018fc:	7dfb      	ldrb	r3, [r7, #23]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	3309      	adds	r3, #9
 8001902:	00db      	lsls	r3, r3, #3
 8001904:	4413      	add	r3, r2
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 800190a:	7dfb      	ldrb	r3, [r7, #23]
 800190c:	68fa      	ldr	r2, [r7, #12]
 800190e:	3309      	adds	r3, #9
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	4413      	add	r3, r2
 8001914:	2200      	movs	r2, #0
 8001916:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8001918:	7dfb      	ldrb	r3, [r7, #23]
 800191a:	3301      	adds	r3, #1
 800191c:	75fb      	strb	r3, [r7, #23]
 800191e:	7dfb      	ldrb	r3, [r7, #23]
 8001920:	2b06      	cmp	r3, #6
 8001922:	d9eb      	bls.n	80018fc <UG_Init+0xec>
   }

   gui = g;
 8001924:	4a04      	ldr	r2, [pc, #16]	; (8001938 <UG_Init+0x128>)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6013      	str	r3, [r2, #0]
   return 1;
 800192a:	2301      	movs	r3, #1
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	200005bc 	.word	0x200005bc

0800193c <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 800193c:	b4b0      	push	{r4, r5, r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <UG_FontSelect+0x28>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800194e:	4615      	mov	r5, r2
 8001950:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001952:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001954:	682b      	ldr	r3, [r5, #0]
 8001956:	6023      	str	r3, [r4, #0]
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bcb0      	pop	{r4, r5, r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200005bc 	.word	0x200005bc

08001968 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af02      	add	r7, sp, #8
 800196e:	4603      	mov	r3, r0
 8001970:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8001972:	4b0d      	ldr	r3, [pc, #52]	; (80019a8 <UG_FillScreen+0x40>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29b      	uxth	r3, r3
 8001980:	b21a      	sxth	r2, r3
 8001982:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <UG_FillScreen+0x40>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800198a:	b29b      	uxth	r3, r3
 800198c:	3b01      	subs	r3, #1
 800198e:	b29b      	uxth	r3, r3
 8001990:	b219      	sxth	r1, r3
 8001992:	88fb      	ldrh	r3, [r7, #6]
 8001994:	9300      	str	r3, [sp, #0]
 8001996:	460b      	mov	r3, r1
 8001998:	2100      	movs	r1, #0
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f806 	bl	80019ac <UG_FillFrame>
}
 80019a0:	bf00      	nop
 80019a2:	3708      	adds	r7, #8
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	200005bc 	.word	0x200005bc

080019ac <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 80019ac:	b5b0      	push	{r4, r5, r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af02      	add	r7, sp, #8
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4623      	mov	r3, r4
 80019bc:	80fb      	strh	r3, [r7, #6]
 80019be:	4603      	mov	r3, r0
 80019c0:	80bb      	strh	r3, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
 80019c6:	4613      	mov	r3, r2
 80019c8:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80019ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80019ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	da05      	bge.n	80019e2 <UG_FillFrame+0x36>
   {
      n = x2;
 80019d6:	887b      	ldrh	r3, [r7, #2]
 80019d8:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80019da:	88fb      	ldrh	r3, [r7, #6]
 80019dc:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80019de:	89fb      	ldrh	r3, [r7, #14]
 80019e0:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80019e2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80019e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	da05      	bge.n	80019fa <UG_FillFrame+0x4e>
   {
      n = y2;
 80019ee:	883b      	ldrh	r3, [r7, #0]
 80019f0:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80019f2:	88bb      	ldrh	r3, [r7, #4]
 80019f4:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80019f6:	89fb      	ldrh	r3, [r7, #14]
 80019f8:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <UG_FillFrame+0xdc>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d012      	beq.n	8001a30 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <UG_FillFrame+0xdc>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a10:	461d      	mov	r5, r3
 8001a12:	f9b7 4000 	ldrsh.w	r4, [r7]
 8001a16:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001a1a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001a1e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a22:	8c3b      	ldrh	r3, [r7, #32]
 8001a24:	9300      	str	r3, [sp, #0]
 8001a26:	4623      	mov	r3, r4
 8001a28:	47a8      	blx	r5
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d027      	beq.n	8001a80 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8001a30:	88bb      	ldrh	r3, [r7, #4]
 8001a32:	81bb      	strh	r3, [r7, #12]
 8001a34:	e01d      	b.n	8001a72 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8001a36:	88fb      	ldrh	r3, [r7, #6]
 8001a38:	81fb      	strh	r3, [r7, #14]
 8001a3a:	e00e      	b.n	8001a5a <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <UG_FillFrame+0xdc>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	8c3a      	ldrh	r2, [r7, #32]
 8001a44:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001a48:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001a4c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8001a4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	3301      	adds	r3, #1
 8001a56:	b29b      	uxth	r3, r3
 8001a58:	81fb      	strh	r3, [r7, #14]
 8001a5a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001a5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	ddea      	ble.n	8001a3c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8001a66:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001a6a:	b29b      	uxth	r3, r3
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	81bb      	strh	r3, [r7, #12]
 8001a72:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a76:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dddb      	ble.n	8001a36 <UG_FillFrame+0x8a>
 8001a7e:	e000      	b.n	8001a82 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8001a80:	bf00      	nop
      }
   }
}
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdb0      	pop	{r4, r5, r7, pc}
 8001a88:	200005bc 	.word	0x200005bc

08001a8c <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	4603      	mov	r3, r0
 8001a94:	603a      	str	r2, [r7, #0]
 8001a96:	80fb      	strh	r3, [r7, #6]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8001aa0:	88bb      	ldrh	r3, [r7, #4]
 8001aa2:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8001aa4:	e06d      	b.n	8001b82 <UG_PutString+0xf6>
   {
      chr = *str++;
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	603a      	str	r2, [r7, #0]
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	4b37      	ldr	r3, [pc, #220]	; (8001b94 <UG_PutString+0x108>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d361      	bcc.n	8001b82 <UG_PutString+0xf6>
 8001abe:	7afb      	ldrb	r3, [r7, #11]
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b34      	ldr	r3, [pc, #208]	; (8001b94 <UG_PutString+0x108>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d900      	bls.n	8001ace <UG_PutString+0x42>
 8001acc:	e059      	b.n	8001b82 <UG_PutString+0xf6>
      if ( chr == '\n' )
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	2b0a      	cmp	r3, #10
 8001ad2:	d104      	bne.n	8001ade <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 8001ad4:	4b2f      	ldr	r3, [pc, #188]	; (8001b94 <UG_PutString+0x108>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	889b      	ldrh	r3, [r3, #4]
 8001ada:	81fb      	strh	r3, [r7, #14]
         continue;
 8001adc:	e051      	b.n	8001b82 <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8001ade:	4b2d      	ldr	r3, [pc, #180]	; (8001b94 <UG_PutString+0x108>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d00a      	beq.n	8001afe <UG_PutString+0x72>
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	; (8001b94 <UG_PutString+0x108>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aee:	7afa      	ldrb	r2, [r7, #11]
 8001af0:	4928      	ldr	r1, [pc, #160]	; (8001b94 <UG_PutString+0x108>)
 8001af2:	6809      	ldr	r1, [r1, #0]
 8001af4:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8001af6:	1a52      	subs	r2, r2, r1
 8001af8:	4413      	add	r3, r2
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	e004      	b.n	8001b08 <UG_PutString+0x7c>
 8001afe:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <UG_PutString+0x108>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 8001b0a:	4b22      	ldr	r3, [pc, #136]	; (8001b94 <UG_PutString+0x108>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b12:	4619      	mov	r1, r3
 8001b14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001b18:	7abb      	ldrb	r3, [r7, #10]
 8001b1a:	4413      	add	r3, r2
 8001b1c:	4299      	cmp	r1, r3
 8001b1e:	dc11      	bgt.n	8001b44 <UG_PutString+0xb8>
      {
         xp = x;
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <UG_PutString+0x108>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <UG_PutString+0x108>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	89bb      	ldrh	r3, [r7, #12]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <UG_PutString+0x108>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8001b4c:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <UG_PutString+0x108>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b54:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001b58:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001b5c:	7af8      	ldrb	r0, [r7, #11]
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	4623      	mov	r3, r4
 8001b62:	f000 f89d 	bl	8001ca0 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8001b66:	7abb      	ldrb	r3, [r7, #10]
 8001b68:	b21a      	sxth	r2, r3
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <UG_PutString+0x108>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8001b72:	b21b      	sxth	r3, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	b21b      	sxth	r3, r3
 8001b78:	b29a      	uxth	r2, r3
 8001b7a:	89fb      	ldrh	r3, [r7, #14]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d18d      	bne.n	8001aa6 <UG_PutString+0x1a>
   }
}
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd90      	pop	{r4, r7, pc}
 8001b94:	200005bc 	.word	0x200005bc

08001b98 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8001b98:	b590      	push	{r4, r7, lr}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60ba      	str	r2, [r7, #8]
 8001ba0:	461a      	mov	r2, r3
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	81fb      	strh	r3, [r7, #14]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	81bb      	strh	r3, [r7, #12]
 8001baa:	4613      	mov	r3, r2
 8001bac:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8001bae:	89fb      	ldrh	r3, [r7, #14]
 8001bb0:	82fb      	strh	r3, [r7, #22]
   yp=y;
 8001bb2:	89bb      	ldrh	r3, [r7, #12]
 8001bb4:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 8001bb6:	e067      	b.n	8001c88 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	1c5a      	adds	r2, r3, #1
 8001bbc:	60ba      	str	r2, [r7, #8]
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8001bc2:	7cfb      	ldrb	r3, [r7, #19]
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b35      	ldr	r3, [pc, #212]	; (8001c9c <UG_PutColorString+0x104>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d35b      	bcc.n	8001c88 <UG_PutColorString+0xf0>
 8001bd0:	7cfb      	ldrb	r3, [r7, #19]
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	4b31      	ldr	r3, [pc, #196]	; (8001c9c <UG_PutColorString+0x104>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d900      	bls.n	8001be0 <UG_PutColorString+0x48>
 8001bde:	e053      	b.n	8001c88 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 8001be0:	7cfb      	ldrb	r3, [r7, #19]
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d104      	bne.n	8001bf0 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 8001be6:	4b2d      	ldr	r3, [pc, #180]	; (8001c9c <UG_PutColorString+0x104>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	889b      	ldrh	r3, [r3, #4]
 8001bec:	82fb      	strh	r3, [r7, #22]
         continue;
 8001bee:	e04b      	b.n	8001c88 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	; (8001c9c <UG_PutColorString+0x104>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00a      	beq.n	8001c10 <UG_PutColorString+0x78>
 8001bfa:	4b28      	ldr	r3, [pc, #160]	; (8001c9c <UG_PutColorString+0x104>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	7cfa      	ldrb	r2, [r7, #19]
 8001c02:	4926      	ldr	r1, [pc, #152]	; (8001c9c <UG_PutColorString+0x104>)
 8001c04:	6809      	ldr	r1, [r1, #0]
 8001c06:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 8001c08:	1a52      	subs	r2, r2, r1
 8001c0a:	4413      	add	r3, r2
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	e004      	b.n	8001c1a <UG_PutColorString+0x82>
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <UG_PutColorString+0x104>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	; (8001c9c <UG_PutColorString+0x104>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c24:	4619      	mov	r1, r3
 8001c26:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001c2a:	7cbb      	ldrb	r3, [r7, #18]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4299      	cmp	r1, r3
 8001c30:	dc11      	bgt.n	8001c56 <UG_PutColorString+0xbe>
      {
         xp = x;
 8001c32:	89fb      	ldrh	r3, [r7, #14]
 8001c34:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 8001c36:	4b19      	ldr	r3, [pc, #100]	; (8001c9c <UG_PutColorString+0x104>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	4b16      	ldr	r3, [pc, #88]	; (8001c9c <UG_PutColorString+0x104>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	8abb      	ldrh	r3, [r7, #20]
 8001c50:	4413      	add	r3, r2
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 8001c56:	88fc      	ldrh	r4, [r7, #6]
 8001c58:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001c5c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001c60:	7cf8      	ldrb	r0, [r7, #19]
 8001c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	4623      	mov	r3, r4
 8001c68:	f000 f81a 	bl	8001ca0 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8001c6c:	7cbb      	ldrb	r3, [r7, #18]
 8001c6e:	b21a      	sxth	r2, r3
 8001c70:	4b0a      	ldr	r3, [pc, #40]	; (8001c9c <UG_PutColorString+0x104>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	b21b      	sxth	r3, r3
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	8afb      	ldrh	r3, [r7, #22]
 8001c82:	4413      	add	r3, r2
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d193      	bne.n	8001bb8 <UG_PutColorString+0x20>
   }
}
 8001c90:	bf00      	nop
 8001c92:	bf00      	nop
 8001c94:	371c      	adds	r7, #28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	200005bc 	.word	0x200005bc

08001ca0 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8001ca0:	b590      	push	{r4, r7, lr}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af02      	add	r7, sp, #8
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	80bb      	strh	r3, [r7, #4]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	807b      	strh	r3, [r7, #2]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8001cbe:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <UG_PutChar+0x44>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	332c      	adds	r3, #44	; 0x2c
 8001cc4:	883c      	ldrh	r4, [r7, #0]
 8001cc6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001cca:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001cce:	79f8      	ldrb	r0, [r7, #7]
 8001cd0:	9301      	str	r3, [sp, #4]
 8001cd2:	8b3b      	ldrh	r3, [r7, #24]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	4623      	mov	r3, r4
 8001cd8:	f000 f852 	bl	8001d80 <_UG_PutChar>
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd90      	pop	{r4, r7, pc}
 8001ce4:	200005bc 	.word	0x200005bc

08001ce8 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <UG_SetForecolor+0x20>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	88fa      	ldrh	r2, [r7, #6]
 8001cf8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	200005bc 	.word	0x200005bc

08001d0c <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <UG_SetBackcolor+0x20>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	88fa      	ldrh	r2, [r7, #6]
 8001d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr
 8001d2c:	200005bc 	.word	0x200005bc

08001d30 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	4603      	mov	r3, r0
 8001d38:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8001d3a:	4b06      	ldr	r3, [pc, #24]	; (8001d54 <UG_FontSetHSpace+0x24>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	88fa      	ldrh	r2, [r7, #6]
 8001d40:	b252      	sxtb	r2, r2
 8001d42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	200005bc 	.word	0x200005bc

08001d58 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <UG_FontSetVSpace+0x24>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	88fa      	ldrh	r2, [r7, #6]
 8001d68:	b252      	sxtb	r2, r2
 8001d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	200005bc 	.word	0x200005bc

08001d80 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b08a      	sub	sp, #40	; 0x28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4604      	mov	r4, r0
 8001d88:	4608      	mov	r0, r1
 8001d8a:	4611      	mov	r1, r2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	4623      	mov	r3, r4
 8001d90:	71fb      	strb	r3, [r7, #7]
 8001d92:	4603      	mov	r3, r0
 8001d94:	80bb      	strh	r3, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	807b      	strh	r3, [r7, #2]
 8001d9a:	4613      	mov	r3, r2
 8001d9c:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8001da2:	7e3b      	ldrb	r3, [r7, #24]
 8001da4:	2bfc      	cmp	r3, #252	; 0xfc
 8001da6:	dc77      	bgt.n	8001e98 <_UG_PutChar+0x118>
 8001da8:	2bd6      	cmp	r3, #214	; 0xd6
 8001daa:	da08      	bge.n	8001dbe <_UG_PutChar+0x3e>
 8001dac:	2bc4      	cmp	r3, #196	; 0xc4
 8001dae:	d06a      	beq.n	8001e86 <_UG_PutChar+0x106>
 8001db0:	2bc4      	cmp	r3, #196	; 0xc4
 8001db2:	dc71      	bgt.n	8001e98 <_UG_PutChar+0x118>
 8001db4:	2bb0      	cmp	r3, #176	; 0xb0
 8001db6:	d06c      	beq.n	8001e92 <_UG_PutChar+0x112>
 8001db8:	2bb5      	cmp	r3, #181	; 0xb5
 8001dba:	d067      	beq.n	8001e8c <_UG_PutChar+0x10c>
 8001dbc:	e06c      	b.n	8001e98 <_UG_PutChar+0x118>
 8001dbe:	3bd6      	subs	r3, #214	; 0xd6
 8001dc0:	2b26      	cmp	r3, #38	; 0x26
 8001dc2:	d869      	bhi.n	8001e98 <_UG_PutChar+0x118>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <_UG_PutChar+0x4c>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001e6f 	.word	0x08001e6f
 8001dd0:	08001e99 	.word	0x08001e99
 8001dd4:	08001e99 	.word	0x08001e99
 8001dd8:	08001e99 	.word	0x08001e99
 8001ddc:	08001e99 	.word	0x08001e99
 8001de0:	08001e99 	.word	0x08001e99
 8001de4:	08001e7b 	.word	0x08001e7b
 8001de8:	08001e99 	.word	0x08001e99
 8001dec:	08001e99 	.word	0x08001e99
 8001df0:	08001e99 	.word	0x08001e99
 8001df4:	08001e99 	.word	0x08001e99
 8001df8:	08001e99 	.word	0x08001e99
 8001dfc:	08001e99 	.word	0x08001e99
 8001e00:	08001e99 	.word	0x08001e99
 8001e04:	08001e81 	.word	0x08001e81
 8001e08:	08001e99 	.word	0x08001e99
 8001e0c:	08001e99 	.word	0x08001e99
 8001e10:	08001e99 	.word	0x08001e99
 8001e14:	08001e99 	.word	0x08001e99
 8001e18:	08001e99 	.word	0x08001e99
 8001e1c:	08001e99 	.word	0x08001e99
 8001e20:	08001e99 	.word	0x08001e99
 8001e24:	08001e99 	.word	0x08001e99
 8001e28:	08001e99 	.word	0x08001e99
 8001e2c:	08001e99 	.word	0x08001e99
 8001e30:	08001e99 	.word	0x08001e99
 8001e34:	08001e99 	.word	0x08001e99
 8001e38:	08001e99 	.word	0x08001e99
 8001e3c:	08001e99 	.word	0x08001e99
 8001e40:	08001e99 	.word	0x08001e99
 8001e44:	08001e99 	.word	0x08001e99
 8001e48:	08001e99 	.word	0x08001e99
 8001e4c:	08001e69 	.word	0x08001e69
 8001e50:	08001e99 	.word	0x08001e99
 8001e54:	08001e99 	.word	0x08001e99
 8001e58:	08001e99 	.word	0x08001e99
 8001e5c:	08001e99 	.word	0x08001e99
 8001e60:	08001e99 	.word	0x08001e99
 8001e64:	08001e75 	.word	0x08001e75
   {
      case 0xF6: bt = 0x94; break; // ö
 8001e68:	2394      	movs	r3, #148	; 0x94
 8001e6a:	763b      	strb	r3, [r7, #24]
 8001e6c:	e014      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 8001e6e:	2399      	movs	r3, #153	; 0x99
 8001e70:	763b      	strb	r3, [r7, #24]
 8001e72:	e011      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 8001e74:	2381      	movs	r3, #129	; 0x81
 8001e76:	763b      	strb	r3, [r7, #24]
 8001e78:	e00e      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 8001e7a:	239a      	movs	r3, #154	; 0x9a
 8001e7c:	763b      	strb	r3, [r7, #24]
 8001e7e:	e00b      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 8001e80:	2384      	movs	r3, #132	; 0x84
 8001e82:	763b      	strb	r3, [r7, #24]
 8001e84:	e008      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 8001e86:	238e      	movs	r3, #142	; 0x8e
 8001e88:	763b      	strb	r3, [r7, #24]
 8001e8a:	e005      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 8001e8c:	23e6      	movs	r3, #230	; 0xe6
 8001e8e:	763b      	strb	r3, [r7, #24]
 8001e90:	e002      	b.n	8001e98 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 8001e92:	23f8      	movs	r3, #248	; 0xf8
 8001e94:	763b      	strb	r3, [r7, #24]
 8001e96:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8001e98:	7e3b      	ldrb	r3, [r7, #24]
 8001e9a:	b29a      	uxth	r2, r3
 8001e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e9e:	895b      	ldrh	r3, [r3, #10]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	f0c0 81fc 	bcc.w	800229e <_UG_PutChar+0x51e>
 8001ea6:	7e3b      	ldrb	r3, [r7, #24]
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eac:	899b      	ldrh	r3, [r3, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	f200 81f5 	bhi.w	800229e <_UG_PutChar+0x51e>

   yo = y;
 8001eb4:	887b      	ldrh	r3, [r7, #2]
 8001eb6:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8001eb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001eba:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ebe:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8001ec0:	8b7b      	ldrh	r3, [r7, #26]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	f000 81ed 	beq.w	80022a2 <_UG_PutChar+0x522>
   bn >>= 3;
 8001ec8:	8b7b      	ldrh	r3, [r7, #26]
 8001eca:	08db      	lsrs	r3, r3, #3
 8001ecc:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8001ece:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ed0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d002      	beq.n	8001ee6 <_UG_PutChar+0x166>
 8001ee0:	8b7b      	ldrh	r3, [r7, #26]
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 8001ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee8:	691b      	ldr	r3, [r3, #16]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d009      	beq.n	8001f02 <_UG_PutChar+0x182>
 8001eee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	7e3a      	ldrb	r2, [r7, #24]
 8001ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ef6:	8949      	ldrh	r1, [r1, #10]
 8001ef8:	1a52      	subs	r2, r2, r1
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	e003      	b.n	8001f0a <_UG_PutChar+0x18a>
 8001f02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f04:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 8001f0c:	4b93      	ldr	r3, [pc, #588]	; (800215c <_UG_PutChar+0x3dc>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 80d8 	beq.w	80020ce <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 8001f1e:	4b8f      	ldr	r3, [pc, #572]	; (800215c <_UG_PutChar+0x3dc>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	461d      	mov	r5, r3
 8001f26:	88ba      	ldrh	r2, [r7, #4]
 8001f28:	8a7b      	ldrh	r3, [r7, #18]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	b29b      	uxth	r3, r3
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	b21c      	sxth	r4, r3
 8001f34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f36:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	887b      	ldrh	r3, [r7, #2]
 8001f3e:	4413      	add	r3, r2
 8001f40:	b29b      	uxth	r3, r3
 8001f42:	3b01      	subs	r3, #1
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001f4c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001f50:	4622      	mov	r2, r4
 8001f52:	47a8      	blx	r5
 8001f54:	4603      	mov	r3, r0
 8001f56:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 8001f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f5a:	791b      	ldrb	r3, [r3, #4]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d14d      	bne.n	8001ffc <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8001f60:	7e3b      	ldrb	r3, [r7, #24]
 8001f62:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f64:	8952      	ldrh	r2, [r2, #10]
 8001f66:	1a9b      	subs	r3, r3, r2
 8001f68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f6a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	8b7a      	ldrh	r2, [r7, #26]
 8001f74:	fb02 f303 	mul.w	r3, r2, r3
 8001f78:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001f7e:	e036      	b.n	8001fee <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8001f80:	8a7b      	ldrh	r3, [r7, #18]
 8001f82:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 8001f84:	2300      	movs	r3, #0
 8001f86:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001f88:	e02a      	b.n	8001fe0 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 8001f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8c:	681a      	ldr	r2, [r3, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	1c59      	adds	r1, r3, #1
 8001f92:	6179      	str	r1, [r7, #20]
 8001f94:	4413      	add	r3, r2
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	847b      	strh	r3, [r7, #34]	; 0x22
 8001f9e:	e016      	b.n	8001fce <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8001fa0:	7e7b      	ldrb	r3, [r7, #25]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d004      	beq.n	8001fb4 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 8001faa:	883a      	ldrh	r2, [r7, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	4610      	mov	r0, r2
 8001fb0:	4798      	blx	r3
 8001fb2:	e003      	b.n	8001fbc <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 8001fb4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	4610      	mov	r0, r2
 8001fba:	4798      	blx	r3
				   }
				   b >>= 1;
 8001fbc:	7e7b      	ldrb	r3, [r7, #25]
 8001fbe:	085b      	lsrs	r3, r3, #1
 8001fc0:	767b      	strb	r3, [r7, #25]
				   c--;
 8001fc2:	8bbb      	ldrh	r3, [r7, #28]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8001fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fca:	3301      	adds	r3, #1
 8001fcc:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fd0:	2b07      	cmp	r3, #7
 8001fd2:	d802      	bhi.n	8001fda <_UG_PutChar+0x25a>
 8001fd4:	8bbb      	ldrh	r3, [r7, #28]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1e2      	bne.n	8001fa0 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8001fda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001fdc:	3301      	adds	r3, #1
 8001fde:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001fe0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001fe2:	8b7b      	ldrh	r3, [r7, #26]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d3d0      	bcc.n	8001f8a <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 8001fe8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001fea:	3301      	adds	r3, #1
 8001fec:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001fee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ff0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ff2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	dbc2      	blt.n	8001f80 <_UG_PutChar+0x200>
 8001ffa:	e153      	b.n	80022a4 <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 8001ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ffe:	791b      	ldrb	r3, [r3, #4]
 8002000:	2b01      	cmp	r3, #1
 8002002:	f040 814f 	bne.w	80022a4 <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 8002006:	7e3b      	ldrb	r3, [r7, #24]
 8002008:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800200a:	8952      	ldrh	r2, [r2, #10]
 800200c:	1a9b      	subs	r3, r3, r2
 800200e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002010:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002014:	fb02 f303 	mul.w	r3, r2, r3
 8002018:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800201a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8002024:	2300      	movs	r3, #0
 8002026:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002028:	e04a      	b.n	80020c0 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 800202a:	2300      	movs	r3, #0
 800202c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800202e:	e036      	b.n	800209e <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8002030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	6179      	str	r1, [r7, #20]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8002040:	883b      	ldrh	r3, [r7, #0]
 8002042:	b2db      	uxtb	r3, r3
 8002044:	7e7a      	ldrb	r2, [r7, #25]
 8002046:	fb03 f202 	mul.w	r2, r3, r2
 800204a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800204c:	b2db      	uxtb	r3, r3
 800204e:	7e79      	ldrb	r1, [r7, #25]
 8002050:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	121b      	asrs	r3, r3, #8
 800205c:	b21b      	sxth	r3, r3
 800205e:	b2db      	uxtb	r3, r3
 8002060:	b21a      	sxth	r2, r3
 8002062:	883b      	ldrh	r3, [r7, #0]
 8002064:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002068:	7e79      	ldrb	r1, [r7, #25]
 800206a:	fb03 f101 	mul.w	r1, r3, r1
 800206e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002070:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002074:	7e78      	ldrb	r0, [r7, #25]
 8002076:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800207a:	fb00 f303 	mul.w	r3, r0, r3
 800207e:	440b      	add	r3, r1
 8002080:	121b      	asrs	r3, r3, #8
 8002082:	b21b      	sxth	r3, r3
 8002084:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002088:	b21b      	sxth	r3, r3
 800208a:	4313      	orrs	r3, r2
 800208c:	b21b      	sxth	r3, r3
 800208e:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8002090:	8a3a      	ldrh	r2, [r7, #16]
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	4610      	mov	r0, r2
 8002096:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8002098:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800209a:	3301      	adds	r3, #1
 800209c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800209e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80020a0:	8a7b      	ldrh	r3, [r7, #18]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d3c4      	bcc.n	8002030 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 80020a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020a8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80020ac:	461a      	mov	r2, r3
 80020ae:	8a7b      	ldrh	r3, [r7, #18]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	461a      	mov	r2, r3
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	4413      	add	r3, r2
 80020b8:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 80020ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020bc:	3301      	adds	r3, #1
 80020be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80020c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020c4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80020c8:	4293      	cmp	r3, r2
 80020ca:	dbae      	blt.n	800202a <_UG_PutChar+0x2aa>
 80020cc:	e0ea      	b.n	80022a4 <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 80020ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020d0:	791b      	ldrb	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d16e      	bne.n	80021b4 <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 80020d6:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80020da:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80020de:	8a7b      	ldrh	r3, [r7, #18]
 80020e0:	4413      	add	r3, r2
 80020e2:	3b01      	subs	r3, #1
 80020e4:	461c      	mov	r4, r3
 80020e6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80020ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020f0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80020f4:	4413      	add	r3, r2
 80020f6:	3b01      	subs	r3, #1
 80020f8:	460a      	mov	r2, r1
 80020fa:	4621      	mov	r1, r4
 80020fc:	f000 f99c 	bl	8002438 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8002100:	f000 fa14 	bl	800252c <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8002104:	7e3b      	ldrb	r3, [r7, #24]
 8002106:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002108:	8952      	ldrh	r2, [r2, #10]
 800210a:	1a9b      	subs	r3, r3, r2
 800210c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800210e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002112:	fb02 f303 	mul.w	r3, r2, r3
 8002116:	8b7a      	ldrh	r2, [r7, #26]
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 800211e:	2300      	movs	r3, #0
 8002120:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002122:	e040      	b.n	80021a6 <_UG_PutChar+0x426>
         {
           xo = x;
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8002128:	8a7b      	ldrh	r3, [r7, #18]
 800212a:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 800212c:	2300      	movs	r3, #0
 800212e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002130:	e02f      	b.n	8002192 <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 8002132:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	1c59      	adds	r1, r3, #1
 800213a:	6179      	str	r1, [r7, #20]
 800213c:	4413      	add	r3, r2
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 8002142:	2300      	movs	r3, #0
 8002144:	847b      	strh	r3, [r7, #34]	; 0x22
 8002146:	e01b      	b.n	8002180 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8002148:	7e7b      	ldrb	r3, [r7, #25]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 8002152:	883b      	ldrh	r3, [r7, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 f9f0 	bl	800253a <SSD1963_ConsecutivePSet>
 800215a:	e005      	b.n	8002168 <_UG_PutChar+0x3e8>
 800215c:	200005bc 	.word	0x200005bc
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 8002160:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002162:	4618      	mov	r0, r3
 8002164:	f000 f9e9 	bl	800253a <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 8002168:	7e7b      	ldrb	r3, [r7, #25]
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	767b      	strb	r3, [r7, #25]
               xo++;
 800216e:	8c3b      	ldrh	r3, [r7, #32]
 8002170:	3301      	adds	r3, #1
 8002172:	843b      	strh	r3, [r7, #32]
               c--;
 8002174:	8bbb      	ldrh	r3, [r7, #28]
 8002176:	3b01      	subs	r3, #1
 8002178:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 800217a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800217c:	3301      	adds	r3, #1
 800217e:	847b      	strh	r3, [r7, #34]	; 0x22
 8002180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002182:	2b07      	cmp	r3, #7
 8002184:	d802      	bhi.n	800218c <_UG_PutChar+0x40c>
 8002186:	8bbb      	ldrh	r3, [r7, #28]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d1dd      	bne.n	8002148 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 800218c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800218e:	3301      	adds	r3, #1
 8002190:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002192:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002194:	8b7b      	ldrh	r3, [r7, #26]
 8002196:	429a      	cmp	r2, r3
 8002198:	d3cb      	bcc.n	8002132 <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 800219a:	8bfb      	ldrh	r3, [r7, #30]
 800219c:	3301      	adds	r3, #1
 800219e:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 80021a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021a2:	3301      	adds	r3, #1
 80021a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80021ae:	4293      	cmp	r3, r2
 80021b0:	dbb8      	blt.n	8002124 <_UG_PutChar+0x3a4>
 80021b2:	e077      	b.n	80022a4 <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 80021b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b6:	791b      	ldrb	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d173      	bne.n	80022a4 <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 80021bc:	7e3b      	ldrb	r3, [r7, #24]
 80021be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c0:	8952      	ldrh	r2, [r2, #10]
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80021ca:	fb02 f303 	mul.w	r3, r2, r3
 80021ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021d0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80021d4:	fb02 f303 	mul.w	r3, r2, r3
 80021d8:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 80021da:	2300      	movs	r3, #0
 80021dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80021de:	e057      	b.n	8002290 <_UG_PutChar+0x510>
         {
            xo = x;
 80021e0:	88bb      	ldrh	r3, [r7, #4]
 80021e2:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 80021e4:	2300      	movs	r3, #0
 80021e6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80021e8:	e03e      	b.n	8002268 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 80021ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1c59      	adds	r1, r3, #1
 80021f2:	6179      	str	r1, [r7, #20]
 80021f4:	4413      	add	r3, r2
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 80021fa:	883b      	ldrh	r3, [r7, #0]
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	7e7a      	ldrb	r2, [r7, #25]
 8002200:	fb03 f202 	mul.w	r2, r3, r2
 8002204:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002206:	b2db      	uxtb	r3, r3
 8002208:	7e79      	ldrb	r1, [r7, #25]
 800220a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 800220e:	fb01 f303 	mul.w	r3, r1, r3
 8002212:	4413      	add	r3, r2
 8002214:	121b      	asrs	r3, r3, #8
 8002216:	b21b      	sxth	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	b21a      	sxth	r2, r3
 800221c:	883b      	ldrh	r3, [r7, #0]
 800221e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8002222:	7e79      	ldrb	r1, [r7, #25]
 8002224:	fb03 f101 	mul.w	r1, r3, r1
 8002228:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800222a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800222e:	7e78      	ldrb	r0, [r7, #25]
 8002230:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8002234:	fb00 f303 	mul.w	r3, r0, r3
 8002238:	440b      	add	r3, r1
 800223a:	121b      	asrs	r3, r3, #8
 800223c:	b21b      	sxth	r3, r3
 800223e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21b      	sxth	r3, r3
 8002248:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 800224a:	4b18      	ldr	r3, [pc, #96]	; (80022ac <_UG_PutChar+0x52c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8002254:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8002258:	8a3a      	ldrh	r2, [r7, #16]
 800225a:	4798      	blx	r3
               xo++;
 800225c:	8c3b      	ldrh	r3, [r7, #32]
 800225e:	3301      	adds	r3, #1
 8002260:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8002262:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002264:	3301      	adds	r3, #1
 8002266:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002268:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800226a:	8a7b      	ldrh	r3, [r7, #18]
 800226c:	429a      	cmp	r2, r3
 800226e:	d3bc      	bcc.n	80021ea <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 8002270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002272:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002276:	461a      	mov	r2, r3
 8002278:	8a7b      	ldrh	r3, [r7, #18]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	461a      	mov	r2, r3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	4413      	add	r3, r2
 8002282:	617b      	str	r3, [r7, #20]
            yo++;
 8002284:	8bfb      	ldrh	r3, [r7, #30]
 8002286:	3301      	adds	r3, #1
 8002288:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 800228a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800228c:	3301      	adds	r3, #1
 800228e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002290:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002292:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002294:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8002298:	4293      	cmp	r3, r2
 800229a:	dba1      	blt.n	80021e0 <_UG_PutChar+0x460>
 800229c:	e002      	b.n	80022a4 <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 800229e:	bf00      	nop
 80022a0:	e000      	b.n	80022a4 <_UG_PutChar+0x524>
   if ( !bn ) return;
 80022a2:	bf00      	nop
         }
      }
   }
}
 80022a4:	3728      	adds	r7, #40	; 0x28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bdb0      	pop	{r4, r5, r7, pc}
 80022aa:	bf00      	nop
 80022ac:	200005bc 	.word	0x200005bc

080022b0 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80022bc:	79fb      	ldrb	r3, [r7, #7]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d810      	bhi.n	80022e4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <UG_DriverRegister+0x40>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	79fb      	ldrb	r3, [r7, #7]
 80022c8:	3309      	adds	r3, #9
 80022ca:	00db      	lsls	r3, r3, #3
 80022cc:	4413      	add	r3, r2
 80022ce:	683a      	ldr	r2, [r7, #0]
 80022d0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80022d2:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <UG_DriverRegister+0x40>)
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	79fb      	ldrb	r3, [r7, #7]
 80022d8:	3309      	adds	r3, #9
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	2203      	movs	r2, #3
 80022e0:	721a      	strb	r2, [r3, #8]
 80022e2:	e000      	b.n	80022e6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80022e4:	bf00      	nop
}
 80022e6:	370c      	adds	r7, #12
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	200005bc 	.word	0x200005bc

080022f4 <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 80022f8:	2001      	movs	r0, #1
 80022fa:	f000 fa3e 	bl	800277a <write_command>
    HAL_Delay(10);
 80022fe:	200a      	movs	r0, #10
 8002300:	f000 fb24 	bl	800294c <HAL_Delay>
}
 8002304:	bf00      	nop
 8002306:	bd80      	pop	{r7, pc}

08002308 <SSD1963_Init>:

void SSD1963_Init()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 800230c:	f7ff fff2 	bl	80022f4 <SSD1963_Reset>

    write_command(0xe0);
 8002310:	20e0      	movs	r0, #224	; 0xe0
 8002312:	f000 fa32 	bl	800277a <write_command>
    write_data(0x01);            //Enable PLL
 8002316:	2001      	movs	r0, #1
 8002318:	f000 fa4a 	bl	80027b0 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 800231c:	20e0      	movs	r0, #224	; 0xe0
 800231e:	f000 fa2c 	bl	800277a <write_command>
    write_data(0x03);            //Lock PLL
 8002322:	2003      	movs	r0, #3
 8002324:	f000 fa44 	bl	80027b0 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8002328:	f7ff ffe4 	bl	80022f4 <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 800232c:	20b0      	movs	r0, #176	; 0xb0
 800232e:	f000 fa24 	bl	800277a <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8002332:	2008      	movs	r0, #8
 8002334:	f000 fa3c 	bl	80027b0 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8002338:	2080      	movs	r0, #128	; 0x80
 800233a:	f000 fa39 	bl	80027b0 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 800233e:	2001      	movs	r0, #1
 8002340:	f000 fa36 	bl	80027b0 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8002344:	20df      	movs	r0, #223	; 0xdf
 8002346:	f000 fa33 	bl	80027b0 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 800234a:	2001      	movs	r0, #1
 800234c:	f000 fa30 	bl	80027b0 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8002350:	200f      	movs	r0, #15
 8002352:	f000 fa2d 	bl	80027b0 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8002356:	2000      	movs	r0, #0
 8002358:	f000 fa2a 	bl	80027b0 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 800235c:	20f0      	movs	r0, #240	; 0xf0
 800235e:	f000 fa0c 	bl	800277a <write_command>
    write_data(0x03);
 8002362:	2003      	movs	r0, #3
 8002364:	f000 fa24 	bl	80027b0 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8002368:	20e6      	movs	r0, #230	; 0xe6
 800236a:	f000 fa06 	bl	800277a <write_command>
    write_data(0x01);    //02
 800236e:	2001      	movs	r0, #1
 8002370:	f000 fa1e 	bl	80027b0 <write_data>
    write_data(0x45);    //ff
 8002374:	2045      	movs	r0, #69	; 0x45
 8002376:	f000 fa1b 	bl	80027b0 <write_data>
    write_data(0x47);    //ff
 800237a:	2047      	movs	r0, #71	; 0x47
 800237c:	f000 fa18 	bl	80027b0 <write_data>

    write_command(0xb4); //set HBP
 8002380:	20b4      	movs	r0, #180	; 0xb4
 8002382:	f000 f9fa 	bl	800277a <write_command>
    write_data(0x02); //set Hsync = 600
 8002386:	2002      	movs	r0, #2
 8002388:	f000 fa12 	bl	80027b0 <write_data>
    write_data(0x0d);
 800238c:	200d      	movs	r0, #13
 800238e:	f000 fa0f 	bl	80027b0 <write_data>
    write_data(0x00);    //set HBP 68
 8002392:	2000      	movs	r0, #0
 8002394:	f000 fa0c 	bl	80027b0 <write_data>
    write_data(0x2b);
 8002398:	202b      	movs	r0, #43	; 0x2b
 800239a:	f000 fa09 	bl	80027b0 <write_data>
    write_data(0x28);    //set VBP 16
 800239e:	2028      	movs	r0, #40	; 0x28
 80023a0:	f000 fa06 	bl	80027b0 <write_data>
    write_data(0x00);    //Set Hsync start position
 80023a4:	2000      	movs	r0, #0
 80023a6:	f000 fa03 	bl	80027b0 <write_data>
    write_data(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f000 fa00 	bl	80027b0 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 80023b0:	2000      	movs	r0, #0
 80023b2:	f000 f9fd 	bl	80027b0 <write_data>

    write_command(0xb6); //set VBP
 80023b6:	20b6      	movs	r0, #182	; 0xb6
 80023b8:	f000 f9df 	bl	800277a <write_command>
    write_data(0x01);    //set Vsync total 360
 80023bc:	2001      	movs	r0, #1
 80023be:	f000 f9f7 	bl	80027b0 <write_data>
    write_data(0x1d);
 80023c2:	201d      	movs	r0, #29
 80023c4:	f000 f9f4 	bl	80027b0 <write_data>
    write_data(0x00);    //set VBP = 19
 80023c8:	2000      	movs	r0, #0
 80023ca:	f000 f9f1 	bl	80027b0 <write_data>
    write_data(0x0c);
 80023ce:	200c      	movs	r0, #12
 80023d0:	f000 f9ee 	bl	80027b0 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 80023d4:	2009      	movs	r0, #9
 80023d6:	f000 f9eb 	bl	80027b0 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 80023da:	2000      	movs	r0, #0
 80023dc:	f000 f9e8 	bl	80027b0 <write_data>
    write_data(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f000 f9e5 	bl	80027b0 <write_data>

    write_command(0x2a); //set column address
 80023e6:	202a      	movs	r0, #42	; 0x2a
 80023e8:	f000 f9c7 	bl	800277a <write_command>
    write_data(0x00);    //set start column address 0
 80023ec:	2000      	movs	r0, #0
 80023ee:	f000 f9df 	bl	80027b0 <write_data>
    write_data(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f000 f9dc 	bl	80027b0 <write_data>
    write_data(0x01);    //set end column address = 479
 80023f8:	2001      	movs	r0, #1
 80023fa:	f000 f9d9 	bl	80027b0 <write_data>
    write_data(0xdf);
 80023fe:	20df      	movs	r0, #223	; 0xdf
 8002400:	f000 f9d6 	bl	80027b0 <write_data>

    write_command(0x2b); //set page address
 8002404:	202b      	movs	r0, #43	; 0x2b
 8002406:	f000 f9b8 	bl	800277a <write_command>
    write_data(0x00);    //set start page address = 0
 800240a:	2000      	movs	r0, #0
 800240c:	f000 f9d0 	bl	80027b0 <write_data>
    write_data(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f000 f9cd 	bl	80027b0 <write_data>
    write_data(0x01);    //set end column address = 479
 8002416:	2001      	movs	r0, #1
 8002418:	f000 f9ca 	bl	80027b0 <write_data>
    write_data(0x0f);
 800241c:	200f      	movs	r0, #15
 800241e:	f000 f9c7 	bl	80027b0 <write_data>

    write_command(0x13); //set normal mode
 8002422:	2013      	movs	r0, #19
 8002424:	f000 f9a9 	bl	800277a <write_command>
    write_command(0x38); //set normal mode
 8002428:	2038      	movs	r0, #56	; 0x38
 800242a:	f000 f9a6 	bl	800277a <write_command>
    write_command(0x29); //set display on
 800242e:	2029      	movs	r0, #41	; 0x29
 8002430:	f000 f9a3 	bl	800277a <write_command>
}
 8002434:	bf00      	nop
 8002436:	bd80      	pop	{r7, pc}

08002438 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
 8002444:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	b29b      	uxth	r3, r3
 8002450:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	b29b      	uxth	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	b29b      	uxth	r3, r3
 800245a:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	b29b      	uxth	r3, r3
 8002462:	b2db      	uxtb	r3, r3
 8002464:	b29b      	uxth	r3, r3
 8002466:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	b29b      	uxth	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	b29b      	uxth	r3, r3
 8002470:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8002472:	202a      	movs	r0, #42	; 0x2a
 8002474:	f000 f981 	bl	800277a <write_command>
    write_multi_data(data, 4);
 8002478:	f107 0310 	add.w	r3, r7, #16
 800247c:	2104      	movs	r1, #4
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f9b0 	bl	80027e4 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b29b      	uxth	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	b29b      	uxth	r3, r3
 800248e:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	b29b      	uxth	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	b29b      	uxth	r3, r3
 8002498:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	b29b      	uxth	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b29b      	uxth	r3, r3
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 80024b0:	202b      	movs	r0, #43	; 0x2b
 80024b2:	f000 f962 	bl	800277a <write_command>
    write_multi_data(data, 4);
 80024b6:	f107 0310 	add.w	r3, r7, #16
 80024ba:	2104      	movs	r1, #4
 80024bc:	4618      	mov	r0, r3
 80024be:	f000 f991 	bl	80027e4 <write_multi_data>
}
 80024c2:	bf00      	nop
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}

080024ca <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 80024ca:	b580      	push	{r7, lr}
 80024cc:	b082      	sub	sp, #8
 80024ce:	af00      	add	r7, sp, #0
 80024d0:	4603      	mov	r3, r0
 80024d2:	80fb      	strh	r3, [r7, #6]
 80024d4:	460b      	mov	r3, r1
 80024d6:	80bb      	strh	r3, [r7, #4]
 80024d8:	4613      	mov	r3, r2
 80024da:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 80024dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db1f      	blt.n	8002524 <SSD1963_PSet+0x5a>
 80024e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024e8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80024ec:	da1a      	bge.n	8002524 <SSD1963_PSet+0x5a>
 80024ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	db16      	blt.n	8002524 <SSD1963_PSet+0x5a>
 80024f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80024fa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80024fe:	da11      	bge.n	8002524 <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8002500:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002508:	3301      	adds	r3, #1
 800250a:	4619      	mov	r1, r3
 800250c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002510:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002514:	3301      	adds	r3, #1
 8002516:	f7ff ff8f 	bl	8002438 <SSD1963_WindowSet>
    write_data(c);
 800251a:	887b      	ldrh	r3, [r7, #2]
 800251c:	4618      	mov	r0, r3
 800251e:	f000 f947 	bl	80027b0 <write_data>
 8002522:	e000      	b.n	8002526 <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8002524:	bf00      	nop
}
 8002526:	3708      	adds	r7, #8
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}

0800252c <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8002530:	202c      	movs	r0, #44	; 0x2c
 8002532:	f000 f922 	bl	800277a <write_command>
}
 8002536:	bf00      	nop
 8002538:	bd80      	pop	{r7, pc}

0800253a <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	4603      	mov	r3, r0
 8002542:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	4618      	mov	r0, r3
 8002548:	f000 f932 	bl	80027b0 <write_data>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8002554:	b590      	push	{r4, r7, lr}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	4604      	mov	r4, r0
 800255c:	4608      	mov	r0, r1
 800255e:	4611      	mov	r1, r2
 8002560:	461a      	mov	r2, r3
 8002562:	4623      	mov	r3, r4
 8002564:	80fb      	strh	r3, [r7, #6]
 8002566:	4603      	mov	r3, r0
 8002568:	80bb      	strh	r3, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	807b      	strh	r3, [r7, #2]
 800256e:	4613      	mov	r3, r2
 8002570:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002572:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002576:	2b00      	cmp	r3, #0
 8002578:	db0d      	blt.n	8002596 <HW_FillFrame+0x42>
 800257a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800257e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002582:	da08      	bge.n	8002596 <HW_FillFrame+0x42>
 8002584:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	db04      	blt.n	8002596 <HW_FillFrame+0x42>
 800258c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002590:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002594:	db02      	blt.n	800259c <HW_FillFrame+0x48>
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	e03c      	b.n	8002616 <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800259c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0d      	blt.n	80025c0 <HW_FillFrame+0x6c>
 80025a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80025a8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80025ac:	da08      	bge.n	80025c0 <HW_FillFrame+0x6c>
 80025ae:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db04      	blt.n	80025c0 <HW_FillFrame+0x6c>
 80025b6:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025ba:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80025be:	db02      	blt.n	80025c6 <HW_FillFrame+0x72>
 80025c0:	f04f 33ff 	mov.w	r3, #4294967295
 80025c4:	e027      	b.n	8002616 <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 80025c6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80025ca:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80025ce:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80025d2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80025d6:	f7ff ff2f 	bl	8002438 <SSD1963_WindowSet>

    write_command(0x2c);
 80025da:	202c      	movs	r0, #44	; 0x2c
 80025dc:	f000 f8cd 	bl	800277a <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	81fb      	strh	r3, [r7, #14]
 80025e4:	e011      	b.n	800260a <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80025e6:	88bb      	ldrh	r3, [r7, #4]
 80025e8:	81bb      	strh	r3, [r7, #12]
 80025ea:	e006      	b.n	80025fa <HW_FillFrame+0xa6>
        {
            write_data(c);
 80025ec:	8c3b      	ldrh	r3, [r7, #32]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 f8de 	bl	80027b0 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 80025f4:	89bb      	ldrh	r3, [r7, #12]
 80025f6:	3301      	adds	r3, #1
 80025f8:	81bb      	strh	r3, [r7, #12]
 80025fa:	f9b7 2000 	ldrsh.w	r2, [r7]
 80025fe:	89bb      	ldrh	r3, [r7, #12]
 8002600:	429a      	cmp	r2, r3
 8002602:	daf3      	bge.n	80025ec <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8002604:	89fb      	ldrh	r3, [r7, #14]
 8002606:	3301      	adds	r3, #1
 8002608:	81fb      	strh	r3, [r7, #14]
 800260a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800260e:	89fb      	ldrh	r3, [r7, #14]
 8002610:	429a      	cmp	r2, r3
 8002612:	dae8      	bge.n	80025e6 <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	bd90      	pop	{r4, r7, pc}

0800261e <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 800261e:	b590      	push	{r4, r7, lr}
 8002620:	b085      	sub	sp, #20
 8002622:	af02      	add	r7, sp, #8
 8002624:	4604      	mov	r4, r0
 8002626:	4608      	mov	r0, r1
 8002628:	4611      	mov	r1, r2
 800262a:	461a      	mov	r2, r3
 800262c:	4623      	mov	r3, r4
 800262e:	80fb      	strh	r3, [r7, #6]
 8002630:	4603      	mov	r3, r0
 8002632:	80bb      	strh	r3, [r7, #4]
 8002634:	460b      	mov	r3, r1
 8002636:	807b      	strh	r3, [r7, #2]
 8002638:	4613      	mov	r3, r2
 800263a:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800263c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002640:	2b00      	cmp	r3, #0
 8002642:	db0d      	blt.n	8002660 <HW_DrawLine+0x42>
 8002644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002648:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800264c:	da08      	bge.n	8002660 <HW_DrawLine+0x42>
 800264e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	db04      	blt.n	8002660 <HW_DrawLine+0x42>
 8002656:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800265a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800265e:	db02      	blt.n	8002666 <HW_DrawLine+0x48>
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
 8002664:	e031      	b.n	80026ca <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8002666:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800266a:	2b00      	cmp	r3, #0
 800266c:	db0d      	blt.n	800268a <HW_DrawLine+0x6c>
 800266e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002672:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002676:	da08      	bge.n	800268a <HW_DrawLine+0x6c>
 8002678:	f9b7 3000 	ldrsh.w	r3, [r7]
 800267c:	2b00      	cmp	r3, #0
 800267e:	db04      	blt.n	800268a <HW_DrawLine+0x6c>
 8002680:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002684:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002688:	db02      	blt.n	8002690 <HW_DrawLine+0x72>
 800268a:	f04f 33ff 	mov.w	r3, #4294967295
 800268e:	e01c      	b.n	80026ca <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8002690:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8002694:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002698:	429a      	cmp	r2, r3
 800269a:	d005      	beq.n	80026a8 <HW_DrawLine+0x8a>
 800269c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80026a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10e      	bne.n	80026c6 <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 80026a8:	f9b7 4000 	ldrsh.w	r4, [r7]
 80026ac:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80026b0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80026b4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80026b8:	8b3b      	ldrh	r3, [r7, #24]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4623      	mov	r3, r4
 80026be:	f7ff ff49 	bl	8002554 <HW_FillFrame>
        return UG_RESULT_OK;
 80026c2:	2300      	movs	r3, #0
 80026c4:	e001      	b.n	80026ca <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 80026c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd90      	pop	{r4, r7, pc}

080026d2 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 80026d2:	b590      	push	{r4, r7, lr}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4604      	mov	r4, r0
 80026da:	4608      	mov	r0, r1
 80026dc:	4611      	mov	r1, r2
 80026de:	461a      	mov	r2, r3
 80026e0:	4623      	mov	r3, r4
 80026e2:	80fb      	strh	r3, [r7, #6]
 80026e4:	4603      	mov	r3, r0
 80026e6:	80bb      	strh	r3, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80026f0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0d      	blt.n	8002714 <HW_DrawImage+0x42>
 80026f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80026fc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002700:	da08      	bge.n	8002714 <HW_DrawImage+0x42>
 8002702:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002706:	2b00      	cmp	r3, #0
 8002708:	db04      	blt.n	8002714 <HW_DrawImage+0x42>
 800270a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800270e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002712:	db02      	blt.n	800271a <HW_DrawImage+0x48>
 8002714:	f04f 33ff 	mov.w	r3, #4294967295
 8002718:	e02b      	b.n	8002772 <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800271a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800271e:	2b00      	cmp	r3, #0
 8002720:	db0d      	blt.n	800273e <HW_DrawImage+0x6c>
 8002722:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002726:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800272a:	da08      	bge.n	800273e <HW_DrawImage+0x6c>
 800272c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db04      	blt.n	800273e <HW_DrawImage+0x6c>
 8002734:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002738:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 800273c:	db02      	blt.n	8002744 <HW_DrawImage+0x72>
 800273e:	f04f 33ff 	mov.w	r3, #4294967295
 8002742:	e016      	b.n	8002772 <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8002744:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002748:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800274c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002750:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002754:	f7ff fe70 	bl	8002438 <SSD1963_WindowSet>

    write_command(0x2c);
 8002758:	202c      	movs	r0, #44	; 0x2c
 800275a:	f000 f80e 	bl	800277a <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 800275e:	8bbb      	ldrh	r3, [r7, #28]
 8002760:	461a      	mov	r2, r3
 8002762:	0052      	lsls	r2, r2, #1
 8002764:	4413      	add	r3, r2
 8002766:	b29b      	uxth	r3, r3
 8002768:	4619      	mov	r1, r3
 800276a:	69b8      	ldr	r0, [r7, #24]
 800276c:	f000 f83a 	bl	80027e4 <write_multi_data>

    return UG_RESULT_OK;
 8002770:	2300      	movs	r3, #0
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}

0800277a <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 800277a:	b480      	push	{r7}
 800277c:	b085      	sub	sp, #20
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 8002784:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002788:	79fa      	ldrb	r2, [r7, #7]
 800278a:	b292      	uxth	r2, r2
 800278c:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 800278e:	2300      	movs	r3, #0
 8002790:	81fb      	strh	r3, [r7, #14]
 8002792:	e002      	b.n	800279a <write_command+0x20>
 8002794:	89fb      	ldrh	r3, [r7, #14]
 8002796:	3301      	adds	r3, #1
 8002798:	81fb      	strh	r3, [r7, #14]
 800279a:	89fb      	ldrh	r3, [r7, #14]
 800279c:	2b0b      	cmp	r3, #11
 800279e:	d9f9      	bls.n	8002794 <write_command+0x1a>
}
 80027a0:	bf00      	nop
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
	...

080027b0 <write_data>:


void write_data(DATA_t data)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 80027ba:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <write_data+0x30>)
 80027bc:	88fb      	ldrh	r3, [r7, #6]
 80027be:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80027c0:	2300      	movs	r3, #0
 80027c2:	81fb      	strh	r3, [r7, #14]
 80027c4:	e002      	b.n	80027cc <write_data+0x1c>
 80027c6:	89fb      	ldrh	r3, [r7, #14]
 80027c8:	3301      	adds	r3, #1
 80027ca:	81fb      	strh	r3, [r7, #14]
 80027cc:	89fb      	ldrh	r3, [r7, #14]
 80027ce:	2b0b      	cmp	r3, #11
 80027d0:	d9f9      	bls.n	80027c6 <write_data+0x16>
 }
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	60000100 	.word	0x60000100

080027e4 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	460b      	mov	r3, r1
 80027ee:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 80027f0:	2300      	movs	r3, #0
 80027f2:	81fb      	strh	r3, [r7, #14]
 80027f4:	e016      	b.n	8002824 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 80027f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	4a0e      	ldr	r2, [pc, #56]	; (800283c <write_multi_data+0x58>)
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002806:	2300      	movs	r3, #0
 8002808:	81bb      	strh	r3, [r7, #12]
 800280a:	e002      	b.n	8002812 <write_multi_data+0x2e>
 800280c:	89bb      	ldrh	r3, [r7, #12]
 800280e:	3301      	adds	r3, #1
 8002810:	81bb      	strh	r3, [r7, #12]
 8002812:	89bb      	ldrh	r3, [r7, #12]
 8002814:	2b0b      	cmp	r3, #11
 8002816:	d9f9      	bls.n	800280c <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 8002818:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800281c:	b29b      	uxth	r3, r3
 800281e:	3301      	adds	r3, #1
 8002820:	b29b      	uxth	r3, r3
 8002822:	81fb      	strh	r3, [r7, #14]
 8002824:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002828:	887b      	ldrh	r3, [r7, #2]
 800282a:	429a      	cmp	r2, r3
 800282c:	dbe3      	blt.n	80027f6 <write_multi_data+0x12>
    }
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	60000100 	.word	0x60000100

08002840 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002840:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002878 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002844:	480d      	ldr	r0, [pc, #52]	; (800287c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002846:	490e      	ldr	r1, [pc, #56]	; (8002880 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800284c:	e002      	b.n	8002854 <LoopCopyDataInit>

0800284e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002852:	3304      	adds	r3, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002858:	d3f9      	bcc.n	800284e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800285c:	4c0b      	ldr	r4, [pc, #44]	; (800288c <LoopFillZerobss+0x26>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002860:	e001      	b.n	8002866 <LoopFillZerobss>

08002862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002864:	3204      	adds	r2, #4

08002866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002868:	d3fb      	bcc.n	8002862 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800286a:	f7fe ffbf 	bl	80017ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286e:	f00a fb23 	bl	800ceb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002872:	f7fd ffab 	bl	80007cc <main>
  bx  lr    
 8002876:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002878:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800287c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002880:	20000160 	.word	0x20000160
  ldr r2, =_sidata
 8002884:	0801a460 	.word	0x0801a460
  ldr r2, =_sbss
 8002888:	20000160 	.word	0x20000160
  ldr r4, =_ebss
 800288c:	200020f4 	.word	0x200020f4

08002890 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002890:	e7fe      	b.n	8002890 <ADC_IRQHandler>

08002892 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002892:	b580      	push	{r7, lr}
 8002894:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002896:	2003      	movs	r0, #3
 8002898:	f001 f81c 	bl	80038d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289c:	200f      	movs	r0, #15
 800289e:	f000 f805 	bl	80028ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a2:	f7fe fbf9 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028b4:	4b12      	ldr	r3, [pc, #72]	; (8002900 <HAL_InitTick+0x54>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b12      	ldr	r3, [pc, #72]	; (8002904 <HAL_InitTick+0x58>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	4619      	mov	r1, r3
 80028be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80028c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f001 f837 	bl	800393e <HAL_SYSTICK_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e00e      	b.n	80028f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2b0f      	cmp	r3, #15
 80028de:	d80a      	bhi.n	80028f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e0:	2200      	movs	r2, #0
 80028e2:	6879      	ldr	r1, [r7, #4]
 80028e4:	f04f 30ff 	mov.w	r0, #4294967295
 80028e8:	f000 ffff 	bl	80038ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_InitTick+0x5c>)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
 80028f4:	e000      	b.n	80028f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	20000004 	.word	0x20000004
 8002904:	2000000c 	.word	0x2000000c
 8002908:	20000008 	.word	0x20000008

0800290c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <HAL_IncTick+0x20>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	461a      	mov	r2, r3
 8002916:	4b06      	ldr	r3, [pc, #24]	; (8002930 <HAL_IncTick+0x24>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4413      	add	r3, r2
 800291c:	4a04      	ldr	r2, [pc, #16]	; (8002930 <HAL_IncTick+0x24>)
 800291e:	6013      	str	r3, [r2, #0]
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
 800292a:	bf00      	nop
 800292c:	2000000c 	.word	0x2000000c
 8002930:	200005c0 	.word	0x200005c0

08002934 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  return uwTick;
 8002938:	4b03      	ldr	r3, [pc, #12]	; (8002948 <HAL_GetTick+0x14>)
 800293a:	681b      	ldr	r3, [r3, #0]
}
 800293c:	4618      	mov	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	200005c0 	.word	0x200005c0

0800294c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002954:	f7ff ffee 	bl	8002934 <HAL_GetTick>
 8002958:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d005      	beq.n	8002972 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002966:	4b0a      	ldr	r3, [pc, #40]	; (8002990 <HAL_Delay+0x44>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	4413      	add	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002972:	bf00      	nop
 8002974:	f7ff ffde 	bl	8002934 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	429a      	cmp	r2, r3
 8002982:	d8f7      	bhi.n	8002974 <HAL_Delay+0x28>
  {
  }
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	3710      	adds	r7, #16
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	2000000c 	.word	0x2000000c

08002994 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299c:	2300      	movs	r3, #0
 800299e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e031      	b.n	8002a0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7fe fb94 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d116      	bne.n	8002a00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029d6:	4b10      	ldr	r3, [pc, #64]	; (8002a18 <HAL_ADC_Init+0x84>)
 80029d8:	4013      	ands	r3, r2
 80029da:	f043 0202 	orr.w	r2, r3, #2
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f970 	bl	8002cc8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f023 0303 	bic.w	r3, r3, #3
 80029f6:	f043 0201 	orr.w	r2, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
 80029fe:	e001      	b.n	8002a04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2200      	movs	r2, #0
 8002a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	ffffeefd 	.word	0xffffeefd

08002a1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002a26:	2300      	movs	r3, #0
 8002a28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e136      	b.n	8002ca6 <HAL_ADC_ConfigChannel+0x28a>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2b09      	cmp	r3, #9
 8002a46:	d93a      	bls.n	8002abe <HAL_ADC_ConfigChannel+0xa2>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a50:	d035      	beq.n	8002abe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	68d9      	ldr	r1, [r3, #12]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	461a      	mov	r2, r3
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	3b1e      	subs	r3, #30
 8002a68:	2207      	movs	r2, #7
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43da      	mvns	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	400a      	ands	r2, r1
 8002a76:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a8d      	ldr	r2, [pc, #564]	; (8002cb4 <HAL_ADC_ConfigChannel+0x298>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d10a      	bne.n	8002a98 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68d9      	ldr	r1, [r3, #12]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	061a      	lsls	r2, r3, #24
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a96:	e035      	b.n	8002b04 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68d9      	ldr	r1, [r3, #12]
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	689a      	ldr	r2, [r3, #8]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	b29b      	uxth	r3, r3
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4603      	mov	r3, r0
 8002aac:	005b      	lsls	r3, r3, #1
 8002aae:	4403      	add	r3, r0
 8002ab0:	3b1e      	subs	r3, #30
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	430a      	orrs	r2, r1
 8002aba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002abc:	e022      	b.n	8002b04 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	6919      	ldr	r1, [r3, #16]
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	4613      	mov	r3, r2
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	4413      	add	r3, r2
 8002ad2:	2207      	movs	r2, #7
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43da      	mvns	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	400a      	ands	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6919      	ldr	r1, [r3, #16]
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	4618      	mov	r0, r3
 8002af4:	4603      	mov	r3, r0
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	4403      	add	r3, r0
 8002afa:	409a      	lsls	r2, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	430a      	orrs	r2, r1
 8002b02:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b06      	cmp	r3, #6
 8002b0a:	d824      	bhi.n	8002b56 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685a      	ldr	r2, [r3, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3b05      	subs	r3, #5
 8002b1e:	221f      	movs	r2, #31
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	43da      	mvns	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	400a      	ands	r2, r1
 8002b2c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	b29b      	uxth	r3, r3
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b05      	subs	r3, #5
 8002b48:	fa00 f203 	lsl.w	r2, r0, r3
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	430a      	orrs	r2, r1
 8002b52:	635a      	str	r2, [r3, #52]	; 0x34
 8002b54:	e04c      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	2b0c      	cmp	r3, #12
 8002b5c:	d824      	bhi.n	8002ba8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	685a      	ldr	r2, [r3, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3b23      	subs	r3, #35	; 0x23
 8002b70:	221f      	movs	r2, #31
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43da      	mvns	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	400a      	ands	r2, r1
 8002b7e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	685a      	ldr	r2, [r3, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	3b23      	subs	r3, #35	; 0x23
 8002b9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ba6:	e023      	b.n	8002bf0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	4413      	add	r3, r2
 8002bb8:	3b41      	subs	r3, #65	; 0x41
 8002bba:	221f      	movs	r2, #31
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43da      	mvns	r2, r3
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	400a      	ands	r2, r1
 8002bc8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	4413      	add	r3, r2
 8002be2:	3b41      	subs	r3, #65	; 0x41
 8002be4:	fa00 f203 	lsl.w	r2, r0, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a30      	ldr	r2, [pc, #192]	; (8002cb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d10a      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1f4>
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c02:	d105      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002c04:	4b2d      	ldr	r3, [pc, #180]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a2c      	ldr	r2, [pc, #176]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c0a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002c0e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a28      	ldr	r2, [pc, #160]	; (8002cb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d10f      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2b12      	cmp	r3, #18
 8002c20:	d10b      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002c22:	4b26      	ldr	r3, [pc, #152]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	4a25      	ldr	r2, [pc, #148]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c28:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c2c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002c2e:	4b23      	ldr	r3, [pc, #140]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	4a22      	ldr	r2, [pc, #136]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c34:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002c38:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a1e      	ldr	r2, [pc, #120]	; (8002cb8 <HAL_ADC_ConfigChannel+0x29c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d12b      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x280>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a1a      	ldr	r2, [pc, #104]	; (8002cb4 <HAL_ADC_ConfigChannel+0x298>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <HAL_ADC_ConfigChannel+0x23a>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b11      	cmp	r3, #17
 8002c54:	d122      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002c56:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	4a18      	ldr	r2, [pc, #96]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c5c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002c60:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4a15      	ldr	r2, [pc, #84]	; (8002cbc <HAL_ADC_ConfigChannel+0x2a0>)
 8002c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002c6c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a10      	ldr	r2, [pc, #64]	; (8002cb4 <HAL_ADC_ConfigChannel+0x298>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d111      	bne.n	8002c9c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002c78:	4b11      	ldr	r3, [pc, #68]	; (8002cc0 <HAL_ADC_ConfigChannel+0x2a4>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a11      	ldr	r2, [pc, #68]	; (8002cc4 <HAL_ADC_ConfigChannel+0x2a8>)
 8002c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c82:	0c9a      	lsrs	r2, r3, #18
 8002c84:	4613      	mov	r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	4413      	add	r3, r2
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c8e:	e002      	b.n	8002c96 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f9      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	10000012 	.word	0x10000012
 8002cb8:	40012000 	.word	0x40012000
 8002cbc:	40012300 	.word	0x40012300
 8002cc0:	20000004 	.word	0x20000004
 8002cc4:	431bde83 	.word	0x431bde83

08002cc8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002cd0:	4b78      	ldr	r3, [pc, #480]	; (8002eb4 <ADC_Init+0x1ec>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	4a77      	ldr	r2, [pc, #476]	; (8002eb4 <ADC_Init+0x1ec>)
 8002cd6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002cda:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002cdc:	4b75      	ldr	r3, [pc, #468]	; (8002eb4 <ADC_Init+0x1ec>)
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4973      	ldr	r1, [pc, #460]	; (8002eb4 <ADC_Init+0x1ec>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685a      	ldr	r2, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cf8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6859      	ldr	r1, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	021a      	lsls	r2, r3, #8
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002d1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6859      	ldr	r1, [r3, #4]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6899      	ldr	r1, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d56:	4a58      	ldr	r2, [pc, #352]	; (8002eb8 <ADC_Init+0x1f0>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d6a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6899      	ldr	r1, [r3, #8]
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	430a      	orrs	r2, r1
 8002d7c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	689a      	ldr	r2, [r3, #8]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d8c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6899      	ldr	r1, [r3, #8]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	430a      	orrs	r2, r1
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	e00f      	b.n	8002dc2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	689a      	ldr	r2, [r3, #8]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002db0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002dc0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0202 	bic.w	r2, r2, #2
 8002dd0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6899      	ldr	r1, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	005a      	lsls	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	430a      	orrs	r2, r1
 8002de4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d01b      	beq.n	8002e28 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002e0e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6859      	ldr	r1, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	035a      	lsls	r2, r3, #13
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
 8002e26:	e007      	b.n	8002e38 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685a      	ldr	r2, [r3, #4]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e36:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002e46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69db      	ldr	r3, [r3, #28]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	051a      	lsls	r2, r3, #20
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	689a      	ldr	r2, [r3, #8]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002e6c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6899      	ldr	r1, [r3, #8]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002e7a:	025a      	lsls	r2, r3, #9
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6899      	ldr	r1, [r3, #8]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	029a      	lsls	r2, r3, #10
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	609a      	str	r2, [r3, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr
 8002eb4:	40012300 	.word	0x40012300
 8002eb8:	0f000001 	.word	0x0f000001

08002ebc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e0ed      	b.n	80030aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d102      	bne.n	8002ee0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe f96e 	bl	80011bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef0:	f7ff fd20 	bl	8002934 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ef6:	e012      	b.n	8002f1e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef8:	f7ff fd1c 	bl	8002934 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d90b      	bls.n	8002f1e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e0c5      	b.n	80030aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0301 	and.w	r3, r3, #1
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0e5      	beq.n	8002ef8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0202 	bic.w	r2, r2, #2
 8002f3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f3c:	f7ff fcfa 	bl	8002934 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f42:	e012      	b.n	8002f6a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f44:	f7ff fcf6 	bl	8002934 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b0a      	cmp	r3, #10
 8002f50:	d90b      	bls.n	8002f6a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2205      	movs	r2, #5
 8002f62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e09f      	b.n	80030aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e5      	bne.n	8002f44 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	7e1b      	ldrb	r3, [r3, #24]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d108      	bne.n	8002f92 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	e007      	b.n	8002fa2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	7e5b      	ldrb	r3, [r3, #25]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d108      	bne.n	8002fbc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	e007      	b.n	8002fcc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	7e9b      	ldrb	r3, [r3, #26]
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d108      	bne.n	8002fe6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0220 	orr.w	r2, r2, #32
 8002fe2:	601a      	str	r2, [r3, #0]
 8002fe4:	e007      	b.n	8002ff6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0220 	bic.w	r2, r2, #32
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	7edb      	ldrb	r3, [r3, #27]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d108      	bne.n	8003010 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0210 	bic.w	r2, r2, #16
 800300c:	601a      	str	r2, [r3, #0]
 800300e:	e007      	b.n	8003020 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f042 0210 	orr.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	7f1b      	ldrb	r3, [r3, #28]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d108      	bne.n	800303a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0208 	orr.w	r2, r2, #8
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 0208 	bic.w	r2, r2, #8
 8003048:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7f5b      	ldrb	r3, [r3, #29]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d108      	bne.n	8003064 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 0204 	orr.w	r2, r2, #4
 8003060:	601a      	str	r2, [r3, #0]
 8003062:	e007      	b.n	8003074 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0204 	bic.w	r2, r2, #4
 8003072:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	431a      	orrs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	ea42 0103 	orr.w	r1, r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	1e5a      	subs	r2, r3, #1
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80030b2:	b480      	push	{r7}
 80030b4:	b087      	sub	sp, #28
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	607a      	str	r2, [r7, #4]
 80030be:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030c6:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b01      	cmp	r3, #1
 80030cc:	d003      	beq.n	80030d6 <HAL_CAN_GetRxMessage+0x24>
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	f040 80f3 	bne.w	80032bc <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d10e      	bne.n	80030fa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	f003 0303 	and.w	r3, r3, #3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d116      	bne.n	8003118 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0e7      	b.n	80032ca <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	f003 0303 	and.w	r3, r3, #3
 8003104:	2b00      	cmp	r3, #0
 8003106:	d107      	bne.n	8003118 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e0d8      	b.n	80032ca <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	331b      	adds	r3, #27
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	4413      	add	r3, r2
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0204 	and.w	r2, r3, #4
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	331b      	adds	r3, #27
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	4413      	add	r3, r2
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0d5b      	lsrs	r3, r3, #21
 8003146:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e00b      	b.n	8003168 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	331b      	adds	r3, #27
 8003158:	011b      	lsls	r3, r3, #4
 800315a:	4413      	add	r3, r2
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	331b      	adds	r3, #27
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	4413      	add	r3, r2
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0202 	and.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	331b      	adds	r3, #27
 8003186:	011b      	lsls	r3, r3, #4
 8003188:	4413      	add	r3, r2
 800318a:	3304      	adds	r3, #4
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 020f 	and.w	r2, r3, #15
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	331b      	adds	r3, #27
 800319e:	011b      	lsls	r3, r3, #4
 80031a0:	4413      	add	r3, r2
 80031a2:	3304      	adds	r3, #4
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	331b      	adds	r3, #27
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	4413      	add	r3, r2
 80031ba:	3304      	adds	r3, #4
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	0c1b      	lsrs	r3, r3, #16
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	b2da      	uxtb	r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	4413      	add	r3, r2
 80031e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0a1a      	lsrs	r2, r3, #8
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	3301      	adds	r3, #1
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	0c1a      	lsrs	r2, r3, #16
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	3302      	adds	r3, #2
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	011b      	lsls	r3, r3, #4
 8003218:	4413      	add	r3, r2
 800321a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	0e1a      	lsrs	r2, r3, #24
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	3303      	adds	r3, #3
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	4413      	add	r3, r2
 8003234:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3304      	adds	r3, #4
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4413      	add	r3, r2
 800324c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	0a1a      	lsrs	r2, r3, #8
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	3305      	adds	r3, #5
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	0c1a      	lsrs	r2, r3, #16
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	3306      	adds	r3, #6
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e1a      	lsrs	r2, r3, #24
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	3307      	adds	r3, #7
 800328c:	b2d2      	uxtb	r2, r2
 800328e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d108      	bne.n	80032a8 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0220 	orr.w	r2, r2, #32
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e007      	b.n	80032b8 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0220 	orr.w	r2, r2, #32
 80032b6:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	e006      	b.n	80032ca <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
  }
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b08a      	sub	sp, #40	; 0x28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80032de:	2300      	movs	r3, #0
 80032e0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	695b      	ldr	r3, [r3, #20]
 80032e8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d07c      	beq.n	8003416 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d023      	beq.n	800336e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2201      	movs	r2, #1
 800332c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d003      	beq.n	8003340 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f000 f983 	bl	8003644 <HAL_CAN_TxMailbox0CompleteCallback>
 800333e:	e016      	b.n	800336e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d004      	beq.n	8003354 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800334a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003350:	627b      	str	r3, [r7, #36]	; 0x24
 8003352:	e00c      	b.n	800336e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	f003 0308 	and.w	r3, r3, #8
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003360:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003364:	627b      	str	r3, [r7, #36]	; 0x24
 8003366:	e002      	b.n	800336e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f989 	bl	8003680 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d024      	beq.n	80033c2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003380:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003388:	2b00      	cmp	r3, #0
 800338a:	d003      	beq.n	8003394 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 f963 	bl	8003658 <HAL_CAN_TxMailbox1CompleteCallback>
 8003392:	e016      	b.n	80033c2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339a:	2b00      	cmp	r3, #0
 800339c:	d004      	beq.n	80033a8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
 80033a6:	e00c      	b.n	80033c2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80033b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033b8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ba:	e002      	b.n	80033c2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f969 	bl	8003694 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d024      	beq.n	8003416 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f943 	bl	800366c <HAL_CAN_TxMailbox2CompleteCallback>
 80033e6:	e016      	b.n	8003416 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d004      	beq.n	80033fc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
 80033fa:	e00c      	b.n	8003416 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	e002      	b.n	8003416 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f949 	bl	80036a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003416:	6a3b      	ldr	r3, [r7, #32]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00c      	beq.n	800343a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	d007      	beq.n	800343a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003430:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2210      	movs	r2, #16
 8003438:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800343a:	6a3b      	ldr	r3, [r7, #32]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00b      	beq.n	800345c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d006      	beq.n	800345c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2208      	movs	r2, #8
 8003454:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f930 	bl	80036bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d009      	beq.n	800347a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	f003 0303 	and.w	r3, r3, #3
 8003470:	2b00      	cmp	r3, #0
 8003472:	d002      	beq.n	800347a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd f983 	bl	8000780 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00c      	beq.n	800349e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	d007      	beq.n	800349e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003494:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2210      	movs	r2, #16
 800349c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	f003 0320 	and.w	r3, r3, #32
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00b      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d006      	beq.n	80034c0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2208      	movs	r2, #8
 80034b8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f912 	bl	80036e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d009      	beq.n	80034de <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	f003 0303 	and.w	r3, r3, #3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f8f9 	bl	80036d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d006      	beq.n	8003500 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	2210      	movs	r2, #16
 80034f8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 f8fc 	bl	80036f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0308 	and.w	r3, r3, #8
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2208      	movs	r2, #8
 800351a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 f8f5 	bl	800370c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003522:	6a3b      	ldr	r3, [r7, #32]
 8003524:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003528:	2b00      	cmp	r3, #0
 800352a:	d07b      	beq.n	8003624 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d072      	beq.n	800361c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f043 0302 	orr.w	r3, r3, #2
 800356c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800357e:	2b00      	cmp	r3, #0
 8003580:	d003      	beq.n	800358a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	f043 0304 	orr.w	r3, r3, #4
 8003588:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800358a:	6a3b      	ldr	r3, [r7, #32]
 800358c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003590:	2b00      	cmp	r3, #0
 8003592:	d043      	beq.n	800361c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800359a:	2b00      	cmp	r3, #0
 800359c:	d03e      	beq.n	800361c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80035a4:	2b60      	cmp	r3, #96	; 0x60
 80035a6:	d02b      	beq.n	8003600 <HAL_CAN_IRQHandler+0x32a>
 80035a8:	2b60      	cmp	r3, #96	; 0x60
 80035aa:	d82e      	bhi.n	800360a <HAL_CAN_IRQHandler+0x334>
 80035ac:	2b50      	cmp	r3, #80	; 0x50
 80035ae:	d022      	beq.n	80035f6 <HAL_CAN_IRQHandler+0x320>
 80035b0:	2b50      	cmp	r3, #80	; 0x50
 80035b2:	d82a      	bhi.n	800360a <HAL_CAN_IRQHandler+0x334>
 80035b4:	2b40      	cmp	r3, #64	; 0x40
 80035b6:	d019      	beq.n	80035ec <HAL_CAN_IRQHandler+0x316>
 80035b8:	2b40      	cmp	r3, #64	; 0x40
 80035ba:	d826      	bhi.n	800360a <HAL_CAN_IRQHandler+0x334>
 80035bc:	2b30      	cmp	r3, #48	; 0x30
 80035be:	d010      	beq.n	80035e2 <HAL_CAN_IRQHandler+0x30c>
 80035c0:	2b30      	cmp	r3, #48	; 0x30
 80035c2:	d822      	bhi.n	800360a <HAL_CAN_IRQHandler+0x334>
 80035c4:	2b10      	cmp	r3, #16
 80035c6:	d002      	beq.n	80035ce <HAL_CAN_IRQHandler+0x2f8>
 80035c8:	2b20      	cmp	r3, #32
 80035ca:	d005      	beq.n	80035d8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80035cc:	e01d      	b.n	800360a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80035ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d0:	f043 0308 	orr.w	r3, r3, #8
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035d6:	e019      	b.n	800360c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80035d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035da:	f043 0310 	orr.w	r3, r3, #16
 80035de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035e0:	e014      	b.n	800360c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	f043 0320 	orr.w	r3, r3, #32
 80035e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035ea:	e00f      	b.n	800360c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80035ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035f4:	e00a      	b.n	800360c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80035fe:	e005      	b.n	800360c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003606:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003608:	e000      	b.n	800360c <HAL_CAN_IRQHandler+0x336>
            break;
 800360a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800361a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2204      	movs	r2, #4
 8003622:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003626:	2b00      	cmp	r3, #0
 8003628:	d008      	beq.n	800363c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	431a      	orrs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f872 	bl	8003720 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800363c:	bf00      	nop
 800363e:	3728      	adds	r7, #40	; 0x28
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003660:	bf00      	nop
 8003662:	370c      	adds	r7, #12
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr

0800366c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003692:	4770      	bx	lr

08003694 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800369c:	bf00      	nop
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80036d8:	bf00      	nop
 80036da:	370c      	adds	r7, #12
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80036e4:	b480      	push	{r7}
 80036e6:	b083      	sub	sp, #12
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr

080036f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003700:	bf00      	nop
 8003702:	370c      	adds	r7, #12
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003728:	bf00      	nop
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f003 0307 	and.w	r3, r3, #7
 8003742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <__NVIC_SetPriorityGrouping+0x40>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003750:	4013      	ands	r3, r2
 8003752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800375c:	4b06      	ldr	r3, [pc, #24]	; (8003778 <__NVIC_SetPriorityGrouping+0x44>)
 800375e:	4313      	orrs	r3, r2
 8003760:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003762:	4a04      	ldr	r2, [pc, #16]	; (8003774 <__NVIC_SetPriorityGrouping+0x40>)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	60d3      	str	r3, [r2, #12]
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	e000ed00 	.word	0xe000ed00
 8003778:	05fa0000 	.word	0x05fa0000

0800377c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <__NVIC_GetPriorityGrouping+0x18>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	0a1b      	lsrs	r3, r3, #8
 8003786:	f003 0307 	and.w	r3, r3, #7
}
 800378a:	4618      	mov	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	4603      	mov	r3, r0
 80037a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	db0b      	blt.n	80037c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	f003 021f 	and.w	r2, r3, #31
 80037b0:	4907      	ldr	r1, [pc, #28]	; (80037d0 <__NVIC_EnableIRQ+0x38>)
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	095b      	lsrs	r3, r3, #5
 80037b8:	2001      	movs	r0, #1
 80037ba:	fa00 f202 	lsl.w	r2, r0, r2
 80037be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr
 80037ce:	bf00      	nop
 80037d0:	e000e100 	.word	0xe000e100

080037d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	6039      	str	r1, [r7, #0]
 80037de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	db0a      	blt.n	80037fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	b2da      	uxtb	r2, r3
 80037ec:	490c      	ldr	r1, [pc, #48]	; (8003820 <__NVIC_SetPriority+0x4c>)
 80037ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f2:	0112      	lsls	r2, r2, #4
 80037f4:	b2d2      	uxtb	r2, r2
 80037f6:	440b      	add	r3, r1
 80037f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037fc:	e00a      	b.n	8003814 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	b2da      	uxtb	r2, r3
 8003802:	4908      	ldr	r1, [pc, #32]	; (8003824 <__NVIC_SetPriority+0x50>)
 8003804:	79fb      	ldrb	r3, [r7, #7]
 8003806:	f003 030f 	and.w	r3, r3, #15
 800380a:	3b04      	subs	r3, #4
 800380c:	0112      	lsls	r2, r2, #4
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	440b      	add	r3, r1
 8003812:	761a      	strb	r2, [r3, #24]
}
 8003814:	bf00      	nop
 8003816:	370c      	adds	r7, #12
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	e000e100 	.word	0xe000e100
 8003824:	e000ed00 	.word	0xe000ed00

08003828 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003828:	b480      	push	{r7}
 800382a:	b089      	sub	sp, #36	; 0x24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 0307 	and.w	r3, r3, #7
 800383a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f1c3 0307 	rsb	r3, r3, #7
 8003842:	2b04      	cmp	r3, #4
 8003844:	bf28      	it	cs
 8003846:	2304      	movcs	r3, #4
 8003848:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	3304      	adds	r3, #4
 800384e:	2b06      	cmp	r3, #6
 8003850:	d902      	bls.n	8003858 <NVIC_EncodePriority+0x30>
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	3b03      	subs	r3, #3
 8003856:	e000      	b.n	800385a <NVIC_EncodePriority+0x32>
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800385c:	f04f 32ff 	mov.w	r2, #4294967295
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	fa02 f303 	lsl.w	r3, r2, r3
 8003866:	43da      	mvns	r2, r3
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	401a      	ands	r2, r3
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003870:	f04f 31ff 	mov.w	r1, #4294967295
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	fa01 f303 	lsl.w	r3, r1, r3
 800387a:	43d9      	mvns	r1, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003880:	4313      	orrs	r3, r2
         );
}
 8003882:	4618      	mov	r0, r3
 8003884:	3724      	adds	r7, #36	; 0x24
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
	...

08003890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b082      	sub	sp, #8
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038a0:	d301      	bcc.n	80038a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038a2:	2301      	movs	r3, #1
 80038a4:	e00f      	b.n	80038c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038a6:	4a0a      	ldr	r2, [pc, #40]	; (80038d0 <SysTick_Config+0x40>)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	3b01      	subs	r3, #1
 80038ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ae:	210f      	movs	r1, #15
 80038b0:	f04f 30ff 	mov.w	r0, #4294967295
 80038b4:	f7ff ff8e 	bl	80037d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038b8:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <SysTick_Config+0x40>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038be:	4b04      	ldr	r3, [pc, #16]	; (80038d0 <SysTick_Config+0x40>)
 80038c0:	2207      	movs	r2, #7
 80038c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	e000e010 	.word	0xe000e010

080038d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b082      	sub	sp, #8
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038dc:	6878      	ldr	r0, [r7, #4]
 80038de:	f7ff ff29 	bl	8003734 <__NVIC_SetPriorityGrouping>
}
 80038e2:	bf00      	nop
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038ea:	b580      	push	{r7, lr}
 80038ec:	b086      	sub	sp, #24
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	4603      	mov	r3, r0
 80038f2:	60b9      	str	r1, [r7, #8]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80038fc:	f7ff ff3e 	bl	800377c <__NVIC_GetPriorityGrouping>
 8003900:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003902:	687a      	ldr	r2, [r7, #4]
 8003904:	68b9      	ldr	r1, [r7, #8]
 8003906:	6978      	ldr	r0, [r7, #20]
 8003908:	f7ff ff8e 	bl	8003828 <NVIC_EncodePriority>
 800390c:	4602      	mov	r2, r0
 800390e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003912:	4611      	mov	r1, r2
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff5d 	bl	80037d4 <__NVIC_SetPriority>
}
 800391a:	bf00      	nop
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	4603      	mov	r3, r0
 800392a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff31 	bl	8003798 <__NVIC_EnableIRQ>
}
 8003936:	bf00      	nop
 8003938:	3708      	adds	r7, #8
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff ffa2 	bl	8003890 <SysTick_Config>
 800394c:	4603      	mov	r3, r0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3708      	adds	r7, #8
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003958:	b480      	push	{r7}
 800395a:	b089      	sub	sp, #36	; 0x24
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003962:	2300      	movs	r3, #0
 8003964:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003966:	2300      	movs	r3, #0
 8003968:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800396e:	2300      	movs	r3, #0
 8003970:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003972:	2300      	movs	r3, #0
 8003974:	61fb      	str	r3, [r7, #28]
 8003976:	e175      	b.n	8003c64 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003978:	2201      	movs	r2, #1
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	697a      	ldr	r2, [r7, #20]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	429a      	cmp	r2, r3
 8003992:	f040 8164 	bne.w	8003c5e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d005      	beq.n	80039ae <HAL_GPIO_Init+0x56>
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d130      	bne.n	8003a10 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	2203      	movs	r2, #3
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43db      	mvns	r3, r3
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	4013      	ands	r3, r2
 80039c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	68da      	ldr	r2, [r3, #12]
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	69ba      	ldr	r2, [r7, #24]
 80039dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039e4:	2201      	movs	r2, #1
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	43db      	mvns	r3, r3
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	4013      	ands	r3, r2
 80039f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	091b      	lsrs	r3, r3, #4
 80039fa:	f003 0201 	and.w	r2, r3, #1
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	69ba      	ldr	r2, [r7, #24]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f003 0303 	and.w	r3, r3, #3
 8003a18:	2b03      	cmp	r3, #3
 8003a1a:	d017      	beq.n	8003a4c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	2203      	movs	r2, #3
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	4013      	ands	r3, r2
 8003a32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	005b      	lsls	r3, r3, #1
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d123      	bne.n	8003aa0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	08da      	lsrs	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	3208      	adds	r2, #8
 8003a60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	f003 0307 	and.w	r3, r3, #7
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	f003 0307 	and.w	r3, r3, #7
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	fa02 f303 	lsl.w	r3, r2, r3
 8003a8c:	69ba      	ldr	r2, [r7, #24]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	08da      	lsrs	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	3208      	adds	r2, #8
 8003a9a:	69b9      	ldr	r1, [r7, #24]
 8003a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	69ba      	ldr	r2, [r7, #24]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0203 	and.w	r2, r3, #3
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	005b      	lsls	r3, r3, #1
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f000 80be 	beq.w	8003c5e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ae2:	4b66      	ldr	r3, [pc, #408]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae6:	4a65      	ldr	r2, [pc, #404]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003ae8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aec:	6453      	str	r3, [r2, #68]	; 0x44
 8003aee:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_GPIO_Init+0x324>)
 8003af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	60fb      	str	r3, [r7, #12]
 8003af8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003afa:	4a61      	ldr	r2, [pc, #388]	; (8003c80 <HAL_GPIO_Init+0x328>)
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	089b      	lsrs	r3, r3, #2
 8003b00:	3302      	adds	r3, #2
 8003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b08:	69fb      	ldr	r3, [r7, #28]
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	220f      	movs	r2, #15
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_GPIO_Init+0x32c>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d037      	beq.n	8003b96 <HAL_GPIO_Init+0x23e>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a57      	ldr	r2, [pc, #348]	; (8003c88 <HAL_GPIO_Init+0x330>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d031      	beq.n	8003b92 <HAL_GPIO_Init+0x23a>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a56      	ldr	r2, [pc, #344]	; (8003c8c <HAL_GPIO_Init+0x334>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d02b      	beq.n	8003b8e <HAL_GPIO_Init+0x236>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a55      	ldr	r2, [pc, #340]	; (8003c90 <HAL_GPIO_Init+0x338>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d025      	beq.n	8003b8a <HAL_GPIO_Init+0x232>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a54      	ldr	r2, [pc, #336]	; (8003c94 <HAL_GPIO_Init+0x33c>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d01f      	beq.n	8003b86 <HAL_GPIO_Init+0x22e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a53      	ldr	r2, [pc, #332]	; (8003c98 <HAL_GPIO_Init+0x340>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d019      	beq.n	8003b82 <HAL_GPIO_Init+0x22a>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_GPIO_Init+0x344>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <HAL_GPIO_Init+0x226>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a51      	ldr	r2, [pc, #324]	; (8003ca0 <HAL_GPIO_Init+0x348>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00d      	beq.n	8003b7a <HAL_GPIO_Init+0x222>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_GPIO_Init+0x34c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d007      	beq.n	8003b76 <HAL_GPIO_Init+0x21e>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4f      	ldr	r2, [pc, #316]	; (8003ca8 <HAL_GPIO_Init+0x350>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d101      	bne.n	8003b72 <HAL_GPIO_Init+0x21a>
 8003b6e:	2309      	movs	r3, #9
 8003b70:	e012      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b72:	230a      	movs	r3, #10
 8003b74:	e010      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b76:	2308      	movs	r3, #8
 8003b78:	e00e      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	e00c      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b7e:	2306      	movs	r3, #6
 8003b80:	e00a      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b82:	2305      	movs	r3, #5
 8003b84:	e008      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b86:	2304      	movs	r3, #4
 8003b88:	e006      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e004      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e002      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_GPIO_Init+0x240>
 8003b96:	2300      	movs	r3, #0
 8003b98:	69fa      	ldr	r2, [r7, #28]
 8003b9a:	f002 0203 	and.w	r2, r2, #3
 8003b9e:	0092      	lsls	r2, r2, #2
 8003ba0:	4093      	lsls	r3, r2
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ba8:	4935      	ldr	r1, [pc, #212]	; (8003c80 <HAL_GPIO_Init+0x328>)
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	089b      	lsrs	r3, r3, #2
 8003bae:	3302      	adds	r3, #2
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bb6:	4b3d      	ldr	r3, [pc, #244]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bda:	4a34      	ldr	r2, [pc, #208]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003be0:	4b32      	ldr	r3, [pc, #200]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	43db      	mvns	r3, r3
 8003bea:	69ba      	ldr	r2, [r7, #24]
 8003bec:	4013      	ands	r3, r2
 8003bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003bfc:	69ba      	ldr	r2, [r7, #24]
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c04:	4a29      	ldr	r2, [pc, #164]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c0a:	4b28      	ldr	r3, [pc, #160]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	43db      	mvns	r3, r3
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	4013      	ands	r3, r2
 8003c18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c26:	69ba      	ldr	r2, [r7, #24]
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c2e:	4a1f      	ldr	r2, [pc, #124]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c34:	4b1d      	ldr	r3, [pc, #116]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d003      	beq.n	8003c58 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c58:	4a14      	ldr	r2, [pc, #80]	; (8003cac <HAL_GPIO_Init+0x354>)
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3301      	adds	r3, #1
 8003c62:	61fb      	str	r3, [r7, #28]
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b0f      	cmp	r3, #15
 8003c68:	f67f ae86 	bls.w	8003978 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c6c:	bf00      	nop
 8003c6e:	bf00      	nop
 8003c70:	3724      	adds	r7, #36	; 0x24
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	40013800 	.word	0x40013800
 8003c84:	40020000 	.word	0x40020000
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020800 	.word	0x40020800
 8003c90:	40020c00 	.word	0x40020c00
 8003c94:	40021000 	.word	0x40021000
 8003c98:	40021400 	.word	0x40021400
 8003c9c:	40021800 	.word	0x40021800
 8003ca0:	40021c00 	.word	0x40021c00
 8003ca4:	40022000 	.word	0x40022000
 8003ca8:	40022400 	.word	0x40022400
 8003cac:	40013c00 	.word	0x40013c00

08003cb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b083      	sub	sp, #12
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	460b      	mov	r3, r1
 8003cba:	807b      	strh	r3, [r7, #2]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc0:	787b      	ldrb	r3, [r7, #1]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cc6:	887a      	ldrh	r2, [r7, #2]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ccc:	e003      	b.n	8003cd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003cce:	887b      	ldrh	r3, [r7, #2]
 8003cd0:	041a      	lsls	r2, r3, #16
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	619a      	str	r2, [r3, #24]
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cf4:	887a      	ldrh	r2, [r7, #2]
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	041a      	lsls	r2, r3, #16
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	43d9      	mvns	r1, r3
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	400b      	ands	r3, r1
 8003d04:	431a      	orrs	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d16:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d18:	b08f      	sub	sp, #60	; 0x3c
 8003d1a:	af0a      	add	r7, sp, #40	; 0x28
 8003d1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e116      	b.n	8003f56 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f008 fc74 	bl	800c630 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2203      	movs	r2, #3
 8003d4c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d102      	bne.n	8003d62 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 ff83 	bl	8008c72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	687e      	ldr	r6, [r7, #4]
 8003d74:	466d      	mov	r5, sp
 8003d76:	f106 0410 	add.w	r4, r6, #16
 8003d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d82:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d86:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d8a:	1d33      	adds	r3, r6, #4
 8003d8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8e:	6838      	ldr	r0, [r7, #0]
 8003d90:	f004 fe64 	bl	8008a5c <USB_CoreInit>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e0d7      	b.n	8003f56 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2100      	movs	r1, #0
 8003dac:	4618      	mov	r0, r3
 8003dae:	f004 ff71 	bl	8008c94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003db2:	2300      	movs	r3, #0
 8003db4:	73fb      	strb	r3, [r7, #15]
 8003db6:	e04a      	b.n	8003e4e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003db8:	7bfa      	ldrb	r2, [r7, #15]
 8003dba:	6879      	ldr	r1, [r7, #4]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	00db      	lsls	r3, r3, #3
 8003dc0:	4413      	add	r3, r2
 8003dc2:	009b      	lsls	r3, r3, #2
 8003dc4:	440b      	add	r3, r1
 8003dc6:	333d      	adds	r3, #61	; 0x3d
 8003dc8:	2201      	movs	r2, #1
 8003dca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dcc:	7bfa      	ldrb	r2, [r7, #15]
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	00db      	lsls	r3, r3, #3
 8003dd4:	4413      	add	r3, r2
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	333c      	adds	r3, #60	; 0x3c
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	7bfb      	ldrb	r3, [r7, #15]
 8003de4:	b298      	uxth	r0, r3
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	4613      	mov	r3, r2
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	4413      	add	r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	3344      	adds	r3, #68	; 0x44
 8003df4:	4602      	mov	r2, r0
 8003df6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003df8:	7bfa      	ldrb	r2, [r7, #15]
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	3340      	adds	r3, #64	; 0x40
 8003e08:	2200      	movs	r2, #0
 8003e0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3348      	adds	r3, #72	; 0x48
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e20:	7bfa      	ldrb	r2, [r7, #15]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	00db      	lsls	r3, r3, #3
 8003e28:	4413      	add	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	334c      	adds	r3, #76	; 0x4c
 8003e30:	2200      	movs	r2, #0
 8003e32:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e34:	7bfa      	ldrb	r2, [r7, #15]
 8003e36:	6879      	ldr	r1, [r7, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	3354      	adds	r3, #84	; 0x54
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3af      	bcc.n	8003db8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e58:	2300      	movs	r3, #0
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e044      	b.n	8003ee8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e5e:	7bfa      	ldrb	r2, [r7, #15]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	4413      	add	r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e70:	2200      	movs	r2, #0
 8003e72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e74:	7bfa      	ldrb	r2, [r7, #15]
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	440b      	add	r3, r1
 8003e82:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e8a:	7bfa      	ldrb	r2, [r7, #15]
 8003e8c:	6879      	ldr	r1, [r7, #4]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	00db      	lsls	r3, r3, #3
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	440b      	add	r3, r1
 8003e98:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ea0:	7bfa      	ldrb	r2, [r7, #15]
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	00db      	lsls	r3, r3, #3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eb6:	7bfa      	ldrb	r2, [r7, #15]
 8003eb8:	6879      	ldr	r1, [r7, #4]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	00db      	lsls	r3, r3, #3
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ecc:	7bfa      	ldrb	r2, [r7, #15]
 8003ece:	6879      	ldr	r1, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	00db      	lsls	r3, r3, #3
 8003ed4:	4413      	add	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	440b      	add	r3, r1
 8003eda:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ee2:	7bfb      	ldrb	r3, [r7, #15]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	73fb      	strb	r3, [r7, #15]
 8003ee8:	7bfa      	ldrb	r2, [r7, #15]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d3b5      	bcc.n	8003e5e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	603b      	str	r3, [r7, #0]
 8003ef8:	687e      	ldr	r6, [r7, #4]
 8003efa:	466d      	mov	r5, sp
 8003efc:	f106 0410 	add.w	r4, r6, #16
 8003f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f08:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f0c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f10:	1d33      	adds	r3, r6, #4
 8003f12:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f14:	6838      	ldr	r0, [r7, #0]
 8003f16:	f004 ff09 	bl	8008d2c <USB_DevInit>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d005      	beq.n	8003f2c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e014      	b.n	8003f56 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d102      	bne.n	8003f4a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f001 f97b 	bl	8005240 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f006 f857 	bl	800a002 <USB_DevDisconnect>

  return HAL_OK;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f5e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003f5e:	b580      	push	{r7, lr}
 8003f60:	b082      	sub	sp, #8
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_PCD_Start+0x16>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e012      	b.n	8003f9a <HAL_PCD_Start+0x3c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4618      	mov	r0, r3
 8003f82:	f004 fe65 	bl	8008c50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f006 f818 	bl	8009fc0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003fa2:	b590      	push	{r4, r7, lr}
 8003fa4:	b08d      	sub	sp, #52	; 0x34
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fb0:	6a3b      	ldr	r3, [r7, #32]
 8003fb2:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4618      	mov	r0, r3
 8003fba:	f006 f8d6 	bl	800a16a <USB_GetMode>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 84b7 	bne.w	8004934 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f006 f83a 	bl	800a044 <USB_ReadInterrupts>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	f000 84ad 	beq.w	8004932 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f006 f827 	bl	800a044 <USB_ReadInterrupts>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	f003 0302 	and.w	r3, r3, #2
 8003ffc:	2b02      	cmp	r3, #2
 8003ffe:	d107      	bne.n	8004010 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695a      	ldr	r2, [r3, #20]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f002 0202 	and.w	r2, r2, #2
 800400e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f006 f815 	bl	800a044 <USB_ReadInterrupts>
 800401a:	4603      	mov	r3, r0
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b10      	cmp	r3, #16
 8004022:	d161      	bne.n	80040e8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	699a      	ldr	r2, [r3, #24]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0210 	bic.w	r2, r2, #16
 8004032:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	f003 020f 	and.w	r2, r3, #15
 8004040:	4613      	mov	r3, r2
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	4413      	add	r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	4413      	add	r3, r2
 8004050:	3304      	adds	r3, #4
 8004052:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	0c5b      	lsrs	r3, r3, #17
 8004058:	f003 030f 	and.w	r3, r3, #15
 800405c:	2b02      	cmp	r3, #2
 800405e:	d124      	bne.n	80040aa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004060:	69ba      	ldr	r2, [r7, #24]
 8004062:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004066:	4013      	ands	r3, r2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d035      	beq.n	80040d8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	091b      	lsrs	r3, r3, #4
 8004074:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004076:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800407a:	b29b      	uxth	r3, r3
 800407c:	461a      	mov	r2, r3
 800407e:	6a38      	ldr	r0, [r7, #32]
 8004080:	f005 fe4c 	bl	8009d1c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	091b      	lsrs	r3, r3, #4
 800408c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004090:	441a      	add	r2, r3
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	6a1a      	ldr	r2, [r3, #32]
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	091b      	lsrs	r3, r3, #4
 800409e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040a2:	441a      	add	r2, r3
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	621a      	str	r2, [r3, #32]
 80040a8:	e016      	b.n	80040d8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80040aa:	69bb      	ldr	r3, [r7, #24]
 80040ac:	0c5b      	lsrs	r3, r3, #17
 80040ae:	f003 030f 	and.w	r3, r3, #15
 80040b2:	2b06      	cmp	r3, #6
 80040b4:	d110      	bne.n	80040d8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80040bc:	2208      	movs	r2, #8
 80040be:	4619      	mov	r1, r3
 80040c0:	6a38      	ldr	r0, [r7, #32]
 80040c2:	f005 fe2b 	bl	8009d1c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	6a1a      	ldr	r2, [r3, #32]
 80040ca:	69bb      	ldr	r3, [r7, #24]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80040d2:	441a      	add	r2, r3
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	699a      	ldr	r2, [r3, #24]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0210 	orr.w	r2, r2, #16
 80040e6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4618      	mov	r0, r3
 80040ee:	f005 ffa9 	bl	800a044 <USB_ReadInterrupts>
 80040f2:	4603      	mov	r3, r0
 80040f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80040fc:	f040 80a7 	bne.w	800424e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004100:	2300      	movs	r3, #0
 8004102:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f005 ffae 	bl	800a06a <USB_ReadDevAllOutEpInterrupt>
 800410e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004110:	e099      	b.n	8004246 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	f000 808e 	beq.w	800423a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004124:	b2d2      	uxtb	r2, r2
 8004126:	4611      	mov	r1, r2
 8004128:	4618      	mov	r0, r3
 800412a:	f005 ffd2 	bl	800a0d2 <USB_ReadDevOutEPInterrupt>
 800412e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800413a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413c:	015a      	lsls	r2, r3, #5
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	4413      	add	r3, r2
 8004142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004146:	461a      	mov	r2, r3
 8004148:	2301      	movs	r3, #1
 800414a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800414c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 fef0 	bl	8004f34 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00c      	beq.n	8004178 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800415e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004160:	015a      	lsls	r2, r3, #5
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	4413      	add	r3, r2
 8004166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800416a:	461a      	mov	r2, r3
 800416c:	2308      	movs	r3, #8
 800416e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004170:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 ffc6 	bl	8005104 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f003 0310 	and.w	r3, r3, #16
 800417e:	2b00      	cmp	r3, #0
 8004180:	d008      	beq.n	8004194 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	461a      	mov	r2, r3
 8004190:	2310      	movs	r3, #16
 8004192:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004194:	693b      	ldr	r3, [r7, #16]
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d030      	beq.n	8004200 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800419e:	6a3b      	ldr	r3, [r7, #32]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041a6:	2b80      	cmp	r3, #128	; 0x80
 80041a8:	d109      	bne.n	80041be <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	69fa      	ldr	r2, [r7, #28]
 80041b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041bc:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80041be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041c0:	4613      	mov	r3, r2
 80041c2:	00db      	lsls	r3, r3, #3
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	4413      	add	r3, r2
 80041d0:	3304      	adds	r3, #4
 80041d2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	78db      	ldrb	r3, [r3, #3]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d108      	bne.n	80041ee <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	2200      	movs	r2, #0
 80041e0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f008 fb3b 	bl	800c864 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	461a      	mov	r2, r3
 80041fc:	2302      	movs	r3, #2
 80041fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b00      	cmp	r3, #0
 8004208:	d008      	beq.n	800421c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004216:	461a      	mov	r2, r3
 8004218:	2320      	movs	r3, #32
 800421a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800421c:	693b      	ldr	r3, [r7, #16]
 800421e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d009      	beq.n	800423a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004232:	461a      	mov	r2, r3
 8004234:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004238:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	3301      	adds	r3, #1
 800423e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004242:	085b      	lsrs	r3, r3, #1
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004248:	2b00      	cmp	r3, #0
 800424a:	f47f af62 	bne.w	8004112 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4618      	mov	r0, r3
 8004254:	f005 fef6 	bl	800a044 <USB_ReadInterrupts>
 8004258:	4603      	mov	r3, r0
 800425a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004262:	f040 80db 	bne.w	800441c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4618      	mov	r0, r3
 800426c:	f005 ff17 	bl	800a09e <USB_ReadDevAllInEpInterrupt>
 8004270:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004272:	2300      	movs	r3, #0
 8004274:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004276:	e0cd      	b.n	8004414 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	f000 80c2 	beq.w	8004408 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	b2d2      	uxtb	r2, r2
 800428c:	4611      	mov	r1, r2
 800428e:	4618      	mov	r0, r3
 8004290:	f005 ff3d 	bl	800a10e <USB_ReadDevInEPInterrupt>
 8004294:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f003 0301 	and.w	r3, r3, #1
 800429c:	2b00      	cmp	r3, #0
 800429e:	d057      	beq.n	8004350 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80042a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	2201      	movs	r2, #1
 80042a8:	fa02 f303 	lsl.w	r3, r2, r3
 80042ac:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	43db      	mvns	r3, r3
 80042ba:	69f9      	ldr	r1, [r7, #28]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042c0:	4013      	ands	r3, r2
 80042c2:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	015a      	lsls	r2, r3, #5
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	4413      	add	r3, r2
 80042cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d0:	461a      	mov	r2, r3
 80042d2:	2301      	movs	r3, #1
 80042d4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d132      	bne.n	8004344 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80042de:	6879      	ldr	r1, [r7, #4]
 80042e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	440b      	add	r3, r1
 80042ec:	334c      	adds	r3, #76	; 0x4c
 80042ee:	6819      	ldr	r1, [r3, #0]
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042f4:	4613      	mov	r3, r2
 80042f6:	00db      	lsls	r3, r3, #3
 80042f8:	4413      	add	r3, r2
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4403      	add	r3, r0
 80042fe:	3348      	adds	r3, #72	; 0x48
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4419      	add	r1, r3
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004308:	4613      	mov	r3, r2
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4413      	add	r3, r2
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	4403      	add	r3, r0
 8004312:	334c      	adds	r3, #76	; 0x4c
 8004314:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004318:	2b00      	cmp	r3, #0
 800431a:	d113      	bne.n	8004344 <HAL_PCD_IRQHandler+0x3a2>
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004320:	4613      	mov	r3, r2
 8004322:	00db      	lsls	r3, r3, #3
 8004324:	4413      	add	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	440b      	add	r3, r1
 800432a:	3354      	adds	r3, #84	; 0x54
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6818      	ldr	r0, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800433c:	461a      	mov	r2, r3
 800433e:	2101      	movs	r1, #1
 8004340:	f005 ff46 	bl	800a1d0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	b2db      	uxtb	r3, r3
 8004348:	4619      	mov	r1, r3
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f008 fa05 	bl	800c75a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f003 0308 	and.w	r3, r3, #8
 8004356:	2b00      	cmp	r3, #0
 8004358:	d008      	beq.n	800436c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	461a      	mov	r2, r3
 8004368:	2308      	movs	r3, #8
 800436a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f003 0310 	and.w	r3, r3, #16
 8004372:	2b00      	cmp	r3, #0
 8004374:	d008      	beq.n	8004388 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	461a      	mov	r2, r3
 8004384:	2310      	movs	r3, #16
 8004386:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d008      	beq.n	80043a4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004394:	015a      	lsls	r2, r3, #5
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	4413      	add	r3, r2
 800439a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800439e:	461a      	mov	r2, r3
 80043a0:	2340      	movs	r3, #64	; 0x40
 80043a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d023      	beq.n	80043f6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80043ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043b0:	6a38      	ldr	r0, [r7, #32]
 80043b2:	f004 fe19 	bl	8008fe8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80043b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b8:	4613      	mov	r3, r2
 80043ba:	00db      	lsls	r3, r3, #3
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	3338      	adds	r3, #56	; 0x38
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	4413      	add	r3, r2
 80043c6:	3304      	adds	r3, #4
 80043c8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	78db      	ldrb	r3, [r3, #3]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d108      	bne.n	80043e4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80043d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	4619      	mov	r1, r3
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f008 fa52 	bl	800c888 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	461a      	mov	r2, r3
 80043f2:	2302      	movs	r3, #2
 80043f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f000 fd08 	bl	8004e18 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	3301      	adds	r3, #1
 800440c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	085b      	lsrs	r3, r3, #1
 8004412:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004416:	2b00      	cmp	r3, #0
 8004418:	f47f af2e 	bne.w	8004278 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4618      	mov	r0, r3
 8004422:	f005 fe0f 	bl	800a044 <USB_ReadInterrupts>
 8004426:	4603      	mov	r3, r0
 8004428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800442c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004430:	d122      	bne.n	8004478 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	69fa      	ldr	r2, [r7, #28]
 800443c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800444c:	2b01      	cmp	r3, #1
 800444e:	d108      	bne.n	8004462 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004458:	2100      	movs	r1, #0
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f008 fbd2 	bl	800cc04 <HAL_PCDEx_LPM_Callback>
 8004460:	e002      	b.n	8004468 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f008 f9f0 	bl	800c848 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	695a      	ldr	r2, [r3, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4618      	mov	r0, r3
 800447e:	f005 fde1 	bl	800a044 <USB_ReadInterrupts>
 8004482:	4603      	mov	r3, r0
 8004484:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004488:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800448c:	d112      	bne.n	80044b4 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	2b01      	cmp	r3, #1
 800449c:	d102      	bne.n	80044a4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f008 f9ac 	bl	800c7fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	695a      	ldr	r2, [r3, #20]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80044b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f005 fdc3 	bl	800a044 <USB_ReadInterrupts>
 80044be:	4603      	mov	r3, r0
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044c8:	d121      	bne.n	800450e <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	695a      	ldr	r2, [r3, #20]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80044d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d111      	bne.n	8004508 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f2:	089b      	lsrs	r3, r3, #2
 80044f4:	f003 020f 	and.w	r2, r3, #15
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80044fe:	2101      	movs	r1, #1
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f008 fb7f 	bl	800cc04 <HAL_PCDEx_LPM_Callback>
 8004506:	e002      	b.n	800450e <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f008 f977 	bl	800c7fc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f005 fd96 	bl	800a044 <USB_ReadInterrupts>
 8004518:	4603      	mov	r3, r0
 800451a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800451e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004522:	f040 80b7 	bne.w	8004694 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	69fa      	ldr	r2, [r7, #28]
 8004530:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004534:	f023 0301 	bic.w	r3, r3, #1
 8004538:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2110      	movs	r1, #16
 8004540:	4618      	mov	r0, r3
 8004542:	f004 fd51 	bl	8008fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
 800454a:	e046      	b.n	80045da <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800454c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800454e:	015a      	lsls	r2, r3, #5
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	4413      	add	r3, r2
 8004554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004558:	461a      	mov	r2, r3
 800455a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800455e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004570:	0151      	lsls	r1, r2, #5
 8004572:	69fa      	ldr	r2, [r7, #28]
 8004574:	440a      	add	r2, r1
 8004576:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800457a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800457e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458c:	461a      	mov	r2, r3
 800458e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004592:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004596:	015a      	lsls	r2, r3, #5
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	4413      	add	r3, r2
 800459c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a4:	0151      	lsls	r1, r2, #5
 80045a6:	69fa      	ldr	r2, [r7, #28]
 80045a8:	440a      	add	r2, r1
 80045aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045c4:	0151      	lsls	r1, r2, #5
 80045c6:	69fa      	ldr	r2, [r7, #28]
 80045c8:	440a      	add	r2, r1
 80045ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045d2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	3301      	adds	r3, #1
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d3b3      	bcc.n	800454c <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ea:	69db      	ldr	r3, [r3, #28]
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045f2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80045f6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d016      	beq.n	800462e <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004610:	f043 030b 	orr.w	r3, r3, #11
 8004614:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004626:	f043 030b 	orr.w	r3, r3, #11
 800462a:	6453      	str	r3, [r2, #68]	; 0x44
 800462c:	e015      	b.n	800465a <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463c:	4619      	mov	r1, r3
 800463e:	f242 032b 	movw	r3, #8235	; 0x202b
 8004642:	4313      	orrs	r3, r2
 8004644:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	69fa      	ldr	r2, [r7, #28]
 8004650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004654:	f043 030b 	orr.w	r3, r3, #11
 8004658:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004668:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800466c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6818      	ldr	r0, [r3, #0]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	691b      	ldr	r3, [r3, #16]
 8004676:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800467e:	461a      	mov	r2, r3
 8004680:	f005 fda6 	bl	800a1d0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004692:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4618      	mov	r0, r3
 800469a:	f005 fcd3 	bl	800a044 <USB_ReadInterrupts>
 800469e:	4603      	mov	r3, r0
 80046a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046a8:	d124      	bne.n	80046f4 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4618      	mov	r0, r3
 80046b0:	f005 fd6a 	bl	800a188 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f004 fd12 	bl	80090e2 <USB_GetDevSpeed>
 80046be:	4603      	mov	r3, r0
 80046c0:	461a      	mov	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681c      	ldr	r4, [r3, #0]
 80046ca:	f001 fac1 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 80046ce:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	4620      	mov	r0, r4
 80046da:	f004 fa17 	bl	8008b0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f008 f863 	bl	800c7aa <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695a      	ldr	r2, [r3, #20]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4618      	mov	r0, r3
 80046fa:	f005 fca3 	bl	800a044 <USB_ReadInterrupts>
 80046fe:	4603      	mov	r3, r0
 8004700:	f003 0308 	and.w	r3, r3, #8
 8004704:	2b08      	cmp	r3, #8
 8004706:	d10a      	bne.n	800471e <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f008 f840 	bl	800c78e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695a      	ldr	r2, [r3, #20]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f002 0208 	and.w	r2, r2, #8
 800471c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4618      	mov	r0, r3
 8004724:	f005 fc8e 	bl	800a044 <USB_ReadInterrupts>
 8004728:	4603      	mov	r3, r0
 800472a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800472e:	2b80      	cmp	r3, #128	; 0x80
 8004730:	d122      	bne.n	8004778 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004732:	6a3b      	ldr	r3, [r7, #32]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800473a:	6a3b      	ldr	r3, [r7, #32]
 800473c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800473e:	2301      	movs	r3, #1
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	e014      	b.n	800476e <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004756:	781b      	ldrb	r3, [r3, #0]
 8004758:	2b01      	cmp	r3, #1
 800475a:	d105      	bne.n	8004768 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	b2db      	uxtb	r3, r3
 8004760:	4619      	mov	r1, r3
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 fb27 	bl	8004db6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	3301      	adds	r3, #1
 800476c:	627b      	str	r3, [r7, #36]	; 0x24
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004774:	429a      	cmp	r2, r3
 8004776:	d3e5      	bcc.n	8004744 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4618      	mov	r0, r3
 800477e:	f005 fc61 	bl	800a044 <USB_ReadInterrupts>
 8004782:	4603      	mov	r3, r0
 8004784:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004788:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800478c:	d13b      	bne.n	8004806 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800478e:	2301      	movs	r3, #1
 8004790:	627b      	str	r3, [r7, #36]	; 0x24
 8004792:	e02b      	b.n	80047ec <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	015a      	lsls	r2, r3, #5
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	4413      	add	r3, r2
 800479c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047a4:	6879      	ldr	r1, [r7, #4]
 80047a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047a8:	4613      	mov	r3, r2
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	4413      	add	r3, r2
 80047ae:	009b      	lsls	r3, r3, #2
 80047b0:	440b      	add	r3, r1
 80047b2:	3340      	adds	r3, #64	; 0x40
 80047b4:	781b      	ldrb	r3, [r3, #0]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	d115      	bne.n	80047e6 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80047ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80047bc:	2b00      	cmp	r3, #0
 80047be:	da12      	bge.n	80047e6 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047c4:	4613      	mov	r3, r2
 80047c6:	00db      	lsls	r3, r3, #3
 80047c8:	4413      	add	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	440b      	add	r3, r1
 80047ce:	333f      	adds	r3, #63	; 0x3f
 80047d0:	2201      	movs	r2, #1
 80047d2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	4619      	mov	r1, r3
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fae8 	bl	8004db6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	3301      	adds	r3, #1
 80047ea:	627b      	str	r3, [r7, #36]	; 0x24
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d3ce      	bcc.n	8004794 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695a      	ldr	r2, [r3, #20]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004804:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f005 fc1a 	bl	800a044 <USB_ReadInterrupts>
 8004810:	4603      	mov	r3, r0
 8004812:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800481a:	d155      	bne.n	80048c8 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800481c:	2301      	movs	r3, #1
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
 8004820:	e045      	b.n	80048ae <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004832:	6879      	ldr	r1, [r7, #4]
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	4613      	mov	r3, r2
 8004838:	00db      	lsls	r3, r3, #3
 800483a:	4413      	add	r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d12e      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800484a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800484c:	2b00      	cmp	r3, #0
 800484e:	da2b      	bge.n	80048a8 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800485c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004860:	429a      	cmp	r2, r3
 8004862:	d121      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004864:	6879      	ldr	r1, [r7, #4]
 8004866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	4413      	add	r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800487a:	6a3b      	ldr	r3, [r7, #32]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004882:	6a3b      	ldr	r3, [r7, #32]
 8004884:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004886:	6a3b      	ldr	r3, [r7, #32]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800488e:	2b00      	cmp	r3, #0
 8004890:	d10a      	bne.n	80048a8 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	69fa      	ldr	r2, [r7, #28]
 800489c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048a4:	6053      	str	r3, [r2, #4]
            break;
 80048a6:	e007      	b.n	80048b8 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80048a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048aa:	3301      	adds	r3, #1
 80048ac:	627b      	str	r3, [r7, #36]	; 0x24
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d3b4      	bcc.n	8004822 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	695a      	ldr	r2, [r3, #20]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4618      	mov	r0, r3
 80048ce:	f005 fbb9 	bl	800a044 <USB_ReadInterrupts>
 80048d2:	4603      	mov	r3, r0
 80048d4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048dc:	d10a      	bne.n	80048f4 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f007 ffe4 	bl	800c8ac <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695a      	ldr	r2, [r3, #20]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4618      	mov	r0, r3
 80048fa:	f005 fba3 	bl	800a044 <USB_ReadInterrupts>
 80048fe:	4603      	mov	r3, r0
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b04      	cmp	r3, #4
 8004906:	d115      	bne.n	8004934 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004910:	69bb      	ldr	r3, [r7, #24]
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f007 ffd4 	bl	800c8c8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6859      	ldr	r1, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	69ba      	ldr	r2, [r7, #24]
 800492c:	430a      	orrs	r2, r1
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e000      	b.n	8004934 <HAL_PCD_IRQHandler+0x992>
      return;
 8004932:	bf00      	nop
    }
  }
}
 8004934:	3734      	adds	r7, #52	; 0x34
 8004936:	46bd      	mov	sp, r7
 8004938:	bd90      	pop	{r4, r7, pc}

0800493a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b082      	sub	sp, #8
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
 8004942:	460b      	mov	r3, r1
 8004944:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_PCD_SetAddress+0x1a>
 8004950:	2302      	movs	r3, #2
 8004952:	e013      	b.n	800497c <HAL_PCD_SetAddress+0x42>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	78fa      	ldrb	r2, [r7, #3]
 800496a:	4611      	mov	r1, r2
 800496c:	4618      	mov	r0, r3
 800496e:	f005 fb01 	bl	8009f74 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	4608      	mov	r0, r1
 800498e:	4611      	mov	r1, r2
 8004990:	461a      	mov	r2, r3
 8004992:	4603      	mov	r3, r0
 8004994:	70fb      	strb	r3, [r7, #3]
 8004996:	460b      	mov	r3, r1
 8004998:	803b      	strh	r3, [r7, #0]
 800499a:	4613      	mov	r3, r2
 800499c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	da0f      	bge.n	80049ca <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	f003 020f 	and.w	r2, r3, #15
 80049b0:	4613      	mov	r3, r2
 80049b2:	00db      	lsls	r3, r3, #3
 80049b4:	4413      	add	r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	3338      	adds	r3, #56	; 0x38
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	4413      	add	r3, r2
 80049be:	3304      	adds	r3, #4
 80049c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	705a      	strb	r2, [r3, #1]
 80049c8:	e00f      	b.n	80049ea <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	f003 020f 	and.w	r2, r3, #15
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049dc:	687a      	ldr	r2, [r7, #4]
 80049de:	4413      	add	r3, r2
 80049e0:	3304      	adds	r3, #4
 80049e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2200      	movs	r2, #0
 80049e8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049ea:	78fb      	ldrb	r3, [r7, #3]
 80049ec:	f003 030f 	and.w	r3, r3, #15
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049f6:	883a      	ldrh	r2, [r7, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	78ba      	ldrb	r2, [r7, #2]
 8004a00:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	785b      	ldrb	r3, [r3, #1]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d004      	beq.n	8004a14 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b29a      	uxth	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a14:	78bb      	ldrb	r3, [r7, #2]
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d102      	bne.n	8004a20 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d101      	bne.n	8004a2e <HAL_PCD_EP_Open+0xaa>
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	e00e      	b.n	8004a4c <HAL_PCD_EP_Open+0xc8>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68f9      	ldr	r1, [r7, #12]
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f004 fb75 	bl	800912c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004a4a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3710      	adds	r7, #16
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}

08004a54 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	460b      	mov	r3, r1
 8004a5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	da0f      	bge.n	8004a88 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a68:	78fb      	ldrb	r3, [r7, #3]
 8004a6a:	f003 020f 	and.w	r2, r3, #15
 8004a6e:	4613      	mov	r3, r2
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4413      	add	r3, r2
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	3338      	adds	r3, #56	; 0x38
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2201      	movs	r2, #1
 8004a84:	705a      	strb	r2, [r3, #1]
 8004a86:	e00f      	b.n	8004aa8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	f003 020f 	and.w	r2, r3, #15
 8004a8e:	4613      	mov	r3, r2
 8004a90:	00db      	lsls	r3, r3, #3
 8004a92:	4413      	add	r3, r2
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	4413      	add	r3, r2
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004aa8:	78fb      	ldrb	r3, [r7, #3]
 8004aaa:	f003 030f 	and.w	r3, r3, #15
 8004aae:	b2da      	uxtb	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d101      	bne.n	8004ac2 <HAL_PCD_EP_Close+0x6e>
 8004abe:	2302      	movs	r3, #2
 8004ac0:	e00e      	b.n	8004ae0 <HAL_PCD_EP_Close+0x8c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f004 fbb3 	bl	800923c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	607a      	str	r2, [r7, #4]
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	460b      	mov	r3, r1
 8004af6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004af8:	7afb      	ldrb	r3, [r7, #11]
 8004afa:	f003 020f 	and.w	r2, r3, #15
 8004afe:	4613      	mov	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4413      	add	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b0a:	68fa      	ldr	r2, [r7, #12]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	3304      	adds	r3, #4
 8004b10:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2200      	movs	r2, #0
 8004b22:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	2200      	movs	r2, #0
 8004b28:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b2a:	7afb      	ldrb	r3, [r7, #11]
 8004b2c:	f003 030f 	and.w	r3, r3, #15
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d102      	bne.n	8004b44 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b44:	7afb      	ldrb	r3, [r7, #11]
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d109      	bne.n	8004b62 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	6818      	ldr	r0, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	461a      	mov	r2, r3
 8004b5a:	6979      	ldr	r1, [r7, #20]
 8004b5c:	f004 fe9a 	bl	8009894 <USB_EP0StartXfer>
 8004b60:	e008      	b.n	8004b74 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	b2db      	uxtb	r3, r3
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6979      	ldr	r1, [r7, #20]
 8004b70:	f004 fc40 	bl	80093f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3718      	adds	r7, #24
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}

08004b7e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b083      	sub	sp, #12
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	460b      	mov	r3, r1
 8004b88:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	f003 020f 	and.w	r2, r3, #15
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	00db      	lsls	r3, r3, #3
 8004b96:	4413      	add	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004ba0:	681b      	ldr	r3, [r3, #0]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	370c      	adds	r7, #12
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b086      	sub	sp, #24
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	60f8      	str	r0, [r7, #12]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
 8004bba:	460b      	mov	r3, r1
 8004bbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bbe:	7afb      	ldrb	r3, [r7, #11]
 8004bc0:	f003 020f 	and.w	r2, r3, #15
 8004bc4:	4613      	mov	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4413      	add	r3, r2
 8004bca:	009b      	lsls	r3, r3, #2
 8004bcc:	3338      	adds	r3, #56	; 0x38
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	683a      	ldr	r2, [r7, #0]
 8004be0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	2200      	movs	r2, #0
 8004be6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	2201      	movs	r2, #1
 8004bec:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004bee:	7afb      	ldrb	r3, [r7, #11]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d102      	bne.n	8004c08 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c08:	7afb      	ldrb	r3, [r7, #11]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d109      	bne.n	8004c26 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6818      	ldr	r0, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	691b      	ldr	r3, [r3, #16]
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	6979      	ldr	r1, [r7, #20]
 8004c20:	f004 fe38 	bl	8009894 <USB_EP0StartXfer>
 8004c24:	e008      	b.n	8004c38 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	691b      	ldr	r3, [r3, #16]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	461a      	mov	r2, r3
 8004c32:	6979      	ldr	r1, [r7, #20]
 8004c34:	f004 fbde 	bl	80093f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3718      	adds	r7, #24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}

08004c42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d901      	bls.n	8004c60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e050      	b.n	8004d02 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	da0f      	bge.n	8004c88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c68:	78fb      	ldrb	r3, [r7, #3]
 8004c6a:	f003 020f 	and.w	r2, r3, #15
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	3338      	adds	r3, #56	; 0x38
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2201      	movs	r2, #1
 8004c84:	705a      	strb	r2, [r3, #1]
 8004c86:	e00d      	b.n	8004ca4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c88:	78fa      	ldrb	r2, [r7, #3]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_PCD_EP_SetStall+0x82>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e01e      	b.n	8004d02 <HAL_PCD_EP_SetStall+0xc0>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	68f9      	ldr	r1, [r7, #12]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f005 f87a 	bl	8009dcc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cd8:	78fb      	ldrb	r3, [r7, #3]
 8004cda:	f003 030f 	and.w	r3, r3, #15
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6818      	ldr	r0, [r3, #0]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	b2d9      	uxtb	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f005 fa6c 	bl	800a1d0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004d00:	2300      	movs	r3, #0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d16:	78fb      	ldrb	r3, [r7, #3]
 8004d18:	f003 020f 	and.w	r2, r3, #15
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d901      	bls.n	8004d28 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e042      	b.n	8004dae <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	da0f      	bge.n	8004d50 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	f003 020f 	and.w	r2, r3, #15
 8004d36:	4613      	mov	r3, r2
 8004d38:	00db      	lsls	r3, r3, #3
 8004d3a:	4413      	add	r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	3338      	adds	r3, #56	; 0x38
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	4413      	add	r3, r2
 8004d44:	3304      	adds	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	705a      	strb	r2, [r3, #1]
 8004d4e:	e00f      	b.n	8004d70 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d50:	78fb      	ldrb	r3, [r7, #3]
 8004d52:	f003 020f 	and.w	r2, r3, #15
 8004d56:	4613      	mov	r3, r2
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	4413      	add	r3, r2
 8004d66:	3304      	adds	r3, #4
 8004d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2200      	movs	r2, #0
 8004d74:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d76:	78fb      	ldrb	r3, [r7, #3]
 8004d78:	f003 030f 	and.w	r3, r3, #15
 8004d7c:	b2da      	uxtb	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_PCD_EP_ClrStall+0x86>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e00e      	b.n	8004dae <HAL_PCD_EP_ClrStall+0xa4>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68f9      	ldr	r1, [r7, #12]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f005 f882 	bl	8009ea8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004dac:	2300      	movs	r3, #0
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3710      	adds	r7, #16
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b084      	sub	sp, #16
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	6078      	str	r0, [r7, #4]
 8004dbe:	460b      	mov	r3, r1
 8004dc0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004dc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	da0c      	bge.n	8004de4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004dca:	78fb      	ldrb	r3, [r7, #3]
 8004dcc:	f003 020f 	and.w	r2, r3, #15
 8004dd0:	4613      	mov	r3, r2
 8004dd2:	00db      	lsls	r3, r3, #3
 8004dd4:	4413      	add	r3, r2
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	3338      	adds	r3, #56	; 0x38
 8004dda:	687a      	ldr	r2, [r7, #4]
 8004ddc:	4413      	add	r3, r2
 8004dde:	3304      	adds	r3, #4
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	e00c      	b.n	8004dfe <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de4:	78fb      	ldrb	r3, [r7, #3]
 8004de6:	f003 020f 	and.w	r2, r3, #15
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	4413      	add	r3, r2
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68f9      	ldr	r1, [r7, #12]
 8004e04:	4618      	mov	r0, r3
 8004e06:	f004 fea1 	bl	8009b4c <USB_EPStopXfer>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b08a      	sub	sp, #40	; 0x28
 8004e1c:	af02      	add	r7, sp, #8
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	3338      	adds	r3, #56	; 0x38
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3304      	adds	r3, #4
 8004e3e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6a1a      	ldr	r2, [r3, #32]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d901      	bls.n	8004e50 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e06c      	b.n	8004f2a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	699a      	ldr	r2, [r3, #24]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	6a1b      	ldr	r3, [r3, #32]
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	69fa      	ldr	r2, [r7, #28]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d902      	bls.n	8004e6c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	3303      	adds	r3, #3
 8004e70:	089b      	lsrs	r3, r3, #2
 8004e72:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e74:	e02b      	b.n	8004ece <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	d902      	bls.n	8004e92 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	3303      	adds	r3, #3
 8004e96:	089b      	lsrs	r3, r3, #2
 8004e98:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	6919      	ldr	r1, [r3, #16]
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	9300      	str	r3, [sp, #0]
 8004eae:	4603      	mov	r3, r0
 8004eb0:	6978      	ldr	r0, [r7, #20]
 8004eb2:	f004 fef5 	bl	8009ca0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	691a      	ldr	r2, [r3, #16]
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	441a      	add	r2, r3
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6a1a      	ldr	r2, [r3, #32]
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	441a      	add	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	015a      	lsls	r2, r3, #5
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	4413      	add	r3, r2
 8004ed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d809      	bhi.n	8004ef8 <PCD_WriteEmptyTxFifo+0xe0>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6a1a      	ldr	r2, [r3, #32]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d203      	bcs.n	8004ef8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	699b      	ldr	r3, [r3, #24]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1be      	bne.n	8004e76 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	699a      	ldr	r2, [r3, #24]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	6a1b      	ldr	r3, [r3, #32]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d811      	bhi.n	8004f28 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	f003 030f 	and.w	r3, r3, #15
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f10:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	43db      	mvns	r3, r3
 8004f1e:	6939      	ldr	r1, [r7, #16]
 8004f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f24:	4013      	ands	r3, r2
 8004f26:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3720      	adds	r7, #32
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	333c      	adds	r3, #60	; 0x3c
 8004f4c:	3304      	adds	r3, #4
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	015a      	lsls	r2, r3, #5
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	4413      	add	r3, r2
 8004f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	691b      	ldr	r3, [r3, #16]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d17b      	bne.n	8005062 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d015      	beq.n	8004fa0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	4a61      	ldr	r2, [pc, #388]	; (80050fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	f240 80b9 	bls.w	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80b3 	beq.w	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	015a      	lsls	r2, r3, #5
 8004f8e:	69bb      	ldr	r3, [r7, #24]
 8004f90:	4413      	add	r3, r2
 8004f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f96:	461a      	mov	r2, r3
 8004f98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f9c:	6093      	str	r3, [r2, #8]
 8004f9e:	e0a7      	b.n	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0320 	and.w	r3, r3, #32
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d009      	beq.n	8004fbe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69bb      	ldr	r3, [r7, #24]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2320      	movs	r3, #32
 8004fba:	6093      	str	r3, [r2, #8]
 8004fbc:	e098      	b.n	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f040 8093 	bne.w	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	4a4b      	ldr	r2, [pc, #300]	; (80050fc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d90f      	bls.n	8004ff2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00a      	beq.n	8004ff2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe8:	461a      	mov	r2, r3
 8004fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fee:	6093      	str	r3, [r2, #8]
 8004ff0:	e07e      	b.n	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	00db      	lsls	r3, r3, #3
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	3304      	adds	r3, #4
 8005006:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	69da      	ldr	r2, [r3, #28]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	0159      	lsls	r1, r3, #5
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	440b      	add	r3, r1
 8005014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800501e:	1ad2      	subs	r2, r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d114      	bne.n	8005054 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800503c:	461a      	mov	r2, r3
 800503e:	2101      	movs	r1, #1
 8005040:	f005 f8c6 	bl	800a1d0 <USB_EP0_OutStart>
 8005044:	e006      	b.n	8005054 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	691a      	ldr	r2, [r3, #16]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	441a      	add	r2, r3
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	4619      	mov	r1, r3
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f007 fb62 	bl	800c724 <HAL_PCD_DataOutStageCallback>
 8005060:	e046      	b.n	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	4a26      	ldr	r2, [pc, #152]	; (8005100 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d124      	bne.n	80050b4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00a      	beq.n	800508a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	015a      	lsls	r2, r3, #5
 8005078:	69bb      	ldr	r3, [r7, #24]
 800507a:	4413      	add	r3, r2
 800507c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005080:	461a      	mov	r2, r3
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	6093      	str	r3, [r2, #8]
 8005088:	e032      	b.n	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b00      	cmp	r3, #0
 8005092:	d008      	beq.n	80050a6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	015a      	lsls	r2, r3, #5
 8005098:	69bb      	ldr	r3, [r7, #24]
 800509a:	4413      	add	r3, r2
 800509c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a0:	461a      	mov	r2, r3
 80050a2:	2320      	movs	r3, #32
 80050a4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	4619      	mov	r1, r3
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f007 fb39 	bl	800c724 <HAL_PCD_DataOutStageCallback>
 80050b2:	e01d      	b.n	80050f0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d114      	bne.n	80050e4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	4613      	mov	r3, r2
 80050c0:	00db      	lsls	r3, r3, #3
 80050c2:	4413      	add	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	440b      	add	r3, r1
 80050c8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d108      	bne.n	80050e4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80050dc:	461a      	mov	r2, r3
 80050de:	2100      	movs	r1, #0
 80050e0:	f005 f876 	bl	800a1d0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	4619      	mov	r1, r3
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f007 fb1a 	bl	800c724 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	4f54300a 	.word	0x4f54300a
 8005100:	4f54310a 	.word	0x4f54310a

08005104 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b086      	sub	sp, #24
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005118:	697b      	ldr	r3, [r7, #20]
 800511a:	333c      	adds	r3, #60	; 0x3c
 800511c:	3304      	adds	r3, #4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	4a15      	ldr	r2, [pc, #84]	; (800518c <PCD_EP_OutSetupPacket_int+0x88>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d90e      	bls.n	8005158 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005140:	2b00      	cmp	r3, #0
 8005142:	d009      	beq.n	8005158 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	015a      	lsls	r2, r3, #5
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	4413      	add	r3, r2
 800514c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005150:	461a      	mov	r2, r3
 8005152:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005156:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f007 fad1 	bl	800c700 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a0a      	ldr	r2, [pc, #40]	; (800518c <PCD_EP_OutSetupPacket_int+0x88>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d90c      	bls.n	8005180 <PCD_EP_OutSetupPacket_int+0x7c>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	2b01      	cmp	r3, #1
 800516c:	d108      	bne.n	8005180 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6818      	ldr	r0, [r3, #0]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005178:	461a      	mov	r2, r3
 800517a:	2101      	movs	r1, #1
 800517c:	f005 f828 	bl	800a1d0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3718      	adds	r7, #24
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	4f54300a 	.word	0x4f54300a

08005190 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	70fb      	strb	r3, [r7, #3]
 800519c:	4613      	mov	r3, r2
 800519e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051a8:	78fb      	ldrb	r3, [r7, #3]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d107      	bne.n	80051be <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051ae:	883b      	ldrh	r3, [r7, #0]
 80051b0:	0419      	lsls	r1, r3, #16
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	68ba      	ldr	r2, [r7, #8]
 80051b8:	430a      	orrs	r2, r1
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28
 80051bc:	e028      	b.n	8005210 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c4:	0c1b      	lsrs	r3, r3, #16
 80051c6:	68ba      	ldr	r2, [r7, #8]
 80051c8:	4413      	add	r3, r2
 80051ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]
 80051d0:	e00d      	b.n	80051ee <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	3340      	adds	r3, #64	; 0x40
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	4413      	add	r3, r2
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	0c1b      	lsrs	r3, r3, #16
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4413      	add	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
 80051ea:	3301      	adds	r3, #1
 80051ec:	73fb      	strb	r3, [r7, #15]
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	78fb      	ldrb	r3, [r7, #3]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d3ec      	bcc.n	80051d2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80051f8:	883b      	ldrh	r3, [r7, #0]
 80051fa:	0418      	lsls	r0, r3, #16
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6819      	ldr	r1, [r3, #0]
 8005200:	78fb      	ldrb	r3, [r7, #3]
 8005202:	3b01      	subs	r3, #1
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	4302      	orrs	r2, r0
 8005208:	3340      	adds	r3, #64	; 0x40
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr

0800521e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
 8005226:	460b      	mov	r3, r1
 8005228:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	887a      	ldrh	r2, [r7, #2]
 8005230:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005232:	2300      	movs	r3, #0
}
 8005234:	4618      	mov	r0, r3
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	699b      	ldr	r3, [r3, #24]
 8005262:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800526e:	4b05      	ldr	r3, [pc, #20]	; (8005284 <HAL_PCDEx_ActivateLPM+0x44>)
 8005270:	4313      	orrs	r3, r2
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr
 8005284:	10000003 	.word	0x10000003

08005288 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b082      	sub	sp, #8
 800528c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800528e:	2300      	movs	r3, #0
 8005290:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005292:	4b23      	ldr	r3, [pc, #140]	; (8005320 <HAL_PWREx_EnableOverDrive+0x98>)
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4a22      	ldr	r2, [pc, #136]	; (8005320 <HAL_PWREx_EnableOverDrive+0x98>)
 8005298:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800529c:	6413      	str	r3, [r2, #64]	; 0x40
 800529e:	4b20      	ldr	r3, [pc, #128]	; (8005320 <HAL_PWREx_EnableOverDrive+0x98>)
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052a6:	603b      	str	r3, [r7, #0]
 80052a8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052aa:	4b1e      	ldr	r3, [pc, #120]	; (8005324 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1d      	ldr	r2, [pc, #116]	; (8005324 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052b6:	f7fd fb3d 	bl	8002934 <HAL_GetTick>
 80052ba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052bc:	e009      	b.n	80052d2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052be:	f7fd fb39 	bl	8002934 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052cc:	d901      	bls.n	80052d2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e022      	b.n	8005318 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052de:	d1ee      	bne.n	80052be <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052e0:	4b10      	ldr	r3, [pc, #64]	; (8005324 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a0f      	ldr	r2, [pc, #60]	; (8005324 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052ec:	f7fd fb22 	bl	8002934 <HAL_GetTick>
 80052f0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80052f2:	e009      	b.n	8005308 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052f4:	f7fd fb1e 	bl	8002934 <HAL_GetTick>
 80052f8:	4602      	mov	r2, r0
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	1ad3      	subs	r3, r2, r3
 80052fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005302:	d901      	bls.n	8005308 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e007      	b.n	8005318 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005308:	4b06      	ldr	r3, [pc, #24]	; (8005324 <HAL_PWREx_EnableOverDrive+0x9c>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005314:	d1ee      	bne.n	80052f4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3708      	adds	r7, #8
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}
 8005320:	40023800 	.word	0x40023800
 8005324:	40007000 	.word	0x40007000

08005328 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b086      	sub	sp, #24
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8005330:	2300      	movs	r3, #0
 8005332:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e291      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	f000 8087 	beq.w	800545a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800534c:	4b96      	ldr	r3, [pc, #600]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f003 030c 	and.w	r3, r3, #12
 8005354:	2b04      	cmp	r3, #4
 8005356:	d00c      	beq.n	8005372 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005358:	4b93      	ldr	r3, [pc, #588]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	f003 030c 	and.w	r3, r3, #12
 8005360:	2b08      	cmp	r3, #8
 8005362:	d112      	bne.n	800538a <HAL_RCC_OscConfig+0x62>
 8005364:	4b90      	ldr	r3, [pc, #576]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800536c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005370:	d10b      	bne.n	800538a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005372:	4b8d      	ldr	r3, [pc, #564]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537a:	2b00      	cmp	r3, #0
 800537c:	d06c      	beq.n	8005458 <HAL_RCC_OscConfig+0x130>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d168      	bne.n	8005458 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	e26b      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005392:	d106      	bne.n	80053a2 <HAL_RCC_OscConfig+0x7a>
 8005394:	4b84      	ldr	r3, [pc, #528]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a83      	ldr	r2, [pc, #524]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800539a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800539e:	6013      	str	r3, [r2, #0]
 80053a0:	e02e      	b.n	8005400 <HAL_RCC_OscConfig+0xd8>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10c      	bne.n	80053c4 <HAL_RCC_OscConfig+0x9c>
 80053aa:	4b7f      	ldr	r3, [pc, #508]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a7e      	ldr	r2, [pc, #504]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053b4:	6013      	str	r3, [r2, #0]
 80053b6:	4b7c      	ldr	r3, [pc, #496]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a7b      	ldr	r2, [pc, #492]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053c0:	6013      	str	r3, [r2, #0]
 80053c2:	e01d      	b.n	8005400 <HAL_RCC_OscConfig+0xd8>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053cc:	d10c      	bne.n	80053e8 <HAL_RCC_OscConfig+0xc0>
 80053ce:	4b76      	ldr	r3, [pc, #472]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a75      	ldr	r2, [pc, #468]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053d8:	6013      	str	r3, [r2, #0]
 80053da:	4b73      	ldr	r3, [pc, #460]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a72      	ldr	r2, [pc, #456]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053e4:	6013      	str	r3, [r2, #0]
 80053e6:	e00b      	b.n	8005400 <HAL_RCC_OscConfig+0xd8>
 80053e8:	4b6f      	ldr	r3, [pc, #444]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a6e      	ldr	r2, [pc, #440]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053f2:	6013      	str	r3, [r2, #0]
 80053f4:	4b6c      	ldr	r3, [pc, #432]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a6b      	ldr	r2, [pc, #428]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80053fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d013      	beq.n	8005430 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005408:	f7fd fa94 	bl	8002934 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800540e:	e008      	b.n	8005422 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005410:	f7fd fa90 	bl	8002934 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	2b64      	cmp	r3, #100	; 0x64
 800541c:	d901      	bls.n	8005422 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e21f      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005422:	4b61      	ldr	r3, [pc, #388]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f0      	beq.n	8005410 <HAL_RCC_OscConfig+0xe8>
 800542e:	e014      	b.n	800545a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005430:	f7fd fa80 	bl	8002934 <HAL_GetTick>
 8005434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005436:	e008      	b.n	800544a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005438:	f7fd fa7c 	bl	8002934 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	2b64      	cmp	r3, #100	; 0x64
 8005444:	d901      	bls.n	800544a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e20b      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800544a:	4b57      	ldr	r3, [pc, #348]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005452:	2b00      	cmp	r3, #0
 8005454:	d1f0      	bne.n	8005438 <HAL_RCC_OscConfig+0x110>
 8005456:	e000      	b.n	800545a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f003 0302 	and.w	r3, r3, #2
 8005462:	2b00      	cmp	r3, #0
 8005464:	d069      	beq.n	800553a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005466:	4b50      	ldr	r3, [pc, #320]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	f003 030c 	and.w	r3, r3, #12
 800546e:	2b00      	cmp	r3, #0
 8005470:	d00b      	beq.n	800548a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005472:	4b4d      	ldr	r3, [pc, #308]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 030c 	and.w	r3, r3, #12
 800547a:	2b08      	cmp	r3, #8
 800547c:	d11c      	bne.n	80054b8 <HAL_RCC_OscConfig+0x190>
 800547e:	4b4a      	ldr	r3, [pc, #296]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d116      	bne.n	80054b8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800548a:	4b47      	ldr	r3, [pc, #284]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d001      	beq.n	80054a2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e1df      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054a2:	4b41      	ldr	r3, [pc, #260]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	493d      	ldr	r1, [pc, #244]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054b2:	4313      	orrs	r3, r2
 80054b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054b6:	e040      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d023      	beq.n	8005508 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054c0:	4b39      	ldr	r3, [pc, #228]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a38      	ldr	r2, [pc, #224]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054c6:	f043 0301 	orr.w	r3, r3, #1
 80054ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054cc:	f7fd fa32 	bl	8002934 <HAL_GetTick>
 80054d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054d2:	e008      	b.n	80054e6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054d4:	f7fd fa2e 	bl	8002934 <HAL_GetTick>
 80054d8:	4602      	mov	r2, r0
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d901      	bls.n	80054e6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e1bd      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054e6:	4b30      	ldr	r3, [pc, #192]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f003 0302 	and.w	r3, r3, #2
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f0      	beq.n	80054d4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f2:	4b2d      	ldr	r3, [pc, #180]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	4929      	ldr	r1, [pc, #164]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005502:	4313      	orrs	r3, r2
 8005504:	600b      	str	r3, [r1, #0]
 8005506:	e018      	b.n	800553a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005508:	4b27      	ldr	r3, [pc, #156]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a26      	ldr	r2, [pc, #152]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 800550e:	f023 0301 	bic.w	r3, r3, #1
 8005512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005514:	f7fd fa0e 	bl	8002934 <HAL_GetTick>
 8005518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800551a:	e008      	b.n	800552e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800551c:	f7fd fa0a 	bl	8002934 <HAL_GetTick>
 8005520:	4602      	mov	r2, r0
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	1ad3      	subs	r3, r2, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d901      	bls.n	800552e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e199      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800552e:	4b1e      	ldr	r3, [pc, #120]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0302 	and.w	r3, r3, #2
 8005536:	2b00      	cmp	r3, #0
 8005538:	d1f0      	bne.n	800551c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 0308 	and.w	r3, r3, #8
 8005542:	2b00      	cmp	r3, #0
 8005544:	d038      	beq.n	80055b8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d019      	beq.n	8005582 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800554e:	4b16      	ldr	r3, [pc, #88]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005552:	4a15      	ldr	r2, [pc, #84]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800555a:	f7fd f9eb 	bl	8002934 <HAL_GetTick>
 800555e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005560:	e008      	b.n	8005574 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005562:	f7fd f9e7 	bl	8002934 <HAL_GetTick>
 8005566:	4602      	mov	r2, r0
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	1ad3      	subs	r3, r2, r3
 800556c:	2b02      	cmp	r3, #2
 800556e:	d901      	bls.n	8005574 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005570:	2303      	movs	r3, #3
 8005572:	e176      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005576:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d0f0      	beq.n	8005562 <HAL_RCC_OscConfig+0x23a>
 8005580:	e01a      	b.n	80055b8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005582:	4b09      	ldr	r3, [pc, #36]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005586:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <HAL_RCC_OscConfig+0x280>)
 8005588:	f023 0301 	bic.w	r3, r3, #1
 800558c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558e:	f7fd f9d1 	bl	8002934 <HAL_GetTick>
 8005592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005594:	e00a      	b.n	80055ac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005596:	f7fd f9cd 	bl	8002934 <HAL_GetTick>
 800559a:	4602      	mov	r2, r0
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	1ad3      	subs	r3, r2, r3
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	d903      	bls.n	80055ac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055a4:	2303      	movs	r3, #3
 80055a6:	e15c      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
 80055a8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ac:	4b91      	ldr	r3, [pc, #580]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d1ee      	bne.n	8005596 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0304 	and.w	r3, r3, #4
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80a4 	beq.w	800570e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055c6:	4b8b      	ldr	r3, [pc, #556]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10d      	bne.n	80055ee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055d2:	4b88      	ldr	r3, [pc, #544]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d6:	4a87      	ldr	r2, [pc, #540]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055dc:	6413      	str	r3, [r2, #64]	; 0x40
 80055de:	4b85      	ldr	r3, [pc, #532]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80055e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055ea:	2301      	movs	r3, #1
 80055ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055ee:	4b82      	ldr	r3, [pc, #520]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d118      	bne.n	800562c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80055fa:	4b7f      	ldr	r3, [pc, #508]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a7e      	ldr	r2, [pc, #504]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 8005600:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005606:	f7fd f995 	bl	8002934 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800560e:	f7fd f991 	bl	8002934 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b64      	cmp	r3, #100	; 0x64
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e120      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005620:	4b75      	ldr	r3, [pc, #468]	; (80057f8 <HAL_RCC_OscConfig+0x4d0>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005628:	2b00      	cmp	r3, #0
 800562a:	d0f0      	beq.n	800560e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	2b01      	cmp	r3, #1
 8005632:	d106      	bne.n	8005642 <HAL_RCC_OscConfig+0x31a>
 8005634:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005638:	4a6e      	ldr	r2, [pc, #440]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800563a:	f043 0301 	orr.w	r3, r3, #1
 800563e:	6713      	str	r3, [r2, #112]	; 0x70
 8005640:	e02d      	b.n	800569e <HAL_RCC_OscConfig+0x376>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10c      	bne.n	8005664 <HAL_RCC_OscConfig+0x33c>
 800564a:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800564c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800564e:	4a69      	ldr	r2, [pc, #420]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005650:	f023 0301 	bic.w	r3, r3, #1
 8005654:	6713      	str	r3, [r2, #112]	; 0x70
 8005656:	4b67      	ldr	r3, [pc, #412]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800565a:	4a66      	ldr	r2, [pc, #408]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800565c:	f023 0304 	bic.w	r3, r3, #4
 8005660:	6713      	str	r3, [r2, #112]	; 0x70
 8005662:	e01c      	b.n	800569e <HAL_RCC_OscConfig+0x376>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	2b05      	cmp	r3, #5
 800566a:	d10c      	bne.n	8005686 <HAL_RCC_OscConfig+0x35e>
 800566c:	4b61      	ldr	r3, [pc, #388]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005670:	4a60      	ldr	r2, [pc, #384]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005672:	f043 0304 	orr.w	r3, r3, #4
 8005676:	6713      	str	r3, [r2, #112]	; 0x70
 8005678:	4b5e      	ldr	r3, [pc, #376]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800567a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800567c:	4a5d      	ldr	r2, [pc, #372]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800567e:	f043 0301 	orr.w	r3, r3, #1
 8005682:	6713      	str	r3, [r2, #112]	; 0x70
 8005684:	e00b      	b.n	800569e <HAL_RCC_OscConfig+0x376>
 8005686:	4b5b      	ldr	r3, [pc, #364]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568a:	4a5a      	ldr	r2, [pc, #360]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	6713      	str	r3, [r2, #112]	; 0x70
 8005692:	4b58      	ldr	r3, [pc, #352]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	4a57      	ldr	r2, [pc, #348]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005698:	f023 0304 	bic.w	r3, r3, #4
 800569c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d015      	beq.n	80056d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a6:	f7fd f945 	bl	8002934 <HAL_GetTick>
 80056aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ac:	e00a      	b.n	80056c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ae:	f7fd f941 	bl	8002934 <HAL_GetTick>
 80056b2:	4602      	mov	r2, r0
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056bc:	4293      	cmp	r3, r2
 80056be:	d901      	bls.n	80056c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e0ce      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c4:	4b4b      	ldr	r3, [pc, #300]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80056c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d0ee      	beq.n	80056ae <HAL_RCC_OscConfig+0x386>
 80056d0:	e014      	b.n	80056fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d2:	f7fd f92f 	bl	8002934 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056d8:	e00a      	b.n	80056f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056da:	f7fd f92b 	bl	8002934 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d901      	bls.n	80056f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e0b8      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f0:	4b40      	ldr	r3, [pc, #256]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80056f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ee      	bne.n	80056da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056fc:	7dfb      	ldrb	r3, [r7, #23]
 80056fe:	2b01      	cmp	r3, #1
 8005700:	d105      	bne.n	800570e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005702:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	4a3b      	ldr	r2, [pc, #236]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	2b00      	cmp	r3, #0
 8005714:	f000 80a4 	beq.w	8005860 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005718:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	f003 030c 	and.w	r3, r3, #12
 8005720:	2b08      	cmp	r3, #8
 8005722:	d06b      	beq.n	80057fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d149      	bne.n	80057c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800572c:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a30      	ldr	r2, [pc, #192]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005738:	f7fd f8fc 	bl	8002934 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005740:	f7fd f8f8 	bl	8002934 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e087      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b28      	ldr	r3, [pc, #160]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	4313      	orrs	r3, r2
 8005784:	4a1b      	ldr	r2, [pc, #108]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005786:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800578a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800578c:	4b19      	ldr	r3, [pc, #100]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a18      	ldr	r2, [pc, #96]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 8005792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005798:	f7fd f8cc 	bl	8002934 <HAL_GetTick>
 800579c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800579e:	e008      	b.n	80057b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a0:	f7fd f8c8 	bl	8002934 <HAL_GetTick>
 80057a4:	4602      	mov	r2, r0
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d901      	bls.n	80057b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e057      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d0f0      	beq.n	80057a0 <HAL_RCC_OscConfig+0x478>
 80057be:	e04f      	b.n	8005860 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a0b      	ldr	r2, [pc, #44]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057cc:	f7fd f8b2 	bl	8002934 <HAL_GetTick>
 80057d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d2:	e008      	b.n	80057e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057d4:	f7fd f8ae 	bl	8002934 <HAL_GetTick>
 80057d8:	4602      	mov	r2, r0
 80057da:	693b      	ldr	r3, [r7, #16]
 80057dc:	1ad3      	subs	r3, r2, r3
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d901      	bls.n	80057e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80057e2:	2303      	movs	r3, #3
 80057e4:	e03d      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057e6:	4b03      	ldr	r3, [pc, #12]	; (80057f4 <HAL_RCC_OscConfig+0x4cc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1f0      	bne.n	80057d4 <HAL_RCC_OscConfig+0x4ac>
 80057f2:	e035      	b.n	8005860 <HAL_RCC_OscConfig+0x538>
 80057f4:	40023800 	.word	0x40023800
 80057f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x544>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d028      	beq.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d121      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11a      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005832:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e0d0      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b6a      	ldr	r3, [pc, #424]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d910      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b67      	ldr	r3, [pc, #412]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 020f 	bic.w	r2, r3, #15
 800589e:	4965      	ldr	r1, [pc, #404]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b63      	ldr	r3, [pc, #396]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e0b8      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d020      	beq.n	8005906 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f003 0304 	and.w	r3, r3, #4
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058d0:	4b59      	ldr	r3, [pc, #356]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	4a58      	ldr	r2, [pc, #352]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0308 	and.w	r3, r3, #8
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d005      	beq.n	80058f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058e8:	4b53      	ldr	r3, [pc, #332]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	4a52      	ldr	r2, [pc, #328]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058f4:	4b50      	ldr	r3, [pc, #320]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	494d      	ldr	r1, [pc, #308]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005902:	4313      	orrs	r3, r2
 8005904:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0301 	and.w	r3, r3, #1
 800590e:	2b00      	cmp	r3, #0
 8005910:	d040      	beq.n	8005994 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d107      	bne.n	800592a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800591a:	4b47      	ldr	r3, [pc, #284]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d115      	bne.n	8005952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e07f      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	2b02      	cmp	r3, #2
 8005930:	d107      	bne.n	8005942 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005932:	4b41      	ldr	r3, [pc, #260]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d109      	bne.n	8005952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e073      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005942:	4b3d      	ldr	r3, [pc, #244]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0302 	and.w	r3, r3, #2
 800594a:	2b00      	cmp	r3, #0
 800594c:	d101      	bne.n	8005952 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	e06b      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005952:	4b39      	ldr	r3, [pc, #228]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f023 0203 	bic.w	r2, r3, #3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	4936      	ldr	r1, [pc, #216]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	4313      	orrs	r3, r2
 8005962:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005964:	f7fc ffe6 	bl	8002934 <HAL_GetTick>
 8005968:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800596a:	e00a      	b.n	8005982 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800596c:	f7fc ffe2 	bl	8002934 <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	f241 3288 	movw	r2, #5000	; 0x1388
 800597a:	4293      	cmp	r3, r2
 800597c:	d901      	bls.n	8005982 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800597e:	2303      	movs	r3, #3
 8005980:	e053      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005982:	4b2d      	ldr	r3, [pc, #180]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 020c 	and.w	r2, r3, #12
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	429a      	cmp	r2, r3
 8005992:	d1eb      	bne.n	800596c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005994:	4b27      	ldr	r3, [pc, #156]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 030f 	and.w	r3, r3, #15
 800599c:	683a      	ldr	r2, [r7, #0]
 800599e:	429a      	cmp	r2, r3
 80059a0:	d210      	bcs.n	80059c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059a2:	4b24      	ldr	r3, [pc, #144]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f023 020f 	bic.w	r2, r3, #15
 80059aa:	4922      	ldr	r1, [pc, #136]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059b2:	4b20      	ldr	r3, [pc, #128]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 030f 	and.w	r3, r3, #15
 80059ba:	683a      	ldr	r2, [r7, #0]
 80059bc:	429a      	cmp	r2, r3
 80059be:	d001      	beq.n	80059c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e032      	b.n	8005a2a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d008      	beq.n	80059e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059d0:	4b19      	ldr	r3, [pc, #100]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4916      	ldr	r1, [pc, #88]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059de:	4313      	orrs	r3, r2
 80059e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f003 0308 	and.w	r3, r3, #8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d009      	beq.n	8005a02 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80059ee:	4b12      	ldr	r3, [pc, #72]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	490e      	ldr	r1, [pc, #56]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a02:	f000 f821 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8005a06:	4602      	mov	r2, r0
 8005a08:	4b0b      	ldr	r3, [pc, #44]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	091b      	lsrs	r3, r3, #4
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	490a      	ldr	r1, [pc, #40]	; (8005a3c <HAL_RCC_ClockConfig+0x1cc>)
 8005a14:	5ccb      	ldrb	r3, [r1, r3]
 8005a16:	fa22 f303 	lsr.w	r3, r2, r3
 8005a1a:	4a09      	ldr	r2, [pc, #36]	; (8005a40 <HAL_RCC_ClockConfig+0x1d0>)
 8005a1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a1e:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <HAL_RCC_ClockConfig+0x1d4>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fc ff42 	bl	80028ac <HAL_InitTick>

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	3710      	adds	r7, #16
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	bd80      	pop	{r7, pc}
 8005a32:	bf00      	nop
 8005a34:	40023c00 	.word	0x40023c00
 8005a38:	40023800 	.word	0x40023800
 8005a3c:	0800d024 	.word	0x0800d024
 8005a40:	20000004 	.word	0x20000004
 8005a44:	20000008 	.word	0x20000008

08005a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a4c:	b094      	sub	sp, #80	; 0x50
 8005a4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	647b      	str	r3, [r7, #68]	; 0x44
 8005a54:	2300      	movs	r3, #0
 8005a56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a58:	2300      	movs	r3, #0
 8005a5a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a60:	4b79      	ldr	r3, [pc, #484]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	f003 030c 	and.w	r3, r3, #12
 8005a68:	2b08      	cmp	r3, #8
 8005a6a:	d00d      	beq.n	8005a88 <HAL_RCC_GetSysClockFreq+0x40>
 8005a6c:	2b08      	cmp	r3, #8
 8005a6e:	f200 80e1 	bhi.w	8005c34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x34>
 8005a76:	2b04      	cmp	r3, #4
 8005a78:	d003      	beq.n	8005a82 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a7a:	e0db      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a7c:	4b73      	ldr	r3, [pc, #460]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a80:	e0db      	b.n	8005c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a82:	4b72      	ldr	r3, [pc, #456]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005a84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a86:	e0d8      	b.n	8005c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a88:	4b6f      	ldr	r3, [pc, #444]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a90:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005a92:	4b6d      	ldr	r3, [pc, #436]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d063      	beq.n	8005b66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a9e:	4b6a      	ldr	r3, [pc, #424]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	099b      	lsrs	r3, r3, #6
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005aa8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ab0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ab6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aba:	4622      	mov	r2, r4
 8005abc:	462b      	mov	r3, r5
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	0159      	lsls	r1, r3, #5
 8005ac8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005acc:	0150      	lsls	r0, r2, #5
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4621      	mov	r1, r4
 8005ad4:	1a51      	subs	r1, r2, r1
 8005ad6:	6139      	str	r1, [r7, #16]
 8005ad8:	4629      	mov	r1, r5
 8005ada:	eb63 0301 	sbc.w	r3, r3, r1
 8005ade:	617b      	str	r3, [r7, #20]
 8005ae0:	f04f 0200 	mov.w	r2, #0
 8005ae4:	f04f 0300 	mov.w	r3, #0
 8005ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005aec:	4659      	mov	r1, fp
 8005aee:	018b      	lsls	r3, r1, #6
 8005af0:	4651      	mov	r1, sl
 8005af2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005af6:	4651      	mov	r1, sl
 8005af8:	018a      	lsls	r2, r1, #6
 8005afa:	4651      	mov	r1, sl
 8005afc:	ebb2 0801 	subs.w	r8, r2, r1
 8005b00:	4659      	mov	r1, fp
 8005b02:	eb63 0901 	sbc.w	r9, r3, r1
 8005b06:	f04f 0200 	mov.w	r2, #0
 8005b0a:	f04f 0300 	mov.w	r3, #0
 8005b0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b1a:	4690      	mov	r8, r2
 8005b1c:	4699      	mov	r9, r3
 8005b1e:	4623      	mov	r3, r4
 8005b20:	eb18 0303 	adds.w	r3, r8, r3
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	462b      	mov	r3, r5
 8005b28:	eb49 0303 	adc.w	r3, r9, r3
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	f04f 0200 	mov.w	r2, #0
 8005b32:	f04f 0300 	mov.w	r3, #0
 8005b36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	028b      	lsls	r3, r1, #10
 8005b3e:	4621      	mov	r1, r4
 8005b40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005b44:	4621      	mov	r1, r4
 8005b46:	028a      	lsls	r2, r1, #10
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4619      	mov	r1, r3
 8005b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4e:	2200      	movs	r2, #0
 8005b50:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b58:	f7fa fb56 	bl	8000208 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4613      	mov	r3, r2
 8005b62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b64:	e058      	b.n	8005c18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b66:	4b38      	ldr	r3, [pc, #224]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	099b      	lsrs	r3, r3, #6
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4618      	mov	r0, r3
 8005b70:	4611      	mov	r1, r2
 8005b72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b76:	623b      	str	r3, [r7, #32]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b80:	4642      	mov	r2, r8
 8005b82:	464b      	mov	r3, r9
 8005b84:	f04f 0000 	mov.w	r0, #0
 8005b88:	f04f 0100 	mov.w	r1, #0
 8005b8c:	0159      	lsls	r1, r3, #5
 8005b8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b92:	0150      	lsls	r0, r2, #5
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4641      	mov	r1, r8
 8005b9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b9e:	4649      	mov	r1, r9
 8005ba0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	f04f 0300 	mov.w	r3, #0
 8005bac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bb8:	ebb2 040a 	subs.w	r4, r2, sl
 8005bbc:	eb63 050b 	sbc.w	r5, r3, fp
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	00eb      	lsls	r3, r5, #3
 8005bca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bce:	00e2      	lsls	r2, r4, #3
 8005bd0:	4614      	mov	r4, r2
 8005bd2:	461d      	mov	r5, r3
 8005bd4:	4643      	mov	r3, r8
 8005bd6:	18e3      	adds	r3, r4, r3
 8005bd8:	603b      	str	r3, [r7, #0]
 8005bda:	464b      	mov	r3, r9
 8005bdc:	eb45 0303 	adc.w	r3, r5, r3
 8005be0:	607b      	str	r3, [r7, #4]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005bee:	4629      	mov	r1, r5
 8005bf0:	028b      	lsls	r3, r1, #10
 8005bf2:	4621      	mov	r1, r4
 8005bf4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bf8:	4621      	mov	r1, r4
 8005bfa:	028a      	lsls	r2, r1, #10
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c02:	2200      	movs	r2, #0
 8005c04:	61bb      	str	r3, [r7, #24]
 8005c06:	61fa      	str	r2, [r7, #28]
 8005c08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c0c:	f7fa fafc 	bl	8000208 <__aeabi_uldivmod>
 8005c10:	4602      	mov	r2, r0
 8005c12:	460b      	mov	r3, r1
 8005c14:	4613      	mov	r3, r2
 8005c16:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c18:	4b0b      	ldr	r3, [pc, #44]	; (8005c48 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	0c1b      	lsrs	r3, r3, #16
 8005c1e:	f003 0303 	and.w	r3, r3, #3
 8005c22:	3301      	adds	r3, #1
 8005c24:	005b      	lsls	r3, r3, #1
 8005c26:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c30:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c32:	e002      	b.n	8005c3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c34:	4b05      	ldr	r3, [pc, #20]	; (8005c4c <HAL_RCC_GetSysClockFreq+0x204>)
 8005c36:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3750      	adds	r7, #80	; 0x50
 8005c40:	46bd      	mov	sp, r7
 8005c42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c46:	bf00      	nop
 8005c48:	40023800 	.word	0x40023800
 8005c4c:	00f42400 	.word	0x00f42400

08005c50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c50:	b480      	push	{r7}
 8005c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c54:	4b03      	ldr	r3, [pc, #12]	; (8005c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c56:	681b      	ldr	r3, [r3, #0]
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	20000004 	.word	0x20000004

08005c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c6c:	f7ff fff0 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b05      	ldr	r3, [pc, #20]	; (8005c88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0a9b      	lsrs	r3, r3, #10
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4903      	ldr	r1, [pc, #12]	; (8005c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	40023800 	.word	0x40023800
 8005c8c:	0800d034 	.word	0x0800d034

08005c90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c94:	f7ff ffdc 	bl	8005c50 <HAL_RCC_GetHCLKFreq>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	0b5b      	lsrs	r3, r3, #13
 8005ca0:	f003 0307 	and.w	r3, r3, #7
 8005ca4:	4903      	ldr	r1, [pc, #12]	; (8005cb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005ca6:	5ccb      	ldrb	r3, [r1, r3]
 8005ca8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	bd80      	pop	{r7, pc}
 8005cb0:	40023800 	.word	0x40023800
 8005cb4:	0800d034 	.word	0x0800d034

08005cb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b088      	sub	sp, #32
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d012      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005ce0:	4b69      	ldr	r3, [pc, #420]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	4a68      	ldr	r2, [pc, #416]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ce6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005cea:	6093      	str	r3, [r2, #8]
 8005cec:	4b66      	ldr	r3, [pc, #408]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cee:	689a      	ldr	r2, [r3, #8]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cf4:	4964      	ldr	r1, [pc, #400]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005d02:	2301      	movs	r3, #1
 8005d04:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d017      	beq.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d12:	4b5d      	ldr	r3, [pc, #372]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	4959      	ldr	r1, [pc, #356]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d30:	d101      	bne.n	8005d36 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d32:	2301      	movs	r3, #1
 8005d34:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d017      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d4e:	4b4e      	ldr	r3, [pc, #312]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d5c:	494a      	ldr	r1, [pc, #296]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d6c:	d101      	bne.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0320 	and.w	r3, r3, #32
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	f000 808b 	beq.w	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d9c:	4b3a      	ldr	r3, [pc, #232]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da0:	4a39      	ldr	r2, [pc, #228]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005da6:	6413      	str	r3, [r2, #64]	; 0x40
 8005da8:	4b37      	ldr	r3, [pc, #220]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db0:	60bb      	str	r3, [r7, #8]
 8005db2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005db4:	4b35      	ldr	r3, [pc, #212]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a34      	ldr	r2, [pc, #208]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc0:	f7fc fdb8 	bl	8002934 <HAL_GetTick>
 8005dc4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dc6:	e008      	b.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dc8:	f7fc fdb4 	bl	8002934 <HAL_GetTick>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1ad3      	subs	r3, r2, r3
 8005dd2:	2b64      	cmp	r3, #100	; 0x64
 8005dd4:	d901      	bls.n	8005dda <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e357      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dda:	4b2c      	ldr	r3, [pc, #176]	; (8005e8c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d0f0      	beq.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005de6:	4b28      	ldr	r3, [pc, #160]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d035      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dfe:	693a      	ldr	r2, [r7, #16]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d02e      	beq.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e04:	4b20      	ldr	r3, [pc, #128]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e0e:	4b1e      	ldr	r3, [pc, #120]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e12:	4a1d      	ldr	r2, [pc, #116]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e1a:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e26:	4a18      	ldr	r2, [pc, #96]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e2c:	4b16      	ldr	r3, [pc, #88]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	f003 0301 	and.w	r3, r3, #1
 8005e34:	2b01      	cmp	r3, #1
 8005e36:	d114      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fc fd7c 	bl	8002934 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e3e:	e00a      	b.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e40:	f7fc fd78 	bl	8002934 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d901      	bls.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e52:	2303      	movs	r3, #3
 8005e54:	e319      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e56:	4b0c      	ldr	r3, [pc, #48]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	f003 0302 	and.w	r3, r3, #2
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d0ee      	beq.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e6e:	d111      	bne.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005e70:	4b05      	ldr	r3, [pc, #20]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e72:	689b      	ldr	r3, [r3, #8]
 8005e74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e7c:	4b04      	ldr	r3, [pc, #16]	; (8005e90 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e7e:	400b      	ands	r3, r1
 8005e80:	4901      	ldr	r1, [pc, #4]	; (8005e88 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	608b      	str	r3, [r1, #8]
 8005e86:	e00b      	b.n	8005ea0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005e88:	40023800 	.word	0x40023800
 8005e8c:	40007000 	.word	0x40007000
 8005e90:	0ffffcff 	.word	0x0ffffcff
 8005e94:	4baa      	ldr	r3, [pc, #680]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	4aa9      	ldr	r2, [pc, #676]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005e9a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005e9e:	6093      	str	r3, [r2, #8]
 8005ea0:	4ba7      	ldr	r3, [pc, #668]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ea2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005eac:	49a4      	ldr	r1, [pc, #656]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0310 	and.w	r3, r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ebe:	4ba0      	ldr	r3, [pc, #640]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec4:	4a9e      	ldr	r2, [pc, #632]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005ece:	4b9c      	ldr	r3, [pc, #624]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ed0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	4999      	ldr	r1, [pc, #612]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00a      	beq.n	8005f02 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005eec:	4b94      	ldr	r3, [pc, #592]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005efa:	4991      	ldr	r1, [pc, #580]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f0e:	4b8c      	ldr	r3, [pc, #560]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f14:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f1c:	4988      	ldr	r1, [pc, #544]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00a      	beq.n	8005f46 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f30:	4b83      	ldr	r3, [pc, #524]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f3e:	4980      	ldr	r1, [pc, #512]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f40:	4313      	orrs	r3, r2
 8005f42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f52:	4b7b      	ldr	r3, [pc, #492]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f58:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f60:	4977      	ldr	r1, [pc, #476]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f62:	4313      	orrs	r3, r2
 8005f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00a      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f74:	4b72      	ldr	r3, [pc, #456]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7a:	f023 0203 	bic.w	r2, r3, #3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f82:	496f      	ldr	r1, [pc, #444]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f84:	4313      	orrs	r3, r2
 8005f86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d00a      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f96:	4b6a      	ldr	r3, [pc, #424]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9c:	f023 020c 	bic.w	r2, r3, #12
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fa4:	4966      	ldr	r1, [pc, #408]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fb8:	4b61      	ldr	r3, [pc, #388]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fc6:	495e      	ldr	r1, [pc, #376]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005fda:	4b59      	ldr	r3, [pc, #356]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fe8:	4955      	ldr	r1, [pc, #340]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005ffc:	4b50      	ldr	r3, [pc, #320]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006002:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600a:	494d      	ldr	r1, [pc, #308]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800601e:	4b48      	ldr	r3, [pc, #288]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006024:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602c:	4944      	ldr	r1, [pc, #272]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006040:	4b3f      	ldr	r3, [pc, #252]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006046:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604e:	493c      	ldr	r1, [pc, #240]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006062:	4b37      	ldr	r3, [pc, #220]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006064:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006068:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	4933      	ldr	r1, [pc, #204]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006084:	4b2e      	ldr	r3, [pc, #184]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006092:	492b      	ldr	r1, [pc, #172]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d011      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060a6:	4b26      	ldr	r3, [pc, #152]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060b4:	4922      	ldr	r1, [pc, #136]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c4:	d101      	bne.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060c6:	2301      	movs	r3, #1
 80060c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0308 	and.w	r3, r3, #8
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80060d6:	2301      	movs	r3, #1
 80060d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d00a      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060e6:	4b16      	ldr	r3, [pc, #88]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060f4:	4912      	ldr	r1, [pc, #72]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060f6:	4313      	orrs	r3, r2
 80060f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d00b      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006108:	4b0d      	ldr	r3, [pc, #52]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800610a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006118:	4909      	ldr	r1, [pc, #36]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800611a:	4313      	orrs	r3, r2
 800611c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d006      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612e:	2b00      	cmp	r3, #0
 8006130:	f000 80d9 	beq.w	80062e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006134:	4b02      	ldr	r3, [pc, #8]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a01      	ldr	r2, [pc, #4]	; (8006140 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800613a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800613e:	e001      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006140:	40023800 	.word	0x40023800
 8006144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006146:	f7fc fbf5 	bl	8002934 <HAL_GetTick>
 800614a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800614c:	e008      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800614e:	f7fc fbf1 	bl	8002934 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b64      	cmp	r3, #100	; 0x64
 800615a:	d901      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e194      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006160:	4b6c      	ldr	r3, [pc, #432]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d021      	beq.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	2b00      	cmp	r3, #0
 800617e:	d11d      	bne.n	80061bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006180:	4b64      	ldr	r3, [pc, #400]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006186:	0c1b      	lsrs	r3, r3, #16
 8006188:	f003 0303 	and.w	r3, r3, #3
 800618c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800618e:	4b61      	ldr	r3, [pc, #388]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006190:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006194:	0e1b      	lsrs	r3, r3, #24
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	019a      	lsls	r2, r3, #6
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	041b      	lsls	r3, r3, #16
 80061a6:	431a      	orrs	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	061b      	lsls	r3, r3, #24
 80061ac:	431a      	orrs	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	071b      	lsls	r3, r3, #28
 80061b4:	4957      	ldr	r1, [pc, #348]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061b6:	4313      	orrs	r3, r2
 80061b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d004      	beq.n	80061d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d0:	d00a      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d02e      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061e6:	d129      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061e8:	4b4a      	ldr	r3, [pc, #296]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061ee:	0c1b      	lsrs	r3, r3, #16
 80061f0:	f003 0303 	and.w	r3, r3, #3
 80061f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061f6:	4b47      	ldr	r3, [pc, #284]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061fc:	0f1b      	lsrs	r3, r3, #28
 80061fe:	f003 0307 	and.w	r3, r3, #7
 8006202:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	685b      	ldr	r3, [r3, #4]
 8006208:	019a      	lsls	r2, r3, #6
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	041b      	lsls	r3, r3, #16
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68db      	ldr	r3, [r3, #12]
 8006214:	061b      	lsls	r3, r3, #24
 8006216:	431a      	orrs	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	071b      	lsls	r3, r3, #28
 800621c:	493d      	ldr	r1, [pc, #244]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006224:	4b3b      	ldr	r3, [pc, #236]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006226:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800622a:	f023 021f 	bic.w	r2, r3, #31
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006232:	3b01      	subs	r3, #1
 8006234:	4937      	ldr	r1, [pc, #220]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006236:	4313      	orrs	r3, r2
 8006238:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d01d      	beq.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006248:	4b32      	ldr	r3, [pc, #200]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800624a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800624e:	0e1b      	lsrs	r3, r3, #24
 8006250:	f003 030f 	and.w	r3, r3, #15
 8006254:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006256:	4b2f      	ldr	r3, [pc, #188]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006258:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800625c:	0f1b      	lsrs	r3, r3, #28
 800625e:	f003 0307 	and.w	r3, r3, #7
 8006262:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	019a      	lsls	r2, r3, #6
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	431a      	orrs	r2, r3
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	061b      	lsls	r3, r3, #24
 8006276:	431a      	orrs	r2, r3
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	071b      	lsls	r3, r3, #28
 800627c:	4925      	ldr	r1, [pc, #148]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800627e:	4313      	orrs	r3, r2
 8006280:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628c:	2b00      	cmp	r3, #0
 800628e:	d011      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	019a      	lsls	r2, r3, #6
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	041b      	lsls	r3, r3, #16
 800629c:	431a      	orrs	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	061b      	lsls	r3, r3, #24
 80062a4:	431a      	orrs	r2, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	071b      	lsls	r3, r3, #28
 80062ac:	4919      	ldr	r1, [pc, #100]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ae:	4313      	orrs	r3, r2
 80062b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062b4:	4b17      	ldr	r3, [pc, #92]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a16      	ldr	r2, [pc, #88]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062c0:	f7fc fb38 	bl	8002934 <HAL_GetTick>
 80062c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062c6:	e008      	b.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062c8:	f7fc fb34 	bl	8002934 <HAL_GetTick>
 80062cc:	4602      	mov	r2, r0
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	2b64      	cmp	r3, #100	; 0x64
 80062d4:	d901      	bls.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062d6:	2303      	movs	r3, #3
 80062d8:	e0d7      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062da:	4b0e      	ldr	r3, [pc, #56]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d0f0      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	f040 80cd 	bne.w	8006488 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80062ee:	4b09      	ldr	r3, [pc, #36]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a08      	ldr	r2, [pc, #32]	; (8006314 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062fa:	f7fc fb1b 	bl	8002934 <HAL_GetTick>
 80062fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006300:	e00a      	b.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006302:	f7fc fb17 	bl	8002934 <HAL_GetTick>
 8006306:	4602      	mov	r2, r0
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	2b64      	cmp	r3, #100	; 0x64
 800630e:	d903      	bls.n	8006318 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e0ba      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006314:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006318:	4b5e      	ldr	r3, [pc, #376]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006320:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006324:	d0ed      	beq.n	8006302 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800632e:	2b00      	cmp	r3, #0
 8006330:	d003      	beq.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	2b00      	cmp	r3, #0
 8006338:	d009      	beq.n	800634e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006342:	2b00      	cmp	r3, #0
 8006344:	d02e      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800634a:	2b00      	cmp	r3, #0
 800634c:	d12a      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800634e:	4b51      	ldr	r3, [pc, #324]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	f003 0303 	and.w	r3, r3, #3
 800635a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800635c:	4b4d      	ldr	r3, [pc, #308]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	0f1b      	lsrs	r3, r3, #28
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	019a      	lsls	r2, r3, #6
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	041b      	lsls	r3, r3, #16
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	061b      	lsls	r3, r3, #24
 800637c:	431a      	orrs	r2, r3
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	071b      	lsls	r3, r3, #28
 8006382:	4944      	ldr	r1, [pc, #272]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006384:	4313      	orrs	r3, r2
 8006386:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800638a:	4b42      	ldr	r3, [pc, #264]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800638c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006390:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006398:	3b01      	subs	r3, #1
 800639a:	021b      	lsls	r3, r3, #8
 800639c:	493d      	ldr	r1, [pc, #244]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800639e:	4313      	orrs	r3, r2
 80063a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d022      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063b8:	d11d      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063ba:	4b36      	ldr	r3, [pc, #216]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063c0:	0e1b      	lsrs	r3, r3, #24
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063c8:	4b32      	ldr	r3, [pc, #200]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ce:	0f1b      	lsrs	r3, r3, #28
 80063d0:	f003 0307 	and.w	r3, r3, #7
 80063d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	695b      	ldr	r3, [r3, #20]
 80063da:	019a      	lsls	r2, r3, #6
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	041b      	lsls	r3, r3, #16
 80063e2:	431a      	orrs	r2, r3
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	061b      	lsls	r3, r3, #24
 80063e8:	431a      	orrs	r2, r3
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	071b      	lsls	r3, r3, #28
 80063ee:	4929      	ldr	r1, [pc, #164]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063f0:	4313      	orrs	r3, r2
 80063f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d028      	beq.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006402:	4b24      	ldr	r3, [pc, #144]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006408:	0e1b      	lsrs	r3, r3, #24
 800640a:	f003 030f 	and.w	r3, r3, #15
 800640e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006410:	4b20      	ldr	r3, [pc, #128]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	f003 0303 	and.w	r3, r3, #3
 800641c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	019a      	lsls	r2, r3, #6
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	041b      	lsls	r3, r3, #16
 8006428:	431a      	orrs	r2, r3
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	061b      	lsls	r3, r3, #24
 800642e:	431a      	orrs	r2, r3
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	69db      	ldr	r3, [r3, #28]
 8006434:	071b      	lsls	r3, r3, #28
 8006436:	4917      	ldr	r1, [pc, #92]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006438:	4313      	orrs	r3, r2
 800643a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006444:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800644c:	4911      	ldr	r1, [pc, #68]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800644e:	4313      	orrs	r3, r2
 8006450:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006454:	4b0f      	ldr	r3, [pc, #60]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a0e      	ldr	r2, [pc, #56]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800645a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800645e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006460:	f7fc fa68 	bl	8002934 <HAL_GetTick>
 8006464:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006466:	e008      	b.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006468:	f7fc fa64 	bl	8002934 <HAL_GetTick>
 800646c:	4602      	mov	r2, r0
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	2b64      	cmp	r3, #100	; 0x64
 8006474:	d901      	bls.n	800647a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006476:	2303      	movs	r3, #3
 8006478:	e007      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800647a:	4b06      	ldr	r3, [pc, #24]	; (8006494 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006482:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006486:	d1ef      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800

08006498 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d101      	bne.n	80064aa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e022      	b.n	80064f0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d105      	bne.n	80064c2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f7fa ff1d 	bl	80012fc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2203      	movs	r2, #3
 80064c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 f814 	bl	80064f8 <HAL_SD_InitCard>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d001      	beq.n	80064da <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e00a      	b.n	80064f0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80064f8:	b5b0      	push	{r4, r5, r7, lr}
 80064fa:	b08e      	sub	sp, #56	; 0x38
 80064fc:	af04      	add	r7, sp, #16
 80064fe:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006500:	2300      	movs	r3, #0
 8006502:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006508:	2300      	movs	r3, #0
 800650a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800650c:	2300      	movs	r3, #0
 800650e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006510:	2300      	movs	r3, #0
 8006512:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8006514:	2376      	movs	r3, #118	; 0x76
 8006516:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681d      	ldr	r5, [r3, #0]
 800651c:	466c      	mov	r4, sp
 800651e:	f107 0314 	add.w	r3, r7, #20
 8006522:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006526:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800652a:	f107 0308 	add.w	r3, r7, #8
 800652e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006530:	4628      	mov	r0, r5
 8006532:	f001 fdf9 	bl	8008128 <SDMMC_Init>
 8006536:	4603      	mov	r3, r0
 8006538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800653c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006540:	2b00      	cmp	r3, #0
 8006542:	d001      	beq.n	8006548 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	e059      	b.n	80065fc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	685a      	ldr	r2, [r3, #4]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006556:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4618      	mov	r0, r3
 800655e:	f001 fe1c 	bl	800819a <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006570:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006572:	2002      	movs	r0, #2
 8006574:	f7fc f9ea 	bl	800294c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fb51 	bl	8006c20 <SD_PowerON>
 800657e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d00b      	beq.n	800659e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	431a      	orrs	r2, r3
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800659a:	2301      	movs	r3, #1
 800659c:	e02e      	b.n	80065fc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f000 fa70 	bl	8006a84 <SD_InitCard>
 80065a4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	431a      	orrs	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80065c0:	2301      	movs	r3, #1
 80065c2:	e01b      	b.n	80065fc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065cc:	4618      	mov	r0, r3
 80065ce:	f001 fe77 	bl	80082c0 <SDMMC_CmdBlockLength>
 80065d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00f      	beq.n	80065fa <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a09      	ldr	r2, [pc, #36]	; (8006604 <HAL_SD_InitCard+0x10c>)
 80065e0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2201      	movs	r2, #1
 80065f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e000      	b.n	80065fc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80065fa:	2300      	movs	r3, #0
}
 80065fc:	4618      	mov	r0, r3
 80065fe:	3728      	adds	r7, #40	; 0x28
 8006600:	46bd      	mov	sp, r7
 8006602:	bdb0      	pop	{r4, r5, r7, pc}
 8006604:	004005ff 	.word	0x004005ff

08006608 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006616:	0f9b      	lsrs	r3, r3, #30
 8006618:	b2da      	uxtb	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006622:	0e9b      	lsrs	r3, r3, #26
 8006624:	b2db      	uxtb	r3, r3
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	b2da      	uxtb	r2, r3
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006634:	0e1b      	lsrs	r3, r3, #24
 8006636:	b2db      	uxtb	r3, r3
 8006638:	f003 0303 	and.w	r3, r3, #3
 800663c:	b2da      	uxtb	r2, r3
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006646:	0c1b      	lsrs	r3, r3, #16
 8006648:	b2da      	uxtb	r2, r3
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006652:	0a1b      	lsrs	r3, r3, #8
 8006654:	b2da      	uxtb	r2, r3
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800665e:	b2da      	uxtb	r2, r3
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006668:	0d1b      	lsrs	r3, r3, #20
 800666a:	b29a      	uxth	r2, r3
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006674:	0c1b      	lsrs	r3, r3, #16
 8006676:	b2db      	uxtb	r3, r3
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	b2da      	uxtb	r2, r3
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006686:	0bdb      	lsrs	r3, r3, #15
 8006688:	b2db      	uxtb	r3, r3
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	b2da      	uxtb	r2, r3
 8006690:	683b      	ldr	r3, [r7, #0]
 8006692:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006698:	0b9b      	lsrs	r3, r3, #14
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	b2da      	uxtb	r2, r3
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066aa:	0b5b      	lsrs	r3, r3, #13
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	f003 0301 	and.w	r3, r3, #1
 80066b2:	b2da      	uxtb	r2, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066bc:	0b1b      	lsrs	r3, r3, #12
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	f003 0301 	and.w	r3, r3, #1
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2200      	movs	r2, #0
 80066ce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d163      	bne.n	80067a0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066dc:	009a      	lsls	r2, r3, #2
 80066de:	f640 73fc 	movw	r3, #4092	; 0xffc
 80066e2:	4013      	ands	r3, r2
 80066e4:	687a      	ldr	r2, [r7, #4]
 80066e6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80066e8:	0f92      	lsrs	r2, r2, #30
 80066ea:	431a      	orrs	r2, r3
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f4:	0edb      	lsrs	r3, r3, #27
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	f003 0307 	and.w	r3, r3, #7
 80066fc:	b2da      	uxtb	r2, r3
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006706:	0e1b      	lsrs	r3, r3, #24
 8006708:	b2db      	uxtb	r3, r3
 800670a:	f003 0307 	and.w	r3, r3, #7
 800670e:	b2da      	uxtb	r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006718:	0d5b      	lsrs	r3, r3, #21
 800671a:	b2db      	uxtb	r3, r3
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	b2da      	uxtb	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800672a:	0c9b      	lsrs	r3, r3, #18
 800672c:	b2db      	uxtb	r3, r3
 800672e:	f003 0307 	and.w	r3, r3, #7
 8006732:	b2da      	uxtb	r2, r3
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800673c:	0bdb      	lsrs	r3, r3, #15
 800673e:	b2db      	uxtb	r3, r3
 8006740:	f003 0307 	and.w	r3, r3, #7
 8006744:	b2da      	uxtb	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	7e1b      	ldrb	r3, [r3, #24]
 8006758:	b2db      	uxtb	r3, r3
 800675a:	f003 0307 	and.w	r3, r3, #7
 800675e:	3302      	adds	r3, #2
 8006760:	2201      	movs	r2, #1
 8006762:	fa02 f303 	lsl.w	r3, r2, r3
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800676a:	fb03 f202 	mul.w	r2, r3, r2
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	7a1b      	ldrb	r3, [r3, #8]
 8006776:	b2db      	uxtb	r3, r3
 8006778:	f003 030f 	and.w	r3, r3, #15
 800677c:	2201      	movs	r2, #1
 800677e:	409a      	lsls	r2, r3
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800678c:	0a52      	lsrs	r2, r2, #9
 800678e:	fb03 f202 	mul.w	r2, r3, r2
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800679c:	661a      	str	r2, [r3, #96]	; 0x60
 800679e:	e031      	b.n	8006804 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d11d      	bne.n	80067e4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80067ac:	041b      	lsls	r3, r3, #16
 80067ae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	431a      	orrs	r2, r3
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	691b      	ldr	r3, [r3, #16]
 80067c2:	3301      	adds	r3, #1
 80067c4:	029a      	lsls	r2, r3, #10
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	661a      	str	r2, [r3, #96]	; 0x60
 80067e2:	e00f      	b.n	8006804 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a58      	ldr	r2, [pc, #352]	; (800694c <HAL_SD_GetCardCSD+0x344>)
 80067ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067f0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2201      	movs	r2, #1
 80067fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006800:	2301      	movs	r3, #1
 8006802:	e09d      	b.n	8006940 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006808:	0b9b      	lsrs	r3, r3, #14
 800680a:	b2db      	uxtb	r3, r3
 800680c:	f003 0301 	and.w	r3, r3, #1
 8006810:	b2da      	uxtb	r2, r3
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800681a:	09db      	lsrs	r3, r3, #7
 800681c:	b2db      	uxtb	r3, r3
 800681e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006822:	b2da      	uxtb	r2, r3
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800682c:	b2db      	uxtb	r3, r3
 800682e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006832:	b2da      	uxtb	r2, r3
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683c:	0fdb      	lsrs	r3, r3, #31
 800683e:	b2da      	uxtb	r2, r3
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006848:	0f5b      	lsrs	r3, r3, #29
 800684a:	b2db      	uxtb	r3, r3
 800684c:	f003 0303 	and.w	r3, r3, #3
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685a:	0e9b      	lsrs	r3, r3, #26
 800685c:	b2db      	uxtb	r3, r3
 800685e:	f003 0307 	and.w	r3, r3, #7
 8006862:	b2da      	uxtb	r2, r3
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686c:	0d9b      	lsrs	r3, r3, #22
 800686e:	b2db      	uxtb	r3, r3
 8006870:	f003 030f 	and.w	r3, r3, #15
 8006874:	b2da      	uxtb	r2, r3
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687e:	0d5b      	lsrs	r3, r3, #21
 8006880:	b2db      	uxtb	r3, r3
 8006882:	f003 0301 	and.w	r3, r3, #1
 8006886:	b2da      	uxtb	r2, r3
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800689a:	0c1b      	lsrs	r3, r3, #16
 800689c:	b2db      	uxtb	r3, r3
 800689e:	f003 0301 	and.w	r3, r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	0bdb      	lsrs	r3, r3, #15
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c2:	0b9b      	lsrs	r3, r3, #14
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	b2da      	uxtb	r2, r3
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d6:	0b5b      	lsrs	r3, r3, #13
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ea:	0b1b      	lsrs	r3, r3, #12
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	b2da      	uxtb	r2, r3
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068fe:	0a9b      	lsrs	r3, r3, #10
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f003 0303 	and.w	r3, r3, #3
 8006906:	b2da      	uxtb	r2, r3
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006912:	0a1b      	lsrs	r3, r3, #8
 8006914:	b2db      	uxtb	r3, r3
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	b2da      	uxtb	r2, r3
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006926:	085b      	lsrs	r3, r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800692e:	b2da      	uxtb	r2, r3
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800693e:	2300      	movs	r3, #0
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	004005ff 	.word	0x004005ff

08006950 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006950:	b5b0      	push	{r4, r5, r7, lr}
 8006952:	b08e      	sub	sp, #56	; 0x38
 8006954:	af04      	add	r7, sp, #16
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800695a:	2300      	movs	r3, #0
 800695c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2203      	movs	r2, #3
 8006964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800696c:	2b03      	cmp	r3, #3
 800696e:	d02e      	beq.n	80069ce <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d106      	bne.n	8006986 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	639a      	str	r2, [r3, #56]	; 0x38
 8006984:	e029      	b.n	80069da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698c:	d10a      	bne.n	80069a4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f9d4 	bl	8006d3c <SD_WideBus_Enable>
 8006994:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800699a:	6a3b      	ldr	r3, [r7, #32]
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	639a      	str	r2, [r3, #56]	; 0x38
 80069a2:	e01a      	b.n	80069da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10a      	bne.n	80069c0 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 fa11 	bl	8006dd2 <SD_WideBus_Disable>
 80069b0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069b6:	6a3b      	ldr	r3, [r7, #32]
 80069b8:	431a      	orrs	r2, r3
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	639a      	str	r2, [r3, #56]	; 0x38
 80069be:	e00c      	b.n	80069da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	639a      	str	r2, [r3, #56]	; 0x38
 80069cc:	e005      	b.n	80069da <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a26      	ldr	r2, [pc, #152]	; (8006a80 <HAL_SD_ConfigWideBusOperation+0x130>)
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80069f8:	e01f      	b.n	8006a3a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	695b      	ldr	r3, [r3, #20]
 8006a14:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681d      	ldr	r5, [r3, #0]
 8006a20:	466c      	mov	r4, sp
 8006a22:	f107 0314 	add.w	r3, r7, #20
 8006a26:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006a2a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006a2e:	f107 0308 	add.w	r3, r7, #8
 8006a32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a34:	4628      	mov	r0, r5
 8006a36:	f001 fb77 	bl	8008128 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a42:	4618      	mov	r0, r3
 8006a44:	f001 fc3c 	bl	80082c0 <SDMMC_CmdBlockLength>
 8006a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00c      	beq.n	8006a6a <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a0a      	ldr	r2, [pc, #40]	; (8006a80 <HAL_SD_ConfigWideBusOperation+0x130>)
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8006a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3728      	adds	r7, #40	; 0x28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	004005ff 	.word	0x004005ff

08006a84 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a84:	b5b0      	push	{r4, r5, r7, lr}
 8006a86:	b094      	sub	sp, #80	; 0x50
 8006a88:	af04      	add	r7, sp, #16
 8006a8a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4618      	mov	r0, r3
 8006a96:	f001 fb8e 	bl	80081b6 <SDMMC_GetPowerState>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d102      	bne.n	8006aa6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006aa0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006aa4:	e0b8      	b.n	8006c18 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aaa:	2b03      	cmp	r3, #3
 8006aac:	d02f      	beq.n	8006b0e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f001 fd0f 	bl	80084d6 <SDMMC_CmdSendCID>
 8006ab8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006aba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <SD_InitCard+0x40>
    {
      return errorstate;
 8006ac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac2:	e0a9      	b.n	8006c18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	2100      	movs	r1, #0
 8006aca:	4618      	mov	r0, r3
 8006acc:	f001 fbb9 	bl	8008242 <SDMMC_GetResponse>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	2104      	movs	r1, #4
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fbb0 	bl	8008242 <SDMMC_GetResponse>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	2108      	movs	r1, #8
 8006aee:	4618      	mov	r0, r3
 8006af0:	f001 fba7 	bl	8008242 <SDMMC_GetResponse>
 8006af4:	4602      	mov	r2, r0
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	210c      	movs	r1, #12
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 fb9e 	bl	8008242 <SDMMC_GetResponse>
 8006b06:	4602      	mov	r2, r0
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b12:	2b03      	cmp	r3, #3
 8006b14:	d00d      	beq.n	8006b32 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f107 020e 	add.w	r2, r7, #14
 8006b1e:	4611      	mov	r1, r2
 8006b20:	4618      	mov	r0, r3
 8006b22:	f001 fd15 	bl	8008550 <SDMMC_CmdSetRelAdd>
 8006b26:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <SD_InitCard+0xae>
    {
      return errorstate;
 8006b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b30:	e072      	b.n	8006c18 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d036      	beq.n	8006ba8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b4a:	041b      	lsls	r3, r3, #16
 8006b4c:	4619      	mov	r1, r3
 8006b4e:	4610      	mov	r0, r2
 8006b50:	f001 fcdf 	bl	8008512 <SDMMC_CmdSendCSD>
 8006b54:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <SD_InitCard+0xdc>
    {
      return errorstate;
 8006b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b5e:	e05b      	b.n	8006c18 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f001 fb6b 	bl	8008242 <SDMMC_GetResponse>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2104      	movs	r1, #4
 8006b78:	4618      	mov	r0, r3
 8006b7a:	f001 fb62 	bl	8008242 <SDMMC_GetResponse>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2108      	movs	r1, #8
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f001 fb59 	bl	8008242 <SDMMC_GetResponse>
 8006b90:	4602      	mov	r2, r0
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	210c      	movs	r1, #12
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f001 fb50 	bl	8008242 <SDMMC_GetResponse>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2104      	movs	r1, #4
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f001 fb47 	bl	8008242 <SDMMC_GetResponse>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	0d1a      	lsrs	r2, r3, #20
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fd20 	bl	8006608 <HAL_SD_GetCardCSD>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bd2:	e021      	b.n	8006c18 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6819      	ldr	r1, [r3, #0]
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bdc:	041b      	lsls	r3, r3, #16
 8006bde:	2200      	movs	r2, #0
 8006be0:	461c      	mov	r4, r3
 8006be2:	4615      	mov	r5, r2
 8006be4:	4622      	mov	r2, r4
 8006be6:	462b      	mov	r3, r5
 8006be8:	4608      	mov	r0, r1
 8006bea:	f001 fb8b 	bl	8008304 <SDMMC_CmdSelDesel>
 8006bee:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <SD_InitCard+0x176>
  {
    return errorstate;
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006bf8:	e00e      	b.n	8006c18 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681d      	ldr	r5, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	466c      	mov	r4, sp
 8006c02:	f103 0210 	add.w	r2, r3, #16
 8006c06:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c08:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006c0c:	3304      	adds	r3, #4
 8006c0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c10:	4628      	mov	r0, r5
 8006c12:	f001 fa89 	bl	8008128 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	3740      	adds	r7, #64	; 0x40
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bdb0      	pop	{r4, r5, r7, pc}

08006c20 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b086      	sub	sp, #24
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	617b      	str	r3, [r7, #20]
 8006c30:	2300      	movs	r3, #0
 8006c32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	4618      	mov	r0, r3
 8006c3a:	f001 fb86 	bl	800834a <SDMMC_CmdGoIdleState>
 8006c3e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	e072      	b.n	8006d30 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 fb99 	bl	8008386 <SDMMC_CmdOperCond>
 8006c54:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00d      	beq.n	8006c78 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2200      	movs	r2, #0
 8006c60:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 fb6f 	bl	800834a <SDMMC_CmdGoIdleState>
 8006c6c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d004      	beq.n	8006c7e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	e05b      	b.n	8006d30 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d137      	bne.n	8006cf6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f001 fb99 	bl	80083c4 <SDMMC_CmdAppCommand>
 8006c92:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d02d      	beq.n	8006cf6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c9e:	e047      	b.n	8006d30 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	2100      	movs	r1, #0
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f001 fb8c 	bl	80083c4 <SDMMC_CmdAppCommand>
 8006cac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <SD_PowerON+0x98>
    {
      return errorstate;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	e03b      	b.n	8006d30 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	491e      	ldr	r1, [pc, #120]	; (8006d38 <SD_PowerON+0x118>)
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f001 fba2 	bl	8008408 <SDMMC_CmdAppOperCommand>
 8006cc4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d002      	beq.n	8006cd2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006ccc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cd0:	e02e      	b.n	8006d30 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2100      	movs	r1, #0
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f001 fab2 	bl	8008242 <SDMMC_GetResponse>
 8006cde:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	0fdb      	lsrs	r3, r3, #31
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d101      	bne.n	8006cec <SD_PowerON+0xcc>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <SD_PowerON+0xce>
 8006cec:	2300      	movs	r3, #0
 8006cee:	613b      	str	r3, [r7, #16]

    count++;
 8006cf0:	68bb      	ldr	r3, [r7, #8]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d802      	bhi.n	8006d06 <SD_PowerON+0xe6>
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d0cc      	beq.n	8006ca0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d902      	bls.n	8006d16 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d14:	e00c      	b.n	8006d30 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2201      	movs	r2, #1
 8006d24:	645a      	str	r2, [r3, #68]	; 0x44
 8006d26:	e002      	b.n	8006d2e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}
 8006d38:	c1100000 	.word	0xc1100000

08006d3c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b086      	sub	sp, #24
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2100      	movs	r1, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	f001 fa75 	bl	8008242 <SDMMC_GetResponse>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d62:	d102      	bne.n	8006d6a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d68:	e02f      	b.n	8006dca <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006d6a:	f107 030c 	add.w	r3, r7, #12
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f000 f879 	bl	8006e68 <SD_FindSCR>
 8006d76:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d001      	beq.n	8006d82 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	e023      	b.n	8006dca <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d01c      	beq.n	8006dc6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d94:	041b      	lsls	r3, r3, #16
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f001 fb13 	bl	80083c4 <SDMMC_CmdAppCommand>
 8006d9e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d001      	beq.n	8006daa <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	e00f      	b.n	8006dca <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	2102      	movs	r1, #2
 8006db0:	4618      	mov	r0, r3
 8006db2:	f001 fb4d 	bl	8008450 <SDMMC_CmdBusWidth>
 8006db6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d001      	beq.n	8006dc2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	e003      	b.n	8006dca <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e001      	b.n	8006dca <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006dc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b086      	sub	sp, #24
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006dda:	2300      	movs	r3, #0
 8006ddc:	60fb      	str	r3, [r7, #12]
 8006dde:	2300      	movs	r3, #0
 8006de0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2100      	movs	r1, #0
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fa2a 	bl	8008242 <SDMMC_GetResponse>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006df4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006df8:	d102      	bne.n	8006e00 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006dfa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006dfe:	e02f      	b.n	8006e60 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f000 f82e 	bl	8006e68 <SD_FindSCR>
 8006e0c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d001      	beq.n	8006e18 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	e023      	b.n	8006e60 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006e18:	693b      	ldr	r3, [r7, #16]
 8006e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01c      	beq.n	8006e5c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681a      	ldr	r2, [r3, #0]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e2a:	041b      	lsls	r3, r3, #16
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	4610      	mov	r0, r2
 8006e30:	f001 fac8 	bl	80083c4 <SDMMC_CmdAppCommand>
 8006e34:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	e00f      	b.n	8006e60 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2100      	movs	r1, #0
 8006e46:	4618      	mov	r0, r3
 8006e48:	f001 fb02 	bl	8008450 <SDMMC_CmdBusWidth>
 8006e4c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	e003      	b.n	8006e60 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	e001      	b.n	8006e60 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006e5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b08f      	sub	sp, #60	; 0x3c
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
 8006e70:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006e72:	f7fb fd5f 	bl	8002934 <HAL_GetTick>
 8006e76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60bb      	str	r3, [r7, #8]
 8006e80:	2300      	movs	r3, #0
 8006e82:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2108      	movs	r1, #8
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f001 fa16 	bl	80082c0 <SDMMC_CmdBlockLength>
 8006e94:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d001      	beq.n	8006ea0 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	e0b2      	b.n	8007006 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681a      	ldr	r2, [r3, #0]
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea8:	041b      	lsls	r3, r3, #16
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4610      	mov	r0, r2
 8006eae:	f001 fa89 	bl	80083c4 <SDMMC_CmdAppCommand>
 8006eb2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d001      	beq.n	8006ebe <SD_FindSCR+0x56>
  {
    return errorstate;
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	e0a3      	b.n	8007006 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8006ec2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8006ec4:	2308      	movs	r3, #8
 8006ec6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8006ec8:	2330      	movs	r3, #48	; 0x30
 8006eca:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006ecc:	2302      	movs	r3, #2
 8006ece:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f107 0210 	add.w	r2, r7, #16
 8006ee0:	4611      	mov	r1, r2
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f001 f9c0 	bl	8008268 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f001 fad1 	bl	8008494 <SDMMC_CmdSendSCR>
 8006ef2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d02a      	beq.n	8006f50 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efc:	e083      	b.n	8007006 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d00f      	beq.n	8006f2c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6819      	ldr	r1, [r3, #0]
 8006f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	f107 0208 	add.w	r2, r7, #8
 8006f18:	18d4      	adds	r4, r2, r3
 8006f1a:	4608      	mov	r0, r1
 8006f1c:	f001 f930 	bl	8008180 <SDMMC_ReadFIFO>
 8006f20:	4603      	mov	r3, r0
 8006f22:	6023      	str	r3, [r4, #0]
      index++;
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	3301      	adds	r3, #1
 8006f28:	637b      	str	r3, [r7, #52]	; 0x34
 8006f2a:	e006      	b.n	8006f3a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d012      	beq.n	8006f60 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006f3a:	f7fb fcfb 	bl	8002934 <HAL_GetTick>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	1ad3      	subs	r3, r2, r3
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d102      	bne.n	8006f50 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006f4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006f4e:	e05a      	b.n	8007006 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f56:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d0cf      	beq.n	8006efe <SD_FindSCR+0x96>
 8006f5e:	e000      	b.n	8006f62 <SD_FindSCR+0xfa>
      break;
 8006f60:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f68:	f003 0308 	and.w	r3, r3, #8
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d005      	beq.n	8006f7c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006f78:	2308      	movs	r3, #8
 8006f7a:	e044      	b.n	8007006 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f82:	f003 0302 	and.w	r3, r3, #2
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d005      	beq.n	8006f96 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	2202      	movs	r2, #2
 8006f90:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006f92:	2302      	movs	r3, #2
 8006f94:	e037      	b.n	8007006 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2220      	movs	r2, #32
 8006faa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006fac:	2320      	movs	r3, #32
 8006fae:	e02a      	b.n	8007006 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f240 523a 	movw	r2, #1338	; 0x53a
 8006fb8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	061a      	lsls	r2, r3, #24
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	021b      	lsls	r3, r3, #8
 8006fc2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fc6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	0a1b      	lsrs	r3, r3, #8
 8006fcc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006fd0:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	0e1b      	lsrs	r3, r3, #24
 8006fd6:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fda:	601a      	str	r2, [r3, #0]
    scr++;
 8006fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fde:	3304      	adds	r3, #4
 8006fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	061a      	lsls	r2, r3, #24
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	021b      	lsls	r3, r3, #8
 8006fea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	0a1b      	lsrs	r3, r3, #8
 8006ff4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006ff8:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	0e1b      	lsrs	r3, r3, #24
 8006ffe:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007002:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007004:	2300      	movs	r3, #0
}
 8007006:	4618      	mov	r0, r3
 8007008:	373c      	adds	r7, #60	; 0x3c
 800700a:	46bd      	mov	sp, r7
 800700c:	bd90      	pop	{r4, r7, pc}

0800700e <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800700e:	b580      	push	{r7, lr}
 8007010:	b084      	sub	sp, #16
 8007012:	af00      	add	r7, sp, #0
 8007014:	60f8      	str	r0, [r7, #12]
 8007016:	60b9      	str	r1, [r7, #8]
 8007018:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d101      	bne.n	8007024 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e038      	b.n	8007096 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d106      	bne.n	800703e <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f7fa fb59 	bl	80016f0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	3308      	adds	r3, #8
 8007046:	4619      	mov	r1, r3
 8007048:	4610      	mov	r0, r2
 800704a:	f000 ff55 	bl	8007ef8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6818      	ldr	r0, [r3, #0]
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	461a      	mov	r2, r3
 8007058:	68b9      	ldr	r1, [r7, #8]
 800705a:	f000 ffdd 	bl	8008018 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6858      	ldr	r0, [r3, #4]
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	689a      	ldr	r2, [r3, #8]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	f001 f824 	bl	80080b8 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	6892      	ldr	r2, [r2, #8]
 8007078:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	6892      	ldr	r2, [r2, #8]
 8007084:	f041 0101 	orr.w	r1, r1, #1
 8007088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b082      	sub	sp, #8
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d101      	bne.n	80070b0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070ac:	2301      	movs	r3, #1
 80070ae:	e049      	b.n	8007144 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	2200      	movs	r2, #0
 80070c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7fa f99f 	bl	8001408 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2202      	movs	r2, #2
 80070ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3304      	adds	r3, #4
 80070da:	4619      	mov	r1, r3
 80070dc:	4610      	mov	r0, r2
 80070de:	f000 f877 	bl	80071d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2201      	movs	r2, #1
 8007116:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2201      	movs	r2, #1
 8007126:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2201      	movs	r2, #1
 800712e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3708      	adds	r7, #8
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b082      	sub	sp, #8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007160:	2302      	movs	r3, #2
 8007162:	e031      	b.n	80071c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2202      	movs	r2, #2
 8007170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f8ca 	bl	8007310 <TIM_SlaveTimer_SetConfig>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d009      	beq.n	8007196 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e018      	b.n	80071c8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	68da      	ldr	r2, [r3, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071a4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80071b4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2201      	movs	r2, #1
 80071ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80071c6:	2300      	movs	r3, #0
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3708      	adds	r7, #8
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	4a40      	ldr	r2, [pc, #256]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d013      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ee:	d00f      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a3d      	ldr	r2, [pc, #244]	; (80072e8 <TIM_Base_SetConfig+0x118>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00b      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a3c      	ldr	r2, [pc, #240]	; (80072ec <TIM_Base_SetConfig+0x11c>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a3b      	ldr	r2, [pc, #236]	; (80072f0 <TIM_Base_SetConfig+0x120>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_Base_SetConfig+0x40>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a3a      	ldr	r2, [pc, #232]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d108      	bne.n	8007222 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007216:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	4313      	orrs	r3, r2
 8007220:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a2f      	ldr	r2, [pc, #188]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d02b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007230:	d027      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a2c      	ldr	r2, [pc, #176]	; (80072e8 <TIM_Base_SetConfig+0x118>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d023      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a2b      	ldr	r2, [pc, #172]	; (80072ec <TIM_Base_SetConfig+0x11c>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d01f      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	4a2a      	ldr	r2, [pc, #168]	; (80072f0 <TIM_Base_SetConfig+0x120>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d01b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a29      	ldr	r2, [pc, #164]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d017      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a28      	ldr	r2, [pc, #160]	; (80072f8 <TIM_Base_SetConfig+0x128>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d013      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <TIM_Base_SetConfig+0x12c>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d00f      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a26      	ldr	r2, [pc, #152]	; (8007300 <TIM_Base_SetConfig+0x130>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d00b      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a25      	ldr	r2, [pc, #148]	; (8007304 <TIM_Base_SetConfig+0x134>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d007      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a24      	ldr	r2, [pc, #144]	; (8007308 <TIM_Base_SetConfig+0x138>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_Base_SetConfig+0xb2>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a23      	ldr	r2, [pc, #140]	; (800730c <TIM_Base_SetConfig+0x13c>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d108      	bne.n	8007294 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007288:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	4313      	orrs	r3, r2
 8007292:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	695b      	ldr	r3, [r3, #20]
 800729e:	4313      	orrs	r3, r2
 80072a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68fa      	ldr	r2, [r7, #12]
 80072a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	689a      	ldr	r2, [r3, #8]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681a      	ldr	r2, [r3, #0]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a0a      	ldr	r2, [pc, #40]	; (80072e4 <TIM_Base_SetConfig+0x114>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d003      	beq.n	80072c8 <TIM_Base_SetConfig+0xf8>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a0c      	ldr	r2, [pc, #48]	; (80072f4 <TIM_Base_SetConfig+0x124>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d103      	bne.n	80072d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	691a      	ldr	r2, [r3, #16]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	615a      	str	r2, [r3, #20]
}
 80072d6:	bf00      	nop
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	40010000 	.word	0x40010000
 80072e8:	40000400 	.word	0x40000400
 80072ec:	40000800 	.word	0x40000800
 80072f0:	40000c00 	.word	0x40000c00
 80072f4:	40010400 	.word	0x40010400
 80072f8:	40014000 	.word	0x40014000
 80072fc:	40014400 	.word	0x40014400
 8007300:	40014800 	.word	0x40014800
 8007304:	40001800 	.word	0x40001800
 8007308:	40001c00 	.word	0x40001c00
 800730c:	40002000 	.word	0x40002000

08007310 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b086      	sub	sp, #24
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800731a:	2300      	movs	r3, #0
 800731c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800732c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	693a      	ldr	r2, [r7, #16]
 8007334:	4313      	orrs	r3, r2
 8007336:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007338:	693a      	ldr	r2, [r7, #16]
 800733a:	4b3e      	ldr	r3, [pc, #248]	; (8007434 <TIM_SlaveTimer_SetConfig+0x124>)
 800733c:	4013      	ands	r3, r2
 800733e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	693a      	ldr	r2, [r7, #16]
 8007346:	4313      	orrs	r3, r2
 8007348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	693a      	ldr	r2, [r7, #16]
 8007350:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	685b      	ldr	r3, [r3, #4]
 8007356:	2b70      	cmp	r3, #112	; 0x70
 8007358:	d01a      	beq.n	8007390 <TIM_SlaveTimer_SetConfig+0x80>
 800735a:	2b70      	cmp	r3, #112	; 0x70
 800735c:	d860      	bhi.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
 800735e:	2b60      	cmp	r3, #96	; 0x60
 8007360:	d054      	beq.n	800740c <TIM_SlaveTimer_SetConfig+0xfc>
 8007362:	2b60      	cmp	r3, #96	; 0x60
 8007364:	d85c      	bhi.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
 8007366:	2b50      	cmp	r3, #80	; 0x50
 8007368:	d046      	beq.n	80073f8 <TIM_SlaveTimer_SetConfig+0xe8>
 800736a:	2b50      	cmp	r3, #80	; 0x50
 800736c:	d858      	bhi.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
 800736e:	2b40      	cmp	r3, #64	; 0x40
 8007370:	d019      	beq.n	80073a6 <TIM_SlaveTimer_SetConfig+0x96>
 8007372:	2b40      	cmp	r3, #64	; 0x40
 8007374:	d854      	bhi.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
 8007376:	2b30      	cmp	r3, #48	; 0x30
 8007378:	d055      	beq.n	8007426 <TIM_SlaveTimer_SetConfig+0x116>
 800737a:	2b30      	cmp	r3, #48	; 0x30
 800737c:	d850      	bhi.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
 800737e:	2b20      	cmp	r3, #32
 8007380:	d051      	beq.n	8007426 <TIM_SlaveTimer_SetConfig+0x116>
 8007382:	2b20      	cmp	r3, #32
 8007384:	d84c      	bhi.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
 8007386:	2b00      	cmp	r3, #0
 8007388:	d04d      	beq.n	8007426 <TIM_SlaveTimer_SetConfig+0x116>
 800738a:	2b10      	cmp	r3, #16
 800738c:	d04b      	beq.n	8007426 <TIM_SlaveTimer_SetConfig+0x116>
 800738e:	e047      	b.n	8007420 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80073a0:	f000 f8a9 	bl	80074f6 <TIM_ETR_SetConfig>
      break;
 80073a4:	e040      	b.n	8007428 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2b05      	cmp	r3, #5
 80073ac:	d101      	bne.n	80073b2 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e03b      	b.n	800742a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6a1a      	ldr	r2, [r3, #32]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f022 0201 	bic.w	r2, r2, #1
 80073c8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80073d8:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	68ba      	ldr	r2, [r7, #8]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68ba      	ldr	r2, [r7, #8]
 80073ec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	621a      	str	r2, [r3, #32]
      break;
 80073f6:	e017      	b.n	8007428 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007404:	461a      	mov	r2, r3
 8007406:	f000 f817 	bl	8007438 <TIM_TI1_ConfigInputStage>
      break;
 800740a:	e00d      	b.n	8007428 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007418:	461a      	mov	r2, r3
 800741a:	f000 f83c 	bl	8007496 <TIM_TI2_ConfigInputStage>
      break;
 800741e:	e003      	b.n	8007428 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	75fb      	strb	r3, [r7, #23]
      break;
 8007424:	e000      	b.n	8007428 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007426:	bf00      	nop
  }

  return status;
 8007428:	7dfb      	ldrb	r3, [r7, #23]
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	fffefff8 	.word	0xfffefff8

08007438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	f023 0201 	bic.w	r2, r3, #1
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	699b      	ldr	r3, [r3, #24]
 800745a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f023 030a 	bic.w	r3, r3, #10
 8007474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	4313      	orrs	r3, r2
 800747c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	697a      	ldr	r2, [r7, #20]
 8007488:	621a      	str	r2, [r3, #32]
}
 800748a:	bf00      	nop
 800748c:	371c      	adds	r7, #28
 800748e:	46bd      	mov	sp, r7
 8007490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007494:	4770      	bx	lr

08007496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007496:	b480      	push	{r7}
 8007498:	b087      	sub	sp, #28
 800749a:	af00      	add	r7, sp, #0
 800749c:	60f8      	str	r0, [r7, #12]
 800749e:	60b9      	str	r1, [r7, #8]
 80074a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	f023 0210 	bic.w	r2, r3, #16
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	699b      	ldr	r3, [r3, #24]
 80074b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80074c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	031b      	lsls	r3, r3, #12
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	4313      	orrs	r3, r2
 80074ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80074d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	697a      	ldr	r2, [r7, #20]
 80074e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr

080074f6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80074f6:	b480      	push	{r7}
 80074f8:	b087      	sub	sp, #28
 80074fa:	af00      	add	r7, sp, #0
 80074fc:	60f8      	str	r0, [r7, #12]
 80074fe:	60b9      	str	r1, [r7, #8]
 8007500:	607a      	str	r2, [r7, #4]
 8007502:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007510:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	021a      	lsls	r2, r3, #8
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	431a      	orrs	r2, r3
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	4313      	orrs	r3, r2
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	609a      	str	r2, [r3, #8]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr
	...

08007538 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800754c:	2302      	movs	r3, #2
 800754e:	e06d      	b.n	800762c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2202      	movs	r2, #2
 800755c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a30      	ldr	r2, [pc, #192]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007576:	4293      	cmp	r3, r2
 8007578:	d004      	beq.n	8007584 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	4a2f      	ldr	r2, [pc, #188]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d108      	bne.n	8007596 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800758a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	68fa      	ldr	r2, [r7, #12]
 8007592:	4313      	orrs	r3, r2
 8007594:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800759c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	4313      	orrs	r3, r2
 80075a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a20      	ldr	r2, [pc, #128]	; (8007638 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d022      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075c2:	d01d      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d018      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d013      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a1a      	ldr	r2, [pc, #104]	; (8007648 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d00e      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a15      	ldr	r2, [pc, #84]	; (800763c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d009      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	4a16      	ldr	r2, [pc, #88]	; (800764c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d004      	beq.n	8007600 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a15      	ldr	r2, [pc, #84]	; (8007650 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d10c      	bne.n	800761a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	4313      	orrs	r3, r2
 8007610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3714      	adds	r7, #20
 8007630:	46bd      	mov	sp, r7
 8007632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007636:	4770      	bx	lr
 8007638:	40010000 	.word	0x40010000
 800763c:	40010400 	.word	0x40010400
 8007640:	40000400 	.word	0x40000400
 8007644:	40000800 	.word	0x40000800
 8007648:	40000c00 	.word	0x40000c00
 800764c:	40014000 	.word	0x40014000
 8007650:	40001800 	.word	0x40001800

08007654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d101      	bne.n	8007666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e040      	b.n	80076e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800766a:	2b00      	cmp	r3, #0
 800766c:	d106      	bne.n	800767c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7f9 ff3a 	bl	80014f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2224      	movs	r2, #36	; 0x24
 8007680:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	681a      	ldr	r2, [r3, #0]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f022 0201 	bic.w	r2, r2, #1
 8007690:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f82c 	bl	80076f0 <UART_SetConfig>
 8007698:	4603      	mov	r3, r0
 800769a:	2b01      	cmp	r3, #1
 800769c:	d101      	bne.n	80076a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e022      	b.n	80076e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d002      	beq.n	80076b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 fa84 	bl	8007bb8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	685a      	ldr	r2, [r3, #4]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80076be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f042 0201 	orr.w	r2, r2, #1
 80076de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fb0b 	bl	8007cfc <UART_CheckIdleState>
 80076e6:	4603      	mov	r3, r0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80076f8:	2300      	movs	r3, #0
 80076fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	689a      	ldr	r2, [r3, #8]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	431a      	orrs	r2, r3
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	695b      	ldr	r3, [r3, #20]
 800770a:	431a      	orrs	r2, r3
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	4313      	orrs	r3, r2
 8007712:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4ba6      	ldr	r3, [pc, #664]	; (80079b4 <UART_SetConfig+0x2c4>)
 800771c:	4013      	ands	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	6812      	ldr	r2, [r2, #0]
 8007722:	6979      	ldr	r1, [r7, #20]
 8007724:	430b      	orrs	r3, r1
 8007726:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	6a1b      	ldr	r3, [r3, #32]
 8007748:	697a      	ldr	r2, [r7, #20]
 800774a:	4313      	orrs	r3, r2
 800774c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	697a      	ldr	r2, [r7, #20]
 800775e:	430a      	orrs	r2, r1
 8007760:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a94      	ldr	r2, [pc, #592]	; (80079b8 <UART_SetConfig+0x2c8>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d120      	bne.n	80077ae <UART_SetConfig+0xbe>
 800776c:	4b93      	ldr	r3, [pc, #588]	; (80079bc <UART_SetConfig+0x2cc>)
 800776e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007772:	f003 0303 	and.w	r3, r3, #3
 8007776:	2b03      	cmp	r3, #3
 8007778:	d816      	bhi.n	80077a8 <UART_SetConfig+0xb8>
 800777a:	a201      	add	r2, pc, #4	; (adr r2, 8007780 <UART_SetConfig+0x90>)
 800777c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007780:	08007791 	.word	0x08007791
 8007784:	0800779d 	.word	0x0800779d
 8007788:	08007797 	.word	0x08007797
 800778c:	080077a3 	.word	0x080077a3
 8007790:	2301      	movs	r3, #1
 8007792:	77fb      	strb	r3, [r7, #31]
 8007794:	e150      	b.n	8007a38 <UART_SetConfig+0x348>
 8007796:	2302      	movs	r3, #2
 8007798:	77fb      	strb	r3, [r7, #31]
 800779a:	e14d      	b.n	8007a38 <UART_SetConfig+0x348>
 800779c:	2304      	movs	r3, #4
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e14a      	b.n	8007a38 <UART_SetConfig+0x348>
 80077a2:	2308      	movs	r3, #8
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e147      	b.n	8007a38 <UART_SetConfig+0x348>
 80077a8:	2310      	movs	r3, #16
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e144      	b.n	8007a38 <UART_SetConfig+0x348>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a83      	ldr	r2, [pc, #524]	; (80079c0 <UART_SetConfig+0x2d0>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d132      	bne.n	800781e <UART_SetConfig+0x12e>
 80077b8:	4b80      	ldr	r3, [pc, #512]	; (80079bc <UART_SetConfig+0x2cc>)
 80077ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077be:	f003 030c 	and.w	r3, r3, #12
 80077c2:	2b0c      	cmp	r3, #12
 80077c4:	d828      	bhi.n	8007818 <UART_SetConfig+0x128>
 80077c6:	a201      	add	r2, pc, #4	; (adr r2, 80077cc <UART_SetConfig+0xdc>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	08007801 	.word	0x08007801
 80077d0:	08007819 	.word	0x08007819
 80077d4:	08007819 	.word	0x08007819
 80077d8:	08007819 	.word	0x08007819
 80077dc:	0800780d 	.word	0x0800780d
 80077e0:	08007819 	.word	0x08007819
 80077e4:	08007819 	.word	0x08007819
 80077e8:	08007819 	.word	0x08007819
 80077ec:	08007807 	.word	0x08007807
 80077f0:	08007819 	.word	0x08007819
 80077f4:	08007819 	.word	0x08007819
 80077f8:	08007819 	.word	0x08007819
 80077fc:	08007813 	.word	0x08007813
 8007800:	2300      	movs	r3, #0
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e118      	b.n	8007a38 <UART_SetConfig+0x348>
 8007806:	2302      	movs	r3, #2
 8007808:	77fb      	strb	r3, [r7, #31]
 800780a:	e115      	b.n	8007a38 <UART_SetConfig+0x348>
 800780c:	2304      	movs	r3, #4
 800780e:	77fb      	strb	r3, [r7, #31]
 8007810:	e112      	b.n	8007a38 <UART_SetConfig+0x348>
 8007812:	2308      	movs	r3, #8
 8007814:	77fb      	strb	r3, [r7, #31]
 8007816:	e10f      	b.n	8007a38 <UART_SetConfig+0x348>
 8007818:	2310      	movs	r3, #16
 800781a:	77fb      	strb	r3, [r7, #31]
 800781c:	e10c      	b.n	8007a38 <UART_SetConfig+0x348>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	4a68      	ldr	r2, [pc, #416]	; (80079c4 <UART_SetConfig+0x2d4>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d120      	bne.n	800786a <UART_SetConfig+0x17a>
 8007828:	4b64      	ldr	r3, [pc, #400]	; (80079bc <UART_SetConfig+0x2cc>)
 800782a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800782e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007832:	2b30      	cmp	r3, #48	; 0x30
 8007834:	d013      	beq.n	800785e <UART_SetConfig+0x16e>
 8007836:	2b30      	cmp	r3, #48	; 0x30
 8007838:	d814      	bhi.n	8007864 <UART_SetConfig+0x174>
 800783a:	2b20      	cmp	r3, #32
 800783c:	d009      	beq.n	8007852 <UART_SetConfig+0x162>
 800783e:	2b20      	cmp	r3, #32
 8007840:	d810      	bhi.n	8007864 <UART_SetConfig+0x174>
 8007842:	2b00      	cmp	r3, #0
 8007844:	d002      	beq.n	800784c <UART_SetConfig+0x15c>
 8007846:	2b10      	cmp	r3, #16
 8007848:	d006      	beq.n	8007858 <UART_SetConfig+0x168>
 800784a:	e00b      	b.n	8007864 <UART_SetConfig+0x174>
 800784c:	2300      	movs	r3, #0
 800784e:	77fb      	strb	r3, [r7, #31]
 8007850:	e0f2      	b.n	8007a38 <UART_SetConfig+0x348>
 8007852:	2302      	movs	r3, #2
 8007854:	77fb      	strb	r3, [r7, #31]
 8007856:	e0ef      	b.n	8007a38 <UART_SetConfig+0x348>
 8007858:	2304      	movs	r3, #4
 800785a:	77fb      	strb	r3, [r7, #31]
 800785c:	e0ec      	b.n	8007a38 <UART_SetConfig+0x348>
 800785e:	2308      	movs	r3, #8
 8007860:	77fb      	strb	r3, [r7, #31]
 8007862:	e0e9      	b.n	8007a38 <UART_SetConfig+0x348>
 8007864:	2310      	movs	r3, #16
 8007866:	77fb      	strb	r3, [r7, #31]
 8007868:	e0e6      	b.n	8007a38 <UART_SetConfig+0x348>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	4a56      	ldr	r2, [pc, #344]	; (80079c8 <UART_SetConfig+0x2d8>)
 8007870:	4293      	cmp	r3, r2
 8007872:	d120      	bne.n	80078b6 <UART_SetConfig+0x1c6>
 8007874:	4b51      	ldr	r3, [pc, #324]	; (80079bc <UART_SetConfig+0x2cc>)
 8007876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800787a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800787e:	2bc0      	cmp	r3, #192	; 0xc0
 8007880:	d013      	beq.n	80078aa <UART_SetConfig+0x1ba>
 8007882:	2bc0      	cmp	r3, #192	; 0xc0
 8007884:	d814      	bhi.n	80078b0 <UART_SetConfig+0x1c0>
 8007886:	2b80      	cmp	r3, #128	; 0x80
 8007888:	d009      	beq.n	800789e <UART_SetConfig+0x1ae>
 800788a:	2b80      	cmp	r3, #128	; 0x80
 800788c:	d810      	bhi.n	80078b0 <UART_SetConfig+0x1c0>
 800788e:	2b00      	cmp	r3, #0
 8007890:	d002      	beq.n	8007898 <UART_SetConfig+0x1a8>
 8007892:	2b40      	cmp	r3, #64	; 0x40
 8007894:	d006      	beq.n	80078a4 <UART_SetConfig+0x1b4>
 8007896:	e00b      	b.n	80078b0 <UART_SetConfig+0x1c0>
 8007898:	2300      	movs	r3, #0
 800789a:	77fb      	strb	r3, [r7, #31]
 800789c:	e0cc      	b.n	8007a38 <UART_SetConfig+0x348>
 800789e:	2302      	movs	r3, #2
 80078a0:	77fb      	strb	r3, [r7, #31]
 80078a2:	e0c9      	b.n	8007a38 <UART_SetConfig+0x348>
 80078a4:	2304      	movs	r3, #4
 80078a6:	77fb      	strb	r3, [r7, #31]
 80078a8:	e0c6      	b.n	8007a38 <UART_SetConfig+0x348>
 80078aa:	2308      	movs	r3, #8
 80078ac:	77fb      	strb	r3, [r7, #31]
 80078ae:	e0c3      	b.n	8007a38 <UART_SetConfig+0x348>
 80078b0:	2310      	movs	r3, #16
 80078b2:	77fb      	strb	r3, [r7, #31]
 80078b4:	e0c0      	b.n	8007a38 <UART_SetConfig+0x348>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a44      	ldr	r2, [pc, #272]	; (80079cc <UART_SetConfig+0x2dc>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d125      	bne.n	800790c <UART_SetConfig+0x21c>
 80078c0:	4b3e      	ldr	r3, [pc, #248]	; (80079bc <UART_SetConfig+0x2cc>)
 80078c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078ce:	d017      	beq.n	8007900 <UART_SetConfig+0x210>
 80078d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80078d4:	d817      	bhi.n	8007906 <UART_SetConfig+0x216>
 80078d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078da:	d00b      	beq.n	80078f4 <UART_SetConfig+0x204>
 80078dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80078e0:	d811      	bhi.n	8007906 <UART_SetConfig+0x216>
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <UART_SetConfig+0x1fe>
 80078e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078ea:	d006      	beq.n	80078fa <UART_SetConfig+0x20a>
 80078ec:	e00b      	b.n	8007906 <UART_SetConfig+0x216>
 80078ee:	2300      	movs	r3, #0
 80078f0:	77fb      	strb	r3, [r7, #31]
 80078f2:	e0a1      	b.n	8007a38 <UART_SetConfig+0x348>
 80078f4:	2302      	movs	r3, #2
 80078f6:	77fb      	strb	r3, [r7, #31]
 80078f8:	e09e      	b.n	8007a38 <UART_SetConfig+0x348>
 80078fa:	2304      	movs	r3, #4
 80078fc:	77fb      	strb	r3, [r7, #31]
 80078fe:	e09b      	b.n	8007a38 <UART_SetConfig+0x348>
 8007900:	2308      	movs	r3, #8
 8007902:	77fb      	strb	r3, [r7, #31]
 8007904:	e098      	b.n	8007a38 <UART_SetConfig+0x348>
 8007906:	2310      	movs	r3, #16
 8007908:	77fb      	strb	r3, [r7, #31]
 800790a:	e095      	b.n	8007a38 <UART_SetConfig+0x348>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <UART_SetConfig+0x2e0>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d125      	bne.n	8007962 <UART_SetConfig+0x272>
 8007916:	4b29      	ldr	r3, [pc, #164]	; (80079bc <UART_SetConfig+0x2cc>)
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007920:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007924:	d017      	beq.n	8007956 <UART_SetConfig+0x266>
 8007926:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800792a:	d817      	bhi.n	800795c <UART_SetConfig+0x26c>
 800792c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007930:	d00b      	beq.n	800794a <UART_SetConfig+0x25a>
 8007932:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007936:	d811      	bhi.n	800795c <UART_SetConfig+0x26c>
 8007938:	2b00      	cmp	r3, #0
 800793a:	d003      	beq.n	8007944 <UART_SetConfig+0x254>
 800793c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007940:	d006      	beq.n	8007950 <UART_SetConfig+0x260>
 8007942:	e00b      	b.n	800795c <UART_SetConfig+0x26c>
 8007944:	2301      	movs	r3, #1
 8007946:	77fb      	strb	r3, [r7, #31]
 8007948:	e076      	b.n	8007a38 <UART_SetConfig+0x348>
 800794a:	2302      	movs	r3, #2
 800794c:	77fb      	strb	r3, [r7, #31]
 800794e:	e073      	b.n	8007a38 <UART_SetConfig+0x348>
 8007950:	2304      	movs	r3, #4
 8007952:	77fb      	strb	r3, [r7, #31]
 8007954:	e070      	b.n	8007a38 <UART_SetConfig+0x348>
 8007956:	2308      	movs	r3, #8
 8007958:	77fb      	strb	r3, [r7, #31]
 800795a:	e06d      	b.n	8007a38 <UART_SetConfig+0x348>
 800795c:	2310      	movs	r3, #16
 800795e:	77fb      	strb	r3, [r7, #31]
 8007960:	e06a      	b.n	8007a38 <UART_SetConfig+0x348>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a1b      	ldr	r2, [pc, #108]	; (80079d4 <UART_SetConfig+0x2e4>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d138      	bne.n	80079de <UART_SetConfig+0x2ee>
 800796c:	4b13      	ldr	r3, [pc, #76]	; (80079bc <UART_SetConfig+0x2cc>)
 800796e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007972:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007976:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800797a:	d017      	beq.n	80079ac <UART_SetConfig+0x2bc>
 800797c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007980:	d82a      	bhi.n	80079d8 <UART_SetConfig+0x2e8>
 8007982:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007986:	d00b      	beq.n	80079a0 <UART_SetConfig+0x2b0>
 8007988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798c:	d824      	bhi.n	80079d8 <UART_SetConfig+0x2e8>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <UART_SetConfig+0x2aa>
 8007992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007996:	d006      	beq.n	80079a6 <UART_SetConfig+0x2b6>
 8007998:	e01e      	b.n	80079d8 <UART_SetConfig+0x2e8>
 800799a:	2300      	movs	r3, #0
 800799c:	77fb      	strb	r3, [r7, #31]
 800799e:	e04b      	b.n	8007a38 <UART_SetConfig+0x348>
 80079a0:	2302      	movs	r3, #2
 80079a2:	77fb      	strb	r3, [r7, #31]
 80079a4:	e048      	b.n	8007a38 <UART_SetConfig+0x348>
 80079a6:	2304      	movs	r3, #4
 80079a8:	77fb      	strb	r3, [r7, #31]
 80079aa:	e045      	b.n	8007a38 <UART_SetConfig+0x348>
 80079ac:	2308      	movs	r3, #8
 80079ae:	77fb      	strb	r3, [r7, #31]
 80079b0:	e042      	b.n	8007a38 <UART_SetConfig+0x348>
 80079b2:	bf00      	nop
 80079b4:	efff69f3 	.word	0xefff69f3
 80079b8:	40011000 	.word	0x40011000
 80079bc:	40023800 	.word	0x40023800
 80079c0:	40004400 	.word	0x40004400
 80079c4:	40004800 	.word	0x40004800
 80079c8:	40004c00 	.word	0x40004c00
 80079cc:	40005000 	.word	0x40005000
 80079d0:	40011400 	.word	0x40011400
 80079d4:	40007800 	.word	0x40007800
 80079d8:	2310      	movs	r3, #16
 80079da:	77fb      	strb	r3, [r7, #31]
 80079dc:	e02c      	b.n	8007a38 <UART_SetConfig+0x348>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a72      	ldr	r2, [pc, #456]	; (8007bac <UART_SetConfig+0x4bc>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d125      	bne.n	8007a34 <UART_SetConfig+0x344>
 80079e8:	4b71      	ldr	r3, [pc, #452]	; (8007bb0 <UART_SetConfig+0x4c0>)
 80079ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079f6:	d017      	beq.n	8007a28 <UART_SetConfig+0x338>
 80079f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80079fc:	d817      	bhi.n	8007a2e <UART_SetConfig+0x33e>
 80079fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a02:	d00b      	beq.n	8007a1c <UART_SetConfig+0x32c>
 8007a04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a08:	d811      	bhi.n	8007a2e <UART_SetConfig+0x33e>
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d003      	beq.n	8007a16 <UART_SetConfig+0x326>
 8007a0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a12:	d006      	beq.n	8007a22 <UART_SetConfig+0x332>
 8007a14:	e00b      	b.n	8007a2e <UART_SetConfig+0x33e>
 8007a16:	2300      	movs	r3, #0
 8007a18:	77fb      	strb	r3, [r7, #31]
 8007a1a:	e00d      	b.n	8007a38 <UART_SetConfig+0x348>
 8007a1c:	2302      	movs	r3, #2
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e00a      	b.n	8007a38 <UART_SetConfig+0x348>
 8007a22:	2304      	movs	r3, #4
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e007      	b.n	8007a38 <UART_SetConfig+0x348>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e004      	b.n	8007a38 <UART_SetConfig+0x348>
 8007a2e:	2310      	movs	r3, #16
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e001      	b.n	8007a38 <UART_SetConfig+0x348>
 8007a34:	2310      	movs	r3, #16
 8007a36:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	69db      	ldr	r3, [r3, #28]
 8007a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a40:	d15b      	bne.n	8007afa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007a42:	7ffb      	ldrb	r3, [r7, #31]
 8007a44:	2b08      	cmp	r3, #8
 8007a46:	d828      	bhi.n	8007a9a <UART_SetConfig+0x3aa>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <UART_SetConfig+0x360>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a75 	.word	0x08007a75
 8007a54:	08007a7d 	.word	0x08007a7d
 8007a58:	08007a85 	.word	0x08007a85
 8007a5c:	08007a9b 	.word	0x08007a9b
 8007a60:	08007a8b 	.word	0x08007a8b
 8007a64:	08007a9b 	.word	0x08007a9b
 8007a68:	08007a9b 	.word	0x08007a9b
 8007a6c:	08007a9b 	.word	0x08007a9b
 8007a70:	08007a93 	.word	0x08007a93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a74:	f7fe f8f8 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8007a78:	61b8      	str	r0, [r7, #24]
        break;
 8007a7a:	e013      	b.n	8007aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a7c:	f7fe f908 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8007a80:	61b8      	str	r0, [r7, #24]
        break;
 8007a82:	e00f      	b.n	8007aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a84:	4b4b      	ldr	r3, [pc, #300]	; (8007bb4 <UART_SetConfig+0x4c4>)
 8007a86:	61bb      	str	r3, [r7, #24]
        break;
 8007a88:	e00c      	b.n	8007aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a8a:	f7fd ffdd 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8007a8e:	61b8      	str	r0, [r7, #24]
        break;
 8007a90:	e008      	b.n	8007aa4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a96:	61bb      	str	r3, [r7, #24]
        break;
 8007a98:	e004      	b.n	8007aa4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	77bb      	strb	r3, [r7, #30]
        break;
 8007aa2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d074      	beq.n	8007b94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	005a      	lsls	r2, r3, #1
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	085b      	lsrs	r3, r3, #1
 8007ab4:	441a      	add	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8007abe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac0:	693b      	ldr	r3, [r7, #16]
 8007ac2:	2b0f      	cmp	r3, #15
 8007ac4:	d916      	bls.n	8007af4 <UART_SetConfig+0x404>
 8007ac6:	693b      	ldr	r3, [r7, #16]
 8007ac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007acc:	d212      	bcs.n	8007af4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	b29b      	uxth	r3, r3
 8007ad2:	f023 030f 	bic.w	r3, r3, #15
 8007ad6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	085b      	lsrs	r3, r3, #1
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	f003 0307 	and.w	r3, r3, #7
 8007ae2:	b29a      	uxth	r2, r3
 8007ae4:	89fb      	ldrh	r3, [r7, #14]
 8007ae6:	4313      	orrs	r3, r2
 8007ae8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	89fa      	ldrh	r2, [r7, #14]
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	e04f      	b.n	8007b94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007af4:	2301      	movs	r3, #1
 8007af6:	77bb      	strb	r3, [r7, #30]
 8007af8:	e04c      	b.n	8007b94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007afa:	7ffb      	ldrb	r3, [r7, #31]
 8007afc:	2b08      	cmp	r3, #8
 8007afe:	d828      	bhi.n	8007b52 <UART_SetConfig+0x462>
 8007b00:	a201      	add	r2, pc, #4	; (adr r2, 8007b08 <UART_SetConfig+0x418>)
 8007b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b06:	bf00      	nop
 8007b08:	08007b2d 	.word	0x08007b2d
 8007b0c:	08007b35 	.word	0x08007b35
 8007b10:	08007b3d 	.word	0x08007b3d
 8007b14:	08007b53 	.word	0x08007b53
 8007b18:	08007b43 	.word	0x08007b43
 8007b1c:	08007b53 	.word	0x08007b53
 8007b20:	08007b53 	.word	0x08007b53
 8007b24:	08007b53 	.word	0x08007b53
 8007b28:	08007b4b 	.word	0x08007b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b2c:	f7fe f89c 	bl	8005c68 <HAL_RCC_GetPCLK1Freq>
 8007b30:	61b8      	str	r0, [r7, #24]
        break;
 8007b32:	e013      	b.n	8007b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b34:	f7fe f8ac 	bl	8005c90 <HAL_RCC_GetPCLK2Freq>
 8007b38:	61b8      	str	r0, [r7, #24]
        break;
 8007b3a:	e00f      	b.n	8007b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b3c:	4b1d      	ldr	r3, [pc, #116]	; (8007bb4 <UART_SetConfig+0x4c4>)
 8007b3e:	61bb      	str	r3, [r7, #24]
        break;
 8007b40:	e00c      	b.n	8007b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b42:	f7fd ff81 	bl	8005a48 <HAL_RCC_GetSysClockFreq>
 8007b46:	61b8      	str	r0, [r7, #24]
        break;
 8007b48:	e008      	b.n	8007b5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4e:	61bb      	str	r3, [r7, #24]
        break;
 8007b50:	e004      	b.n	8007b5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007b52:	2300      	movs	r3, #0
 8007b54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	77bb      	strb	r3, [r7, #30]
        break;
 8007b5a:	bf00      	nop
    }

    if (pclk != 0U)
 8007b5c:	69bb      	ldr	r3, [r7, #24]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d018      	beq.n	8007b94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	085a      	lsrs	r2, r3, #1
 8007b68:	69bb      	ldr	r3, [r7, #24]
 8007b6a:	441a      	add	r2, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	2b0f      	cmp	r3, #15
 8007b7a:	d909      	bls.n	8007b90 <UART_SetConfig+0x4a0>
 8007b7c:	693b      	ldr	r3, [r7, #16]
 8007b7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b82:	d205      	bcs.n	8007b90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	b29a      	uxth	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	e001      	b.n	8007b94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007b90:	2301      	movs	r3, #1
 8007b92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007ba0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3720      	adds	r7, #32
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	40007c00 	.word	0x40007c00
 8007bb0:	40023800 	.word	0x40023800
 8007bb4:	00f42400 	.word	0x00f42400

08007bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	f003 0302 	and.w	r3, r3, #2
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	430a      	orrs	r2, r1
 8007c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c08:	f003 0304 	and.w	r3, r3, #4
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	430a      	orrs	r2, r1
 8007c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2a:	f003 0308 	and.w	r3, r3, #8
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	430a      	orrs	r2, r1
 8007c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c6e:	f003 0320 	and.w	r3, r3, #32
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	430a      	orrs	r2, r1
 8007c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d01a      	beq.n	8007cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	430a      	orrs	r2, r1
 8007cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007cb6:	d10a      	bne.n	8007cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	430a      	orrs	r2, r1
 8007ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	605a      	str	r2, [r3, #4]
  }
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b086      	sub	sp, #24
 8007d00:	af02      	add	r7, sp, #8
 8007d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007d0c:	f7fa fe12 	bl	8002934 <HAL_GetTick>
 8007d10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f003 0308 	and.w	r3, r3, #8
 8007d1c:	2b08      	cmp	r3, #8
 8007d1e:	d10e      	bne.n	8007d3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d24:	9300      	str	r3, [sp, #0]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f81b 	bl	8007d6a <UART_WaitOnFlagUntilTimeout>
 8007d34:	4603      	mov	r3, r0
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d001      	beq.n	8007d3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d3a:	2303      	movs	r3, #3
 8007d3c:	e011      	b.n	8007d62 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2220      	movs	r2, #32
 8007d42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2220      	movs	r2, #32
 8007d48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007d60:	2300      	movs	r3, #0
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3710      	adds	r7, #16
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}

08007d6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d6a:	b580      	push	{r7, lr}
 8007d6c:	b09c      	sub	sp, #112	; 0x70
 8007d6e:	af00      	add	r7, sp, #0
 8007d70:	60f8      	str	r0, [r7, #12]
 8007d72:	60b9      	str	r1, [r7, #8]
 8007d74:	603b      	str	r3, [r7, #0]
 8007d76:	4613      	mov	r3, r2
 8007d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d7a:	e0a7      	b.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d82:	f000 80a3 	beq.w	8007ecc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d86:	f7fa fdd5 	bl	8002934 <HAL_GetTick>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	1ad3      	subs	r3, r2, r3
 8007d90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d302      	bcc.n	8007d9c <UART_WaitOnFlagUntilTimeout+0x32>
 8007d96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d13f      	bne.n	8007e1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007da4:	e853 3f00 	ldrex	r3, [r3]
 8007da8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007db0:	667b      	str	r3, [r7, #100]	; 0x64
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	461a      	mov	r2, r3
 8007db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007dbc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007dc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007dc2:	e841 2300 	strex	r3, r2, [r1]
 8007dc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d1e6      	bne.n	8007d9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	3308      	adds	r3, #8
 8007dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dd8:	e853 3f00 	ldrex	r3, [r3]
 8007ddc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	f023 0301 	bic.w	r3, r3, #1
 8007de4:	663b      	str	r3, [r7, #96]	; 0x60
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dee:	64ba      	str	r2, [r7, #72]	; 0x48
 8007df0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e5      	bne.n	8007dce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2220      	movs	r2, #32
 8007e06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2220      	movs	r2, #32
 8007e0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	2200      	movs	r2, #0
 8007e14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007e18:	2303      	movs	r3, #3
 8007e1a:	e068      	b.n	8007eee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0304 	and.w	r3, r3, #4
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d050      	beq.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	69db      	ldr	r3, [r3, #28]
 8007e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e38:	d148      	bne.n	8007ecc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e4c:	e853 3f00 	ldrex	r3, [r3]
 8007e50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	461a      	mov	r2, r3
 8007e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e62:	637b      	str	r3, [r7, #52]	; 0x34
 8007e64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e6a:	e841 2300 	strex	r3, r2, [r1]
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d1e6      	bne.n	8007e44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	3308      	adds	r3, #8
 8007e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	e853 3f00 	ldrex	r3, [r3]
 8007e84:	613b      	str	r3, [r7, #16]
   return(result);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f023 0301 	bic.w	r3, r3, #1
 8007e8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e96:	623a      	str	r2, [r7, #32]
 8007e98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e9a:	69f9      	ldr	r1, [r7, #28]
 8007e9c:	6a3a      	ldr	r2, [r7, #32]
 8007e9e:	e841 2300 	strex	r3, r2, [r1]
 8007ea2:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ea4:	69bb      	ldr	r3, [r7, #24]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d1e5      	bne.n	8007e76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	2220      	movs	r2, #32
 8007eae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2220      	movs	r2, #32
 8007eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	2220      	movs	r2, #32
 8007ebc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ec8:	2303      	movs	r3, #3
 8007eca:	e010      	b.n	8007eee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	69da      	ldr	r2, [r3, #28]
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	68ba      	ldr	r2, [r7, #8]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	bf0c      	ite	eq
 8007edc:	2301      	moveq	r3, #1
 8007ede:	2300      	movne	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	f43f af48 	beq.w	8007d7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eec:	2300      	movs	r3, #0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3770      	adds	r7, #112	; 0x70
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b087      	sub	sp, #28
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8007f02:	683b      	ldr	r3, [r7, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	6812      	ldr	r2, [r2, #0]
 8007f10:	f023 0101 	bic.w	r1, r3, #1
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d102      	bne.n	8007f28 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8007f22:	2340      	movs	r3, #64	; 0x40
 8007f24:	617b      	str	r3, [r7, #20]
 8007f26:	e001      	b.n	8007f2c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8007f38:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8007f3e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8007f44:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8007f46:	683b      	ldr	r3, [r7, #0]
 8007f48:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8007f4a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8007f50:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8007f56:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8007f58:	683b      	ldr	r3, [r7, #0]
 8007f5a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8007f5c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8007f62:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8007f68:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f76:	693a      	ldr	r2, [r7, #16]
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	4313      	orrs	r3, r2
 8007f84:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8007f90:	4b20      	ldr	r3, [pc, #128]	; (8008014 <FMC_NORSRAM_Init+0x11c>)
 8007f92:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007f9a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fa2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8007faa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	43db      	mvns	r3, r3
 8007fba:	ea02 0103 	and.w	r1, r2, r3
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	4319      	orrs	r1, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fd4:	d10c      	bne.n	8007ff0 <FMC_NORSRAM_Init+0xf8>
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d008      	beq.n	8007ff0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d006      	beq.n	8008006 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008000:	431a      	orrs	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008006:	2300      	movs	r3, #0
}
 8008008:	4618      	mov	r0, r3
 800800a:	371c      	adds	r7, #28
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr
 8008014:	0008fb7f 	.word	0x0008fb7f

08008018 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008018:	b480      	push	{r7}
 800801a:	b087      	sub	sp, #28
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	1c5a      	adds	r2, r3, #1
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800802e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	011b      	lsls	r3, r3, #4
 800803c:	431a      	orrs	r2, r3
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	021b      	lsls	r3, r3, #8
 8008044:	431a      	orrs	r2, r3
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	68db      	ldr	r3, [r3, #12]
 800804a:	041b      	lsls	r3, r3, #16
 800804c:	431a      	orrs	r2, r3
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	3b01      	subs	r3, #1
 8008054:	051b      	lsls	r3, r3, #20
 8008056:	431a      	orrs	r2, r3
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	695b      	ldr	r3, [r3, #20]
 800805c:	3b02      	subs	r3, #2
 800805e:	061b      	lsls	r3, r3, #24
 8008060:	431a      	orrs	r2, r3
 8008062:	68bb      	ldr	r3, [r7, #8]
 8008064:	699b      	ldr	r3, [r3, #24]
 8008066:	4313      	orrs	r3, r2
 8008068:	687a      	ldr	r2, [r7, #4]
 800806a:	3201      	adds	r2, #1
 800806c:	4319      	orrs	r1, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800807c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008080:	d113      	bne.n	80080aa <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800808a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800808c:	68bb      	ldr	r3, [r7, #8]
 800808e:	691b      	ldr	r3, [r3, #16]
 8008090:	3b01      	subs	r3, #1
 8008092:	051b      	lsls	r3, r3, #20
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	685b      	ldr	r3, [r3, #4]
 800809e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	431a      	orrs	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	371c      	adds	r7, #28
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr

080080b8 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	60f8      	str	r0, [r7, #12]
 80080c0:	60b9      	str	r1, [r7, #8]
 80080c2:	607a      	str	r2, [r7, #4]
 80080c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080cc:	d11d      	bne.n	800810a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80080d6:	4b13      	ldr	r3, [pc, #76]	; (8008124 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80080d8:	4013      	ands	r3, r2
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	6811      	ldr	r1, [r2, #0]
 80080de:	68ba      	ldr	r2, [r7, #8]
 80080e0:	6852      	ldr	r2, [r2, #4]
 80080e2:	0112      	lsls	r2, r2, #4
 80080e4:	4311      	orrs	r1, r2
 80080e6:	68ba      	ldr	r2, [r7, #8]
 80080e8:	6892      	ldr	r2, [r2, #8]
 80080ea:	0212      	lsls	r2, r2, #8
 80080ec:	4311      	orrs	r1, r2
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	6992      	ldr	r2, [r2, #24]
 80080f2:	4311      	orrs	r1, r2
 80080f4:	68ba      	ldr	r2, [r7, #8]
 80080f6:	68d2      	ldr	r2, [r2, #12]
 80080f8:	0412      	lsls	r2, r2, #16
 80080fa:	430a      	orrs	r2, r1
 80080fc:	ea43 0102 	orr.w	r1, r3, r2
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8008108:	e005      	b.n	8008116 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	687a      	ldr	r2, [r7, #4]
 800810e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8008112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr
 8008124:	cff00000 	.word	0xcff00000

08008128 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008128:	b084      	sub	sp, #16
 800812a:	b480      	push	{r7}
 800812c:	b085      	sub	sp, #20
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
 8008132:	f107 001c 	add.w	r0, r7, #28
 8008136:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800813a:	2300      	movs	r3, #0
 800813c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800813e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008140:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8008142:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8008144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8008146:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008148:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800814a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800814c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800814e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8008152:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8008154:	68fa      	ldr	r2, [r7, #12]
 8008156:	4313      	orrs	r3, r2
 8008158:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	685a      	ldr	r2, [r3, #4]
 800815e:	4b07      	ldr	r3, [pc, #28]	; (800817c <SDMMC_Init+0x54>)
 8008160:	4013      	ands	r3, r2
 8008162:	68fa      	ldr	r2, [r7, #12]
 8008164:	431a      	orrs	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800816a:	2300      	movs	r3, #0
}
 800816c:	4618      	mov	r0, r3
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	b004      	add	sp, #16
 8008178:	4770      	bx	lr
 800817a:	bf00      	nop
 800817c:	ffff8100 	.word	0xffff8100

08008180 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800818e:	4618      	mov	r0, r3
 8008190:	370c      	adds	r7, #12
 8008192:	46bd      	mov	sp, r7
 8008194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008198:	4770      	bx	lr

0800819a <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800819a:	b480      	push	{r7}
 800819c:	b083      	sub	sp, #12
 800819e:	af00      	add	r7, sp, #0
 80081a0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2203      	movs	r2, #3
 80081a6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	370c      	adds	r7, #12
 80081ae:	46bd      	mov	sp, r7
 80081b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b4:	4770      	bx	lr

080081b6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80081b6:	b480      	push	{r7}
 80081b8:	b083      	sub	sp, #12
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0303 	and.w	r3, r3, #3
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	370c      	adds	r7, #12
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
	...

080081d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80081f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80081f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80081fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008200:	68fa      	ldr	r2, [r7, #12]
 8008202:	4313      	orrs	r3, r2
 8008204:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	4b06      	ldr	r3, [pc, #24]	; (8008224 <SDMMC_SendCommand+0x50>)
 800820c:	4013      	ands	r3, r2
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	431a      	orrs	r2, r3
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008216:	2300      	movs	r3, #0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3714      	adds	r7, #20
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr
 8008224:	fffff000 	.word	0xfffff000

08008228 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008228:	b480      	push	{r7}
 800822a:	b083      	sub	sp, #12
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	691b      	ldr	r3, [r3, #16]
 8008234:	b2db      	uxtb	r3, r3
}
 8008236:	4618      	mov	r0, r3
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008242:	b480      	push	{r7}
 8008244:	b085      	sub	sp, #20
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	3314      	adds	r3, #20
 8008250:	461a      	mov	r2, r3
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	4413      	add	r3, r2
 8008256:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
}  
 800825c:	4618      	mov	r0, r3
 800825e:	3714      	adds	r7, #20
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008272:	2300      	movs	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681a      	ldr	r2, [r3, #0]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800828e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008294:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800829a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	4313      	orrs	r3, r2
 80082a0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80082b2:	2300      	movs	r3, #0

}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3714      	adds	r7, #20
 80082b8:	46bd      	mov	sp, r7
 80082ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082be:	4770      	bx	lr

080082c0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
 80082c8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80082ce:	2310      	movs	r3, #16
 80082d0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80082d2:	2340      	movs	r3, #64	; 0x40
 80082d4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80082d6:	2300      	movs	r3, #0
 80082d8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80082da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80082de:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80082e0:	f107 0308 	add.w	r3, r7, #8
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f7ff ff74 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80082ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f0:	2110      	movs	r1, #16
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f94e 	bl	8008594 <SDMMC_GetCmdResp1>
 80082f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082fa:	69fb      	ldr	r3, [r7, #28]
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08a      	sub	sp, #40	; 0x28
 8008308:	af00      	add	r7, sp, #0
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008314:	2307      	movs	r3, #7
 8008316:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008318:	2340      	movs	r3, #64	; 0x40
 800831a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800831c:	2300      	movs	r3, #0
 800831e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008324:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008326:	f107 0310 	add.w	r3, r7, #16
 800832a:	4619      	mov	r1, r3
 800832c:	68f8      	ldr	r0, [r7, #12]
 800832e:	f7ff ff51 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008332:	f241 3288 	movw	r2, #5000	; 0x1388
 8008336:	2107      	movs	r1, #7
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f000 f92b 	bl	8008594 <SDMMC_GetCmdResp1>
 800833e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8008340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008342:	4618      	mov	r0, r3
 8008344:	3728      	adds	r7, #40	; 0x28
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}

0800834a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b088      	sub	sp, #32
 800834e:	af00      	add	r7, sp, #0
 8008350:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8008352:	2300      	movs	r3, #0
 8008354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008356:	2300      	movs	r3, #0
 8008358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800835a:	2300      	movs	r3, #0
 800835c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008366:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008368:	f107 0308 	add.w	r3, r7, #8
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff ff30 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 fb45 	bl	8008a04 <SDMMC_GetCmdError>
 800837a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800837c:	69fb      	ldr	r3, [r7, #28]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3720      	adds	r7, #32
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008386:	b580      	push	{r7, lr}
 8008388:	b088      	sub	sp, #32
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800838e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008394:	2308      	movs	r3, #8
 8008396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008398:	2340      	movs	r3, #64	; 0x40
 800839a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800839c:	2300      	movs	r3, #0
 800839e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083a6:	f107 0308 	add.w	r3, r7, #8
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f7ff ff11 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80083b2:	6878      	ldr	r0, [r7, #4]
 80083b4:	f000 fad8 	bl	8008968 <SDMMC_GetCmdResp7>
 80083b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083ba:	69fb      	ldr	r3, [r7, #28]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b088      	sub	sp, #32
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80083d2:	2337      	movs	r3, #55	; 0x37
 80083d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80083d6:	2340      	movs	r3, #64	; 0x40
 80083d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80083da:	2300      	movs	r3, #0
 80083dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80083de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083e2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80083e4:	f107 0308 	add.w	r3, r7, #8
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff fef2 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80083f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f4:	2137      	movs	r1, #55	; 0x37
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f000 f8cc 	bl	8008594 <SDMMC_GetCmdResp1>
 80083fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083fe:	69fb      	ldr	r3, [r7, #28]
}
 8008400:	4618      	mov	r0, r3
 8008402:	3720      	adds	r7, #32
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008408:	b580      	push	{r7, lr}
 800840a:	b088      	sub	sp, #32
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008412:	683a      	ldr	r2, [r7, #0]
 8008414:	4b0d      	ldr	r3, [pc, #52]	; (800844c <SDMMC_CmdAppOperCommand+0x44>)
 8008416:	4313      	orrs	r3, r2
 8008418:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800841a:	2329      	movs	r3, #41	; 0x29
 800841c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800841e:	2340      	movs	r3, #64	; 0x40
 8008420:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008422:	2300      	movs	r3, #0
 8008424:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008426:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800842a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800842c:	f107 0308 	add.w	r3, r7, #8
 8008430:	4619      	mov	r1, r3
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7ff fece 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8008438:	6878      	ldr	r0, [r7, #4]
 800843a:	f000 f9e1 	bl	8008800 <SDMMC_GetCmdResp3>
 800843e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008440:	69fb      	ldr	r3, [r7, #28]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3720      	adds	r7, #32
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	80100000 	.word	0x80100000

08008450 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b088      	sub	sp, #32
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800845e:	2306      	movs	r3, #6
 8008460:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008462:	2340      	movs	r3, #64	; 0x40
 8008464:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800846a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800846e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008470:	f107 0308 	add.w	r3, r7, #8
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff feac 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800847c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008480:	2106      	movs	r1, #6
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f886 	bl	8008594 <SDMMC_GetCmdResp1>
 8008488:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800848a:	69fb      	ldr	r3, [r7, #28]
}
 800848c:	4618      	mov	r0, r3
 800848e:	3720      	adds	r7, #32
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b088      	sub	sp, #32
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800849c:	2300      	movs	r3, #0
 800849e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80084a0:	2333      	movs	r3, #51	; 0x33
 80084a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80084a4:	2340      	movs	r3, #64	; 0x40
 80084a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084a8:	2300      	movs	r3, #0
 80084aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084b2:	f107 0308 	add.w	r3, r7, #8
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7ff fe8b 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80084be:	f241 3288 	movw	r2, #5000	; 0x1388
 80084c2:	2133      	movs	r1, #51	; 0x33
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f000 f865 	bl	8008594 <SDMMC_GetCmdResp1>
 80084ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084cc:	69fb      	ldr	r3, [r7, #28]
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3720      	adds	r7, #32
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}

080084d6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80084d6:	b580      	push	{r7, lr}
 80084d8:	b088      	sub	sp, #32
 80084da:	af00      	add	r7, sp, #0
 80084dc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80084e2:	2302      	movs	r3, #2
 80084e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80084e6:	23c0      	movs	r3, #192	; 0xc0
 80084e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80084ea:	2300      	movs	r3, #0
 80084ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80084ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084f2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80084f4:	f107 0308 	add.w	r3, r7, #8
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f7ff fe6a 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 f935 	bl	8008770 <SDMMC_GetCmdResp2>
 8008506:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008508:	69fb      	ldr	r3, [r7, #28]
}
 800850a:	4618      	mov	r0, r3
 800850c:	3720      	adds	r7, #32
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}

08008512 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b088      	sub	sp, #32
 8008516:	af00      	add	r7, sp, #0
 8008518:	6078      	str	r0, [r7, #4]
 800851a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008520:	2309      	movs	r3, #9
 8008522:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8008524:	23c0      	movs	r3, #192	; 0xc0
 8008526:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800852c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008530:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008532:	f107 0308 	add.w	r3, r7, #8
 8008536:	4619      	mov	r1, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f7ff fe4b 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f916 	bl	8008770 <SDMMC_GetCmdResp2>
 8008544:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008546:	69fb      	ldr	r3, [r7, #28]
}
 8008548:	4618      	mov	r0, r3
 800854a:	3720      	adds	r7, #32
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}

08008550 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b088      	sub	sp, #32
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800855a:	2300      	movs	r3, #0
 800855c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800855e:	2303      	movs	r3, #3
 8008560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008562:	2340      	movs	r3, #64	; 0x40
 8008564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008566:	2300      	movs	r3, #0
 8008568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800856a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800856e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008570:	f107 0308 	add.w	r3, r7, #8
 8008574:	4619      	mov	r1, r3
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7ff fe2c 	bl	80081d4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	2103      	movs	r1, #3
 8008580:	6878      	ldr	r0, [r7, #4]
 8008582:	f000 f97b 	bl	800887c <SDMMC_GetCmdResp6>
 8008586:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008588:	69fb      	ldr	r3, [r7, #28]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3720      	adds	r7, #32
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
	...

08008594 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b088      	sub	sp, #32
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	460b      	mov	r3, r1
 800859e:	607a      	str	r2, [r7, #4]
 80085a0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80085a2:	4b70      	ldr	r3, [pc, #448]	; (8008764 <SDMMC_GetCmdResp1+0x1d0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a70      	ldr	r2, [pc, #448]	; (8008768 <SDMMC_GetCmdResp1+0x1d4>)
 80085a8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ac:	0a5a      	lsrs	r2, r3, #9
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	fb02 f303 	mul.w	r3, r2, r3
 80085b4:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80085b6:	69fb      	ldr	r3, [r7, #28]
 80085b8:	1e5a      	subs	r2, r3, #1
 80085ba:	61fa      	str	r2, [r7, #28]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d102      	bne.n	80085c6 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80085c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80085c4:	e0c9      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ca:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d0ef      	beq.n	80085b6 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80085d6:	69bb      	ldr	r3, [r7, #24]
 80085d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d1ea      	bne.n	80085b6 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e4:	f003 0304 	and.w	r3, r3, #4
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2204      	movs	r2, #4
 80085f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80085f2:	2304      	movs	r3, #4
 80085f4:	e0b1      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d004      	beq.n	800860c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2201      	movs	r2, #1
 8008606:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008608:	2301      	movs	r3, #1
 800860a:	e0a6      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	22c5      	movs	r2, #197	; 0xc5
 8008610:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8008612:	68f8      	ldr	r0, [r7, #12]
 8008614:	f7ff fe08 	bl	8008228 <SDMMC_GetCommandResponse>
 8008618:	4603      	mov	r3, r0
 800861a:	461a      	mov	r2, r3
 800861c:	7afb      	ldrb	r3, [r7, #11]
 800861e:	4293      	cmp	r3, r2
 8008620:	d001      	beq.n	8008626 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008622:	2301      	movs	r3, #1
 8008624:	e099      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008626:	2100      	movs	r1, #0
 8008628:	68f8      	ldr	r0, [r7, #12]
 800862a:	f7ff fe0a 	bl	8008242 <SDMMC_GetResponse>
 800862e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	4b4e      	ldr	r3, [pc, #312]	; (800876c <SDMMC_GetCmdResp1+0x1d8>)
 8008634:	4013      	ands	r3, r2
 8008636:	2b00      	cmp	r3, #0
 8008638:	d101      	bne.n	800863e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800863a:	2300      	movs	r3, #0
 800863c:	e08d      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	2b00      	cmp	r3, #0
 8008642:	da02      	bge.n	800864a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008644:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008648:	e087      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008654:	2340      	movs	r3, #64	; 0x40
 8008656:	e080      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008658:	697b      	ldr	r3, [r7, #20]
 800865a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d001      	beq.n	8008666 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008662:	2380      	movs	r3, #128	; 0x80
 8008664:	e079      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008666:	697b      	ldr	r3, [r7, #20]
 8008668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800866c:	2b00      	cmp	r3, #0
 800866e:	d002      	beq.n	8008676 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008674:	e071      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008676:	697b      	ldr	r3, [r7, #20]
 8008678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008680:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008684:	e069      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008686:	697b      	ldr	r3, [r7, #20]
 8008688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d002      	beq.n	8008696 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008694:	e061      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80086a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80086a4:	e059      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80086a6:	697b      	ldr	r3, [r7, #20]
 80086a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d002      	beq.n	80086b6 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80086b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80086b4:	e051      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d002      	beq.n	80086c6 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80086c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80086c4:	e049      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80086c6:	697b      	ldr	r3, [r7, #20]
 80086c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d002      	beq.n	80086d6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80086d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80086d4:	e041      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d002      	beq.n	80086e6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80086e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086e4:	e039      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80086f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80086f4:	e031      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d002      	beq.n	8008706 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008700:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008704:	e029      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008710:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008714:	e021      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800871c:	2b00      	cmp	r3, #0
 800871e:	d002      	beq.n	8008726 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008724:	e019      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872c:	2b00      	cmp	r3, #0
 800872e:	d002      	beq.n	8008736 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008730:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008734:	e011      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d002      	beq.n	8008746 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008740:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008744:	e009      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d002      	beq.n	8008756 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008750:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008754:	e001      	b.n	800875a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008756:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800875a:	4618      	mov	r0, r3
 800875c:	3720      	adds	r7, #32
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20000004 	.word	0x20000004
 8008768:	10624dd3 	.word	0x10624dd3
 800876c:	fdffe008 	.word	0xfdffe008

08008770 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008778:	4b1f      	ldr	r3, [pc, #124]	; (80087f8 <SDMMC_GetCmdResp2+0x88>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	4a1f      	ldr	r2, [pc, #124]	; (80087fc <SDMMC_GetCmdResp2+0x8c>)
 800877e:	fba2 2303 	umull	r2, r3, r2, r3
 8008782:	0a5b      	lsrs	r3, r3, #9
 8008784:	f241 3288 	movw	r2, #5000	; 0x1388
 8008788:	fb02 f303 	mul.w	r3, r2, r3
 800878c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	1e5a      	subs	r2, r3, #1
 8008792:	60fa      	str	r2, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d102      	bne.n	800879e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800879c:	e026      	b.n	80087ec <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d0ef      	beq.n	800878e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d1ea      	bne.n	800878e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087bc:	f003 0304 	and.w	r3, r3, #4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d004      	beq.n	80087ce <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2204      	movs	r2, #4
 80087c8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80087ca:	2304      	movs	r3, #4
 80087cc:	e00e      	b.n	80087ec <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087d2:	f003 0301 	and.w	r3, r3, #1
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d004      	beq.n	80087e4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2201      	movs	r2, #1
 80087de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80087e0:	2301      	movs	r3, #1
 80087e2:	e003      	b.n	80087ec <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	22c5      	movs	r2, #197	; 0xc5
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80087ea:	2300      	movs	r3, #0
}
 80087ec:	4618      	mov	r0, r3
 80087ee:	3714      	adds	r7, #20
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr
 80087f8:	20000004 	.word	0x20000004
 80087fc:	10624dd3 	.word	0x10624dd3

08008800 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008808:	4b1a      	ldr	r3, [pc, #104]	; (8008874 <SDMMC_GetCmdResp3+0x74>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a1a      	ldr	r2, [pc, #104]	; (8008878 <SDMMC_GetCmdResp3+0x78>)
 800880e:	fba2 2303 	umull	r2, r3, r2, r3
 8008812:	0a5b      	lsrs	r3, r3, #9
 8008814:	f241 3288 	movw	r2, #5000	; 0x1388
 8008818:	fb02 f303 	mul.w	r3, r2, r3
 800881c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	1e5a      	subs	r2, r3, #1
 8008822:	60fa      	str	r2, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d102      	bne.n	800882e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008828:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800882c:	e01b      	b.n	8008866 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008832:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800883a:	2b00      	cmp	r3, #0
 800883c:	d0ef      	beq.n	800881e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1ea      	bne.n	800881e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	f003 0304 	and.w	r3, r3, #4
 8008850:	2b00      	cmp	r3, #0
 8008852:	d004      	beq.n	800885e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2204      	movs	r2, #4
 8008858:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800885a:	2304      	movs	r3, #4
 800885c:	e003      	b.n	8008866 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	22c5      	movs	r2, #197	; 0xc5
 8008862:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3714      	adds	r7, #20
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
 8008872:	bf00      	nop
 8008874:	20000004 	.word	0x20000004
 8008878:	10624dd3 	.word	0x10624dd3

0800887c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b088      	sub	sp, #32
 8008880:	af00      	add	r7, sp, #0
 8008882:	60f8      	str	r0, [r7, #12]
 8008884:	460b      	mov	r3, r1
 8008886:	607a      	str	r2, [r7, #4]
 8008888:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800888a:	4b35      	ldr	r3, [pc, #212]	; (8008960 <SDMMC_GetCmdResp6+0xe4>)
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a35      	ldr	r2, [pc, #212]	; (8008964 <SDMMC_GetCmdResp6+0xe8>)
 8008890:	fba2 2303 	umull	r2, r3, r2, r3
 8008894:	0a5b      	lsrs	r3, r3, #9
 8008896:	f241 3288 	movw	r2, #5000	; 0x1388
 800889a:	fb02 f303 	mul.w	r3, r2, r3
 800889e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	1e5a      	subs	r2, r3, #1
 80088a4:	61fa      	str	r2, [r7, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d102      	bne.n	80088b0 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088aa:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80088ae:	e052      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b4:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088b6:	69bb      	ldr	r3, [r7, #24]
 80088b8:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d0ef      	beq.n	80088a0 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80088c0:	69bb      	ldr	r3, [r7, #24]
 80088c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d1ea      	bne.n	80088a0 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088ce:	f003 0304 	and.w	r3, r3, #4
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d004      	beq.n	80088e0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2204      	movs	r2, #4
 80088da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088dc:	2304      	movs	r3, #4
 80088de:	e03a      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e4:	f003 0301 	and.w	r3, r3, #1
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d004      	beq.n	80088f6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e02f      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80088f6:	68f8      	ldr	r0, [r7, #12]
 80088f8:	f7ff fc96 	bl	8008228 <SDMMC_GetCommandResponse>
 80088fc:	4603      	mov	r3, r0
 80088fe:	461a      	mov	r2, r3
 8008900:	7afb      	ldrb	r3, [r7, #11]
 8008902:	4293      	cmp	r3, r2
 8008904:	d001      	beq.n	800890a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008906:	2301      	movs	r3, #1
 8008908:	e025      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	22c5      	movs	r2, #197	; 0xc5
 800890e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8008910:	2100      	movs	r1, #0
 8008912:	68f8      	ldr	r0, [r7, #12]
 8008914:	f7ff fc95 	bl	8008242 <SDMMC_GetResponse>
 8008918:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d106      	bne.n	8008932 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	0c1b      	lsrs	r3, r3, #16
 8008928:	b29a      	uxth	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800892e:	2300      	movs	r3, #0
 8008930:	e011      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008938:	2b00      	cmp	r3, #0
 800893a:	d002      	beq.n	8008942 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800893c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008940:	e009      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800894c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008950:	e001      	b.n	8008956 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008952:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	20000004 	.word	0x20000004
 8008964:	10624dd3 	.word	0x10624dd3

08008968 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8008968:	b480      	push	{r7}
 800896a:	b085      	sub	sp, #20
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008970:	4b22      	ldr	r3, [pc, #136]	; (80089fc <SDMMC_GetCmdResp7+0x94>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a22      	ldr	r2, [pc, #136]	; (8008a00 <SDMMC_GetCmdResp7+0x98>)
 8008976:	fba2 2303 	umull	r2, r3, r2, r3
 800897a:	0a5b      	lsrs	r3, r3, #9
 800897c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008980:	fb02 f303 	mul.w	r3, r2, r3
 8008984:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	1e5a      	subs	r2, r3, #1
 800898a:	60fa      	str	r2, [r7, #12]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d102      	bne.n	8008996 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008990:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008994:	e02c      	b.n	80089f0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d0ef      	beq.n	8008986 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1ea      	bne.n	8008986 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b4:	f003 0304 	and.w	r3, r3, #4
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d004      	beq.n	80089c6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2204      	movs	r2, #4
 80089c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80089c2:	2304      	movs	r3, #4
 80089c4:	e014      	b.n	80089f0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f003 0301 	and.w	r3, r3, #1
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d004      	beq.n	80089dc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089d8:	2301      	movs	r3, #1
 80089da:	e009      	b.n	80089f0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2240      	movs	r2, #64	; 0x40
 80089ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80089ee:	2300      	movs	r3, #0
  
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	20000004 	.word	0x20000004
 8008a00:	10624dd3 	.word	0x10624dd3

08008a04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a0c:	4b11      	ldr	r3, [pc, #68]	; (8008a54 <SDMMC_GetCmdError+0x50>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a11      	ldr	r2, [pc, #68]	; (8008a58 <SDMMC_GetCmdError+0x54>)
 8008a12:	fba2 2303 	umull	r2, r3, r2, r3
 8008a16:	0a5b      	lsrs	r3, r3, #9
 8008a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1c:	fb02 f303 	mul.w	r3, r2, r3
 8008a20:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	1e5a      	subs	r2, r3, #1
 8008a26:	60fa      	str	r2, [r7, #12]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d102      	bne.n	8008a32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a30:	e009      	b.n	8008a46 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d0f1      	beq.n	8008a22 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	22c5      	movs	r2, #197	; 0xc5
 8008a42:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3714      	adds	r7, #20
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr
 8008a52:	bf00      	nop
 8008a54:	20000004 	.word	0x20000004
 8008a58:	10624dd3 	.word	0x10624dd3

08008a5c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a5c:	b084      	sub	sp, #16
 8008a5e:	b580      	push	{r7, lr}
 8008a60:	b084      	sub	sp, #16
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
 8008a66:	f107 001c 	add.w	r0, r7, #28
 8008a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d120      	bne.n	8008ab6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	4b20      	ldr	r3, [pc, #128]	; (8008b08 <USB_CoreInit+0xac>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68db      	ldr	r3, [r3, #12]
 8008a90:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	d105      	bne.n	8008aaa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	68db      	ldr	r3, [r3, #12]
 8008aa2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f001 fbee 	bl	800a28c <USB_CoreReset>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]
 8008ab4:	e010      	b.n	8008ad8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68db      	ldr	r3, [r3, #12]
 8008aba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f001 fbe2 	bl	800a28c <USB_CoreReset>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d10b      	bne.n	8008af6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	f043 0206 	orr.w	r2, r3, #6
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	f043 0220 	orr.w	r2, r3, #32
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b02:	b004      	add	sp, #16
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	ffbdffbf 	.word	0xffbdffbf

08008b0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008b1a:	79fb      	ldrb	r3, [r7, #7]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	d165      	bne.n	8008bec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4a41      	ldr	r2, [pc, #260]	; (8008c28 <USB_SetTurnaroundTime+0x11c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d906      	bls.n	8008b36 <USB_SetTurnaroundTime+0x2a>
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	4a40      	ldr	r2, [pc, #256]	; (8008c2c <USB_SetTurnaroundTime+0x120>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d202      	bcs.n	8008b36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008b30:	230f      	movs	r3, #15
 8008b32:	617b      	str	r3, [r7, #20]
 8008b34:	e062      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4a3c      	ldr	r2, [pc, #240]	; (8008c2c <USB_SetTurnaroundTime+0x120>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d306      	bcc.n	8008b4c <USB_SetTurnaroundTime+0x40>
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	4a3b      	ldr	r2, [pc, #236]	; (8008c30 <USB_SetTurnaroundTime+0x124>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d202      	bcs.n	8008b4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b46:	230e      	movs	r3, #14
 8008b48:	617b      	str	r3, [r7, #20]
 8008b4a:	e057      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4a38      	ldr	r2, [pc, #224]	; (8008c30 <USB_SetTurnaroundTime+0x124>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d306      	bcc.n	8008b62 <USB_SetTurnaroundTime+0x56>
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	4a37      	ldr	r2, [pc, #220]	; (8008c34 <USB_SetTurnaroundTime+0x128>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d202      	bcs.n	8008b62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b5c:	230d      	movs	r3, #13
 8008b5e:	617b      	str	r3, [r7, #20]
 8008b60:	e04c      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a33      	ldr	r2, [pc, #204]	; (8008c34 <USB_SetTurnaroundTime+0x128>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d306      	bcc.n	8008b78 <USB_SetTurnaroundTime+0x6c>
 8008b6a:	68bb      	ldr	r3, [r7, #8]
 8008b6c:	4a32      	ldr	r2, [pc, #200]	; (8008c38 <USB_SetTurnaroundTime+0x12c>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d802      	bhi.n	8008b78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b72:	230c      	movs	r3, #12
 8008b74:	617b      	str	r3, [r7, #20]
 8008b76:	e041      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4a2f      	ldr	r2, [pc, #188]	; (8008c38 <USB_SetTurnaroundTime+0x12c>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d906      	bls.n	8008b8e <USB_SetTurnaroundTime+0x82>
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	4a2e      	ldr	r2, [pc, #184]	; (8008c3c <USB_SetTurnaroundTime+0x130>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d802      	bhi.n	8008b8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b88:	230b      	movs	r3, #11
 8008b8a:	617b      	str	r3, [r7, #20]
 8008b8c:	e036      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4a2a      	ldr	r2, [pc, #168]	; (8008c3c <USB_SetTurnaroundTime+0x130>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d906      	bls.n	8008ba4 <USB_SetTurnaroundTime+0x98>
 8008b96:	68bb      	ldr	r3, [r7, #8]
 8008b98:	4a29      	ldr	r2, [pc, #164]	; (8008c40 <USB_SetTurnaroundTime+0x134>)
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d802      	bhi.n	8008ba4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b9e:	230a      	movs	r3, #10
 8008ba0:	617b      	str	r3, [r7, #20]
 8008ba2:	e02b      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a26      	ldr	r2, [pc, #152]	; (8008c40 <USB_SetTurnaroundTime+0x134>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d906      	bls.n	8008bba <USB_SetTurnaroundTime+0xae>
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	4a25      	ldr	r2, [pc, #148]	; (8008c44 <USB_SetTurnaroundTime+0x138>)
 8008bb0:	4293      	cmp	r3, r2
 8008bb2:	d202      	bcs.n	8008bba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008bb4:	2309      	movs	r3, #9
 8008bb6:	617b      	str	r3, [r7, #20]
 8008bb8:	e020      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	4a21      	ldr	r2, [pc, #132]	; (8008c44 <USB_SetTurnaroundTime+0x138>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d306      	bcc.n	8008bd0 <USB_SetTurnaroundTime+0xc4>
 8008bc2:	68bb      	ldr	r3, [r7, #8]
 8008bc4:	4a20      	ldr	r2, [pc, #128]	; (8008c48 <USB_SetTurnaroundTime+0x13c>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d802      	bhi.n	8008bd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008bca:	2308      	movs	r3, #8
 8008bcc:	617b      	str	r3, [r7, #20]
 8008bce:	e015      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	4a1d      	ldr	r2, [pc, #116]	; (8008c48 <USB_SetTurnaroundTime+0x13c>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d906      	bls.n	8008be6 <USB_SetTurnaroundTime+0xda>
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	4a1c      	ldr	r2, [pc, #112]	; (8008c4c <USB_SetTurnaroundTime+0x140>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d202      	bcs.n	8008be6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008be0:	2307      	movs	r3, #7
 8008be2:	617b      	str	r3, [r7, #20]
 8008be4:	e00a      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008be6:	2306      	movs	r3, #6
 8008be8:	617b      	str	r3, [r7, #20]
 8008bea:	e007      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d102      	bne.n	8008bf8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bf2:	2309      	movs	r3, #9
 8008bf4:	617b      	str	r3, [r7, #20]
 8008bf6:	e001      	b.n	8008bfc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bf8:	2309      	movs	r3, #9
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	68db      	ldr	r3, [r3, #12]
 8008c00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	68da      	ldr	r2, [r3, #12]
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	029b      	lsls	r3, r3, #10
 8008c10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008c14:	431a      	orrs	r2, r3
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	371c      	adds	r7, #28
 8008c20:	46bd      	mov	sp, r7
 8008c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c26:	4770      	bx	lr
 8008c28:	00d8acbf 	.word	0x00d8acbf
 8008c2c:	00e4e1c0 	.word	0x00e4e1c0
 8008c30:	00f42400 	.word	0x00f42400
 8008c34:	01067380 	.word	0x01067380
 8008c38:	011a499f 	.word	0x011a499f
 8008c3c:	01312cff 	.word	0x01312cff
 8008c40:	014ca43f 	.word	0x014ca43f
 8008c44:	016e3600 	.word	0x016e3600
 8008c48:	01a6ab1f 	.word	0x01a6ab1f
 8008c4c:	01e84800 	.word	0x01e84800

08008c50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b083      	sub	sp, #12
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	f043 0201 	orr.w	r2, r3, #1
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c64:	2300      	movs	r3, #0
}
 8008c66:	4618      	mov	r0, r3
 8008c68:	370c      	adds	r7, #12
 8008c6a:	46bd      	mov	sp, r7
 8008c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c70:	4770      	bx	lr

08008c72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c72:	b480      	push	{r7}
 8008c74:	b083      	sub	sp, #12
 8008c76:	af00      	add	r7, sp, #0
 8008c78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f023 0201 	bic.w	r2, r3, #1
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008cb0:	78fb      	ldrb	r3, [r7, #3]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d115      	bne.n	8008ce2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cc2:	2001      	movs	r0, #1
 8008cc4:	f7f9 fe42 	bl	800294c <HAL_Delay>
      ms++;
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	3301      	adds	r3, #1
 8008ccc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fa4b 	bl	800a16a <USB_GetMode>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d01e      	beq.n	8008d18 <USB_SetCurrentMode+0x84>
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	2b31      	cmp	r3, #49	; 0x31
 8008cde:	d9f0      	bls.n	8008cc2 <USB_SetCurrentMode+0x2e>
 8008ce0:	e01a      	b.n	8008d18 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008ce2:	78fb      	ldrb	r3, [r7, #3]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d115      	bne.n	8008d14 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008cf4:	2001      	movs	r0, #1
 8008cf6:	f7f9 fe29 	bl	800294c <HAL_Delay>
      ms++;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 fa32 	bl	800a16a <USB_GetMode>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d005      	beq.n	8008d18 <USB_SetCurrentMode+0x84>
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2b31      	cmp	r3, #49	; 0x31
 8008d10:	d9f0      	bls.n	8008cf4 <USB_SetCurrentMode+0x60>
 8008d12:	e001      	b.n	8008d18 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008d14:	2301      	movs	r3, #1
 8008d16:	e005      	b.n	8008d24 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b32      	cmp	r3, #50	; 0x32
 8008d1c:	d101      	bne.n	8008d22 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	e000      	b.n	8008d24 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3710      	adds	r7, #16
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b086      	sub	sp, #24
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
 8008d36:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008d3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d46:	2300      	movs	r3, #0
 8008d48:	613b      	str	r3, [r7, #16]
 8008d4a:	e009      	b.n	8008d60 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	3340      	adds	r3, #64	; 0x40
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	4413      	add	r3, r2
 8008d56:	2200      	movs	r2, #0
 8008d58:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	3301      	adds	r3, #1
 8008d5e:	613b      	str	r3, [r7, #16]
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	2b0e      	cmp	r3, #14
 8008d64:	d9f2      	bls.n	8008d4c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d11c      	bne.n	8008da6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d72:	685b      	ldr	r3, [r3, #4]
 8008d74:	68fa      	ldr	r2, [r7, #12]
 8008d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d7a:	f043 0302 	orr.w	r3, r3, #2
 8008d7e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	601a      	str	r2, [r3, #0]
 8008da4:	e005      	b.n	8008db2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008db8:	461a      	mov	r2, r3
 8008dba:	2300      	movs	r3, #0
 8008dbc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dcc:	461a      	mov	r2, r3
 8008dce:	680b      	ldr	r3, [r1, #0]
 8008dd0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d10c      	bne.n	8008df2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d104      	bne.n	8008de8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008dde:	2100      	movs	r1, #0
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 f965 	bl	80090b0 <USB_SetDevSpeed>
 8008de6:	e008      	b.n	8008dfa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008de8:	2101      	movs	r1, #1
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f000 f960 	bl	80090b0 <USB_SetDevSpeed>
 8008df0:	e003      	b.n	8008dfa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008df2:	2103      	movs	r1, #3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f000 f95b 	bl	80090b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dfa:	2110      	movs	r1, #16
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f8f3 	bl	8008fe8 <USB_FlushTxFifo>
 8008e02:	4603      	mov	r3, r0
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d001      	beq.n	8008e0c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 f91f 	bl	8009050 <USB_FlushRxFifo>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008e18:	2301      	movs	r3, #1
 8008e1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e22:	461a      	mov	r2, r3
 8008e24:	2300      	movs	r3, #0
 8008e26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e2e:	461a      	mov	r2, r3
 8008e30:	2300      	movs	r3, #0
 8008e32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e40:	2300      	movs	r3, #0
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	e043      	b.n	8008ece <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	015a      	lsls	r2, r3, #5
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008e5c:	d118      	bne.n	8008e90 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d10a      	bne.n	8008e7a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	015a      	lsls	r2, r3, #5
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	4413      	add	r3, r2
 8008e6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e70:	461a      	mov	r2, r3
 8008e72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008e76:	6013      	str	r3, [r2, #0]
 8008e78:	e013      	b.n	8008ea2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	015a      	lsls	r2, r3, #5
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	4413      	add	r3, r2
 8008e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e86:	461a      	mov	r2, r3
 8008e88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008e8c:	6013      	str	r3, [r2, #0]
 8008e8e:	e008      	b.n	8008ea2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e90:	693b      	ldr	r3, [r7, #16]
 8008e92:	015a      	lsls	r2, r3, #5
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	4413      	add	r3, r2
 8008e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	015a      	lsls	r2, r3, #5
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	4413      	add	r3, r2
 8008eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eae:	461a      	mov	r2, r3
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ec6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	613b      	str	r3, [r7, #16]
 8008ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ed0:	693a      	ldr	r2, [r7, #16]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d3b7      	bcc.n	8008e46 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	613b      	str	r3, [r7, #16]
 8008eda:	e043      	b.n	8008f64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008eee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ef2:	d118      	bne.n	8008f26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d10a      	bne.n	8008f10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f06:	461a      	mov	r2, r3
 8008f08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e013      	b.n	8008f38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f10:	693b      	ldr	r3, [r7, #16]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f22:	6013      	str	r3, [r2, #0]
 8008f24:	e008      	b.n	8008f38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	461a      	mov	r2, r3
 8008f34:	2300      	movs	r3, #0
 8008f36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	461a      	mov	r2, r3
 8008f58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	3301      	adds	r3, #1
 8008f62:	613b      	str	r3, [r7, #16]
 8008f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f66:	693a      	ldr	r2, [r7, #16]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d3b7      	bcc.n	8008edc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f72:	691b      	ldr	r3, [r3, #16]
 8008f74:	68fa      	ldr	r2, [r7, #12]
 8008f76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008f8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d105      	bne.n	8008fa0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	699b      	ldr	r3, [r3, #24]
 8008f98:	f043 0210 	orr.w	r2, r3, #16
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	699a      	ldr	r2, [r3, #24]
 8008fa4:	4b0e      	ldr	r3, [pc, #56]	; (8008fe0 <USB_DevInit+0x2b4>)
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d005      	beq.n	8008fbe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	699b      	ldr	r3, [r3, #24]
 8008fb6:	f043 0208 	orr.w	r2, r3, #8
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008fbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fc0:	2b01      	cmp	r3, #1
 8008fc2:	d105      	bne.n	8008fd0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	699a      	ldr	r2, [r3, #24]
 8008fc8:	4b06      	ldr	r3, [pc, #24]	; (8008fe4 <USB_DevInit+0x2b8>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	687a      	ldr	r2, [r7, #4]
 8008fce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3718      	adds	r7, #24
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fdc:	b004      	add	sp, #16
 8008fde:	4770      	bx	lr
 8008fe0:	803c3800 	.word	0x803c3800
 8008fe4:	40000004 	.word	0x40000004

08008fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b085      	sub	sp, #20
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
 8008ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	3301      	adds	r3, #1
 8008ffa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a13      	ldr	r2, [pc, #76]	; (800904c <USB_FlushTxFifo+0x64>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d901      	bls.n	8009008 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009004:	2303      	movs	r3, #3
 8009006:	e01b      	b.n	8009040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	daf2      	bge.n	8008ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009010:	2300      	movs	r3, #0
 8009012:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	019b      	lsls	r3, r3, #6
 8009018:	f043 0220 	orr.w	r2, r3, #32
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	3301      	adds	r3, #1
 8009024:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	4a08      	ldr	r2, [pc, #32]	; (800904c <USB_FlushTxFifo+0x64>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d901      	bls.n	8009032 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800902e:	2303      	movs	r3, #3
 8009030:	e006      	b.n	8009040 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	691b      	ldr	r3, [r3, #16]
 8009036:	f003 0320 	and.w	r3, r3, #32
 800903a:	2b20      	cmp	r3, #32
 800903c:	d0f0      	beq.n	8009020 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800903e:	2300      	movs	r3, #0
}
 8009040:	4618      	mov	r0, r3
 8009042:	3714      	adds	r7, #20
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	00030d40 	.word	0x00030d40

08009050 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009058:	2300      	movs	r3, #0
 800905a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	3301      	adds	r3, #1
 8009060:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	4a11      	ldr	r2, [pc, #68]	; (80090ac <USB_FlushRxFifo+0x5c>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d901      	bls.n	800906e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800906a:	2303      	movs	r3, #3
 800906c:	e018      	b.n	80090a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	691b      	ldr	r3, [r3, #16]
 8009072:	2b00      	cmp	r3, #0
 8009074:	daf2      	bge.n	800905c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009076:	2300      	movs	r3, #0
 8009078:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2210      	movs	r2, #16
 800907e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	3301      	adds	r3, #1
 8009084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	4a08      	ldr	r2, [pc, #32]	; (80090ac <USB_FlushRxFifo+0x5c>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d901      	bls.n	8009092 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800908e:	2303      	movs	r3, #3
 8009090:	e006      	b.n	80090a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	691b      	ldr	r3, [r3, #16]
 8009096:	f003 0310 	and.w	r3, r3, #16
 800909a:	2b10      	cmp	r3, #16
 800909c:	d0f0      	beq.n	8009080 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	00030d40 	.word	0x00030d40

080090b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b085      	sub	sp, #20
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	460b      	mov	r3, r1
 80090ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090c6:	681a      	ldr	r2, [r3, #0]
 80090c8:	78fb      	ldrb	r3, [r7, #3]
 80090ca:	68f9      	ldr	r1, [r7, #12]
 80090cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090d0:	4313      	orrs	r3, r2
 80090d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b087      	sub	sp, #28
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090ee:	693b      	ldr	r3, [r7, #16]
 80090f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f4:	689b      	ldr	r3, [r3, #8]
 80090f6:	f003 0306 	and.w	r3, r3, #6
 80090fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d102      	bne.n	8009108 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009102:	2300      	movs	r3, #0
 8009104:	75fb      	strb	r3, [r7, #23]
 8009106:	e00a      	b.n	800911e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d002      	beq.n	8009114 <USB_GetDevSpeed+0x32>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2b06      	cmp	r3, #6
 8009112:	d102      	bne.n	800911a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009114:	2302      	movs	r3, #2
 8009116:	75fb      	strb	r3, [r7, #23]
 8009118:	e001      	b.n	800911e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800911a:	230f      	movs	r3, #15
 800911c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800911e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009120:	4618      	mov	r0, r3
 8009122:	371c      	adds	r7, #28
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800912c:	b480      	push	{r7}
 800912e:	b085      	sub	sp, #20
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
 8009134:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	781b      	ldrb	r3, [r3, #0]
 800913e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	785b      	ldrb	r3, [r3, #1]
 8009144:	2b01      	cmp	r3, #1
 8009146:	d139      	bne.n	80091bc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800914e:	69da      	ldr	r2, [r3, #28]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	781b      	ldrb	r3, [r3, #0]
 8009154:	f003 030f 	and.w	r3, r3, #15
 8009158:	2101      	movs	r1, #1
 800915a:	fa01 f303 	lsl.w	r3, r1, r3
 800915e:	b29b      	uxth	r3, r3
 8009160:	68f9      	ldr	r1, [r7, #12]
 8009162:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009166:	4313      	orrs	r3, r2
 8009168:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d153      	bne.n	8009228 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	015a      	lsls	r2, r3, #5
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	4413      	add	r3, r2
 8009188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918c:	681a      	ldr	r2, [r3, #0]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	68db      	ldr	r3, [r3, #12]
 8009192:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800919c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	059b      	lsls	r3, r3, #22
 80091a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80091a4:	431a      	orrs	r2, r3
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	0159      	lsls	r1, r3, #5
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	440b      	add	r3, r1
 80091ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091b2:	4619      	mov	r1, r3
 80091b4:	4b20      	ldr	r3, [pc, #128]	; (8009238 <USB_ActivateEndpoint+0x10c>)
 80091b6:	4313      	orrs	r3, r2
 80091b8:	600b      	str	r3, [r1, #0]
 80091ba:	e035      	b.n	8009228 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091c2:	69da      	ldr	r2, [r3, #28]
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	781b      	ldrb	r3, [r3, #0]
 80091c8:	f003 030f 	and.w	r3, r3, #15
 80091cc:	2101      	movs	r1, #1
 80091ce:	fa01 f303 	lsl.w	r3, r1, r3
 80091d2:	041b      	lsls	r3, r3, #16
 80091d4:	68f9      	ldr	r1, [r7, #12]
 80091d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80091da:	4313      	orrs	r3, r2
 80091dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	015a      	lsls	r2, r3, #5
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	4413      	add	r3, r2
 80091e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d119      	bne.n	8009228 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	015a      	lsls	r2, r3, #5
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	4413      	add	r3, r2
 80091fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009200:	681a      	ldr	r2, [r3, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	68db      	ldr	r3, [r3, #12]
 8009206:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	791b      	ldrb	r3, [r3, #4]
 800920e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009210:	430b      	orrs	r3, r1
 8009212:	431a      	orrs	r2, r3
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	0159      	lsls	r1, r3, #5
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	440b      	add	r3, r1
 800921c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009220:	4619      	mov	r1, r3
 8009222:	4b05      	ldr	r3, [pc, #20]	; (8009238 <USB_ActivateEndpoint+0x10c>)
 8009224:	4313      	orrs	r3, r2
 8009226:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3714      	adds	r7, #20
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	10008000 	.word	0x10008000

0800923c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800923c:	b480      	push	{r7}
 800923e:	b085      	sub	sp, #20
 8009240:	af00      	add	r7, sp, #0
 8009242:	6078      	str	r0, [r7, #4]
 8009244:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009250:	683b      	ldr	r3, [r7, #0]
 8009252:	785b      	ldrb	r3, [r3, #1]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d161      	bne.n	800931c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	015a      	lsls	r2, r3, #5
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	4413      	add	r3, r2
 8009260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800926a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800926e:	d11f      	bne.n	80092b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	015a      	lsls	r2, r3, #5
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	4413      	add	r3, r2
 8009278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68ba      	ldr	r2, [r7, #8]
 8009280:	0151      	lsls	r1, r2, #5
 8009282:	68fa      	ldr	r2, [r7, #12]
 8009284:	440a      	add	r2, r1
 8009286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800928a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800928e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	015a      	lsls	r2, r3, #5
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	4413      	add	r3, r2
 8009298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	68ba      	ldr	r2, [r7, #8]
 80092a0:	0151      	lsls	r1, r2, #5
 80092a2:	68fa      	ldr	r2, [r7, #12]
 80092a4:	440a      	add	r2, r1
 80092a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80092aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80092ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	f003 030f 	and.w	r3, r3, #15
 80092c0:	2101      	movs	r1, #1
 80092c2:	fa01 f303 	lsl.w	r3, r1, r3
 80092c6:	b29b      	uxth	r3, r3
 80092c8:	43db      	mvns	r3, r3
 80092ca:	68f9      	ldr	r1, [r7, #12]
 80092cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092d0:	4013      	ands	r3, r2
 80092d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092da:	69da      	ldr	r2, [r3, #28]
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	781b      	ldrb	r3, [r3, #0]
 80092e0:	f003 030f 	and.w	r3, r3, #15
 80092e4:	2101      	movs	r1, #1
 80092e6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ea:	b29b      	uxth	r3, r3
 80092ec:	43db      	mvns	r3, r3
 80092ee:	68f9      	ldr	r1, [r7, #12]
 80092f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80092f4:	4013      	ands	r3, r2
 80092f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	015a      	lsls	r2, r3, #5
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	4413      	add	r3, r2
 8009300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	0159      	lsls	r1, r3, #5
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	440b      	add	r3, r1
 800930e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009312:	4619      	mov	r1, r3
 8009314:	4b35      	ldr	r3, [pc, #212]	; (80093ec <USB_DeactivateEndpoint+0x1b0>)
 8009316:	4013      	ands	r3, r2
 8009318:	600b      	str	r3, [r1, #0]
 800931a:	e060      	b.n	80093de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800932e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009332:	d11f      	bne.n	8009374 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	015a      	lsls	r2, r3, #5
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4413      	add	r3, r2
 800933c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	68ba      	ldr	r2, [r7, #8]
 8009344:	0151      	lsls	r1, r2, #5
 8009346:	68fa      	ldr	r2, [r7, #12]
 8009348:	440a      	add	r2, r1
 800934a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800934e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009352:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	015a      	lsls	r2, r3, #5
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4413      	add	r3, r2
 800935c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	68ba      	ldr	r2, [r7, #8]
 8009364:	0151      	lsls	r1, r2, #5
 8009366:	68fa      	ldr	r2, [r7, #12]
 8009368:	440a      	add	r2, r1
 800936a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800936e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009372:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800937a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	781b      	ldrb	r3, [r3, #0]
 8009380:	f003 030f 	and.w	r3, r3, #15
 8009384:	2101      	movs	r1, #1
 8009386:	fa01 f303 	lsl.w	r3, r1, r3
 800938a:	041b      	lsls	r3, r3, #16
 800938c:	43db      	mvns	r3, r3
 800938e:	68f9      	ldr	r1, [r7, #12]
 8009390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009394:	4013      	ands	r3, r2
 8009396:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800939e:	69da      	ldr	r2, [r3, #28]
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 030f 	and.w	r3, r3, #15
 80093a8:	2101      	movs	r1, #1
 80093aa:	fa01 f303 	lsl.w	r3, r1, r3
 80093ae:	041b      	lsls	r3, r3, #16
 80093b0:	43db      	mvns	r3, r3
 80093b2:	68f9      	ldr	r1, [r7, #12]
 80093b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093b8:	4013      	ands	r3, r2
 80093ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	015a      	lsls	r2, r3, #5
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	4413      	add	r3, r2
 80093c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	0159      	lsls	r1, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	440b      	add	r3, r1
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	4619      	mov	r1, r3
 80093d8:	4b05      	ldr	r3, [pc, #20]	; (80093f0 <USB_DeactivateEndpoint+0x1b4>)
 80093da:	4013      	ands	r3, r2
 80093dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093de:	2300      	movs	r3, #0
}
 80093e0:	4618      	mov	r0, r3
 80093e2:	3714      	adds	r7, #20
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr
 80093ec:	ec337800 	.word	0xec337800
 80093f0:	eff37800 	.word	0xeff37800

080093f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b08a      	sub	sp, #40	; 0x28
 80093f8:	af02      	add	r7, sp, #8
 80093fa:	60f8      	str	r0, [r7, #12]
 80093fc:	60b9      	str	r1, [r7, #8]
 80093fe:	4613      	mov	r3, r2
 8009400:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800940c:	68bb      	ldr	r3, [r7, #8]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b01      	cmp	r3, #1
 8009412:	f040 8163 	bne.w	80096dc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d132      	bne.n	8009484 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800941e:	69bb      	ldr	r3, [r7, #24]
 8009420:	015a      	lsls	r2, r3, #5
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	4413      	add	r3, r2
 8009426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800942a:	691a      	ldr	r2, [r3, #16]
 800942c:	69bb      	ldr	r3, [r7, #24]
 800942e:	0159      	lsls	r1, r3, #5
 8009430:	69fb      	ldr	r3, [r7, #28]
 8009432:	440b      	add	r3, r1
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	4619      	mov	r1, r3
 800943a:	4ba5      	ldr	r3, [pc, #660]	; (80096d0 <USB_EPStartXfer+0x2dc>)
 800943c:	4013      	ands	r3, r2
 800943e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009440:	69bb      	ldr	r3, [r7, #24]
 8009442:	015a      	lsls	r2, r3, #5
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	4413      	add	r3, r2
 8009448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	69ba      	ldr	r2, [r7, #24]
 8009450:	0151      	lsls	r1, r2, #5
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	440a      	add	r2, r1
 8009456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800945e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009460:	69bb      	ldr	r3, [r7, #24]
 8009462:	015a      	lsls	r2, r3, #5
 8009464:	69fb      	ldr	r3, [r7, #28]
 8009466:	4413      	add	r3, r2
 8009468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800946c:	691a      	ldr	r2, [r3, #16]
 800946e:	69bb      	ldr	r3, [r7, #24]
 8009470:	0159      	lsls	r1, r3, #5
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	440b      	add	r3, r1
 8009476:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800947a:	4619      	mov	r1, r3
 800947c:	4b95      	ldr	r3, [pc, #596]	; (80096d4 <USB_EPStartXfer+0x2e0>)
 800947e:	4013      	ands	r3, r2
 8009480:	610b      	str	r3, [r1, #16]
 8009482:	e074      	b.n	800956e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009484:	69bb      	ldr	r3, [r7, #24]
 8009486:	015a      	lsls	r2, r3, #5
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	4413      	add	r3, r2
 800948c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009490:	691a      	ldr	r2, [r3, #16]
 8009492:	69bb      	ldr	r3, [r7, #24]
 8009494:	0159      	lsls	r1, r3, #5
 8009496:	69fb      	ldr	r3, [r7, #28]
 8009498:	440b      	add	r3, r1
 800949a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800949e:	4619      	mov	r1, r3
 80094a0:	4b8c      	ldr	r3, [pc, #560]	; (80096d4 <USB_EPStartXfer+0x2e0>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094a6:	69bb      	ldr	r3, [r7, #24]
 80094a8:	015a      	lsls	r2, r3, #5
 80094aa:	69fb      	ldr	r3, [r7, #28]
 80094ac:	4413      	add	r3, r2
 80094ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	0159      	lsls	r1, r3, #5
 80094b8:	69fb      	ldr	r3, [r7, #28]
 80094ba:	440b      	add	r3, r1
 80094bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094c0:	4619      	mov	r1, r3
 80094c2:	4b83      	ldr	r3, [pc, #524]	; (80096d0 <USB_EPStartXfer+0x2dc>)
 80094c4:	4013      	ands	r3, r2
 80094c6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094c8:	69bb      	ldr	r3, [r7, #24]
 80094ca:	015a      	lsls	r2, r3, #5
 80094cc:	69fb      	ldr	r3, [r7, #28]
 80094ce:	4413      	add	r3, r2
 80094d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80094d6:	68bb      	ldr	r3, [r7, #8]
 80094d8:	6999      	ldr	r1, [r3, #24]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	440b      	add	r3, r1
 80094e0:	1e59      	subs	r1, r3, #1
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80094ea:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80094ec:	4b7a      	ldr	r3, [pc, #488]	; (80096d8 <USB_EPStartXfer+0x2e4>)
 80094ee:	400b      	ands	r3, r1
 80094f0:	69b9      	ldr	r1, [r7, #24]
 80094f2:	0148      	lsls	r0, r1, #5
 80094f4:	69f9      	ldr	r1, [r7, #28]
 80094f6:	4401      	add	r1, r0
 80094f8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80094fc:	4313      	orrs	r3, r2
 80094fe:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009500:	69bb      	ldr	r3, [r7, #24]
 8009502:	015a      	lsls	r2, r3, #5
 8009504:	69fb      	ldr	r3, [r7, #28]
 8009506:	4413      	add	r3, r2
 8009508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800950c:	691a      	ldr	r2, [r3, #16]
 800950e:	68bb      	ldr	r3, [r7, #8]
 8009510:	699b      	ldr	r3, [r3, #24]
 8009512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009516:	69b9      	ldr	r1, [r7, #24]
 8009518:	0148      	lsls	r0, r1, #5
 800951a:	69f9      	ldr	r1, [r7, #28]
 800951c:	4401      	add	r1, r0
 800951e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009522:	4313      	orrs	r3, r2
 8009524:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	791b      	ldrb	r3, [r3, #4]
 800952a:	2b01      	cmp	r3, #1
 800952c:	d11f      	bne.n	800956e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800952e:	69bb      	ldr	r3, [r7, #24]
 8009530:	015a      	lsls	r2, r3, #5
 8009532:	69fb      	ldr	r3, [r7, #28]
 8009534:	4413      	add	r3, r2
 8009536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	0151      	lsls	r1, r2, #5
 8009540:	69fa      	ldr	r2, [r7, #28]
 8009542:	440a      	add	r2, r1
 8009544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009548:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800954c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	015a      	lsls	r2, r3, #5
 8009552:	69fb      	ldr	r3, [r7, #28]
 8009554:	4413      	add	r3, r2
 8009556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	69ba      	ldr	r2, [r7, #24]
 800955e:	0151      	lsls	r1, r2, #5
 8009560:	69fa      	ldr	r2, [r7, #28]
 8009562:	440a      	add	r2, r1
 8009564:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800956c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800956e:	79fb      	ldrb	r3, [r7, #7]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d14b      	bne.n	800960c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	695b      	ldr	r3, [r3, #20]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d009      	beq.n	8009590 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800957c:	69bb      	ldr	r3, [r7, #24]
 800957e:	015a      	lsls	r2, r3, #5
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	4413      	add	r3, r2
 8009584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009588:	461a      	mov	r2, r3
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	695b      	ldr	r3, [r3, #20]
 800958e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009590:	68bb      	ldr	r3, [r7, #8]
 8009592:	791b      	ldrb	r3, [r3, #4]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d128      	bne.n	80095ea <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d110      	bne.n	80095ca <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	69ba      	ldr	r2, [r7, #24]
 80095b8:	0151      	lsls	r1, r2, #5
 80095ba:	69fa      	ldr	r2, [r7, #28]
 80095bc:	440a      	add	r2, r1
 80095be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80095c6:	6013      	str	r3, [r2, #0]
 80095c8:	e00f      	b.n	80095ea <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095ca:	69bb      	ldr	r3, [r7, #24]
 80095cc:	015a      	lsls	r2, r3, #5
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	4413      	add	r3, r2
 80095d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69ba      	ldr	r2, [r7, #24]
 80095da:	0151      	lsls	r1, r2, #5
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	440a      	add	r2, r1
 80095e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095e8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80095ea:	69bb      	ldr	r3, [r7, #24]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	69fb      	ldr	r3, [r7, #28]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	69ba      	ldr	r2, [r7, #24]
 80095fa:	0151      	lsls	r1, r2, #5
 80095fc:	69fa      	ldr	r2, [r7, #28]
 80095fe:	440a      	add	r2, r1
 8009600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009604:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009608:	6013      	str	r3, [r2, #0]
 800960a:	e137      	b.n	800987c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	015a      	lsls	r2, r3, #5
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	4413      	add	r3, r2
 8009614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	69ba      	ldr	r2, [r7, #24]
 800961c:	0151      	lsls	r1, r2, #5
 800961e:	69fa      	ldr	r2, [r7, #28]
 8009620:	440a      	add	r2, r1
 8009622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009626:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800962a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	791b      	ldrb	r3, [r3, #4]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d015      	beq.n	8009660 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 811f 	beq.w	800987c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009644:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	2101      	movs	r1, #1
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	69f9      	ldr	r1, [r7, #28]
 8009656:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800965a:	4313      	orrs	r3, r2
 800965c:	634b      	str	r3, [r1, #52]	; 0x34
 800965e:	e10d      	b.n	800987c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009660:	69fb      	ldr	r3, [r7, #28]
 8009662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800966c:	2b00      	cmp	r3, #0
 800966e:	d110      	bne.n	8009692 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009670:	69bb      	ldr	r3, [r7, #24]
 8009672:	015a      	lsls	r2, r3, #5
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	4413      	add	r3, r2
 8009678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69ba      	ldr	r2, [r7, #24]
 8009680:	0151      	lsls	r1, r2, #5
 8009682:	69fa      	ldr	r2, [r7, #28]
 8009684:	440a      	add	r2, r1
 8009686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	e00f      	b.n	80096b2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	0151      	lsls	r1, r2, #5
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	440a      	add	r2, r1
 80096a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	6919      	ldr	r1, [r3, #16]
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	781a      	ldrb	r2, [r3, #0]
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	b298      	uxth	r0, r3
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	9300      	str	r3, [sp, #0]
 80096c4:	4603      	mov	r3, r0
 80096c6:	68f8      	ldr	r0, [r7, #12]
 80096c8:	f000 faea 	bl	8009ca0 <USB_WritePacket>
 80096cc:	e0d6      	b.n	800987c <USB_EPStartXfer+0x488>
 80096ce:	bf00      	nop
 80096d0:	e007ffff 	.word	0xe007ffff
 80096d4:	fff80000 	.word	0xfff80000
 80096d8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096e8:	691a      	ldr	r2, [r3, #16]
 80096ea:	69bb      	ldr	r3, [r7, #24]
 80096ec:	0159      	lsls	r1, r3, #5
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	440b      	add	r3, r1
 80096f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80096f6:	4619      	mov	r1, r3
 80096f8:	4b63      	ldr	r3, [pc, #396]	; (8009888 <USB_EPStartXfer+0x494>)
 80096fa:	4013      	ands	r3, r2
 80096fc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80096fe:	69bb      	ldr	r3, [r7, #24]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	69fb      	ldr	r3, [r7, #28]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800970a:	691a      	ldr	r2, [r3, #16]
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	0159      	lsls	r1, r3, #5
 8009710:	69fb      	ldr	r3, [r7, #28]
 8009712:	440b      	add	r3, r1
 8009714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009718:	4619      	mov	r1, r3
 800971a:	4b5c      	ldr	r3, [pc, #368]	; (800988c <USB_EPStartXfer+0x498>)
 800971c:	4013      	ands	r3, r2
 800971e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8009720:	68bb      	ldr	r3, [r7, #8]
 8009722:	699b      	ldr	r3, [r3, #24]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d123      	bne.n	8009770 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	015a      	lsls	r2, r3, #5
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	4413      	add	r3, r2
 8009730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009734:	691a      	ldr	r2, [r3, #16]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	68db      	ldr	r3, [r3, #12]
 800973a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800973e:	69b9      	ldr	r1, [r7, #24]
 8009740:	0148      	lsls	r0, r1, #5
 8009742:	69f9      	ldr	r1, [r7, #28]
 8009744:	4401      	add	r1, r0
 8009746:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800974a:	4313      	orrs	r3, r2
 800974c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	69fa      	ldr	r2, [r7, #28]
 8009762:	440a      	add	r2, r1
 8009764:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009768:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800976c:	6113      	str	r3, [r2, #16]
 800976e:	e037      	b.n	80097e0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009770:	68bb      	ldr	r3, [r7, #8]
 8009772:	699a      	ldr	r2, [r3, #24]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4413      	add	r3, r2
 800977a:	1e5a      	subs	r2, r3, #1
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	fbb2 f3f3 	udiv	r3, r2, r3
 8009784:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	68db      	ldr	r3, [r3, #12]
 800978a:	8afa      	ldrh	r2, [r7, #22]
 800978c:	fb03 f202 	mul.w	r2, r3, r2
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009794:	69bb      	ldr	r3, [r7, #24]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	4413      	add	r3, r2
 800979c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a0:	691a      	ldr	r2, [r3, #16]
 80097a2:	8afb      	ldrh	r3, [r7, #22]
 80097a4:	04d9      	lsls	r1, r3, #19
 80097a6:	4b3a      	ldr	r3, [pc, #232]	; (8009890 <USB_EPStartXfer+0x49c>)
 80097a8:	400b      	ands	r3, r1
 80097aa:	69b9      	ldr	r1, [r7, #24]
 80097ac:	0148      	lsls	r0, r1, #5
 80097ae:	69f9      	ldr	r1, [r7, #28]
 80097b0:	4401      	add	r1, r0
 80097b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097b6:	4313      	orrs	r3, r2
 80097b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80097ba:	69bb      	ldr	r3, [r7, #24]
 80097bc:	015a      	lsls	r2, r3, #5
 80097be:	69fb      	ldr	r3, [r7, #28]
 80097c0:	4413      	add	r3, r2
 80097c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c6:	691a      	ldr	r2, [r3, #16]
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	69db      	ldr	r3, [r3, #28]
 80097cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097d0:	69b9      	ldr	r1, [r7, #24]
 80097d2:	0148      	lsls	r0, r1, #5
 80097d4:	69f9      	ldr	r1, [r7, #28]
 80097d6:	4401      	add	r1, r0
 80097d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097dc:	4313      	orrs	r3, r2
 80097de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80097e0:	79fb      	ldrb	r3, [r7, #7]
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d10d      	bne.n	8009802 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d009      	beq.n	8009802 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	6919      	ldr	r1, [r3, #16]
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	015a      	lsls	r2, r3, #5
 80097f6:	69fb      	ldr	r3, [r7, #28]
 80097f8:	4413      	add	r3, r2
 80097fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097fe:	460a      	mov	r2, r1
 8009800:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	791b      	ldrb	r3, [r3, #4]
 8009806:	2b01      	cmp	r3, #1
 8009808:	d128      	bne.n	800985c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800980a:	69fb      	ldr	r3, [r7, #28]
 800980c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009810:	689b      	ldr	r3, [r3, #8]
 8009812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009816:	2b00      	cmp	r3, #0
 8009818:	d110      	bne.n	800983c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	015a      	lsls	r2, r3, #5
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	4413      	add	r3, r2
 8009822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	0151      	lsls	r1, r2, #5
 800982c:	69fa      	ldr	r2, [r7, #28]
 800982e:	440a      	add	r2, r1
 8009830:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009834:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009838:	6013      	str	r3, [r2, #0]
 800983a:	e00f      	b.n	800985c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800983c:	69bb      	ldr	r3, [r7, #24]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	69fb      	ldr	r3, [r7, #28]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	69ba      	ldr	r2, [r7, #24]
 800984c:	0151      	lsls	r1, r2, #5
 800984e:	69fa      	ldr	r2, [r7, #28]
 8009850:	440a      	add	r2, r1
 8009852:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800985a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800985c:	69bb      	ldr	r3, [r7, #24]
 800985e:	015a      	lsls	r2, r3, #5
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	4413      	add	r3, r2
 8009864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	69ba      	ldr	r2, [r7, #24]
 800986c:	0151      	lsls	r1, r2, #5
 800986e:	69fa      	ldr	r2, [r7, #28]
 8009870:	440a      	add	r2, r1
 8009872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800987a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3720      	adds	r7, #32
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	bf00      	nop
 8009888:	fff80000 	.word	0xfff80000
 800988c:	e007ffff 	.word	0xe007ffff
 8009890:	1ff80000 	.word	0x1ff80000

08009894 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009894:	b480      	push	{r7}
 8009896:	b087      	sub	sp, #28
 8009898:	af00      	add	r7, sp, #0
 800989a:	60f8      	str	r0, [r7, #12]
 800989c:	60b9      	str	r1, [r7, #8]
 800989e:	4613      	mov	r3, r2
 80098a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	785b      	ldrb	r3, [r3, #1]
 80098b0:	2b01      	cmp	r3, #1
 80098b2:	f040 80ce 	bne.w	8009a52 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80098b6:	68bb      	ldr	r3, [r7, #8]
 80098b8:	699b      	ldr	r3, [r3, #24]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d132      	bne.n	8009924 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	015a      	lsls	r2, r3, #5
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	4413      	add	r3, r2
 80098c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ca:	691a      	ldr	r2, [r3, #16]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	0159      	lsls	r1, r3, #5
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	440b      	add	r3, r1
 80098d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098d8:	4619      	mov	r1, r3
 80098da:	4b9a      	ldr	r3, [pc, #616]	; (8009b44 <USB_EP0StartXfer+0x2b0>)
 80098dc:	4013      	ands	r3, r2
 80098de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	0151      	lsls	r1, r2, #5
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	440a      	add	r2, r1
 80098f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80098fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80098fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	015a      	lsls	r2, r3, #5
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	4413      	add	r3, r2
 8009908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800990c:	691a      	ldr	r2, [r3, #16]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	0159      	lsls	r1, r3, #5
 8009912:	697b      	ldr	r3, [r7, #20]
 8009914:	440b      	add	r3, r1
 8009916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800991a:	4619      	mov	r1, r3
 800991c:	4b8a      	ldr	r3, [pc, #552]	; (8009b48 <USB_EP0StartXfer+0x2b4>)
 800991e:	4013      	ands	r3, r2
 8009920:	610b      	str	r3, [r1, #16]
 8009922:	e04e      	b.n	80099c2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	697b      	ldr	r3, [r7, #20]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009930:	691a      	ldr	r2, [r3, #16]
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	0159      	lsls	r1, r3, #5
 8009936:	697b      	ldr	r3, [r7, #20]
 8009938:	440b      	add	r3, r1
 800993a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800993e:	4619      	mov	r1, r3
 8009940:	4b81      	ldr	r3, [pc, #516]	; (8009b48 <USB_EP0StartXfer+0x2b4>)
 8009942:	4013      	ands	r3, r2
 8009944:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009952:	691a      	ldr	r2, [r3, #16]
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	0159      	lsls	r1, r3, #5
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	440b      	add	r3, r1
 800995c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009960:	4619      	mov	r1, r3
 8009962:	4b78      	ldr	r3, [pc, #480]	; (8009b44 <USB_EP0StartXfer+0x2b0>)
 8009964:	4013      	ands	r3, r2
 8009966:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	699a      	ldr	r2, [r3, #24]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	429a      	cmp	r2, r3
 8009972:	d903      	bls.n	800997c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	015a      	lsls	r2, r3, #5
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	4413      	add	r3, r2
 8009984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009988:	691b      	ldr	r3, [r3, #16]
 800998a:	693a      	ldr	r2, [r7, #16]
 800998c:	0151      	lsls	r1, r2, #5
 800998e:	697a      	ldr	r2, [r7, #20]
 8009990:	440a      	add	r2, r1
 8009992:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009996:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800999a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800999c:	693b      	ldr	r3, [r7, #16]
 800999e:	015a      	lsls	r2, r3, #5
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	4413      	add	r3, r2
 80099a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a8:	691a      	ldr	r2, [r3, #16]
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	699b      	ldr	r3, [r3, #24]
 80099ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80099b2:	6939      	ldr	r1, [r7, #16]
 80099b4:	0148      	lsls	r0, r1, #5
 80099b6:	6979      	ldr	r1, [r7, #20]
 80099b8:	4401      	add	r1, r0
 80099ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80099be:	4313      	orrs	r3, r2
 80099c0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80099c2:	79fb      	ldrb	r3, [r7, #7]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d11e      	bne.n	8009a06 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80099c8:	68bb      	ldr	r3, [r7, #8]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d009      	beq.n	80099e4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099dc:	461a      	mov	r2, r3
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	015a      	lsls	r2, r3, #5
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	693a      	ldr	r2, [r7, #16]
 80099f4:	0151      	lsls	r1, r2, #5
 80099f6:	697a      	ldr	r2, [r7, #20]
 80099f8:	440a      	add	r2, r1
 80099fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099fe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a02:	6013      	str	r3, [r2, #0]
 8009a04:	e097      	b.n	8009b36 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	015a      	lsls	r2, r3, #5
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	4413      	add	r3, r2
 8009a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	693a      	ldr	r2, [r7, #16]
 8009a16:	0151      	lsls	r1, r2, #5
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	440a      	add	r2, r1
 8009a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a20:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a24:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	699b      	ldr	r3, [r3, #24]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	f000 8083 	beq.w	8009b36 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	f003 030f 	and.w	r3, r3, #15
 8009a40:	2101      	movs	r1, #1
 8009a42:	fa01 f303 	lsl.w	r3, r1, r3
 8009a46:	6979      	ldr	r1, [r7, #20]
 8009a48:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009a4c:	4313      	orrs	r3, r2
 8009a4e:	634b      	str	r3, [r1, #52]	; 0x34
 8009a50:	e071      	b.n	8009b36 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a5e:	691a      	ldr	r2, [r3, #16]
 8009a60:	693b      	ldr	r3, [r7, #16]
 8009a62:	0159      	lsls	r1, r3, #5
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	440b      	add	r3, r1
 8009a68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4b36      	ldr	r3, [pc, #216]	; (8009b48 <USB_EP0StartXfer+0x2b4>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009a74:	693b      	ldr	r3, [r7, #16]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a80:	691a      	ldr	r2, [r3, #16]
 8009a82:	693b      	ldr	r3, [r7, #16]
 8009a84:	0159      	lsls	r1, r3, #5
 8009a86:	697b      	ldr	r3, [r7, #20]
 8009a88:	440b      	add	r3, r1
 8009a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a8e:	4619      	mov	r1, r3
 8009a90:	4b2c      	ldr	r3, [pc, #176]	; (8009b44 <USB_EP0StartXfer+0x2b0>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d003      	beq.n	8009aa6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	68da      	ldr	r2, [r3, #12]
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	68da      	ldr	r2, [r3, #12]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	015a      	lsls	r2, r3, #5
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	693a      	ldr	r2, [r7, #16]
 8009abe:	0151      	lsls	r1, r2, #5
 8009ac0:	697a      	ldr	r2, [r7, #20]
 8009ac2:	440a      	add	r2, r1
 8009ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009acc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	015a      	lsls	r2, r3, #5
 8009ad2:	697b      	ldr	r3, [r7, #20]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ada:	691a      	ldr	r2, [r3, #16]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ae4:	6939      	ldr	r1, [r7, #16]
 8009ae6:	0148      	lsls	r0, r1, #5
 8009ae8:	6979      	ldr	r1, [r7, #20]
 8009aea:	4401      	add	r1, r0
 8009aec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009af0:	4313      	orrs	r3, r2
 8009af2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009af4:	79fb      	ldrb	r3, [r7, #7]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d10d      	bne.n	8009b16 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d009      	beq.n	8009b16 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	6919      	ldr	r1, [r3, #16]
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	015a      	lsls	r2, r3, #5
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	4413      	add	r3, r2
 8009b0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b12:	460a      	mov	r2, r1
 8009b14:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009b16:	693b      	ldr	r3, [r7, #16]
 8009b18:	015a      	lsls	r2, r3, #5
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	0151      	lsls	r1, r2, #5
 8009b28:	697a      	ldr	r2, [r7, #20]
 8009b2a:	440a      	add	r2, r1
 8009b2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b30:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009b34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009b36:	2300      	movs	r3, #0
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	371c      	adds	r7, #28
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b42:	4770      	bx	lr
 8009b44:	e007ffff 	.word	0xe007ffff
 8009b48:	fff80000 	.word	0xfff80000

08009b4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b087      	sub	sp, #28
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009b56:	2300      	movs	r3, #0
 8009b58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	785b      	ldrb	r3, [r3, #1]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d14a      	bne.n	8009c00 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	015a      	lsls	r2, r3, #5
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	4413      	add	r3, r2
 8009b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b82:	f040 8086 	bne.w	8009c92 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	781b      	ldrb	r3, [r3, #0]
 8009b8a:	015a      	lsls	r2, r3, #5
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	4413      	add	r3, r2
 8009b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	7812      	ldrb	r2, [r2, #0]
 8009b9a:	0151      	lsls	r1, r2, #5
 8009b9c:	693a      	ldr	r2, [r7, #16]
 8009b9e:	440a      	add	r2, r1
 8009ba0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ba8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	781b      	ldrb	r3, [r3, #0]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	693b      	ldr	r3, [r7, #16]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	7812      	ldrb	r2, [r2, #0]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	693a      	ldr	r2, [r7, #16]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009bc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009bcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f242 7210 	movw	r2, #10000	; 0x2710
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d902      	bls.n	8009be4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	75fb      	strb	r3, [r7, #23]
          break;
 8009be2:	e056      	b.n	8009c92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	015a      	lsls	r2, r3, #5
 8009bea:	693b      	ldr	r3, [r7, #16]
 8009bec:	4413      	add	r3, r2
 8009bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009bfc:	d0e7      	beq.n	8009bce <USB_EPStopXfer+0x82>
 8009bfe:	e048      	b.n	8009c92 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	781b      	ldrb	r3, [r3, #0]
 8009c04:	015a      	lsls	r2, r3, #5
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	4413      	add	r3, r2
 8009c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c18:	d13b      	bne.n	8009c92 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	781b      	ldrb	r3, [r3, #0]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	683a      	ldr	r2, [r7, #0]
 8009c2c:	7812      	ldrb	r2, [r2, #0]
 8009c2e:	0151      	lsls	r1, r2, #5
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	440a      	add	r2, r1
 8009c34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c3c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009c3e:	683b      	ldr	r3, [r7, #0]
 8009c40:	781b      	ldrb	r3, [r3, #0]
 8009c42:	015a      	lsls	r2, r3, #5
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	4413      	add	r3, r2
 8009c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	683a      	ldr	r2, [r7, #0]
 8009c50:	7812      	ldrb	r2, [r2, #0]
 8009c52:	0151      	lsls	r1, r2, #5
 8009c54:	693a      	ldr	r2, [r7, #16]
 8009c56:	440a      	add	r2, r1
 8009c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009c5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c60:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	3301      	adds	r3, #1
 8009c66:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d902      	bls.n	8009c78 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009c72:	2301      	movs	r3, #1
 8009c74:	75fb      	strb	r3, [r7, #23]
          break;
 8009c76:	e00c      	b.n	8009c92 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	781b      	ldrb	r3, [r3, #0]
 8009c7c:	015a      	lsls	r2, r3, #5
 8009c7e:	693b      	ldr	r3, [r7, #16]
 8009c80:	4413      	add	r3, r2
 8009c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c90:	d0e7      	beq.n	8009c62 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	371c      	adds	r7, #28
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b089      	sub	sp, #36	; 0x24
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	60f8      	str	r0, [r7, #12]
 8009ca8:	60b9      	str	r1, [r7, #8]
 8009caa:	4611      	mov	r1, r2
 8009cac:	461a      	mov	r2, r3
 8009cae:	460b      	mov	r3, r1
 8009cb0:	71fb      	strb	r3, [r7, #7]
 8009cb2:	4613      	mov	r3, r2
 8009cb4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d123      	bne.n	8009d0e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009cc6:	88bb      	ldrh	r3, [r7, #4]
 8009cc8:	3303      	adds	r3, #3
 8009cca:	089b      	lsrs	r3, r3, #2
 8009ccc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009cce:	2300      	movs	r3, #0
 8009cd0:	61bb      	str	r3, [r7, #24]
 8009cd2:	e018      	b.n	8009d06 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009cd4:	79fb      	ldrb	r3, [r7, #7]
 8009cd6:	031a      	lsls	r2, r3, #12
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	4413      	add	r3, r2
 8009cdc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	3301      	adds	r3, #1
 8009cec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cee:	69fb      	ldr	r3, [r7, #28]
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cf4:	69fb      	ldr	r3, [r7, #28]
 8009cf6:	3301      	adds	r3, #1
 8009cf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d00:	69bb      	ldr	r3, [r7, #24]
 8009d02:	3301      	adds	r3, #1
 8009d04:	61bb      	str	r3, [r7, #24]
 8009d06:	69ba      	ldr	r2, [r7, #24]
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	429a      	cmp	r2, r3
 8009d0c:	d3e2      	bcc.n	8009cd4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3724      	adds	r7, #36	; 0x24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b08b      	sub	sp, #44	; 0x2c
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	60f8      	str	r0, [r7, #12]
 8009d24:	60b9      	str	r1, [r7, #8]
 8009d26:	4613      	mov	r3, r2
 8009d28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009d32:	88fb      	ldrh	r3, [r7, #6]
 8009d34:	089b      	lsrs	r3, r3, #2
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009d3a:	88fb      	ldrh	r3, [r7, #6]
 8009d3c:	f003 0303 	and.w	r3, r3, #3
 8009d40:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009d42:	2300      	movs	r3, #0
 8009d44:	623b      	str	r3, [r7, #32]
 8009d46:	e014      	b.n	8009d72 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	601a      	str	r2, [r3, #0]
    pDest++;
 8009d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d56:	3301      	adds	r3, #1
 8009d58:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	3301      	adds	r3, #1
 8009d64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d68:	3301      	adds	r3, #1
 8009d6a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009d6c:	6a3b      	ldr	r3, [r7, #32]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	623b      	str	r3, [r7, #32]
 8009d72:	6a3a      	ldr	r2, [r7, #32]
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	429a      	cmp	r2, r3
 8009d78:	d3e6      	bcc.n	8009d48 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009d7a:	8bfb      	ldrh	r3, [r7, #30]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d01e      	beq.n	8009dbe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009d80:	2300      	movs	r3, #0
 8009d82:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009d84:	69bb      	ldr	r3, [r7, #24]
 8009d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	f107 0310 	add.w	r3, r7, #16
 8009d90:	6812      	ldr	r2, [r2, #0]
 8009d92:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009d94:	693a      	ldr	r2, [r7, #16]
 8009d96:	6a3b      	ldr	r3, [r7, #32]
 8009d98:	b2db      	uxtb	r3, r3
 8009d9a:	00db      	lsls	r3, r3, #3
 8009d9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009da0:	b2da      	uxtb	r2, r3
 8009da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da4:	701a      	strb	r2, [r3, #0]
      i++;
 8009da6:	6a3b      	ldr	r3, [r7, #32]
 8009da8:	3301      	adds	r3, #1
 8009daa:	623b      	str	r3, [r7, #32]
      pDest++;
 8009dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dae:	3301      	adds	r3, #1
 8009db0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009db2:	8bfb      	ldrh	r3, [r7, #30]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009db8:	8bfb      	ldrh	r3, [r7, #30]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d1ea      	bne.n	8009d94 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	372c      	adds	r7, #44	; 0x2c
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b085      	sub	sp, #20
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009dda:	683b      	ldr	r3, [r7, #0]
 8009ddc:	781b      	ldrb	r3, [r3, #0]
 8009dde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	785b      	ldrb	r3, [r3, #1]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d12c      	bne.n	8009e42 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	db12      	blt.n	8009e20 <USB_EPSetStall+0x54>
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d00f      	beq.n	8009e20 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	015a      	lsls	r2, r3, #5
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4413      	add	r3, r2
 8009e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68ba      	ldr	r2, [r7, #8]
 8009e10:	0151      	lsls	r1, r2, #5
 8009e12:	68fa      	ldr	r2, [r7, #12]
 8009e14:	440a      	add	r2, r1
 8009e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e1a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e1e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	015a      	lsls	r2, r3, #5
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	4413      	add	r3, r2
 8009e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	68ba      	ldr	r2, [r7, #8]
 8009e30:	0151      	lsls	r1, r2, #5
 8009e32:	68fa      	ldr	r2, [r7, #12]
 8009e34:	440a      	add	r2, r1
 8009e36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e3e:	6013      	str	r3, [r2, #0]
 8009e40:	e02b      	b.n	8009e9a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	015a      	lsls	r2, r3, #5
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	4413      	add	r3, r2
 8009e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	db12      	blt.n	8009e7a <USB_EPSetStall+0xae>
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d00f      	beq.n	8009e7a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	015a      	lsls	r2, r3, #5
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	4413      	add	r3, r2
 8009e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68ba      	ldr	r2, [r7, #8]
 8009e6a:	0151      	lsls	r1, r2, #5
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	440a      	add	r2, r1
 8009e70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009e78:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	68fa      	ldr	r2, [r7, #12]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009e94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009e98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3714      	adds	r7, #20
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b085      	sub	sp, #20
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
 8009eb0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	781b      	ldrb	r3, [r3, #0]
 8009eba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	785b      	ldrb	r3, [r3, #1]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d128      	bne.n	8009f16 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	015a      	lsls	r2, r3, #5
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	4413      	add	r3, r2
 8009ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	68ba      	ldr	r2, [r7, #8]
 8009ed4:	0151      	lsls	r1, r2, #5
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	440a      	add	r2, r1
 8009eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ede:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ee2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009ee4:	683b      	ldr	r3, [r7, #0]
 8009ee6:	791b      	ldrb	r3, [r3, #4]
 8009ee8:	2b03      	cmp	r3, #3
 8009eea:	d003      	beq.n	8009ef4 <USB_EPClearStall+0x4c>
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	791b      	ldrb	r3, [r3, #4]
 8009ef0:	2b02      	cmp	r3, #2
 8009ef2:	d138      	bne.n	8009f66 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ef4:	68bb      	ldr	r3, [r7, #8]
 8009ef6:	015a      	lsls	r2, r3, #5
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	4413      	add	r3, r2
 8009efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68ba      	ldr	r2, [r7, #8]
 8009f04:	0151      	lsls	r1, r2, #5
 8009f06:	68fa      	ldr	r2, [r7, #12]
 8009f08:	440a      	add	r2, r1
 8009f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f12:	6013      	str	r3, [r2, #0]
 8009f14:	e027      	b.n	8009f66 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	015a      	lsls	r2, r3, #5
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	4413      	add	r3, r2
 8009f1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68ba      	ldr	r2, [r7, #8]
 8009f26:	0151      	lsls	r1, r2, #5
 8009f28:	68fa      	ldr	r2, [r7, #12]
 8009f2a:	440a      	add	r2, r1
 8009f2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f30:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f34:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	791b      	ldrb	r3, [r3, #4]
 8009f3a:	2b03      	cmp	r3, #3
 8009f3c:	d003      	beq.n	8009f46 <USB_EPClearStall+0x9e>
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	791b      	ldrb	r3, [r3, #4]
 8009f42:	2b02      	cmp	r3, #2
 8009f44:	d10f      	bne.n	8009f66 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f46:	68bb      	ldr	r3, [r7, #8]
 8009f48:	015a      	lsls	r2, r3, #5
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	4413      	add	r3, r2
 8009f4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	0151      	lsls	r1, r2, #5
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	440a      	add	r2, r1
 8009f5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009f64:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009f66:	2300      	movs	r3, #0
}
 8009f68:	4618      	mov	r0, r3
 8009f6a:	3714      	adds	r7, #20
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	460b      	mov	r3, r1
 8009f7e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f92:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009f96:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	78fb      	ldrb	r3, [r7, #3]
 8009fa2:	011b      	lsls	r3, r3, #4
 8009fa4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009fa8:	68f9      	ldr	r1, [r7, #12]
 8009faa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr

08009fc0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009fc0:	b480      	push	{r7}
 8009fc2:	b085      	sub	sp, #20
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	68fa      	ldr	r2, [r7, #12]
 8009fd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009fda:	f023 0303 	bic.w	r3, r3, #3
 8009fde:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009fee:	f023 0302 	bic.w	r3, r3, #2
 8009ff2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009ff4:	2300      	movs	r3, #0
}
 8009ff6:	4618      	mov	r0, r3
 8009ff8:	3714      	adds	r7, #20
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a000:	4770      	bx	lr

0800a002 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a002:	b480      	push	{r7}
 800a004:	b085      	sub	sp, #20
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68fa      	ldr	r2, [r7, #12]
 800a018:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a01c:	f023 0303 	bic.w	r3, r3, #3
 800a020:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	68fa      	ldr	r2, [r7, #12]
 800a02c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a030:	f043 0302 	orr.w	r3, r3, #2
 800a034:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3714      	adds	r7, #20
 800a03c:	46bd      	mov	sp, r7
 800a03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a042:	4770      	bx	lr

0800a044 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a044:	b480      	push	{r7}
 800a046:	b085      	sub	sp, #20
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	695b      	ldr	r3, [r3, #20]
 800a050:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	699b      	ldr	r3, [r3, #24]
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	4013      	ands	r3, r2
 800a05a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a05c:	68fb      	ldr	r3, [r7, #12]
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3714      	adds	r7, #20
 800a062:	46bd      	mov	sp, r7
 800a064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a068:	4770      	bx	lr

0800a06a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a06a:	b480      	push	{r7}
 800a06c:	b085      	sub	sp, #20
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a07c:	699b      	ldr	r3, [r3, #24]
 800a07e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a086:	69db      	ldr	r3, [r3, #28]
 800a088:	68ba      	ldr	r2, [r7, #8]
 800a08a:	4013      	ands	r3, r2
 800a08c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a08e:	68bb      	ldr	r3, [r7, #8]
 800a090:	0c1b      	lsrs	r3, r3, #16
}
 800a092:	4618      	mov	r0, r3
 800a094:	3714      	adds	r7, #20
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b0:	699b      	ldr	r3, [r3, #24]
 800a0b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ba:	69db      	ldr	r3, [r3, #28]
 800a0bc:	68ba      	ldr	r2, [r7, #8]
 800a0be:	4013      	ands	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	b29b      	uxth	r3, r3
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3714      	adds	r7, #20
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d0:	4770      	bx	lr

0800a0d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a0d2:	b480      	push	{r7}
 800a0d4:	b085      	sub	sp, #20
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	460b      	mov	r3, r1
 800a0dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	015a      	lsls	r2, r3, #5
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	4413      	add	r3, r2
 800a0ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0f8:	695b      	ldr	r3, [r3, #20]
 800a0fa:	68ba      	ldr	r2, [r7, #8]
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a100:	68bb      	ldr	r3, [r7, #8]
}
 800a102:	4618      	mov	r0, r3
 800a104:	3714      	adds	r7, #20
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr

0800a10e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a10e:	b480      	push	{r7}
 800a110:	b087      	sub	sp, #28
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
 800a116:	460b      	mov	r3, r1
 800a118:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a12e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a130:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a132:	78fb      	ldrb	r3, [r7, #3]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	fa22 f303 	lsr.w	r3, r2, r3
 800a13e:	01db      	lsls	r3, r3, #7
 800a140:	b2db      	uxtb	r3, r3
 800a142:	693a      	ldr	r2, [r7, #16]
 800a144:	4313      	orrs	r3, r2
 800a146:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a148:	78fb      	ldrb	r3, [r7, #3]
 800a14a:	015a      	lsls	r2, r3, #5
 800a14c:	697b      	ldr	r3, [r7, #20]
 800a14e:	4413      	add	r3, r2
 800a150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	4013      	ands	r3, r2
 800a15a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a15c:	68bb      	ldr	r3, [r7, #8]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr

0800a16a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a16a:	b480      	push	{r7}
 800a16c:	b083      	sub	sp, #12
 800a16e:	af00      	add	r7, sp, #0
 800a170:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	695b      	ldr	r3, [r3, #20]
 800a176:	f003 0301 	and.w	r3, r3, #1
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	370c      	adds	r7, #12
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr
	...

0800a188 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a188:	b480      	push	{r7}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a2:	4619      	mov	r1, r3
 800a1a4:	4b09      	ldr	r3, [pc, #36]	; (800a1cc <USB_ActivateSetup+0x44>)
 800a1a6:	4013      	ands	r3, r2
 800a1a8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a1b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a1bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	3714      	adds	r7, #20
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	fffff800 	.word	0xfffff800

0800a1d0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b087      	sub	sp, #28
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	460b      	mov	r3, r1
 800a1da:	607a      	str	r2, [r7, #4]
 800a1dc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	333c      	adds	r3, #60	; 0x3c
 800a1e6:	3304      	adds	r3, #4
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a1ec:	693b      	ldr	r3, [r7, #16]
 800a1ee:	4a26      	ldr	r2, [pc, #152]	; (800a288 <USB_EP0_OutStart+0xb8>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d90a      	bls.n	800a20a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a200:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a204:	d101      	bne.n	800a20a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	e037      	b.n	800a27a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a210:	461a      	mov	r2, r3
 800a212:	2300      	movs	r3, #0
 800a214:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	697a      	ldr	r2, [r7, #20]
 800a220:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a224:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a228:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a238:	f043 0318 	orr.w	r3, r3, #24
 800a23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	697a      	ldr	r2, [r7, #20]
 800a248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a24c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a250:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a252:	7afb      	ldrb	r3, [r7, #11]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d10f      	bne.n	800a278 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a25e:	461a      	mov	r2, r3
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a264:	697b      	ldr	r3, [r7, #20]
 800a266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	697a      	ldr	r2, [r7, #20]
 800a26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a272:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a276:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	371c      	adds	r7, #28
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	4f54300a 	.word	0x4f54300a

0800a28c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a294:	2300      	movs	r3, #0
 800a296:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	3301      	adds	r3, #1
 800a29c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	4a13      	ldr	r2, [pc, #76]	; (800a2f0 <USB_CoreReset+0x64>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d901      	bls.n	800a2aa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a2a6:	2303      	movs	r3, #3
 800a2a8:	e01b      	b.n	800a2e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	691b      	ldr	r3, [r3, #16]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	daf2      	bge.n	800a298 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	691b      	ldr	r3, [r3, #16]
 800a2ba:	f043 0201 	orr.w	r2, r3, #1
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	3301      	adds	r3, #1
 800a2c6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4a09      	ldr	r2, [pc, #36]	; (800a2f0 <USB_CoreReset+0x64>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d901      	bls.n	800a2d4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a2d0:	2303      	movs	r3, #3
 800a2d2:	e006      	b.n	800a2e2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	691b      	ldr	r3, [r3, #16]
 800a2d8:	f003 0301 	and.w	r3, r3, #1
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d0f0      	beq.n	800a2c2 <USB_CoreReset+0x36>

  return HAL_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3714      	adds	r7, #20
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr
 800a2ee:	bf00      	nop
 800a2f0:	00030d40 	.word	0x00030d40

0800a2f4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a300:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800a304:	f002 fcfe 	bl	800cd04 <malloc>
 800a308:	4603      	mov	r3, r0
 800a30a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d109      	bne.n	800a326 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	32b0      	adds	r2, #176	; 0xb0
 800a31c:	2100      	movs	r1, #0
 800a31e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a322:	2302      	movs	r3, #2
 800a324:	e0d4      	b.n	800a4d0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a326:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800a32a:	2100      	movs	r1, #0
 800a32c:	68f8      	ldr	r0, [r7, #12]
 800a32e:	f002 fda5 	bl	800ce7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	32b0      	adds	r2, #176	; 0xb0
 800a33c:	68f9      	ldr	r1, [r7, #12]
 800a33e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	32b0      	adds	r2, #176	; 0xb0
 800a34c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	7c1b      	ldrb	r3, [r3, #16]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d138      	bne.n	800a3d0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a35e:	4b5e      	ldr	r3, [pc, #376]	; (800a4d8 <USBD_CDC_Init+0x1e4>)
 800a360:	7819      	ldrb	r1, [r3, #0]
 800a362:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a366:	2202      	movs	r2, #2
 800a368:	6878      	ldr	r0, [r7, #4]
 800a36a:	f002 fb28 	bl	800c9be <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a36e:	4b5a      	ldr	r3, [pc, #360]	; (800a4d8 <USBD_CDC_Init+0x1e4>)
 800a370:	781b      	ldrb	r3, [r3, #0]
 800a372:	f003 020f 	and.w	r2, r3, #15
 800a376:	6879      	ldr	r1, [r7, #4]
 800a378:	4613      	mov	r3, r2
 800a37a:	009b      	lsls	r3, r3, #2
 800a37c:	4413      	add	r3, r2
 800a37e:	009b      	lsls	r3, r3, #2
 800a380:	440b      	add	r3, r1
 800a382:	3324      	adds	r3, #36	; 0x24
 800a384:	2201      	movs	r2, #1
 800a386:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a388:	4b54      	ldr	r3, [pc, #336]	; (800a4dc <USBD_CDC_Init+0x1e8>)
 800a38a:	7819      	ldrb	r1, [r3, #0]
 800a38c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a390:	2202      	movs	r2, #2
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f002 fb13 	bl	800c9be <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a398:	4b50      	ldr	r3, [pc, #320]	; (800a4dc <USBD_CDC_Init+0x1e8>)
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	f003 020f 	and.w	r2, r3, #15
 800a3a0:	6879      	ldr	r1, [r7, #4]
 800a3a2:	4613      	mov	r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	009b      	lsls	r3, r3, #2
 800a3aa:	440b      	add	r3, r1
 800a3ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a3b4:	4b4a      	ldr	r3, [pc, #296]	; (800a4e0 <USBD_CDC_Init+0x1ec>)
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	f003 020f 	and.w	r2, r3, #15
 800a3bc:	6879      	ldr	r1, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	440b      	add	r3, r1
 800a3c8:	3326      	adds	r3, #38	; 0x26
 800a3ca:	2210      	movs	r2, #16
 800a3cc:	801a      	strh	r2, [r3, #0]
 800a3ce:	e035      	b.n	800a43c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a3d0:	4b41      	ldr	r3, [pc, #260]	; (800a4d8 <USBD_CDC_Init+0x1e4>)
 800a3d2:	7819      	ldrb	r1, [r3, #0]
 800a3d4:	2340      	movs	r3, #64	; 0x40
 800a3d6:	2202      	movs	r2, #2
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f002 faf0 	bl	800c9be <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a3de:	4b3e      	ldr	r3, [pc, #248]	; (800a4d8 <USBD_CDC_Init+0x1e4>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	f003 020f 	and.w	r2, r3, #15
 800a3e6:	6879      	ldr	r1, [r7, #4]
 800a3e8:	4613      	mov	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	4413      	add	r3, r2
 800a3ee:	009b      	lsls	r3, r3, #2
 800a3f0:	440b      	add	r3, r1
 800a3f2:	3324      	adds	r3, #36	; 0x24
 800a3f4:	2201      	movs	r2, #1
 800a3f6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a3f8:	4b38      	ldr	r3, [pc, #224]	; (800a4dc <USBD_CDC_Init+0x1e8>)
 800a3fa:	7819      	ldrb	r1, [r3, #0]
 800a3fc:	2340      	movs	r3, #64	; 0x40
 800a3fe:	2202      	movs	r2, #2
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f002 fadc 	bl	800c9be <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a406:	4b35      	ldr	r3, [pc, #212]	; (800a4dc <USBD_CDC_Init+0x1e8>)
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	f003 020f 	and.w	r2, r3, #15
 800a40e:	6879      	ldr	r1, [r7, #4]
 800a410:	4613      	mov	r3, r2
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4413      	add	r3, r2
 800a416:	009b      	lsls	r3, r3, #2
 800a418:	440b      	add	r3, r1
 800a41a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a41e:	2201      	movs	r2, #1
 800a420:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a422:	4b2f      	ldr	r3, [pc, #188]	; (800a4e0 <USBD_CDC_Init+0x1ec>)
 800a424:	781b      	ldrb	r3, [r3, #0]
 800a426:	f003 020f 	and.w	r2, r3, #15
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	4613      	mov	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	4413      	add	r3, r2
 800a432:	009b      	lsls	r3, r3, #2
 800a434:	440b      	add	r3, r1
 800a436:	3326      	adds	r3, #38	; 0x26
 800a438:	2210      	movs	r2, #16
 800a43a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a43c:	4b28      	ldr	r3, [pc, #160]	; (800a4e0 <USBD_CDC_Init+0x1ec>)
 800a43e:	7819      	ldrb	r1, [r3, #0]
 800a440:	2308      	movs	r3, #8
 800a442:	2203      	movs	r2, #3
 800a444:	6878      	ldr	r0, [r7, #4]
 800a446:	f002 faba 	bl	800c9be <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a44a:	4b25      	ldr	r3, [pc, #148]	; (800a4e0 <USBD_CDC_Init+0x1ec>)
 800a44c:	781b      	ldrb	r3, [r3, #0]
 800a44e:	f003 020f 	and.w	r2, r3, #15
 800a452:	6879      	ldr	r1, [r7, #4]
 800a454:	4613      	mov	r3, r2
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	009b      	lsls	r3, r3, #2
 800a45c:	440b      	add	r3, r1
 800a45e:	3324      	adds	r3, #36	; 0x24
 800a460:	2201      	movs	r2, #1
 800a462:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	2200      	movs	r2, #0
 800a468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	33b0      	adds	r3, #176	; 0xb0
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	4413      	add	r3, r2
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	2200      	movs	r2, #0
 800a484:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	2200      	movs	r2, #0
 800a48c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800a496:	2b00      	cmp	r3, #0
 800a498:	d101      	bne.n	800a49e <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800a49a:	2302      	movs	r3, #2
 800a49c:	e018      	b.n	800a4d0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	7c1b      	ldrb	r3, [r3, #16]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d10a      	bne.n	800a4bc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4a6:	4b0d      	ldr	r3, [pc, #52]	; (800a4dc <USBD_CDC_Init+0x1e8>)
 800a4a8:	7819      	ldrb	r1, [r3, #0]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a4b4:	6878      	ldr	r0, [r7, #4]
 800a4b6:	f002 fb71 	bl	800cb9c <USBD_LL_PrepareReceive>
 800a4ba:	e008      	b.n	800a4ce <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a4bc:	4b07      	ldr	r3, [pc, #28]	; (800a4dc <USBD_CDC_Init+0x1e8>)
 800a4be:	7819      	ldrb	r1, [r3, #0]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a4c6:	2340      	movs	r3, #64	; 0x40
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f002 fb67 	bl	800cb9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3710      	adds	r7, #16
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	20000097 	.word	0x20000097
 800a4dc:	20000098 	.word	0x20000098
 800a4e0:	20000099 	.word	0x20000099

0800a4e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a4f0:	4b3a      	ldr	r3, [pc, #232]	; (800a5dc <USBD_CDC_DeInit+0xf8>)
 800a4f2:	781b      	ldrb	r3, [r3, #0]
 800a4f4:	4619      	mov	r1, r3
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f002 fa87 	bl	800ca0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a4fc:	4b37      	ldr	r3, [pc, #220]	; (800a5dc <USBD_CDC_DeInit+0xf8>)
 800a4fe:	781b      	ldrb	r3, [r3, #0]
 800a500:	f003 020f 	and.w	r2, r3, #15
 800a504:	6879      	ldr	r1, [r7, #4]
 800a506:	4613      	mov	r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	4413      	add	r3, r2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	440b      	add	r3, r1
 800a510:	3324      	adds	r3, #36	; 0x24
 800a512:	2200      	movs	r2, #0
 800a514:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a516:	4b32      	ldr	r3, [pc, #200]	; (800a5e0 <USBD_CDC_DeInit+0xfc>)
 800a518:	781b      	ldrb	r3, [r3, #0]
 800a51a:	4619      	mov	r1, r3
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f002 fa74 	bl	800ca0a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a522:	4b2f      	ldr	r3, [pc, #188]	; (800a5e0 <USBD_CDC_DeInit+0xfc>)
 800a524:	781b      	ldrb	r3, [r3, #0]
 800a526:	f003 020f 	and.w	r2, r3, #15
 800a52a:	6879      	ldr	r1, [r7, #4]
 800a52c:	4613      	mov	r3, r2
 800a52e:	009b      	lsls	r3, r3, #2
 800a530:	4413      	add	r3, r2
 800a532:	009b      	lsls	r3, r3, #2
 800a534:	440b      	add	r3, r1
 800a536:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a53a:	2200      	movs	r2, #0
 800a53c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a53e:	4b29      	ldr	r3, [pc, #164]	; (800a5e4 <USBD_CDC_DeInit+0x100>)
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	4619      	mov	r1, r3
 800a544:	6878      	ldr	r0, [r7, #4]
 800a546:	f002 fa60 	bl	800ca0a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a54a:	4b26      	ldr	r3, [pc, #152]	; (800a5e4 <USBD_CDC_DeInit+0x100>)
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	f003 020f 	and.w	r2, r3, #15
 800a552:	6879      	ldr	r1, [r7, #4]
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	440b      	add	r3, r1
 800a55e:	3324      	adds	r3, #36	; 0x24
 800a560:	2200      	movs	r2, #0
 800a562:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a564:	4b1f      	ldr	r3, [pc, #124]	; (800a5e4 <USBD_CDC_DeInit+0x100>)
 800a566:	781b      	ldrb	r3, [r3, #0]
 800a568:	f003 020f 	and.w	r2, r3, #15
 800a56c:	6879      	ldr	r1, [r7, #4]
 800a56e:	4613      	mov	r3, r2
 800a570:	009b      	lsls	r3, r3, #2
 800a572:	4413      	add	r3, r2
 800a574:	009b      	lsls	r3, r3, #2
 800a576:	440b      	add	r3, r1
 800a578:	3326      	adds	r3, #38	; 0x26
 800a57a:	2200      	movs	r2, #0
 800a57c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	32b0      	adds	r2, #176	; 0xb0
 800a588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d01f      	beq.n	800a5d0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a596:	687a      	ldr	r2, [r7, #4]
 800a598:	33b0      	adds	r3, #176	; 0xb0
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	4413      	add	r3, r2
 800a59e:	685b      	ldr	r3, [r3, #4]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32b0      	adds	r2, #176	; 0xb0
 800a5ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	f002 fbae 	bl	800cd14 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	32b0      	adds	r2, #176	; 0xb0
 800a5c2:	2100      	movs	r1, #0
 800a5c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a5d0:	2300      	movs	r3, #0
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	20000097 	.word	0x20000097
 800a5e0:	20000098 	.word	0x20000098
 800a5e4:	20000099 	.word	0x20000099

0800a5e8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b086      	sub	sp, #24
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	6078      	str	r0, [r7, #4]
 800a5f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	32b0      	adds	r2, #176	; 0xb0
 800a5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a600:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a602:	2300      	movs	r3, #0
 800a604:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a606:	2300      	movs	r3, #0
 800a608:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a60a:	2300      	movs	r3, #0
 800a60c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	2b00      	cmp	r3, #0
 800a612:	d101      	bne.n	800a618 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a614:	2303      	movs	r3, #3
 800a616:	e0bf      	b.n	800a798 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	781b      	ldrb	r3, [r3, #0]
 800a61c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a620:	2b00      	cmp	r3, #0
 800a622:	d050      	beq.n	800a6c6 <USBD_CDC_Setup+0xde>
 800a624:	2b20      	cmp	r3, #32
 800a626:	f040 80af 	bne.w	800a788 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	88db      	ldrh	r3, [r3, #6]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d03a      	beq.n	800a6a8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	b25b      	sxtb	r3, r3
 800a638:	2b00      	cmp	r3, #0
 800a63a:	da1b      	bge.n	800a674 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	33b0      	adds	r3, #176	; 0xb0
 800a646:	009b      	lsls	r3, r3, #2
 800a648:	4413      	add	r3, r2
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	683a      	ldr	r2, [r7, #0]
 800a650:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a652:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a654:	683a      	ldr	r2, [r7, #0]
 800a656:	88d2      	ldrh	r2, [r2, #6]
 800a658:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a65a:	683b      	ldr	r3, [r7, #0]
 800a65c:	88db      	ldrh	r3, [r3, #6]
 800a65e:	2b07      	cmp	r3, #7
 800a660:	bf28      	it	cs
 800a662:	2307      	movcs	r3, #7
 800a664:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	89fa      	ldrh	r2, [r7, #14]
 800a66a:	4619      	mov	r1, r3
 800a66c:	6878      	ldr	r0, [r7, #4]
 800a66e:	f001 fd6d 	bl	800c14c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a672:	e090      	b.n	800a796 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a674:	683b      	ldr	r3, [r7, #0]
 800a676:	785a      	ldrb	r2, [r3, #1]
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a67e:	683b      	ldr	r3, [r7, #0]
 800a680:	88db      	ldrh	r3, [r3, #6]
 800a682:	2b3f      	cmp	r3, #63	; 0x3f
 800a684:	d803      	bhi.n	800a68e <USBD_CDC_Setup+0xa6>
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	88db      	ldrh	r3, [r3, #6]
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	e000      	b.n	800a690 <USBD_CDC_Setup+0xa8>
 800a68e:	2240      	movs	r2, #64	; 0x40
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a696:	6939      	ldr	r1, [r7, #16]
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800a69e:	461a      	mov	r2, r3
 800a6a0:	6878      	ldr	r0, [r7, #4]
 800a6a2:	f001 fd7f 	bl	800c1a4 <USBD_CtlPrepareRx>
      break;
 800a6a6:	e076      	b.n	800a796 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	33b0      	adds	r3, #176	; 0xb0
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	4413      	add	r3, r2
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	689b      	ldr	r3, [r3, #8]
 800a6ba:	683a      	ldr	r2, [r7, #0]
 800a6bc:	7850      	ldrb	r0, [r2, #1]
 800a6be:	2200      	movs	r2, #0
 800a6c0:	6839      	ldr	r1, [r7, #0]
 800a6c2:	4798      	blx	r3
      break;
 800a6c4:	e067      	b.n	800a796 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a6c6:	683b      	ldr	r3, [r7, #0]
 800a6c8:	785b      	ldrb	r3, [r3, #1]
 800a6ca:	2b0b      	cmp	r3, #11
 800a6cc:	d851      	bhi.n	800a772 <USBD_CDC_Setup+0x18a>
 800a6ce:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <USBD_CDC_Setup+0xec>)
 800a6d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d4:	0800a705 	.word	0x0800a705
 800a6d8:	0800a781 	.word	0x0800a781
 800a6dc:	0800a773 	.word	0x0800a773
 800a6e0:	0800a773 	.word	0x0800a773
 800a6e4:	0800a773 	.word	0x0800a773
 800a6e8:	0800a773 	.word	0x0800a773
 800a6ec:	0800a773 	.word	0x0800a773
 800a6f0:	0800a773 	.word	0x0800a773
 800a6f4:	0800a773 	.word	0x0800a773
 800a6f8:	0800a773 	.word	0x0800a773
 800a6fc:	0800a72f 	.word	0x0800a72f
 800a700:	0800a759 	.word	0x0800a759
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a70a:	b2db      	uxtb	r3, r3
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d107      	bne.n	800a720 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a710:	f107 030a 	add.w	r3, r7, #10
 800a714:	2202      	movs	r2, #2
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f001 fd17 	bl	800c14c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a71e:	e032      	b.n	800a786 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a720:	6839      	ldr	r1, [r7, #0]
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f001 fca1 	bl	800c06a <USBD_CtlError>
            ret = USBD_FAIL;
 800a728:	2303      	movs	r3, #3
 800a72a:	75fb      	strb	r3, [r7, #23]
          break;
 800a72c:	e02b      	b.n	800a786 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b03      	cmp	r3, #3
 800a738:	d107      	bne.n	800a74a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a73a:	f107 030d 	add.w	r3, r7, #13
 800a73e:	2201      	movs	r2, #1
 800a740:	4619      	mov	r1, r3
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f001 fd02 	bl	800c14c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a748:	e01d      	b.n	800a786 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a74a:	6839      	ldr	r1, [r7, #0]
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f001 fc8c 	bl	800c06a <USBD_CtlError>
            ret = USBD_FAIL;
 800a752:	2303      	movs	r3, #3
 800a754:	75fb      	strb	r3, [r7, #23]
          break;
 800a756:	e016      	b.n	800a786 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b03      	cmp	r3, #3
 800a762:	d00f      	beq.n	800a784 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a764:	6839      	ldr	r1, [r7, #0]
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f001 fc7f 	bl	800c06a <USBD_CtlError>
            ret = USBD_FAIL;
 800a76c:	2303      	movs	r3, #3
 800a76e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a770:	e008      	b.n	800a784 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a772:	6839      	ldr	r1, [r7, #0]
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f001 fc78 	bl	800c06a <USBD_CtlError>
          ret = USBD_FAIL;
 800a77a:	2303      	movs	r3, #3
 800a77c:	75fb      	strb	r3, [r7, #23]
          break;
 800a77e:	e002      	b.n	800a786 <USBD_CDC_Setup+0x19e>
          break;
 800a780:	bf00      	nop
 800a782:	e008      	b.n	800a796 <USBD_CDC_Setup+0x1ae>
          break;
 800a784:	bf00      	nop
      }
      break;
 800a786:	e006      	b.n	800a796 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a788:	6839      	ldr	r1, [r7, #0]
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 fc6d 	bl	800c06a <USBD_CtlError>
      ret = USBD_FAIL;
 800a790:	2303      	movs	r3, #3
 800a792:	75fb      	strb	r3, [r7, #23]
      break;
 800a794:	bf00      	nop
  }

  return (uint8_t)ret;
 800a796:	7dfb      	ldrb	r3, [r7, #23]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3718      	adds	r7, #24
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}

0800a7a0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b084      	sub	sp, #16
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
 800a7a8:	460b      	mov	r3, r1
 800a7aa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	32b0      	adds	r2, #176	; 0xb0
 800a7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d101      	bne.n	800a7ca <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a7c6:	2303      	movs	r3, #3
 800a7c8:	e065      	b.n	800a896 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	32b0      	adds	r2, #176	; 0xb0
 800a7d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7d8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a7da:	78fb      	ldrb	r3, [r7, #3]
 800a7dc:	f003 020f 	and.w	r2, r3, #15
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	4413      	add	r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	3318      	adds	r3, #24
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d02f      	beq.n	800a854 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a7f4:	78fb      	ldrb	r3, [r7, #3]
 800a7f6:	f003 020f 	and.w	r2, r3, #15
 800a7fa:	6879      	ldr	r1, [r7, #4]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	009b      	lsls	r3, r3, #2
 800a804:	440b      	add	r3, r1
 800a806:	3318      	adds	r3, #24
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	78fb      	ldrb	r3, [r7, #3]
 800a80c:	f003 010f 	and.w	r1, r3, #15
 800a810:	68f8      	ldr	r0, [r7, #12]
 800a812:	460b      	mov	r3, r1
 800a814:	00db      	lsls	r3, r3, #3
 800a816:	440b      	add	r3, r1
 800a818:	009b      	lsls	r3, r3, #2
 800a81a:	4403      	add	r3, r0
 800a81c:	3348      	adds	r3, #72	; 0x48
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	fbb2 f1f3 	udiv	r1, r2, r3
 800a824:	fb01 f303 	mul.w	r3, r1, r3
 800a828:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d112      	bne.n	800a854 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	f003 020f 	and.w	r2, r3, #15
 800a834:	6879      	ldr	r1, [r7, #4]
 800a836:	4613      	mov	r3, r2
 800a838:	009b      	lsls	r3, r3, #2
 800a83a:	4413      	add	r3, r2
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	440b      	add	r3, r1
 800a840:	3318      	adds	r3, #24
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a846:	78f9      	ldrb	r1, [r7, #3]
 800a848:	2300      	movs	r3, #0
 800a84a:	2200      	movs	r2, #0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f002 f984 	bl	800cb5a <USBD_LL_Transmit>
 800a852:	e01f      	b.n	800a894 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2200      	movs	r2, #0
 800a858:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	33b0      	adds	r3, #176	; 0xb0
 800a866:	009b      	lsls	r3, r3, #2
 800a868:	4413      	add	r3, r2
 800a86a:	685b      	ldr	r3, [r3, #4]
 800a86c:	691b      	ldr	r3, [r3, #16]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d010      	beq.n	800a894 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a878:	687a      	ldr	r2, [r7, #4]
 800a87a:	33b0      	adds	r3, #176	; 0xb0
 800a87c:	009b      	lsls	r3, r3, #2
 800a87e:	4413      	add	r3, r2
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	691b      	ldr	r3, [r3, #16]
 800a884:	68ba      	ldr	r2, [r7, #8]
 800a886:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800a88a:	68ba      	ldr	r2, [r7, #8]
 800a88c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800a890:	78fa      	ldrb	r2, [r7, #3]
 800a892:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a894:	2300      	movs	r3, #0
}
 800a896:	4618      	mov	r0, r3
 800a898:	3710      	adds	r7, #16
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b084      	sub	sp, #16
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	6078      	str	r0, [r7, #4]
 800a8a6:	460b      	mov	r3, r1
 800a8a8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	32b0      	adds	r2, #176	; 0xb0
 800a8b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8b8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	32b0      	adds	r2, #176	; 0xb0
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d101      	bne.n	800a8d0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a8cc:	2303      	movs	r3, #3
 800a8ce:	e01a      	b.n	800a906 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a8d0:	78fb      	ldrb	r3, [r7, #3]
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f002 f982 	bl	800cbde <USBD_LL_GetRxDataSize>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a8e8:	687a      	ldr	r2, [r7, #4]
 800a8ea:	33b0      	adds	r3, #176	; 0xb0
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	68db      	ldr	r3, [r3, #12]
 800a8f4:	68fa      	ldr	r2, [r7, #12]
 800a8f6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a900:	4611      	mov	r1, r2
 800a902:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3710      	adds	r7, #16
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}

0800a90e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a90e:	b580      	push	{r7, lr}
 800a910:	b084      	sub	sp, #16
 800a912:	af00      	add	r7, sp, #0
 800a914:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	32b0      	adds	r2, #176	; 0xb0
 800a920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a924:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d101      	bne.n	800a930 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a92c:	2303      	movs	r3, #3
 800a92e:	e025      	b.n	800a97c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	33b0      	adds	r3, #176	; 0xb0
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	4413      	add	r3, r2
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d01a      	beq.n	800a97a <USBD_CDC_EP0_RxReady+0x6c>
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a94a:	2bff      	cmp	r3, #255	; 0xff
 800a94c:	d015      	beq.n	800a97a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	33b0      	adds	r3, #176	; 0xb0
 800a958:	009b      	lsls	r3, r3, #2
 800a95a:	4413      	add	r3, r2
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	689b      	ldr	r3, [r3, #8]
 800a960:	68fa      	ldr	r2, [r7, #12]
 800a962:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800a966:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a968:	68fa      	ldr	r2, [r7, #12]
 800a96a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a96e:	b292      	uxth	r2, r2
 800a970:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	22ff      	movs	r2, #255	; 0xff
 800a976:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3710      	adds	r7, #16
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b086      	sub	sp, #24
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a98c:	2182      	movs	r1, #130	; 0x82
 800a98e:	4818      	ldr	r0, [pc, #96]	; (800a9f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a990:	f000 fd09 	bl	800b3a6 <USBD_GetEpDesc>
 800a994:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a996:	2101      	movs	r1, #1
 800a998:	4815      	ldr	r0, [pc, #84]	; (800a9f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a99a:	f000 fd04 	bl	800b3a6 <USBD_GetEpDesc>
 800a99e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a9a0:	2181      	movs	r1, #129	; 0x81
 800a9a2:	4813      	ldr	r0, [pc, #76]	; (800a9f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a9a4:	f000 fcff 	bl	800b3a6 <USBD_GetEpDesc>
 800a9a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	2210      	movs	r2, #16
 800a9b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a9b6:	693b      	ldr	r3, [r7, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d006      	beq.n	800a9ca <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9c4:	711a      	strb	r2, [r3, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d006      	beq.n	800a9de <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	2200      	movs	r2, #0
 800a9d4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a9d8:	711a      	strb	r2, [r3, #4]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	2243      	movs	r2, #67	; 0x43
 800a9e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a9e4:	4b02      	ldr	r3, [pc, #8]	; (800a9f0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	3718      	adds	r7, #24
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	bd80      	pop	{r7, pc}
 800a9ee:	bf00      	nop
 800a9f0:	20000054 	.word	0x20000054

0800a9f4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b086      	sub	sp, #24
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a9fc:	2182      	movs	r1, #130	; 0x82
 800a9fe:	4818      	ldr	r0, [pc, #96]	; (800aa60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa00:	f000 fcd1 	bl	800b3a6 <USBD_GetEpDesc>
 800aa04:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa06:	2101      	movs	r1, #1
 800aa08:	4815      	ldr	r0, [pc, #84]	; (800aa60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa0a:	f000 fccc 	bl	800b3a6 <USBD_GetEpDesc>
 800aa0e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa10:	2181      	movs	r1, #129	; 0x81
 800aa12:	4813      	ldr	r0, [pc, #76]	; (800aa60 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800aa14:	f000 fcc7 	bl	800b3a6 <USBD_GetEpDesc>
 800aa18:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d002      	beq.n	800aa26 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800aa20:	697b      	ldr	r3, [r7, #20]
 800aa22:	2210      	movs	r2, #16
 800aa24:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d006      	beq.n	800aa3a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	2200      	movs	r2, #0
 800aa30:	711a      	strb	r2, [r3, #4]
 800aa32:	2200      	movs	r2, #0
 800aa34:	f042 0202 	orr.w	r2, r2, #2
 800aa38:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d006      	beq.n	800aa4e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2200      	movs	r2, #0
 800aa44:	711a      	strb	r2, [r3, #4]
 800aa46:	2200      	movs	r2, #0
 800aa48:	f042 0202 	orr.w	r2, r2, #2
 800aa4c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	2243      	movs	r2, #67	; 0x43
 800aa52:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aa54:	4b02      	ldr	r3, [pc, #8]	; (800aa60 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	3718      	adds	r7, #24
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	bd80      	pop	{r7, pc}
 800aa5e:	bf00      	nop
 800aa60:	20000054 	.word	0x20000054

0800aa64 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b086      	sub	sp, #24
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800aa6c:	2182      	movs	r1, #130	; 0x82
 800aa6e:	4818      	ldr	r0, [pc, #96]	; (800aad0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa70:	f000 fc99 	bl	800b3a6 <USBD_GetEpDesc>
 800aa74:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800aa76:	2101      	movs	r1, #1
 800aa78:	4815      	ldr	r0, [pc, #84]	; (800aad0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa7a:	f000 fc94 	bl	800b3a6 <USBD_GetEpDesc>
 800aa7e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800aa80:	2181      	movs	r1, #129	; 0x81
 800aa82:	4813      	ldr	r0, [pc, #76]	; (800aad0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800aa84:	f000 fc8f 	bl	800b3a6 <USBD_GetEpDesc>
 800aa88:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d002      	beq.n	800aa96 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2210      	movs	r2, #16
 800aa94:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d006      	beq.n	800aaaa <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aaa4:	711a      	strb	r2, [r3, #4]
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d006      	beq.n	800aabe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2200      	movs	r2, #0
 800aab4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aab8:	711a      	strb	r2, [r3, #4]
 800aaba:	2200      	movs	r2, #0
 800aabc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2243      	movs	r2, #67	; 0x43
 800aac2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800aac4:	4b02      	ldr	r3, [pc, #8]	; (800aad0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3718      	adds	r7, #24
 800aaca:	46bd      	mov	sp, r7
 800aacc:	bd80      	pop	{r7, pc}
 800aace:	bf00      	nop
 800aad0:	20000054 	.word	0x20000054

0800aad4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800aad4:	b480      	push	{r7}
 800aad6:	b083      	sub	sp, #12
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	220a      	movs	r2, #10
 800aae0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800aae2:	4b03      	ldr	r3, [pc, #12]	; (800aaf0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800aae4:	4618      	mov	r0, r3
 800aae6:	370c      	adds	r7, #12
 800aae8:	46bd      	mov	sp, r7
 800aaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaee:	4770      	bx	lr
 800aaf0:	20000010 	.word	0x20000010

0800aaf4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
 800aafc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d101      	bne.n	800ab08 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ab04:	2303      	movs	r3, #3
 800ab06:	e009      	b.n	800ab1c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	33b0      	adds	r3, #176	; 0xb0
 800ab12:	009b      	lsls	r3, r3, #2
 800ab14:	4413      	add	r3, r2
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	32b0      	adds	r2, #176	; 0xb0
 800ab3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab42:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d101      	bne.n	800ab4e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ab4a:	2303      	movs	r3, #3
 800ab4c:	e008      	b.n	800ab60 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ab4e:	697b      	ldr	r3, [r7, #20]
 800ab50:	68ba      	ldr	r2, [r7, #8]
 800ab52:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	687a      	ldr	r2, [r7, #4]
 800ab5a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800ab5e:	2300      	movs	r3, #0
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	371c      	adds	r7, #28
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	32b0      	adds	r2, #176	; 0xb0
 800ab80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab84:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d101      	bne.n	800ab90 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ab8c:	2303      	movs	r3, #3
 800ab8e:	e004      	b.n	800ab9a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800ab98:	2300      	movs	r3, #0
}
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	3714      	adds	r7, #20
 800ab9e:	46bd      	mov	sp, r7
 800aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba4:	4770      	bx	lr
	...

0800aba8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	32b0      	adds	r2, #176	; 0xb0
 800abba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abbe:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	32b0      	adds	r2, #176	; 0xb0
 800abca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d101      	bne.n	800abd6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800abd2:	2303      	movs	r3, #3
 800abd4:	e018      	b.n	800ac08 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	7c1b      	ldrb	r3, [r3, #16]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abde:	4b0c      	ldr	r3, [pc, #48]	; (800ac10 <USBD_CDC_ReceivePacket+0x68>)
 800abe0:	7819      	ldrb	r1, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abe8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f001 ffd5 	bl	800cb9c <USBD_LL_PrepareReceive>
 800abf2:	e008      	b.n	800ac06 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abf4:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <USBD_CDC_ReceivePacket+0x68>)
 800abf6:	7819      	ldrb	r1, [r3, #0]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800abfe:	2340      	movs	r3, #64	; 0x40
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f001 ffcb 	bl	800cb9c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3710      	adds	r7, #16
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	20000098 	.word	0x20000098

0800ac14 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b086      	sub	sp, #24
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	4613      	mov	r3, r2
 800ac20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d101      	bne.n	800ac2c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	e01f      	b.n	800ac6c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	68ba      	ldr	r2, [r7, #8]
 800ac4e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	2201      	movs	r2, #1
 800ac56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	79fa      	ldrb	r2, [r7, #7]
 800ac5e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f001 fe3f 	bl	800c8e4 <USBD_LL_Init>
 800ac66:	4603      	mov	r3, r0
 800ac68:	75fb      	strb	r3, [r7, #23]

  return ret;
 800ac6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3718      	adds	r7, #24
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b084      	sub	sp, #16
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d101      	bne.n	800ac8c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800ac88:	2303      	movs	r3, #3
 800ac8a:	e025      	b.n	800acd8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	32ae      	adds	r2, #174	; 0xae
 800ac9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d00f      	beq.n	800acc8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	32ae      	adds	r2, #174	; 0xae
 800acb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	f107 020e 	add.w	r2, r7, #14
 800acbc:	4610      	mov	r0, r2
 800acbe:	4798      	blx	r3
 800acc0:	4602      	mov	r2, r0
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800acce:	1c5a      	adds	r2, r3, #1
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800acd6:	2300      	movs	r3, #0
}
 800acd8:	4618      	mov	r0, r3
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b082      	sub	sp, #8
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f001 fe4d 	bl	800c988 <USBD_LL_Start>
 800acee:	4603      	mov	r3, r0
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3708      	adds	r7, #8
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800acf8:	b480      	push	{r7}
 800acfa:	b083      	sub	sp, #12
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ad00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ad02:	4618      	mov	r0, r3
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr

0800ad0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad0e:	b580      	push	{r7, lr}
 800ad10:	b084      	sub	sp, #16
 800ad12:	af00      	add	r7, sp, #0
 800ad14:	6078      	str	r0, [r7, #4]
 800ad16:	460b      	mov	r3, r1
 800ad18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d009      	beq.n	800ad3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	78fa      	ldrb	r2, [r7, #3]
 800ad32:	4611      	mov	r1, r2
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	4798      	blx	r3
 800ad38:	4603      	mov	r3, r0
 800ad3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad3e:	4618      	mov	r0, r3
 800ad40:	3710      	adds	r7, #16
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	460b      	mov	r3, r1
 800ad50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad52:	2300      	movs	r3, #0
 800ad54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	4611      	mov	r1, r2
 800ad62:	6878      	ldr	r0, [r7, #4]
 800ad64:	4798      	blx	r3
 800ad66:	4603      	mov	r3, r0
 800ad68:	2b00      	cmp	r3, #0
 800ad6a:	d001      	beq.n	800ad70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ad6c:	2303      	movs	r3, #3
 800ad6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad72:	4618      	mov	r0, r3
 800ad74:	3710      	adds	r7, #16
 800ad76:	46bd      	mov	sp, r7
 800ad78:	bd80      	pop	{r7, pc}

0800ad7a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ad7a:	b580      	push	{r7, lr}
 800ad7c:	b084      	sub	sp, #16
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
 800ad82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ad8a:	6839      	ldr	r1, [r7, #0]
 800ad8c:	4618      	mov	r0, r3
 800ad8e:	f001 f932 	bl	800bff6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2201      	movs	r2, #1
 800ad96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ada0:	461a      	mov	r2, r3
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800adae:	f003 031f 	and.w	r3, r3, #31
 800adb2:	2b02      	cmp	r3, #2
 800adb4:	d01a      	beq.n	800adec <USBD_LL_SetupStage+0x72>
 800adb6:	2b02      	cmp	r3, #2
 800adb8:	d822      	bhi.n	800ae00 <USBD_LL_SetupStage+0x86>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d002      	beq.n	800adc4 <USBD_LL_SetupStage+0x4a>
 800adbe:	2b01      	cmp	r3, #1
 800adc0:	d00a      	beq.n	800add8 <USBD_LL_SetupStage+0x5e>
 800adc2:	e01d      	b.n	800ae00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adca:	4619      	mov	r1, r3
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f000 fb5f 	bl	800b490 <USBD_StdDevReq>
 800add2:	4603      	mov	r3, r0
 800add4:	73fb      	strb	r3, [r7, #15]
      break;
 800add6:	e020      	b.n	800ae1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adde:	4619      	mov	r1, r3
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f000 fbc7 	bl	800b574 <USBD_StdItfReq>
 800ade6:	4603      	mov	r3, r0
 800ade8:	73fb      	strb	r3, [r7, #15]
      break;
 800adea:	e016      	b.n	800ae1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800adf2:	4619      	mov	r1, r3
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fc29 	bl	800b64c <USBD_StdEPReq>
 800adfa:	4603      	mov	r3, r0
 800adfc:	73fb      	strb	r3, [r7, #15]
      break;
 800adfe:	e00c      	b.n	800ae1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae06:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f001 fe1a 	bl	800ca48 <USBD_LL_StallEP>
 800ae14:	4603      	mov	r3, r0
 800ae16:	73fb      	strb	r3, [r7, #15]
      break;
 800ae18:	bf00      	nop
  }

  return ret;
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae1c:	4618      	mov	r0, r3
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b086      	sub	sp, #24
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	60f8      	str	r0, [r7, #12]
 800ae2c:	460b      	mov	r3, r1
 800ae2e:	607a      	str	r2, [r7, #4]
 800ae30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ae32:	2300      	movs	r3, #0
 800ae34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ae36:	7afb      	ldrb	r3, [r7, #11]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d16e      	bne.n	800af1a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800ae42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ae4a:	2b03      	cmp	r3, #3
 800ae4c:	f040 8098 	bne.w	800af80 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ae50:	693b      	ldr	r3, [r7, #16]
 800ae52:	689a      	ldr	r2, [r3, #8]
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	68db      	ldr	r3, [r3, #12]
 800ae58:	429a      	cmp	r2, r3
 800ae5a:	d913      	bls.n	800ae84 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	689a      	ldr	r2, [r3, #8]
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	68db      	ldr	r3, [r3, #12]
 800ae64:	1ad2      	subs	r2, r2, r3
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	68da      	ldr	r2, [r3, #12]
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	689b      	ldr	r3, [r3, #8]
 800ae72:	4293      	cmp	r3, r2
 800ae74:	bf28      	it	cs
 800ae76:	4613      	movcs	r3, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	68f8      	ldr	r0, [r7, #12]
 800ae7e:	f001 f9ae 	bl	800c1de <USBD_CtlContinueRx>
 800ae82:	e07d      	b.n	800af80 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ae8a:	f003 031f 	and.w	r3, r3, #31
 800ae8e:	2b02      	cmp	r3, #2
 800ae90:	d014      	beq.n	800aebc <USBD_LL_DataOutStage+0x98>
 800ae92:	2b02      	cmp	r3, #2
 800ae94:	d81d      	bhi.n	800aed2 <USBD_LL_DataOutStage+0xae>
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d002      	beq.n	800aea0 <USBD_LL_DataOutStage+0x7c>
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d003      	beq.n	800aea6 <USBD_LL_DataOutStage+0x82>
 800ae9e:	e018      	b.n	800aed2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aea0:	2300      	movs	r3, #0
 800aea2:	75bb      	strb	r3, [r7, #22]
            break;
 800aea4:	e018      	b.n	800aed8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	4619      	mov	r1, r3
 800aeb0:	68f8      	ldr	r0, [r7, #12]
 800aeb2:	f000 fa5e 	bl	800b372 <USBD_CoreFindIF>
 800aeb6:	4603      	mov	r3, r0
 800aeb8:	75bb      	strb	r3, [r7, #22]
            break;
 800aeba:	e00d      	b.n	800aed8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	4619      	mov	r1, r3
 800aec6:	68f8      	ldr	r0, [r7, #12]
 800aec8:	f000 fa60 	bl	800b38c <USBD_CoreFindEP>
 800aecc:	4603      	mov	r3, r0
 800aece:	75bb      	strb	r3, [r7, #22]
            break;
 800aed0:	e002      	b.n	800aed8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aed2:	2300      	movs	r3, #0
 800aed4:	75bb      	strb	r3, [r7, #22]
            break;
 800aed6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aed8:	7dbb      	ldrb	r3, [r7, #22]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d119      	bne.n	800af12 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b03      	cmp	r3, #3
 800aee8:	d113      	bne.n	800af12 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aeea:	7dba      	ldrb	r2, [r7, #22]
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	32ae      	adds	r2, #174	; 0xae
 800aef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d00b      	beq.n	800af12 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aefa:	7dba      	ldrb	r2, [r7, #22]
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800af02:	7dba      	ldrb	r2, [r7, #22]
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	32ae      	adds	r2, #174	; 0xae
 800af08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	68f8      	ldr	r0, [r7, #12]
 800af10:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f001 f974 	bl	800c200 <USBD_CtlSendStatus>
 800af18:	e032      	b.n	800af80 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800af1a:	7afb      	ldrb	r3, [r7, #11]
 800af1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800af20:	b2db      	uxtb	r3, r3
 800af22:	4619      	mov	r1, r3
 800af24:	68f8      	ldr	r0, [r7, #12]
 800af26:	f000 fa31 	bl	800b38c <USBD_CoreFindEP>
 800af2a:	4603      	mov	r3, r0
 800af2c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800af2e:	7dbb      	ldrb	r3, [r7, #22]
 800af30:	2bff      	cmp	r3, #255	; 0xff
 800af32:	d025      	beq.n	800af80 <USBD_LL_DataOutStage+0x15c>
 800af34:	7dbb      	ldrb	r3, [r7, #22]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d122      	bne.n	800af80 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b03      	cmp	r3, #3
 800af44:	d117      	bne.n	800af76 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800af46:	7dba      	ldrb	r2, [r7, #22]
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	32ae      	adds	r2, #174	; 0xae
 800af4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af50:	699b      	ldr	r3, [r3, #24]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d00f      	beq.n	800af76 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800af56:	7dba      	ldrb	r2, [r7, #22]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800af5e:	7dba      	ldrb	r2, [r7, #22]
 800af60:	68fb      	ldr	r3, [r7, #12]
 800af62:	32ae      	adds	r2, #174	; 0xae
 800af64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af68:	699b      	ldr	r3, [r3, #24]
 800af6a:	7afa      	ldrb	r2, [r7, #11]
 800af6c:	4611      	mov	r1, r2
 800af6e:	68f8      	ldr	r0, [r7, #12]
 800af70:	4798      	blx	r3
 800af72:	4603      	mov	r3, r0
 800af74:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800af76:	7dfb      	ldrb	r3, [r7, #23]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d001      	beq.n	800af80 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	e000      	b.n	800af82 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800af80:	2300      	movs	r3, #0
}
 800af82:	4618      	mov	r0, r3
 800af84:	3718      	adds	r7, #24
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}

0800af8a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800af8a:	b580      	push	{r7, lr}
 800af8c:	b086      	sub	sp, #24
 800af8e:	af00      	add	r7, sp, #0
 800af90:	60f8      	str	r0, [r7, #12]
 800af92:	460b      	mov	r3, r1
 800af94:	607a      	str	r2, [r7, #4]
 800af96:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800af98:	7afb      	ldrb	r3, [r7, #11]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d16f      	bne.n	800b07e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3314      	adds	r3, #20
 800afa2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800afaa:	2b02      	cmp	r3, #2
 800afac:	d15a      	bne.n	800b064 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	689a      	ldr	r2, [r3, #8]
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	429a      	cmp	r2, r3
 800afb8:	d914      	bls.n	800afe4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	1ad2      	subs	r2, r2, r3
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	461a      	mov	r2, r3
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	68f8      	ldr	r0, [r7, #12]
 800afd2:	f001 f8d6 	bl	800c182 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800afd6:	2300      	movs	r3, #0
 800afd8:	2200      	movs	r2, #0
 800afda:	2100      	movs	r1, #0
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f001 fddd 	bl	800cb9c <USBD_LL_PrepareReceive>
 800afe2:	e03f      	b.n	800b064 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800afe4:	693b      	ldr	r3, [r7, #16]
 800afe6:	68da      	ldr	r2, [r3, #12]
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	689b      	ldr	r3, [r3, #8]
 800afec:	429a      	cmp	r2, r3
 800afee:	d11c      	bne.n	800b02a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	685a      	ldr	r2, [r3, #4]
 800aff4:	693b      	ldr	r3, [r7, #16]
 800aff6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800aff8:	429a      	cmp	r2, r3
 800affa:	d316      	bcc.n	800b02a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800affc:	693b      	ldr	r3, [r7, #16]
 800affe:	685a      	ldr	r2, [r3, #4]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b006:	429a      	cmp	r2, r3
 800b008:	d20f      	bcs.n	800b02a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b00a:	2200      	movs	r2, #0
 800b00c:	2100      	movs	r1, #0
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f001 f8b7 	bl	800c182 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2200      	movs	r2, #0
 800b018:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b01c:	2300      	movs	r3, #0
 800b01e:	2200      	movs	r2, #0
 800b020:	2100      	movs	r1, #0
 800b022:	68f8      	ldr	r0, [r7, #12]
 800b024:	f001 fdba 	bl	800cb9c <USBD_LL_PrepareReceive>
 800b028:	e01c      	b.n	800b064 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b030:	b2db      	uxtb	r3, r3
 800b032:	2b03      	cmp	r3, #3
 800b034:	d10f      	bne.n	800b056 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d009      	beq.n	800b056 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	2200      	movs	r2, #0
 800b046:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	68f8      	ldr	r0, [r7, #12]
 800b054:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b056:	2180      	movs	r1, #128	; 0x80
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f001 fcf5 	bl	800ca48 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f001 f8e1 	bl	800c226 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d03a      	beq.n	800b0e4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b06e:	68f8      	ldr	r0, [r7, #12]
 800b070:	f7ff fe42 	bl	800acf8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2200      	movs	r2, #0
 800b078:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800b07c:	e032      	b.n	800b0e4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b07e:	7afb      	ldrb	r3, [r7, #11]
 800b080:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b084:	b2db      	uxtb	r3, r3
 800b086:	4619      	mov	r1, r3
 800b088:	68f8      	ldr	r0, [r7, #12]
 800b08a:	f000 f97f 	bl	800b38c <USBD_CoreFindEP>
 800b08e:	4603      	mov	r3, r0
 800b090:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b092:	7dfb      	ldrb	r3, [r7, #23]
 800b094:	2bff      	cmp	r3, #255	; 0xff
 800b096:	d025      	beq.n	800b0e4 <USBD_LL_DataInStage+0x15a>
 800b098:	7dfb      	ldrb	r3, [r7, #23]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d122      	bne.n	800b0e4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b0a4:	b2db      	uxtb	r3, r3
 800b0a6:	2b03      	cmp	r3, #3
 800b0a8:	d11c      	bne.n	800b0e4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b0aa:	7dfa      	ldrb	r2, [r7, #23]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	32ae      	adds	r2, #174	; 0xae
 800b0b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0b4:	695b      	ldr	r3, [r3, #20]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d014      	beq.n	800b0e4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b0ba:	7dfa      	ldrb	r2, [r7, #23]
 800b0bc:	68fb      	ldr	r3, [r7, #12]
 800b0be:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b0c2:	7dfa      	ldrb	r2, [r7, #23]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	32ae      	adds	r2, #174	; 0xae
 800b0c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0cc:	695b      	ldr	r3, [r3, #20]
 800b0ce:	7afa      	ldrb	r2, [r7, #11]
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	68f8      	ldr	r0, [r7, #12]
 800b0d4:	4798      	blx	r3
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b0da:	7dbb      	ldrb	r3, [r7, #22]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d001      	beq.n	800b0e4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b0e0:	7dbb      	ldrb	r3, [r7, #22]
 800b0e2:	e000      	b.n	800b0e6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b0e4:	2300      	movs	r3, #0
}
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	3718      	adds	r7, #24
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}

0800b0ee <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b0ee:	b580      	push	{r7, lr}
 800b0f0:	b084      	sub	sp, #16
 800b0f2:	af00      	add	r7, sp, #0
 800b0f4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2200      	movs	r2, #0
 800b106:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2200      	movs	r2, #0
 800b10e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	2200      	movs	r2, #0
 800b114:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2200      	movs	r2, #0
 800b11c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b126:	2b00      	cmp	r3, #0
 800b128:	d014      	beq.n	800b154 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d00e      	beq.n	800b154 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b13c:	685b      	ldr	r3, [r3, #4]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	6852      	ldr	r2, [r2, #4]
 800b142:	b2d2      	uxtb	r2, r2
 800b144:	4611      	mov	r1, r2
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	4798      	blx	r3
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d001      	beq.n	800b154 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b150:	2303      	movs	r3, #3
 800b152:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b154:	2340      	movs	r3, #64	; 0x40
 800b156:	2200      	movs	r2, #0
 800b158:	2100      	movs	r1, #0
 800b15a:	6878      	ldr	r0, [r7, #4]
 800b15c:	f001 fc2f 	bl	800c9be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	2201      	movs	r2, #1
 800b164:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2240      	movs	r2, #64	; 0x40
 800b16c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b170:	2340      	movs	r3, #64	; 0x40
 800b172:	2200      	movs	r2, #0
 800b174:	2180      	movs	r1, #128	; 0x80
 800b176:	6878      	ldr	r0, [r7, #4]
 800b178:	f001 fc21 	bl	800c9be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2240      	movs	r2, #64	; 0x40
 800b186:	621a      	str	r2, [r3, #32]

  return ret;
 800b188:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}

0800b192 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b192:	b480      	push	{r7}
 800b194:	b083      	sub	sp, #12
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
 800b19a:	460b      	mov	r3, r1
 800b19c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	78fa      	ldrb	r2, [r7, #3]
 800b1a2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	370c      	adds	r7, #12
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b0:	4770      	bx	lr

0800b1b2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b1b2:	b480      	push	{r7}
 800b1b4:	b083      	sub	sp, #12
 800b1b6:	af00      	add	r7, sp, #0
 800b1b8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1c0:	b2da      	uxtb	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2204      	movs	r2, #4
 800b1cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	370c      	adds	r7, #12
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr

0800b1de <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b083      	sub	sp, #12
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b1ec:	b2db      	uxtb	r3, r3
 800b1ee:	2b04      	cmp	r3, #4
 800b1f0:	d106      	bne.n	800b200 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800b1f8:	b2da      	uxtb	r2, r3
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	370c      	adds	r7, #12
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b21c:	b2db      	uxtb	r3, r3
 800b21e:	2b03      	cmp	r3, #3
 800b220:	d110      	bne.n	800b244 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d00b      	beq.n	800b244 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b232:	69db      	ldr	r3, [r3, #28]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d005      	beq.n	800b244 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b23e:	69db      	ldr	r3, [r3, #28]
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b244:	2300      	movs	r3, #0
}
 800b246:	4618      	mov	r0, r3
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}

0800b24e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b24e:	b580      	push	{r7, lr}
 800b250:	b082      	sub	sp, #8
 800b252:	af00      	add	r7, sp, #0
 800b254:	6078      	str	r0, [r7, #4]
 800b256:	460b      	mov	r3, r1
 800b258:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	32ae      	adds	r2, #174	; 0xae
 800b264:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d101      	bne.n	800b270 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b26c:	2303      	movs	r3, #3
 800b26e:	e01c      	b.n	800b2aa <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b276:	b2db      	uxtb	r3, r3
 800b278:	2b03      	cmp	r3, #3
 800b27a:	d115      	bne.n	800b2a8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	32ae      	adds	r2, #174	; 0xae
 800b286:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d00b      	beq.n	800b2a8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	32ae      	adds	r2, #174	; 0xae
 800b29a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b29e:	6a1b      	ldr	r3, [r3, #32]
 800b2a0:	78fa      	ldrb	r2, [r7, #3]
 800b2a2:	4611      	mov	r1, r2
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b2a8:	2300      	movs	r3, #0
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3708      	adds	r7, #8
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}

0800b2b2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b2b2:	b580      	push	{r7, lr}
 800b2b4:	b082      	sub	sp, #8
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	6078      	str	r0, [r7, #4]
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	32ae      	adds	r2, #174	; 0xae
 800b2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d101      	bne.n	800b2d4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b2d0:	2303      	movs	r3, #3
 800b2d2:	e01c      	b.n	800b30e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2da:	b2db      	uxtb	r3, r3
 800b2dc:	2b03      	cmp	r3, #3
 800b2de:	d115      	bne.n	800b30c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	32ae      	adds	r2, #174	; 0xae
 800b2ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d00b      	beq.n	800b30c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	32ae      	adds	r2, #174	; 0xae
 800b2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	78fa      	ldrb	r2, [r7, #3]
 800b306:	4611      	mov	r1, r2
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b30c:	2300      	movs	r3, #0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b316:	b480      	push	{r7}
 800b318:	b083      	sub	sp, #12
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b334:	2300      	movs	r3, #0
 800b336:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b346:	2b00      	cmp	r3, #0
 800b348:	d00e      	beq.n	800b368 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	687a      	ldr	r2, [r7, #4]
 800b354:	6852      	ldr	r2, [r2, #4]
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	4611      	mov	r1, r2
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	4798      	blx	r3
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	d001      	beq.n	800b368 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b364:	2303      	movs	r3, #3
 800b366:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b368:	7bfb      	ldrb	r3, [r7, #15]
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	3710      	adds	r7, #16
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}

0800b372 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b372:	b480      	push	{r7}
 800b374:	b083      	sub	sp, #12
 800b376:	af00      	add	r7, sp, #0
 800b378:	6078      	str	r0, [r7, #4]
 800b37a:	460b      	mov	r3, r1
 800b37c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b37e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b380:	4618      	mov	r0, r3
 800b382:	370c      	adds	r7, #12
 800b384:	46bd      	mov	sp, r7
 800b386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38a:	4770      	bx	lr

0800b38c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	460b      	mov	r3, r1
 800b396:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b398:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	370c      	adds	r7, #12
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a4:	4770      	bx	lr

0800b3a6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b3a6:	b580      	push	{r7, lr}
 800b3a8:	b086      	sub	sp, #24
 800b3aa:	af00      	add	r7, sp, #0
 800b3ac:	6078      	str	r0, [r7, #4]
 800b3ae:	460b      	mov	r3, r1
 800b3b0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	885b      	ldrh	r3, [r3, #2]
 800b3c2:	b29a      	uxth	r2, r3
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	781b      	ldrb	r3, [r3, #0]
 800b3c8:	b29b      	uxth	r3, r3
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d920      	bls.n	800b410 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b3d6:	e013      	b.n	800b400 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b3d8:	f107 030a 	add.w	r3, r7, #10
 800b3dc:	4619      	mov	r1, r3
 800b3de:	6978      	ldr	r0, [r7, #20]
 800b3e0:	f000 f81b 	bl	800b41a <USBD_GetNextDesc>
 800b3e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	785b      	ldrb	r3, [r3, #1]
 800b3ea:	2b05      	cmp	r3, #5
 800b3ec:	d108      	bne.n	800b400 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	789b      	ldrb	r3, [r3, #2]
 800b3f6:	78fa      	ldrb	r2, [r7, #3]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d008      	beq.n	800b40e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	885b      	ldrh	r3, [r3, #2]
 800b404:	b29a      	uxth	r2, r3
 800b406:	897b      	ldrh	r3, [r7, #10]
 800b408:	429a      	cmp	r2, r3
 800b40a:	d8e5      	bhi.n	800b3d8 <USBD_GetEpDesc+0x32>
 800b40c:	e000      	b.n	800b410 <USBD_GetEpDesc+0x6a>
          break;
 800b40e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b410:	693b      	ldr	r3, [r7, #16]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3718      	adds	r7, #24
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b41a:	b480      	push	{r7}
 800b41c:	b085      	sub	sp, #20
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
 800b422:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	881a      	ldrh	r2, [r3, #0]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	b29b      	uxth	r3, r3
 800b432:	4413      	add	r3, r2
 800b434:	b29a      	uxth	r2, r3
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	461a      	mov	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4413      	add	r3, r2
 800b444:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b446:	68fb      	ldr	r3, [r7, #12]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3714      	adds	r7, #20
 800b44c:	46bd      	mov	sp, r7
 800b44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b452:	4770      	bx	lr

0800b454 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b454:	b480      	push	{r7}
 800b456:	b087      	sub	sp, #28
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	781b      	ldrb	r3, [r3, #0]
 800b464:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	3301      	adds	r3, #1
 800b46a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	781b      	ldrb	r3, [r3, #0]
 800b470:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b472:	8a3b      	ldrh	r3, [r7, #16]
 800b474:	021b      	lsls	r3, r3, #8
 800b476:	b21a      	sxth	r2, r3
 800b478:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b47c:	4313      	orrs	r3, r2
 800b47e:	b21b      	sxth	r3, r3
 800b480:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b482:	89fb      	ldrh	r3, [r7, #14]
}
 800b484:	4618      	mov	r0, r3
 800b486:	371c      	adds	r7, #28
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	781b      	ldrb	r3, [r3, #0]
 800b4a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b4a6:	2b40      	cmp	r3, #64	; 0x40
 800b4a8:	d005      	beq.n	800b4b6 <USBD_StdDevReq+0x26>
 800b4aa:	2b40      	cmp	r3, #64	; 0x40
 800b4ac:	d857      	bhi.n	800b55e <USBD_StdDevReq+0xce>
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00f      	beq.n	800b4d2 <USBD_StdDevReq+0x42>
 800b4b2:	2b20      	cmp	r3, #32
 800b4b4:	d153      	bne.n	800b55e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	32ae      	adds	r2, #174	; 0xae
 800b4c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4c4:	689b      	ldr	r3, [r3, #8]
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	4798      	blx	r3
 800b4cc:	4603      	mov	r3, r0
 800b4ce:	73fb      	strb	r3, [r7, #15]
      break;
 800b4d0:	e04a      	b.n	800b568 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	785b      	ldrb	r3, [r3, #1]
 800b4d6:	2b09      	cmp	r3, #9
 800b4d8:	d83b      	bhi.n	800b552 <USBD_StdDevReq+0xc2>
 800b4da:	a201      	add	r2, pc, #4	; (adr r2, 800b4e0 <USBD_StdDevReq+0x50>)
 800b4dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e0:	0800b535 	.word	0x0800b535
 800b4e4:	0800b549 	.word	0x0800b549
 800b4e8:	0800b553 	.word	0x0800b553
 800b4ec:	0800b53f 	.word	0x0800b53f
 800b4f0:	0800b553 	.word	0x0800b553
 800b4f4:	0800b513 	.word	0x0800b513
 800b4f8:	0800b509 	.word	0x0800b509
 800b4fc:	0800b553 	.word	0x0800b553
 800b500:	0800b52b 	.word	0x0800b52b
 800b504:	0800b51d 	.word	0x0800b51d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fa3c 	bl	800b988 <USBD_GetDescriptor>
          break;
 800b510:	e024      	b.n	800b55c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b512:	6839      	ldr	r1, [r7, #0]
 800b514:	6878      	ldr	r0, [r7, #4]
 800b516:	f000 fbcb 	bl	800bcb0 <USBD_SetAddress>
          break;
 800b51a:	e01f      	b.n	800b55c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b51c:	6839      	ldr	r1, [r7, #0]
 800b51e:	6878      	ldr	r0, [r7, #4]
 800b520:	f000 fc0a 	bl	800bd38 <USBD_SetConfig>
 800b524:	4603      	mov	r3, r0
 800b526:	73fb      	strb	r3, [r7, #15]
          break;
 800b528:	e018      	b.n	800b55c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b52a:	6839      	ldr	r1, [r7, #0]
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f000 fcad 	bl	800be8c <USBD_GetConfig>
          break;
 800b532:	e013      	b.n	800b55c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b534:	6839      	ldr	r1, [r7, #0]
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fcde 	bl	800bef8 <USBD_GetStatus>
          break;
 800b53c:	e00e      	b.n	800b55c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f000 fd0d 	bl	800bf60 <USBD_SetFeature>
          break;
 800b546:	e009      	b.n	800b55c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b548:	6839      	ldr	r1, [r7, #0]
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fd31 	bl	800bfb2 <USBD_ClrFeature>
          break;
 800b550:	e004      	b.n	800b55c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b552:	6839      	ldr	r1, [r7, #0]
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f000 fd88 	bl	800c06a <USBD_CtlError>
          break;
 800b55a:	bf00      	nop
      }
      break;
 800b55c:	e004      	b.n	800b568 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b55e:	6839      	ldr	r1, [r7, #0]
 800b560:	6878      	ldr	r0, [r7, #4]
 800b562:	f000 fd82 	bl	800c06a <USBD_CtlError>
      break;
 800b566:	bf00      	nop
  }

  return ret;
 800b568:	7bfb      	ldrb	r3, [r7, #15]
}
 800b56a:	4618      	mov	r0, r3
 800b56c:	3710      	adds	r7, #16
 800b56e:	46bd      	mov	sp, r7
 800b570:	bd80      	pop	{r7, pc}
 800b572:	bf00      	nop

0800b574 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b084      	sub	sp, #16
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b58a:	2b40      	cmp	r3, #64	; 0x40
 800b58c:	d005      	beq.n	800b59a <USBD_StdItfReq+0x26>
 800b58e:	2b40      	cmp	r3, #64	; 0x40
 800b590:	d852      	bhi.n	800b638 <USBD_StdItfReq+0xc4>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d001      	beq.n	800b59a <USBD_StdItfReq+0x26>
 800b596:	2b20      	cmp	r3, #32
 800b598:	d14e      	bne.n	800b638 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b5a0:	b2db      	uxtb	r3, r3
 800b5a2:	3b01      	subs	r3, #1
 800b5a4:	2b02      	cmp	r3, #2
 800b5a6:	d840      	bhi.n	800b62a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	889b      	ldrh	r3, [r3, #4]
 800b5ac:	b2db      	uxtb	r3, r3
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d836      	bhi.n	800b620 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	889b      	ldrh	r3, [r3, #4]
 800b5b6:	b2db      	uxtb	r3, r3
 800b5b8:	4619      	mov	r1, r3
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f7ff fed9 	bl	800b372 <USBD_CoreFindIF>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b5c4:	7bbb      	ldrb	r3, [r7, #14]
 800b5c6:	2bff      	cmp	r3, #255	; 0xff
 800b5c8:	d01d      	beq.n	800b606 <USBD_StdItfReq+0x92>
 800b5ca:	7bbb      	ldrb	r3, [r7, #14]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d11a      	bne.n	800b606 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b5d0:	7bba      	ldrb	r2, [r7, #14]
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	32ae      	adds	r2, #174	; 0xae
 800b5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5da:	689b      	ldr	r3, [r3, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d00f      	beq.n	800b600 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b5e0:	7bba      	ldrb	r2, [r7, #14]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b5e8:	7bba      	ldrb	r2, [r7, #14]
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	32ae      	adds	r2, #174	; 0xae
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	689b      	ldr	r3, [r3, #8]
 800b5f4:	6839      	ldr	r1, [r7, #0]
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	4798      	blx	r3
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b5fe:	e004      	b.n	800b60a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b600:	2303      	movs	r3, #3
 800b602:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b604:	e001      	b.n	800b60a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b606:	2303      	movs	r3, #3
 800b608:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	88db      	ldrh	r3, [r3, #6]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d110      	bne.n	800b634 <USBD_StdItfReq+0xc0>
 800b612:	7bfb      	ldrb	r3, [r7, #15]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d10d      	bne.n	800b634 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f000 fdf1 	bl	800c200 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b61e:	e009      	b.n	800b634 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b620:	6839      	ldr	r1, [r7, #0]
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 fd21 	bl	800c06a <USBD_CtlError>
          break;
 800b628:	e004      	b.n	800b634 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b62a:	6839      	ldr	r1, [r7, #0]
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f000 fd1c 	bl	800c06a <USBD_CtlError>
          break;
 800b632:	e000      	b.n	800b636 <USBD_StdItfReq+0xc2>
          break;
 800b634:	bf00      	nop
      }
      break;
 800b636:	e004      	b.n	800b642 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 fd15 	bl	800c06a <USBD_CtlError>
      break;
 800b640:	bf00      	nop
  }

  return ret;
 800b642:	7bfb      	ldrb	r3, [r7, #15]
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b084      	sub	sp, #16
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
 800b654:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b656:	2300      	movs	r3, #0
 800b658:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	889b      	ldrh	r3, [r3, #4]
 800b65e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	781b      	ldrb	r3, [r3, #0]
 800b664:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b668:	2b40      	cmp	r3, #64	; 0x40
 800b66a:	d007      	beq.n	800b67c <USBD_StdEPReq+0x30>
 800b66c:	2b40      	cmp	r3, #64	; 0x40
 800b66e:	f200 817f 	bhi.w	800b970 <USBD_StdEPReq+0x324>
 800b672:	2b00      	cmp	r3, #0
 800b674:	d02a      	beq.n	800b6cc <USBD_StdEPReq+0x80>
 800b676:	2b20      	cmp	r3, #32
 800b678:	f040 817a 	bne.w	800b970 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b67c:	7bbb      	ldrb	r3, [r7, #14]
 800b67e:	4619      	mov	r1, r3
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f7ff fe83 	bl	800b38c <USBD_CoreFindEP>
 800b686:	4603      	mov	r3, r0
 800b688:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b68a:	7b7b      	ldrb	r3, [r7, #13]
 800b68c:	2bff      	cmp	r3, #255	; 0xff
 800b68e:	f000 8174 	beq.w	800b97a <USBD_StdEPReq+0x32e>
 800b692:	7b7b      	ldrb	r3, [r7, #13]
 800b694:	2b00      	cmp	r3, #0
 800b696:	f040 8170 	bne.w	800b97a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b69a:	7b7a      	ldrb	r2, [r7, #13]
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b6a2:	7b7a      	ldrb	r2, [r7, #13]
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	32ae      	adds	r2, #174	; 0xae
 800b6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 8163 	beq.w	800b97a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b6b4:	7b7a      	ldrb	r2, [r7, #13]
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	32ae      	adds	r2, #174	; 0xae
 800b6ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6be:	689b      	ldr	r3, [r3, #8]
 800b6c0:	6839      	ldr	r1, [r7, #0]
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	4798      	blx	r3
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b6ca:	e156      	b.n	800b97a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	785b      	ldrb	r3, [r3, #1]
 800b6d0:	2b03      	cmp	r3, #3
 800b6d2:	d008      	beq.n	800b6e6 <USBD_StdEPReq+0x9a>
 800b6d4:	2b03      	cmp	r3, #3
 800b6d6:	f300 8145 	bgt.w	800b964 <USBD_StdEPReq+0x318>
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	f000 809b 	beq.w	800b816 <USBD_StdEPReq+0x1ca>
 800b6e0:	2b01      	cmp	r3, #1
 800b6e2:	d03c      	beq.n	800b75e <USBD_StdEPReq+0x112>
 800b6e4:	e13e      	b.n	800b964 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b6ec:	b2db      	uxtb	r3, r3
 800b6ee:	2b02      	cmp	r3, #2
 800b6f0:	d002      	beq.n	800b6f8 <USBD_StdEPReq+0xac>
 800b6f2:	2b03      	cmp	r3, #3
 800b6f4:	d016      	beq.n	800b724 <USBD_StdEPReq+0xd8>
 800b6f6:	e02c      	b.n	800b752 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b6f8:	7bbb      	ldrb	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d00d      	beq.n	800b71a <USBD_StdEPReq+0xce>
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	2b80      	cmp	r3, #128	; 0x80
 800b702:	d00a      	beq.n	800b71a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	4619      	mov	r1, r3
 800b708:	6878      	ldr	r0, [r7, #4]
 800b70a:	f001 f99d 	bl	800ca48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b70e:	2180      	movs	r1, #128	; 0x80
 800b710:	6878      	ldr	r0, [r7, #4]
 800b712:	f001 f999 	bl	800ca48 <USBD_LL_StallEP>
 800b716:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b718:	e020      	b.n	800b75c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b71a:	6839      	ldr	r1, [r7, #0]
 800b71c:	6878      	ldr	r0, [r7, #4]
 800b71e:	f000 fca4 	bl	800c06a <USBD_CtlError>
              break;
 800b722:	e01b      	b.n	800b75c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b724:	683b      	ldr	r3, [r7, #0]
 800b726:	885b      	ldrh	r3, [r3, #2]
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d10e      	bne.n	800b74a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b72c:	7bbb      	ldrb	r3, [r7, #14]
 800b72e:	2b00      	cmp	r3, #0
 800b730:	d00b      	beq.n	800b74a <USBD_StdEPReq+0xfe>
 800b732:	7bbb      	ldrb	r3, [r7, #14]
 800b734:	2b80      	cmp	r3, #128	; 0x80
 800b736:	d008      	beq.n	800b74a <USBD_StdEPReq+0xfe>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	88db      	ldrh	r3, [r3, #6]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d104      	bne.n	800b74a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b740:	7bbb      	ldrb	r3, [r7, #14]
 800b742:	4619      	mov	r1, r3
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f001 f97f 	bl	800ca48 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 fd58 	bl	800c200 <USBD_CtlSendStatus>

              break;
 800b750:	e004      	b.n	800b75c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b752:	6839      	ldr	r1, [r7, #0]
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 fc88 	bl	800c06a <USBD_CtlError>
              break;
 800b75a:	bf00      	nop
          }
          break;
 800b75c:	e107      	b.n	800b96e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b764:	b2db      	uxtb	r3, r3
 800b766:	2b02      	cmp	r3, #2
 800b768:	d002      	beq.n	800b770 <USBD_StdEPReq+0x124>
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	d016      	beq.n	800b79c <USBD_StdEPReq+0x150>
 800b76e:	e04b      	b.n	800b808 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b770:	7bbb      	ldrb	r3, [r7, #14]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d00d      	beq.n	800b792 <USBD_StdEPReq+0x146>
 800b776:	7bbb      	ldrb	r3, [r7, #14]
 800b778:	2b80      	cmp	r3, #128	; 0x80
 800b77a:	d00a      	beq.n	800b792 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b77c:	7bbb      	ldrb	r3, [r7, #14]
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f001 f961 	bl	800ca48 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b786:	2180      	movs	r1, #128	; 0x80
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	f001 f95d 	bl	800ca48 <USBD_LL_StallEP>
 800b78e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b790:	e040      	b.n	800b814 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b792:	6839      	ldr	r1, [r7, #0]
 800b794:	6878      	ldr	r0, [r7, #4]
 800b796:	f000 fc68 	bl	800c06a <USBD_CtlError>
              break;
 800b79a:	e03b      	b.n	800b814 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b79c:	683b      	ldr	r3, [r7, #0]
 800b79e:	885b      	ldrh	r3, [r3, #2]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d136      	bne.n	800b812 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b7a4:	7bbb      	ldrb	r3, [r7, #14]
 800b7a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d004      	beq.n	800b7b8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b7ae:	7bbb      	ldrb	r3, [r7, #14]
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f001 f967 	bl	800ca86 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	f000 fd21 	bl	800c200 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b7be:	7bbb      	ldrb	r3, [r7, #14]
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	6878      	ldr	r0, [r7, #4]
 800b7c4:	f7ff fde2 	bl	800b38c <USBD_CoreFindEP>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b7cc:	7b7b      	ldrb	r3, [r7, #13]
 800b7ce:	2bff      	cmp	r3, #255	; 0xff
 800b7d0:	d01f      	beq.n	800b812 <USBD_StdEPReq+0x1c6>
 800b7d2:	7b7b      	ldrb	r3, [r7, #13]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d11c      	bne.n	800b812 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b7d8:	7b7a      	ldrb	r2, [r7, #13]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b7e0:	7b7a      	ldrb	r2, [r7, #13]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	32ae      	adds	r2, #174	; 0xae
 800b7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7ea:	689b      	ldr	r3, [r3, #8]
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d010      	beq.n	800b812 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b7f0:	7b7a      	ldrb	r2, [r7, #13]
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	32ae      	adds	r2, #174	; 0xae
 800b7f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7fa:	689b      	ldr	r3, [r3, #8]
 800b7fc:	6839      	ldr	r1, [r7, #0]
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	4798      	blx	r3
 800b802:	4603      	mov	r3, r0
 800b804:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b806:	e004      	b.n	800b812 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fc2d 	bl	800c06a <USBD_CtlError>
              break;
 800b810:	e000      	b.n	800b814 <USBD_StdEPReq+0x1c8>
              break;
 800b812:	bf00      	nop
          }
          break;
 800b814:	e0ab      	b.n	800b96e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b81c:	b2db      	uxtb	r3, r3
 800b81e:	2b02      	cmp	r3, #2
 800b820:	d002      	beq.n	800b828 <USBD_StdEPReq+0x1dc>
 800b822:	2b03      	cmp	r3, #3
 800b824:	d032      	beq.n	800b88c <USBD_StdEPReq+0x240>
 800b826:	e097      	b.n	800b958 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d007      	beq.n	800b83e <USBD_StdEPReq+0x1f2>
 800b82e:	7bbb      	ldrb	r3, [r7, #14]
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d004      	beq.n	800b83e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fc17 	bl	800c06a <USBD_CtlError>
                break;
 800b83c:	e091      	b.n	800b962 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b83e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b842:	2b00      	cmp	r3, #0
 800b844:	da0b      	bge.n	800b85e <USBD_StdEPReq+0x212>
 800b846:	7bbb      	ldrb	r3, [r7, #14]
 800b848:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b84c:	4613      	mov	r3, r2
 800b84e:	009b      	lsls	r3, r3, #2
 800b850:	4413      	add	r3, r2
 800b852:	009b      	lsls	r3, r3, #2
 800b854:	3310      	adds	r3, #16
 800b856:	687a      	ldr	r2, [r7, #4]
 800b858:	4413      	add	r3, r2
 800b85a:	3304      	adds	r3, #4
 800b85c:	e00b      	b.n	800b876 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b870:	687a      	ldr	r2, [r7, #4]
 800b872:	4413      	add	r3, r2
 800b874:	3304      	adds	r3, #4
 800b876:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b878:	68bb      	ldr	r3, [r7, #8]
 800b87a:	2200      	movs	r2, #0
 800b87c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	2202      	movs	r2, #2
 800b882:	4619      	mov	r1, r3
 800b884:	6878      	ldr	r0, [r7, #4]
 800b886:	f000 fc61 	bl	800c14c <USBD_CtlSendData>
              break;
 800b88a:	e06a      	b.n	800b962 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b88c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b890:	2b00      	cmp	r3, #0
 800b892:	da11      	bge.n	800b8b8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b894:	7bbb      	ldrb	r3, [r7, #14]
 800b896:	f003 020f 	and.w	r2, r3, #15
 800b89a:	6879      	ldr	r1, [r7, #4]
 800b89c:	4613      	mov	r3, r2
 800b89e:	009b      	lsls	r3, r3, #2
 800b8a0:	4413      	add	r3, r2
 800b8a2:	009b      	lsls	r3, r3, #2
 800b8a4:	440b      	add	r3, r1
 800b8a6:	3324      	adds	r3, #36	; 0x24
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d117      	bne.n	800b8de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8ae:	6839      	ldr	r1, [r7, #0]
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 fbda 	bl	800c06a <USBD_CtlError>
                  break;
 800b8b6:	e054      	b.n	800b962 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b8b8:	7bbb      	ldrb	r3, [r7, #14]
 800b8ba:	f003 020f 	and.w	r2, r3, #15
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	009b      	lsls	r3, r3, #2
 800b8c4:	4413      	add	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	440b      	add	r3, r1
 800b8ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b8ce:	881b      	ldrh	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d104      	bne.n	800b8de <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b8d4:	6839      	ldr	r1, [r7, #0]
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f000 fbc7 	bl	800c06a <USBD_CtlError>
                  break;
 800b8dc:	e041      	b.n	800b962 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b8de:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	da0b      	bge.n	800b8fe <USBD_StdEPReq+0x2b2>
 800b8e6:	7bbb      	ldrb	r3, [r7, #14]
 800b8e8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	009b      	lsls	r3, r3, #2
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	3310      	adds	r3, #16
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	4413      	add	r3, r2
 800b8fa:	3304      	adds	r3, #4
 800b8fc:	e00b      	b.n	800b916 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b8fe:	7bbb      	ldrb	r3, [r7, #14]
 800b900:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b904:	4613      	mov	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4413      	add	r3, r2
 800b914:	3304      	adds	r3, #4
 800b916:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d002      	beq.n	800b924 <USBD_StdEPReq+0x2d8>
 800b91e:	7bbb      	ldrb	r3, [r7, #14]
 800b920:	2b80      	cmp	r3, #128	; 0x80
 800b922:	d103      	bne.n	800b92c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
 800b92a:	e00e      	b.n	800b94a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b92c:	7bbb      	ldrb	r3, [r7, #14]
 800b92e:	4619      	mov	r1, r3
 800b930:	6878      	ldr	r0, [r7, #4]
 800b932:	f001 f8c7 	bl	800cac4 <USBD_LL_IsStallEP>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d003      	beq.n	800b944 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b93c:	68bb      	ldr	r3, [r7, #8]
 800b93e:	2201      	movs	r2, #1
 800b940:	601a      	str	r2, [r3, #0]
 800b942:	e002      	b.n	800b94a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	2200      	movs	r2, #0
 800b948:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	2202      	movs	r2, #2
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f000 fbfb 	bl	800c14c <USBD_CtlSendData>
              break;
 800b956:	e004      	b.n	800b962 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b958:	6839      	ldr	r1, [r7, #0]
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 fb85 	bl	800c06a <USBD_CtlError>
              break;
 800b960:	bf00      	nop
          }
          break;
 800b962:	e004      	b.n	800b96e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b964:	6839      	ldr	r1, [r7, #0]
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 fb7f 	bl	800c06a <USBD_CtlError>
          break;
 800b96c:	bf00      	nop
      }
      break;
 800b96e:	e005      	b.n	800b97c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b970:	6839      	ldr	r1, [r7, #0]
 800b972:	6878      	ldr	r0, [r7, #4]
 800b974:	f000 fb79 	bl	800c06a <USBD_CtlError>
      break;
 800b978:	e000      	b.n	800b97c <USBD_StdEPReq+0x330>
      break;
 800b97a:	bf00      	nop
  }

  return ret;
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3710      	adds	r7, #16
 800b982:	46bd      	mov	sp, r7
 800b984:	bd80      	pop	{r7, pc}
	...

0800b988 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b996:	2300      	movs	r3, #0
 800b998:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b99a:	2300      	movs	r3, #0
 800b99c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b99e:	683b      	ldr	r3, [r7, #0]
 800b9a0:	885b      	ldrh	r3, [r3, #2]
 800b9a2:	0a1b      	lsrs	r3, r3, #8
 800b9a4:	b29b      	uxth	r3, r3
 800b9a6:	3b01      	subs	r3, #1
 800b9a8:	2b0e      	cmp	r3, #14
 800b9aa:	f200 8152 	bhi.w	800bc52 <USBD_GetDescriptor+0x2ca>
 800b9ae:	a201      	add	r2, pc, #4	; (adr r2, 800b9b4 <USBD_GetDescriptor+0x2c>)
 800b9b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b4:	0800ba25 	.word	0x0800ba25
 800b9b8:	0800ba3d 	.word	0x0800ba3d
 800b9bc:	0800ba7d 	.word	0x0800ba7d
 800b9c0:	0800bc53 	.word	0x0800bc53
 800b9c4:	0800bc53 	.word	0x0800bc53
 800b9c8:	0800bbf3 	.word	0x0800bbf3
 800b9cc:	0800bc1f 	.word	0x0800bc1f
 800b9d0:	0800bc53 	.word	0x0800bc53
 800b9d4:	0800bc53 	.word	0x0800bc53
 800b9d8:	0800bc53 	.word	0x0800bc53
 800b9dc:	0800bc53 	.word	0x0800bc53
 800b9e0:	0800bc53 	.word	0x0800bc53
 800b9e4:	0800bc53 	.word	0x0800bc53
 800b9e8:	0800bc53 	.word	0x0800bc53
 800b9ec:	0800b9f1 	.word	0x0800b9f1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d00b      	beq.n	800ba14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba02:	69db      	ldr	r3, [r3, #28]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	7c12      	ldrb	r2, [r2, #16]
 800ba08:	f107 0108 	add.w	r1, r7, #8
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	4798      	blx	r3
 800ba10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba12:	e126      	b.n	800bc62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ba14:	6839      	ldr	r1, [r7, #0]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f000 fb27 	bl	800c06a <USBD_CtlError>
        err++;
 800ba1c:	7afb      	ldrb	r3, [r7, #11]
 800ba1e:	3301      	adds	r3, #1
 800ba20:	72fb      	strb	r3, [r7, #11]
      break;
 800ba22:	e11e      	b.n	800bc62 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	687a      	ldr	r2, [r7, #4]
 800ba2e:	7c12      	ldrb	r2, [r2, #16]
 800ba30:	f107 0108 	add.w	r1, r7, #8
 800ba34:	4610      	mov	r0, r2
 800ba36:	4798      	blx	r3
 800ba38:	60f8      	str	r0, [r7, #12]
      break;
 800ba3a:	e112      	b.n	800bc62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	7c1b      	ldrb	r3, [r3, #16]
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d10d      	bne.n	800ba60 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba4c:	f107 0208 	add.w	r2, r7, #8
 800ba50:	4610      	mov	r0, r2
 800ba52:	4798      	blx	r3
 800ba54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ba5e:	e100      	b.n	800bc62 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ba66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba68:	f107 0208 	add.w	r2, r7, #8
 800ba6c:	4610      	mov	r0, r2
 800ba6e:	4798      	blx	r3
 800ba70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	3301      	adds	r3, #1
 800ba76:	2202      	movs	r2, #2
 800ba78:	701a      	strb	r2, [r3, #0]
      break;
 800ba7a:	e0f2      	b.n	800bc62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	885b      	ldrh	r3, [r3, #2]
 800ba80:	b2db      	uxtb	r3, r3
 800ba82:	2b05      	cmp	r3, #5
 800ba84:	f200 80ac 	bhi.w	800bbe0 <USBD_GetDescriptor+0x258>
 800ba88:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <USBD_GetDescriptor+0x108>)
 800ba8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba8e:	bf00      	nop
 800ba90:	0800baa9 	.word	0x0800baa9
 800ba94:	0800badd 	.word	0x0800badd
 800ba98:	0800bb11 	.word	0x0800bb11
 800ba9c:	0800bb45 	.word	0x0800bb45
 800baa0:	0800bb79 	.word	0x0800bb79
 800baa4:	0800bbad 	.word	0x0800bbad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baae:	685b      	ldr	r3, [r3, #4]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baba:	685b      	ldr	r3, [r3, #4]
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	7c12      	ldrb	r2, [r2, #16]
 800bac0:	f107 0108 	add.w	r1, r7, #8
 800bac4:	4610      	mov	r0, r2
 800bac6:	4798      	blx	r3
 800bac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800baca:	e091      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bacc:	6839      	ldr	r1, [r7, #0]
 800bace:	6878      	ldr	r0, [r7, #4]
 800bad0:	f000 facb 	bl	800c06a <USBD_CtlError>
            err++;
 800bad4:	7afb      	ldrb	r3, [r7, #11]
 800bad6:	3301      	adds	r3, #1
 800bad8:	72fb      	strb	r3, [r7, #11]
          break;
 800bada:	e089      	b.n	800bbf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bae2:	689b      	ldr	r3, [r3, #8]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d00b      	beq.n	800bb00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800baee:	689b      	ldr	r3, [r3, #8]
 800baf0:	687a      	ldr	r2, [r7, #4]
 800baf2:	7c12      	ldrb	r2, [r2, #16]
 800baf4:	f107 0108 	add.w	r1, r7, #8
 800baf8:	4610      	mov	r0, r2
 800bafa:	4798      	blx	r3
 800bafc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bafe:	e077      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb00:	6839      	ldr	r1, [r7, #0]
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 fab1 	bl	800c06a <USBD_CtlError>
            err++;
 800bb08:	7afb      	ldrb	r3, [r7, #11]
 800bb0a:	3301      	adds	r3, #1
 800bb0c:	72fb      	strb	r3, [r7, #11]
          break;
 800bb0e:	e06f      	b.n	800bbf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb16:	68db      	ldr	r3, [r3, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d00b      	beq.n	800bb34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	687a      	ldr	r2, [r7, #4]
 800bb26:	7c12      	ldrb	r2, [r2, #16]
 800bb28:	f107 0108 	add.w	r1, r7, #8
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
 800bb30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb32:	e05d      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb34:	6839      	ldr	r1, [r7, #0]
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 fa97 	bl	800c06a <USBD_CtlError>
            err++;
 800bb3c:	7afb      	ldrb	r3, [r7, #11]
 800bb3e:	3301      	adds	r3, #1
 800bb40:	72fb      	strb	r3, [r7, #11]
          break;
 800bb42:	e055      	b.n	800bbf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb4a:	691b      	ldr	r3, [r3, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d00b      	beq.n	800bb68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb56:	691b      	ldr	r3, [r3, #16]
 800bb58:	687a      	ldr	r2, [r7, #4]
 800bb5a:	7c12      	ldrb	r2, [r2, #16]
 800bb5c:	f107 0108 	add.w	r1, r7, #8
 800bb60:	4610      	mov	r0, r2
 800bb62:	4798      	blx	r3
 800bb64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb66:	e043      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb68:	6839      	ldr	r1, [r7, #0]
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 fa7d 	bl	800c06a <USBD_CtlError>
            err++;
 800bb70:	7afb      	ldrb	r3, [r7, #11]
 800bb72:	3301      	adds	r3, #1
 800bb74:	72fb      	strb	r3, [r7, #11]
          break;
 800bb76:	e03b      	b.n	800bbf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb7e:	695b      	ldr	r3, [r3, #20]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d00b      	beq.n	800bb9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	687a      	ldr	r2, [r7, #4]
 800bb8e:	7c12      	ldrb	r2, [r2, #16]
 800bb90:	f107 0108 	add.w	r1, r7, #8
 800bb94:	4610      	mov	r0, r2
 800bb96:	4798      	blx	r3
 800bb98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bb9a:	e029      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bb9c:	6839      	ldr	r1, [r7, #0]
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fa63 	bl	800c06a <USBD_CtlError>
            err++;
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	3301      	adds	r3, #1
 800bba8:	72fb      	strb	r3, [r7, #11]
          break;
 800bbaa:	e021      	b.n	800bbf0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d00b      	beq.n	800bbd0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800bbbe:	699b      	ldr	r3, [r3, #24]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	7c12      	ldrb	r2, [r2, #16]
 800bbc4:	f107 0108 	add.w	r1, r7, #8
 800bbc8:	4610      	mov	r0, r2
 800bbca:	4798      	blx	r3
 800bbcc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bbce:	e00f      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800bbd0:	6839      	ldr	r1, [r7, #0]
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f000 fa49 	bl	800c06a <USBD_CtlError>
            err++;
 800bbd8:	7afb      	ldrb	r3, [r7, #11]
 800bbda:	3301      	adds	r3, #1
 800bbdc:	72fb      	strb	r3, [r7, #11]
          break;
 800bbde:	e007      	b.n	800bbf0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bbe0:	6839      	ldr	r1, [r7, #0]
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fa41 	bl	800c06a <USBD_CtlError>
          err++;
 800bbe8:	7afb      	ldrb	r3, [r7, #11]
 800bbea:	3301      	adds	r3, #1
 800bbec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bbee:	bf00      	nop
      }
      break;
 800bbf0:	e037      	b.n	800bc62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	7c1b      	ldrb	r3, [r3, #16]
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d109      	bne.n	800bc0e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc02:	f107 0208 	add.w	r2, r7, #8
 800bc06:	4610      	mov	r0, r2
 800bc08:	4798      	blx	r3
 800bc0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc0c:	e029      	b.n	800bc62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 fa2a 	bl	800c06a <USBD_CtlError>
        err++;
 800bc16:	7afb      	ldrb	r3, [r7, #11]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	72fb      	strb	r3, [r7, #11]
      break;
 800bc1c:	e021      	b.n	800bc62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	7c1b      	ldrb	r3, [r3, #16]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10d      	bne.n	800bc42 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800bc2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2e:	f107 0208 	add.w	r2, r7, #8
 800bc32:	4610      	mov	r0, r2
 800bc34:	4798      	blx	r3
 800bc36:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	2207      	movs	r2, #7
 800bc3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bc40:	e00f      	b.n	800bc62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800bc42:	6839      	ldr	r1, [r7, #0]
 800bc44:	6878      	ldr	r0, [r7, #4]
 800bc46:	f000 fa10 	bl	800c06a <USBD_CtlError>
        err++;
 800bc4a:	7afb      	ldrb	r3, [r7, #11]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	72fb      	strb	r3, [r7, #11]
      break;
 800bc50:	e007      	b.n	800bc62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800bc52:	6839      	ldr	r1, [r7, #0]
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fa08 	bl	800c06a <USBD_CtlError>
      err++;
 800bc5a:	7afb      	ldrb	r3, [r7, #11]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	72fb      	strb	r3, [r7, #11]
      break;
 800bc60:	bf00      	nop
  }

  if (err != 0U)
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d11e      	bne.n	800bca6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	88db      	ldrh	r3, [r3, #6]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d016      	beq.n	800bc9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800bc70:	893b      	ldrh	r3, [r7, #8]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d00e      	beq.n	800bc94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	88da      	ldrh	r2, [r3, #6]
 800bc7a:	893b      	ldrh	r3, [r7, #8]
 800bc7c:	4293      	cmp	r3, r2
 800bc7e:	bf28      	it	cs
 800bc80:	4613      	movcs	r3, r2
 800bc82:	b29b      	uxth	r3, r3
 800bc84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bc86:	893b      	ldrh	r3, [r7, #8]
 800bc88:	461a      	mov	r2, r3
 800bc8a:	68f9      	ldr	r1, [r7, #12]
 800bc8c:	6878      	ldr	r0, [r7, #4]
 800bc8e:	f000 fa5d 	bl	800c14c <USBD_CtlSendData>
 800bc92:	e009      	b.n	800bca8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bc94:	6839      	ldr	r1, [r7, #0]
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f000 f9e7 	bl	800c06a <USBD_CtlError>
 800bc9c:	e004      	b.n	800bca8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 faae 	bl	800c200 <USBD_CtlSendStatus>
 800bca4:	e000      	b.n	800bca8 <USBD_GetDescriptor+0x320>
    return;
 800bca6:	bf00      	nop
  }
}
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}
 800bcae:	bf00      	nop

0800bcb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	b084      	sub	sp, #16
 800bcb4:	af00      	add	r7, sp, #0
 800bcb6:	6078      	str	r0, [r7, #4]
 800bcb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	889b      	ldrh	r3, [r3, #4]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d131      	bne.n	800bd26 <USBD_SetAddress+0x76>
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	88db      	ldrh	r3, [r3, #6]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d12d      	bne.n	800bd26 <USBD_SetAddress+0x76>
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	885b      	ldrh	r3, [r3, #2]
 800bcce:	2b7f      	cmp	r3, #127	; 0x7f
 800bcd0:	d829      	bhi.n	800bd26 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	885b      	ldrh	r3, [r3, #2]
 800bcd6:	b2db      	uxtb	r3, r3
 800bcd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b03      	cmp	r3, #3
 800bce8:	d104      	bne.n	800bcf4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bcea:	6839      	ldr	r1, [r7, #0]
 800bcec:	6878      	ldr	r0, [r7, #4]
 800bcee:	f000 f9bc 	bl	800c06a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bcf2:	e01d      	b.n	800bd30 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	7bfa      	ldrb	r2, [r7, #15]
 800bcf8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bcfc:	7bfb      	ldrb	r3, [r7, #15]
 800bcfe:	4619      	mov	r1, r3
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 ff0b 	bl	800cb1c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fa7a 	bl	800c200 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bd0c:	7bfb      	ldrb	r3, [r7, #15]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d004      	beq.n	800bd1c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2202      	movs	r2, #2
 800bd16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd1a:	e009      	b.n	800bd30 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd24:	e004      	b.n	800bd30 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bd26:	6839      	ldr	r1, [r7, #0]
 800bd28:	6878      	ldr	r0, [r7, #4]
 800bd2a:	f000 f99e 	bl	800c06a <USBD_CtlError>
  }
}
 800bd2e:	bf00      	nop
 800bd30:	bf00      	nop
 800bd32:	3710      	adds	r7, #16
 800bd34:	46bd      	mov	sp, r7
 800bd36:	bd80      	pop	{r7, pc}

0800bd38 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd38:	b580      	push	{r7, lr}
 800bd3a:	b084      	sub	sp, #16
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd42:	2300      	movs	r3, #0
 800bd44:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	b2da      	uxtb	r2, r3
 800bd4c:	4b4e      	ldr	r3, [pc, #312]	; (800be88 <USBD_SetConfig+0x150>)
 800bd4e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bd50:	4b4d      	ldr	r3, [pc, #308]	; (800be88 <USBD_SetConfig+0x150>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d905      	bls.n	800bd64 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f000 f985 	bl	800c06a <USBD_CtlError>
    return USBD_FAIL;
 800bd60:	2303      	movs	r3, #3
 800bd62:	e08c      	b.n	800be7e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b02      	cmp	r3, #2
 800bd6e:	d002      	beq.n	800bd76 <USBD_SetConfig+0x3e>
 800bd70:	2b03      	cmp	r3, #3
 800bd72:	d029      	beq.n	800bdc8 <USBD_SetConfig+0x90>
 800bd74:	e075      	b.n	800be62 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bd76:	4b44      	ldr	r3, [pc, #272]	; (800be88 <USBD_SetConfig+0x150>)
 800bd78:	781b      	ldrb	r3, [r3, #0]
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d020      	beq.n	800bdc0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bd7e:	4b42      	ldr	r3, [pc, #264]	; (800be88 <USBD_SetConfig+0x150>)
 800bd80:	781b      	ldrb	r3, [r3, #0]
 800bd82:	461a      	mov	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bd88:	4b3f      	ldr	r3, [pc, #252]	; (800be88 <USBD_SetConfig+0x150>)
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	4619      	mov	r1, r3
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f7fe ffbd 	bl	800ad0e <USBD_SetClassConfig>
 800bd94:	4603      	mov	r3, r0
 800bd96:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bd98:	7bfb      	ldrb	r3, [r7, #15]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d008      	beq.n	800bdb0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bd9e:	6839      	ldr	r1, [r7, #0]
 800bda0:	6878      	ldr	r0, [r7, #4]
 800bda2:	f000 f962 	bl	800c06a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2202      	movs	r2, #2
 800bdaa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdae:	e065      	b.n	800be7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f000 fa25 	bl	800c200 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2203      	movs	r2, #3
 800bdba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800bdbe:	e05d      	b.n	800be7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fa1d 	bl	800c200 <USBD_CtlSendStatus>
      break;
 800bdc6:	e059      	b.n	800be7c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bdc8:	4b2f      	ldr	r3, [pc, #188]	; (800be88 <USBD_SetConfig+0x150>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d112      	bne.n	800bdf6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2202      	movs	r2, #2
 800bdd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800bdd8:	4b2b      	ldr	r3, [pc, #172]	; (800be88 <USBD_SetConfig+0x150>)
 800bdda:	781b      	ldrb	r3, [r3, #0]
 800bddc:	461a      	mov	r2, r3
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bde2:	4b29      	ldr	r3, [pc, #164]	; (800be88 <USBD_SetConfig+0x150>)
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	4619      	mov	r1, r3
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f7fe ffac 	bl	800ad46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fa06 	bl	800c200 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bdf4:	e042      	b.n	800be7c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bdf6:	4b24      	ldr	r3, [pc, #144]	; (800be88 <USBD_SetConfig+0x150>)
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	461a      	mov	r2, r3
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	685b      	ldr	r3, [r3, #4]
 800be00:	429a      	cmp	r2, r3
 800be02:	d02a      	beq.n	800be5a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	685b      	ldr	r3, [r3, #4]
 800be08:	b2db      	uxtb	r3, r3
 800be0a:	4619      	mov	r1, r3
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7fe ff9a 	bl	800ad46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800be12:	4b1d      	ldr	r3, [pc, #116]	; (800be88 <USBD_SetConfig+0x150>)
 800be14:	781b      	ldrb	r3, [r3, #0]
 800be16:	461a      	mov	r2, r3
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800be1c:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <USBD_SetConfig+0x150>)
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	4619      	mov	r1, r3
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f7fe ff73 	bl	800ad0e <USBD_SetClassConfig>
 800be28:	4603      	mov	r3, r0
 800be2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800be2c:	7bfb      	ldrb	r3, [r7, #15]
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d00f      	beq.n	800be52 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800be32:	6839      	ldr	r1, [r7, #0]
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 f918 	bl	800c06a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	b2db      	uxtb	r3, r3
 800be40:	4619      	mov	r1, r3
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f7fe ff7f 	bl	800ad46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2202      	movs	r2, #2
 800be4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800be50:	e014      	b.n	800be7c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f000 f9d4 	bl	800c200 <USBD_CtlSendStatus>
      break;
 800be58:	e010      	b.n	800be7c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f9d0 	bl	800c200 <USBD_CtlSendStatus>
      break;
 800be60:	e00c      	b.n	800be7c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800be62:	6839      	ldr	r1, [r7, #0]
 800be64:	6878      	ldr	r0, [r7, #4]
 800be66:	f000 f900 	bl	800c06a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800be6a:	4b07      	ldr	r3, [pc, #28]	; (800be88 <USBD_SetConfig+0x150>)
 800be6c:	781b      	ldrb	r3, [r3, #0]
 800be6e:	4619      	mov	r1, r3
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7fe ff68 	bl	800ad46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800be76:	2303      	movs	r3, #3
 800be78:	73fb      	strb	r3, [r7, #15]
      break;
 800be7a:	bf00      	nop
  }

  return ret;
 800be7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800be7e:	4618      	mov	r0, r3
 800be80:	3710      	adds	r7, #16
 800be82:	46bd      	mov	sp, r7
 800be84:	bd80      	pop	{r7, pc}
 800be86:	bf00      	nop
 800be88:	200005c4 	.word	0x200005c4

0800be8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
 800be94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800be96:	683b      	ldr	r3, [r7, #0]
 800be98:	88db      	ldrh	r3, [r3, #6]
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d004      	beq.n	800bea8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800be9e:	6839      	ldr	r1, [r7, #0]
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f000 f8e2 	bl	800c06a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bea6:	e023      	b.n	800bef0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800beae:	b2db      	uxtb	r3, r3
 800beb0:	2b02      	cmp	r3, #2
 800beb2:	dc02      	bgt.n	800beba <USBD_GetConfig+0x2e>
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	dc03      	bgt.n	800bec0 <USBD_GetConfig+0x34>
 800beb8:	e015      	b.n	800bee6 <USBD_GetConfig+0x5a>
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d00b      	beq.n	800bed6 <USBD_GetConfig+0x4a>
 800bebe:	e012      	b.n	800bee6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2200      	movs	r2, #0
 800bec4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	3308      	adds	r3, #8
 800beca:	2201      	movs	r2, #1
 800becc:	4619      	mov	r1, r3
 800bece:	6878      	ldr	r0, [r7, #4]
 800bed0:	f000 f93c 	bl	800c14c <USBD_CtlSendData>
        break;
 800bed4:	e00c      	b.n	800bef0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	3304      	adds	r3, #4
 800beda:	2201      	movs	r2, #1
 800bedc:	4619      	mov	r1, r3
 800bede:	6878      	ldr	r0, [r7, #4]
 800bee0:	f000 f934 	bl	800c14c <USBD_CtlSendData>
        break;
 800bee4:	e004      	b.n	800bef0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bee6:	6839      	ldr	r1, [r7, #0]
 800bee8:	6878      	ldr	r0, [r7, #4]
 800beea:	f000 f8be 	bl	800c06a <USBD_CtlError>
        break;
 800beee:	bf00      	nop
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bf08:	b2db      	uxtb	r3, r3
 800bf0a:	3b01      	subs	r3, #1
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d81e      	bhi.n	800bf4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bf10:	683b      	ldr	r3, [r7, #0]
 800bf12:	88db      	ldrh	r3, [r3, #6]
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d004      	beq.n	800bf22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bf18:	6839      	ldr	r1, [r7, #0]
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 f8a5 	bl	800c06a <USBD_CtlError>
        break;
 800bf20:	e01a      	b.n	800bf58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2201      	movs	r2, #1
 800bf26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d005      	beq.n	800bf3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	68db      	ldr	r3, [r3, #12]
 800bf36:	f043 0202 	orr.w	r2, r3, #2
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	330c      	adds	r3, #12
 800bf42:	2202      	movs	r2, #2
 800bf44:	4619      	mov	r1, r3
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 f900 	bl	800c14c <USBD_CtlSendData>
      break;
 800bf4c:	e004      	b.n	800bf58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 f88a 	bl	800c06a <USBD_CtlError>
      break;
 800bf56:	bf00      	nop
  }
}
 800bf58:	bf00      	nop
 800bf5a:	3708      	adds	r7, #8
 800bf5c:	46bd      	mov	sp, r7
 800bf5e:	bd80      	pop	{r7, pc}

0800bf60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b082      	sub	sp, #8
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	2b01      	cmp	r3, #1
 800bf70:	d107      	bne.n	800bf82 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2201      	movs	r2, #1
 800bf76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f940 	bl	800c200 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bf80:	e013      	b.n	800bfaa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	885b      	ldrh	r3, [r3, #2]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d10b      	bne.n	800bfa2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	889b      	ldrh	r3, [r3, #4]
 800bf8e:	0a1b      	lsrs	r3, r3, #8
 800bf90:	b29b      	uxth	r3, r3
 800bf92:	b2da      	uxtb	r2, r3
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bf9a:	6878      	ldr	r0, [r7, #4]
 800bf9c:	f000 f930 	bl	800c200 <USBD_CtlSendStatus>
}
 800bfa0:	e003      	b.n	800bfaa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bfa2:	6839      	ldr	r1, [r7, #0]
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f860 	bl	800c06a <USBD_CtlError>
}
 800bfaa:	bf00      	nop
 800bfac:	3708      	adds	r7, #8
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}

0800bfb2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfb2:	b580      	push	{r7, lr}
 800bfb4:	b082      	sub	sp, #8
 800bfb6:	af00      	add	r7, sp, #0
 800bfb8:	6078      	str	r0, [r7, #4]
 800bfba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bfc2:	b2db      	uxtb	r3, r3
 800bfc4:	3b01      	subs	r3, #1
 800bfc6:	2b02      	cmp	r3, #2
 800bfc8:	d80b      	bhi.n	800bfe2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	885b      	ldrh	r3, [r3, #2]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d10c      	bne.n	800bfec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	2200      	movs	r2, #0
 800bfd6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f000 f910 	bl	800c200 <USBD_CtlSendStatus>
      }
      break;
 800bfe0:	e004      	b.n	800bfec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bfe2:	6839      	ldr	r1, [r7, #0]
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f000 f840 	bl	800c06a <USBD_CtlError>
      break;
 800bfea:	e000      	b.n	800bfee <USBD_ClrFeature+0x3c>
      break;
 800bfec:	bf00      	nop
  }
}
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}

0800bff6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bff6:	b580      	push	{r7, lr}
 800bff8:	b084      	sub	sp, #16
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
 800bffe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	781a      	ldrb	r2, [r3, #0]
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
 800c010:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	781a      	ldrb	r2, [r3, #0]
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	3301      	adds	r3, #1
 800c01e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f7ff fa17 	bl	800b454 <SWAPBYTE>
 800c026:	4603      	mov	r3, r0
 800c028:	461a      	mov	r2, r3
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	3301      	adds	r3, #1
 800c032:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	3301      	adds	r3, #1
 800c038:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c03a:	68f8      	ldr	r0, [r7, #12]
 800c03c:	f7ff fa0a 	bl	800b454 <SWAPBYTE>
 800c040:	4603      	mov	r3, r0
 800c042:	461a      	mov	r2, r3
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	3301      	adds	r3, #1
 800c04c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	3301      	adds	r3, #1
 800c052:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f7ff f9fd 	bl	800b454 <SWAPBYTE>
 800c05a:	4603      	mov	r3, r0
 800c05c:	461a      	mov	r2, r3
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	80da      	strh	r2, [r3, #6]
}
 800c062:	bf00      	nop
 800c064:	3710      	adds	r7, #16
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b082      	sub	sp, #8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c074:	2180      	movs	r1, #128	; 0x80
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fce6 	bl	800ca48 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c07c:	2100      	movs	r1, #0
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f000 fce2 	bl	800ca48 <USBD_LL_StallEP>
}
 800c084:	bf00      	nop
 800c086:	3708      	adds	r7, #8
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	60f8      	str	r0, [r7, #12]
 800c094:	60b9      	str	r1, [r7, #8]
 800c096:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c098:	2300      	movs	r3, #0
 800c09a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d036      	beq.n	800c110 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800c0a2:	68fb      	ldr	r3, [r7, #12]
 800c0a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800c0a6:	6938      	ldr	r0, [r7, #16]
 800c0a8:	f000 f836 	bl	800c118 <USBD_GetLen>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	3301      	adds	r3, #1
 800c0b0:	b29b      	uxth	r3, r3
 800c0b2:	005b      	lsls	r3, r3, #1
 800c0b4:	b29a      	uxth	r2, r3
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c0ba:	7dfb      	ldrb	r3, [r7, #23]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	4413      	add	r3, r2
 800c0c0:	687a      	ldr	r2, [r7, #4]
 800c0c2:	7812      	ldrb	r2, [r2, #0]
 800c0c4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0c6:	7dfb      	ldrb	r3, [r7, #23]
 800c0c8:	3301      	adds	r3, #1
 800c0ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c0cc:	7dfb      	ldrb	r3, [r7, #23]
 800c0ce:	68ba      	ldr	r2, [r7, #8]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	2203      	movs	r2, #3
 800c0d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800c0d6:	7dfb      	ldrb	r3, [r7, #23]
 800c0d8:	3301      	adds	r3, #1
 800c0da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c0dc:	e013      	b.n	800c106 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800c0de:	7dfb      	ldrb	r3, [r7, #23]
 800c0e0:	68ba      	ldr	r2, [r7, #8]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	693a      	ldr	r2, [r7, #16]
 800c0e6:	7812      	ldrb	r2, [r2, #0]
 800c0e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c0ea:	693b      	ldr	r3, [r7, #16]
 800c0ec:	3301      	adds	r3, #1
 800c0ee:	613b      	str	r3, [r7, #16]
    idx++;
 800c0f0:	7dfb      	ldrb	r3, [r7, #23]
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	68ba      	ldr	r2, [r7, #8]
 800c0fa:	4413      	add	r3, r2
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	701a      	strb	r2, [r3, #0]
    idx++;
 800c100:	7dfb      	ldrb	r3, [r7, #23]
 800c102:	3301      	adds	r3, #1
 800c104:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c106:	693b      	ldr	r3, [r7, #16]
 800c108:	781b      	ldrb	r3, [r3, #0]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d1e7      	bne.n	800c0de <USBD_GetString+0x52>
 800c10e:	e000      	b.n	800c112 <USBD_GetString+0x86>
    return;
 800c110:	bf00      	nop
  }
}
 800c112:	3718      	adds	r7, #24
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}

0800c118 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c118:	b480      	push	{r7}
 800c11a:	b085      	sub	sp, #20
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c120:	2300      	movs	r3, #0
 800c122:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c128:	e005      	b.n	800c136 <USBD_GetLen+0x1e>
  {
    len++;
 800c12a:	7bfb      	ldrb	r3, [r7, #15]
 800c12c:	3301      	adds	r3, #1
 800c12e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c130:	68bb      	ldr	r3, [r7, #8]
 800c132:	3301      	adds	r3, #1
 800c134:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c136:	68bb      	ldr	r3, [r7, #8]
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1f5      	bne.n	800c12a <USBD_GetLen+0x12>
  }

  return len;
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c140:	4618      	mov	r0, r3
 800c142:	3714      	adds	r7, #20
 800c144:	46bd      	mov	sp, r7
 800c146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14a:	4770      	bx	lr

0800c14c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	60f8      	str	r0, [r7, #12]
 800c154:	60b9      	str	r1, [r7, #8]
 800c156:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	2202      	movs	r2, #2
 800c15c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800c160:	68fb      	ldr	r3, [r7, #12]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	2100      	movs	r1, #0
 800c172:	68f8      	ldr	r0, [r7, #12]
 800c174:	f000 fcf1 	bl	800cb5a <USBD_LL_Transmit>

  return USBD_OK;
 800c178:	2300      	movs	r3, #0
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}

0800c182 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c182:	b580      	push	{r7, lr}
 800c184:	b084      	sub	sp, #16
 800c186:	af00      	add	r7, sp, #0
 800c188:	60f8      	str	r0, [r7, #12]
 800c18a:	60b9      	str	r1, [r7, #8]
 800c18c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	68ba      	ldr	r2, [r7, #8]
 800c192:	2100      	movs	r1, #0
 800c194:	68f8      	ldr	r0, [r7, #12]
 800c196:	f000 fce0 	bl	800cb5a <USBD_LL_Transmit>

  return USBD_OK;
 800c19a:	2300      	movs	r3, #0
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3710      	adds	r7, #16
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	60f8      	str	r0, [r7, #12]
 800c1ac:	60b9      	str	r1, [r7, #8]
 800c1ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c1b0:	68fb      	ldr	r3, [r7, #12]
 800c1b2:	2203      	movs	r2, #3
 800c1b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	687a      	ldr	r2, [r7, #4]
 800c1c4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68ba      	ldr	r2, [r7, #8]
 800c1cc:	2100      	movs	r1, #0
 800c1ce:	68f8      	ldr	r0, [r7, #12]
 800c1d0:	f000 fce4 	bl	800cb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1d4:	2300      	movs	r3, #0
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3710      	adds	r7, #16
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}

0800c1de <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c1de:	b580      	push	{r7, lr}
 800c1e0:	b084      	sub	sp, #16
 800c1e2:	af00      	add	r7, sp, #0
 800c1e4:	60f8      	str	r0, [r7, #12]
 800c1e6:	60b9      	str	r1, [r7, #8]
 800c1e8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	68f8      	ldr	r0, [r7, #12]
 800c1f2:	f000 fcd3 	bl	800cb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	3710      	adds	r7, #16
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2204      	movs	r2, #4
 800c20c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c210:	2300      	movs	r3, #0
 800c212:	2200      	movs	r2, #0
 800c214:	2100      	movs	r1, #0
 800c216:	6878      	ldr	r0, [r7, #4]
 800c218:	f000 fc9f 	bl	800cb5a <USBD_LL_Transmit>

  return USBD_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	4618      	mov	r0, r3
 800c220:	3708      	adds	r7, #8
 800c222:	46bd      	mov	sp, r7
 800c224:	bd80      	pop	{r7, pc}

0800c226 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c226:	b580      	push	{r7, lr}
 800c228:	b082      	sub	sp, #8
 800c22a:	af00      	add	r7, sp, #0
 800c22c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2205      	movs	r2, #5
 800c232:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c236:	2300      	movs	r3, #0
 800c238:	2200      	movs	r2, #0
 800c23a:	2100      	movs	r1, #0
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 fcad 	bl	800cb9c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c242:	2300      	movs	r3, #0
}
 800c244:	4618      	mov	r0, r3
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 800c250:	2201      	movs	r2, #1
 800c252:	4912      	ldr	r1, [pc, #72]	; (800c29c <MX_USB_DEVICE_Init+0x50>)
 800c254:	4812      	ldr	r0, [pc, #72]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c256:	f7fe fcdd 	bl	800ac14 <USBD_Init>
 800c25a:	4603      	mov	r3, r0
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d001      	beq.n	800c264 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c260:	f7f4 fee2 	bl	8001028 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 800c264:	490f      	ldr	r1, [pc, #60]	; (800c2a4 <MX_USB_DEVICE_Init+0x58>)
 800c266:	480e      	ldr	r0, [pc, #56]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c268:	f7fe fd04 	bl	800ac74 <USBD_RegisterClass>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d001      	beq.n	800c276 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c272:	f7f4 fed9 	bl	8001028 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 800c276:	490c      	ldr	r1, [pc, #48]	; (800c2a8 <MX_USB_DEVICE_Init+0x5c>)
 800c278:	4809      	ldr	r0, [pc, #36]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c27a:	f7fe fc3b 	bl	800aaf4 <USBD_CDC_RegisterInterface>
 800c27e:	4603      	mov	r3, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	d001      	beq.n	800c288 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c284:	f7f4 fed0 	bl	8001028 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 800c288:	4805      	ldr	r0, [pc, #20]	; (800c2a0 <MX_USB_DEVICE_Init+0x54>)
 800c28a:	f7fe fd29 	bl	800ace0 <USBD_Start>
 800c28e:	4603      	mov	r3, r0
 800c290:	2b00      	cmp	r3, #0
 800c292:	d001      	beq.n	800c298 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c294:	f7f4 fec8 	bl	8001028 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c298:	bf00      	nop
 800c29a:	bd80      	pop	{r7, pc}
 800c29c:	200000b0 	.word	0x200000b0
 800c2a0:	200005c8 	.word	0x200005c8
 800c2a4:	2000001c 	.word	0x2000001c
 800c2a8:	2000009c 	.word	0x2000009c

0800c2ac <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 800c2ac:	b580      	push	{r7, lr}
 800c2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4905      	ldr	r1, [pc, #20]	; (800c2c8 <CDC_Init_HS+0x1c>)
 800c2b4:	4805      	ldr	r0, [pc, #20]	; (800c2cc <CDC_Init_HS+0x20>)
 800c2b6:	f7fe fc37 	bl	800ab28 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 800c2ba:	4905      	ldr	r1, [pc, #20]	; (800c2d0 <CDC_Init_HS+0x24>)
 800c2bc:	4803      	ldr	r0, [pc, #12]	; (800c2cc <CDC_Init_HS+0x20>)
 800c2be:	f7fe fc55 	bl	800ab6c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c2c2:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	bd80      	pop	{r7, pc}
 800c2c8:	200010a4 	.word	0x200010a4
 800c2cc:	200005c8 	.word	0x200005c8
 800c2d0:	200008a4 	.word	0x200008a4

0800c2d4 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 800c2d8:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e2:	4770      	bx	lr

0800c2e4 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b083      	sub	sp, #12
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	6039      	str	r1, [r7, #0]
 800c2ee:	71fb      	strb	r3, [r7, #7]
 800c2f0:	4613      	mov	r3, r2
 800c2f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 800c2f4:	79fb      	ldrb	r3, [r7, #7]
 800c2f6:	2b23      	cmp	r3, #35	; 0x23
 800c2f8:	d84a      	bhi.n	800c390 <CDC_Control_HS+0xac>
 800c2fa:	a201      	add	r2, pc, #4	; (adr r2, 800c300 <CDC_Control_HS+0x1c>)
 800c2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c300:	0800c391 	.word	0x0800c391
 800c304:	0800c391 	.word	0x0800c391
 800c308:	0800c391 	.word	0x0800c391
 800c30c:	0800c391 	.word	0x0800c391
 800c310:	0800c391 	.word	0x0800c391
 800c314:	0800c391 	.word	0x0800c391
 800c318:	0800c391 	.word	0x0800c391
 800c31c:	0800c391 	.word	0x0800c391
 800c320:	0800c391 	.word	0x0800c391
 800c324:	0800c391 	.word	0x0800c391
 800c328:	0800c391 	.word	0x0800c391
 800c32c:	0800c391 	.word	0x0800c391
 800c330:	0800c391 	.word	0x0800c391
 800c334:	0800c391 	.word	0x0800c391
 800c338:	0800c391 	.word	0x0800c391
 800c33c:	0800c391 	.word	0x0800c391
 800c340:	0800c391 	.word	0x0800c391
 800c344:	0800c391 	.word	0x0800c391
 800c348:	0800c391 	.word	0x0800c391
 800c34c:	0800c391 	.word	0x0800c391
 800c350:	0800c391 	.word	0x0800c391
 800c354:	0800c391 	.word	0x0800c391
 800c358:	0800c391 	.word	0x0800c391
 800c35c:	0800c391 	.word	0x0800c391
 800c360:	0800c391 	.word	0x0800c391
 800c364:	0800c391 	.word	0x0800c391
 800c368:	0800c391 	.word	0x0800c391
 800c36c:	0800c391 	.word	0x0800c391
 800c370:	0800c391 	.word	0x0800c391
 800c374:	0800c391 	.word	0x0800c391
 800c378:	0800c391 	.word	0x0800c391
 800c37c:	0800c391 	.word	0x0800c391
 800c380:	0800c391 	.word	0x0800c391
 800c384:	0800c391 	.word	0x0800c391
 800c388:	0800c391 	.word	0x0800c391
 800c38c:	0800c391 	.word	0x0800c391
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c390:	bf00      	nop
  }

  return (USBD_OK);
 800c392:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800c394:	4618      	mov	r0, r3
 800c396:	370c      	adds	r7, #12
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b082      	sub	sp, #8
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 800c3aa:	6879      	ldr	r1, [r7, #4]
 800c3ac:	4805      	ldr	r0, [pc, #20]	; (800c3c4 <CDC_Receive_HS+0x24>)
 800c3ae:	f7fe fbdd 	bl	800ab6c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 800c3b2:	4804      	ldr	r0, [pc, #16]	; (800c3c4 <CDC_Receive_HS+0x24>)
 800c3b4:	f7fe fbf8 	bl	800aba8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c3b8:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	3708      	adds	r7, #8
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	bd80      	pop	{r7, pc}
 800c3c2:	bf00      	nop
 800c3c4:	200005c8 	.word	0x200005c8

0800c3c8 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b087      	sub	sp, #28
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	4613      	mov	r3, r2
 800c3d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 800c3da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	371c      	adds	r7, #28
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e8:	4770      	bx	lr
	...

0800c3ec <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c3ec:	b480      	push	{r7}
 800c3ee:	b083      	sub	sp, #12
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	6039      	str	r1, [r7, #0]
 800c3f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 800c3f8:	683b      	ldr	r3, [r7, #0]
 800c3fa:	2212      	movs	r2, #18
 800c3fc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 800c3fe:	4b03      	ldr	r3, [pc, #12]	; (800c40c <USBD_HS_DeviceDescriptor+0x20>)
}
 800c400:	4618      	mov	r0, r3
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	200000d0 	.word	0x200000d0

0800c410 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	4603      	mov	r3, r0
 800c418:	6039      	str	r1, [r7, #0]
 800c41a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	2204      	movs	r2, #4
 800c420:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c422:	4b03      	ldr	r3, [pc, #12]	; (800c430 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 800c424:	4618      	mov	r0, r3
 800c426:	370c      	adds	r7, #12
 800c428:	46bd      	mov	sp, r7
 800c42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42e:	4770      	bx	lr
 800c430:	200000f0 	.word	0x200000f0

0800c434 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	6039      	str	r1, [r7, #0]
 800c43e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c440:	79fb      	ldrb	r3, [r7, #7]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d105      	bne.n	800c452 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c446:	683a      	ldr	r2, [r7, #0]
 800c448:	4907      	ldr	r1, [pc, #28]	; (800c468 <USBD_HS_ProductStrDescriptor+0x34>)
 800c44a:	4808      	ldr	r0, [pc, #32]	; (800c46c <USBD_HS_ProductStrDescriptor+0x38>)
 800c44c:	f7ff fe1e 	bl	800c08c <USBD_GetString>
 800c450:	e004      	b.n	800c45c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 800c452:	683a      	ldr	r2, [r7, #0]
 800c454:	4904      	ldr	r1, [pc, #16]	; (800c468 <USBD_HS_ProductStrDescriptor+0x34>)
 800c456:	4805      	ldr	r0, [pc, #20]	; (800c46c <USBD_HS_ProductStrDescriptor+0x38>)
 800c458:	f7ff fe18 	bl	800c08c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c45c:	4b02      	ldr	r3, [pc, #8]	; (800c468 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	200018a4 	.word	0x200018a4
 800c46c:	0800cfdc 	.word	0x0800cfdc

0800c470 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b082      	sub	sp, #8
 800c474:	af00      	add	r7, sp, #0
 800c476:	4603      	mov	r3, r0
 800c478:	6039      	str	r1, [r7, #0]
 800c47a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	4904      	ldr	r1, [pc, #16]	; (800c490 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 800c480:	4804      	ldr	r0, [pc, #16]	; (800c494 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 800c482:	f7ff fe03 	bl	800c08c <USBD_GetString>
  return USBD_StrDesc;
 800c486:	4b02      	ldr	r3, [pc, #8]	; (800c490 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 800c488:	4618      	mov	r0, r3
 800c48a:	3708      	adds	r7, #8
 800c48c:	46bd      	mov	sp, r7
 800c48e:	bd80      	pop	{r7, pc}
 800c490:	200018a4 	.word	0x200018a4
 800c494:	0800cff4 	.word	0x0800cff4

0800c498 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b082      	sub	sp, #8
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	4603      	mov	r3, r0
 800c4a0:	6039      	str	r1, [r7, #0]
 800c4a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	221a      	movs	r2, #26
 800c4a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c4aa:	f000 f855 	bl	800c558 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800c4ae:	4b02      	ldr	r3, [pc, #8]	; (800c4b8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	3708      	adds	r7, #8
 800c4b4:	46bd      	mov	sp, r7
 800c4b6:	bd80      	pop	{r7, pc}
 800c4b8:	200000f4 	.word	0x200000f4

0800c4bc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4bc:	b580      	push	{r7, lr}
 800c4be:	b082      	sub	sp, #8
 800c4c0:	af00      	add	r7, sp, #0
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	6039      	str	r1, [r7, #0]
 800c4c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c4c8:	79fb      	ldrb	r3, [r7, #7]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d105      	bne.n	800c4da <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	4907      	ldr	r1, [pc, #28]	; (800c4f0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c4d2:	4808      	ldr	r0, [pc, #32]	; (800c4f4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c4d4:	f7ff fdda 	bl	800c08c <USBD_GetString>
 800c4d8:	e004      	b.n	800c4e4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4904      	ldr	r1, [pc, #16]	; (800c4f0 <USBD_HS_ConfigStrDescriptor+0x34>)
 800c4de:	4805      	ldr	r0, [pc, #20]	; (800c4f4 <USBD_HS_ConfigStrDescriptor+0x38>)
 800c4e0:	f7ff fdd4 	bl	800c08c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c4e4:	4b02      	ldr	r3, [pc, #8]	; (800c4f0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}
 800c4ee:	bf00      	nop
 800c4f0:	200018a4 	.word	0x200018a4
 800c4f4:	0800d008 	.word	0x0800d008

0800c4f8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b082      	sub	sp, #8
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	4603      	mov	r3, r0
 800c500:	6039      	str	r1, [r7, #0]
 800c502:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c504:	79fb      	ldrb	r3, [r7, #7]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d105      	bne.n	800c516 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	4907      	ldr	r1, [pc, #28]	; (800c52c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c50e:	4808      	ldr	r0, [pc, #32]	; (800c530 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c510:	f7ff fdbc 	bl	800c08c <USBD_GetString>
 800c514:	e004      	b.n	800c520 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 800c516:	683a      	ldr	r2, [r7, #0]
 800c518:	4904      	ldr	r1, [pc, #16]	; (800c52c <USBD_HS_InterfaceStrDescriptor+0x34>)
 800c51a:	4805      	ldr	r0, [pc, #20]	; (800c530 <USBD_HS_InterfaceStrDescriptor+0x38>)
 800c51c:	f7ff fdb6 	bl	800c08c <USBD_GetString>
  }
  return USBD_StrDesc;
 800c520:	4b02      	ldr	r3, [pc, #8]	; (800c52c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 800c522:	4618      	mov	r0, r3
 800c524:	3708      	adds	r7, #8
 800c526:	46bd      	mov	sp, r7
 800c528:	bd80      	pop	{r7, pc}
 800c52a:	bf00      	nop
 800c52c:	200018a4 	.word	0x200018a4
 800c530:	0800d014 	.word	0x0800d014

0800c534 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c534:	b480      	push	{r7}
 800c536:	b083      	sub	sp, #12
 800c538:	af00      	add	r7, sp, #0
 800c53a:	4603      	mov	r3, r0
 800c53c:	6039      	str	r1, [r7, #0]
 800c53e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	220c      	movs	r2, #12
 800c544:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 800c546:	4b03      	ldr	r3, [pc, #12]	; (800c554 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 800c548:	4618      	mov	r0, r3
 800c54a:	370c      	adds	r7, #12
 800c54c:	46bd      	mov	sp, r7
 800c54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c552:	4770      	bx	lr
 800c554:	200000e4 	.word	0x200000e4

0800c558 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c55e:	4b0f      	ldr	r3, [pc, #60]	; (800c59c <Get_SerialNum+0x44>)
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c564:	4b0e      	ldr	r3, [pc, #56]	; (800c5a0 <Get_SerialNum+0x48>)
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c56a:	4b0e      	ldr	r3, [pc, #56]	; (800c5a4 <Get_SerialNum+0x4c>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c570:	68fa      	ldr	r2, [r7, #12]
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	4413      	add	r3, r2
 800c576:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d009      	beq.n	800c592 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c57e:	2208      	movs	r2, #8
 800c580:	4909      	ldr	r1, [pc, #36]	; (800c5a8 <Get_SerialNum+0x50>)
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f000 f814 	bl	800c5b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c588:	2204      	movs	r2, #4
 800c58a:	4908      	ldr	r1, [pc, #32]	; (800c5ac <Get_SerialNum+0x54>)
 800c58c:	68b8      	ldr	r0, [r7, #8]
 800c58e:	f000 f80f 	bl	800c5b0 <IntToUnicode>
  }
}
 800c592:	bf00      	nop
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	1ff0f420 	.word	0x1ff0f420
 800c5a0:	1ff0f424 	.word	0x1ff0f424
 800c5a4:	1ff0f428 	.word	0x1ff0f428
 800c5a8:	200000f6 	.word	0x200000f6
 800c5ac:	20000106 	.word	0x20000106

0800c5b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c5b0:	b480      	push	{r7}
 800c5b2:	b087      	sub	sp, #28
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	60f8      	str	r0, [r7, #12]
 800c5b8:	60b9      	str	r1, [r7, #8]
 800c5ba:	4613      	mov	r3, r2
 800c5bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c5c2:	2300      	movs	r3, #0
 800c5c4:	75fb      	strb	r3, [r7, #23]
 800c5c6:	e027      	b.n	800c618 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	0f1b      	lsrs	r3, r3, #28
 800c5cc:	2b09      	cmp	r3, #9
 800c5ce:	d80b      	bhi.n	800c5e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	0f1b      	lsrs	r3, r3, #28
 800c5d4:	b2da      	uxtb	r2, r3
 800c5d6:	7dfb      	ldrb	r3, [r7, #23]
 800c5d8:	005b      	lsls	r3, r3, #1
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	440b      	add	r3, r1
 800c5e0:	3230      	adds	r2, #48	; 0x30
 800c5e2:	b2d2      	uxtb	r2, r2
 800c5e4:	701a      	strb	r2, [r3, #0]
 800c5e6:	e00a      	b.n	800c5fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	0f1b      	lsrs	r3, r3, #28
 800c5ec:	b2da      	uxtb	r2, r3
 800c5ee:	7dfb      	ldrb	r3, [r7, #23]
 800c5f0:	005b      	lsls	r3, r3, #1
 800c5f2:	4619      	mov	r1, r3
 800c5f4:	68bb      	ldr	r3, [r7, #8]
 800c5f6:	440b      	add	r3, r1
 800c5f8:	3237      	adds	r2, #55	; 0x37
 800c5fa:	b2d2      	uxtb	r2, r2
 800c5fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	011b      	lsls	r3, r3, #4
 800c602:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c604:	7dfb      	ldrb	r3, [r7, #23]
 800c606:	005b      	lsls	r3, r3, #1
 800c608:	3301      	adds	r3, #1
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	4413      	add	r3, r2
 800c60e:	2200      	movs	r2, #0
 800c610:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c612:	7dfb      	ldrb	r3, [r7, #23]
 800c614:	3301      	adds	r3, #1
 800c616:	75fb      	strb	r3, [r7, #23]
 800c618:	7dfa      	ldrb	r2, [r7, #23]
 800c61a:	79fb      	ldrb	r3, [r7, #7]
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d3d3      	bcc.n	800c5c8 <IntToUnicode+0x18>
  }
}
 800c620:	bf00      	nop
 800c622:	bf00      	nop
 800c624:	371c      	adds	r7, #28
 800c626:	46bd      	mov	sp, r7
 800c628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62c:	4770      	bx	lr
	...

0800c630 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c630:	b580      	push	{r7, lr}
 800c632:	b0aa      	sub	sp, #168	; 0xa8
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c638:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c63c:	2200      	movs	r2, #0
 800c63e:	601a      	str	r2, [r3, #0]
 800c640:	605a      	str	r2, [r3, #4]
 800c642:	609a      	str	r2, [r3, #8]
 800c644:	60da      	str	r2, [r3, #12]
 800c646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800c648:	f107 0310 	add.w	r3, r7, #16
 800c64c:	2284      	movs	r2, #132	; 0x84
 800c64e:	2100      	movs	r1, #0
 800c650:	4618      	mov	r0, r3
 800c652:	f000 fc13 	bl	800ce7c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	4a26      	ldr	r2, [pc, #152]	; (800c6f4 <HAL_PCD_MspInit+0xc4>)
 800c65c:	4293      	cmp	r3, r2
 800c65e:	d145      	bne.n	800c6ec <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800c660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800c664:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800c666:	2300      	movs	r3, #0
 800c668:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800c66c:	f107 0310 	add.w	r3, r7, #16
 800c670:	4618      	mov	r0, r3
 800c672:	f7f9 fb21 	bl	8005cb8 <HAL_RCCEx_PeriphCLKConfig>
 800c676:	4603      	mov	r3, r0
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800c67c:	f7f4 fcd4 	bl	8001028 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c680:	4b1d      	ldr	r3, [pc, #116]	; (800c6f8 <HAL_PCD_MspInit+0xc8>)
 800c682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c684:	4a1c      	ldr	r2, [pc, #112]	; (800c6f8 <HAL_PCD_MspInit+0xc8>)
 800c686:	f043 0302 	orr.w	r3, r3, #2
 800c68a:	6313      	str	r3, [r2, #48]	; 0x30
 800c68c:	4b1a      	ldr	r3, [pc, #104]	; (800c6f8 <HAL_PCD_MspInit+0xc8>)
 800c68e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c690:	f003 0302 	and.w	r3, r3, #2
 800c694:	60fb      	str	r3, [r7, #12]
 800c696:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800c698:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800c69c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c6a0:	2302      	movs	r3, #2
 800c6a2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c6a6:	2300      	movs	r3, #0
 800c6a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c6ac:	2303      	movs	r3, #3
 800c6ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800c6b2:	230c      	movs	r3, #12
 800c6b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c6b8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800c6bc:	4619      	mov	r1, r3
 800c6be:	480f      	ldr	r0, [pc, #60]	; (800c6fc <HAL_PCD_MspInit+0xcc>)
 800c6c0:	f7f7 f94a 	bl	8003958 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800c6c4:	4b0c      	ldr	r3, [pc, #48]	; (800c6f8 <HAL_PCD_MspInit+0xc8>)
 800c6c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c8:	4a0b      	ldr	r2, [pc, #44]	; (800c6f8 <HAL_PCD_MspInit+0xc8>)
 800c6ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c6ce:	6313      	str	r3, [r2, #48]	; 0x30
 800c6d0:	4b09      	ldr	r3, [pc, #36]	; (800c6f8 <HAL_PCD_MspInit+0xc8>)
 800c6d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6d8:	60bb      	str	r3, [r7, #8]
 800c6da:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800c6dc:	2200      	movs	r2, #0
 800c6de:	2100      	movs	r1, #0
 800c6e0:	204d      	movs	r0, #77	; 0x4d
 800c6e2:	f7f7 f902 	bl	80038ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800c6e6:	204d      	movs	r0, #77	; 0x4d
 800c6e8:	f7f7 f91b 	bl	8003922 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800c6ec:	bf00      	nop
 800c6ee:	37a8      	adds	r7, #168	; 0xa8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	40040000 	.word	0x40040000
 800c6f8:	40023800 	.word	0x40023800
 800c6fc:	40020400 	.word	0x40020400

0800c700 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b082      	sub	sp, #8
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c714:	4619      	mov	r1, r3
 800c716:	4610      	mov	r0, r2
 800c718:	f7fe fb2f 	bl	800ad7a <USBD_LL_SetupStage>
}
 800c71c:	bf00      	nop
 800c71e:	3708      	adds	r7, #8
 800c720:	46bd      	mov	sp, r7
 800c722:	bd80      	pop	{r7, pc}

0800c724 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c724:	b580      	push	{r7, lr}
 800c726:	b082      	sub	sp, #8
 800c728:	af00      	add	r7, sp, #0
 800c72a:	6078      	str	r0, [r7, #4]
 800c72c:	460b      	mov	r3, r1
 800c72e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800c736:	78fa      	ldrb	r2, [r7, #3]
 800c738:	6879      	ldr	r1, [r7, #4]
 800c73a:	4613      	mov	r3, r2
 800c73c:	00db      	lsls	r3, r3, #3
 800c73e:	4413      	add	r3, r2
 800c740:	009b      	lsls	r3, r3, #2
 800c742:	440b      	add	r3, r1
 800c744:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c748:	681a      	ldr	r2, [r3, #0]
 800c74a:	78fb      	ldrb	r3, [r7, #3]
 800c74c:	4619      	mov	r1, r3
 800c74e:	f7fe fb69 	bl	800ae24 <USBD_LL_DataOutStage>
}
 800c752:	bf00      	nop
 800c754:	3708      	adds	r7, #8
 800c756:	46bd      	mov	sp, r7
 800c758:	bd80      	pop	{r7, pc}

0800c75a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c75a:	b580      	push	{r7, lr}
 800c75c:	b082      	sub	sp, #8
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
 800c762:	460b      	mov	r3, r1
 800c764:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 800c76c:	78fa      	ldrb	r2, [r7, #3]
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	4613      	mov	r3, r2
 800c772:	00db      	lsls	r3, r3, #3
 800c774:	4413      	add	r3, r2
 800c776:	009b      	lsls	r3, r3, #2
 800c778:	440b      	add	r3, r1
 800c77a:	334c      	adds	r3, #76	; 0x4c
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	78fb      	ldrb	r3, [r7, #3]
 800c780:	4619      	mov	r1, r3
 800c782:	f7fe fc02 	bl	800af8a <USBD_LL_DataInStage>
}
 800c786:	bf00      	nop
 800c788:	3708      	adds	r7, #8
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c79c:	4618      	mov	r0, r3
 800c79e:	f7fe fd36 	bl	800b20e <USBD_LL_SOF>
}
 800c7a2:	bf00      	nop
 800c7a4:	3708      	adds	r7, #8
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d102      	bne.n	800c7c4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	73fb      	strb	r3, [r7, #15]
 800c7c2:	e008      	b.n	800c7d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	68db      	ldr	r3, [r3, #12]
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d102      	bne.n	800c7d2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800c7cc:	2301      	movs	r3, #1
 800c7ce:	73fb      	strb	r3, [r7, #15]
 800c7d0:	e001      	b.n	800c7d6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800c7d2:	f7f4 fc29 	bl	8001028 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c7dc:	7bfa      	ldrb	r2, [r7, #15]
 800c7de:	4611      	mov	r1, r2
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fe fcd6 	bl	800b192 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c7ec:	4618      	mov	r0, r3
 800c7ee:	f7fe fc7e 	bl	800b0ee <USBD_LL_Reset>
}
 800c7f2:	bf00      	nop
 800c7f4:	3710      	adds	r7, #16
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b082      	sub	sp, #8
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe fcd1 	bl	800b1b2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	6812      	ldr	r2, [r2, #0]
 800c81e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c822:	f043 0301 	orr.w	r3, r3, #1
 800c826:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6a1b      	ldr	r3, [r3, #32]
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d005      	beq.n	800c83c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c830:	4b04      	ldr	r3, [pc, #16]	; (800c844 <HAL_PCD_SuspendCallback+0x48>)
 800c832:	691b      	ldr	r3, [r3, #16]
 800c834:	4a03      	ldr	r2, [pc, #12]	; (800c844 <HAL_PCD_SuspendCallback+0x48>)
 800c836:	f043 0306 	orr.w	r3, r3, #6
 800c83a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}
 800c844:	e000ed00 	.word	0xe000ed00

0800c848 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c856:	4618      	mov	r0, r3
 800c858:	f7fe fcc1 	bl	800b1de <USBD_LL_Resume>
}
 800c85c:	bf00      	nop
 800c85e:	3708      	adds	r7, #8
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b082      	sub	sp, #8
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	460b      	mov	r3, r1
 800c86e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c876:	78fa      	ldrb	r2, [r7, #3]
 800c878:	4611      	mov	r1, r2
 800c87a:	4618      	mov	r0, r3
 800c87c:	f7fe fd19 	bl	800b2b2 <USBD_LL_IsoOUTIncomplete>
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	460b      	mov	r3, r1
 800c892:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c89a:	78fa      	ldrb	r2, [r7, #3]
 800c89c:	4611      	mov	r1, r2
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7fe fcd5 	bl	800b24e <USBD_LL_IsoINIncomplete>
}
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}

0800c8ac <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	f7fe fd2b 	bl	800b316 <USBD_LL_DevConnected>
}
 800c8c0:	bf00      	nop
 800c8c2:	3708      	adds	r7, #8
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	bd80      	pop	{r7, pc}

0800c8c8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fe fd28 	bl	800b32c <USBD_LL_DevDisconnected>
}
 800c8dc:	bf00      	nop
 800c8de:	3708      	adds	r7, #8
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b082      	sub	sp, #8
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	781b      	ldrb	r3, [r3, #0]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d140      	bne.n	800c976 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 800c8f4:	4a22      	ldr	r2, [pc, #136]	; (800c980 <USBD_LL_Init+0x9c>)
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	4a20      	ldr	r2, [pc, #128]	; (800c980 <USBD_LL_Init+0x9c>)
 800c900:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800c904:	4b1e      	ldr	r3, [pc, #120]	; (800c980 <USBD_LL_Init+0x9c>)
 800c906:	4a1f      	ldr	r2, [pc, #124]	; (800c984 <USBD_LL_Init+0xa0>)
 800c908:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 800c90a:	4b1d      	ldr	r3, [pc, #116]	; (800c980 <USBD_LL_Init+0x9c>)
 800c90c:	2208      	movs	r2, #8
 800c90e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 800c910:	4b1b      	ldr	r3, [pc, #108]	; (800c980 <USBD_LL_Init+0x9c>)
 800c912:	2202      	movs	r2, #2
 800c914:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800c916:	4b1a      	ldr	r3, [pc, #104]	; (800c980 <USBD_LL_Init+0x9c>)
 800c918:	2200      	movs	r2, #0
 800c91a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800c91c:	4b18      	ldr	r3, [pc, #96]	; (800c980 <USBD_LL_Init+0x9c>)
 800c91e:	2202      	movs	r2, #2
 800c920:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800c922:	4b17      	ldr	r3, [pc, #92]	; (800c980 <USBD_LL_Init+0x9c>)
 800c924:	2200      	movs	r2, #0
 800c926:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800c928:	4b15      	ldr	r3, [pc, #84]	; (800c980 <USBD_LL_Init+0x9c>)
 800c92a:	2200      	movs	r2, #0
 800c92c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 800c92e:	4b14      	ldr	r3, [pc, #80]	; (800c980 <USBD_LL_Init+0x9c>)
 800c930:	2200      	movs	r2, #0
 800c932:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800c934:	4b12      	ldr	r3, [pc, #72]	; (800c980 <USBD_LL_Init+0x9c>)
 800c936:	2200      	movs	r2, #0
 800c938:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 800c93a:	4b11      	ldr	r3, [pc, #68]	; (800c980 <USBD_LL_Init+0x9c>)
 800c93c:	2200      	movs	r2, #0
 800c93e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800c940:	4b0f      	ldr	r3, [pc, #60]	; (800c980 <USBD_LL_Init+0x9c>)
 800c942:	2200      	movs	r2, #0
 800c944:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 800c946:	480e      	ldr	r0, [pc, #56]	; (800c980 <USBD_LL_Init+0x9c>)
 800c948:	f7f7 f9e5 	bl	8003d16 <HAL_PCD_Init>
 800c94c:	4603      	mov	r3, r0
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d001      	beq.n	800c956 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800c952:	f7f4 fb69 	bl	8001028 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 800c956:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c95a:	4809      	ldr	r0, [pc, #36]	; (800c980 <USBD_LL_Init+0x9c>)
 800c95c:	f7f8 fc5f 	bl	800521e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 800c960:	2280      	movs	r2, #128	; 0x80
 800c962:	2100      	movs	r1, #0
 800c964:	4806      	ldr	r0, [pc, #24]	; (800c980 <USBD_LL_Init+0x9c>)
 800c966:	f7f8 fc13 	bl	8005190 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 800c96a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 800c96e:	2101      	movs	r1, #1
 800c970:	4803      	ldr	r0, [pc, #12]	; (800c980 <USBD_LL_Init+0x9c>)
 800c972:	f7f8 fc0d 	bl	8005190 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3708      	adds	r7, #8
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20001aa4 	.word	0x20001aa4
 800c984:	40040000 	.word	0x40040000

0800c988 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
 800c98e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c990:	2300      	movs	r3, #0
 800c992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c994:	2300      	movs	r3, #0
 800c996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c99e:	4618      	mov	r0, r3
 800c9a0:	f7f7 fadd 	bl	8003f5e <HAL_PCD_Start>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a8:	7bfb      	ldrb	r3, [r7, #15]
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 f97e 	bl	800ccac <USBD_Get_USB_Status>
 800c9b0:	4603      	mov	r3, r0
 800c9b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c9b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	3710      	adds	r7, #16
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	bd80      	pop	{r7, pc}

0800c9be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c9be:	b580      	push	{r7, lr}
 800c9c0:	b084      	sub	sp, #16
 800c9c2:	af00      	add	r7, sp, #0
 800c9c4:	6078      	str	r0, [r7, #4]
 800c9c6:	4608      	mov	r0, r1
 800c9c8:	4611      	mov	r1, r2
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	70fb      	strb	r3, [r7, #3]
 800c9d0:	460b      	mov	r3, r1
 800c9d2:	70bb      	strb	r3, [r7, #2]
 800c9d4:	4613      	mov	r3, r2
 800c9d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c9e6:	78bb      	ldrb	r3, [r7, #2]
 800c9e8:	883a      	ldrh	r2, [r7, #0]
 800c9ea:	78f9      	ldrb	r1, [r7, #3]
 800c9ec:	f7f7 ffca 	bl	8004984 <HAL_PCD_EP_Open>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	f000 f958 	bl	800ccac <USBD_Get_USB_Status>
 800c9fc:	4603      	mov	r3, r0
 800c9fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	3710      	adds	r7, #16
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}

0800ca0a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca0a:	b580      	push	{r7, lr}
 800ca0c:	b084      	sub	sp, #16
 800ca0e:	af00      	add	r7, sp, #0
 800ca10:	6078      	str	r0, [r7, #4]
 800ca12:	460b      	mov	r3, r1
 800ca14:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca16:	2300      	movs	r3, #0
 800ca18:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca24:	78fa      	ldrb	r2, [r7, #3]
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f7f8 f813 	bl	8004a54 <HAL_PCD_EP_Close>
 800ca2e:	4603      	mov	r3, r0
 800ca30:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca32:	7bfb      	ldrb	r3, [r7, #15]
 800ca34:	4618      	mov	r0, r3
 800ca36:	f000 f939 	bl	800ccac <USBD_Get_USB_Status>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3710      	adds	r7, #16
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca54:	2300      	movs	r3, #0
 800ca56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ca62:	78fa      	ldrb	r2, [r7, #3]
 800ca64:	4611      	mov	r1, r2
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7f8 f8eb 	bl	8004c42 <HAL_PCD_EP_SetStall>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
 800ca72:	4618      	mov	r0, r3
 800ca74:	f000 f91a 	bl	800ccac <USBD_Get_USB_Status>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ca7c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ca7e:	4618      	mov	r0, r3
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}

0800ca86 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ca86:	b580      	push	{r7, lr}
 800ca88:	b084      	sub	sp, #16
 800ca8a:	af00      	add	r7, sp, #0
 800ca8c:	6078      	str	r0, [r7, #4]
 800ca8e:	460b      	mov	r3, r1
 800ca90:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ca92:	2300      	movs	r3, #0
 800ca94:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca96:	2300      	movs	r3, #0
 800ca98:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800caa0:	78fa      	ldrb	r2, [r7, #3]
 800caa2:	4611      	mov	r1, r2
 800caa4:	4618      	mov	r0, r3
 800caa6:	f7f8 f930 	bl	8004d0a <HAL_PCD_EP_ClrStall>
 800caaa:	4603      	mov	r3, r0
 800caac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800caae:	7bfb      	ldrb	r3, [r7, #15]
 800cab0:	4618      	mov	r0, r3
 800cab2:	f000 f8fb 	bl	800ccac <USBD_Get_USB_Status>
 800cab6:	4603      	mov	r3, r0
 800cab8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800caba:	7bbb      	ldrb	r3, [r7, #14]
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3710      	adds	r7, #16
 800cac0:	46bd      	mov	sp, r7
 800cac2:	bd80      	pop	{r7, pc}

0800cac4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cac4:	b480      	push	{r7}
 800cac6:	b085      	sub	sp, #20
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
 800cacc:	460b      	mov	r3, r1
 800cace:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cad6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800cad8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	da0b      	bge.n	800caf8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cae6:	68f9      	ldr	r1, [r7, #12]
 800cae8:	4613      	mov	r3, r2
 800caea:	00db      	lsls	r3, r3, #3
 800caec:	4413      	add	r3, r2
 800caee:	009b      	lsls	r3, r3, #2
 800caf0:	440b      	add	r3, r1
 800caf2:	333e      	adds	r3, #62	; 0x3e
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	e00b      	b.n	800cb10 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800caf8:	78fb      	ldrb	r3, [r7, #3]
 800cafa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cafe:	68f9      	ldr	r1, [r7, #12]
 800cb00:	4613      	mov	r3, r2
 800cb02:	00db      	lsls	r3, r3, #3
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	440b      	add	r3, r1
 800cb0a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800cb0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800cb10:	4618      	mov	r0, r3
 800cb12:	3714      	adds	r7, #20
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	460b      	mov	r3, r1
 800cb26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb36:	78fa      	ldrb	r2, [r7, #3]
 800cb38:	4611      	mov	r1, r2
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f7f7 fefd 	bl	800493a <HAL_PCD_SetAddress>
 800cb40:	4603      	mov	r3, r0
 800cb42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb44:	7bfb      	ldrb	r3, [r7, #15]
 800cb46:	4618      	mov	r0, r3
 800cb48:	f000 f8b0 	bl	800ccac <USBD_Get_USB_Status>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cb50:	7bbb      	ldrb	r3, [r7, #14]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}

0800cb5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb5a:	b580      	push	{r7, lr}
 800cb5c:	b086      	sub	sp, #24
 800cb5e:	af00      	add	r7, sp, #0
 800cb60:	60f8      	str	r0, [r7, #12]
 800cb62:	607a      	str	r2, [r7, #4]
 800cb64:	603b      	str	r3, [r7, #0]
 800cb66:	460b      	mov	r3, r1
 800cb68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cb78:	7af9      	ldrb	r1, [r7, #11]
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	f7f8 f816 	bl	8004bae <HAL_PCD_EP_Transmit>
 800cb82:	4603      	mov	r3, r0
 800cb84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cb86:	7dfb      	ldrb	r3, [r7, #23]
 800cb88:	4618      	mov	r0, r3
 800cb8a:	f000 f88f 	bl	800ccac <USBD_Get_USB_Status>
 800cb8e:	4603      	mov	r3, r0
 800cb90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cb92:	7dbb      	ldrb	r3, [r7, #22]
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3718      	adds	r7, #24
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}

0800cb9c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b086      	sub	sp, #24
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	60f8      	str	r0, [r7, #12]
 800cba4:	607a      	str	r2, [r7, #4]
 800cba6:	603b      	str	r3, [r7, #0]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cbac:	2300      	movs	r3, #0
 800cbae:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800cbba:	7af9      	ldrb	r1, [r7, #11]
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	f7f7 ff92 	bl	8004ae8 <HAL_PCD_EP_Receive>
 800cbc4:	4603      	mov	r3, r0
 800cbc6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800cbc8:	7dfb      	ldrb	r3, [r7, #23]
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 f86e 	bl	800ccac <USBD_Get_USB_Status>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800cbd4:	7dbb      	ldrb	r3, [r7, #22]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}

0800cbde <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800cbde:	b580      	push	{r7, lr}
 800cbe0:	b082      	sub	sp, #8
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbf0:	78fa      	ldrb	r2, [r7, #3]
 800cbf2:	4611      	mov	r1, r2
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	f7f7 ffc2 	bl	8004b7e <HAL_PCD_EP_GetRxCount>
 800cbfa:	4603      	mov	r3, r0
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3708      	adds	r7, #8
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	460b      	mov	r3, r1
 800cc0e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800cc10:	78fb      	ldrb	r3, [r7, #3]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d002      	beq.n	800cc1c <HAL_PCDEx_LPM_Callback+0x18>
 800cc16:	2b01      	cmp	r3, #1
 800cc18:	d01f      	beq.n	800cc5a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800cc1a:	e03b      	b.n	800cc94 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	6a1b      	ldr	r3, [r3, #32]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d007      	beq.n	800cc34 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800cc24:	f000 f83c 	bl	800cca0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc28:	4b1c      	ldr	r3, [pc, #112]	; (800cc9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cc2a:	691b      	ldr	r3, [r3, #16]
 800cc2c:	4a1b      	ldr	r2, [pc, #108]	; (800cc9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cc2e:	f023 0306 	bic.w	r3, r3, #6
 800cc32:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	687a      	ldr	r2, [r7, #4]
 800cc40:	6812      	ldr	r2, [r2, #0]
 800cc42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc46:	f023 0301 	bic.w	r3, r3, #1
 800cc4a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7fe fac3 	bl	800b1de <USBD_LL_Resume>
    break;
 800cc58:	e01c      	b.n	800cc94 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	681b      	ldr	r3, [r3, #0]
 800cc5e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	6812      	ldr	r2, [r2, #0]
 800cc68:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc6c:	f043 0301 	orr.w	r3, r3, #1
 800cc70:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7fe fa9a 	bl	800b1b2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6a1b      	ldr	r3, [r3, #32]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d005      	beq.n	800cc92 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800cc86:	4b05      	ldr	r3, [pc, #20]	; (800cc9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cc88:	691b      	ldr	r3, [r3, #16]
 800cc8a:	4a04      	ldr	r2, [pc, #16]	; (800cc9c <HAL_PCDEx_LPM_Callback+0x98>)
 800cc8c:	f043 0306 	orr.w	r3, r3, #6
 800cc90:	6113      	str	r3, [r2, #16]
    break;
 800cc92:	bf00      	nop
}
 800cc94:	bf00      	nop
 800cc96:	3708      	adds	r7, #8
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	e000ed00 	.word	0xe000ed00

0800cca0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800cca4:	f7f3 fdea 	bl	800087c <SystemClock_Config>
}
 800cca8:	bf00      	nop
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	2b03      	cmp	r3, #3
 800ccbe:	d817      	bhi.n	800ccf0 <USBD_Get_USB_Status+0x44>
 800ccc0:	a201      	add	r2, pc, #4	; (adr r2, 800ccc8 <USBD_Get_USB_Status+0x1c>)
 800ccc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccc6:	bf00      	nop
 800ccc8:	0800ccd9 	.word	0x0800ccd9
 800cccc:	0800ccdf 	.word	0x0800ccdf
 800ccd0:	0800cce5 	.word	0x0800cce5
 800ccd4:	0800cceb 	.word	0x0800cceb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	73fb      	strb	r3, [r7, #15]
    break;
 800ccdc:	e00b      	b.n	800ccf6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ccde:	2303      	movs	r3, #3
 800cce0:	73fb      	strb	r3, [r7, #15]
    break;
 800cce2:	e008      	b.n	800ccf6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800cce4:	2301      	movs	r3, #1
 800cce6:	73fb      	strb	r3, [r7, #15]
    break;
 800cce8:	e005      	b.n	800ccf6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ccea:	2303      	movs	r3, #3
 800ccec:	73fb      	strb	r3, [r7, #15]
    break;
 800ccee:	e002      	b.n	800ccf6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ccf0:	2303      	movs	r3, #3
 800ccf2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf4:	bf00      	nop
  }
  return usb_status;
 800ccf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	3714      	adds	r7, #20
 800ccfc:	46bd      	mov	sp, r7
 800ccfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd02:	4770      	bx	lr

0800cd04 <malloc>:
 800cd04:	4b02      	ldr	r3, [pc, #8]	; (800cd10 <malloc+0xc>)
 800cd06:	4601      	mov	r1, r0
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	f000 b82b 	b.w	800cd64 <_malloc_r>
 800cd0e:	bf00      	nop
 800cd10:	2000015c 	.word	0x2000015c

0800cd14 <free>:
 800cd14:	4b02      	ldr	r3, [pc, #8]	; (800cd20 <free+0xc>)
 800cd16:	4601      	mov	r1, r0
 800cd18:	6818      	ldr	r0, [r3, #0]
 800cd1a:	f000 b8f3 	b.w	800cf04 <_free_r>
 800cd1e:	bf00      	nop
 800cd20:	2000015c 	.word	0x2000015c

0800cd24 <sbrk_aligned>:
 800cd24:	b570      	push	{r4, r5, r6, lr}
 800cd26:	4e0e      	ldr	r6, [pc, #56]	; (800cd60 <sbrk_aligned+0x3c>)
 800cd28:	460c      	mov	r4, r1
 800cd2a:	6831      	ldr	r1, [r6, #0]
 800cd2c:	4605      	mov	r5, r0
 800cd2e:	b911      	cbnz	r1, 800cd36 <sbrk_aligned+0x12>
 800cd30:	f000 f8ac 	bl	800ce8c <_sbrk_r>
 800cd34:	6030      	str	r0, [r6, #0]
 800cd36:	4621      	mov	r1, r4
 800cd38:	4628      	mov	r0, r5
 800cd3a:	f000 f8a7 	bl	800ce8c <_sbrk_r>
 800cd3e:	1c43      	adds	r3, r0, #1
 800cd40:	d00a      	beq.n	800cd58 <sbrk_aligned+0x34>
 800cd42:	1cc4      	adds	r4, r0, #3
 800cd44:	f024 0403 	bic.w	r4, r4, #3
 800cd48:	42a0      	cmp	r0, r4
 800cd4a:	d007      	beq.n	800cd5c <sbrk_aligned+0x38>
 800cd4c:	1a21      	subs	r1, r4, r0
 800cd4e:	4628      	mov	r0, r5
 800cd50:	f000 f89c 	bl	800ce8c <_sbrk_r>
 800cd54:	3001      	adds	r0, #1
 800cd56:	d101      	bne.n	800cd5c <sbrk_aligned+0x38>
 800cd58:	f04f 34ff 	mov.w	r4, #4294967295
 800cd5c:	4620      	mov	r0, r4
 800cd5e:	bd70      	pop	{r4, r5, r6, pc}
 800cd60:	20001fb0 	.word	0x20001fb0

0800cd64 <_malloc_r>:
 800cd64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd68:	1ccd      	adds	r5, r1, #3
 800cd6a:	f025 0503 	bic.w	r5, r5, #3
 800cd6e:	3508      	adds	r5, #8
 800cd70:	2d0c      	cmp	r5, #12
 800cd72:	bf38      	it	cc
 800cd74:	250c      	movcc	r5, #12
 800cd76:	2d00      	cmp	r5, #0
 800cd78:	4607      	mov	r7, r0
 800cd7a:	db01      	blt.n	800cd80 <_malloc_r+0x1c>
 800cd7c:	42a9      	cmp	r1, r5
 800cd7e:	d905      	bls.n	800cd8c <_malloc_r+0x28>
 800cd80:	230c      	movs	r3, #12
 800cd82:	603b      	str	r3, [r7, #0]
 800cd84:	2600      	movs	r6, #0
 800cd86:	4630      	mov	r0, r6
 800cd88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce60 <_malloc_r+0xfc>
 800cd90:	f000 f868 	bl	800ce64 <__malloc_lock>
 800cd94:	f8d8 3000 	ldr.w	r3, [r8]
 800cd98:	461c      	mov	r4, r3
 800cd9a:	bb5c      	cbnz	r4, 800cdf4 <_malloc_r+0x90>
 800cd9c:	4629      	mov	r1, r5
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f7ff ffc0 	bl	800cd24 <sbrk_aligned>
 800cda4:	1c43      	adds	r3, r0, #1
 800cda6:	4604      	mov	r4, r0
 800cda8:	d155      	bne.n	800ce56 <_malloc_r+0xf2>
 800cdaa:	f8d8 4000 	ldr.w	r4, [r8]
 800cdae:	4626      	mov	r6, r4
 800cdb0:	2e00      	cmp	r6, #0
 800cdb2:	d145      	bne.n	800ce40 <_malloc_r+0xdc>
 800cdb4:	2c00      	cmp	r4, #0
 800cdb6:	d048      	beq.n	800ce4a <_malloc_r+0xe6>
 800cdb8:	6823      	ldr	r3, [r4, #0]
 800cdba:	4631      	mov	r1, r6
 800cdbc:	4638      	mov	r0, r7
 800cdbe:	eb04 0903 	add.w	r9, r4, r3
 800cdc2:	f000 f863 	bl	800ce8c <_sbrk_r>
 800cdc6:	4581      	cmp	r9, r0
 800cdc8:	d13f      	bne.n	800ce4a <_malloc_r+0xe6>
 800cdca:	6821      	ldr	r1, [r4, #0]
 800cdcc:	1a6d      	subs	r5, r5, r1
 800cdce:	4629      	mov	r1, r5
 800cdd0:	4638      	mov	r0, r7
 800cdd2:	f7ff ffa7 	bl	800cd24 <sbrk_aligned>
 800cdd6:	3001      	adds	r0, #1
 800cdd8:	d037      	beq.n	800ce4a <_malloc_r+0xe6>
 800cdda:	6823      	ldr	r3, [r4, #0]
 800cddc:	442b      	add	r3, r5
 800cdde:	6023      	str	r3, [r4, #0]
 800cde0:	f8d8 3000 	ldr.w	r3, [r8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d038      	beq.n	800ce5a <_malloc_r+0xf6>
 800cde8:	685a      	ldr	r2, [r3, #4]
 800cdea:	42a2      	cmp	r2, r4
 800cdec:	d12b      	bne.n	800ce46 <_malloc_r+0xe2>
 800cdee:	2200      	movs	r2, #0
 800cdf0:	605a      	str	r2, [r3, #4]
 800cdf2:	e00f      	b.n	800ce14 <_malloc_r+0xb0>
 800cdf4:	6822      	ldr	r2, [r4, #0]
 800cdf6:	1b52      	subs	r2, r2, r5
 800cdf8:	d41f      	bmi.n	800ce3a <_malloc_r+0xd6>
 800cdfa:	2a0b      	cmp	r2, #11
 800cdfc:	d917      	bls.n	800ce2e <_malloc_r+0xca>
 800cdfe:	1961      	adds	r1, r4, r5
 800ce00:	42a3      	cmp	r3, r4
 800ce02:	6025      	str	r5, [r4, #0]
 800ce04:	bf18      	it	ne
 800ce06:	6059      	strne	r1, [r3, #4]
 800ce08:	6863      	ldr	r3, [r4, #4]
 800ce0a:	bf08      	it	eq
 800ce0c:	f8c8 1000 	streq.w	r1, [r8]
 800ce10:	5162      	str	r2, [r4, r5]
 800ce12:	604b      	str	r3, [r1, #4]
 800ce14:	4638      	mov	r0, r7
 800ce16:	f104 060b 	add.w	r6, r4, #11
 800ce1a:	f000 f829 	bl	800ce70 <__malloc_unlock>
 800ce1e:	f026 0607 	bic.w	r6, r6, #7
 800ce22:	1d23      	adds	r3, r4, #4
 800ce24:	1af2      	subs	r2, r6, r3
 800ce26:	d0ae      	beq.n	800cd86 <_malloc_r+0x22>
 800ce28:	1b9b      	subs	r3, r3, r6
 800ce2a:	50a3      	str	r3, [r4, r2]
 800ce2c:	e7ab      	b.n	800cd86 <_malloc_r+0x22>
 800ce2e:	42a3      	cmp	r3, r4
 800ce30:	6862      	ldr	r2, [r4, #4]
 800ce32:	d1dd      	bne.n	800cdf0 <_malloc_r+0x8c>
 800ce34:	f8c8 2000 	str.w	r2, [r8]
 800ce38:	e7ec      	b.n	800ce14 <_malloc_r+0xb0>
 800ce3a:	4623      	mov	r3, r4
 800ce3c:	6864      	ldr	r4, [r4, #4]
 800ce3e:	e7ac      	b.n	800cd9a <_malloc_r+0x36>
 800ce40:	4634      	mov	r4, r6
 800ce42:	6876      	ldr	r6, [r6, #4]
 800ce44:	e7b4      	b.n	800cdb0 <_malloc_r+0x4c>
 800ce46:	4613      	mov	r3, r2
 800ce48:	e7cc      	b.n	800cde4 <_malloc_r+0x80>
 800ce4a:	230c      	movs	r3, #12
 800ce4c:	603b      	str	r3, [r7, #0]
 800ce4e:	4638      	mov	r0, r7
 800ce50:	f000 f80e 	bl	800ce70 <__malloc_unlock>
 800ce54:	e797      	b.n	800cd86 <_malloc_r+0x22>
 800ce56:	6025      	str	r5, [r4, #0]
 800ce58:	e7dc      	b.n	800ce14 <_malloc_r+0xb0>
 800ce5a:	605b      	str	r3, [r3, #4]
 800ce5c:	deff      	udf	#255	; 0xff
 800ce5e:	bf00      	nop
 800ce60:	20001fac 	.word	0x20001fac

0800ce64 <__malloc_lock>:
 800ce64:	4801      	ldr	r0, [pc, #4]	; (800ce6c <__malloc_lock+0x8>)
 800ce66:	f000 b84b 	b.w	800cf00 <__retarget_lock_acquire_recursive>
 800ce6a:	bf00      	nop
 800ce6c:	200020f0 	.word	0x200020f0

0800ce70 <__malloc_unlock>:
 800ce70:	4801      	ldr	r0, [pc, #4]	; (800ce78 <__malloc_unlock+0x8>)
 800ce72:	f000 b846 	b.w	800cf02 <__retarget_lock_release_recursive>
 800ce76:	bf00      	nop
 800ce78:	200020f0 	.word	0x200020f0

0800ce7c <memset>:
 800ce7c:	4402      	add	r2, r0
 800ce7e:	4603      	mov	r3, r0
 800ce80:	4293      	cmp	r3, r2
 800ce82:	d100      	bne.n	800ce86 <memset+0xa>
 800ce84:	4770      	bx	lr
 800ce86:	f803 1b01 	strb.w	r1, [r3], #1
 800ce8a:	e7f9      	b.n	800ce80 <memset+0x4>

0800ce8c <_sbrk_r>:
 800ce8c:	b538      	push	{r3, r4, r5, lr}
 800ce8e:	4d06      	ldr	r5, [pc, #24]	; (800cea8 <_sbrk_r+0x1c>)
 800ce90:	2300      	movs	r3, #0
 800ce92:	4604      	mov	r4, r0
 800ce94:	4608      	mov	r0, r1
 800ce96:	602b      	str	r3, [r5, #0]
 800ce98:	f7f4 fc72 	bl	8001780 <_sbrk>
 800ce9c:	1c43      	adds	r3, r0, #1
 800ce9e:	d102      	bne.n	800cea6 <_sbrk_r+0x1a>
 800cea0:	682b      	ldr	r3, [r5, #0]
 800cea2:	b103      	cbz	r3, 800cea6 <_sbrk_r+0x1a>
 800cea4:	6023      	str	r3, [r4, #0]
 800cea6:	bd38      	pop	{r3, r4, r5, pc}
 800cea8:	200020ec 	.word	0x200020ec

0800ceac <__errno>:
 800ceac:	4b01      	ldr	r3, [pc, #4]	; (800ceb4 <__errno+0x8>)
 800ceae:	6818      	ldr	r0, [r3, #0]
 800ceb0:	4770      	bx	lr
 800ceb2:	bf00      	nop
 800ceb4:	2000015c 	.word	0x2000015c

0800ceb8 <__libc_init_array>:
 800ceb8:	b570      	push	{r4, r5, r6, lr}
 800ceba:	4d0d      	ldr	r5, [pc, #52]	; (800cef0 <__libc_init_array+0x38>)
 800cebc:	4c0d      	ldr	r4, [pc, #52]	; (800cef4 <__libc_init_array+0x3c>)
 800cebe:	1b64      	subs	r4, r4, r5
 800cec0:	10a4      	asrs	r4, r4, #2
 800cec2:	2600      	movs	r6, #0
 800cec4:	42a6      	cmp	r6, r4
 800cec6:	d109      	bne.n	800cedc <__libc_init_array+0x24>
 800cec8:	4d0b      	ldr	r5, [pc, #44]	; (800cef8 <__libc_init_array+0x40>)
 800ceca:	4c0c      	ldr	r4, [pc, #48]	; (800cefc <__libc_init_array+0x44>)
 800cecc:	f000 f866 	bl	800cf9c <_init>
 800ced0:	1b64      	subs	r4, r4, r5
 800ced2:	10a4      	asrs	r4, r4, #2
 800ced4:	2600      	movs	r6, #0
 800ced6:	42a6      	cmp	r6, r4
 800ced8:	d105      	bne.n	800cee6 <__libc_init_array+0x2e>
 800ceda:	bd70      	pop	{r4, r5, r6, pc}
 800cedc:	f855 3b04 	ldr.w	r3, [r5], #4
 800cee0:	4798      	blx	r3
 800cee2:	3601      	adds	r6, #1
 800cee4:	e7ee      	b.n	800cec4 <__libc_init_array+0xc>
 800cee6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ceea:	4798      	blx	r3
 800ceec:	3601      	adds	r6, #1
 800ceee:	e7f2      	b.n	800ced6 <__libc_init_array+0x1e>
 800cef0:	0801a458 	.word	0x0801a458
 800cef4:	0801a458 	.word	0x0801a458
 800cef8:	0801a458 	.word	0x0801a458
 800cefc:	0801a45c 	.word	0x0801a45c

0800cf00 <__retarget_lock_acquire_recursive>:
 800cf00:	4770      	bx	lr

0800cf02 <__retarget_lock_release_recursive>:
 800cf02:	4770      	bx	lr

0800cf04 <_free_r>:
 800cf04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cf06:	2900      	cmp	r1, #0
 800cf08:	d044      	beq.n	800cf94 <_free_r+0x90>
 800cf0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cf0e:	9001      	str	r0, [sp, #4]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	f1a1 0404 	sub.w	r4, r1, #4
 800cf16:	bfb8      	it	lt
 800cf18:	18e4      	addlt	r4, r4, r3
 800cf1a:	f7ff ffa3 	bl	800ce64 <__malloc_lock>
 800cf1e:	4a1e      	ldr	r2, [pc, #120]	; (800cf98 <_free_r+0x94>)
 800cf20:	9801      	ldr	r0, [sp, #4]
 800cf22:	6813      	ldr	r3, [r2, #0]
 800cf24:	b933      	cbnz	r3, 800cf34 <_free_r+0x30>
 800cf26:	6063      	str	r3, [r4, #4]
 800cf28:	6014      	str	r4, [r2, #0]
 800cf2a:	b003      	add	sp, #12
 800cf2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf30:	f7ff bf9e 	b.w	800ce70 <__malloc_unlock>
 800cf34:	42a3      	cmp	r3, r4
 800cf36:	d908      	bls.n	800cf4a <_free_r+0x46>
 800cf38:	6825      	ldr	r5, [r4, #0]
 800cf3a:	1961      	adds	r1, r4, r5
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	bf01      	itttt	eq
 800cf40:	6819      	ldreq	r1, [r3, #0]
 800cf42:	685b      	ldreq	r3, [r3, #4]
 800cf44:	1949      	addeq	r1, r1, r5
 800cf46:	6021      	streq	r1, [r4, #0]
 800cf48:	e7ed      	b.n	800cf26 <_free_r+0x22>
 800cf4a:	461a      	mov	r2, r3
 800cf4c:	685b      	ldr	r3, [r3, #4]
 800cf4e:	b10b      	cbz	r3, 800cf54 <_free_r+0x50>
 800cf50:	42a3      	cmp	r3, r4
 800cf52:	d9fa      	bls.n	800cf4a <_free_r+0x46>
 800cf54:	6811      	ldr	r1, [r2, #0]
 800cf56:	1855      	adds	r5, r2, r1
 800cf58:	42a5      	cmp	r5, r4
 800cf5a:	d10b      	bne.n	800cf74 <_free_r+0x70>
 800cf5c:	6824      	ldr	r4, [r4, #0]
 800cf5e:	4421      	add	r1, r4
 800cf60:	1854      	adds	r4, r2, r1
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	6011      	str	r1, [r2, #0]
 800cf66:	d1e0      	bne.n	800cf2a <_free_r+0x26>
 800cf68:	681c      	ldr	r4, [r3, #0]
 800cf6a:	685b      	ldr	r3, [r3, #4]
 800cf6c:	6053      	str	r3, [r2, #4]
 800cf6e:	440c      	add	r4, r1
 800cf70:	6014      	str	r4, [r2, #0]
 800cf72:	e7da      	b.n	800cf2a <_free_r+0x26>
 800cf74:	d902      	bls.n	800cf7c <_free_r+0x78>
 800cf76:	230c      	movs	r3, #12
 800cf78:	6003      	str	r3, [r0, #0]
 800cf7a:	e7d6      	b.n	800cf2a <_free_r+0x26>
 800cf7c:	6825      	ldr	r5, [r4, #0]
 800cf7e:	1961      	adds	r1, r4, r5
 800cf80:	428b      	cmp	r3, r1
 800cf82:	bf04      	itt	eq
 800cf84:	6819      	ldreq	r1, [r3, #0]
 800cf86:	685b      	ldreq	r3, [r3, #4]
 800cf88:	6063      	str	r3, [r4, #4]
 800cf8a:	bf04      	itt	eq
 800cf8c:	1949      	addeq	r1, r1, r5
 800cf8e:	6021      	streq	r1, [r4, #0]
 800cf90:	6054      	str	r4, [r2, #4]
 800cf92:	e7ca      	b.n	800cf2a <_free_r+0x26>
 800cf94:	b003      	add	sp, #12
 800cf96:	bd30      	pop	{r4, r5, pc}
 800cf98:	20001fac 	.word	0x20001fac

0800cf9c <_init>:
 800cf9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf9e:	bf00      	nop
 800cfa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfa2:	bc08      	pop	{r3}
 800cfa4:	469e      	mov	lr, r3
 800cfa6:	4770      	bx	lr

0800cfa8 <_fini>:
 800cfa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfaa:	bf00      	nop
 800cfac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfae:	bc08      	pop	{r3}
 800cfb0:	469e      	mov	lr, r3
 800cfb2:	4770      	bx	lr
