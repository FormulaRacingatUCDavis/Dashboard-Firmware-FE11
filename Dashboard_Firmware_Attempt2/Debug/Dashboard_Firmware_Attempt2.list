
Dashboard_Firmware_Attempt2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f0ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000fb20  0800f2bc  0800f2bc  0001f2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eddc  0801eddc  00030108  2**0
                  CONTENTS
  4 .ARM          00000008  0801eddc  0801eddc  0002eddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ede4  0801ede4  00030108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ede4  0801ede4  0002ede4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ede8  0801ede8  0002ede8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  0801edec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b24  20000108  0801eef4  00030108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c2c  0801eef4  00034c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002413b  00000000  00000000  0003017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b60  00000000  00000000  000542b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020f8  00000000  00000000  00058e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001980  00000000  00000000  0005af10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da4e  00000000  00000000  0005c890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029117  00000000  00000000  0008a2de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00107432  00000000  00000000  000b33f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000091e4  00000000  00000000  001ba828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  001c3a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000108 	.word	0x20000108
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800f2a4 	.word	0x0800f2a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000010c 	.word	0x2000010c
 800020c:	0800f2a4 	.word	0x0800f2a4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2f>:
 8000a5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a64:	bf24      	itt	cs
 8000a66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a6e:	d90d      	bls.n	8000a8c <__aeabi_d2f+0x30>
 8000a70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a84:	bf08      	it	eq
 8000a86:	f020 0001 	biceq.w	r0, r0, #1
 8000a8a:	4770      	bx	lr
 8000a8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a90:	d121      	bne.n	8000ad6 <__aeabi_d2f+0x7a>
 8000a92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a96:	bfbc      	itt	lt
 8000a98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a9c:	4770      	bxlt	lr
 8000a9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aa2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aa6:	f1c2 0218 	rsb	r2, r2, #24
 8000aaa:	f1c2 0c20 	rsb	ip, r2, #32
 8000aae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ab2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	f040 0001 	orrne.w	r0, r0, #1
 8000abc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ac0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ac4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ac8:	ea40 000c 	orr.w	r0, r0, ip
 8000acc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ad0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ad4:	e7cc      	b.n	8000a70 <__aeabi_d2f+0x14>
 8000ad6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ada:	d107      	bne.n	8000aec <__aeabi_d2f+0x90>
 8000adc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ae0:	bf1e      	ittt	ne
 8000ae2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ae6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aea:	4770      	bxne	lr
 8000aec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000af4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop

08000afc <__aeabi_uldivmod>:
 8000afc:	b953      	cbnz	r3, 8000b14 <__aeabi_uldivmod+0x18>
 8000afe:	b94a      	cbnz	r2, 8000b14 <__aeabi_uldivmod+0x18>
 8000b00:	2900      	cmp	r1, #0
 8000b02:	bf08      	it	eq
 8000b04:	2800      	cmpeq	r0, #0
 8000b06:	bf1c      	itt	ne
 8000b08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b10:	f000 b970 	b.w	8000df4 <__aeabi_idiv0>
 8000b14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b1c:	f000 f806 	bl	8000b2c <__udivmoddi4>
 8000b20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b28:	b004      	add	sp, #16
 8000b2a:	4770      	bx	lr

08000b2c <__udivmoddi4>:
 8000b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b30:	9e08      	ldr	r6, [sp, #32]
 8000b32:	460d      	mov	r5, r1
 8000b34:	4604      	mov	r4, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d14a      	bne.n	8000bd2 <__udivmoddi4+0xa6>
 8000b3c:	428a      	cmp	r2, r1
 8000b3e:	4694      	mov	ip, r2
 8000b40:	d965      	bls.n	8000c0e <__udivmoddi4+0xe2>
 8000b42:	fab2 f382 	clz	r3, r2
 8000b46:	b143      	cbz	r3, 8000b5a <__udivmoddi4+0x2e>
 8000b48:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b4c:	f1c3 0220 	rsb	r2, r3, #32
 8000b50:	409f      	lsls	r7, r3
 8000b52:	fa20 f202 	lsr.w	r2, r0, r2
 8000b56:	4317      	orrs	r7, r2
 8000b58:	409c      	lsls	r4, r3
 8000b5a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b5e:	fa1f f58c 	uxth.w	r5, ip
 8000b62:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b66:	0c22      	lsrs	r2, r4, #16
 8000b68:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b6c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b70:	fb01 f005 	mul.w	r0, r1, r5
 8000b74:	4290      	cmp	r0, r2
 8000b76:	d90a      	bls.n	8000b8e <__udivmoddi4+0x62>
 8000b78:	eb1c 0202 	adds.w	r2, ip, r2
 8000b7c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000b80:	f080 811c 	bcs.w	8000dbc <__udivmoddi4+0x290>
 8000b84:	4290      	cmp	r0, r2
 8000b86:	f240 8119 	bls.w	8000dbc <__udivmoddi4+0x290>
 8000b8a:	3902      	subs	r1, #2
 8000b8c:	4462      	add	r2, ip
 8000b8e:	1a12      	subs	r2, r2, r0
 8000b90:	b2a4      	uxth	r4, r4
 8000b92:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b96:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b9a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b9e:	fb00 f505 	mul.w	r5, r0, r5
 8000ba2:	42a5      	cmp	r5, r4
 8000ba4:	d90a      	bls.n	8000bbc <__udivmoddi4+0x90>
 8000ba6:	eb1c 0404 	adds.w	r4, ip, r4
 8000baa:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000bae:	f080 8107 	bcs.w	8000dc0 <__udivmoddi4+0x294>
 8000bb2:	42a5      	cmp	r5, r4
 8000bb4:	f240 8104 	bls.w	8000dc0 <__udivmoddi4+0x294>
 8000bb8:	4464      	add	r4, ip
 8000bba:	3802      	subs	r0, #2
 8000bbc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000bc0:	1b64      	subs	r4, r4, r5
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	b11e      	cbz	r6, 8000bce <__udivmoddi4+0xa2>
 8000bc6:	40dc      	lsrs	r4, r3
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e9c6 4300 	strd	r4, r3, [r6]
 8000bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bd2:	428b      	cmp	r3, r1
 8000bd4:	d908      	bls.n	8000be8 <__udivmoddi4+0xbc>
 8000bd6:	2e00      	cmp	r6, #0
 8000bd8:	f000 80ed 	beq.w	8000db6 <__udivmoddi4+0x28a>
 8000bdc:	2100      	movs	r1, #0
 8000bde:	e9c6 0500 	strd	r0, r5, [r6]
 8000be2:	4608      	mov	r0, r1
 8000be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000be8:	fab3 f183 	clz	r1, r3
 8000bec:	2900      	cmp	r1, #0
 8000bee:	d149      	bne.n	8000c84 <__udivmoddi4+0x158>
 8000bf0:	42ab      	cmp	r3, r5
 8000bf2:	d302      	bcc.n	8000bfa <__udivmoddi4+0xce>
 8000bf4:	4282      	cmp	r2, r0
 8000bf6:	f200 80f8 	bhi.w	8000dea <__udivmoddi4+0x2be>
 8000bfa:	1a84      	subs	r4, r0, r2
 8000bfc:	eb65 0203 	sbc.w	r2, r5, r3
 8000c00:	2001      	movs	r0, #1
 8000c02:	4617      	mov	r7, r2
 8000c04:	2e00      	cmp	r6, #0
 8000c06:	d0e2      	beq.n	8000bce <__udivmoddi4+0xa2>
 8000c08:	e9c6 4700 	strd	r4, r7, [r6]
 8000c0c:	e7df      	b.n	8000bce <__udivmoddi4+0xa2>
 8000c0e:	b902      	cbnz	r2, 8000c12 <__udivmoddi4+0xe6>
 8000c10:	deff      	udf	#255	; 0xff
 8000c12:	fab2 f382 	clz	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f040 8090 	bne.w	8000d3c <__udivmoddi4+0x210>
 8000c1c:	1a8a      	subs	r2, r1, r2
 8000c1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c22:	fa1f fe8c 	uxth.w	lr, ip
 8000c26:	2101      	movs	r1, #1
 8000c28:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c2c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c30:	0c22      	lsrs	r2, r4, #16
 8000c32:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c36:	fb0e f005 	mul.w	r0, lr, r5
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0x124>
 8000c3e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c42:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000c46:	d202      	bcs.n	8000c4e <__udivmoddi4+0x122>
 8000c48:	4290      	cmp	r0, r2
 8000c4a:	f200 80cb 	bhi.w	8000de4 <__udivmoddi4+0x2b8>
 8000c4e:	4645      	mov	r5, r8
 8000c50:	1a12      	subs	r2, r2, r0
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c58:	fb07 2210 	mls	r2, r7, r0, r2
 8000c5c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c60:	fb0e fe00 	mul.w	lr, lr, r0
 8000c64:	45a6      	cmp	lr, r4
 8000c66:	d908      	bls.n	8000c7a <__udivmoddi4+0x14e>
 8000c68:	eb1c 0404 	adds.w	r4, ip, r4
 8000c6c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c70:	d202      	bcs.n	8000c78 <__udivmoddi4+0x14c>
 8000c72:	45a6      	cmp	lr, r4
 8000c74:	f200 80bb 	bhi.w	8000dee <__udivmoddi4+0x2c2>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	eba4 040e 	sub.w	r4, r4, lr
 8000c7e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c82:	e79f      	b.n	8000bc4 <__udivmoddi4+0x98>
 8000c84:	f1c1 0720 	rsb	r7, r1, #32
 8000c88:	408b      	lsls	r3, r1
 8000c8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c92:	fa05 f401 	lsl.w	r4, r5, r1
 8000c96:	fa20 f307 	lsr.w	r3, r0, r7
 8000c9a:	40fd      	lsrs	r5, r7
 8000c9c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ca0:	4323      	orrs	r3, r4
 8000ca2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ca6:	fa1f fe8c 	uxth.w	lr, ip
 8000caa:	fb09 5518 	mls	r5, r9, r8, r5
 8000cae:	0c1c      	lsrs	r4, r3, #16
 8000cb0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000cb4:	fb08 f50e 	mul.w	r5, r8, lr
 8000cb8:	42a5      	cmp	r5, r4
 8000cba:	fa02 f201 	lsl.w	r2, r2, r1
 8000cbe:	fa00 f001 	lsl.w	r0, r0, r1
 8000cc2:	d90b      	bls.n	8000cdc <__udivmoddi4+0x1b0>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000ccc:	f080 8088 	bcs.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd0:	42a5      	cmp	r5, r4
 8000cd2:	f240 8085 	bls.w	8000de0 <__udivmoddi4+0x2b4>
 8000cd6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cda:	4464      	add	r4, ip
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	b29d      	uxth	r5, r3
 8000ce0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ce4:	fb09 4413 	mls	r4, r9, r3, r4
 8000ce8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cec:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x1da>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000cfc:	d26c      	bcs.n	8000dd8 <__udivmoddi4+0x2ac>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	d96a      	bls.n	8000dd8 <__udivmoddi4+0x2ac>
 8000d02:	3b02      	subs	r3, #2
 8000d04:	4464      	add	r4, ip
 8000d06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d0e:	eba4 040e 	sub.w	r4, r4, lr
 8000d12:	42ac      	cmp	r4, r5
 8000d14:	46c8      	mov	r8, r9
 8000d16:	46ae      	mov	lr, r5
 8000d18:	d356      	bcc.n	8000dc8 <__udivmoddi4+0x29c>
 8000d1a:	d053      	beq.n	8000dc4 <__udivmoddi4+0x298>
 8000d1c:	b156      	cbz	r6, 8000d34 <__udivmoddi4+0x208>
 8000d1e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d22:	eb64 040e 	sbc.w	r4, r4, lr
 8000d26:	fa04 f707 	lsl.w	r7, r4, r7
 8000d2a:	40ca      	lsrs	r2, r1
 8000d2c:	40cc      	lsrs	r4, r1
 8000d2e:	4317      	orrs	r7, r2
 8000d30:	e9c6 7400 	strd	r7, r4, [r6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3c:	f1c3 0120 	rsb	r1, r3, #32
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	fa20 f201 	lsr.w	r2, r0, r1
 8000d48:	fa25 f101 	lsr.w	r1, r5, r1
 8000d4c:	409d      	lsls	r5, r3
 8000d4e:	432a      	orrs	r2, r5
 8000d50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d60:	0c11      	lsrs	r1, r2, #16
 8000d62:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d66:	fb00 f50e 	mul.w	r5, r0, lr
 8000d6a:	428d      	cmp	r5, r1
 8000d6c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x258>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d7a:	d22f      	bcs.n	8000ddc <__udivmoddi4+0x2b0>
 8000d7c:	428d      	cmp	r5, r1
 8000d7e:	d92d      	bls.n	8000ddc <__udivmoddi4+0x2b0>
 8000d80:	3802      	subs	r0, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1b49      	subs	r1, r1, r5
 8000d86:	b292      	uxth	r2, r2
 8000d88:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d8c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d94:	fb05 f10e 	mul.w	r1, r5, lr
 8000d98:	4291      	cmp	r1, r2
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x282>
 8000d9c:	eb1c 0202 	adds.w	r2, ip, r2
 8000da0:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000da4:	d216      	bcs.n	8000dd4 <__udivmoddi4+0x2a8>
 8000da6:	4291      	cmp	r1, r2
 8000da8:	d914      	bls.n	8000dd4 <__udivmoddi4+0x2a8>
 8000daa:	3d02      	subs	r5, #2
 8000dac:	4462      	add	r2, ip
 8000dae:	1a52      	subs	r2, r2, r1
 8000db0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000db4:	e738      	b.n	8000c28 <__udivmoddi4+0xfc>
 8000db6:	4631      	mov	r1, r6
 8000db8:	4630      	mov	r0, r6
 8000dba:	e708      	b.n	8000bce <__udivmoddi4+0xa2>
 8000dbc:	4639      	mov	r1, r7
 8000dbe:	e6e6      	b.n	8000b8e <__udivmoddi4+0x62>
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	e6fb      	b.n	8000bbc <__udivmoddi4+0x90>
 8000dc4:	4548      	cmp	r0, r9
 8000dc6:	d2a9      	bcs.n	8000d1c <__udivmoddi4+0x1f0>
 8000dc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dcc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000dd0:	3b01      	subs	r3, #1
 8000dd2:	e7a3      	b.n	8000d1c <__udivmoddi4+0x1f0>
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	e7ea      	b.n	8000dae <__udivmoddi4+0x282>
 8000dd8:	462b      	mov	r3, r5
 8000dda:	e794      	b.n	8000d06 <__udivmoddi4+0x1da>
 8000ddc:	4640      	mov	r0, r8
 8000dde:	e7d1      	b.n	8000d84 <__udivmoddi4+0x258>
 8000de0:	46d0      	mov	r8, sl
 8000de2:	e77b      	b.n	8000cdc <__udivmoddi4+0x1b0>
 8000de4:	3d02      	subs	r5, #2
 8000de6:	4462      	add	r2, ip
 8000de8:	e732      	b.n	8000c50 <__udivmoddi4+0x124>
 8000dea:	4608      	mov	r0, r1
 8000dec:	e70a      	b.n	8000c04 <__udivmoddi4+0xd8>
 8000dee:	4464      	add	r4, ip
 8000df0:	3802      	subs	r0, #2
 8000df2:	e742      	b.n	8000c7a <__udivmoddi4+0x14e>

08000df4 <__aeabi_idiv0>:
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop

08000df8 <HAL_CAN_RxFifo0MsgPendingCallback>:

CAN_RxHeaderTypeDef RxHeader;
uint8_t RxData[8];

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000df8:	b590      	push	{r4, r7, lr}
 8000dfa:	b087      	sub	sp, #28
 8000dfc:	af04      	add	r7, sp, #16
 8000dfe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000e00:	4b0a      	ldr	r3, [pc, #40]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e02:	4a0b      	ldr	r2, [pc, #44]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e04:	2100      	movs	r1, #0
 8000e06:	6878      	ldr	r0, [r7, #4]
 8000e08:	f005 f826 	bl	8005e58 <HAL_CAN_GetRxMessage>
	save_can_rx_data(RxHeader, RxData);
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000e0e:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000e10:	9203      	str	r2, [sp, #12]
 8000e12:	466c      	mov	r4, sp
 8000e14:	f103 0210 	add.w	r2, r3, #16
 8000e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000e1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e20:	f000 f808 	bl	8000e34 <save_can_rx_data>
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd90      	pop	{r4, r7, pc}
 8000e2c:	20000158 	.word	0x20000158
 8000e30:	2000013c 	.word	0x2000013c

08000e34 <save_can_rx_data>:


/************ CAN RX ************/

void save_can_rx_data(CAN_RxHeaderTypeDef RxHeader, uint8_t RxData[]) {
 8000e34:	b084      	sub	sp, #16
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	f107 0c10 	add.w	ip, r7, #16
 8000e40:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    // gets message and updates values
	switch (RxHeader.StdId) {
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	f240 4273 	movw	r2, #1139	; 0x473
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	f200 812f 	bhi.w	80010ae <save_can_rx_data+0x27a>
 8000e50:	f5b3 6f8e 	cmp.w	r3, #1136	; 0x470
 8000e54:	d20d      	bcs.n	8000e72 <save_can_rx_data+0x3e>
 8000e56:	f240 3287 	movw	r2, #903	; 0x387
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	f000 80b3 	beq.w	8000fc6 <save_can_rx_data+0x192>
 8000e60:	f5b3 7f62 	cmp.w	r3, #904	; 0x388
 8000e64:	f080 8123 	bcs.w	80010ae <save_can_rx_data+0x27a>
 8000e68:	2bc2      	cmp	r3, #194	; 0xc2
 8000e6a:	d853      	bhi.n	8000f14 <save_can_rx_data+0xe0>
 8000e6c:	2ba7      	cmp	r3, #167	; 0xa7
 8000e6e:	d211      	bcs.n	8000e94 <save_can_rx_data+0x60>
			back_left_wheel_speed = (RxData[0] << 8) ;
			back_left_wheel_speed += RxData[1];
			break;
		default:
			// no valid input received
			break;
 8000e70:	e11d      	b.n	80010ae <save_can_rx_data+0x27a>
	switch (RxHeader.StdId) {
 8000e72:	f5a3 638e 	sub.w	r3, r3, #1136	; 0x470
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	f200 8119 	bhi.w	80010ae <save_can_rx_data+0x27a>
 8000e7c:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <save_can_rx_data+0x50>)
 8000e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e82:	bf00      	nop
 8000e84:	0800103d 	.word	0x0800103d
 8000e88:	08001017 	.word	0x08001017
 8000e8c:	08001089 	.word	0x08001089
 8000e90:	08001063 	.word	0x08001063
 8000e94:	3ba7      	subs	r3, #167	; 0xa7
 8000e96:	2b1b      	cmp	r3, #27
 8000e98:	f200 8109 	bhi.w	80010ae <save_can_rx_data+0x27a>
 8000e9c:	a201      	add	r2, pc, #4	; (adr r2, 8000ea4 <save_can_rx_data+0x70>)
 8000e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea2:	bf00      	nop
 8000ea4:	08000f7f 	.word	0x08000f7f
 8000ea8:	080010af 	.word	0x080010af
 8000eac:	080010af 	.word	0x080010af
 8000eb0:	08000fa5 	.word	0x08000fa5
 8000eb4:	08000fd1 	.word	0x08000fd1
 8000eb8:	080010af 	.word	0x080010af
 8000ebc:	080010af 	.word	0x080010af
 8000ec0:	080010af 	.word	0x080010af
 8000ec4:	080010af 	.word	0x080010af
 8000ec8:	080010af 	.word	0x080010af
 8000ecc:	080010af 	.word	0x080010af
 8000ed0:	080010af 	.word	0x080010af
 8000ed4:	080010af 	.word	0x080010af
 8000ed8:	080010af 	.word	0x080010af
 8000edc:	080010af 	.word	0x080010af
 8000ee0:	080010af 	.word	0x080010af
 8000ee4:	080010af 	.word	0x080010af
 8000ee8:	080010af 	.word	0x080010af
 8000eec:	080010af 	.word	0x080010af
 8000ef0:	080010af 	.word	0x080010af
 8000ef4:	080010af 	.word	0x080010af
 8000ef8:	080010af 	.word	0x080010af
 8000efc:	080010af 	.word	0x080010af
 8000f00:	080010af 	.word	0x080010af
 8000f04:	080010af 	.word	0x080010af
 8000f08:	080010af 	.word	0x080010af
 8000f0c:	080010af 	.word	0x080010af
 8000f10:	08000ffd 	.word	0x08000ffd
 8000f14:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8000f18:	f040 80c9 	bne.w	80010ae <save_can_rx_data+0x27a>
			PACK_TEMP = RxData[0];
 8000f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f1e:	781a      	ldrb	r2, [r3, #0]
 8000f20:	4b68      	ldr	r3, [pc, #416]	; (80010c4 <save_can_rx_data+0x290>)
 8000f22:	701a      	strb	r2, [r3, #0]
			soc = RxData[1];
 8000f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f26:	785a      	ldrb	r2, [r3, #1]
 8000f28:	4b67      	ldr	r3, [pc, #412]	; (80010c8 <save_can_rx_data+0x294>)
 8000f2a:	701a      	strb	r2, [r3, #0]
			bms_status = (RxData[2] << 8);
 8000f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2e:	3302      	adds	r3, #2
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	021b      	lsls	r3, r3, #8
 8000f36:	b29a      	uxth	r2, r3
 8000f38:	4b64      	ldr	r3, [pc, #400]	; (80010cc <save_can_rx_data+0x298>)
 8000f3a:	801a      	strh	r2, [r3, #0]
			bms_status += RxData[3];
 8000f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f3e:	3303      	adds	r3, #3
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	b29a      	uxth	r2, r3
 8000f44:	4b61      	ldr	r3, [pc, #388]	; (80010cc <save_can_rx_data+0x298>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	4413      	add	r3, r2
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	4b5f      	ldr	r3, [pc, #380]	; (80010cc <save_can_rx_data+0x298>)
 8000f50:	801a      	strh	r2, [r3, #0]
			pack_voltage = (RxData[4] << 8);
 8000f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f54:	3304      	adds	r3, #4
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b29a      	uxth	r2, r3
 8000f5e:	4b5c      	ldr	r3, [pc, #368]	; (80010d0 <save_can_rx_data+0x29c>)
 8000f60:	801a      	strh	r2, [r3, #0]
			pack_voltage += RxData[5];
 8000f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f64:	3305      	adds	r3, #5
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	b29a      	uxth	r2, r3
 8000f6a:	4b59      	ldr	r3, [pc, #356]	; (80010d0 <save_can_rx_data+0x29c>)
 8000f6c:	881b      	ldrh	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4413      	add	r3, r2
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b56      	ldr	r3, [pc, #344]	; (80010d0 <save_can_rx_data+0x29c>)
 8000f76:	801a      	strh	r2, [r3, #0]
			temp_attenuate();
 8000f78:	f002 f850 	bl	800301c <temp_attenuate>
			break;
 8000f7c:	e09a      	b.n	80010b4 <save_can_rx_data+0x280>
			capacitor_volt = (RxData[0] << 8); // upper bits
 8000f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	021b      	lsls	r3, r3, #8
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b52      	ldr	r3, [pc, #328]	; (80010d4 <save_can_rx_data+0x2a0>)
 8000f8a:	801a      	strh	r2, [r3, #0]
			capacitor_volt += RxData[1]; // lower bits
 8000f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f8e:	3301      	adds	r3, #1
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b29a      	uxth	r2, r3
 8000f94:	4b4f      	ldr	r3, [pc, #316]	; (80010d4 <save_can_rx_data+0x2a0>)
 8000f96:	881b      	ldrh	r3, [r3, #0]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	4b4d      	ldr	r3, [pc, #308]	; (80010d4 <save_can_rx_data+0x2a0>)
 8000fa0:	801a      	strh	r2, [r3, #0]
			break;
 8000fa2:	e087      	b.n	80010b4 <save_can_rx_data+0x280>
			mc_lockout = RxData[6] & 0b1000000;
 8000fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fa6:	3306      	adds	r3, #6
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	4b49      	ldr	r3, [pc, #292]	; (80010d8 <save_can_rx_data+0x2a4>)
 8000fb2:	701a      	strb	r2, [r3, #0]
			mc_enabled = RxData[6] & 0b1;
 8000fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fb6:	3306      	adds	r3, #6
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	f003 0301 	and.w	r3, r3, #1
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b46      	ldr	r3, [pc, #280]	; (80010dc <save_can_rx_data+0x2a8>)
 8000fc2:	701a      	strb	r2, [r3, #0]
			break;
 8000fc4:	e076      	b.n	80010b4 <save_can_rx_data+0x280>
			shutdown_flags = RxData[2];
 8000fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fc8:	789a      	ldrb	r2, [r3, #2]
 8000fca:	4b45      	ldr	r3, [pc, #276]	; (80010e0 <save_can_rx_data+0x2ac>)
 8000fcc:	701a      	strb	r2, [r3, #0]
			break;
 8000fce:	e071      	b.n	80010b4 <save_can_rx_data+0x280>
			for (uint8_t i = 0; i < 8; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	e00f      	b.n	8000ff6 <save_can_rx_data+0x1c2>
				if (RxData[i] > 0) {
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000fda:	4413      	add	r3, r2
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <save_can_rx_data+0x1b6>
					mc_fault = 1;
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <save_can_rx_data+0x2b0>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
					break;
 8000fe8:	e008      	b.n	8000ffc <save_can_rx_data+0x1c8>
					mc_fault = 0;
 8000fea:	4b3e      	ldr	r3, [pc, #248]	; (80010e4 <save_can_rx_data+0x2b0>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	701a      	strb	r2, [r3, #0]
			for (uint8_t i = 0; i < 8; i++) {
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	71fb      	strb	r3, [r7, #7]
 8000ff6:	79fb      	ldrb	r3, [r7, #7]
 8000ff8:	2b07      	cmp	r3, #7
 8000ffa:	d9ec      	bls.n	8000fd6 <save_can_rx_data+0x1a2>
			if (RxData[0] == 0x20 && RxData[2] == 1) {
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b20      	cmp	r3, #32
 8001002:	d156      	bne.n	80010b2 <save_can_rx_data+0x27e>
 8001004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001006:	3302      	adds	r3, #2
 8001008:	781b      	ldrb	r3, [r3, #0]
 800100a:	2b01      	cmp	r3, #1
 800100c:	d151      	bne.n	80010b2 <save_can_rx_data+0x27e>
				mc_fault_clear_success = 1;
 800100e:	4b36      	ldr	r3, [pc, #216]	; (80010e8 <save_can_rx_data+0x2b4>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
			break;
 8001014:	e04d      	b.n	80010b2 <save_can_rx_data+0x27e>
			front_right_wheel_speed = (RxData[0] << 8) ;
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	b29b      	uxth	r3, r3
 800101c:	021b      	lsls	r3, r3, #8
 800101e:	b29a      	uxth	r2, r3
 8001020:	4b32      	ldr	r3, [pc, #200]	; (80010ec <save_can_rx_data+0x2b8>)
 8001022:	801a      	strh	r2, [r3, #0]
			front_right_wheel_speed += RxData[1];
 8001024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b2f      	ldr	r3, [pc, #188]	; (80010ec <save_can_rx_data+0x2b8>)
 800102e:	881b      	ldrh	r3, [r3, #0]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4413      	add	r3, r2
 8001034:	b29a      	uxth	r2, r3
 8001036:	4b2d      	ldr	r3, [pc, #180]	; (80010ec <save_can_rx_data+0x2b8>)
 8001038:	801a      	strh	r2, [r3, #0]
			break;
 800103a:	e03b      	b.n	80010b4 <save_can_rx_data+0x280>
			front_left_wheel_speed = (RxData[0] << 8) ;
 800103c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	b29b      	uxth	r3, r3
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b29a      	uxth	r2, r3
 8001046:	4b2a      	ldr	r3, [pc, #168]	; (80010f0 <save_can_rx_data+0x2bc>)
 8001048:	801a      	strh	r2, [r3, #0]
			front_left_wheel_speed += RxData[1];
 800104a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800104c:	3301      	adds	r3, #1
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	b29a      	uxth	r2, r3
 8001052:	4b27      	ldr	r3, [pc, #156]	; (80010f0 <save_can_rx_data+0x2bc>)
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	4413      	add	r3, r2
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <save_can_rx_data+0x2bc>)
 800105e:	801a      	strh	r2, [r3, #0]
			break;
 8001060:	e028      	b.n	80010b4 <save_can_rx_data+0x280>
			back_right_wheel_speed = (RxData[0] << 8) ;
 8001062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	b29b      	uxth	r3, r3
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b29a      	uxth	r2, r3
 800106c:	4b21      	ldr	r3, [pc, #132]	; (80010f4 <save_can_rx_data+0x2c0>)
 800106e:	801a      	strh	r2, [r3, #0]
			back_right_wheel_speed += RxData[1];
 8001070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001072:	3301      	adds	r3, #1
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	b29a      	uxth	r2, r3
 8001078:	4b1e      	ldr	r3, [pc, #120]	; (80010f4 <save_can_rx_data+0x2c0>)
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	b29b      	uxth	r3, r3
 800107e:	4413      	add	r3, r2
 8001080:	b29a      	uxth	r2, r3
 8001082:	4b1c      	ldr	r3, [pc, #112]	; (80010f4 <save_can_rx_data+0x2c0>)
 8001084:	801a      	strh	r2, [r3, #0]
			break;
 8001086:	e015      	b.n	80010b4 <save_can_rx_data+0x280>
			back_left_wheel_speed = (RxData[0] << 8) ;
 8001088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	021b      	lsls	r3, r3, #8
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b19      	ldr	r3, [pc, #100]	; (80010f8 <save_can_rx_data+0x2c4>)
 8001094:	801a      	strh	r2, [r3, #0]
			back_left_wheel_speed += RxData[1];
 8001096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001098:	3301      	adds	r3, #1
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	b29a      	uxth	r2, r3
 800109e:	4b16      	ldr	r3, [pc, #88]	; (80010f8 <save_can_rx_data+0x2c4>)
 80010a0:	881b      	ldrh	r3, [r3, #0]
 80010a2:	b29b      	uxth	r3, r3
 80010a4:	4413      	add	r3, r2
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	4b13      	ldr	r3, [pc, #76]	; (80010f8 <save_can_rx_data+0x2c4>)
 80010aa:	801a      	strh	r2, [r3, #0]
			break;
 80010ac:	e002      	b.n	80010b4 <save_can_rx_data+0x280>
			break;
 80010ae:	bf00      	nop
 80010b0:	e000      	b.n	80010b4 <save_can_rx_data+0x280>
			break;
 80010b2:	bf00      	nop
	}

}
 80010b4:	bf00      	nop
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010be:	b004      	add	sp, #16
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	20000129 	.word	0x20000129
 80010c8:	2000012b 	.word	0x2000012b
 80010cc:	2000012c 	.word	0x2000012c
 80010d0:	20000130 	.word	0x20000130
 80010d4:	20000126 	.word	0x20000126
 80010d8:	20000124 	.word	0x20000124
 80010dc:	20000125 	.word	0x20000125
 80010e0:	20000000 	.word	0x20000000
 80010e4:	2000012a 	.word	0x2000012a
 80010e8:	2000012e 	.word	0x2000012e
 80010ec:	20000132 	.word	0x20000132
 80010f0:	20000134 	.word	0x20000134
 80010f4:	20000136 	.word	0x20000136
 80010f8:	20000138 	.word	0x20000138

080010fc <can_tx_vcu_state>:

CAN_TxHeaderTypeDef   TxHeader;
uint32_t              TxMailbox;

//  transmit state
void can_tx_vcu_state(CAN_HandleTypeDef *hcan){
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b089      	sub	sp, #36	; 0x24
 8001100:	af04      	add	r7, sp, #16
 8001102:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 8001104:	4b22      	ldr	r3, [pc, #136]	; (8001190 <can_tx_vcu_state+0x94>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = VEHICLE_STATE;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <can_tx_vcu_state+0x94>)
 800110c:	f240 7266 	movw	r2, #1894	; 0x766
 8001110:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8001112:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <can_tx_vcu_state+0x94>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 8001118:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <can_tx_vcu_state+0x94>)
 800111a:	2208      	movs	r2, #8
 800111c:	611a      	str	r2, [r3, #16]
	uint8_t data_tx_state[8] = {
 800111e:	2300      	movs	r3, #0
 8001120:	723b      	strb	r3, [r7, #8]
        0,
        hv_requested(),
 8001122:	f000 fd49 	bl	8001bb8 <hv_requested>
 8001126:	4603      	mov	r3, r0
	uint8_t data_tx_state[8] = {
 8001128:	727b      	strb	r3, [r7, #9]
        throttle1.percent,
 800112a:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <can_tx_vcu_state+0x98>)
 800112c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[8] = {
 800112e:	b2db      	uxtb	r3, r3
 8001130:	72bb      	strb	r3, [r7, #10]
        throttle2.percent,
 8001132:	4b19      	ldr	r3, [pc, #100]	; (8001198 <can_tx_vcu_state+0x9c>)
 8001134:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[8] = {
 8001136:	b2db      	uxtb	r3, r3
 8001138:	72fb      	strb	r3, [r7, #11]
		brake.percent,
 800113a:	4b18      	ldr	r3, [pc, #96]	; (800119c <can_tx_vcu_state+0xa0>)
 800113c:	891b      	ldrh	r3, [r3, #8]
	uint8_t data_tx_state[8] = {
 800113e:	b2db      	uxtb	r3, r3
 8001140:	733b      	strb	r3, [r7, #12]
        one_byte_state(),
 8001142:	f000 fd67 	bl	8001c14 <one_byte_state>
 8001146:	4603      	mov	r3, r0
	uint8_t data_tx_state[8] = {
 8001148:	737b      	strb	r3, [r7, #13]
 800114a:	2300      	movs	r3, #0
 800114c:	73bb      	strb	r3, [r7, #14]
 800114e:	2300      	movs	r3, #0
 8001150:	73fb      	strb	r3, [r7, #15]
		0,
		0
    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_state, &TxMailbox) != HAL_OK)
 8001152:	f107 0208 	add.w	r2, r7, #8
 8001156:	4b12      	ldr	r3, [pc, #72]	; (80011a0 <can_tx_vcu_state+0xa4>)
 8001158:	490d      	ldr	r1, [pc, #52]	; (8001190 <can_tx_vcu_state+0x94>)
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f004 fdac 	bl	8005cb8 <HAL_CAN_AddTxMessage>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d002      	beq.n	800116c <can_tx_vcu_state+0x70>
	{
	  print("CAN Tx failed\r\n");
 8001166:	480f      	ldr	r0, [pc, #60]	; (80011a4 <can_tx_vcu_state+0xa8>)
 8001168:	f002 f8a4 	bl	80032b4 <print>
	}
    write_tx_to_sd(TxHeader, data_tx_state);
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <can_tx_vcu_state+0x94>)
 800116e:	f107 0208 	add.w	r2, r7, #8
 8001172:	9202      	str	r2, [sp, #8]
 8001174:	466c      	mov	r4, sp
 8001176:	f103 0210 	add.w	r2, r3, #16
 800117a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800117e:	e884 0003 	stmia.w	r4, {r0, r1}
 8001182:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001184:	f000 fe78 	bl	8001e78 <write_tx_to_sd>
}
 8001188:	bf00      	nop
 800118a:	3714      	adds	r7, #20
 800118c:	46bd      	mov	sp, r7
 800118e:	bd90      	pop	{r4, r7, pc}
 8001190:	20000160 	.word	0x20000160
 8001194:	200027f0 	.word	0x200027f0
 8001198:	200027fc 	.word	0x200027fc
 800119c:	20002808 	.word	0x20002808
 80011a0:	20000178 	.word	0x20000178
 80011a4:	0800f2bc 	.word	0x0800f2bc

080011a8 <can_tx_torque_request>:


// transmit torque request
void can_tx_torque_request(CAN_HandleTypeDef *hcan){
 80011a8:	b590      	push	{r4, r7, lr}
 80011aa:	b08b      	sub	sp, #44	; 0x2c
 80011ac:	af04      	add	r7, sp, #16
 80011ae:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 80011b0:	4b33      	ldr	r3, [pc, #204]	; (8001280 <can_tx_torque_request+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = TORQUE_REQUEST;
 80011b6:	4b32      	ldr	r3, [pc, #200]	; (8001280 <can_tx_torque_request+0xd8>)
 80011b8:	22c0      	movs	r2, #192	; 0xc0
 80011ba:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80011bc:	4b30      	ldr	r3, [pc, #192]	; (8001280 <can_tx_torque_request+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80011c2:	4b2f      	ldr	r3, [pc, #188]	; (8001280 <can_tx_torque_request+0xd8>)
 80011c4:	2208      	movs	r2, #8
 80011c6:	611a      	str	r2, [r3, #16]

    uint16_t throttle_msg_byte = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	82fb      	strh	r3, [r7, #22]
    if (state == DRIVE) {
 80011cc:	4b2d      	ldr	r3, [pc, #180]	; (8001284 <can_tx_torque_request+0xdc>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d10e      	bne.n	80011f4 <can_tx_torque_request+0x4c>
    	uint16_t throttle_req = requested_throttle();
 80011d6:	f001 fee5 	bl	8002fa4 <requested_throttle>
 80011da:	4603      	mov	r3, r0
 80011dc:	82bb      	strh	r3, [r7, #20]
    	if (throttle_req  < 50) {
 80011de:	8abb      	ldrh	r3, [r7, #20]
 80011e0:	2b31      	cmp	r3, #49	; 0x31
 80011e2:	d801      	bhi.n	80011e8 <can_tx_torque_request+0x40>
    		throttle_req = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	82bb      	strh	r3, [r7, #20]
    	}
        throttle_msg_byte = throttle_req - TC_torque_adjustment;
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <can_tx_torque_request+0xe0>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29b      	uxth	r3, r3
 80011ee:	8aba      	ldrh	r2, [r7, #20]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	82fb      	strh	r3, [r7, #22]
    }

    uint8_t byte5 = 0b010;   //speed mode | discharge_enable | inverter enable
 80011f4:	2302      	movs	r3, #2
 80011f6:	74fb      	strb	r3, [r7, #19]

    if (state == DRIVE) {
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <can_tx_torque_request+0xdc>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	2b03      	cmp	r3, #3
 8001200:	d10a      	bne.n	8001218 <can_tx_torque_request+0x70>
    	byte5 |= (hv_requested() & 0x01);  //set inverter enable bit
 8001202:	f000 fcd9 	bl	8001bb8 <hv_requested>
 8001206:	4603      	mov	r3, r0
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	b25a      	sxtb	r2, r3
 800120e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001212:	4313      	orrs	r3, r2
 8001214:	b25b      	sxtb	r3, r3
 8001216:	74fb      	strb	r3, [r7, #19]
    }


    uint8_t data_tx_torque[8] = {
        (uint8_t)(throttle_msg_byte & 0xff), // 0 - torque command lower (Nm*10)
 8001218:	8afb      	ldrh	r3, [r7, #22]
 800121a:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 800121c:	723b      	strb	r3, [r7, #8]
        (uint8_t)(throttle_msg_byte >> 8) & 0xFF, // 1 - torque command upper (Nm*10)
 800121e:	8afb      	ldrh	r3, [r7, #22]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	b29b      	uxth	r3, r3
 8001224:	b2db      	uxtb	r3, r3
    uint8_t data_tx_torque[8] = {
 8001226:	727b      	strb	r3, [r7, #9]
 8001228:	2300      	movs	r3, #0
 800122a:	72bb      	strb	r3, [r7, #10]
 800122c:	2300      	movs	r3, #0
 800122e:	72fb      	strb	r3, [r7, #11]
 8001230:	2301      	movs	r3, #1
 8001232:	733b      	strb	r3, [r7, #12]
 8001234:	7cfb      	ldrb	r3, [r7, #19]
 8001236:	737b      	strb	r3, [r7, #13]
 8001238:	2300      	movs	r3, #0
 800123a:	73bb      	strb	r3, [r7, #14]
 800123c:	2300      	movs	r3, #0
 800123e:	73fb      	strb	r3, [r7, #15]
        byte5, // 5 - speed mode | discharge_enable | inverter enable
        0, // 6 - torque limit lower (if 0, default EEPROM value used)
        0 // 7 - torque limit upper (if 0, default EEPROM value used)
    };

    if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_torque, &TxMailbox) != HAL_OK)
 8001240:	f107 0208 	add.w	r2, r7, #8
 8001244:	4b11      	ldr	r3, [pc, #68]	; (800128c <can_tx_torque_request+0xe4>)
 8001246:	490e      	ldr	r1, [pc, #56]	; (8001280 <can_tx_torque_request+0xd8>)
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f004 fd35 	bl	8005cb8 <HAL_CAN_AddTxMessage>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <can_tx_torque_request+0xb2>
	{
	  print("CAN Tx failed\r\n");
 8001254:	480e      	ldr	r0, [pc, #56]	; (8001290 <can_tx_torque_request+0xe8>)
 8001256:	f002 f82d 	bl	80032b4 <print>
	}
    write_tx_to_sd(TxHeader, data_tx_torque);
 800125a:	4b09      	ldr	r3, [pc, #36]	; (8001280 <can_tx_torque_request+0xd8>)
 800125c:	f107 0208 	add.w	r2, r7, #8
 8001260:	9202      	str	r2, [sp, #8]
 8001262:	466c      	mov	r4, sp
 8001264:	f103 0210 	add.w	r2, r3, #16
 8001268:	e892 0003 	ldmia.w	r2, {r0, r1}
 800126c:	e884 0003 	stmia.w	r4, {r0, r1}
 8001270:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001272:	f000 fe01 	bl	8001e78 <write_tx_to_sd>
}
 8001276:	bf00      	nop
 8001278:	371c      	adds	r7, #28
 800127a:	46bd      	mov	sp, r7
 800127c:	bd90      	pop	{r4, r7, pc}
 800127e:	bf00      	nop
 8001280:	20000160 	.word	0x20000160
 8001284:	2000008d 	.word	0x2000008d
 8001288:	20002826 	.word	0x20002826
 800128c:	20000178 	.word	0x20000178
 8001290:	0800f2bc 	.word	0x0800f2bc

08001294 <can_clear_MC_fault>:
	  print("CAN Tx failed\r\n");
	}
	write_tx_to_sd(TxHeader, data_tx_torque);
}

void can_clear_MC_fault(CAN_HandleTypeDef *hcan) {
 8001294:	b590      	push	{r4, r7, lr}
 8001296:	b08b      	sub	sp, #44	; 0x2c
 8001298:	af04      	add	r7, sp, #16
 800129a:	6078      	str	r0, [r7, #4]
	TxHeader.IDE = CAN_ID_STD;
 800129c:	4b1e      	ldr	r3, [pc, #120]	; (8001318 <can_clear_MC_fault+0x84>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
	TxHeader.StdId = MC_PARAM_COMMAND;
 80012a2:	4b1d      	ldr	r3, [pc, #116]	; (8001318 <can_clear_MC_fault+0x84>)
 80012a4:	22c1      	movs	r2, #193	; 0xc1
 80012a6:	601a      	str	r2, [r3, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <can_clear_MC_fault+0x84>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
	TxHeader.DLC = 8;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <can_clear_MC_fault+0x84>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	611a      	str	r2, [r3, #16]

	const uint16_t param_addr = 20;
 80012b4:	2314      	movs	r3, #20
 80012b6:	82fb      	strh	r3, [r7, #22]
	uint8_t data_tx_param_command[8] = {
 80012b8:	8afb      	ldrh	r3, [r7, #22]
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	733b      	strb	r3, [r7, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	737b      	strb	r3, [r7, #13]
 80012c2:	2301      	movs	r3, #1
 80012c4:	73bb      	strb	r3, [r7, #14]
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]
 80012ca:	2300      	movs	r3, #0
 80012cc:	743b      	strb	r3, [r7, #16]
 80012ce:	2300      	movs	r3, #0
 80012d0:	747b      	strb	r3, [r7, #17]
 80012d2:	2300      	movs	r3, #0
 80012d4:	74bb      	strb	r3, [r7, #18]
 80012d6:	2300      	movs	r3, #0
 80012d8:	74fb      	strb	r3, [r7, #19]
			0, // data
			0, // reserved
			0 // reserved
	};

	if (HAL_CAN_AddTxMessage(hcan, &TxHeader, data_tx_param_command, &TxMailbox) != HAL_OK)
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	4b0f      	ldr	r3, [pc, #60]	; (800131c <can_clear_MC_fault+0x88>)
 80012e0:	490d      	ldr	r1, [pc, #52]	; (8001318 <can_clear_MC_fault+0x84>)
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f004 fce8 	bl	8005cb8 <HAL_CAN_AddTxMessage>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d002      	beq.n	80012f4 <can_clear_MC_fault+0x60>
	{
	  print("CAN Tx failed\r\n");
 80012ee:	480c      	ldr	r0, [pc, #48]	; (8001320 <can_clear_MC_fault+0x8c>)
 80012f0:	f001 ffe0 	bl	80032b4 <print>
	}
	write_tx_to_sd(TxHeader, data_tx_param_command);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <can_clear_MC_fault+0x84>)
 80012f6:	f107 020c 	add.w	r2, r7, #12
 80012fa:	9202      	str	r2, [sp, #8]
 80012fc:	466c      	mov	r4, sp
 80012fe:	f103 0210 	add.w	r2, r3, #16
 8001302:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001306:	e884 0003 	stmia.w	r4, {r0, r1}
 800130a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800130c:	f000 fdb4 	bl	8001e78 <write_tx_to_sd>
}
 8001310:	bf00      	nop
 8001312:	371c      	adds	r7, #28
 8001314:	46bd      	mov	sp, r7
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	20000160 	.word	0x20000160
 800131c:	20000178 	.word	0x20000178
 8001320:	0800f2bc 	.word	0x0800f2bc

08001324 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	SSD1963_Init();
 8001328:	f003 fb66 	bl	80049f8 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 800132c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001330:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8001334:	490b      	ldr	r1, [pc, #44]	; (8001364 <Display_Init+0x40>)
 8001336:	480c      	ldr	r0, [pc, #48]	; (8001368 <Display_Init+0x44>)
 8001338:	f002 fde2 	bl	8003f00 <UG_Init>

	UG_FontSetVSpace(0);
 800133c:	2000      	movs	r0, #0
 800133e:	f003 f883 	bl	8004448 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 8001342:	2000      	movs	r0, #0
 8001344:	f003 f86c 	bl	8004420 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 8001348:	4908      	ldr	r1, [pc, #32]	; (800136c <Display_Init+0x48>)
 800134a:	2001      	movs	r0, #1
 800134c:	f003 fb28 	bl	80049a0 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 8001350:	4907      	ldr	r1, [pc, #28]	; (8001370 <Display_Init+0x4c>)
 8001352:	2000      	movs	r0, #0
 8001354:	f003 fb24 	bl	80049a0 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 8001358:	4906      	ldr	r1, [pc, #24]	; (8001374 <Display_Init+0x50>)
 800135a:	2003      	movs	r0, #3
 800135c:	f003 fb20 	bl	80049a0 <UG_DriverRegister>
}
 8001360:	bf00      	nop
 8001362:	bd80      	pop	{r7, pc}
 8001364:	08004bbb 	.word	0x08004bbb
 8001368:	200001ac 	.word	0x200001ac
 800136c:	08004c45 	.word	0x08004c45
 8001370:	08004d0f 	.word	0x08004d0f
 8001374:	08004dc3 	.word	0x08004dc3

08001378 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 800137e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001382:	f002 fe69 	bl	8004058 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 8001386:	231f      	movs	r3, #31
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800138e:	220a      	movs	r2, #10
 8001390:	f44f 7183 	mov.w	r1, #262	; 0x106
 8001394:	2000      	movs	r0, #0
 8001396:	f002 fe81 	bl	800409c <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 800139a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	230a      	movs	r3, #10
 80013a2:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013a6:	2100      	movs	r1, #0
 80013a8:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80013ac:	f002 fe76 	bl	800409c <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 80013b0:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80013b4:	9300      	str	r3, [sp, #0]
 80013b6:	f44f 7388 	mov.w	r3, #272	; 0x110
 80013ba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80013be:	f44f 7183 	mov.w	r1, #262	; 0x106
 80013c2:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80013c6:	f002 fe69 	bl	800409c <UG_FillFrame>
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}

080013d0 <Display_DriveTemplate>:
	glv_v_box.last_color = C_BLACK;  // force box redraw

}

void Display_DriveTemplate()
{
 80013d0:	b5b0      	push	{r4, r5, r7, lr}
 80013d2:	af00      	add	r7, sp, #0
    debug_mode = false;
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <Display_DriveTemplate+0x114>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	701a      	strb	r2, [r3, #0]

    // clear screen
    UG_FillScreen(C_BLACK);
 80013da:	2000      	movs	r0, #0
 80013dc:	f002 fe3c 	bl	8004058 <UG_FillScreen>

    // draw labels
    UG_PutString(68, 10, "PACK SOC");
 80013e0:	4a41      	ldr	r2, [pc, #260]	; (80014e8 <Display_DriveTemplate+0x118>)
 80013e2:	210a      	movs	r1, #10
 80013e4:	2044      	movs	r0, #68	; 0x44
 80013e6:	f002 fec9 	bl	800417c <UG_PutString>
    UG_PutString(297, 10, "MAX PACK T");
 80013ea:	4a40      	ldr	r2, [pc, #256]	; (80014ec <Display_DriveTemplate+0x11c>)
 80013ec:	210a      	movs	r1, #10
 80013ee:	f240 1029 	movw	r0, #297	; 0x129
 80013f2:	f002 fec3 	bl	800417c <UG_PutString>
    UG_PutString(30, 180, "STATE:");
 80013f6:	4a3e      	ldr	r2, [pc, #248]	; (80014f0 <Display_DriveTemplate+0x120>)
 80013f8:	21b4      	movs	r1, #180	; 0xb4
 80013fa:	201e      	movs	r0, #30
 80013fc:	f002 febe 	bl	800417c <UG_PutString>
    UG_PutString(275, 180, "GLV V:");
 8001400:	4a3c      	ldr	r2, [pc, #240]	; (80014f4 <Display_DriveTemplate+0x124>)
 8001402:	21b4      	movs	r1, #180	; 0xb4
 8001404:	f240 1013 	movw	r0, #275	; 0x113
 8001408:	f002 feb8 	bl	800417c <UG_PutString>

    // setup textbox configs
    soc_box.box_x1 = 30;
 800140c:	4b3a      	ldr	r3, [pc, #232]	; (80014f8 <Display_DriveTemplate+0x128>)
 800140e:	221e      	movs	r2, #30
 8001410:	801a      	strh	r2, [r3, #0]
    soc_box.box_y1 = 35;
 8001412:	4b39      	ldr	r3, [pc, #228]	; (80014f8 <Display_DriveTemplate+0x128>)
 8001414:	2223      	movs	r2, #35	; 0x23
 8001416:	805a      	strh	r2, [r3, #2]
    soc_box.box_x2 = 210;
 8001418:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <Display_DriveTemplate+0x128>)
 800141a:	22d2      	movs	r2, #210	; 0xd2
 800141c:	809a      	strh	r2, [r3, #4]
    soc_box.box_y2 = 170;
 800141e:	4b36      	ldr	r3, [pc, #216]	; (80014f8 <Display_DriveTemplate+0x128>)
 8001420:	22aa      	movs	r2, #170	; 0xaa
 8001422:	80da      	strh	r2, [r3, #6]
    soc_box.font = FONT_32X53;
 8001424:	4b34      	ldr	r3, [pc, #208]	; (80014f8 <Display_DriveTemplate+0x128>)
 8001426:	4a35      	ldr	r2, [pc, #212]	; (80014fc <Display_DriveTemplate+0x12c>)
 8001428:	f103 0410 	add.w	r4, r3, #16
 800142c:	4615      	mov	r5, r2
 800142e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001432:	682b      	ldr	r3, [r5, #0]
 8001434:	6023      	str	r3, [r4, #0]
    soc_box.last_color = C_BLACK;  // force box redraw
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <Display_DriveTemplate+0x128>)
 8001438:	2200      	movs	r2, #0
 800143a:	849a      	strh	r2, [r3, #36]	; 0x24
    soc_box.last_value = 255;
 800143c:	4b2e      	ldr	r3, [pc, #184]	; (80014f8 <Display_DriveTemplate+0x128>)
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	84da      	strh	r2, [r3, #38]	; 0x26

    bms_temp_box.box_x1 = 270;
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <Display_DriveTemplate+0x130>)
 8001444:	f44f 7287 	mov.w	r2, #270	; 0x10e
 8001448:	801a      	strh	r2, [r3, #0]
	bms_temp_box.box_y1 = 35;
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <Display_DriveTemplate+0x130>)
 800144c:	2223      	movs	r2, #35	; 0x23
 800144e:	805a      	strh	r2, [r3, #2]
	bms_temp_box.box_x2 = 450;
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <Display_DriveTemplate+0x130>)
 8001452:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 8001456:	809a      	strh	r2, [r3, #4]
	bms_temp_box.box_y2 = 170;
 8001458:	4b29      	ldr	r3, [pc, #164]	; (8001500 <Display_DriveTemplate+0x130>)
 800145a:	22aa      	movs	r2, #170	; 0xaa
 800145c:	80da      	strh	r2, [r3, #6]
	bms_temp_box.font = FONT_32X53;
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <Display_DriveTemplate+0x130>)
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <Display_DriveTemplate+0x12c>)
 8001462:	f103 0410 	add.w	r4, r3, #16
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	6023      	str	r3, [r4, #0]
	bms_temp_box.last_color = C_BLACK;  // force box redraw
 8001470:	4b23      	ldr	r3, [pc, #140]	; (8001500 <Display_DriveTemplate+0x130>)
 8001472:	2200      	movs	r2, #0
 8001474:	849a      	strh	r2, [r3, #36]	; 0x24
	bms_temp_box.last_value = 255;
 8001476:	4b22      	ldr	r3, [pc, #136]	; (8001500 <Display_DriveTemplate+0x130>)
 8001478:	22ff      	movs	r2, #255	; 0xff
 800147a:	84da      	strh	r2, [r3, #38]	; 0x26

	state_box.box_x1 = 30;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <Display_DriveTemplate+0x134>)
 800147e:	221e      	movs	r2, #30
 8001480:	801a      	strh	r2, [r3, #0]
	state_box.box_y1 = 200;
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <Display_DriveTemplate+0x134>)
 8001484:	22c8      	movs	r2, #200	; 0xc8
 8001486:	805a      	strh	r2, [r3, #2]
	state_box.box_x2 = 210;
 8001488:	4b1e      	ldr	r3, [pc, #120]	; (8001504 <Display_DriveTemplate+0x134>)
 800148a:	22d2      	movs	r2, #210	; 0xd2
 800148c:	809a      	strh	r2, [r3, #4]
	state_box.box_y2 = 230;
 800148e:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <Display_DriveTemplate+0x134>)
 8001490:	22e6      	movs	r2, #230	; 0xe6
 8001492:	80da      	strh	r2, [r3, #6]
	state_box.font = FONT_12X16;
 8001494:	4b1b      	ldr	r3, [pc, #108]	; (8001504 <Display_DriveTemplate+0x134>)
 8001496:	4a1c      	ldr	r2, [pc, #112]	; (8001508 <Display_DriveTemplate+0x138>)
 8001498:	f103 0410 	add.w	r4, r3, #16
 800149c:	4615      	mov	r5, r2
 800149e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014a2:	682b      	ldr	r3, [r5, #0]
 80014a4:	6023      	str	r3, [r4, #0]
	state_box.last_color = C_BLACK;  // force box redraw
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <Display_DriveTemplate+0x134>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	849a      	strh	r2, [r3, #36]	; 0x24

	glv_v_box.box_x1 = 270;
 80014ac:	4b17      	ldr	r3, [pc, #92]	; (800150c <Display_DriveTemplate+0x13c>)
 80014ae:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80014b2:	801a      	strh	r2, [r3, #0]
	glv_v_box.box_y1 = 200;
 80014b4:	4b15      	ldr	r3, [pc, #84]	; (800150c <Display_DriveTemplate+0x13c>)
 80014b6:	22c8      	movs	r2, #200	; 0xc8
 80014b8:	805a      	strh	r2, [r3, #2]
	glv_v_box.box_x2 = 450;
 80014ba:	4b14      	ldr	r3, [pc, #80]	; (800150c <Display_DriveTemplate+0x13c>)
 80014bc:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80014c0:	809a      	strh	r2, [r3, #4]
	glv_v_box.box_y2 = 230;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <Display_DriveTemplate+0x13c>)
 80014c4:	22e6      	movs	r2, #230	; 0xe6
 80014c6:	80da      	strh	r2, [r3, #6]
	glv_v_box.font = FONT_12X16;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <Display_DriveTemplate+0x13c>)
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <Display_DriveTemplate+0x138>)
 80014cc:	f103 0410 	add.w	r4, r3, #16
 80014d0:	4615      	mov	r5, r2
 80014d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d6:	682b      	ldr	r3, [r5, #0]
 80014d8:	6023      	str	r3, [r4, #0]
	glv_v_box.last_color = C_BLACK;  // force box redraw
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <Display_DriveTemplate+0x13c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	849a      	strh	r2, [r3, #36]	; 0x24
}
 80014e0:	bf00      	nop
 80014e2:	bdb0      	pop	{r4, r5, r7, pc}
 80014e4:	200001a8 	.word	0x200001a8
 80014e8:	0800f328 	.word	0x0800f328
 80014ec:	0800f334 	.word	0x0800f334
 80014f0:	0800f2ec 	.word	0x0800f2ec
 80014f4:	0800f2fc 	.word	0x0800f2fc
 80014f8:	20000004 	.word	0x20000004
 80014fc:	0801e938 	.word	0x0801e938
 8001500:	20000030 	.word	0x20000030
 8001504:	2000017c 	.word	0x2000017c
 8001508:	0801e924 	.word	0x0801e924
 800150c:	2000005c 	.word	0x2000005c

08001510 <Display_Update>:

void Display_Update()
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	static uint32_t glv_v = 99999;
//	soc = soc+1 ;
//	glv_v+=1;

    draw_soc(soc);
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <Display_Update+0x44>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	f000 f821 	bl	8001564 <draw_soc>
    draw_bms_temp(PACK_TEMP);
 8001522:	4b0d      	ldr	r3, [pc, #52]	; (8001558 <Display_Update+0x48>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	b2db      	uxtb	r3, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	4618      	mov	r0, r3
 800152c:	f000 f82a 	bl	8001584 <draw_bms_temp>
    draw_state(one_byte_state(), bms_status);
 8001530:	f000 fb70 	bl	8001c14 <one_byte_state>
 8001534:	4603      	mov	r3, r0
 8001536:	461a      	mov	r2, r3
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <Display_Update+0x4c>)
 800153a:	881b      	ldrh	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4619      	mov	r1, r3
 8001540:	4610      	mov	r0, r2
 8001542:	f000 f82f 	bl	80015a4 <draw_state>
    draw_glv_v(glv_v);
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <Display_Update+0x50>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4618      	mov	r0, r3
 800154c:	f000 f9e4 	bl	8001918 <draw_glv_v>
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}
 8001554:	2000012b 	.word	0x2000012b
 8001558:	20000129 	.word	0x20000129
 800155c:	2000012c 	.word	0x2000012c
 8001560:	20000088 	.word	0x20000088

08001564 <draw_soc>:


void draw_soc(uint16_t soc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&soc_box, soc);
 800156e:	88fb      	ldrh	r3, [r7, #6]
 8001570:	4619      	mov	r1, r3
 8001572:	4803      	ldr	r0, [pc, #12]	; (8001580 <draw_soc+0x1c>)
 8001574:	f000 fa50 	bl	8001a18 <draw_value_textbox>
}
 8001578:	bf00      	nop
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000004 	.word	0x20000004

08001584 <draw_bms_temp>:

void draw_bms_temp(uint16_t temp)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&bms_temp_box, temp);
 800158e:	88fb      	ldrh	r3, [r7, #6]
 8001590:	4619      	mov	r1, r3
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <draw_bms_temp+0x1c>)
 8001594:	f000 fa40 	bl	8001a18 <draw_value_textbox>
}
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000030 	.word	0x20000030

080015a4 <draw_state>:

void draw_state(uint8_t state, uint16_t bms_status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b088      	sub	sp, #32
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	460a      	mov	r2, r1
 80015ae:	71fb      	strb	r3, [r7, #7]
 80015b0:	4613      	mov	r3, r2
 80015b2:	80bb      	strh	r3, [r7, #4]
    static uint8_t last_state = 255;
    static uint16_t last_bms_status;

    if((state == last_state) && (bms_status == last_bms_status))  // skip function if value is the same
 80015b4:	4ba9      	ldr	r3, [pc, #676]	; (800185c <draw_state+0x2b8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	79fa      	ldrb	r2, [r7, #7]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d105      	bne.n	80015ca <draw_state+0x26>
 80015be:	4ba8      	ldr	r3, [pc, #672]	; (8001860 <draw_state+0x2bc>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	88ba      	ldrh	r2, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	f000 819b 	beq.w	8001900 <draw_state+0x35c>
    }

    UG_COLOR color;
    char string[15];

    switch(bms_status)  // BMS faults more important than VCU faults
 80015ca:	88bb      	ldrh	r3, [r7, #4]
 80015cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d0:	d052      	beq.n	8001678 <draw_state+0xd4>
 80015d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015d6:	dc59      	bgt.n	800168c <draw_state+0xe8>
 80015d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015dc:	d03f      	beq.n	800165e <draw_state+0xba>
 80015de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80015e2:	dc53      	bgt.n	800168c <draw_state+0xe8>
 80015e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e8:	d02f      	beq.n	800164a <draw_state+0xa6>
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	dc4d      	bgt.n	800168c <draw_state+0xe8>
 80015f0:	2b40      	cmp	r3, #64	; 0x40
 80015f2:	d020      	beq.n	8001636 <draw_state+0x92>
 80015f4:	2b40      	cmp	r3, #64	; 0x40
 80015f6:	dc49      	bgt.n	800168c <draw_state+0xe8>
 80015f8:	2b10      	cmp	r3, #16
 80015fa:	d012      	beq.n	8001622 <draw_state+0x7e>
 80015fc:	2b10      	cmp	r3, #16
 80015fe:	dc45      	bgt.n	800168c <draw_state+0xe8>
 8001600:	2b02      	cmp	r3, #2
 8001602:	d001      	beq.n	8001608 <draw_state+0x64>
 8001604:	2b08      	cmp	r3, #8
 8001606:	d141      	bne.n	800168c <draw_state+0xe8>
    {
        case PACK_TEMP_OVER:
        case PACK_TEMP_UNDER:
            color = C_RED;
 8001608:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800160c:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " BMS TEMP ");
 800160e:	f107 030c 	add.w	r3, r7, #12
 8001612:	4a94      	ldr	r2, [pc, #592]	; (8001864 <draw_state+0x2c0>)
 8001614:	ca07      	ldmia	r2, {r0, r1, r2}
 8001616:	c303      	stmia	r3!, {r0, r1}
 8001618:	801a      	strh	r2, [r3, #0]
 800161a:	3302      	adds	r3, #2
 800161c:	0c12      	lsrs	r2, r2, #16
 800161e:	701a      	strb	r2, [r3, #0]
            break;
 8001620:	e166      	b.n	80018f0 <draw_state+0x34c>
        case LOW_SOC:
            color = C_RED;
 8001622:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001626:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " LOW SOC ");
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4a8e      	ldr	r2, [pc, #568]	; (8001868 <draw_state+0x2c4>)
 800162e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001630:	c303      	stmia	r3!, {r0, r1}
 8001632:	801a      	strh	r2, [r3, #0]
            break;
 8001634:	e15c      	b.n	80018f0 <draw_state+0x34c>
        case IMBALANCE:
            color = C_RED;
 8001636:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800163a:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "IMBALANCE");
 800163c:	f107 030c 	add.w	r3, r7, #12
 8001640:	4a8a      	ldr	r2, [pc, #552]	; (800186c <draw_state+0x2c8>)
 8001642:	ca07      	ldmia	r2, {r0, r1, r2}
 8001644:	c303      	stmia	r3!, {r0, r1}
 8001646:	801a      	strh	r2, [r3, #0]
            break;
 8001648:	e152      	b.n	80018f0 <draw_state+0x34c>
        case SPI_FAULT:
            color = C_RED;
 800164a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800164e:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "SPI FAULT");
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	4a86      	ldr	r2, [pc, #536]	; (8001870 <draw_state+0x2cc>)
 8001656:	ca07      	ldmia	r2, {r0, r1, r2}
 8001658:	c303      	stmia	r3!, {r0, r1}
 800165a:	801a      	strh	r2, [r3, #0]
            break;
 800165c:	e148      	b.n	80018f0 <draw_state+0x34c>
        case CELL_VOLT_OVER:
            color = C_RED;
 800165e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001662:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " OVERVOLT ");
 8001664:	f107 030c 	add.w	r3, r7, #12
 8001668:	4a82      	ldr	r2, [pc, #520]	; (8001874 <draw_state+0x2d0>)
 800166a:	ca07      	ldmia	r2, {r0, r1, r2}
 800166c:	c303      	stmia	r3!, {r0, r1}
 800166e:	801a      	strh	r2, [r3, #0]
 8001670:	3302      	adds	r3, #2
 8001672:	0c12      	lsrs	r2, r2, #16
 8001674:	701a      	strb	r2, [r3, #0]
            break;
 8001676:	e13b      	b.n	80018f0 <draw_state+0x34c>
        case CELL_VOLT_UNDER:
            color = C_RED;
 8001678:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800167c:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "UNDERVOLT");
 800167e:	f107 030c 	add.w	r3, r7, #12
 8001682:	4a7d      	ldr	r2, [pc, #500]	; (8001878 <draw_state+0x2d4>)
 8001684:	ca07      	ldmia	r2, {r0, r1, r2}
 8001686:	c303      	stmia	r3!, {r0, r1}
 8001688:	801a      	strh	r2, [r3, #0]
            break;
 800168a:	e131      	b.n	80018f0 <draw_state+0x34c>
        default:
            // check fault bit
            if (state & 0x80) {
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	2b00      	cmp	r3, #0
 8001692:	f280 80be 	bge.w	8001812 <draw_state+0x26e>
                // *************** FAULTS ***************
                uint8_t fault = state & 0x7f; // mask off fault bit
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800169c:	777b      	strb	r3, [r7, #29]
                switch(fault)
 800169e:	7f7b      	ldrb	r3, [r7, #29]
 80016a0:	2b0a      	cmp	r3, #10
 80016a2:	dc1d      	bgt.n	80016e0 <draw_state+0x13c>
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f340 80aa 	ble.w	80017fe <draw_state+0x25a>
 80016aa:	3b01      	subs	r3, #1
 80016ac:	2b09      	cmp	r3, #9
 80016ae:	f200 80a6 	bhi.w	80017fe <draw_state+0x25a>
 80016b2:	a201      	add	r2, pc, #4	; (adr r2, 80016b8 <draw_state+0x114>)
 80016b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016b8:	08001701 	.word	0x08001701
 80016bc:	0800171b 	.word	0x0800171b
 80016c0:	08001735 	.word	0x08001735
 80016c4:	0800174f 	.word	0x0800174f
 80016c8:	08001769 	.word	0x08001769
 80016cc:	08001783 	.word	0x08001783
 80016d0:	0800179d 	.word	0x0800179d
 80016d4:	080017b7 	.word	0x080017b7
 80016d8:	080017d1 	.word	0x080017d1
 80016dc:	080017e5 	.word	0x080017e5
 80016e0:	2bff      	cmp	r3, #255	; 0xff
 80016e2:	f040 808c 	bne.w	80017fe <draw_state+0x25a>
                {
//                    case NONE: // STARTUP (effectively)
                	case 255:
                        // not obtainable via CAN
                        // would only show when hardcoded on startup
                        color = C_YELLOW;
 80016e6:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80016ea:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " STARTUP  ");
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4a62      	ldr	r2, [pc, #392]	; (800187c <draw_state+0x2d8>)
 80016f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f4:	c303      	stmia	r3!, {r0, r1}
 80016f6:	801a      	strh	r2, [r3, #0]
 80016f8:	3302      	adds	r3, #2
 80016fa:	0c12      	lsrs	r2, r2, #16
 80016fc:	701a      	strb	r2, [r3, #0]
                        break;
 80016fe:	e0f7      	b.n	80018f0 <draw_state+0x34c>
                    case DRIVE_REQUEST_FROM_LV:
                        color = C_RED;
 8001700:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001704:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "DRV FRM LV");
 8001706:	f107 030c 	add.w	r3, r7, #12
 800170a:	4a5d      	ldr	r2, [pc, #372]	; (8001880 <draw_state+0x2dc>)
 800170c:	ca07      	ldmia	r2, {r0, r1, r2}
 800170e:	c303      	stmia	r3!, {r0, r1}
 8001710:	801a      	strh	r2, [r3, #0]
 8001712:	3302      	adds	r3, #2
 8001714:	0c12      	lsrs	r2, r2, #16
 8001716:	701a      	strb	r2, [r3, #0]
                        break;
 8001718:	e0ea      	b.n	80018f0 <draw_state+0x34c>
                    case CONSERVATIVE_TIMER_MAXED:
                        color = C_RED;
 800171a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800171e:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "PRE TM OUT");
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	4a57      	ldr	r2, [pc, #348]	; (8001884 <draw_state+0x2e0>)
 8001726:	ca07      	ldmia	r2, {r0, r1, r2}
 8001728:	c303      	stmia	r3!, {r0, r1}
 800172a:	801a      	strh	r2, [r3, #0]
 800172c:	3302      	adds	r3, #2
 800172e:	0c12      	lsrs	r2, r2, #16
 8001730:	701a      	strb	r2, [r3, #0]
                        break;
 8001732:	e0dd      	b.n	80018f0 <draw_state+0x34c>
                    case BRAKE_NOT_PRESSED:
                        color = C_RED;
 8001734:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001738:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BR NOT PRS");
 800173a:	f107 030c 	add.w	r3, r7, #12
 800173e:	4a52      	ldr	r2, [pc, #328]	; (8001888 <draw_state+0x2e4>)
 8001740:	ca07      	ldmia	r2, {r0, r1, r2}
 8001742:	c303      	stmia	r3!, {r0, r1}
 8001744:	801a      	strh	r2, [r3, #0]
 8001746:	3302      	adds	r3, #2
 8001748:	0c12      	lsrs	r2, r2, #16
 800174a:	701a      	strb	r2, [r3, #0]
                        break;
 800174c:	e0d0      	b.n	80018f0 <draw_state+0x34c>
                    case HV_DISABLED_WHILE_DRIVING:
                        color = C_RED;
 800174e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001752:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HV OFF DRV");
 8001754:	f107 030c 	add.w	r3, r7, #12
 8001758:	4a4c      	ldr	r2, [pc, #304]	; (800188c <draw_state+0x2e8>)
 800175a:	ca07      	ldmia	r2, {r0, r1, r2}
 800175c:	c303      	stmia	r3!, {r0, r1}
 800175e:	801a      	strh	r2, [r3, #0]
 8001760:	3302      	adds	r3, #2
 8001762:	0c12      	lsrs	r2, r2, #16
 8001764:	701a      	strb	r2, [r3, #0]
                        break;
 8001766:	e0c3      	b.n	80018f0 <draw_state+0x34c>
                    case SENSOR_DISCREPANCY:
                        color = C_RED;
 8001768:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800176c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SNSR DSCRP");
 800176e:	f107 030c 	add.w	r3, r7, #12
 8001772:	4a47      	ldr	r2, [pc, #284]	; (8001890 <draw_state+0x2ec>)
 8001774:	ca07      	ldmia	r2, {r0, r1, r2}
 8001776:	c303      	stmia	r3!, {r0, r1}
 8001778:	801a      	strh	r2, [r3, #0]
 800177a:	3302      	adds	r3, #2
 800177c:	0c12      	lsrs	r2, r2, #16
 800177e:	701a      	strb	r2, [r3, #0]
                        break;
 8001780:	e0b6      	b.n	80018f0 <draw_state+0x34c>
                    case BRAKE_IMPLAUSIBLE:
                        color = C_YELLOW;
 8001782:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001786:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BSPD TRIPD");
 8001788:	f107 030c 	add.w	r3, r7, #12
 800178c:	4a41      	ldr	r2, [pc, #260]	; (8001894 <draw_state+0x2f0>)
 800178e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001790:	c303      	stmia	r3!, {r0, r1}
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	3302      	adds	r3, #2
 8001796:	0c12      	lsrs	r2, r2, #16
 8001798:	701a      	strb	r2, [r3, #0]
                        break;
 800179a:	e0a9      	b.n	80018f0 <draw_state+0x34c>
                    case SHUTDOWN_CIRCUIT_OPEN:
                        color = C_RED;
 800179c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017a0:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SHTDWN OPN");
 80017a2:	f107 030c 	add.w	r3, r7, #12
 80017a6:	4a3c      	ldr	r2, [pc, #240]	; (8001898 <draw_state+0x2f4>)
 80017a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017aa:	c303      	stmia	r3!, {r0, r1}
 80017ac:	801a      	strh	r2, [r3, #0]
 80017ae:	3302      	adds	r3, #2
 80017b0:	0c12      	lsrs	r2, r2, #16
 80017b2:	701a      	strb	r2, [r3, #0]
                        break;
 80017b4:	e09c      	b.n	80018f0 <draw_state+0x34c>
                    case UNCALIBRATED:
                        color = C_RED;
 80017b6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017ba:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "UNCALIBRTD");
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	4a36      	ldr	r2, [pc, #216]	; (800189c <draw_state+0x2f8>)
 80017c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017c4:	c303      	stmia	r3!, {r0, r1}
 80017c6:	801a      	strh	r2, [r3, #0]
 80017c8:	3302      	adds	r3, #2
 80017ca:	0c12      	lsrs	r2, r2, #16
 80017cc:	701a      	strb	r2, [r3, #0]
                        break;
 80017ce:	e08f      	b.n	80018f0 <draw_state+0x34c>
                    case HARD_BSPD:
                        color = C_RED;
 80017d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017d4:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HARD BSPD");
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <draw_state+0x2fc>)
 80017dc:	ca07      	ldmia	r2, {r0, r1, r2}
 80017de:	c303      	stmia	r3!, {r0, r1}
 80017e0:	801a      	strh	r2, [r3, #0]
                        break;
 80017e2:	e085      	b.n	80018f0 <draw_state+0x34c>
                    case MC_FAULT:
                        color = C_RED;
 80017e4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80017e8:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " MC FAULT ");
 80017ea:	f107 030c 	add.w	r3, r7, #12
 80017ee:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <draw_state+0x300>)
 80017f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80017f2:	c303      	stmia	r3!, {r0, r1}
 80017f4:	801a      	strh	r2, [r3, #0]
 80017f6:	3302      	adds	r3, #2
 80017f8:	0c12      	lsrs	r2, r2, #16
 80017fa:	701a      	strb	r2, [r3, #0]
                        break;
 80017fc:	e078      	b.n	80018f0 <draw_state+0x34c>
                    default:
                        color = C_RED;
 80017fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001802:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " YO WTF? ");
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4a27      	ldr	r2, [pc, #156]	; (80018a8 <draw_state+0x304>)
 800180a:	ca07      	ldmia	r2, {r0, r1, r2}
 800180c:	c303      	stmia	r3!, {r0, r1}
 800180e:	801a      	strh	r2, [r3, #0]
                        break;
 8001810:	e06e      	b.n	80018f0 <draw_state+0x34c>
                }
            }
            else
            {
                // *************** NO FAULTS ***************
                color = C_GREEN;
 8001812:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001816:	83fb      	strh	r3, [r7, #30]
                switch(state)
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b03      	cmp	r3, #3
 800181c:	d85e      	bhi.n	80018dc <draw_state+0x338>
 800181e:	a201      	add	r2, pc, #4	; (adr r2, 8001824 <draw_state+0x280>)
 8001820:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001824:	08001835 	.word	0x08001835
 8001828:	08001849 	.word	0x08001849
 800182c:	080018b5 	.word	0x080018b5
 8001830:	080018c9 	.word	0x080018c9
                {
                    case LV:
                        strcpy(string, "    LV    ");
 8001834:	f107 030c 	add.w	r3, r7, #12
 8001838:	4a1c      	ldr	r2, [pc, #112]	; (80018ac <draw_state+0x308>)
 800183a:	ca07      	ldmia	r2, {r0, r1, r2}
 800183c:	c303      	stmia	r3!, {r0, r1}
 800183e:	801a      	strh	r2, [r3, #0]
 8001840:	3302      	adds	r3, #2
 8001842:	0c12      	lsrs	r2, r2, #16
 8001844:	701a      	strb	r2, [r3, #0]
                        break;
 8001846:	e053      	b.n	80018f0 <draw_state+0x34c>
                    case PRECHARGING:
                        strcpy(string, "PRECHARGE ");
 8001848:	f107 030c 	add.w	r3, r7, #12
 800184c:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <draw_state+0x30c>)
 800184e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001850:	c303      	stmia	r3!, {r0, r1}
 8001852:	801a      	strh	r2, [r3, #0]
 8001854:	3302      	adds	r3, #2
 8001856:	0c12      	lsrs	r2, r2, #16
 8001858:	701a      	strb	r2, [r3, #0]
                        break;
 800185a:	e049      	b.n	80018f0 <draw_state+0x34c>
 800185c:	2000008c 	.word	0x2000008c
 8001860:	20000230 	.word	0x20000230
 8001864:	0800f340 	.word	0x0800f340
 8001868:	0800f34c 	.word	0x0800f34c
 800186c:	0800f358 	.word	0x0800f358
 8001870:	0800f364 	.word	0x0800f364
 8001874:	0800f370 	.word	0x0800f370
 8001878:	0800f37c 	.word	0x0800f37c
 800187c:	0800f388 	.word	0x0800f388
 8001880:	0800f394 	.word	0x0800f394
 8001884:	0800f3a0 	.word	0x0800f3a0
 8001888:	0800f3ac 	.word	0x0800f3ac
 800188c:	0800f3b8 	.word	0x0800f3b8
 8001890:	0800f3c4 	.word	0x0800f3c4
 8001894:	0800f3d0 	.word	0x0800f3d0
 8001898:	0800f3dc 	.word	0x0800f3dc
 800189c:	0800f3e8 	.word	0x0800f3e8
 80018a0:	0800f3f4 	.word	0x0800f3f4
 80018a4:	0800f400 	.word	0x0800f400
 80018a8:	0800f40c 	.word	0x0800f40c
 80018ac:	0800f418 	.word	0x0800f418
 80018b0:	0800f424 	.word	0x0800f424
                    case HV_ENABLED:
                        strcpy(string, "HV ENABLED");
 80018b4:	f107 030c 	add.w	r3, r7, #12
 80018b8:	4a13      	ldr	r2, [pc, #76]	; (8001908 <draw_state+0x364>)
 80018ba:	ca07      	ldmia	r2, {r0, r1, r2}
 80018bc:	c303      	stmia	r3!, {r0, r1}
 80018be:	801a      	strh	r2, [r3, #0]
 80018c0:	3302      	adds	r3, #2
 80018c2:	0c12      	lsrs	r2, r2, #16
 80018c4:	701a      	strb	r2, [r3, #0]
                        break;
 80018c6:	e013      	b.n	80018f0 <draw_state+0x34c>
                    case DRIVE:
                        strcpy(string, "  DRIVE   ");
 80018c8:	f107 030c 	add.w	r3, r7, #12
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <draw_state+0x368>)
 80018ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d0:	c303      	stmia	r3!, {r0, r1}
 80018d2:	801a      	strh	r2, [r3, #0]
 80018d4:	3302      	adds	r3, #2
 80018d6:	0c12      	lsrs	r2, r2, #16
 80018d8:	701a      	strb	r2, [r3, #0]
                        break;
 80018da:	e009      	b.n	80018f0 <draw_state+0x34c>
                    default:
						color = C_RED;
 80018dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80018e0:	83fb      	strh	r3, [r7, #30]
						strcpy(string, " YO WTF? ");
 80018e2:	f107 030c 	add.w	r3, r7, #12
 80018e6:	4a0a      	ldr	r2, [pc, #40]	; (8001910 <draw_state+0x36c>)
 80018e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ea:	c303      	stmia	r3!, {r0, r1}
 80018ec:	801a      	strh	r2, [r3, #0]
						break;
 80018ee:	bf00      	nop
                }
            }
    }

    draw_textbox(&state_box, color, string, 11);
 80018f0:	f107 020c 	add.w	r2, r7, #12
 80018f4:	8bf9      	ldrh	r1, [r7, #30]
 80018f6:	230b      	movs	r3, #11
 80018f8:	4806      	ldr	r0, [pc, #24]	; (8001914 <draw_state+0x370>)
 80018fa:	f000 f8c7 	bl	8001a8c <draw_textbox>
 80018fe:	e000      	b.n	8001902 <draw_state+0x35e>
        return;
 8001900:	bf00      	nop
}
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	0800f430 	.word	0x0800f430
 800190c:	0800f43c 	.word	0x0800f43c
 8001910:	0800f40c 	.word	0x0800f40c
 8001914:	2000017c 	.word	0x2000017c

08001918 <draw_glv_v>:


void draw_glv_v(uint32_t data) {
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
    // translate from voltage divider measurement to true voltage
    // y = 0.4295x + 18.254
    data *= 859;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f240 325b 	movw	r2, #859	; 0x35b
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	607b      	str	r3, [r7, #4]
    data /= 2000; // 0.4295
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a17      	ldr	r2, [pc, #92]	; (800198c <draw_glv_v+0x74>)
 8001930:	fba2 2303 	umull	r2, r3, r2, r3
 8001934:	09db      	lsrs	r3, r3, #7
 8001936:	607b      	str	r3, [r7, #4]
    data += 18;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	3312      	adds	r3, #18
 800193c:	607b      	str	r3, [r7, #4]
    UG_COLOR color;
    if (data > 1150) {
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f240 427e 	movw	r2, #1150	; 0x47e
 8001944:	4293      	cmp	r3, r2
 8001946:	d903      	bls.n	8001950 <draw_glv_v+0x38>
        color = C_GREEN;
 8001948:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800194c:	81fb      	strh	r3, [r7, #14]
 800194e:	e00b      	b.n	8001968 <draw_glv_v+0x50>
    } else if (data > 1100) {
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f240 424c 	movw	r2, #1100	; 0x44c
 8001956:	4293      	cmp	r3, r2
 8001958:	d903      	bls.n	8001962 <draw_glv_v+0x4a>
        color = C_YELLOW;
 800195a:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800195e:	81fb      	strh	r3, [r7, #14]
 8001960:	e002      	b.n	8001968 <draw_glv_v+0x50>
    } else {
    	color = C_RED;
 8001962:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001966:	81fb      	strh	r3, [r7, #14]
    }

    char str[6];
    sprintf(str, "%ld", data);
 8001968:	f107 0308 	add.w	r3, r7, #8
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4908      	ldr	r1, [pc, #32]	; (8001990 <draw_glv_v+0x78>)
 8001970:	4618      	mov	r0, r3
 8001972:	f00c fff3 	bl	800e95c <siprintf>
    draw_textbox(&glv_v_box, color, str, 11);
 8001976:	f107 0208 	add.w	r2, r7, #8
 800197a:	89f9      	ldrh	r1, [r7, #14]
 800197c:	230b      	movs	r3, #11
 800197e:	4805      	ldr	r0, [pc, #20]	; (8001994 <draw_glv_v+0x7c>)
 8001980:	f000 f884 	bl	8001a8c <draw_textbox>
}
 8001984:	bf00      	nop
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}
 800198c:	10624dd3 	.word	0x10624dd3
 8001990:	0800f448 	.word	0x0800f448
 8001994:	2000005c 	.word	0x2000005c

08001998 <value_to_color>:



UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value)
{
 8001998:	b084      	sub	sp, #16
 800199a:	b490      	push	{r4, r7}
 800199c:	af00      	add	r7, sp, #0
 800199e:	f107 0408 	add.w	r4, r7, #8
 80019a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(cfg.grn_ylw_cutoff > cfg.ylw_org_cutoff)   // green for large red for small
 80019a6:	8a3a      	ldrh	r2, [r7, #16]
 80019a8:	8a7b      	ldrh	r3, [r7, #18]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d917      	bls.n	80019de <value_to_color+0x46>
    {
        if(value > cfg.grn_ylw_cutoff)
 80019ae:	8a3b      	ldrh	r3, [r7, #16]
 80019b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019b2:	429a      	cmp	r2, r3
 80019b4:	d902      	bls.n	80019bc <value_to_color+0x24>
        {
            return C_GREEN;
 80019b6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80019ba:	e027      	b.n	8001a0c <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 80019bc:	8a7b      	ldrh	r3, [r7, #18]
 80019be:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d902      	bls.n	80019ca <value_to_color+0x32>
        {
            return C_YELLOW;
 80019c4:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80019c8:	e020      	b.n	8001a0c <value_to_color+0x74>
        }
        else if(value > cfg.org_red_cutoff)
 80019ca:	8abb      	ldrh	r3, [r7, #20]
 80019cc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019ce:	429a      	cmp	r2, r3
 80019d0:	d902      	bls.n	80019d8 <value_to_color+0x40>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 80019d2:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 80019d6:	e019      	b.n	8001a0c <value_to_color+0x74>
        }
        else
        {
            return C_RED;
 80019d8:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019dc:	e016      	b.n	8001a0c <value_to_color+0x74>
        }
    }
    else  // red for large green for small
    {
        if(value > cfg.org_red_cutoff)
 80019de:	8abb      	ldrh	r3, [r7, #20]
 80019e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d902      	bls.n	80019ec <value_to_color+0x54>
        {
            return C_RED;
 80019e6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80019ea:	e00f      	b.n	8001a0c <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 80019ec:	8a7b      	ldrh	r3, [r7, #18]
 80019ee:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d902      	bls.n	80019fa <value_to_color+0x62>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 80019f4:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 80019f8:	e008      	b.n	8001a0c <value_to_color+0x74>
        }
        else if(value > cfg.grn_ylw_cutoff)
 80019fa:	8a3b      	ldrh	r3, [r7, #16]
 80019fc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019fe:	429a      	cmp	r2, r3
 8001a00:	d902      	bls.n	8001a08 <value_to_color+0x70>
        {
            return C_YELLOW;
 8001a02:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8001a06:	e001      	b.n	8001a0c <value_to_color+0x74>
        }
        else
        {
            return C_GREEN;
 8001a08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
        }
    }
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc90      	pop	{r4, r7}
 8001a12:	b004      	add	sp, #16
 8001a14:	4770      	bx	lr
	...

08001a18 <draw_value_textbox>:

void draw_value_textbox(TEXTBOX_CONFIG* cfg, uint16_t value)
{
 8001a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1a:	b08f      	sub	sp, #60	; 0x3c
 8001a1c:	af08      	add	r7, sp, #32
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	460b      	mov	r3, r1
 8001a22:	807b      	strh	r3, [r7, #2]
	if(value == cfg->last_value)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a28:	887a      	ldrh	r2, [r7, #2]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d028      	beq.n	8001a80 <draw_value_textbox+0x68>
	{
		return;
	}

	cfg->last_value = value;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	887a      	ldrh	r2, [r7, #2]
 8001a32:	84da      	strh	r2, [r3, #38]	; 0x26

	UG_COLOR color = value_to_color(*cfg, value);
 8001a34:	687e      	ldr	r6, [r7, #4]
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	9307      	str	r3, [sp, #28]
 8001a3a:	466d      	mov	r5, sp
 8001a3c:	f106 0410 	add.w	r4, r6, #16
 8001a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a44:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001a48:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8001a4c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001a50:	f7ff ffa2 	bl	8001998 <value_to_color>
 8001a54:	4603      	mov	r3, r0
 8001a56:	82fb      	strh	r3, [r7, #22]
	char string[10];
	uint16_t str_len = sprintf(string, "%d%c", value, cfg->units);
 8001a58:	887a      	ldrh	r2, [r7, #2]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001a60:	f107 0008 	add.w	r0, r7, #8
 8001a64:	4908      	ldr	r1, [pc, #32]	; (8001a88 <draw_value_textbox+0x70>)
 8001a66:	f00c ff79 	bl	800e95c <siprintf>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	82bb      	strh	r3, [r7, #20]

	draw_textbox(cfg, color, string, str_len);
 8001a6e:	8abb      	ldrh	r3, [r7, #20]
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	f107 0208 	add.w	r2, r7, #8
 8001a76:	8af9      	ldrh	r1, [r7, #22]
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 f807 	bl	8001a8c <draw_textbox>
 8001a7e:	e000      	b.n	8001a82 <draw_value_textbox+0x6a>
		return;
 8001a80:	bf00      	nop
}
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a88:	0800f44c 	.word	0x0800f44c

08001a8c <draw_textbox>:

void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len)
{
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b089      	sub	sp, #36	; 0x24
 8001a90:	af02      	add	r7, sp, #8
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	461a      	mov	r2, r3
 8001a98:	460b      	mov	r3, r1
 8001a9a:	817b      	strh	r3, [r7, #10]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	727b      	strb	r3, [r7, #9]
    // determine x and y coordinates to center text
    uint16_t text_x = (cfg->box_x2 + cfg->box_x1)/2 - ((str_len * cfg->font.char_width)/2);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	889b      	ldrh	r3, [r3, #4]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	4413      	add	r3, r2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	da00      	bge.n	8001ab2 <draw_textbox+0x26>
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	105b      	asrs	r3, r3, #1
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	7a7b      	ldrb	r3, [r7, #9]
 8001ab8:	68f9      	ldr	r1, [r7, #12]
 8001aba:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8001abe:	fb01 f303 	mul.w	r3, r1, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da00      	bge.n	8001ac8 <draw_textbox+0x3c>
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	105b      	asrs	r3, r3, #1
 8001aca:	425b      	negs	r3, r3
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	4413      	add	r3, r2
 8001ad0:	82fb      	strh	r3, [r7, #22]
    uint16_t text_y = (cfg->box_y2 + cfg->box_y1)/2 - (cfg->font.char_height/2);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	88db      	ldrh	r3, [r3, #6]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	885b      	ldrh	r3, [r3, #2]
 8001adc:	4413      	add	r3, r2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	da00      	bge.n	8001ae4 <draw_textbox+0x58>
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	105b      	asrs	r3, r3, #1
 8001ae6:	b29a      	uxth	r2, r3
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da00      	bge.n	8001af4 <draw_textbox+0x68>
 8001af2:	3301      	adds	r3, #1
 8001af4:	105b      	asrs	r3, r3, #1
 8001af6:	b21b      	sxth	r3, r3
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	82bb      	strh	r3, [r7, #20]

    if(color != cfg->last_color)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001b02:	897a      	ldrh	r2, [r7, #10]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d013      	beq.n	8001b30 <draw_textbox+0xa4>
    {
        UG_FillFrame(cfg->box_x1, cfg->box_y1, cfg->box_x2, cfg->box_y2, color);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	881b      	ldrh	r3, [r3, #0]
 8001b0c:	b218      	sxth	r0, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	885b      	ldrh	r3, [r3, #2]
 8001b12:	b219      	sxth	r1, r3
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	889b      	ldrh	r3, [r3, #4]
 8001b18:	b21a      	sxth	r2, r3
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	88db      	ldrh	r3, [r3, #6]
 8001b1e:	b21c      	sxth	r4, r3
 8001b20:	897b      	ldrh	r3, [r7, #10]
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	4623      	mov	r3, r4
 8001b26:	f002 fab9 	bl	800409c <UG_FillFrame>
        cfg->last_color = color;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	897a      	ldrh	r2, [r7, #10]
 8001b2e:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    UG_FontSelect(&cfg->font);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	3310      	adds	r3, #16
 8001b34:	4618      	mov	r0, r3
 8001b36:	f002 fa79 	bl	800402c <UG_FontSelect>
    UG_PutColorString(text_x, text_y, string, C_BLACK, color);
 8001b3a:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8001b3e:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8001b42:	897b      	ldrh	r3, [r7, #10]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	f002 fb9d 	bl	8004288 <UG_PutColorString>
}
 8001b4e:	bf00      	nop
 8001b50:	371c      	adds	r7, #28
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd90      	pop	{r4, r7, pc}
	...

08001b58 <change_state>:
volatile state_t state = STARTUP;
volatile error_t error = NONE;

/************ States ************/

void change_state(const state_t new_state) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	4603      	mov	r3, r0
 8001b60:	71fb      	strb	r3, [r7, #7]
    // Handle edge cases
    if (state == FAULT && new_state != FAULT) {
 8001b62:	4b0a      	ldr	r3, [pc, #40]	; (8001b8c <change_state+0x34>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d105      	bne.n	8001b78 <change_state+0x20>
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	2b04      	cmp	r3, #4
 8001b70:	d002      	beq.n	8001b78 <change_state+0x20>
        // Reset the error cause when exiting fault state
        error = NONE;
 8001b72:	4b07      	ldr	r3, [pc, #28]	; (8001b90 <change_state+0x38>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	701a      	strb	r2, [r3, #0]
    }

    state = new_state;
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <change_state+0x34>)
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	7013      	strb	r3, [r2, #0]
}
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	2000008d 	.word	0x2000008d
 8001b90:	20000232 	.word	0x20000232

08001b94 <report_fault>:

void report_fault(error_t _error) {
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b082      	sub	sp, #8
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	71fb      	strb	r3, [r7, #7]
    change_state(FAULT);
 8001b9e:	2004      	movs	r0, #4
 8001ba0:	f7ff ffda 	bl	8001b58 <change_state>
    // Cause of error
    error = _error;
 8001ba4:	4a03      	ldr	r2, [pc, #12]	; (8001bb4 <report_fault+0x20>)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	7013      	strb	r3, [r2, #0]
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000232 	.word	0x20000232

08001bb8 <hv_requested>:

uint8_t hv_requested(){
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
    return (state == PRECHARGING)
 8001bbc:	4b13      	ldr	r3, [pc, #76]	; (8001c0c <hv_requested+0x54>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	b2db      	uxtb	r3, r3
        || (state == HV_ENABLED)
        || (state == DRIVE)
        || (error == BRAKE_NOT_PRESSED)
        || (error == SENSOR_DISCREPANCY)
        || (error == BRAKE_IMPLAUSIBLE);
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d018      	beq.n	8001bf8 <hv_requested+0x40>
        || (state == HV_ENABLED)
 8001bc6:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <hv_requested+0x54>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d013      	beq.n	8001bf8 <hv_requested+0x40>
        || (state == DRIVE)
 8001bd0:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <hv_requested+0x54>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b03      	cmp	r3, #3
 8001bd8:	d00e      	beq.n	8001bf8 <hv_requested+0x40>
        || (error == BRAKE_NOT_PRESSED)
 8001bda:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <hv_requested+0x58>)
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b03      	cmp	r3, #3
 8001be2:	d009      	beq.n	8001bf8 <hv_requested+0x40>
        || (error == SENSOR_DISCREPANCY)
 8001be4:	4b0a      	ldr	r3, [pc, #40]	; (8001c10 <hv_requested+0x58>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b05      	cmp	r3, #5
 8001bec:	d004      	beq.n	8001bf8 <hv_requested+0x40>
        || (error == BRAKE_IMPLAUSIBLE);
 8001bee:	4b08      	ldr	r3, [pc, #32]	; (8001c10 <hv_requested+0x58>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b06      	cmp	r3, #6
 8001bf6:	d101      	bne.n	8001bfc <hv_requested+0x44>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <hv_requested+0x46>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	b2db      	uxtb	r3, r3
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
 8001c0a:	bf00      	nop
 8001c0c:	2000008d 	.word	0x2000008d
 8001c10:	20000232 	.word	0x20000232

08001c14 <one_byte_state>:

uint8_t one_byte_state(){
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
    uint8_t state_byte = state;
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <one_byte_state+0x30>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	71fb      	strb	r3, [r7, #7]
    if (state == FAULT) {
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <one_byte_state+0x30>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b04      	cmp	r3, #4
 8001c28:	d104      	bne.n	8001c34 <one_byte_state+0x20>
        state_byte = 0b10000000 + error; // greatest bit = 1 if fault
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <one_byte_state+0x34>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	3b80      	subs	r3, #128	; 0x80
 8001c32:	71fb      	strb	r3, [r7, #7]
    }

    return state_byte;
 8001c34:	79fb      	ldrb	r3, [r7, #7]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	2000008d 	.word	0x2000008d
 8001c48:	20000232 	.word	0x20000232

08001c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	db0b      	blt.n	8001c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	f003 021f 	and.w	r2, r3, #31
 8001c64:	4907      	ldr	r1, [pc, #28]	; (8001c84 <__NVIC_EnableIRQ+0x38>)
 8001c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6a:	095b      	lsrs	r3, r3, #5
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	e000e100 	.word	0xe000e100

08001c88 <bufclear>:
extern uint8_t RxData[8];

char filename[20] = "error.txt";


void bufclear(void){
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
	for(int i = 0; i<8192; i++){
 8001c8e:	2300      	movs	r3, #0
 8001c90:	607b      	str	r3, [r7, #4]
 8001c92:	e007      	b.n	8001ca4 <bufclear+0x1c>
		buffer[i] = '\0';
 8001c94:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <bufclear+0x34>)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4413      	add	r3, r2
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<8192; i++){
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3301      	adds	r3, #1
 8001ca2:	607b      	str	r3, [r7, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001caa:	dbf3      	blt.n	8001c94 <bufclear+0xc>
	}
}
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000234 	.word	0x20000234

08001cc0 <mount_sd_card>:

void mount_sd_card(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	f5ad 5d81 	sub.w	sp, sp, #4128	; 0x1020
 8001cc6:	b086      	sub	sp, #24
 8001cc8:	af00      	add	r7, sp, #0
  	 res = f_mount(&SDFatFS, (TCHAR const*)SDPath, 0);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	4934      	ldr	r1, [pc, #208]	; (8001da0 <mount_sd_card+0xe0>)
 8001cce:	4835      	ldr	r0, [pc, #212]	; (8001da4 <mount_sd_card+0xe4>)
 8001cd0:	f00c f8d4 	bl	800de7c <f_mount>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <mount_sd_card+0xe8>)
 8001cda:	701a      	strb	r2, [r3, #0]
	           //Open file for writing (Create)

  	 // name the file, increment until filename that hasnt been taken
  	 int num = 65;
 8001cdc:	2341      	movs	r3, #65	; 0x41
 8001cde:	f241 0234 	movw	r2, #4148	; 0x1034
 8001ce2:	443a      	add	r2, r7
 8001ce4:	6013      	str	r3, [r2, #0]
  	 while (1) {
  		  FIL F1;
  		  sprintf(filename, "run_%c.txt", (char)num);
 8001ce6:	f241 0334 	movw	r3, #4148	; 0x1034
 8001cea:	443b      	add	r3, r7
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	492e      	ldr	r1, [pc, #184]	; (8001dac <mount_sd_card+0xec>)
 8001cf4:	482e      	ldr	r0, [pc, #184]	; (8001db0 <mount_sd_card+0xf0>)
 8001cf6:	f00c fe31 	bl	800e95c <siprintf>

 		  // if found filename thats not taken
  		  FRESULT f_open_status = f_open(&F1, filename, FA_READ);
 8001cfa:	4b2e      	ldr	r3, [pc, #184]	; (8001db4 <mount_sd_card+0xf4>)
 8001cfc:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001d00:	f103 0318 	add.w	r3, r3, #24
 8001d04:	443b      	add	r3, r7
 8001d06:	2201      	movs	r2, #1
 8001d08:	4929      	ldr	r1, [pc, #164]	; (8001db0 <mount_sd_card+0xf0>)
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f00c f8fc 	bl	800df08 <f_open>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f241 0233 	movw	r2, #4147	; 0x1033
 8001d16:	443a      	add	r2, r7
 8001d18:	7013      	strb	r3, [r2, #0]
  		  if (f_open_status != FR_OK) {
 8001d1a:	f241 0333 	movw	r3, #4147	; 0x1033
 8001d1e:	443b      	add	r3, r7
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d009      	beq.n	8001d3a <mount_sd_card+0x7a>
  			  f_close(&F1);
 8001d26:	4b23      	ldr	r3, [pc, #140]	; (8001db4 <mount_sd_card+0xf4>)
 8001d28:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001d2c:	f103 0318 	add.w	r3, r3, #24
 8001d30:	443b      	add	r3, r7
 8001d32:	4618      	mov	r0, r3
 8001d34:	f00c fcc6 	bl	800e6c4 <f_close>
  			  break;
 8001d38:	e01a      	b.n	8001d70 <mount_sd_card+0xb0>
  		  }

  		  // if current file more than 9000000 bytes, move onto next file
  		  // else, use current file
  		  if (f_size(&F1) >= 9000000) {
 8001d3a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d3e:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8001d42:	4a1d      	ldr	r2, [pc, #116]	; (8001db8 <mount_sd_card+0xf8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d912      	bls.n	8001d6e <mount_sd_card+0xae>
  			  num++;
 8001d48:	f241 0334 	movw	r3, #4148	; 0x1034
 8001d4c:	443b      	add	r3, r7
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	3301      	adds	r3, #1
 8001d52:	f241 0234 	movw	r2, #4148	; 0x1034
 8001d56:	443a      	add	r2, r7
 8001d58:	6013      	str	r3, [r2, #0]
  		  }
  		  else {
  			  break;
  		  }

  		  f_close(&F1);
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <mount_sd_card+0xf4>)
 8001d5c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001d60:	f103 0318 	add.w	r3, r3, #24
 8001d64:	443b      	add	r3, r7
 8001d66:	4618      	mov	r0, r3
 8001d68:	f00c fcac 	bl	800e6c4 <f_close>
  	 while (1) {
 8001d6c:	e7bb      	b.n	8001ce6 <mount_sd_card+0x26>
  			  break;
 8001d6e:	bf00      	nop


  	 }

	 res = f_open(&SDFile, filename,  FA_OPEN_APPEND | FA_OPEN_ALWAYS | FA_WRITE);
 8001d70:	2232      	movs	r2, #50	; 0x32
 8001d72:	490f      	ldr	r1, [pc, #60]	; (8001db0 <mount_sd_card+0xf0>)
 8001d74:	4811      	ldr	r0, [pc, #68]	; (8001dbc <mount_sd_card+0xfc>)
 8001d76:	f00c f8c7 	bl	800df08 <f_open>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	4b0a      	ldr	r3, [pc, #40]	; (8001da8 <mount_sd_card+0xe8>)
 8001d80:	701a      	strb	r2, [r3, #0]
	 res = f_close(&SDFile);
 8001d82:	480e      	ldr	r0, [pc, #56]	; (8001dbc <mount_sd_card+0xfc>)
 8001d84:	f00c fc9e 	bl	800e6c4 <f_close>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <mount_sd_card+0xe8>)
 8001d8e:	701a      	strb	r2, [r3, #0]
	 bufclear();
 8001d90:	f7ff ff7a 	bl	8001c88 <bufclear>
}
 8001d94:	bf00      	nop
 8001d96:	f507 5781 	add.w	r7, r7, #4128	; 0x1020
 8001d9a:	3718      	adds	r7, #24
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	2000283c 	.word	0x2000283c
 8001da4:	20002840 	.word	0x20002840
 8001da8:	20002234 	.word	0x20002234
 8001dac:	0800f454 	.word	0x0800f454
 8001db0:	20000090 	.word	0x20000090
 8001db4:	ffffefc8 	.word	0xffffefc8
 8001db8:	0089543f 	.word	0x0089543f
 8001dbc:	20003878 	.word	0x20003878

08001dc0 <write_rx_to_sd>:

void write_rx_to_sd(void){
 8001dc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001dc2:	b08d      	sub	sp, #52	; 0x34
 8001dc4:	af08      	add	r7, sp, #32
  int TimeRightAfter_Get_From_Slave = HAL_GetTick();
 8001dc6:	f003 f92d 	bl	8005024 <HAL_GetTick>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	60fb      	str	r3, [r7, #12]

  res = f_open(&SDFile, filename,  FA_OPEN_APPEND | FA_WRITE);
 8001dce:	2232      	movs	r2, #50	; 0x32
 8001dd0:	4921      	ldr	r1, [pc, #132]	; (8001e58 <write_rx_to_sd+0x98>)
 8001dd2:	4822      	ldr	r0, [pc, #136]	; (8001e5c <write_rx_to_sd+0x9c>)
 8001dd4:	f00c f898 	bl	800df08 <f_open>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <write_rx_to_sd+0xa0>)
 8001dde:	701a      	strb	r2, [r3, #0]
  sprintf(buffer,"%lX, %d, %d, %d, %d, %d, %d, %d, %d, %d \n ", RxHeader.StdId, RxData[0], RxData[1], RxData[2], RxData[3], RxData[4], RxData[5], RxData[6], RxData[7], TimeRightAfter_Get_From_Slave );
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <write_rx_to_sd+0xa4>)
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	4b20      	ldr	r3, [pc, #128]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	469c      	mov	ip, r3
 8001dea:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	4619      	mov	r1, r3
 8001df0:	4b1d      	ldr	r3, [pc, #116]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001df2:	789b      	ldrb	r3, [r3, #2]
 8001df4:	4618      	mov	r0, r3
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001df8:	78db      	ldrb	r3, [r3, #3]
 8001dfa:	461c      	mov	r4, r3
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	461d      	mov	r5, r3
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001e04:	795b      	ldrb	r3, [r3, #5]
 8001e06:	461e      	mov	r6, r3
 8001e08:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001e0a:	799b      	ldrb	r3, [r3, #6]
 8001e0c:	607b      	str	r3, [r7, #4]
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <write_rx_to_sd+0xa8>)
 8001e10:	79db      	ldrb	r3, [r3, #7]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	9307      	str	r3, [sp, #28]
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	9306      	str	r3, [sp, #24]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	9305      	str	r3, [sp, #20]
 8001e20:	9604      	str	r6, [sp, #16]
 8001e22:	9503      	str	r5, [sp, #12]
 8001e24:	9402      	str	r4, [sp, #8]
 8001e26:	9001      	str	r0, [sp, #4]
 8001e28:	9100      	str	r1, [sp, #0]
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	490f      	ldr	r1, [pc, #60]	; (8001e6c <write_rx_to_sd+0xac>)
 8001e2e:	4810      	ldr	r0, [pc, #64]	; (8001e70 <write_rx_to_sd+0xb0>)
 8001e30:	f00c fd94 	bl	800e95c <siprintf>
  f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8001e34:	480e      	ldr	r0, [pc, #56]	; (8001e70 <write_rx_to_sd+0xb0>)
 8001e36:	f7fe f9eb 	bl	8000210 <strlen>
 8001e3a:	4602      	mov	r2, r0
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <write_rx_to_sd+0xb4>)
 8001e3e:	490c      	ldr	r1, [pc, #48]	; (8001e70 <write_rx_to_sd+0xb0>)
 8001e40:	4806      	ldr	r0, [pc, #24]	; (8001e5c <write_rx_to_sd+0x9c>)
 8001e42:	f00c fa2d 	bl	800e2a0 <f_write>
  f_close(&SDFile);
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <write_rx_to_sd+0x9c>)
 8001e48:	f00c fc3c 	bl	800e6c4 <f_close>
  bufclear();
 8001e4c:	f7ff ff1c 	bl	8001c88 <bufclear>
}
 8001e50:	bf00      	nop
 8001e52:	3714      	adds	r7, #20
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e58:	20000090 	.word	0x20000090
 8001e5c:	20003878 	.word	0x20003878
 8001e60:	20002234 	.word	0x20002234
 8001e64:	2000013c 	.word	0x2000013c
 8001e68:	20000158 	.word	0x20000158
 8001e6c:	0800f460 	.word	0x0800f460
 8001e70:	20000234 	.word	0x20000234
 8001e74:	20002238 	.word	0x20002238

08001e78 <write_tx_to_sd>:

void write_tx_to_sd(CAN_TxHeaderTypeDef TxHeader, uint8_t TxData[]){
 8001e78:	b084      	sub	sp, #16
 8001e7a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e7c:	b08d      	sub	sp, #52	; 0x34
 8001e7e:	af08      	add	r7, sp, #32
 8001e80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001e84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  int TimeRightAfter_Get_From_Slave = HAL_GetTick();
 8001e88:	f003 f8cc 	bl	8005024 <HAL_GetTick>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	60fb      	str	r3, [r7, #12]

  res = f_open(&SDFile, filename,  FA_OPEN_APPEND | FA_WRITE);
 8001e90:	2232      	movs	r2, #50	; 0x32
 8001e92:	4924      	ldr	r1, [pc, #144]	; (8001f24 <write_tx_to_sd+0xac>)
 8001e94:	4824      	ldr	r0, [pc, #144]	; (8001f28 <write_tx_to_sd+0xb0>)
 8001e96:	f00c f837 	bl	800df08 <f_open>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <write_tx_to_sd+0xb4>)
 8001ea0:	701a      	strb	r2, [r3, #0]
  sprintf(buffer,"%lX, %d, %d, %d, %d, %d, %d, %d, %d, %d \n ", TxHeader.StdId, TxData[0], TxData[1], TxData[2], TxData[3], RxData[4], RxData[5], RxData[6], RxData[7], TimeRightAfter_Get_From_Slave );
 8001ea2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	469c      	mov	ip, r3
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	3301      	adds	r3, #1
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eb4:	3302      	adds	r3, #2
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebc:	3303      	adds	r3, #3
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461c      	mov	r4, r3
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <write_tx_to_sd+0xb8>)
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	461d      	mov	r5, r3
 8001ec8:	4b19      	ldr	r3, [pc, #100]	; (8001f30 <write_tx_to_sd+0xb8>)
 8001eca:	795b      	ldrb	r3, [r3, #5]
 8001ecc:	461e      	mov	r6, r3
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <write_tx_to_sd+0xb8>)
 8001ed0:	799b      	ldrb	r3, [r3, #6]
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <write_tx_to_sd+0xb8>)
 8001ed6:	79db      	ldrb	r3, [r3, #7]
 8001ed8:	603b      	str	r3, [r7, #0]
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	9307      	str	r3, [sp, #28]
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	9306      	str	r3, [sp, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	9305      	str	r3, [sp, #20]
 8001ee6:	9604      	str	r6, [sp, #16]
 8001ee8:	9503      	str	r5, [sp, #12]
 8001eea:	9402      	str	r4, [sp, #8]
 8001eec:	9001      	str	r0, [sp, #4]
 8001eee:	9100      	str	r1, [sp, #0]
 8001ef0:	4663      	mov	r3, ip
 8001ef2:	4910      	ldr	r1, [pc, #64]	; (8001f34 <write_tx_to_sd+0xbc>)
 8001ef4:	4810      	ldr	r0, [pc, #64]	; (8001f38 <write_tx_to_sd+0xc0>)
 8001ef6:	f00c fd31 	bl	800e95c <siprintf>
  f_write(&SDFile, buffer, strlen((char *)buffer), (void *)&byteswritten);
 8001efa:	480f      	ldr	r0, [pc, #60]	; (8001f38 <write_tx_to_sd+0xc0>)
 8001efc:	f7fe f988 	bl	8000210 <strlen>
 8001f00:	4602      	mov	r2, r0
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <write_tx_to_sd+0xc4>)
 8001f04:	490c      	ldr	r1, [pc, #48]	; (8001f38 <write_tx_to_sd+0xc0>)
 8001f06:	4808      	ldr	r0, [pc, #32]	; (8001f28 <write_tx_to_sd+0xb0>)
 8001f08:	f00c f9ca 	bl	800e2a0 <f_write>
  f_close(&SDFile);
 8001f0c:	4806      	ldr	r0, [pc, #24]	; (8001f28 <write_tx_to_sd+0xb0>)
 8001f0e:	f00c fbd9 	bl	800e6c4 <f_close>
  bufclear();
 8001f12:	f7ff feb9 	bl	8001c88 <bufclear>
}
 8001f16:	bf00      	nop
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001f20:	b004      	add	sp, #16
 8001f22:	4770      	bx	lr
 8001f24:	20000090 	.word	0x20000090
 8001f28:	20003878 	.word	0x20003878
 8001f2c:	20002234 	.word	0x20002234
 8001f30:	20000158 	.word	0x20000158
 8001f34:	0800f460 	.word	0x0800f460
 8001f38:	20000234 	.word	0x20000234
 8001f3c:	20002238 	.word	0x20002238

08001f40 <sd_card_close_file>:

void sd_card_close_file() {
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
//	f_close(&SDFile);
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <traction_control_enable>:
 *  - TC = switches & 0b100
 *  - Hv = switches & 0b10
 *  - Dr = switches & 0b1
 */

uint8_t traction_control_enable() {
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOG, BUTTON_1_Pin);
 8001f54:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <traction_control_enable+0x14>)
 8001f5a:	f005 f949 	bl	80071f0 <HAL_GPIO_ReadPin>
 8001f5e:	4603      	mov	r3, r0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40021800 	.word	0x40021800

08001f68 <hv_switch>:

uint8_t display_debug_enabled() {
	return HAL_GPIO_ReadPin(GPIOG, BUTTON_2_Pin);
}

uint8_t hv_switch() {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOG, HV_REQUEST_Pin);
 8001f6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f70:	4805      	ldr	r0, [pc, #20]	; (8001f88 <hv_switch+0x20>)
 8001f72:	f005 f93d 	bl	80071f0 <HAL_GPIO_ReadPin>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	bf0c      	ite	eq
 8001f7c:	2301      	moveq	r3, #1
 8001f7e:	2300      	movne	r3, #0
 8001f80:	b2db      	uxtb	r3, r3
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40021800 	.word	0x40021800

08001f8c <drive_switch>:

uint8_t drive_switch() {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
	return !HAL_GPIO_ReadPin(GPIOG, DRIVE_REQUEST_Pin);
 8001f90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001f94:	4805      	ldr	r0, [pc, #20]	; (8001fac <drive_switch+0x20>)
 8001f96:	f005 f92b 	bl	80071f0 <HAL_GPIO_ReadPin>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40021800 	.word	0x40021800

08001fb0 <shutdown_closed>:


uint8_t shutdown_closed() {
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
    if (estop_flags) return 0;
 8001fb4:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <shutdown_closed+0x30>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <shutdown_closed+0x12>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e009      	b.n	8001fd6 <shutdown_closed+0x26>
    return (shutdown_flags & 0b00111000) == 0b00111000;
 8001fc2:	4b08      	ldr	r3, [pc, #32]	; (8001fe4 <shutdown_closed+0x34>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fcc:	2b38      	cmp	r3, #56	; 0x38
 8001fce:	bf0c      	ite	eq
 8001fd0:	2301      	moveq	r3, #1
 8001fd2:	2300      	movne	r3, #0
 8001fd4:	b2db      	uxtb	r3, r3
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	20000128 	.word	0x20000128
 8001fe4:	20000000 	.word	0x20000000

08001fe8 <HAL_TIM_PeriodElapsedCallback>:

// TEST

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  // Check which version of the timer triggered this callback and toggle LED
  if (htim == &htim7)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4a0e      	ldr	r2, [pc, #56]	; (800202c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d115      	bne.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x3c>
  {
	  if (state == PRECHARGING) {
 8001ff8:	4b0d      	ldr	r3, [pc, #52]	; (8002030 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10d      	bne.n	800201e <HAL_TIM_PeriodElapsedCallback+0x36>
		  precharge_timer_ms += TMR1_PERIOD_MS;
 8002002:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	3314      	adds	r3, #20
 8002008:	4a0a      	ldr	r2, [pc, #40]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800200a:	6013      	str	r3, [r2, #0]
		  if (precharge_timer_ms > PRECHARGE_TIMEOUT_MS) {
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002014:	d906      	bls.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x3c>
			  report_fault(CONSERVATIVE_TIMER_MAXED);
 8002016:	2002      	movs	r0, #2
 8002018:	f7ff fdbc 	bl	8001b94 <report_fault>
  }
  if (htim == &htim4)
  {

  }
}
 800201c:	e002      	b.n	8002024 <HAL_TIM_PeriodElapsedCallback+0x3c>
		  precharge_timer_ms = 0;
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	200025b8 	.word	0x200025b8
 8002030:	2000008d 	.word	0x2000008d
 8002034:	200027e8 	.word	0x200027e8

08002038 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GASP_INTERRUPT_Pin) {
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002048:	d101      	bne.n	800204e <HAL_GPIO_EXTI_Callback+0x16>
		sd_card_close_file();
 800204a:	f7ff ff79 	bl	8001f40 <sd_card_close_file>
	}
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b09c      	sub	sp, #112	; 0x70
 800205c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800205e:	f002 ff90 	bl	8004f82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002062:	f000 f9c1 	bl	80023e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002066:	f000 fd9d 	bl	8002ba4 <MX_GPIO_Init>
  MX_DMA_Init();
 800206a:	f000 fd03 	bl	8002a74 <MX_DMA_Init>
  MX_CAN2_Init();
 800206e:	f000 fb33 	bl	80026d8 <MX_CAN2_Init>
  MX_SDMMC1_SD_Init();
 8002072:	f000 fb67 	bl	8002744 <MX_SDMMC1_SD_Init>
  MX_ADC1_Init();
 8002076:	f000 fa23 	bl	80024c0 <MX_ADC1_Init>
  MX_ADC3_Init();
 800207a:	f000 fa73 	bl	8002564 <MX_ADC3_Init>
  MX_TIM2_Init();
 800207e:	f000 fb81 	bl	8002784 <MX_TIM2_Init>
  MX_TIM4_Init();
 8002082:	f000 fbd5 	bl	8002830 <MX_TIM4_Init>
  MX_UART4_Init();
 8002086:	f000 fc65 	bl	8002954 <MX_UART4_Init>
  MX_UART7_Init();
 800208a:	f000 fc93 	bl	80029b4 <MX_UART7_Init>
  MX_FMC_Init();
 800208e:	f000 fd27 	bl	8002ae0 <MX_FMC_Init>
  MX_CAN1_Init();
 8002092:	f000 fab9 	bl	8002608 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8002096:	f000 fcbd 	bl	8002a14 <MX_USART3_UART_Init>
  MX_TIM7_Init();
 800209a:	f000 fc21 	bl	80028e0 <MX_TIM7_Init>
  MX_FATFS_Init();
 800209e:	f009 fabf 	bl	800b620 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

  init_sensors();
 80020a2:	f000 fe63 	bl	8002d6c <init_sensors>

  Display_Init();
 80020a6:	f7ff f93d 	bl	8001324 <Display_Init>
  UG_FontSelect(&FONT_12X16);
 80020aa:	48c0      	ldr	r0, [pc, #768]	; (80023ac <main+0x354>)
 80020ac:	f001 ffbe 	bl	800402c <UG_FontSelect>
  UG_SetBackcolor(C_BLACK);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f002 f9a3 	bl	80043fc <UG_SetBackcolor>
  UG_SetForecolor(C_YELLOW);
 80020b6:	f64f 70c0 	movw	r0, #65472	; 0xffc0
 80020ba:	f002 f98d 	bl	80043d8 <UG_SetForecolor>

  Display_CalibrateScreen();
 80020be:	f7ff f95b 	bl	8001378 <Display_CalibrateScreen>

  Display_DriveTemplate();
 80020c2:	f7ff f985 	bl	80013d0 <Display_DriveTemplate>

  if (HAL_TIM_Base_Start_IT(&htim7) != HAL_OK) {
 80020c6:	48ba      	ldr	r0, [pc, #744]	; (80023b0 <main+0x358>)
 80020c8:	f007 fbac 	bl	8009824 <HAL_TIM_Base_Start_IT>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <main+0x7e>
      Error_Handler();
 80020d2:	f000 fe3f 	bl	8002d54 <Error_Handler>
  }


  mount_sd_card();
 80020d6:	f7ff fdf3 	bl	8001cc0 <mount_sd_card>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Display_Update();
 80020da:	f7ff fa19 	bl	8001510 <Display_Update>

	  write_rx_to_sd();
 80020de:	f7ff fe6f 	bl	8001dc0 <write_rx_to_sd>

	  char sstr[100];
	  sprintf(sstr, "apps1: %d, apps2: %d, bse: %d      ", throttle1.percent, throttle2.percent, brake.percent);
 80020e2:	4bb4      	ldr	r3, [pc, #720]	; (80023b4 <main+0x35c>)
 80020e4:	891b      	ldrh	r3, [r3, #8]
 80020e6:	461a      	mov	r2, r3
 80020e8:	4bb3      	ldr	r3, [pc, #716]	; (80023b8 <main+0x360>)
 80020ea:	891b      	ldrh	r3, [r3, #8]
 80020ec:	4619      	mov	r1, r3
 80020ee:	4bb3      	ldr	r3, [pc, #716]	; (80023bc <main+0x364>)
 80020f0:	891b      	ldrh	r3, [r3, #8]
 80020f2:	1d38      	adds	r0, r7, #4
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	460b      	mov	r3, r1
 80020f8:	49b1      	ldr	r1, [pc, #708]	; (80023c0 <main+0x368>)
 80020fa:	f00c fc2f 	bl	800e95c <siprintf>
	  UG_PutString(5, 250, sstr);
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	461a      	mov	r2, r3
 8002102:	21fa      	movs	r1, #250	; 0xfa
 8002104:	2005      	movs	r0, #5
 8002106:	f002 f839 	bl	800417c <UG_PutString>

	  update_sensor_vals(&hadc1, &hadc3);
 800210a:	49ae      	ldr	r1, [pc, #696]	; (80023c4 <main+0x36c>)
 800210c:	48ae      	ldr	r0, [pc, #696]	; (80023c8 <main+0x370>)
 800210e:	f000 fee5 	bl	8002edc <update_sensor_vals>

	  can_tx_vcu_state(&hcan1);
 8002112:	48ae      	ldr	r0, [pc, #696]	; (80023cc <main+0x374>)
 8002114:	f7fe fff2 	bl	80010fc <can_tx_vcu_state>

	  can_tx_torque_request(&hcan1);
 8002118:	48ac      	ldr	r0, [pc, #688]	; (80023cc <main+0x374>)
 800211a:	f7ff f845 	bl	80011a8 <can_tx_torque_request>

	  // Traction control
	  if (traction_control_enable()) {
 800211e:	f7ff ff17 	bl	8001f50 <traction_control_enable>
 8002122:	4603      	mov	r3, r0
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <main+0xd4>
		  traction_control_PID();
 8002128:	f001 fe1a 	bl	8003d60 <traction_control_PID>
	  }

	  // If shutdown circuit opens in any state
	  if (!shutdown_closed()) {
 800212c:	f7ff ff40 	bl	8001fb0 <shutdown_closed>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <main+0xe4>
		  report_fault(SHUTDOWN_CIRCUIT_OPEN);
 8002136:	2007      	movs	r0, #7
 8002138:	f7ff fd2c 	bl	8001b94 <report_fault>
//	  if (mc_fault) {
//		  report_fault(MC_FAULT);
//	  }


	  if (!init_fault_cleared) {
 800213c:	4ba4      	ldr	r3, [pc, #656]	; (80023d0 <main+0x378>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	b2db      	uxtb	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <main+0x104>
		  can_clear_MC_fault(&hcan1);
 8002146:	48a1      	ldr	r0, [pc, #644]	; (80023cc <main+0x374>)
 8002148:	f7ff f8a4 	bl	8001294 <can_clear_MC_fault>
		  if (mc_fault_clear_success) {
 800214c:	4ba1      	ldr	r3, [pc, #644]	; (80023d4 <main+0x37c>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d002      	beq.n	800215c <main+0x104>
			 init_fault_cleared = 1;
 8002156:	4b9e      	ldr	r3, [pc, #632]	; (80023d0 <main+0x378>)
 8002158:	2201      	movs	r2, #1
 800215a:	701a      	strb	r2, [r3, #0]
//	  }
//	  else {
//		  Display_DriveTemplate();
//	  }

	  switch (state) {
 800215c:	4b9e      	ldr	r3, [pc, #632]	; (80023d8 <main+0x380>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b05      	cmp	r3, #5
 8002164:	d8b9      	bhi.n	80020da <main+0x82>
 8002166:	a201      	add	r2, pc, #4	; (adr r2, 800216c <main+0x114>)
 8002168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800216c:	080021a9 	.word	0x080021a9
 8002170:	080021e9 	.word	0x080021e9
 8002174:	08002225 	.word	0x08002225
 8002178:	0800224b 	.word	0x0800224b
 800217c:	08002271 	.word	0x08002271
 8002180:	08002185 	.word	0x08002185
		  case STARTUP:
			  run_calibration();
 8002184:	f000 fe96 	bl	8002eb4 <run_calibration>

			  if (!hv_switch() && !drive_switch()) {
 8002188:	f7ff feee 	bl	8001f68 <hv_switch>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	f040 8101 	bne.w	8002396 <main+0x33e>
 8002194:	f7ff fefa 	bl	8001f8c <drive_switch>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	f040 80fb 	bne.w	8002396 <main+0x33e>
				  change_state(LV);
 80021a0:	2000      	movs	r0, #0
 80021a2:	f7ff fcd9 	bl	8001b58 <change_state>
			  }
			  break;
 80021a6:	e0f6      	b.n	8002396 <main+0x33e>
		  case LV:
			  run_calibration();
 80021a8:	f000 fe84 	bl	8002eb4 <run_calibration>

			  if (drive_switch()) {
 80021ac:	f7ff feee 	bl	8001f8c <drive_switch>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d003      	beq.n	80021be <main+0x166>
				  // Drive switch should not be enabled during LV
				  report_fault(DRIVE_REQUEST_FROM_LV);
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff fcec 	bl	8001b94 <report_fault>
				  break;
 80021bc:	e0f5      	b.n	80023aa <main+0x352>
			  }

			  if (hv_switch()) {
 80021be:	f7ff fed3 	bl	8001f68 <hv_switch>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 80e8 	beq.w	800239a <main+0x342>
				  // HV switch was flipped
				  // check if APPS pedal was calibrated
				  if (sensors_calibrated()) {
 80021ca:	f000 ff53 	bl	8003074 <sensors_calibrated>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <main+0x188>
					  // Start charging the car to high voltage state
					  add_apps_deadzone();
 80021d4:	f001 f80c 	bl	80031f0 <add_apps_deadzone>
					  change_state(PRECHARGING);
 80021d8:	2001      	movs	r0, #1
 80021da:	f7ff fcbd 	bl	8001b58 <change_state>
				  } else {
					  report_fault(UNCALIBRATED);
				  }
			  }

			  break;
 80021de:	e0dc      	b.n	800239a <main+0x342>
					  report_fault(UNCALIBRATED);
 80021e0:	2008      	movs	r0, #8
 80021e2:	f7ff fcd7 	bl	8001b94 <report_fault>
			  break;
 80021e6:	e0d8      	b.n	800239a <main+0x342>
		  case PRECHARGING:
//			  if (capacitor_volt > PRECHARGE_THRESHOLD) {

			  // if main AIRs closed
			  if ((shutdown_flags & 0b110) == 0b110) {
 80021e8:	4b7c      	ldr	r3, [pc, #496]	; (80023dc <main+0x384>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	f003 0306 	and.w	r3, r3, #6
 80021f2:	2b06      	cmp	r3, #6
 80021f4:	d103      	bne.n	80021fe <main+0x1a6>
				  // Finished charging to HV on time
				  change_state(HV_ENABLED);
 80021f6:	2002      	movs	r0, #2
 80021f8:	f7ff fcae 	bl	8001b58 <change_state>
				  break;
 80021fc:	e0d5      	b.n	80023aa <main+0x352>
			  }
			  if (!hv_switch()) {
 80021fe:	f7ff feb3 	bl	8001f68 <hv_switch>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d103      	bne.n	8002210 <main+0x1b8>
				  // Driver flipped off HV switch
				  change_state(LV);
 8002208:	2000      	movs	r0, #0
 800220a:	f7ff fca5 	bl	8001b58 <change_state>
				  break;
 800220e:	e0cc      	b.n	80023aa <main+0x352>
			  }
			  if (drive_switch()) {
 8002210:	f7ff febc 	bl	8001f8c <drive_switch>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	f000 80c1 	beq.w	800239e <main+0x346>
				  // Drive switch should not be enabled during PRECHARGING
				  report_fault(DRIVE_REQUEST_FROM_LV);
 800221c:	2001      	movs	r0, #1
 800221e:	f7ff fcb9 	bl	8001b94 <report_fault>
				  break;
 8002222:	e0c2      	b.n	80023aa <main+0x352>
			  }
			  break;
		  case HV_ENABLED:
			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules
 8002224:	f7ff fea0 	bl	8001f68 <hv_switch>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d103      	bne.n	8002236 <main+0x1de>
				  // Driver flipped off HV switch
				  change_state(LV);
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff fc92 	bl	8001b58 <change_state>
				  break;
 8002234:	e0b9      	b.n	80023aa <main+0x352>
			  }

			  if (drive_switch()) {
 8002236:	f7ff fea9 	bl	8001f8c <drive_switch>
 800223a:	4603      	mov	r3, r0
 800223c:	2b00      	cmp	r3, #0
 800223e:	f000 80b0 	beq.w	80023a2 <main+0x34a>
				  // Driver flipped on drive switch
				  // Need to press on pedal at the same time to go to drive

//				  if (brake_mashed()) {
					  change_state(DRIVE);
 8002242:	2003      	movs	r0, #3
 8002244:	f7ff fc88 	bl	8001b58 <change_state>
//					  // Driver didn't press pedal
//					  report_fault(BRAKE_NOT_PRESSED);
//				  }
			  }

			  break;
 8002248:	e0ab      	b.n	80023a2 <main+0x34a>
		  case DRIVE:
			  if (!drive_switch()) {
 800224a:	f7ff fe9f 	bl	8001f8c <drive_switch>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d103      	bne.n	800225c <main+0x204>
				  // Drive switch was flipped off
				  // Revert to HV
				  change_state(HV_ENABLED);
 8002254:	2002      	movs	r0, #2
 8002256:	f7ff fc7f 	bl	8001b58 <change_state>
				 break;
 800225a:	e0a6      	b.n	80023aa <main+0x352>
			  }

			  if (!hv_switch()) {// || capacitor_volt < PRECHARGE_THRESHOLD) { // don't really need volt check by rules || capacitor_volt < PRECHARGE_THRESHOLD) {
 800225c:	f7ff fe84 	bl	8001f68 <hv_switch>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 809f 	bne.w	80023a6 <main+0x34e>
				  // HV switched flipped off, so can't drive
				  // or capacitor dropped below threshold
				  report_fault(HV_DISABLED_WHILE_DRIVING);
 8002268:	2004      	movs	r0, #4
 800226a:	f7ff fc93 	bl	8001b94 <report_fault>
				  break;
 800226e:	e09c      	b.n	80023aa <main+0x352>
//				  report_fault(BRAKE_IMPLAUSIBLE);
//			  }

			  break;
		  case FAULT:
			  switch (error) {
 8002270:	4b5b      	ldr	r3, [pc, #364]	; (80023e0 <main+0x388>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	b2db      	uxtb	r3, r3
 8002276:	3b03      	subs	r3, #3
 8002278:	2b06      	cmp	r3, #6
 800227a:	d872      	bhi.n	8002362 <main+0x30a>
 800227c:	a201      	add	r2, pc, #4	; (adr r2, 8002284 <main+0x22c>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	080022a1 	.word	0x080022a1
 8002288:	08002363 	.word	0x08002363
 800228c:	080022c3 	.word	0x080022c3
 8002290:	080022eb 	.word	0x080022eb
 8002294:	08002351 	.word	0x08002351
 8002298:	08002363 	.word	0x08002363
 800229c:	0800237f 	.word	0x0800237f
				  case BRAKE_NOT_PRESSED:
					  if (!hv_switch())
 80022a0:	f7ff fe62 	bl	8001f68 <hv_switch>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d102      	bne.n	80022b0 <main+0x258>
						  change_state(LV);
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff fc54 	bl	8001b58 <change_state>

					  if (!drive_switch()) {
 80022b0:	f7ff fe6c 	bl	8001f8c <drive_switch>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d163      	bne.n	8002382 <main+0x32a>
						  // reset drive switch and try again
						  change_state(HV_ENABLED);
 80022ba:	2002      	movs	r0, #2
 80022bc:	f7ff fc4c 	bl	8001b58 <change_state>
					  }
					  break;
 80022c0:	e05f      	b.n	8002382 <main+0x32a>
				  case SENSOR_DISCREPANCY:
					  // stop power to motors if discrepancy persists for >100ms
					  // see rule T.4.2.5 in FSAE 2022 rulebook
					  if (!drive_switch()) {
 80022c2:	f7ff fe63 	bl	8001f8c <drive_switch>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d105      	bne.n	80022d8 <main+0x280>
						  discrepancy_timer_ms = 0;
 80022cc:	4b45      	ldr	r3, [pc, #276]	; (80023e4 <main+0x38c>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	601a      	str	r2, [r3, #0]
						  change_state(HV_ENABLED);
 80022d2:	2002      	movs	r0, #2
 80022d4:	f7ff fc40 	bl	8001b58 <change_state>
					  }

					  if (!hv_switch())
 80022d8:	f7ff fe46 	bl	8001f68 <hv_switch>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d151      	bne.n	8002386 <main+0x32e>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 80022e2:	2004      	movs	r0, #4
 80022e4:	f7ff fc56 	bl	8001b94 <report_fault>

					  break;
 80022e8:	e04d      	b.n	8002386 <main+0x32e>
				  case BRAKE_IMPLAUSIBLE:
					  if (!brake_implausible() && hv_switch() && drive_switch())
 80022ea:	f000 ff07 	bl	80030fc <brake_implausible>
 80022ee:	4603      	mov	r3, r0
 80022f0:	f083 0301 	eor.w	r3, r3, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00c      	beq.n	8002314 <main+0x2bc>
 80022fa:	f7ff fe35 	bl	8001f68 <hv_switch>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d007      	beq.n	8002314 <main+0x2bc>
 8002304:	f7ff fe42 	bl	8001f8c <drive_switch>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <main+0x2bc>
						  change_state(DRIVE);
 800230e:	2003      	movs	r0, #3
 8002310:	f7ff fc22 	bl	8001b58 <change_state>

					  if (!hv_switch() && !drive_switch())
 8002314:	f7ff fe28 	bl	8001f68 <hv_switch>
 8002318:	4603      	mov	r3, r0
 800231a:	2b00      	cmp	r3, #0
 800231c:	d107      	bne.n	800232e <main+0x2d6>
 800231e:	f7ff fe35 	bl	8001f8c <drive_switch>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <main+0x2d6>
						  change_state(LV);
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff fc15 	bl	8001b58 <change_state>

					  if (!drive_switch())
 800232e:	f7ff fe2d 	bl	8001f8c <drive_switch>
 8002332:	4603      	mov	r3, r0
 8002334:	2b00      	cmp	r3, #0
 8002336:	d102      	bne.n	800233e <main+0x2e6>
						  change_state(HV_ENABLED);
 8002338:	2002      	movs	r0, #2
 800233a:	f7ff fc0d 	bl	8001b58 <change_state>

					  if (!hv_switch())
 800233e:	f7ff fe13 	bl	8001f68 <hv_switch>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d120      	bne.n	800238a <main+0x332>
						  report_fault(HV_DISABLED_WHILE_DRIVING);
 8002348:	2004      	movs	r0, #4
 800234a:	f7ff fc23 	bl	8001b94 <report_fault>

					  break;
 800234e:	e01c      	b.n	800238a <main+0x332>
				  case SHUTDOWN_CIRCUIT_OPEN:
					  if (shutdown_closed()) {
 8002350:	f7ff fe2e 	bl	8001fb0 <shutdown_closed>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d019      	beq.n	800238e <main+0x336>
						  change_state(LV);
 800235a:	2000      	movs	r0, #0
 800235c:	f7ff fbfc 	bl	8001b58 <change_state>
					  }
					  break;
 8002360:	e015      	b.n	800238e <main+0x336>
 //					  if (!HAL_GPIO_ReadPin(BSPD_LATCH) {
 //						  change_state(LV);
 //			  		  }
					  break;
				  default:  //UNCALIBRATED, DRIVE_REQUEST_FROM_LV, CONSERVATIVE_TIMER_MAXED, HV_DISABLED_WHILE_DRIVING, MC FAULT
					  if (!hv_switch() && !drive_switch()) {
 8002362:	f7ff fe01 	bl	8001f68 <hv_switch>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d112      	bne.n	8002392 <main+0x33a>
 800236c:	f7ff fe0e 	bl	8001f8c <drive_switch>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d10d      	bne.n	8002392 <main+0x33a>
						  change_state(LV);
 8002376:	2000      	movs	r0, #0
 8002378:	f7ff fbee 	bl	8001b58 <change_state>
					  }
					  break;
 800237c:	e009      	b.n	8002392 <main+0x33a>
					  break;
 800237e:	bf00      	nop
 8002380:	e013      	b.n	80023aa <main+0x352>
					  break;
 8002382:	bf00      	nop
 8002384:	e011      	b.n	80023aa <main+0x352>
					  break;
 8002386:	bf00      	nop
 8002388:	e00f      	b.n	80023aa <main+0x352>
					  break;
 800238a:	bf00      	nop
 800238c:	e00d      	b.n	80023aa <main+0x352>
					  break;
 800238e:	bf00      	nop
 8002390:	e00b      	b.n	80023aa <main+0x352>
					  break;
 8002392:	bf00      	nop
			  }
			  break;
 8002394:	e009      	b.n	80023aa <main+0x352>
			  break;
 8002396:	bf00      	nop
 8002398:	e69f      	b.n	80020da <main+0x82>
			  break;
 800239a:	bf00      	nop
 800239c:	e69d      	b.n	80020da <main+0x82>
			  break;
 800239e:	bf00      	nop
 80023a0:	e69b      	b.n	80020da <main+0x82>
			  break;
 80023a2:	bf00      	nop
 80023a4:	e699      	b.n	80020da <main+0x82>
			  break;
 80023a6:	bf00      	nop
 80023a8:	e697      	b.n	80020da <main+0x82>
  {
 80023aa:	e696      	b.n	80020da <main+0x82>
 80023ac:	0801e924 	.word	0x0801e924
 80023b0:	200025b8 	.word	0x200025b8
 80023b4:	200027f0 	.word	0x200027f0
 80023b8:	200027fc 	.word	0x200027fc
 80023bc:	20002808 	.word	0x20002808
 80023c0:	0800f48c 	.word	0x0800f48c
 80023c4:	20002284 	.word	0x20002284
 80023c8:	2000223c 	.word	0x2000223c
 80023cc:	2000238c 	.word	0x2000238c
 80023d0:	200027ec 	.word	0x200027ec
 80023d4:	2000012e 	.word	0x2000012e
 80023d8:	2000008d 	.word	0x2000008d
 80023dc:	20000000 	.word	0x20000000
 80023e0:	20000232 	.word	0x20000232
 80023e4:	20002814 	.word	0x20002814

080023e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b094      	sub	sp, #80	; 0x50
 80023ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ee:	f107 0320 	add.w	r3, r7, #32
 80023f2:	2230      	movs	r2, #48	; 0x30
 80023f4:	2100      	movs	r1, #0
 80023f6:	4618      	mov	r0, r3
 80023f8:	f00c fad0 	bl	800e99c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023fc:	f107 030c 	add.w	r3, r7, #12
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b2a      	ldr	r3, [pc, #168]	; (80024b8 <SystemClock_Config+0xd0>)
 800240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002410:	4a29      	ldr	r2, [pc, #164]	; (80024b8 <SystemClock_Config+0xd0>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6413      	str	r3, [r2, #64]	; 0x40
 8002418:	4b27      	ldr	r3, [pc, #156]	; (80024b8 <SystemClock_Config+0xd0>)
 800241a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002424:	4b25      	ldr	r3, [pc, #148]	; (80024bc <SystemClock_Config+0xd4>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a24      	ldr	r2, [pc, #144]	; (80024bc <SystemClock_Config+0xd4>)
 800242a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b22      	ldr	r3, [pc, #136]	; (80024bc <SystemClock_Config+0xd4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800243c:	2301      	movs	r3, #1
 800243e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002440:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002446:	2302      	movs	r3, #2
 8002448:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800244a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800244e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002450:	2308      	movs	r3, #8
 8002452:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002454:	23d8      	movs	r3, #216	; 0xd8
 8002456:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002458:	2302      	movs	r3, #2
 800245a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 800245c:	2309      	movs	r3, #9
 800245e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002460:	f107 0320 	add.w	r3, r7, #32
 8002464:	4618      	mov	r0, r3
 8002466:	f004 ff5d 	bl	8007324 <HAL_RCC_OscConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002470:	f000 fc70 	bl	8002d54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002474:	f004 ff06 	bl	8007284 <HAL_PWREx_EnableOverDrive>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800247e:	f000 fc69 	bl	8002d54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002482:	230f      	movs	r3, #15
 8002484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002486:	2302      	movs	r3, #2
 8002488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800248e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002498:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800249a:	f107 030c 	add.w	r3, r7, #12
 800249e:	2107      	movs	r1, #7
 80024a0:	4618      	mov	r0, r3
 80024a2:	f005 f9e3 	bl	800786c <HAL_RCC_ClockConfig>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80024ac:	f000 fc52 	bl	8002d54 <Error_Handler>
  }
}
 80024b0:	bf00      	nop
 80024b2:	3750      	adds	r7, #80	; 0x50
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40007000 	.word	0x40007000

080024c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80024c6:	463b      	mov	r3, r7
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	605a      	str	r2, [r3, #4]
 80024ce:	609a      	str	r2, [r3, #8]
 80024d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <MX_ADC1_Init+0x98>)
 80024d4:	4a21      	ldr	r2, [pc, #132]	; (800255c <MX_ADC1_Init+0x9c>)
 80024d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80024d8:	4b1f      	ldr	r3, [pc, #124]	; (8002558 <MX_ADC1_Init+0x98>)
 80024da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80024de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024e0:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <MX_ADC1_Init+0x98>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80024e6:	4b1c      	ldr	r3, [pc, #112]	; (8002558 <MX_ADC1_Init+0x98>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <MX_ADC1_Init+0x98>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024f2:	4b19      	ldr	r3, [pc, #100]	; (8002558 <MX_ADC1_Init+0x98>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <MX_ADC1_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002500:	4b15      	ldr	r3, [pc, #84]	; (8002558 <MX_ADC1_Init+0x98>)
 8002502:	4a17      	ldr	r2, [pc, #92]	; (8002560 <MX_ADC1_Init+0xa0>)
 8002504:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002506:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_ADC1_Init+0x98>)
 8002508:	2200      	movs	r2, #0
 800250a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800250c:	4b12      	ldr	r3, [pc, #72]	; (8002558 <MX_ADC1_Init+0x98>)
 800250e:	2201      	movs	r2, #1
 8002510:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_ADC1_Init+0x98>)
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800251a:	4b0f      	ldr	r3, [pc, #60]	; (8002558 <MX_ADC1_Init+0x98>)
 800251c:	2201      	movs	r2, #1
 800251e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002520:	480d      	ldr	r0, [pc, #52]	; (8002558 <MX_ADC1_Init+0x98>)
 8002522:	f002 fdaf 	bl	8005084 <HAL_ADC_Init>
 8002526:	4603      	mov	r3, r0
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800252c:	f000 fc12 	bl	8002d54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8002530:	230a      	movs	r3, #10
 8002532:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002534:	2301      	movs	r3, #1
 8002536:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002538:	2300      	movs	r3, #0
 800253a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800253c:	463b      	mov	r3, r7
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_ADC1_Init+0x98>)
 8002542:	f002 ff49 	bl	80053d8 <HAL_ADC_ConfigChannel>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800254c:	f000 fc02 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
//
  /* USER CODE END ADC1_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	2000223c 	.word	0x2000223c
 800255c:	40012000 	.word	0x40012000
 8002560:	0f000001 	.word	0x0f000001

08002564 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b084      	sub	sp, #16
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800256a:	463b      	mov	r3, r7
 800256c:	2200      	movs	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	605a      	str	r2, [r3, #4]
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8002576:	4b21      	ldr	r3, [pc, #132]	; (80025fc <MX_ADC3_Init+0x98>)
 8002578:	4a21      	ldr	r2, [pc, #132]	; (8002600 <MX_ADC3_Init+0x9c>)
 800257a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800257c:	4b1f      	ldr	r3, [pc, #124]	; (80025fc <MX_ADC3_Init+0x98>)
 800257e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002582:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8002584:	4b1d      	ldr	r3, [pc, #116]	; (80025fc <MX_ADC3_Init+0x98>)
 8002586:	2200      	movs	r2, #0
 8002588:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800258a:	4b1c      	ldr	r3, [pc, #112]	; (80025fc <MX_ADC3_Init+0x98>)
 800258c:	2200      	movs	r2, #0
 800258e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <MX_ADC3_Init+0x98>)
 8002592:	2200      	movs	r2, #0
 8002594:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002596:	4b19      	ldr	r3, [pc, #100]	; (80025fc <MX_ADC3_Init+0x98>)
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800259e:	4b17      	ldr	r3, [pc, #92]	; (80025fc <MX_ADC3_Init+0x98>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <MX_ADC3_Init+0x98>)
 80025a6:	4a17      	ldr	r2, [pc, #92]	; (8002604 <MX_ADC3_Init+0xa0>)
 80025a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80025aa:	4b14      	ldr	r3, [pc, #80]	; (80025fc <MX_ADC3_Init+0x98>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 80025b0:	4b12      	ldr	r3, [pc, #72]	; (80025fc <MX_ADC3_Init+0x98>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 80025b6:	4b11      	ldr	r3, [pc, #68]	; (80025fc <MX_ADC3_Init+0x98>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <MX_ADC3_Init+0x98>)
 80025c0:	2201      	movs	r2, #1
 80025c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80025c4:	480d      	ldr	r0, [pc, #52]	; (80025fc <MX_ADC3_Init+0x98>)
 80025c6:	f002 fd5d 	bl	8005084 <HAL_ADC_Init>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 80025d0:	f000 fbc0 	bl	8002d54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80025d4:	2308      	movs	r3, #8
 80025d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80025d8:	2301      	movs	r3, #1
 80025da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80025e0:	463b      	mov	r3, r7
 80025e2:	4619      	mov	r1, r3
 80025e4:	4805      	ldr	r0, [pc, #20]	; (80025fc <MX_ADC3_Init+0x98>)
 80025e6:	f002 fef7 	bl	80053d8 <HAL_ADC_ConfigChannel>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 80025f0:	f000 fbb0 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20002284 	.word	0x20002284
 8002600:	40012200 	.word	0x40012200
 8002604:	0f000001 	.word	0x0f000001

08002608 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b08a      	sub	sp, #40	; 0x28
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800260e:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002610:	4a30      	ldr	r2, [pc, #192]	; (80026d4 <MX_CAN1_Init+0xcc>)
 8002612:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8002614:	4b2e      	ldr	r3, [pc, #184]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002616:	2212      	movs	r2, #18
 8002618:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800261a:	4b2d      	ldr	r3, [pc, #180]	; (80026d0 <MX_CAN1_Init+0xc8>)
 800261c:	2200      	movs	r2, #0
 800261e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002620:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002622:	2200      	movs	r2, #0
 8002624:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002626:	4b2a      	ldr	r3, [pc, #168]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002628:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800262c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002630:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002634:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002638:	2200      	movs	r2, #0
 800263a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <MX_CAN1_Init+0xc8>)
 800263e:	2200      	movs	r2, #0
 8002640:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002642:	4b23      	ldr	r3, [pc, #140]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002644:	2200      	movs	r2, #0
 8002646:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002648:	4b21      	ldr	r3, [pc, #132]	; (80026d0 <MX_CAN1_Init+0xc8>)
 800264a:	2200      	movs	r2, #0
 800264c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800264e:	4b20      	ldr	r3, [pc, #128]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002650:	2200      	movs	r2, #0
 8002652:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002656:	2200      	movs	r2, #0
 8002658:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800265a:	481d      	ldr	r0, [pc, #116]	; (80026d0 <MX_CAN1_Init+0xc8>)
 800265c:	f003 f90c 	bl	8005878 <HAL_CAN_Init>
 8002660:	4603      	mov	r3, r0
 8002662:	2b00      	cmp	r3, #0
 8002664:	d001      	beq.n	800266a <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002666:	f000 fb75 	bl	8002d54 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /*##-2- Configure the CAN Filter ###########################################*/
    CAN_FilterTypeDef canfilterconfig;

    canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800266a:	2301      	movs	r3, #1
 800266c:	623b      	str	r3, [r7, #32]
    canfilterconfig.FilterBank = 18;  // which filter bank to use from the assigned ones
 800266e:	2312      	movs	r3, #18
 8002670:	617b      	str	r3, [r7, #20]
    canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002672:	2300      	movs	r3, #0
 8002674:	613b      	str	r3, [r7, #16]
    canfilterconfig.FilterIdHigh = 0x0;
 8002676:	2300      	movs	r3, #0
 8002678:	603b      	str	r3, [r7, #0]
    canfilterconfig.FilterIdLow = 0x0;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
    canfilterconfig.FilterMaskIdHigh = 0x0;
 800267e:	2300      	movs	r3, #0
 8002680:	60bb      	str	r3, [r7, #8]
    canfilterconfig.FilterMaskIdLow = 0x0000;
 8002682:	2300      	movs	r3, #0
 8002684:	60fb      	str	r3, [r7, #12]
    canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002686:	2300      	movs	r3, #0
 8002688:	61bb      	str	r3, [r7, #24]
    canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800268a:	2301      	movs	r3, #1
 800268c:	61fb      	str	r3, [r7, #28]
    canfilterconfig.SlaveStartFilterBank = 20;  // how many filters to assign to the CAN1 (master can)
 800268e:	2314      	movs	r3, #20
 8002690:	627b      	str	r3, [r7, #36]	; 0x24

  	if (HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig) != HAL_OK)
 8002692:	463b      	mov	r3, r7
 8002694:	4619      	mov	r1, r3
 8002696:	480e      	ldr	r0, [pc, #56]	; (80026d0 <MX_CAN1_Init+0xc8>)
 8002698:	f003 f9ea 	bl	8005a70 <HAL_CAN_ConfigFilter>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <MX_CAN1_Init+0x9e>
  	{
  	  /* Filter configuration Error */
  	  Error_Handler();
 80026a2:	f000 fb57 	bl	8002d54 <Error_Handler>
  	}

  	/*##-3- Start the CAN peripheral ###########################################*/
  	if (HAL_CAN_Start(&hcan1) != HAL_OK)
 80026a6:	480a      	ldr	r0, [pc, #40]	; (80026d0 <MX_CAN1_Init+0xc8>)
 80026a8:	f003 fac2 	bl	8005c30 <HAL_CAN_Start>
 80026ac:	4603      	mov	r3, r0
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <MX_CAN1_Init+0xae>
  	{
  	  /* Start Error */
  	  Error_Handler();
 80026b2:	f000 fb4f 	bl	8002d54 <Error_Handler>
  	}

  	/*##-4- Activate CAN RX notification #######################################*/
  	if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK)
 80026b6:	2102      	movs	r1, #2
 80026b8:	4805      	ldr	r0, [pc, #20]	; (80026d0 <MX_CAN1_Init+0xc8>)
 80026ba:	f003 fcdf 	bl	800607c <HAL_CAN_ActivateNotification>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_CAN1_Init+0xc0>
  	{
  	  /* Notification Error */
  	  Error_Handler();
 80026c4:	f000 fb46 	bl	8002d54 <Error_Handler>
  	}

  /* USER CODE END CAN1_Init 2 */

}
 80026c8:	bf00      	nop
 80026ca:	3728      	adds	r7, #40	; 0x28
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	2000238c 	.word	0x2000238c
 80026d4:	40006400 	.word	0x40006400

080026d8 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80026dc:	4b17      	ldr	r3, [pc, #92]	; (800273c <MX_CAN2_Init+0x64>)
 80026de:	4a18      	ldr	r2, [pc, #96]	; (8002740 <MX_CAN2_Init+0x68>)
 80026e0:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 18;
 80026e2:	4b16      	ldr	r3, [pc, #88]	; (800273c <MX_CAN2_Init+0x64>)
 80026e4:	2212      	movs	r2, #18
 80026e6:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <MX_CAN2_Init+0x64>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <MX_CAN2_Init+0x64>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 80026f4:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_CAN2_Init+0x64>)
 80026f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026fa:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <MX_CAN2_Init+0x64>)
 80026fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002702:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8002704:	4b0d      	ldr	r3, [pc, #52]	; (800273c <MX_CAN2_Init+0x64>)
 8002706:	2200      	movs	r2, #0
 8002708:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_CAN2_Init+0x64>)
 800270c:	2200      	movs	r2, #0
 800270e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8002710:	4b0a      	ldr	r3, [pc, #40]	; (800273c <MX_CAN2_Init+0x64>)
 8002712:	2200      	movs	r2, #0
 8002714:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8002716:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_CAN2_Init+0x64>)
 8002718:	2200      	movs	r2, #0
 800271a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800271c:	4b07      	ldr	r3, [pc, #28]	; (800273c <MX_CAN2_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_CAN2_Init+0x64>)
 8002724:	2200      	movs	r2, #0
 8002726:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8002728:	4804      	ldr	r0, [pc, #16]	; (800273c <MX_CAN2_Init+0x64>)
 800272a:	f003 f8a5 	bl	8005878 <HAL_CAN_Init>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8002734:	f000 fb0e 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8002738:	bf00      	nop
 800273a:	bd80      	pop	{r7, pc}
 800273c:	200023b4 	.word	0x200023b4
 8002740:	40006800 	.word	0x40006800

08002744 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8002748:	4b0c      	ldr	r3, [pc, #48]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 800274a:	4a0d      	ldr	r2, [pc, #52]	; (8002780 <MX_SDMMC1_SD_Init+0x3c>)
 800274c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 8002750:	2200      	movs	r2, #0
 8002752:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002754:	4b09      	ldr	r3, [pc, #36]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 8002756:	2200      	movs	r2, #0
 8002758:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 800275c:	2200      	movs	r2, #0
 800275e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002760:	4b06      	ldr	r3, [pc, #24]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 8002762:	2200      	movs	r2, #0
 8002764:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002766:	4b05      	ldr	r3, [pc, #20]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 8002768:	2200      	movs	r2, #0
 800276a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800276c:	4b03      	ldr	r3, [pc, #12]	; (800277c <MX_SDMMC1_SD_Init+0x38>)
 800276e:	2200      	movs	r2, #0
 8002770:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8002772:	bf00      	nop
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	200023dc 	.word	0x200023dc
 8002780:	40012c00 	.word	0x40012c00

08002784 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b088      	sub	sp, #32
 8002788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800278a:	f107 030c 	add.w	r3, r7, #12
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	605a      	str	r2, [r3, #4]
 8002794:	609a      	str	r2, [r3, #8]
 8002796:	60da      	str	r2, [r3, #12]
 8002798:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800279a:	463b      	mov	r3, r7
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80027a4:	4b21      	ldr	r3, [pc, #132]	; (800282c <MX_TIM2_Init+0xa8>)
 80027a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027aa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80027ac:	4b1f      	ldr	r3, [pc, #124]	; (800282c <MX_TIM2_Init+0xa8>)
 80027ae:	2200      	movs	r2, #0
 80027b0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b2:	4b1e      	ldr	r3, [pc, #120]	; (800282c <MX_TIM2_Init+0xa8>)
 80027b4:	2200      	movs	r2, #0
 80027b6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80027b8:	4b1c      	ldr	r3, [pc, #112]	; (800282c <MX_TIM2_Init+0xa8>)
 80027ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027be:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027c0:	4b1a      	ldr	r3, [pc, #104]	; (800282c <MX_TIM2_Init+0xa8>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c6:	4b19      	ldr	r3, [pc, #100]	; (800282c <MX_TIM2_Init+0xa8>)
 80027c8:	2200      	movs	r2, #0
 80027ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027cc:	4817      	ldr	r0, [pc, #92]	; (800282c <MX_TIM2_Init+0xa8>)
 80027ce:	f006 ffd1 	bl	8009774 <HAL_TIM_Base_Init>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80027d8:	f000 fabc 	bl	8002d54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80027dc:	2307      	movs	r3, #7
 80027de:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 80027e0:	2370      	movs	r3, #112	; 0x70
 80027e2:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 80027e8:	2300      	movs	r3, #0
 80027ea:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80027f0:	f107 030c 	add.w	r3, r7, #12
 80027f4:	4619      	mov	r1, r3
 80027f6:	480d      	ldr	r0, [pc, #52]	; (800282c <MX_TIM2_Init+0xa8>)
 80027f8:	f007 f9ab 	bl	8009b52 <HAL_TIM_SlaveConfigSynchro>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d001      	beq.n	8002806 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8002802:	f000 faa7 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002806:	2300      	movs	r3, #0
 8002808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800280a:	2300      	movs	r3, #0
 800280c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800280e:	463b      	mov	r3, r7
 8002810:	4619      	mov	r1, r3
 8002812:	4806      	ldr	r0, [pc, #24]	; (800282c <MX_TIM2_Init+0xa8>)
 8002814:	f007 fbbc 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 8002818:	4603      	mov	r3, r0
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800281e:	f000 fa99 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002822:	bf00      	nop
 8002824:	3720      	adds	r7, #32
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20002520 	.word	0x20002520

08002830 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b088      	sub	sp, #32
 8002834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002836:	f107 030c 	add.w	r3, r7, #12
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
 800283e:	605a      	str	r2, [r3, #4]
 8002840:	609a      	str	r2, [r3, #8]
 8002842:	60da      	str	r2, [r3, #12]
 8002844:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002846:	463b      	mov	r3, r7
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]
 800284c:	605a      	str	r2, [r3, #4]
 800284e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002850:	4b21      	ldr	r3, [pc, #132]	; (80028d8 <MX_TIM4_Init+0xa8>)
 8002852:	4a22      	ldr	r2, [pc, #136]	; (80028dc <MX_TIM4_Init+0xac>)
 8002854:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8000;
 8002856:	4b20      	ldr	r3, [pc, #128]	; (80028d8 <MX_TIM4_Init+0xa8>)
 8002858:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800285c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800285e:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <MX_TIM4_Init+0xa8>)
 8002860:	2200      	movs	r2, #0
 8002862:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002864:	4b1c      	ldr	r3, [pc, #112]	; (80028d8 <MX_TIM4_Init+0xa8>)
 8002866:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800286a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800286c:	4b1a      	ldr	r3, [pc, #104]	; (80028d8 <MX_TIM4_Init+0xa8>)
 800286e:	2200      	movs	r2, #0
 8002870:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <MX_TIM4_Init+0xa8>)
 8002874:	2200      	movs	r2, #0
 8002876:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002878:	4817      	ldr	r0, [pc, #92]	; (80028d8 <MX_TIM4_Init+0xa8>)
 800287a:	f006 ff7b 	bl	8009774 <HAL_TIM_Base_Init>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d001      	beq.n	8002888 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8002884:	f000 fa66 	bl	8002d54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8002888:	2307      	movs	r3, #7
 800288a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ETRF;
 800288c:	2370      	movs	r3, #112	; 0x70
 800288e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_NONINVERTED;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerPrescaler = TIM_TRIGGERPRESCALER_DIV1;
 8002894:	2300      	movs	r3, #0
 8002896:	61bb      	str	r3, [r7, #24]
  sSlaveConfig.TriggerFilter = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 800289c:	f107 030c 	add.w	r3, r7, #12
 80028a0:	4619      	mov	r1, r3
 80028a2:	480d      	ldr	r0, [pc, #52]	; (80028d8 <MX_TIM4_Init+0xa8>)
 80028a4:	f007 f955 	bl	8009b52 <HAL_TIM_SlaveConfigSynchro>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80028ae:	f000 fa51 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028b2:	2300      	movs	r3, #0
 80028b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028b6:	2300      	movs	r3, #0
 80028b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80028ba:	463b      	mov	r3, r7
 80028bc:	4619      	mov	r1, r3
 80028be:	4806      	ldr	r0, [pc, #24]	; (80028d8 <MX_TIM4_Init+0xa8>)
 80028c0:	f007 fb66 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80028ca:	f000 fa43 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80028ce:	bf00      	nop
 80028d0:	3720      	adds	r7, #32
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	2000256c 	.word	0x2000256c
 80028dc:	40000800 	.word	0x40000800

080028e0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	2200      	movs	r2, #0
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	605a      	str	r2, [r3, #4]
 80028ee:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80028f0:	4b16      	ldr	r3, [pc, #88]	; (800294c <MX_TIM7_Init+0x6c>)
 80028f2:	4a17      	ldr	r2, [pc, #92]	; (8002950 <MX_TIM7_Init+0x70>)
 80028f4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8000;
 80028f6:	4b15      	ldr	r3, [pc, #84]	; (800294c <MX_TIM7_Init+0x6c>)
 80028f8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80028fc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80028fe:	4b13      	ldr	r3, [pc, #76]	; (800294c <MX_TIM7_Init+0x6c>)
 8002900:	2200      	movs	r2, #0
 8002902:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 5000;
 8002904:	4b11      	ldr	r3, [pc, #68]	; (800294c <MX_TIM7_Init+0x6c>)
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800290c:	4b0f      	ldr	r3, [pc, #60]	; (800294c <MX_TIM7_Init+0x6c>)
 800290e:	2200      	movs	r2, #0
 8002910:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002912:	480e      	ldr	r0, [pc, #56]	; (800294c <MX_TIM7_Init+0x6c>)
 8002914:	f006 ff2e 	bl	8009774 <HAL_TIM_Base_Init>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800291e:	f000 fa19 	bl	8002d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002922:	2300      	movs	r3, #0
 8002924:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002926:	2300      	movs	r3, #0
 8002928:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800292a:	1d3b      	adds	r3, r7, #4
 800292c:	4619      	mov	r1, r3
 800292e:	4807      	ldr	r0, [pc, #28]	; (800294c <MX_TIM7_Init+0x6c>)
 8002930:	f007 fb2e 	bl	8009f90 <HAL_TIMEx_MasterConfigSynchronization>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 800293a:	f000 fa0b 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */
  NVIC_EnableIRQ(TIM7_IRQn);
 800293e:	2037      	movs	r0, #55	; 0x37
 8002940:	f7ff f984 	bl	8001c4c <__NVIC_EnableIRQ>

  /* USER CODE END TIM7_Init 2 */

}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	200025b8 	.word	0x200025b8
 8002950:	40001400 	.word	0x40001400

08002954 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <MX_UART4_Init+0x58>)
 800295a:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <MX_UART4_Init+0x5c>)
 800295c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800295e:	4b13      	ldr	r3, [pc, #76]	; (80029ac <MX_UART4_Init+0x58>)
 8002960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002964:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002966:	4b11      	ldr	r3, [pc, #68]	; (80029ac <MX_UART4_Init+0x58>)
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <MX_UART4_Init+0x58>)
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002972:	4b0e      	ldr	r3, [pc, #56]	; (80029ac <MX_UART4_Init+0x58>)
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <MX_UART4_Init+0x58>)
 800297a:	220c      	movs	r2, #12
 800297c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <MX_UART4_Init+0x58>)
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002984:	4b09      	ldr	r3, [pc, #36]	; (80029ac <MX_UART4_Init+0x58>)
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800298a:	4b08      	ldr	r3, [pc, #32]	; (80029ac <MX_UART4_Init+0x58>)
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002990:	4b06      	ldr	r3, [pc, #24]	; (80029ac <MX_UART4_Init+0x58>)
 8002992:	2200      	movs	r2, #0
 8002994:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	; (80029ac <MX_UART4_Init+0x58>)
 8002998:	f007 fba6 	bl	800a0e8 <HAL_UART_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80029a2:	f000 f9d7 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20002604 	.word	0x20002604
 80029b0:	40004c00 	.word	0x40004c00

080029b4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80029b8:	4b14      	ldr	r3, [pc, #80]	; (8002a0c <MX_UART7_Init+0x58>)
 80029ba:	4a15      	ldr	r2, [pc, #84]	; (8002a10 <MX_UART7_Init+0x5c>)
 80029bc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80029be:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <MX_UART7_Init+0x58>)
 80029c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80029c4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80029c6:	4b11      	ldr	r3, [pc, #68]	; (8002a0c <MX_UART7_Init+0x58>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80029cc:	4b0f      	ldr	r3, [pc, #60]	; (8002a0c <MX_UART7_Init+0x58>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80029d2:	4b0e      	ldr	r3, [pc, #56]	; (8002a0c <MX_UART7_Init+0x58>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80029d8:	4b0c      	ldr	r3, [pc, #48]	; (8002a0c <MX_UART7_Init+0x58>)
 80029da:	220c      	movs	r2, #12
 80029dc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <MX_UART7_Init+0x58>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80029e4:	4b09      	ldr	r3, [pc, #36]	; (8002a0c <MX_UART7_Init+0x58>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <MX_UART7_Init+0x58>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <MX_UART7_Init+0x58>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80029f6:	4805      	ldr	r0, [pc, #20]	; (8002a0c <MX_UART7_Init+0x58>)
 80029f8:	f007 fb76 	bl	800a0e8 <HAL_UART_Init>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002a02:	f000 f9a7 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002a06:	bf00      	nop
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	2000268c 	.word	0x2000268c
 8002a10:	40007800 	.word	0x40007800

08002a14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a1a:	4a15      	ldr	r2, [pc, #84]	; (8002a70 <MX_USART3_UART_Init+0x5c>)
 8002a1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002a1e:	4b13      	ldr	r3, [pc, #76]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002a26:	4b11      	ldr	r3, [pc, #68]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002a2c:	4b0f      	ldr	r3, [pc, #60]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002a32:	4b0e      	ldr	r3, [pc, #56]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002a38:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a3a:	220c      	movs	r2, #12
 8002a3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002a56:	4805      	ldr	r0, [pc, #20]	; (8002a6c <MX_USART3_UART_Init+0x58>)
 8002a58:	f007 fb46 	bl	800a0e8 <HAL_UART_Init>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d001      	beq.n	8002a66 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002a62:	f000 f977 	bl	8002d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20002714 	.word	0x20002714
 8002a70:	40004800 	.word	0x40004800

08002a74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002a7a:	4b18      	ldr	r3, [pc, #96]	; (8002adc <MX_DMA_Init+0x68>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7e:	4a17      	ldr	r2, [pc, #92]	; (8002adc <MX_DMA_Init+0x68>)
 8002a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a84:	6313      	str	r3, [r2, #48]	; 0x30
 8002a86:	4b15      	ldr	r3, [pc, #84]	; (8002adc <MX_DMA_Init+0x68>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002a92:	2200      	movs	r2, #0
 8002a94:	2100      	movs	r1, #0
 8002a96:	2038      	movs	r0, #56	; 0x38
 8002a98:	f003 fe21 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002a9c:	2038      	movs	r0, #56	; 0x38
 8002a9e:	f003 fe3a 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	2100      	movs	r1, #0
 8002aa6:	2039      	movs	r0, #57	; 0x39
 8002aa8:	f003 fe19 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002aac:	2039      	movs	r0, #57	; 0x39
 8002aae:	f003 fe32 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	203b      	movs	r0, #59	; 0x3b
 8002ab8:	f003 fe11 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002abc:	203b      	movs	r0, #59	; 0x3b
 8002abe:	f003 fe2a 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	2045      	movs	r0, #69	; 0x45
 8002ac8:	f003 fe09 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002acc:	2045      	movs	r0, #69	; 0x45
 8002ace:	f003 fe22 	bl	8006716 <HAL_NVIC_EnableIRQ>

}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b088      	sub	sp, #32
 8002ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8002ae6:	1d3b      	adds	r3, r7, #4
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
 8002af4:	615a      	str	r2, [r3, #20]
 8002af6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8002af8:	4b28      	ldr	r3, [pc, #160]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002afa:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002afe:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8002b00:	4b26      	ldr	r3, [pc, #152]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b02:	4a27      	ldr	r2, [pc, #156]	; (8002ba0 <MX_FMC_Init+0xc0>)
 8002b04:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8002b06:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8002b0c:	4b23      	ldr	r3, [pc, #140]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8002b12:	4b22      	ldr	r3, [pc, #136]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b14:	2200      	movs	r2, #0
 8002b16:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002b18:	4b20      	ldr	r3, [pc, #128]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b1a:	2210      	movs	r2, #16
 8002b1c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8002b1e:	4b1f      	ldr	r3, [pc, #124]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8002b24:	4b1d      	ldr	r3, [pc, #116]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b26:	2200      	movs	r2, #0
 8002b28:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8002b2a:	4b1c      	ldr	r3, [pc, #112]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8002b30:	4b1a      	ldr	r3, [pc, #104]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b32:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002b38:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002b3e:	4b17      	ldr	r3, [pc, #92]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002b62:	230f      	movs	r3, #15
 8002b64:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002b66:	230f      	movs	r3, #15
 8002b68:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002b6a:	23ff      	movs	r3, #255	; 0xff
 8002b6c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002b6e:	230f      	movs	r3, #15
 8002b70:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002b72:	2310      	movs	r3, #16
 8002b74:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002b76:	2311      	movs	r3, #17
 8002b78:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002b7e:	1d3b      	adds	r3, r7, #4
 8002b80:	2200      	movs	r2, #0
 8002b82:	4619      	mov	r1, r3
 8002b84:	4805      	ldr	r0, [pc, #20]	; (8002b9c <MX_FMC_Init+0xbc>)
 8002b86:	f006 fdad 	bl	80096e4 <HAL_SRAM_Init>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8002b90:	f000 f8e0 	bl	8002d54 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8002b94:	bf00      	nop
 8002b96:	3720      	adds	r7, #32
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}
 8002b9c:	2000279c 	.word	0x2000279c
 8002ba0:	a0000104 	.word	0xa0000104

08002ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
 8002bb6:	60da      	str	r2, [r3, #12]
 8002bb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002bba:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	623b      	str	r3, [r7, #32]
 8002bd0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	4a59      	ldr	r2, [pc, #356]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	4a53      	ldr	r2, [pc, #332]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bf0:	f043 0304 	orr.w	r3, r3, #4
 8002bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8002bf6:	4b51      	ldr	r3, [pc, #324]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bfa:	f003 0304 	and.w	r3, r3, #4
 8002bfe:	61bb      	str	r3, [r7, #24]
 8002c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	4a4d      	ldr	r2, [pc, #308]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c08:	f043 0301 	orr.w	r3, r3, #1
 8002c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c0e:	4b4b      	ldr	r3, [pc, #300]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c12:	f003 0301 	and.w	r3, r3, #1
 8002c16:	617b      	str	r3, [r7, #20]
 8002c18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c1a:	4b48      	ldr	r3, [pc, #288]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a47      	ldr	r2, [pc, #284]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c20:	f043 0310 	orr.w	r3, r3, #16
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b45      	ldr	r3, [pc, #276]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0310 	and.w	r3, r3, #16
 8002c2e:	613b      	str	r3, [r7, #16]
 8002c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c32:	4b42      	ldr	r3, [pc, #264]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c36:	4a41      	ldr	r2, [pc, #260]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c38:	f043 0302 	orr.w	r3, r3, #2
 8002c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3e:	4b3f      	ldr	r3, [pc, #252]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	f003 0302 	and.w	r3, r3, #2
 8002c46:	60fb      	str	r3, [r7, #12]
 8002c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c4a:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a3b      	ldr	r2, [pc, #236]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c50:	f043 0308 	orr.w	r3, r3, #8
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b39      	ldr	r3, [pc, #228]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0308 	and.w	r3, r3, #8
 8002c5e:	60bb      	str	r3, [r7, #8]
 8002c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002c62:	4b36      	ldr	r3, [pc, #216]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c66:	4a35      	ldr	r2, [pc, #212]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c6e:	4b33      	ldr	r3, [pc, #204]	; (8002d3c <MX_GPIO_Init+0x198>)
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	607b      	str	r3, [r7, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HEARTBEAT_GPIO_Port, HEARTBEAT_Pin, GPIO_PIN_RESET);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2108      	movs	r1, #8
 8002c7e:	4830      	ldr	r0, [pc, #192]	; (8002d40 <MX_GPIO_Init+0x19c>)
 8002c80:	f004 face 	bl	8007220 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF2 EXTRA_SENS2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|EXTRA_SENS2_Pin;
 8002c84:	f44f 7301 	mov.w	r3, #516	; 0x204
 8002c88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002c92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c96:	4619      	mov	r1, r3
 8002c98:	482a      	ldr	r0, [pc, #168]	; (8002d44 <MX_GPIO_Init+0x1a0>)
 8002c9a:	f004 f8fd 	bl	8006e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXTRA_SENS_1_Pin */
  GPIO_InitStruct.Pin = EXTRA_SENS_1_Pin;
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXTRA_SENS_1_GPIO_Port, &GPIO_InitStruct);
 8002caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4825      	ldr	r0, [pc, #148]	; (8002d48 <MX_GPIO_Init+0x1a4>)
 8002cb2:	f004 f8f1 	bl	8006e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : HEARTBEAT_Pin */
  GPIO_InitStruct.Pin = HEARTBEAT_Pin;
 8002cb6:	2308      	movs	r3, #8
 8002cb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HEARTBEAT_GPIO_Port, &GPIO_InitStruct);
 8002cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cca:	4619      	mov	r1, r3
 8002ccc:	481c      	ldr	r0, [pc, #112]	; (8002d40 <MX_GPIO_Init+0x19c>)
 8002cce:	f004 f8e3 	bl	8006e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SHORTED_TO_PB11_Pin SHORTED_TO_PB10_Pin BAT_12V_MEASURE_Pin */
  GPIO_InitStruct.Pin = SHORTED_TO_PB11_Pin|SHORTED_TO_PB10_Pin|BAT_12V_MEASURE_Pin;
 8002cd2:	f24c 0308 	movw	r3, #49160	; 0xc008
 8002cd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4819      	ldr	r0, [pc, #100]	; (8002d4c <MX_GPIO_Init+0x1a8>)
 8002ce8:	f004 f8d6 	bl	8006e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON_4_Pin BUTTON_3_Pin BUTTON_2_Pin BUTTON_1_Pin
                           HV_REQUEST_Pin DRIVE_REQUEST_Pin */
  GPIO_InitStruct.Pin = BUTTON_4_Pin|BUTTON_3_Pin|BUTTON_2_Pin|BUTTON_1_Pin
 8002cec:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
                          |HV_REQUEST_Pin|DRIVE_REQUEST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002cfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4813      	ldr	r0, [pc, #76]	; (8002d50 <MX_GPIO_Init+0x1ac>)
 8002d02:	f004 f8c9 	bl	8006e98 <HAL_GPIO_Init>

  /*Configure GPIO pin : GASP_INTERRUPT_Pin */
  GPIO_InitStruct.Pin = GASP_INTERRUPT_Pin;
 8002d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002d0c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d12:	2300      	movs	r3, #0
 8002d14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GASP_INTERRUPT_GPIO_Port, &GPIO_InitStruct);
 8002d16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	480c      	ldr	r0, [pc, #48]	; (8002d50 <MX_GPIO_Init+0x1ac>)
 8002d1e:	f004 f8bb 	bl	8006e98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002d22:	2200      	movs	r2, #0
 8002d24:	2100      	movs	r1, #0
 8002d26:	2028      	movs	r0, #40	; 0x28
 8002d28:	f003 fcd9 	bl	80066de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d2c:	2028      	movs	r0, #40	; 0x28
 8002d2e:	f003 fcf2 	bl	8006716 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002d32:	bf00      	nop
 8002d34:	3738      	adds	r7, #56	; 0x38
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40020000 	.word	0x40020000
 8002d44:	40021400 	.word	0x40021400
 8002d48:	40020800 	.word	0x40020800
 8002d4c:	40020400 	.word	0x40020400
 8002d50:	40021800 	.word	0x40021800

08002d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002d58:	b672      	cpsid	i
}
 8002d5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  UG_PutString(5, 250, "HAL ERROR");
 8002d5c:	4a02      	ldr	r2, [pc, #8]	; (8002d68 <Error_Handler+0x14>)
 8002d5e:	21fa      	movs	r1, #250	; 0xfa
 8002d60:	2005      	movs	r0, #5
 8002d62:	f001 fa0b 	bl	800417c <UG_PutString>
 8002d66:	e7f9      	b.n	8002d5c <Error_Handler+0x8>
 8002d68:	0800f4b0 	.word	0x0800f4b0

08002d6c <init_sensors>:

/************ Timer ************/
unsigned int discrepancy_timer_ms = 0;


void init_sensors(){
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
    throttle1.min = 0x7FFF;
 8002d70:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <init_sensors+0x4c>)
 8002d72:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002d76:	805a      	strh	r2, [r3, #2]
    throttle1.max = 0;
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <init_sensors+0x4c>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	809a      	strh	r2, [r3, #4]
    throttle1.range = 1;
 8002d7e:	4b0e      	ldr	r3, [pc, #56]	; (8002db8 <init_sensors+0x4c>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	80da      	strh	r2, [r3, #6]
    throttle2.min = 0x7FFF;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <init_sensors+0x50>)
 8002d86:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002d8a:	805a      	strh	r2, [r3, #2]
    throttle2.max = 0;
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <init_sensors+0x50>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	809a      	strh	r2, [r3, #4]
    throttle2.range = 1;
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <init_sensors+0x50>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	80da      	strh	r2, [r3, #6]
    brake.min = 0x7FFF;
 8002d98:	4b09      	ldr	r3, [pc, #36]	; (8002dc0 <init_sensors+0x54>)
 8002d9a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002d9e:	805a      	strh	r2, [r3, #2]
    brake.max = 0;
 8002da0:	4b07      	ldr	r3, [pc, #28]	; (8002dc0 <init_sensors+0x54>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	809a      	strh	r2, [r3, #4]
    brake.range = 1;
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <init_sensors+0x54>)
 8002da8:	2201      	movs	r2, #1
 8002daa:	80da      	strh	r2, [r3, #6]
}
 8002dac:	bf00      	nop
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	200027f0 	.word	0x200027f0
 8002dbc:	200027fc 	.word	0x200027fc
 8002dc0:	20002808 	.word	0x20002808

08002dc4 <select_adc_channel>:
// APPS
uint8_t THROTTLE_MULTIPLIER = 100;
const uint8_t THROTTLE_MAP[8] = { 95, 71, 59, 47, 35, 23, 11, 5 };

void select_adc_channel(ADC_HandleTypeDef *hadc, ADC_CHAN channel)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b086      	sub	sp, #24
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
    ADC_ChannelConfTypeDef sConfig = {0};
 8002dd0:	f107 0308 	add.w	r3, r7, #8
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
    switch (channel)
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d844      	bhi.n	8002e72 <select_adc_channel+0xae>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <select_adc_channel+0x2c>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e05 	.word	0x08002e05
 8002df4:	08002e1b 	.word	0x08002e1b
 8002df8:	08002e31 	.word	0x08002e31
 8002dfc:	08002e47 	.word	0x08002e47
 8002e00:	08002e5d 	.word	0x08002e5d
    {
        case APPS1:
            sConfig.Channel = ADC_CHANNEL_10;
 8002e04:	230a      	movs	r3, #10
 8002e06:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	60fb      	str	r3, [r7, #12]

			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002e0c:	f107 0308 	add.w	r3, r7, #8
 8002e10:	4619      	mov	r1, r3
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f002 fae0 	bl	80053d8 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002e18:	e02c      	b.n	8002e74 <select_adc_channel+0xb0>

        case APPS2:
			sConfig.Channel = ADC_CHANNEL_8;
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002e22:	f107 0308 	add.w	r3, r7, #8
 8002e26:	4619      	mov	r1, r3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f002 fad5 	bl	80053d8 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002e2e:	e021      	b.n	8002e74 <select_adc_channel+0xb0>
        case BSE:
			sConfig.Channel = ADC_CHANNEL_15;
 8002e30:	230f      	movs	r3, #15
 8002e32:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002e34:	2301      	movs	r3, #1
 8002e36:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002e38:	f107 0308 	add.w	r3, r7, #8
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f002 faca 	bl	80053d8 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002e44:	e016      	b.n	8002e74 <select_adc_channel+0xb0>
        case KNOB1:
			sConfig.Channel = ADC_CHANNEL_13;
 8002e46:	230d      	movs	r3, #13
 8002e48:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002e4e:	f107 0308 	add.w	r3, r7, #8
 8002e52:	4619      	mov	r1, r3
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f002 fabf 	bl	80053d8 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002e5a:	e00b      	b.n	8002e74 <select_adc_channel+0xb0>
        case KNOB2:
			sConfig.Channel = ADC_CHANNEL_12;
 8002e5c:	230c      	movs	r3, #12
 8002e5e:	60bb      	str	r3, [r7, #8]
			sConfig.Rank = 1;
 8002e60:	2301      	movs	r3, #1
 8002e62:	60fb      	str	r3, [r7, #12]
			if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK)
 8002e64:	f107 0308 	add.w	r3, r7, #8
 8002e68:	4619      	mov	r1, r3
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f002 fab4 	bl	80053d8 <HAL_ADC_ConfigChannel>
			{
//				Error_Handler();
			}
			break;
 8002e70:	e000      	b.n	8002e74 <select_adc_channel+0xb0>
        default:
            break;
 8002e72:	bf00      	nop
    }
}
 8002e74:	bf00      	nop
 8002e76:	3718      	adds	r7, #24
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}

08002e7c <get_adc_conversion>:

uint32_t get_adc_conversion(ADC_HandleTypeDef *hadc, ADC_CHAN channel) {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	70fb      	strb	r3, [r7, #3]

	select_adc_channel(hadc, channel);
 8002e88:	78fb      	ldrb	r3, [r7, #3]
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f7ff ff99 	bl	8002dc4 <select_adc_channel>

	uint32_t conversion;

	HAL_ADC_Start(hadc);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f002 f93a 	bl	800510c <HAL_ADC_Start>

	// Wait for the conversion to complete
	HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY);
 8002e98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f002 fa03 	bl	80052a8 <HAL_ADC_PollForConversion>

	// Get the ADC value
	conversion = HAL_ADC_GetValue(hadc);
 8002ea2:	6878      	ldr	r0, [r7, #4]
 8002ea4:	f002 fa8b 	bl	80053be <HAL_ADC_GetValue>
 8002ea8:	60f8      	str	r0, [r7, #12]

	return conversion;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}

08002eb4 <run_calibration>:


// Update sensors

void run_calibration() {
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
    update_minmax(&throttle1);
 8002eb8:	4805      	ldr	r0, [pc, #20]	; (8002ed0 <run_calibration+0x1c>)
 8002eba:	f000 f96b 	bl	8003194 <update_minmax>
    update_minmax(&throttle2);
 8002ebe:	4805      	ldr	r0, [pc, #20]	; (8002ed4 <run_calibration+0x20>)
 8002ec0:	f000 f968 	bl	8003194 <update_minmax>
    update_minmax(&brake);
 8002ec4:	4804      	ldr	r0, [pc, #16]	; (8002ed8 <run_calibration+0x24>)
 8002ec6:	f000 f965 	bl	8003194 <update_minmax>
}
 8002eca:	bf00      	nop
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	200027f0 	.word	0x200027f0
 8002ed4:	200027fc 	.word	0x200027fc
 8002ed8:	20002808 	.word	0x20002808

08002edc <update_sensor_vals>:

void update_sensor_vals(ADC_HandleTypeDef *hadc1, ADC_HandleTypeDef *hadc3) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
    throttle1.raw = get_adc_conversion(hadc1, APPS1);
 8002ee6:	2100      	movs	r1, #0
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f7ff ffc7 	bl	8002e7c <get_adc_conversion>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	4b25      	ldr	r3, [pc, #148]	; (8002f88 <update_sensor_vals+0xac>)
 8002ef4:	801a      	strh	r2, [r3, #0]
    update_percent(&throttle1);
 8002ef6:	4824      	ldr	r0, [pc, #144]	; (8002f88 <update_sensor_vals+0xac>)
 8002ef8:	f000 f92a 	bl	8003150 <update_percent>
    throttle2.raw = get_adc_conversion(hadc3, APPS2);
 8002efc:	2101      	movs	r1, #1
 8002efe:	6838      	ldr	r0, [r7, #0]
 8002f00:	f7ff ffbc 	bl	8002e7c <get_adc_conversion>
 8002f04:	4603      	mov	r3, r0
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	4b20      	ldr	r3, [pc, #128]	; (8002f8c <update_sensor_vals+0xb0>)
 8002f0a:	801a      	strh	r2, [r3, #0]
    update_percent(&throttle2);
 8002f0c:	481f      	ldr	r0, [pc, #124]	; (8002f8c <update_sensor_vals+0xb0>)
 8002f0e:	f000 f91f 	bl	8003150 <update_percent>
    brake.raw = get_adc_conversion(hadc3, BSE);
 8002f12:	2102      	movs	r1, #2
 8002f14:	6838      	ldr	r0, [r7, #0]
 8002f16:	f7ff ffb1 	bl	8002e7c <get_adc_conversion>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	4b1c      	ldr	r3, [pc, #112]	; (8002f90 <update_sensor_vals+0xb4>)
 8002f20:	801a      	strh	r2, [r3, #0]
    update_percent(&brake);
 8002f22:	481b      	ldr	r0, [pc, #108]	; (8002f90 <update_sensor_vals+0xb4>)
 8002f24:	f000 f914 	bl	8003150 <update_percent>
    torque_percentage = get_adc_conversion(hadc1, KNOB2) * 100 / 4095;
 8002f28:	2104      	movs	r1, #4
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff ffa6 	bl	8002e7c <get_adc_conversion>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2264      	movs	r2, #100	; 0x64
 8002f34:	fb03 f202 	mul.w	r2, r3, r2
 8002f38:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <update_sensor_vals+0xb8>)
 8002f3a:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3e:	1ad2      	subs	r2, r2, r3
 8002f40:	0852      	lsrs	r2, r2, #1
 8002f42:	4413      	add	r3, r2
 8002f44:	0adb      	lsrs	r3, r3, #11
 8002f46:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <update_sensor_vals+0xbc>)
 8002f48:	6013      	str	r3, [r2, #0]
     * be immediately stopped completely.
     *
     * It is not necessary to Open the Shutdown Circuit, the motor
     * controller(s) stopping the power to the Motor(s) is sufficient.
     */
    if (has_discrepancy()) {
 8002f4a:	f000 f8a5 	bl	8003098 <has_discrepancy>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d011      	beq.n	8002f78 <update_sensor_vals+0x9c>
        discrepancy_timer_ms += TMR1_PERIOD_MS;
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <update_sensor_vals+0xc0>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	3314      	adds	r3, #20
 8002f5a:	4a10      	ldr	r2, [pc, #64]	; (8002f9c <update_sensor_vals+0xc0>)
 8002f5c:	6013      	str	r3, [r2, #0]
        if (discrepancy_timer_ms > MAX_DISCREPANCY_MS && state == DRIVE) {
 8002f5e:	4b0f      	ldr	r3, [pc, #60]	; (8002f9c <update_sensor_vals+0xc0>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b64      	cmp	r3, #100	; 0x64
 8002f64:	d90b      	bls.n	8002f7e <update_sensor_vals+0xa2>
 8002f66:	4b0e      	ldr	r3, [pc, #56]	; (8002fa0 <update_sensor_vals+0xc4>)
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b03      	cmp	r3, #3
 8002f6e:	d106      	bne.n	8002f7e <update_sensor_vals+0xa2>
            report_fault(SENSOR_DISCREPANCY);
 8002f70:	2005      	movs	r0, #5
 8002f72:	f7fe fe0f 	bl	8001b94 <report_fault>
        }
    } else {
        discrepancy_timer_ms = 0;
    }
}
 8002f76:	e002      	b.n	8002f7e <update_sensor_vals+0xa2>
        discrepancy_timer_ms = 0;
 8002f78:	4b08      	ldr	r3, [pc, #32]	; (8002f9c <update_sensor_vals+0xc0>)
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	601a      	str	r2, [r3, #0]
}
 8002f7e:	bf00      	nop
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200027f0 	.word	0x200027f0
 8002f8c:	200027fc 	.word	0x200027fc
 8002f90:	20002808 	.word	0x20002808
 8002f94:	00100101 	.word	0x00100101
 8002f98:	200000a4 	.word	0x200000a4
 8002f9c:	20002814 	.word	0x20002814
 8002fa0:	2000008d 	.word	0x2000008d

08002fa4 <requested_throttle>:

uint16_t requested_throttle(){
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
    temp_attenuate();
 8002faa:	f000 f837 	bl	800301c <temp_attenuate>


    uint32_t throttle = ((uint32_t)throttle2.percent * MAX_TORQUE) / 100;  //upscale for MC code
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <requested_throttle+0x68>)
 8002fb0:	891b      	ldrh	r3, [r3, #8]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f640 03fc 	movw	r3, #2300	; 0x8fc
 8002fb8:	fb02 f303 	mul.w	r3, r2, r3
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <requested_throttle+0x6c>)
 8002fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc2:	095b      	lsrs	r3, r3, #5
 8002fc4:	607b      	str	r3, [r7, #4]

    throttle = (throttle * THROTTLE_MULTIPLIER) / 100;       //attenuate for temperature
 8002fc6:	4b13      	ldr	r3, [pc, #76]	; (8003014 <requested_throttle+0x70>)
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	461a      	mov	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	fb02 f303 	mul.w	r3, r2, r3
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <requested_throttle+0x6c>)
 8002fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd8:	095b      	lsrs	r3, r3, #5
 8002fda:	607b      	str	r3, [r7, #4]
    throttle = throttle * torque_percentage / 100;
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <requested_throttle+0x74>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	fb02 f303 	mul.w	r3, r2, r3
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <requested_throttle+0x6c>)
 8002fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fec:	095b      	lsrs	r3, r3, #5
 8002fee:	607b      	str	r3, [r7, #4]

    if (throttle >= 5.0) {			//case 1: if the pedal is actually being pressed return on a 1:1 scale
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d902      	bls.n	8002ffc <requested_throttle+0x58>
    	return (uint16_t)throttle;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	e003      	b.n	8003004 <requested_throttle+0x60>
    } else {						//case 2: if we don't know if it's being pressed or just car shaking
    	return (uint16_t)throttle / 2;	//return on 1:1/2 scale
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	b29b      	uxth	r3, r3
    }
	return 1;
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	200027fc 	.word	0x200027fc
 8003010:	51eb851f 	.word	0x51eb851f
 8003014:	200000a8 	.word	0x200000a8
 8003018:	200000a4 	.word	0x200000a4

0800301c <temp_attenuate>:

void temp_attenuate() {
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
    int t = PACK_TEMP - 50;
 8003022:	4b11      	ldr	r3, [pc, #68]	; (8003068 <temp_attenuate+0x4c>)
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	b2db      	uxtb	r3, r3
 8003028:	3b32      	subs	r3, #50	; 0x32
 800302a:	607b      	str	r3, [r7, #4]
    if (t < 0) {
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	da03      	bge.n	800303a <temp_attenuate+0x1e>
        THROTTLE_MULTIPLIER = 100;
 8003032:	4b0e      	ldr	r3, [pc, #56]	; (800306c <temp_attenuate+0x50>)
 8003034:	2264      	movs	r2, #100	; 0x64
 8003036:	701a      	strb	r2, [r3, #0]
    } else if (t < 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
    } else if (t >= 8) {
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
    }
}
 8003038:	e00f      	b.n	800305a <temp_attenuate+0x3e>
    } else if (t < 8) {
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2b07      	cmp	r3, #7
 800303e:	dc06      	bgt.n	800304e <temp_attenuate+0x32>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[t];
 8003040:	4a0b      	ldr	r2, [pc, #44]	; (8003070 <temp_attenuate+0x54>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4413      	add	r3, r2
 8003046:	781a      	ldrb	r2, [r3, #0]
 8003048:	4b08      	ldr	r3, [pc, #32]	; (800306c <temp_attenuate+0x50>)
 800304a:	701a      	strb	r2, [r3, #0]
}
 800304c:	e005      	b.n	800305a <temp_attenuate+0x3e>
    } else if (t >= 8) {
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b07      	cmp	r3, #7
 8003052:	dd02      	ble.n	800305a <temp_attenuate+0x3e>
        THROTTLE_MULTIPLIER = THROTTLE_MAP[7];
 8003054:	2205      	movs	r2, #5
 8003056:	4b05      	ldr	r3, [pc, #20]	; (800306c <temp_attenuate+0x50>)
 8003058:	701a      	strb	r2, [r3, #0]
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000129 	.word	0x20000129
 800306c:	200000a8 	.word	0x200000a8
 8003070:	0800f504 	.word	0x0800f504

08003074 <sensors_calibrated>:

bool sensors_calibrated(){
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
    if(throttle2.range < APPS1_MIN_RANGE) return 0;
 8003078:	4b06      	ldr	r3, [pc, #24]	; (8003094 <sensors_calibrated+0x20>)
 800307a:	88db      	ldrh	r3, [r3, #6]
 800307c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003080:	d201      	bcs.n	8003086 <sensors_calibrated+0x12>
 8003082:	2300      	movs	r3, #0
 8003084:	e000      	b.n	8003088 <sensors_calibrated+0x14>
    if(brake.range < BRAKE_MIN_RANGE) return 0;

    return 1;
 8003086:	2301      	movs	r3, #1
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	200027fc 	.word	0x200027fc

08003098 <has_discrepancy>:
}

// check differential between the throttle sensors
// returns true only if the sensor discrepancy is > 10%
// Note: after verifying there's no discrepancy, can use either sensor(1 or 2) for remaining checks
bool has_discrepancy() {
 8003098:	b480      	push	{r7}
 800309a:	af00      	add	r7, sp, #0
    if(abs((int)throttle1.percent - (int)throttle2.percent) > 10) return 1;  //percentage discrepancy
 800309c:	4b15      	ldr	r3, [pc, #84]	; (80030f4 <has_discrepancy+0x5c>)
 800309e:	891b      	ldrh	r3, [r3, #8]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b15      	ldr	r3, [pc, #84]	; (80030f8 <has_discrepancy+0x60>)
 80030a4:	891b      	ldrh	r3, [r3, #8]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	bfb8      	it	lt
 80030ac:	425b      	neglt	r3, r3
 80030ae:	2b0a      	cmp	r3, #10
 80030b0:	dd01      	ble.n	80030b6 <has_discrepancy+0x1e>
 80030b2:	2301      	movs	r3, #1
 80030b4:	e019      	b.n	80030ea <has_discrepancy+0x52>

    return (throttle1.raw < APPS_OPEN_THRESH)
 80030b6:	4b0f      	ldr	r3, [pc, #60]	; (80030f4 <has_discrepancy+0x5c>)
 80030b8:	881b      	ldrh	r3, [r3, #0]
        || (throttle1.raw > APPS_SHORT_THRESH)
        || (throttle2.raw < APPS_OPEN_THRESH)
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 80030ba:	2bc7      	cmp	r3, #199	; 0xc7
 80030bc:	d90f      	bls.n	80030de <has_discrepancy+0x46>
        || (throttle1.raw > APPS_SHORT_THRESH)
 80030be:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <has_discrepancy+0x5c>)
 80030c0:	881b      	ldrh	r3, [r3, #0]
 80030c2:	f640 723c 	movw	r2, #3900	; 0xf3c
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d809      	bhi.n	80030de <has_discrepancy+0x46>
        || (throttle2.raw < APPS_OPEN_THRESH)
 80030ca:	4b0b      	ldr	r3, [pc, #44]	; (80030f8 <has_discrepancy+0x60>)
 80030cc:	881b      	ldrh	r3, [r3, #0]
 80030ce:	2bc7      	cmp	r3, #199	; 0xc7
 80030d0:	d905      	bls.n	80030de <has_discrepancy+0x46>
        || (throttle2.raw > APPS_SHORT_THRESH);   //wiring fault
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <has_discrepancy+0x60>)
 80030d4:	881b      	ldrh	r3, [r3, #0]
 80030d6:	f640 723c 	movw	r2, #3900	; 0xf3c
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <has_discrepancy+0x4a>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <has_discrepancy+0x4c>
 80030e2:	2300      	movs	r3, #0
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	b2db      	uxtb	r3, r3
	return false;

}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	200027f0 	.word	0x200027f0
 80030f8:	200027fc 	.word	0x200027fc

080030fc <brake_implausible>:

// check for soft BSPD
// see EV.5.7 of FSAE 2022 rulebook
bool brake_implausible() {
 80030fc:	b480      	push	{r7}
 80030fe:	af00      	add	r7, sp, #0
    if (error == BRAKE_IMPLAUSIBLE) {
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <brake_implausible+0x48>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b06      	cmp	r3, #6
 8003108:	d107      	bne.n	800311a <brake_implausible+0x1e>
        // once brake implausibility detected,
        // can only revert to normal if throttle unapplied
        return !(throttle1.percent <= APPS1_BSPD_RESET);
 800310a:	4b0f      	ldr	r3, [pc, #60]	; (8003148 <brake_implausible+0x4c>)
 800310c:	891b      	ldrh	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	bf8c      	ite	hi
 8003112:	2301      	movhi	r3, #1
 8003114:	2300      	movls	r3, #0
 8003116:	b2db      	uxtb	r3, r3
 8003118:	e00e      	b.n	8003138 <brake_implausible+0x3c>
    }

    // if both brake and throttle applied, brake implausible
    //return (temp_brake > 0 && temp_throttle > throttle_range * 0.25);
    return (brake.raw >= BRAKE_BSPD_THRESHOLD && throttle1.percent > APPS1_BSPD_THRESHOLD);
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <brake_implausible+0x50>)
 800311c:	881b      	ldrh	r3, [r3, #0]
 800311e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003122:	d305      	bcc.n	8003130 <brake_implausible+0x34>
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <brake_implausible+0x4c>)
 8003126:	891b      	ldrh	r3, [r3, #8]
 8003128:	2b19      	cmp	r3, #25
 800312a:	d901      	bls.n	8003130 <brake_implausible+0x34>
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <brake_implausible+0x36>
 8003130:	2300      	movs	r3, #0
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
	return false;
}
 8003138:	4618      	mov	r0, r3
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000232 	.word	0x20000232
 8003148:	200027f0 	.word	0x200027f0
 800314c:	20002808 	.word	0x20002808

08003150 <update_percent>:

void update_percent(CALIBRATED_SENSOR_t* sensor){
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
    uint32_t raw = (uint32_t)clamp(sensor->raw, sensor->min, sensor->max);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8818      	ldrh	r0, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	8859      	ldrh	r1, [r3, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	889b      	ldrh	r3, [r3, #4]
 8003164:	461a      	mov	r2, r3
 8003166:	f000 f889 	bl	800327c <clamp>
 800316a:	4603      	mov	r3, r0
 800316c:	60fb      	str	r3, [r7, #12]
    sensor->percent = (uint16_t)((100*(raw-sensor->min))/((sensor->range)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	885b      	ldrh	r3, [r3, #2]
 8003172:	461a      	mov	r2, r3
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	2264      	movs	r2, #100	; 0x64
 800317a:	fb02 f303 	mul.w	r3, r2, r3
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	88d2      	ldrh	r2, [r2, #6]
 8003182:	fbb3 f3f2 	udiv	r3, r3, r2
 8003186:	b29a      	uxth	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	811a      	strh	r2, [r3, #8]
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <update_minmax>:

void update_minmax(CALIBRATED_SENSOR_t* sensor){
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
    if (sensor->raw > sensor->max) sensor->max = sensor->raw;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	881a      	ldrh	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	889b      	ldrh	r3, [r3, #4]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d904      	bls.n	80031b2 <update_minmax+0x1e>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	881a      	ldrh	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	809a      	strh	r2, [r3, #4]
 80031b0:	e009      	b.n	80031c6 <update_minmax+0x32>
    else if (sensor->raw < sensor->min) sensor->min = sensor->raw;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	881a      	ldrh	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	885b      	ldrh	r3, [r3, #2]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d203      	bcs.n	80031c6 <update_minmax+0x32>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	881a      	ldrh	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	805a      	strh	r2, [r3, #2]
    if(sensor->max > sensor->min) sensor->range = sensor->max - sensor->min;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	889a      	ldrh	r2, [r3, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	885b      	ldrh	r3, [r3, #2]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d907      	bls.n	80031e2 <update_minmax+0x4e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	889a      	ldrh	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	885b      	ldrh	r3, [r3, #2]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	b29a      	uxth	r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	80da      	strh	r2, [r3, #6]
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <add_apps_deadzone>:

void add_apps_deadzone(){
 80031f0:	b580      	push	{r7, lr}
 80031f2:	af00      	add	r7, sp, #0
	add_deadzone(&throttle1, 5);
 80031f4:	2105      	movs	r1, #5
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <add_apps_deadzone+0x20>)
 80031f8:	f000 f810 	bl	800321c <add_deadzone>
	add_deadzone(&throttle2, 5);
 80031fc:	2105      	movs	r1, #5
 80031fe:	4805      	ldr	r0, [pc, #20]	; (8003214 <add_apps_deadzone+0x24>)
 8003200:	f000 f80c 	bl	800321c <add_deadzone>
	add_deadzone(&brake, 10);
 8003204:	210a      	movs	r1, #10
 8003206:	4804      	ldr	r0, [pc, #16]	; (8003218 <add_apps_deadzone+0x28>)
 8003208:	f000 f808 	bl	800321c <add_deadzone>
}
 800320c:	bf00      	nop
 800320e:	bd80      	pop	{r7, pc}
 8003210:	200027f0 	.word	0x200027f0
 8003214:	200027fc 	.word	0x200027fc
 8003218:	20002808 	.word	0x20002808

0800321c <add_deadzone>:

void add_deadzone(CALIBRATED_SENSOR_t* sensor, uint16_t deadzone_percentage){
 800321c:	b480      	push	{r7}
 800321e:	b085      	sub	sp, #20
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	807b      	strh	r3, [r7, #2]
	uint16_t deadzone = sensor->range * deadzone_percentage / 100;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	88db      	ldrh	r3, [r3, #6]
 800322c:	461a      	mov	r2, r3
 800322e:	887b      	ldrh	r3, [r7, #2]
 8003230:	fb02 f303 	mul.w	r3, r2, r3
 8003234:	4a10      	ldr	r2, [pc, #64]	; (8003278 <add_deadzone+0x5c>)
 8003236:	fb82 1203 	smull	r1, r2, r2, r3
 800323a:	1152      	asrs	r2, r2, #5
 800323c:	17db      	asrs	r3, r3, #31
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	81fb      	strh	r3, [r7, #14]

	// catch funky cases that would end up with a negative or 0 range
	if(deadzone >= sensor->range) return;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	88db      	ldrh	r3, [r3, #6]
 8003246:	89fa      	ldrh	r2, [r7, #14]
 8003248:	429a      	cmp	r2, r3
 800324a:	d20e      	bcs.n	800326a <add_deadzone+0x4e>

	sensor->min += deadzone;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	885a      	ldrh	r2, [r3, #2]
 8003250:	89fb      	ldrh	r3, [r7, #14]
 8003252:	4413      	add	r3, r2
 8003254:	b29a      	uxth	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	805a      	strh	r2, [r3, #2]
	sensor->range -= deadzone;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	88da      	ldrh	r2, [r3, #6]
 800325e:	89fb      	ldrh	r3, [r7, #14]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	80da      	strh	r2, [r3, #6]
 8003268:	e000      	b.n	800326c <add_deadzone+0x50>
	if(deadzone >= sensor->range) return;
 800326a:	bf00      	nop
}
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	51eb851f 	.word	0x51eb851f

0800327c <clamp>:

uint16_t clamp(uint16_t in, uint16_t min, uint16_t max){
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	80fb      	strh	r3, [r7, #6]
 8003286:	460b      	mov	r3, r1
 8003288:	80bb      	strh	r3, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	807b      	strh	r3, [r7, #2]
    if(in > max) return max;
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	887b      	ldrh	r3, [r7, #2]
 8003292:	429a      	cmp	r2, r3
 8003294:	d901      	bls.n	800329a <clamp+0x1e>
 8003296:	887b      	ldrh	r3, [r7, #2]
 8003298:	e006      	b.n	80032a8 <clamp+0x2c>
    if(in < min) return min;
 800329a:	88fa      	ldrh	r2, [r7, #6]
 800329c:	88bb      	ldrh	r3, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d201      	bcs.n	80032a6 <clamp+0x2a>
 80032a2:	88bb      	ldrh	r3, [r7, #4]
 80032a4:	e000      	b.n	80032a8 <clamp+0x2c>
    return in;
 80032a6:	88fb      	ldrh	r3, [r7, #6]
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr

080032b4 <print>:
#include "serial_print.h"

void print(char *str) {
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80032ce:	4b0f      	ldr	r3, [pc, #60]	; (800330c <HAL_MspInit+0x44>)
 80032d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d2:	4a0e      	ldr	r2, [pc, #56]	; (800330c <HAL_MspInit+0x44>)
 80032d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d8:	6413      	str	r3, [r2, #64]	; 0x40
 80032da:	4b0c      	ldr	r3, [pc, #48]	; (800330c <HAL_MspInit+0x44>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	607b      	str	r3, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e6:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_MspInit+0x44>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_MspInit+0x44>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b06      	ldr	r3, [pc, #24]	; (800330c <HAL_MspInit+0x44>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	603b      	str	r3, [r7, #0]
 80032fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003318:	f107 031c 	add.w	r3, r7, #28
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]
 8003320:	605a      	str	r2, [r3, #4]
 8003322:	609a      	str	r2, [r3, #8]
 8003324:	60da      	str	r2, [r3, #12]
 8003326:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5b      	ldr	r2, [pc, #364]	; (800349c <HAL_ADC_MspInit+0x18c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d154      	bne.n	80033dc <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003332:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a5a      	ldr	r2, [pc, #360]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003338:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003346:	61bb      	str	r3, [r7, #24]
 8003348:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800334a:	4b55      	ldr	r3, [pc, #340]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 800334c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334e:	4a54      	ldr	r2, [pc, #336]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003350:	f043 0304 	orr.w	r3, r3, #4
 8003354:	6313      	str	r3, [r2, #48]	; 0x30
 8003356:	4b52      	ldr	r3, [pc, #328]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	617b      	str	r3, [r7, #20]
 8003360:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    */
    GPIO_InitStruct.Pin = APP1_Pin|KNOB_2_Pin|KNOB_1_Pin;
 8003362:	230d      	movs	r3, #13
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003366:	2303      	movs	r3, #3
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800336e:	f107 031c 	add.w	r3, r7, #28
 8003372:	4619      	mov	r1, r3
 8003374:	484b      	ldr	r0, [pc, #300]	; (80034a4 <HAL_ADC_MspInit+0x194>)
 8003376:	f003 fd8f 	bl	8006e98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800337a:	4b4b      	ldr	r3, [pc, #300]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 800337c:	4a4b      	ldr	r2, [pc, #300]	; (80034ac <HAL_ADC_MspInit+0x19c>)
 800337e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003380:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 8003382:	2200      	movs	r2, #0
 8003384:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003386:	4b48      	ldr	r3, [pc, #288]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 8003388:	2200      	movs	r2, #0
 800338a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800338c:	4b46      	ldr	r3, [pc, #280]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 800338e:	2200      	movs	r2, #0
 8003390:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003392:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 8003394:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003398:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 800339c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033a0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80033a2:	4b41      	ldr	r3, [pc, #260]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033a4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80033a8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80033aa:	4b3f      	ldr	r3, [pc, #252]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80033b0:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033b6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b8:	4b3b      	ldr	r3, [pc, #236]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033ba:	2200      	movs	r2, #0
 80033bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80033be:	483a      	ldr	r0, [pc, #232]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033c0:	f003 f9c4 	bl	800674c <HAL_DMA_Init>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80033ca:	f7ff fcc3 	bl	8002d54 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033d2:	639a      	str	r2, [r3, #56]	; 0x38
 80033d4:	4a34      	ldr	r2, [pc, #208]	; (80034a8 <HAL_ADC_MspInit+0x198>)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80033da:	e05b      	b.n	8003494 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC3)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a33      	ldr	r2, [pc, #204]	; (80034b0 <HAL_ADC_MspInit+0x1a0>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d156      	bne.n	8003494 <HAL_ADC_MspInit+0x184>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80033e6:	4b2e      	ldr	r3, [pc, #184]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 80033e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ea:	4a2d      	ldr	r2, [pc, #180]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 80033ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f0:	6453      	str	r3, [r2, #68]	; 0x44
 80033f2:	4b2b      	ldr	r3, [pc, #172]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 80033f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033fa:	613b      	str	r3, [r7, #16]
 80033fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80033fe:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a27      	ldr	r2, [pc, #156]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 8003404:	f043 0320 	orr.w	r3, r3, #32
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <HAL_ADC_MspInit+0x190>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0320 	and.w	r3, r3, #32
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BSE_Pin|APP2_Pin;
 8003416:	f44f 6384 	mov.w	r3, #1056	; 0x420
 800341a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800341c:	2303      	movs	r3, #3
 800341e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003420:	2300      	movs	r3, #0
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003424:	f107 031c 	add.w	r3, r7, #28
 8003428:	4619      	mov	r1, r3
 800342a:	4822      	ldr	r0, [pc, #136]	; (80034b4 <HAL_ADC_MspInit+0x1a4>)
 800342c:	f003 fd34 	bl	8006e98 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003432:	4a22      	ldr	r2, [pc, #136]	; (80034bc <HAL_ADC_MspInit+0x1ac>)
 8003434:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8003436:	4b20      	ldr	r3, [pc, #128]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003438:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800343c:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800343e:	4b1e      	ldr	r3, [pc, #120]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003440:	2200      	movs	r2, #0
 8003442:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8003444:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 800344a:	4b1b      	ldr	r3, [pc, #108]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003458:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800345a:	4b17      	ldr	r3, [pc, #92]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 800345c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003460:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003464:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003468:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 800346c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003470:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003472:	4b11      	ldr	r3, [pc, #68]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003474:	2200      	movs	r2, #0
 8003476:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8003478:	480f      	ldr	r0, [pc, #60]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 800347a:	f003 f967 	bl	800674c <HAL_DMA_Init>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_ADC_MspInit+0x178>
      Error_Handler();
 8003484:	f7ff fc66 	bl	8002d54 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a0b      	ldr	r2, [pc, #44]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 800348c:	639a      	str	r2, [r3, #56]	; 0x38
 800348e:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <HAL_ADC_MspInit+0x1a8>)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6393      	str	r3, [r2, #56]	; 0x38
}
 8003494:	bf00      	nop
 8003496:	3730      	adds	r7, #48	; 0x30
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}
 800349c:	40012000 	.word	0x40012000
 80034a0:	40023800 	.word	0x40023800
 80034a4:	40020800 	.word	0x40020800
 80034a8:	200022cc 	.word	0x200022cc
 80034ac:	40026410 	.word	0x40026410
 80034b0:	40012200 	.word	0x40012200
 80034b4:	40021400 	.word	0x40021400
 80034b8:	2000232c 	.word	0x2000232c
 80034bc:	40026428 	.word	0x40026428

080034c0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08c      	sub	sp, #48	; 0x30
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 031c 	add.w	r3, r7, #28
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a42      	ldr	r2, [pc, #264]	; (80035e8 <HAL_CAN_MspInit+0x128>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d13a      	bne.n	8003558 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80034e2:	4b42      	ldr	r3, [pc, #264]	; (80035ec <HAL_CAN_MspInit+0x12c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3301      	adds	r3, #1
 80034e8:	4a40      	ldr	r2, [pc, #256]	; (80035ec <HAL_CAN_MspInit+0x12c>)
 80034ea:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80034ec:	4b3f      	ldr	r3, [pc, #252]	; (80035ec <HAL_CAN_MspInit+0x12c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d10b      	bne.n	800350c <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80034f4:	4b3e      	ldr	r3, [pc, #248]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 80034fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003500:	4b3b      	ldr	r3, [pc, #236]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003508:	61bb      	str	r3, [r7, #24]
 800350a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800350c:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 800350e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003510:	4a37      	ldr	r2, [pc, #220]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	6313      	str	r3, [r2, #48]	; 0x30
 8003518:	4b35      	ldr	r3, [pc, #212]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 800351a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = PCAN_RX_Pin|PCAN_TX_Pin;
 8003524:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352a:	2302      	movs	r3, #2
 800352c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800352e:	2300      	movs	r3, #0
 8003530:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003532:	2303      	movs	r3, #3
 8003534:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003536:	2309      	movs	r3, #9
 8003538:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800353a:	f107 031c 	add.w	r3, r7, #28
 800353e:	4619      	mov	r1, r3
 8003540:	482c      	ldr	r0, [pc, #176]	; (80035f4 <HAL_CAN_MspInit+0x134>)
 8003542:	f003 fca9 	bl	8006e98 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2100      	movs	r1, #0
 800354a:	2014      	movs	r0, #20
 800354c:	f003 f8c7 	bl	80066de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003550:	2014      	movs	r0, #20
 8003552:	f003 f8e0 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003556:	e042      	b.n	80035de <HAL_CAN_MspInit+0x11e>
  else if(hcan->Instance==CAN2)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a26      	ldr	r2, [pc, #152]	; (80035f8 <HAL_CAN_MspInit+0x138>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d13d      	bne.n	80035de <HAL_CAN_MspInit+0x11e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003562:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 8003568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800356c:	6413      	str	r3, [r2, #64]	; 0x40
 800356e:	4b20      	ldr	r3, [pc, #128]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 8003570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003576:	613b      	str	r3, [r7, #16]
 8003578:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 800357a:	4b1c      	ldr	r3, [pc, #112]	; (80035ec <HAL_CAN_MspInit+0x12c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a1a      	ldr	r2, [pc, #104]	; (80035ec <HAL_CAN_MspInit+0x12c>)
 8003582:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003584:	4b19      	ldr	r3, [pc, #100]	; (80035ec <HAL_CAN_MspInit+0x12c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d10b      	bne.n	80035a4 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800358c:	4b18      	ldr	r3, [pc, #96]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 8003592:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
 8003598:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035a4:	4b12      	ldr	r3, [pc, #72]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 80035a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a8:	4a11      	ldr	r2, [pc, #68]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 80035aa:	f043 0302 	orr.w	r3, r3, #2
 80035ae:	6313      	str	r3, [r2, #48]	; 0x30
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <HAL_CAN_MspInit+0x130>)
 80035b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = TCAN_RX_Pin|TCAN_TX_Pin;
 80035bc:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80035c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ca:	2303      	movs	r3, #3
 80035cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80035ce:	2309      	movs	r3, #9
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035d2:	f107 031c 	add.w	r3, r7, #28
 80035d6:	4619      	mov	r1, r3
 80035d8:	4808      	ldr	r0, [pc, #32]	; (80035fc <HAL_CAN_MspInit+0x13c>)
 80035da:	f003 fc5d 	bl	8006e98 <HAL_GPIO_Init>
}
 80035de:	bf00      	nop
 80035e0:	3730      	adds	r7, #48	; 0x30
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40006400 	.word	0x40006400
 80035ec:	20002818 	.word	0x20002818
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40020000 	.word	0x40020000
 80035f8:	40006800 	.word	0x40006800
 80035fc:	40020400 	.word	0x40020400

08003600 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b0ac      	sub	sp, #176	; 0xb0
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003608:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
 8003612:	609a      	str	r2, [r3, #8]
 8003614:	60da      	str	r2, [r3, #12]
 8003616:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003618:	f107 0318 	add.w	r3, r7, #24
 800361c:	2284      	movs	r2, #132	; 0x84
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f00b f9bb 	bl	800e99c <memset>
  if(hsd->Instance==SDMMC1)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a74      	ldr	r2, [pc, #464]	; (80037fc <HAL_SD_MspInit+0x1fc>)
 800362c:	4293      	cmp	r3, r2
 800362e:	f040 80e0 	bne.w	80037f2 <HAL_SD_MspInit+0x1f2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8003632:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8003636:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8003638:	2300      	movs	r3, #0
 800363a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800363e:	2300      	movs	r3, #0
 8003640:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003644:	f107 0318 	add.w	r3, r7, #24
 8003648:	4618      	mov	r0, r3
 800364a:	f004 fb33 	bl	8007cb4 <HAL_RCCEx_PeriphCLKConfig>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d001      	beq.n	8003658 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8003654:	f7ff fb7e 	bl	8002d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003658:	4b69      	ldr	r3, [pc, #420]	; (8003800 <HAL_SD_MspInit+0x200>)
 800365a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800365c:	4a68      	ldr	r2, [pc, #416]	; (8003800 <HAL_SD_MspInit+0x200>)
 800365e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003662:	6453      	str	r3, [r2, #68]	; 0x44
 8003664:	4b66      	ldr	r3, [pc, #408]	; (8003800 <HAL_SD_MspInit+0x200>)
 8003666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003670:	4b63      	ldr	r3, [pc, #396]	; (8003800 <HAL_SD_MspInit+0x200>)
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	4a62      	ldr	r2, [pc, #392]	; (8003800 <HAL_SD_MspInit+0x200>)
 8003676:	f043 0304 	orr.w	r3, r3, #4
 800367a:	6313      	str	r3, [r2, #48]	; 0x30
 800367c:	4b60      	ldr	r3, [pc, #384]	; (8003800 <HAL_SD_MspInit+0x200>)
 800367e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	613b      	str	r3, [r7, #16]
 8003686:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003688:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_SD_MspInit+0x200>)
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	4a5c      	ldr	r2, [pc, #368]	; (8003800 <HAL_SD_MspInit+0x200>)
 800368e:	f043 0308 	orr.w	r3, r3, #8
 8003692:	6313      	str	r3, [r2, #48]	; 0x30
 8003694:	4b5a      	ldr	r3, [pc, #360]	; (8003800 <HAL_SD_MspInit+0x200>)
 8003696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]
    /**SDMMC1 GPIO Configuration
    PC8     ------> SDMMC1_D0
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 80036a0:	f44f 5388 	mov.w	r3, #4352	; 0x1100
 80036a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036a8:	2302      	movs	r3, #2
 80036aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036ae:	2301      	movs	r3, #1
 80036b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036b4:	2303      	movs	r3, #3
 80036b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80036ba:	230c      	movs	r3, #12
 80036bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036c4:	4619      	mov	r1, r3
 80036c6:	484f      	ldr	r0, [pc, #316]	; (8003804 <HAL_SD_MspInit+0x204>)
 80036c8:	f003 fbe6 	bl	8006e98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80036cc:	2304      	movs	r3, #4
 80036ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d2:	2302      	movs	r3, #2
 80036d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d8:	2301      	movs	r3, #1
 80036da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036de:	2303      	movs	r3, #3
 80036e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80036e4:	230c      	movs	r3, #12
 80036e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80036ea:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036ee:	4619      	mov	r1, r3
 80036f0:	4845      	ldr	r0, [pc, #276]	; (8003808 <HAL_SD_MspInit+0x208>)
 80036f2:	f003 fbd1 	bl	8006e98 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80036f6:	4b45      	ldr	r3, [pc, #276]	; (800380c <HAL_SD_MspInit+0x20c>)
 80036f8:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_SD_MspInit+0x210>)
 80036fa:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80036fc:	4b43      	ldr	r3, [pc, #268]	; (800380c <HAL_SD_MspInit+0x20c>)
 80036fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003702:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003704:	4b41      	ldr	r3, [pc, #260]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003706:	2200      	movs	r2, #0
 8003708:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800370a:	4b40      	ldr	r3, [pc, #256]	; (800380c <HAL_SD_MspInit+0x20c>)
 800370c:	2200      	movs	r2, #0
 800370e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003710:	4b3e      	ldr	r3, [pc, #248]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003712:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003716:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003718:	4b3c      	ldr	r3, [pc, #240]	; (800380c <HAL_SD_MspInit+0x20c>)
 800371a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800371e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003720:	4b3a      	ldr	r3, [pc, #232]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003726:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003728:	4b38      	ldr	r3, [pc, #224]	; (800380c <HAL_SD_MspInit+0x20c>)
 800372a:	2220      	movs	r2, #32
 800372c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800372e:	4b37      	ldr	r3, [pc, #220]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003730:	2200      	movs	r2, #0
 8003732:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003734:	4b35      	ldr	r3, [pc, #212]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003736:	2204      	movs	r2, #4
 8003738:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800373a:	4b34      	ldr	r3, [pc, #208]	; (800380c <HAL_SD_MspInit+0x20c>)
 800373c:	2203      	movs	r2, #3
 800373e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003740:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003742:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003746:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003748:	4b30      	ldr	r3, [pc, #192]	; (800380c <HAL_SD_MspInit+0x20c>)
 800374a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800374e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003750:	482e      	ldr	r0, [pc, #184]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003752:	f002 fffb 	bl	800674c <HAL_DMA_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 800375c:	f7ff fafa 	bl	8002d54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4a2a      	ldr	r2, [pc, #168]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003764:	641a      	str	r2, [r3, #64]	; 0x40
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_SD_MspInit+0x20c>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 800376c:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_SD_MspInit+0x214>)
 800376e:	4a2a      	ldr	r2, [pc, #168]	; (8003818 <HAL_SD_MspInit+0x218>)
 8003770:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003772:	4b28      	ldr	r3, [pc, #160]	; (8003814 <HAL_SD_MspInit+0x214>)
 8003774:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003778:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800377a:	4b26      	ldr	r3, [pc, #152]	; (8003814 <HAL_SD_MspInit+0x214>)
 800377c:	2240      	movs	r2, #64	; 0x40
 800377e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003780:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_SD_MspInit+0x214>)
 8003782:	2200      	movs	r2, #0
 8003784:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003786:	4b23      	ldr	r3, [pc, #140]	; (8003814 <HAL_SD_MspInit+0x214>)
 8003788:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800378c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800378e:	4b21      	ldr	r3, [pc, #132]	; (8003814 <HAL_SD_MspInit+0x214>)
 8003790:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003794:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003796:	4b1f      	ldr	r3, [pc, #124]	; (8003814 <HAL_SD_MspInit+0x214>)
 8003798:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800379c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800379e:	4b1d      	ldr	r3, [pc, #116]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037a0:	2220      	movs	r2, #32
 80037a2:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80037aa:	4b1a      	ldr	r3, [pc, #104]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037ac:	2204      	movs	r2, #4
 80037ae:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80037b0:	4b18      	ldr	r3, [pc, #96]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037b2:	2203      	movs	r2, #3
 80037b4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80037b6:	4b17      	ldr	r3, [pc, #92]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80037bc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037c0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80037c4:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80037c6:	4813      	ldr	r0, [pc, #76]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037c8:	f002 ffc0 	bl	800674c <HAL_DMA_Init>
 80037cc:	4603      	mov	r3, r0
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80037d2:	f7ff fabf 	bl	8002d54 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	4a0e      	ldr	r2, [pc, #56]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037da:	63da      	str	r2, [r3, #60]	; 0x3c
 80037dc:	4a0d      	ldr	r2, [pc, #52]	; (8003814 <HAL_SD_MspInit+0x214>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80037e2:	2200      	movs	r2, #0
 80037e4:	2100      	movs	r1, #0
 80037e6:	2031      	movs	r0, #49	; 0x31
 80037e8:	f002 ff79 	bl	80066de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80037ec:	2031      	movs	r0, #49	; 0x31
 80037ee:	f002 ff92 	bl	8006716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80037f2:	bf00      	nop
 80037f4:	37b0      	adds	r7, #176	; 0xb0
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	40012c00 	.word	0x40012c00
 8003800:	40023800 	.word	0x40023800
 8003804:	40020800 	.word	0x40020800
 8003808:	40020c00 	.word	0x40020c00
 800380c:	20002460 	.word	0x20002460
 8003810:	40026458 	.word	0x40026458
 8003814:	200024c0 	.word	0x200024c0
 8003818:	400264a0 	.word	0x400264a0

0800381c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b08c      	sub	sp, #48	; 0x30
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	f107 031c 	add.w	r3, r7, #28
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]
 8003830:	60da      	str	r2, [r3, #12]
 8003832:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383c:	d129      	bne.n	8003892 <HAL_TIM_Base_MspInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383e:	4b3a      	ldr	r3, [pc, #232]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	4a39      	ldr	r2, [pc, #228]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	6413      	str	r3, [r2, #64]	; 0x40
 800384a:	4b37      	ldr	r3, [pc, #220]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003856:	4b34      	ldr	r3, [pc, #208]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 8003858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385a:	4a33      	ldr	r2, [pc, #204]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 800385c:	f043 0301 	orr.w	r3, r3, #1
 8003860:	6313      	str	r3, [r2, #48]	; 0x30
 8003862:	4b31      	ldr	r3, [pc, #196]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 8003864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800386e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003874:	2302      	movs	r3, #2
 8003876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003878:	2300      	movs	r3, #0
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800387c:	2300      	movs	r3, #0
 800387e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003880:	2301      	movs	r3, #1
 8003882:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003884:	f107 031c 	add.w	r3, r7, #28
 8003888:	4619      	mov	r1, r3
 800388a:	4828      	ldr	r0, [pc, #160]	; (800392c <HAL_TIM_Base_MspInit+0x110>)
 800388c:	f003 fb04 	bl	8006e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003890:	e046      	b.n	8003920 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM4)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a26      	ldr	r2, [pc, #152]	; (8003930 <HAL_TIM_Base_MspInit+0x114>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d128      	bne.n	80038ee <HAL_TIM_Base_MspInit+0xd2>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800389c:	4b22      	ldr	r3, [pc, #136]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 800389e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a0:	4a21      	ldr	r2, [pc, #132]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038a2:	f043 0304 	orr.w	r3, r3, #4
 80038a6:	6413      	str	r3, [r2, #64]	; 0x40
 80038a8:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ac:	f003 0304 	and.w	r3, r3, #4
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80038b4:	4b1c      	ldr	r3, [pc, #112]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b8:	4a1b      	ldr	r2, [pc, #108]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038ba:	f043 0310 	orr.w	r3, r3, #16
 80038be:	6313      	str	r3, [r2, #48]	; 0x30
 80038c0:	4b19      	ldr	r3, [pc, #100]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c4:	f003 0310 	and.w	r3, r3, #16
 80038c8:	60fb      	str	r3, [r7, #12]
 80038ca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80038cc:	2301      	movs	r3, #1
 80038ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038d0:	2302      	movs	r3, #2
 80038d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038d4:	2300      	movs	r3, #0
 80038d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038d8:	2300      	movs	r3, #0
 80038da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80038dc:	2302      	movs	r3, #2
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80038e0:	f107 031c 	add.w	r3, r7, #28
 80038e4:	4619      	mov	r1, r3
 80038e6:	4813      	ldr	r0, [pc, #76]	; (8003934 <HAL_TIM_Base_MspInit+0x118>)
 80038e8:	f003 fad6 	bl	8006e98 <HAL_GPIO_Init>
}
 80038ec:	e018      	b.n	8003920 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM7)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a11      	ldr	r2, [pc, #68]	; (8003938 <HAL_TIM_Base_MspInit+0x11c>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d113      	bne.n	8003920 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80038f8:	4b0b      	ldr	r3, [pc, #44]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	4a0a      	ldr	r2, [pc, #40]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 80038fe:	f043 0320 	orr.w	r3, r3, #32
 8003902:	6413      	str	r3, [r2, #64]	; 0x40
 8003904:	4b08      	ldr	r3, [pc, #32]	; (8003928 <HAL_TIM_Base_MspInit+0x10c>)
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	f003 0320 	and.w	r3, r3, #32
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003910:	2200      	movs	r2, #0
 8003912:	2100      	movs	r1, #0
 8003914:	2037      	movs	r0, #55	; 0x37
 8003916:	f002 fee2 	bl	80066de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800391a:	2037      	movs	r0, #55	; 0x37
 800391c:	f002 fefb 	bl	8006716 <HAL_NVIC_EnableIRQ>
}
 8003920:	bf00      	nop
 8003922:	3730      	adds	r7, #48	; 0x30
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	40020000 	.word	0x40020000
 8003930:	40000800 	.word	0x40000800
 8003934:	40021000 	.word	0x40021000
 8003938:	40001400 	.word	0x40001400

0800393c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b0ae      	sub	sp, #184	; 0xb8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003944:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	605a      	str	r2, [r3, #4]
 800394e:	609a      	str	r2, [r3, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003954:	f107 0320 	add.w	r3, r7, #32
 8003958:	2284      	movs	r2, #132	; 0x84
 800395a:	2100      	movs	r1, #0
 800395c:	4618      	mov	r0, r3
 800395e:	f00b f81d 	bl	800e99c <memset>
  if(huart->Instance==UART4)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a64      	ldr	r2, [pc, #400]	; (8003af8 <HAL_UART_MspInit+0x1bc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d13c      	bne.n	80039e6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800396c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003970:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003972:	2300      	movs	r3, #0
 8003974:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003976:	f107 0320 	add.w	r3, r7, #32
 800397a:	4618      	mov	r0, r3
 800397c:	f004 f99a 	bl	8007cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003986:	f7ff f9e5 	bl	8002d54 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800398a:	4b5c      	ldr	r3, [pc, #368]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a5b      	ldr	r2, [pc, #364]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b59      	ldr	r3, [pc, #356]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399e:	61fb      	str	r3, [r7, #28]
 80039a0:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a2:	4b56      	ldr	r3, [pc, #344]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	4a55      	ldr	r2, [pc, #340]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	6313      	str	r3, [r2, #48]	; 0x30
 80039ae:	4b53      	ldr	r3, [pc, #332]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	f003 0301 	and.w	r3, r3, #1
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = XSENS_UART_TX_Pin|XSENS_UART_RX_Pin;
 80039ba:	2303      	movs	r3, #3
 80039bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c0:	2302      	movs	r3, #2
 80039c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039cc:	2303      	movs	r3, #3
 80039ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039d2:	2308      	movs	r3, #8
 80039d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80039dc:	4619      	mov	r1, r3
 80039de:	4848      	ldr	r0, [pc, #288]	; (8003b00 <HAL_UART_MspInit+0x1c4>)
 80039e0:	f003 fa5a 	bl	8006e98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039e4:	e083      	b.n	8003aee <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==UART7)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a46      	ldr	r2, [pc, #280]	; (8003b04 <HAL_UART_MspInit+0x1c8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d13c      	bne.n	8003a6a <HAL_UART_MspInit+0x12e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80039f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039f4:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80039f6:	2300      	movs	r3, #0
 80039f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80039fa:	f107 0320 	add.w	r3, r7, #32
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 f958 	bl	8007cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <HAL_UART_MspInit+0xd2>
      Error_Handler();
 8003a0a:	f7ff f9a3 	bl	8002d54 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8003a0e:	4b3b      	ldr	r3, [pc, #236]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	4a3a      	ldr	r2, [pc, #232]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a18:	6413      	str	r3, [r2, #64]	; 0x40
 8003a1a:	4b38      	ldr	r3, [pc, #224]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003a26:	4b35      	ldr	r3, [pc, #212]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a2c:	f043 0320 	orr.w	r3, r3, #32
 8003a30:	6313      	str	r3, [r2, #48]	; 0x30
 8003a32:	4b32      	ldr	r3, [pc, #200]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a36:	f003 0320 	and.w	r3, r3, #32
 8003a3a:	613b      	str	r3, [r7, #16]
 8003a3c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ESP32_UART_RX_Pin|ESP32_UART_TX_Pin;
 8003a3e:	23c0      	movs	r3, #192	; 0xc0
 8003a40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a44:	2302      	movs	r3, #2
 8003a46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a50:	2303      	movs	r3, #3
 8003a52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8003a56:	2308      	movs	r3, #8
 8003a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003a5c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a60:	4619      	mov	r1, r3
 8003a62:	4829      	ldr	r0, [pc, #164]	; (8003b08 <HAL_UART_MspInit+0x1cc>)
 8003a64:	f003 fa18 	bl	8006e98 <HAL_GPIO_Init>
}
 8003a68:	e041      	b.n	8003aee <HAL_UART_MspInit+0x1b2>
  else if(huart->Instance==USART3)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a27      	ldr	r2, [pc, #156]	; (8003b0c <HAL_UART_MspInit+0x1d0>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d13c      	bne.n	8003aee <HAL_UART_MspInit+0x1b2>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003a74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a78:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a7e:	f107 0320 	add.w	r3, r7, #32
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 f916 	bl	8007cb4 <HAL_RCCEx_PeriphCLKConfig>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d001      	beq.n	8003a92 <HAL_UART_MspInit+0x156>
      Error_Handler();
 8003a8e:	f7ff f961 	bl	8002d54 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a92:	4b1a      	ldr	r3, [pc, #104]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	4a19      	ldr	r2, [pc, #100]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9e:	4b17      	ldr	r3, [pc, #92]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	4b14      	ldr	r3, [pc, #80]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	4a13      	ldr	r2, [pc, #76]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003ab0:	f043 0302 	orr.w	r3, r3, #2
 8003ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab6:	4b11      	ldr	r3, [pc, #68]	; (8003afc <HAL_UART_MspInit+0x1c0>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003ac2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aca:	2302      	movs	r3, #2
 8003acc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003adc:	2307      	movs	r3, #7
 8003ade:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ae2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4809      	ldr	r0, [pc, #36]	; (8003b10 <HAL_UART_MspInit+0x1d4>)
 8003aea:	f003 f9d5 	bl	8006e98 <HAL_GPIO_Init>
}
 8003aee:	bf00      	nop
 8003af0:	37b8      	adds	r7, #184	; 0xb8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40004c00 	.word	0x40004c00
 8003afc:	40023800 	.word	0x40023800
 8003b00:	40020000 	.word	0x40020000
 8003b04:	40007800 	.word	0x40007800
 8003b08:	40021400 	.word	0x40021400
 8003b0c:	40004800 	.word	0x40004800
 8003b10:	40020400 	.word	0x40020400

08003b14 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	605a      	str	r2, [r3, #4]
 8003b22:	609a      	str	r2, [r3, #8]
 8003b24:	60da      	str	r2, [r3, #12]
 8003b26:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003b28:	4b23      	ldr	r3, [pc, #140]	; (8003bb8 <HAL_FMC_MspInit+0xa4>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d13f      	bne.n	8003bb0 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 8003b30:	4b21      	ldr	r3, [pc, #132]	; (8003bb8 <HAL_FMC_MspInit+0xa4>)
 8003b32:	2201      	movs	r2, #1
 8003b34:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003b36:	4b21      	ldr	r3, [pc, #132]	; (8003bbc <HAL_FMC_MspInit+0xa8>)
 8003b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b3a:	4a20      	ldr	r2, [pc, #128]	; (8003bbc <HAL_FMC_MspInit+0xa8>)
 8003b3c:	f043 0301 	orr.w	r3, r3, #1
 8003b40:	6393      	str	r3, [r2, #56]	; 0x38
 8003b42:	4b1e      	ldr	r3, [pc, #120]	; (8003bbc <HAL_FMC_MspInit+0xa8>)
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	603b      	str	r3, [r7, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003b4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b54:	2302      	movs	r3, #2
 8003b56:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b60:	230c      	movs	r3, #12
 8003b62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003b64:	1d3b      	adds	r3, r7, #4
 8003b66:	4619      	mov	r1, r3
 8003b68:	4815      	ldr	r0, [pc, #84]	; (8003bc0 <HAL_FMC_MspInit+0xac>)
 8003b6a:	f003 f995 	bl	8006e98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8003b6e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003b72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b74:	2302      	movs	r3, #2
 8003b76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003b80:	230c      	movs	r3, #12
 8003b82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b84:	1d3b      	adds	r3, r7, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	480e      	ldr	r0, [pc, #56]	; (8003bc4 <HAL_FMC_MspInit+0xb0>)
 8003b8a:	f003 f985 	bl	8006e98 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8003b8e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8003b92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b94:	2302      	movs	r3, #2
 8003b96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ba0:	230c      	movs	r3, #12
 8003ba2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ba4:	1d3b      	adds	r3, r7, #4
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <HAL_FMC_MspInit+0xb4>)
 8003baa:	f003 f975 	bl	8006e98 <HAL_GPIO_Init>
 8003bae:	e000      	b.n	8003bb2 <HAL_FMC_MspInit+0x9e>
    return;
 8003bb0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2000281c 	.word	0x2000281c
 8003bbc:	40023800 	.word	0x40023800
 8003bc0:	40021400 	.word	0x40021400
 8003bc4:	40021000 	.word	0x40021000
 8003bc8:	40020c00 	.word	0x40020c00

08003bcc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003bd4:	f7ff ff9e 	bl	8003b14 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8003bd8:	bf00      	nop
 8003bda:	3708      	adds	r7, #8
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003be0:	b480      	push	{r7}
 8003be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003be4:	e7fe      	b.n	8003be4 <NMI_Handler+0x4>

08003be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003be6:	b480      	push	{r7}
 8003be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003bea:	e7fe      	b.n	8003bea <HardFault_Handler+0x4>

08003bec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003bec:	b480      	push	{r7}
 8003bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003bf0:	e7fe      	b.n	8003bf0 <MemManage_Handler+0x4>

08003bf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003bf6:	e7fe      	b.n	8003bf6 <BusFault_Handler+0x4>

08003bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003bfc:	e7fe      	b.n	8003bfc <UsageFault_Handler+0x4>

08003bfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003bfe:	b480      	push	{r7}
 8003c00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c02:	bf00      	nop
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c1e:	bf00      	nop
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c2c:	f001 f9e6 	bl	8004ffc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c30:	bf00      	nop
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003c38:	4802      	ldr	r0, [pc, #8]	; (8003c44 <CAN1_RX0_IRQHandler+0x10>)
 8003c3a:	f002 fa45 	bl	80060c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000238c 	.word	0x2000238c

08003c48 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GASP_INTERRUPT_Pin);
 8003c4c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003c50:	f003 fb00 	bl	8007254 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8003c5c:	4802      	ldr	r0, [pc, #8]	; (8003c68 <SDMMC1_IRQHandler+0x10>)
 8003c5e:	f004 fe99 	bl	8008994 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8003c62:	bf00      	nop
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	200023dc 	.word	0x200023dc

08003c6c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003c70:	4802      	ldr	r0, [pc, #8]	; (8003c7c <TIM7_IRQHandler+0x10>)
 8003c72:	f005 fe4f 	bl	8009914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003c76:	bf00      	nop
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	200025b8 	.word	0x200025b8

08003c80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003c84:	4802      	ldr	r0, [pc, #8]	; (8003c90 <DMA2_Stream0_IRQHandler+0x10>)
 8003c86:	f002 fe91 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	200022cc 	.word	0x200022cc

08003c94 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8003c98:	4802      	ldr	r0, [pc, #8]	; (8003ca4 <DMA2_Stream1_IRQHandler+0x10>)
 8003c9a:	f002 fe87 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8003c9e:	bf00      	nop
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	2000232c 	.word	0x2000232c

08003ca8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8003cac:	4802      	ldr	r0, [pc, #8]	; (8003cb8 <DMA2_Stream3_IRQHandler+0x10>)
 8003cae:	f002 fe7d 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003cb2:	bf00      	nop
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20002460 	.word	0x20002460

08003cbc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8003cc0:	4802      	ldr	r0, [pc, #8]	; (8003ccc <DMA2_Stream6_IRQHandler+0x10>)
 8003cc2:	f002 fe73 	bl	80069ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8003cc6:	bf00      	nop
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop
 8003ccc:	200024c0 	.word	0x200024c0

08003cd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cd8:	4a14      	ldr	r2, [pc, #80]	; (8003d2c <_sbrk+0x5c>)
 8003cda:	4b15      	ldr	r3, [pc, #84]	; (8003d30 <_sbrk+0x60>)
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ce4:	4b13      	ldr	r3, [pc, #76]	; (8003d34 <_sbrk+0x64>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cec:	4b11      	ldr	r3, [pc, #68]	; (8003d34 <_sbrk+0x64>)
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <_sbrk+0x68>)
 8003cf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cf2:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <_sbrk+0x64>)
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	693a      	ldr	r2, [r7, #16]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d207      	bcs.n	8003d10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d00:	f00a fe54 	bl	800e9ac <__errno>
 8003d04:	4603      	mov	r3, r0
 8003d06:	220c      	movs	r2, #12
 8003d08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d0a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003d0e:	e009      	b.n	8003d24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d10:	4b08      	ldr	r3, [pc, #32]	; (8003d34 <_sbrk+0x64>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d16:	4b07      	ldr	r3, [pc, #28]	; (8003d34 <_sbrk+0x64>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4413      	add	r3, r2
 8003d1e:	4a05      	ldr	r2, [pc, #20]	; (8003d34 <_sbrk+0x64>)
 8003d20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d22:	68fb      	ldr	r3, [r7, #12]
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3718      	adds	r7, #24
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	20050000 	.word	0x20050000
 8003d30:	00000400 	.word	0x00000400
 8003d34:	20002820 	.word	0x20002820
 8003d38:	20004c30 	.word	0x20004c30

08003d3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d40:	4b06      	ldr	r3, [pc, #24]	; (8003d5c <SystemInit+0x20>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	4a05      	ldr	r2, [pc, #20]	; (8003d5c <SystemInit+0x20>)
 8003d48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d50:	bf00      	nop
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	e000ed00 	.word	0xe000ed00

08003d60 <traction_control_PID>:
const uint8_t kI = 0;
const uint8_t kD = 0;

const uint16_t TC_torque_limit = 100;

void traction_control_PID(){
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
    if (state != DRIVE) return;
 8003d66:	4b59      	ldr	r3, [pc, #356]	; (8003ecc <traction_control_PID+0x16c>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	f040 80a8 	bne.w	8003ec2 <traction_control_PID+0x162>

    // note: wheel speeds are in units of pulses/20ms
    const float avg_front_wheel_speed = (front_right_wheel_speed + front_left_wheel_speed)/2.0;
 8003d72:	4b57      	ldr	r3, [pc, #348]	; (8003ed0 <traction_control_PID+0x170>)
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4b56      	ldr	r3, [pc, #344]	; (8003ed4 <traction_control_PID+0x174>)
 8003d7c:	881b      	ldrh	r3, [r3, #0]
 8003d7e:	b29b      	uxth	r3, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fc fbee 	bl	8000564 <__aeabi_i2d>
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d90:	f7fc fd7c 	bl	800088c <__aeabi_ddiv>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4610      	mov	r0, r2
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	f7fc fe5e 	bl	8000a5c <__aeabi_d2f>
 8003da0:	4603      	mov	r3, r0
 8003da2:	60fb      	str	r3, [r7, #12]
    const float avg_back_wheel_speed = (back_right_wheel_speed + back_left_wheel_speed)/2.0;
 8003da4:	4b4c      	ldr	r3, [pc, #304]	; (8003ed8 <traction_control_PID+0x178>)
 8003da6:	881b      	ldrh	r3, [r3, #0]
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	461a      	mov	r2, r3
 8003dac:	4b4b      	ldr	r3, [pc, #300]	; (8003edc <traction_control_PID+0x17c>)
 8003dae:	881b      	ldrh	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fc fbd5 	bl	8000564 <__aeabi_i2d>
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003dc2:	f7fc fd63 	bl	800088c <__aeabi_ddiv>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f7fc fe45 	bl	8000a5c <__aeabi_d2f>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	60bb      	str	r3, [r7, #8]
    const float conversion_factor = (2*pi*wheel_radius)/pulses_per_rev;
 8003dd6:	eddf 7a42 	vldr	s15, [pc, #264]	; 8003ee0 <traction_control_PID+0x180>
 8003dda:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003dde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8003de2:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003de6:	233c      	movs	r3, #60	; 0x3c
 8003de8:	ee07 3a90 	vmov	s15, r3
 8003dec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df4:	edc7 7a01 	vstr	s15, [r7, #4]
    const float current_slip_ratio = (avg_back_wheel_speed*conversion_factor) / (avg_front_wheel_speed*conversion_factor);
 8003df8:	ed97 7a02 	vldr	s14, [r7, #8]
 8003dfc:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e00:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003e04:	ed97 7a03 	vldr	s14, [r7, #12]
 8003e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8003e0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e14:	edc7 7a00 	vstr	s15, [r7]

    // if target slip ratio has been achieved
//    if (current_slip_ratio < target_slip_ratio + 0.001 || current_slip_ratio > target_slip_ratio - 0.001) return;

    pid_error = target_slip_ratio - current_slip_ratio;
 8003e18:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003ee4 <traction_control_PID+0x184>
 8003e1c:	edd7 7a00 	vldr	s15, [r7]
 8003e20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e28:	ee17 3a90 	vmov	r3, s15
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	4b2e      	ldr	r3, [pc, #184]	; (8003ee8 <traction_control_PID+0x188>)
 8003e30:	801a      	strh	r2, [r3, #0]
    integral = integral + pid_error;
 8003e32:	4b2e      	ldr	r3, [pc, #184]	; (8003eec <traction_control_PID+0x18c>)
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	b29a      	uxth	r2, r3
 8003e38:	4b2b      	ldr	r3, [pc, #172]	; (8003ee8 <traction_control_PID+0x188>)
 8003e3a:	881b      	ldrh	r3, [r3, #0]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	4413      	add	r3, r2
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	4b2a      	ldr	r3, [pc, #168]	; (8003eec <traction_control_PID+0x18c>)
 8003e44:	801a      	strh	r2, [r3, #0]
    derivative = pid_error - prev_pid_error;
 8003e46:	4b28      	ldr	r3, [pc, #160]	; (8003ee8 <traction_control_PID+0x188>)
 8003e48:	881b      	ldrh	r3, [r3, #0]
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <traction_control_PID+0x190>)
 8003e4e:	881b      	ldrh	r3, [r3, #0]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	4b27      	ldr	r3, [pc, #156]	; (8003ef4 <traction_control_PID+0x194>)
 8003e58:	801a      	strh	r2, [r3, #0]

    TC_control_var = (kP * pid_error) + (kI * integral) + (kD * derivative);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	b29a      	uxth	r2, r3
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <traction_control_PID+0x188>)
 8003e60:	881b      	ldrh	r3, [r3, #0]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	fb12 f303 	smulbb	r3, r2, r3
 8003e68:	b29a      	uxth	r2, r3
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	b299      	uxth	r1, r3
 8003e6e:	4b1f      	ldr	r3, [pc, #124]	; (8003eec <traction_control_PID+0x18c>)
 8003e70:	881b      	ldrh	r3, [r3, #0]
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	fb11 f303 	smulbb	r3, r1, r3
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	4413      	add	r3, r2
 8003e7c:	b29a      	uxth	r2, r3
 8003e7e:	2300      	movs	r3, #0
 8003e80:	b299      	uxth	r1, r3
 8003e82:	4b1c      	ldr	r3, [pc, #112]	; (8003ef4 <traction_control_PID+0x194>)
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	fb11 f303 	smulbb	r3, r1, r3
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	4413      	add	r3, r2
 8003e90:	b29a      	uxth	r2, r3
 8003e92:	4b19      	ldr	r3, [pc, #100]	; (8003ef8 <traction_control_PID+0x198>)
 8003e94:	801a      	strh	r2, [r3, #0]

    // limit PID torque request
    if (TC_control_var > TC_torque_limit) TC_control_var = TC_torque_limit;
 8003e96:	4b18      	ldr	r3, [pc, #96]	; (8003ef8 <traction_control_PID+0x198>)
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	2264      	movs	r2, #100	; 0x64
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d902      	bls.n	8003ea8 <traction_control_PID+0x148>
 8003ea2:	2264      	movs	r2, #100	; 0x64
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <traction_control_PID+0x198>)
 8003ea6:	801a      	strh	r2, [r3, #0]
    if (TC_control_var < 0) TC_control_var = 0; // not the best way but works for now
 8003ea8:	4b13      	ldr	r3, [pc, #76]	; (8003ef8 <traction_control_PID+0x198>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]

    TC_torque_adjustment = TC_control_var;
 8003eac:	4b12      	ldr	r3, [pc, #72]	; (8003ef8 <traction_control_PID+0x198>)
 8003eae:	881b      	ldrh	r3, [r3, #0]
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	4b12      	ldr	r3, [pc, #72]	; (8003efc <traction_control_PID+0x19c>)
 8003eb4:	801a      	strh	r2, [r3, #0]

    prev_pid_error = pid_error;
 8003eb6:	4b0c      	ldr	r3, [pc, #48]	; (8003ee8 <traction_control_PID+0x188>)
 8003eb8:	881b      	ldrh	r3, [r3, #0]
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <traction_control_PID+0x190>)
 8003ebe:	801a      	strh	r2, [r3, #0]
 8003ec0:	e000      	b.n	8003ec4 <traction_control_PID+0x164>
    if (state != DRIVE) return;
 8003ec2:	bf00      	nop
}
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	2000008d 	.word	0x2000008d
 8003ed0:	20000132 	.word	0x20000132
 8003ed4:	20000134 	.word	0x20000134
 8003ed8:	20000136 	.word	0x20000136
 8003edc:	20000138 	.word	0x20000138
 8003ee0:	4048f5c3 	.word	0x4048f5c3
 8003ee4:	3dcccccd 	.word	0x3dcccccd
 8003ee8:	20002828 	.word	0x20002828
 8003eec:	2000282c 	.word	0x2000282c
 8003ef0:	2000282a 	.word	0x2000282a
 8003ef4:	2000282e 	.word	0x2000282e
 8003ef8:	20002824 	.word	0x20002824
 8003efc:	20002826 	.word	0x20002826

08003f00 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	4611      	mov	r1, r2
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	460b      	mov	r3, r1
 8003f10:	80fb      	strh	r3, [r7, #6]
 8003f12:	4613      	mov	r3, r2
 8003f14:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	88fa      	ldrh	r2, [r7, #6]
 8003f20:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	88ba      	ldrh	r2, [r7, #4]
 8003f26:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2204      	movs	r2, #4
 8003f32:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	b21a      	sxth	r2, r3
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	b21a      	sxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8003fbe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003fc8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	75fb      	strb	r3, [r7, #23]
 8003fea:	e010      	b.n	800400e <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	3309      	adds	r3, #9
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	4413      	add	r3, r2
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8003ffa:	7dfb      	ldrb	r3, [r7, #23]
 8003ffc:	68fa      	ldr	r2, [r7, #12]
 8003ffe:	3309      	adds	r3, #9
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4413      	add	r3, r2
 8004004:	2200      	movs	r2, #0
 8004006:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8004008:	7dfb      	ldrb	r3, [r7, #23]
 800400a:	3301      	adds	r3, #1
 800400c:	75fb      	strb	r3, [r7, #23]
 800400e:	7dfb      	ldrb	r3, [r7, #23]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d9eb      	bls.n	8003fec <UG_Init+0xec>
   }

   gui = g;
 8004014:	4a04      	ldr	r2, [pc, #16]	; (8004028 <UG_Init+0x128>)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6013      	str	r3, [r2, #0]
   return 1;
 800401a:	2301      	movs	r3, #1
}
 800401c:	4618      	mov	r0, r3
 800401e:	371c      	adds	r7, #28
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr
 8004028:	20002830 	.word	0x20002830

0800402c <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 800402c:	b4b0      	push	{r4, r5, r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 8004034:	4b07      	ldr	r3, [pc, #28]	; (8004054 <UG_FontSelect+0x28>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 800403e:	4615      	mov	r5, r2
 8004040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004044:	682b      	ldr	r3, [r5, #0]
 8004046:	6023      	str	r3, [r4, #0]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	bcb0      	pop	{r4, r5, r7}
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	20002830 	.word	0x20002830

08004058 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af02      	add	r7, sp, #8
 800405e:	4603      	mov	r3, r0
 8004060:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8004062:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <UG_FillScreen+0x40>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800406a:	b29b      	uxth	r3, r3
 800406c:	3b01      	subs	r3, #1
 800406e:	b29b      	uxth	r3, r3
 8004070:	b21a      	sxth	r2, r3
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <UG_FillScreen+0x40>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800407a:	b29b      	uxth	r3, r3
 800407c:	3b01      	subs	r3, #1
 800407e:	b29b      	uxth	r3, r3
 8004080:	b219      	sxth	r1, r3
 8004082:	88fb      	ldrh	r3, [r7, #6]
 8004084:	9300      	str	r3, [sp, #0]
 8004086:	460b      	mov	r3, r1
 8004088:	2100      	movs	r1, #0
 800408a:	2000      	movs	r0, #0
 800408c:	f000 f806 	bl	800409c <UG_FillFrame>
}
 8004090:	bf00      	nop
 8004092:	3708      	adds	r7, #8
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	20002830 	.word	0x20002830

0800409c <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 800409c:	b5b0      	push	{r4, r5, r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	4604      	mov	r4, r0
 80040a4:	4608      	mov	r0, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	4623      	mov	r3, r4
 80040ac:	80fb      	strh	r3, [r7, #6]
 80040ae:	4603      	mov	r3, r0
 80040b0:	80bb      	strh	r3, [r7, #4]
 80040b2:	460b      	mov	r3, r1
 80040b4:	807b      	strh	r3, [r7, #2]
 80040b6:	4613      	mov	r3, r2
 80040b8:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 80040ba:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80040be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	da05      	bge.n	80040d2 <UG_FillFrame+0x36>
   {
      n = x2;
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 80040ca:	88fb      	ldrh	r3, [r7, #6]
 80040cc:	807b      	strh	r3, [r7, #2]
      x1 = n;
 80040ce:	89fb      	ldrh	r3, [r7, #14]
 80040d0:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 80040d2:	f9b7 2000 	ldrsh.w	r2, [r7]
 80040d6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80040da:	429a      	cmp	r2, r3
 80040dc:	da05      	bge.n	80040ea <UG_FillFrame+0x4e>
   {
      n = y2;
 80040de:	883b      	ldrh	r3, [r7, #0]
 80040e0:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80040e2:	88bb      	ldrh	r3, [r7, #4]
 80040e4:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80040e6:	89fb      	ldrh	r3, [r7, #14]
 80040e8:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80040ea:	4b23      	ldr	r3, [pc, #140]	; (8004178 <UG_FillFrame+0xdc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d012      	beq.n	8004120 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80040fa:	4b1f      	ldr	r3, [pc, #124]	; (8004178 <UG_FillFrame+0xdc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004100:	461d      	mov	r5, r3
 8004102:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004106:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800410a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800410e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004112:	8c3b      	ldrh	r3, [r7, #32]
 8004114:	9300      	str	r3, [sp, #0]
 8004116:	4623      	mov	r3, r4
 8004118:	47a8      	blx	r5
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d027      	beq.n	8004170 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8004120:	88bb      	ldrh	r3, [r7, #4]
 8004122:	81bb      	strh	r3, [r7, #12]
 8004124:	e01d      	b.n	8004162 <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8004126:	88fb      	ldrh	r3, [r7, #6]
 8004128:	81fb      	strh	r3, [r7, #14]
 800412a:	e00e      	b.n	800414a <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 800412c:	4b12      	ldr	r3, [pc, #72]	; (8004178 <UG_FillFrame+0xdc>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	8c3a      	ldrh	r2, [r7, #32]
 8004134:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8004138:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 800413c:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 800413e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004142:	b29b      	uxth	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	b29b      	uxth	r3, r3
 8004148:	81fb      	strh	r3, [r7, #14]
 800414a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800414e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004152:	429a      	cmp	r2, r3
 8004154:	ddea      	ble.n	800412c <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8004156:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800415a:	b29b      	uxth	r3, r3
 800415c:	3301      	adds	r3, #1
 800415e:	b29b      	uxth	r3, r3
 8004160:	81bb      	strh	r3, [r7, #12]
 8004162:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004166:	f9b7 3000 	ldrsh.w	r3, [r7]
 800416a:	429a      	cmp	r2, r3
 800416c:	dddb      	ble.n	8004126 <UG_FillFrame+0x8a>
 800416e:	e000      	b.n	8004172 <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8004170:	bf00      	nop
      }
   }
}
 8004172:	3710      	adds	r7, #16
 8004174:	46bd      	mov	sp, r7
 8004176:	bdb0      	pop	{r4, r5, r7, pc}
 8004178:	20002830 	.word	0x20002830

0800417c <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 800417c:	b590      	push	{r4, r7, lr}
 800417e:	b087      	sub	sp, #28
 8004180:	af02      	add	r7, sp, #8
 8004182:	4603      	mov	r3, r0
 8004184:	603a      	str	r2, [r7, #0]
 8004186:	80fb      	strh	r3, [r7, #6]
 8004188:	460b      	mov	r3, r1
 800418a:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 800418c:	88fb      	ldrh	r3, [r7, #6]
 800418e:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8004190:	88bb      	ldrh	r3, [r7, #4]
 8004192:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 8004194:	e06d      	b.n	8004272 <UG_PutString+0xf6>
   {
      chr = *str++;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	603a      	str	r2, [r7, #0]
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 80041a0:	7afb      	ldrb	r3, [r7, #11]
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	4b37      	ldr	r3, [pc, #220]	; (8004284 <UG_PutString+0x108>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d361      	bcc.n	8004272 <UG_PutString+0xf6>
 80041ae:	7afb      	ldrb	r3, [r7, #11]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	4b34      	ldr	r3, [pc, #208]	; (8004284 <UG_PutString+0x108>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d900      	bls.n	80041be <UG_PutString+0x42>
 80041bc:	e059      	b.n	8004272 <UG_PutString+0xf6>
      if ( chr == '\n' )
 80041be:	7afb      	ldrb	r3, [r7, #11]
 80041c0:	2b0a      	cmp	r3, #10
 80041c2:	d104      	bne.n	80041ce <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 80041c4:	4b2f      	ldr	r3, [pc, #188]	; (8004284 <UG_PutString+0x108>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	889b      	ldrh	r3, [r3, #4]
 80041ca:	81fb      	strh	r3, [r7, #14]
         continue;
 80041cc:	e051      	b.n	8004272 <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80041ce:	4b2d      	ldr	r3, [pc, #180]	; (8004284 <UG_PutString+0x108>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <UG_PutString+0x72>
 80041d8:	4b2a      	ldr	r3, [pc, #168]	; (8004284 <UG_PutString+0x108>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	7afa      	ldrb	r2, [r7, #11]
 80041e0:	4928      	ldr	r1, [pc, #160]	; (8004284 <UG_PutString+0x108>)
 80041e2:	6809      	ldr	r1, [r1, #0]
 80041e4:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80041e6:	1a52      	subs	r2, r2, r1
 80041e8:	4413      	add	r3, r2
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	e004      	b.n	80041f8 <UG_PutString+0x7c>
 80041ee:	4b25      	ldr	r3, [pc, #148]	; (8004284 <UG_PutString+0x108>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 80041fa:	4b22      	ldr	r3, [pc, #136]	; (8004284 <UG_PutString+0x108>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004202:	4619      	mov	r1, r3
 8004204:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004208:	7abb      	ldrb	r3, [r7, #10]
 800420a:	4413      	add	r3, r2
 800420c:	4299      	cmp	r1, r3
 800420e:	dc11      	bgt.n	8004234 <UG_PutString+0xb8>
      {
         xp = x;
 8004210:	88fb      	ldrh	r3, [r7, #6]
 8004212:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 8004214:	4b1b      	ldr	r3, [pc, #108]	; (8004284 <UG_PutString+0x108>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800421c:	b29a      	uxth	r2, r3
 800421e:	4b19      	ldr	r3, [pc, #100]	; (8004284 <UG_PutString+0x108>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8004226:	b29b      	uxth	r3, r3
 8004228:	4413      	add	r3, r2
 800422a:	b29a      	uxth	r2, r3
 800422c:	89bb      	ldrh	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	b29b      	uxth	r3, r3
 8004232:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 8004234:	4b13      	ldr	r3, [pc, #76]	; (8004284 <UG_PutString+0x108>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <UG_PutString+0x108>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004244:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004248:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 800424c:	7af8      	ldrb	r0, [r7, #11]
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	4623      	mov	r3, r4
 8004252:	f000 f89d 	bl	8004390 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8004256:	7abb      	ldrb	r3, [r7, #10]
 8004258:	b21a      	sxth	r2, r3
 800425a:	4b0a      	ldr	r3, [pc, #40]	; (8004284 <UG_PutString+0x108>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8004262:	b21b      	sxth	r3, r3
 8004264:	4413      	add	r3, r2
 8004266:	b21b      	sxth	r3, r3
 8004268:	b29a      	uxth	r2, r3
 800426a:	89fb      	ldrh	r3, [r7, #14]
 800426c:	4413      	add	r3, r2
 800426e:	b29b      	uxth	r3, r3
 8004270:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d18d      	bne.n	8004196 <UG_PutString+0x1a>
   }
}
 800427a:	bf00      	nop
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	bd90      	pop	{r4, r7, pc}
 8004284:	20002830 	.word	0x20002830

08004288 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8004288:	b590      	push	{r4, r7, lr}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af02      	add	r7, sp, #8
 800428e:	60ba      	str	r2, [r7, #8]
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	81fb      	strh	r3, [r7, #14]
 8004296:	460b      	mov	r3, r1
 8004298:	81bb      	strh	r3, [r7, #12]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 800429e:	89fb      	ldrh	r3, [r7, #14]
 80042a0:	82fb      	strh	r3, [r7, #22]
   yp=y;
 80042a2:	89bb      	ldrh	r3, [r7, #12]
 80042a4:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 80042a6:	e067      	b.n	8004378 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	1c5a      	adds	r2, r3, #1
 80042ac:	60ba      	str	r2, [r7, #8]
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 80042b2:	7cfb      	ldrb	r3, [r7, #19]
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	4b35      	ldr	r3, [pc, #212]	; (800438c <UG_PutColorString+0x104>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042bc:	429a      	cmp	r2, r3
 80042be:	d35b      	bcc.n	8004378 <UG_PutColorString+0xf0>
 80042c0:	7cfb      	ldrb	r3, [r7, #19]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <UG_PutColorString+0x104>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d900      	bls.n	80042d0 <UG_PutColorString+0x48>
 80042ce:	e053      	b.n	8004378 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 80042d0:	7cfb      	ldrb	r3, [r7, #19]
 80042d2:	2b0a      	cmp	r3, #10
 80042d4:	d104      	bne.n	80042e0 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 80042d6:	4b2d      	ldr	r3, [pc, #180]	; (800438c <UG_PutColorString+0x104>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	889b      	ldrh	r3, [r3, #4]
 80042dc:	82fb      	strh	r3, [r7, #22]
         continue;
 80042de:	e04b      	b.n	8004378 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80042e0:	4b2a      	ldr	r3, [pc, #168]	; (800438c <UG_PutColorString+0x104>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00a      	beq.n	8004300 <UG_PutColorString+0x78>
 80042ea:	4b28      	ldr	r3, [pc, #160]	; (800438c <UG_PutColorString+0x104>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f0:	7cfa      	ldrb	r2, [r7, #19]
 80042f2:	4926      	ldr	r1, [pc, #152]	; (800438c <UG_PutColorString+0x104>)
 80042f4:	6809      	ldr	r1, [r1, #0]
 80042f6:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80042f8:	1a52      	subs	r2, r2, r1
 80042fa:	4413      	add	r3, r2
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	e004      	b.n	800430a <UG_PutColorString+0x82>
 8004300:	4b22      	ldr	r3, [pc, #136]	; (800438c <UG_PutColorString+0x104>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8004308:	b2db      	uxtb	r3, r3
 800430a:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 800430c:	4b1f      	ldr	r3, [pc, #124]	; (800438c <UG_PutColorString+0x104>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8004314:	4619      	mov	r1, r3
 8004316:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800431a:	7cbb      	ldrb	r3, [r7, #18]
 800431c:	4413      	add	r3, r2
 800431e:	4299      	cmp	r1, r3
 8004320:	dc11      	bgt.n	8004346 <UG_PutColorString+0xbe>
      {
         xp = x;
 8004322:	89fb      	ldrh	r3, [r7, #14]
 8004324:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 8004326:	4b19      	ldr	r3, [pc, #100]	; (800438c <UG_PutColorString+0x104>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 800432e:	b29a      	uxth	r2, r3
 8004330:	4b16      	ldr	r3, [pc, #88]	; (800438c <UG_PutColorString+0x104>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8004338:	b29b      	uxth	r3, r3
 800433a:	4413      	add	r3, r2
 800433c:	b29a      	uxth	r2, r3
 800433e:	8abb      	ldrh	r3, [r7, #20]
 8004340:	4413      	add	r3, r2
 8004342:	b29b      	uxth	r3, r3
 8004344:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 8004346:	88fc      	ldrh	r4, [r7, #6]
 8004348:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800434c:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8004350:	7cf8      	ldrb	r0, [r7, #19]
 8004352:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	4623      	mov	r3, r4
 8004358:	f000 f81a 	bl	8004390 <UG_PutChar>

      xp += cw + gui->char_h_space;
 800435c:	7cbb      	ldrb	r3, [r7, #18]
 800435e:	b21a      	sxth	r2, r3
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <UG_PutColorString+0x104>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8004368:	b21b      	sxth	r3, r3
 800436a:	4413      	add	r3, r2
 800436c:	b21b      	sxth	r3, r3
 800436e:	b29a      	uxth	r2, r3
 8004370:	8afb      	ldrh	r3, [r7, #22]
 8004372:	4413      	add	r3, r2
 8004374:	b29b      	uxth	r3, r3
 8004376:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d193      	bne.n	80042a8 <UG_PutColorString+0x20>
   }
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	371c      	adds	r7, #28
 8004386:	46bd      	mov	sp, r7
 8004388:	bd90      	pop	{r4, r7, pc}
 800438a:	bf00      	nop
 800438c:	20002830 	.word	0x20002830

08004390 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8004390:	b590      	push	{r4, r7, lr}
 8004392:	b085      	sub	sp, #20
 8004394:	af02      	add	r7, sp, #8
 8004396:	4604      	mov	r4, r0
 8004398:	4608      	mov	r0, r1
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	4623      	mov	r3, r4
 80043a0:	71fb      	strb	r3, [r7, #7]
 80043a2:	4603      	mov	r3, r0
 80043a4:	80bb      	strh	r3, [r7, #4]
 80043a6:	460b      	mov	r3, r1
 80043a8:	807b      	strh	r3, [r7, #2]
 80043aa:	4613      	mov	r3, r2
 80043ac:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <UG_PutChar+0x44>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	332c      	adds	r3, #44	; 0x2c
 80043b4:	883c      	ldrh	r4, [r7, #0]
 80043b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80043ba:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80043be:	79f8      	ldrb	r0, [r7, #7]
 80043c0:	9301      	str	r3, [sp, #4]
 80043c2:	8b3b      	ldrh	r3, [r7, #24]
 80043c4:	9300      	str	r3, [sp, #0]
 80043c6:	4623      	mov	r3, r4
 80043c8:	f000 f852 	bl	8004470 <_UG_PutChar>
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd90      	pop	{r4, r7, pc}
 80043d4:	20002830 	.word	0x20002830

080043d8 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80043e2:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <UG_SetForecolor+0x20>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 80043ec:	bf00      	nop
 80043ee:	370c      	adds	r7, #12
 80043f0:	46bd      	mov	sp, r7
 80043f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f6:	4770      	bx	lr
 80043f8:	20002830 	.word	0x20002830

080043fc <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	4603      	mov	r3, r0
 8004404:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <UG_SetBackcolor+0x20>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	88fa      	ldrh	r2, [r7, #6]
 800440c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	20002830 	.word	0x20002830

08004420 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <UG_FontSetHSpace+0x24>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	88fa      	ldrh	r2, [r7, #6]
 8004430:	b252      	sxtb	r2, r2
 8004432:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20002830 	.word	0x20002830

08004448 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8004452:	4b06      	ldr	r3, [pc, #24]	; (800446c <UG_FontSetVSpace+0x24>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	88fa      	ldrh	r2, [r7, #6]
 8004458:	b252      	sxtb	r2, r2
 800445a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 800445e:	bf00      	nop
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20002830 	.word	0x20002830

08004470 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8004470:	b5b0      	push	{r4, r5, r7, lr}
 8004472:	b08a      	sub	sp, #40	; 0x28
 8004474:	af00      	add	r7, sp, #0
 8004476:	4604      	mov	r4, r0
 8004478:	4608      	mov	r0, r1
 800447a:	4611      	mov	r1, r2
 800447c:	461a      	mov	r2, r3
 800447e:	4623      	mov	r3, r4
 8004480:	71fb      	strb	r3, [r7, #7]
 8004482:	4603      	mov	r3, r0
 8004484:	80bb      	strh	r3, [r7, #4]
 8004486:	460b      	mov	r3, r1
 8004488:	807b      	strh	r3, [r7, #2]
 800448a:	4613      	mov	r3, r2
 800448c:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 800448e:	79fb      	ldrb	r3, [r7, #7]
 8004490:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 8004492:	7e3b      	ldrb	r3, [r7, #24]
 8004494:	2bfc      	cmp	r3, #252	; 0xfc
 8004496:	dc77      	bgt.n	8004588 <_UG_PutChar+0x118>
 8004498:	2bd6      	cmp	r3, #214	; 0xd6
 800449a:	da08      	bge.n	80044ae <_UG_PutChar+0x3e>
 800449c:	2bc4      	cmp	r3, #196	; 0xc4
 800449e:	d06a      	beq.n	8004576 <_UG_PutChar+0x106>
 80044a0:	2bc4      	cmp	r3, #196	; 0xc4
 80044a2:	dc71      	bgt.n	8004588 <_UG_PutChar+0x118>
 80044a4:	2bb0      	cmp	r3, #176	; 0xb0
 80044a6:	d06c      	beq.n	8004582 <_UG_PutChar+0x112>
 80044a8:	2bb5      	cmp	r3, #181	; 0xb5
 80044aa:	d067      	beq.n	800457c <_UG_PutChar+0x10c>
 80044ac:	e06c      	b.n	8004588 <_UG_PutChar+0x118>
 80044ae:	3bd6      	subs	r3, #214	; 0xd6
 80044b0:	2b26      	cmp	r3, #38	; 0x26
 80044b2:	d869      	bhi.n	8004588 <_UG_PutChar+0x118>
 80044b4:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <_UG_PutChar+0x4c>)
 80044b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ba:	bf00      	nop
 80044bc:	0800455f 	.word	0x0800455f
 80044c0:	08004589 	.word	0x08004589
 80044c4:	08004589 	.word	0x08004589
 80044c8:	08004589 	.word	0x08004589
 80044cc:	08004589 	.word	0x08004589
 80044d0:	08004589 	.word	0x08004589
 80044d4:	0800456b 	.word	0x0800456b
 80044d8:	08004589 	.word	0x08004589
 80044dc:	08004589 	.word	0x08004589
 80044e0:	08004589 	.word	0x08004589
 80044e4:	08004589 	.word	0x08004589
 80044e8:	08004589 	.word	0x08004589
 80044ec:	08004589 	.word	0x08004589
 80044f0:	08004589 	.word	0x08004589
 80044f4:	08004571 	.word	0x08004571
 80044f8:	08004589 	.word	0x08004589
 80044fc:	08004589 	.word	0x08004589
 8004500:	08004589 	.word	0x08004589
 8004504:	08004589 	.word	0x08004589
 8004508:	08004589 	.word	0x08004589
 800450c:	08004589 	.word	0x08004589
 8004510:	08004589 	.word	0x08004589
 8004514:	08004589 	.word	0x08004589
 8004518:	08004589 	.word	0x08004589
 800451c:	08004589 	.word	0x08004589
 8004520:	08004589 	.word	0x08004589
 8004524:	08004589 	.word	0x08004589
 8004528:	08004589 	.word	0x08004589
 800452c:	08004589 	.word	0x08004589
 8004530:	08004589 	.word	0x08004589
 8004534:	08004589 	.word	0x08004589
 8004538:	08004589 	.word	0x08004589
 800453c:	08004559 	.word	0x08004559
 8004540:	08004589 	.word	0x08004589
 8004544:	08004589 	.word	0x08004589
 8004548:	08004589 	.word	0x08004589
 800454c:	08004589 	.word	0x08004589
 8004550:	08004589 	.word	0x08004589
 8004554:	08004565 	.word	0x08004565
   {
      case 0xF6: bt = 0x94; break; // ö
 8004558:	2394      	movs	r3, #148	; 0x94
 800455a:	763b      	strb	r3, [r7, #24]
 800455c:	e014      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 800455e:	2399      	movs	r3, #153	; 0x99
 8004560:	763b      	strb	r3, [r7, #24]
 8004562:	e011      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 8004564:	2381      	movs	r3, #129	; 0x81
 8004566:	763b      	strb	r3, [r7, #24]
 8004568:	e00e      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 800456a:	239a      	movs	r3, #154	; 0x9a
 800456c:	763b      	strb	r3, [r7, #24]
 800456e:	e00b      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 8004570:	2384      	movs	r3, #132	; 0x84
 8004572:	763b      	strb	r3, [r7, #24]
 8004574:	e008      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 8004576:	238e      	movs	r3, #142	; 0x8e
 8004578:	763b      	strb	r3, [r7, #24]
 800457a:	e005      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 800457c:	23e6      	movs	r3, #230	; 0xe6
 800457e:	763b      	strb	r3, [r7, #24]
 8004580:	e002      	b.n	8004588 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 8004582:	23f8      	movs	r3, #248	; 0xf8
 8004584:	763b      	strb	r3, [r7, #24]
 8004586:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8004588:	7e3b      	ldrb	r3, [r7, #24]
 800458a:	b29a      	uxth	r2, r3
 800458c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800458e:	895b      	ldrh	r3, [r3, #10]
 8004590:	429a      	cmp	r2, r3
 8004592:	f0c0 81fc 	bcc.w	800498e <_UG_PutChar+0x51e>
 8004596:	7e3b      	ldrb	r3, [r7, #24]
 8004598:	b29a      	uxth	r2, r3
 800459a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459c:	899b      	ldrh	r3, [r3, #12]
 800459e:	429a      	cmp	r2, r3
 80045a0:	f200 81f5 	bhi.w	800498e <_UG_PutChar+0x51e>

   yo = y;
 80045a4:	887b      	ldrh	r3, [r7, #2]
 80045a6:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 80045a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80045ae:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 80045b0:	8b7b      	ldrh	r3, [r7, #26]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 81ed 	beq.w	8004992 <_UG_PutChar+0x522>
   bn >>= 3;
 80045b8:	8b7b      	ldrh	r3, [r7, #26]
 80045ba:	08db      	lsrs	r3, r3, #3
 80045bc:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 80045be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <_UG_PutChar+0x166>
 80045d0:	8b7b      	ldrh	r3, [r7, #26]
 80045d2:	3301      	adds	r3, #1
 80045d4:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 80045d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <_UG_PutChar+0x182>
 80045de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	7e3a      	ldrb	r2, [r7, #24]
 80045e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045e6:	8949      	ldrh	r1, [r1, #10]
 80045e8:	1a52      	subs	r2, r2, r1
 80045ea:	4413      	add	r3, r2
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	e003      	b.n	80045fa <_UG_PutChar+0x18a>
 80045f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045f4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80045f8:	b29b      	uxth	r3, r3
 80045fa:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 80045fc:	4b93      	ldr	r3, [pc, #588]	; (800484c <_UG_PutChar+0x3dc>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 80d8 	beq.w	80047be <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 800460e:	4b8f      	ldr	r3, [pc, #572]	; (800484c <_UG_PutChar+0x3dc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	461d      	mov	r5, r3
 8004616:	88ba      	ldrh	r2, [r7, #4]
 8004618:	8a7b      	ldrh	r3, [r7, #18]
 800461a:	4413      	add	r3, r2
 800461c:	b29b      	uxth	r3, r3
 800461e:	3b01      	subs	r3, #1
 8004620:	b29b      	uxth	r3, r3
 8004622:	b21c      	sxth	r4, r3
 8004624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004626:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800462a:	b29a      	uxth	r2, r3
 800462c:	887b      	ldrh	r3, [r7, #2]
 800462e:	4413      	add	r3, r2
 8004630:	b29b      	uxth	r3, r3
 8004632:	3b01      	subs	r3, #1
 8004634:	b29b      	uxth	r3, r3
 8004636:	b21b      	sxth	r3, r3
 8004638:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800463c:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8004640:	4622      	mov	r2, r4
 8004642:	47a8      	blx	r5
 8004644:	4603      	mov	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 8004648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800464a:	791b      	ldrb	r3, [r3, #4]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d14d      	bne.n	80046ec <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8004650:	7e3b      	ldrb	r3, [r7, #24]
 8004652:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004654:	8952      	ldrh	r2, [r2, #10]
 8004656:	1a9b      	subs	r3, r3, r2
 8004658:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800465a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	8b7a      	ldrh	r2, [r7, #26]
 8004664:	fb02 f303 	mul.w	r3, r2, r3
 8004668:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 800466a:	2300      	movs	r3, #0
 800466c:	84bb      	strh	r3, [r7, #36]	; 0x24
 800466e:	e036      	b.n	80046de <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8004670:	8a7b      	ldrh	r3, [r7, #18]
 8004672:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 8004674:	2300      	movs	r3, #0
 8004676:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004678:	e02a      	b.n	80046d0 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 800467a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	1c59      	adds	r1, r3, #1
 8004682:	6179      	str	r1, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 800468a:	2300      	movs	r3, #0
 800468c:	847b      	strh	r3, [r7, #34]	; 0x22
 800468e:	e016      	b.n	80046be <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8004690:	7e7b      	ldrb	r3, [r7, #25]
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 800469a:	883a      	ldrh	r2, [r7, #0]
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4610      	mov	r0, r2
 80046a0:	4798      	blx	r3
 80046a2:	e003      	b.n	80046ac <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 80046a4:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	4610      	mov	r0, r2
 80046aa:	4798      	blx	r3
				   }
				   b >>= 1;
 80046ac:	7e7b      	ldrb	r3, [r7, #25]
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	767b      	strb	r3, [r7, #25]
				   c--;
 80046b2:	8bbb      	ldrh	r3, [r7, #28]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 80046b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046ba:	3301      	adds	r3, #1
 80046bc:	847b      	strh	r3, [r7, #34]	; 0x22
 80046be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80046c0:	2b07      	cmp	r3, #7
 80046c2:	d802      	bhi.n	80046ca <_UG_PutChar+0x25a>
 80046c4:	8bbb      	ldrh	r3, [r7, #28]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e2      	bne.n	8004690 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 80046ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046cc:	3301      	adds	r3, #1
 80046ce:	84fb      	strh	r3, [r7, #38]	; 0x26
 80046d0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80046d2:	8b7b      	ldrh	r3, [r7, #26]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d3d0      	bcc.n	800467a <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 80046d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046da:	3301      	adds	r3, #1
 80046dc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80046de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046e2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80046e6:	4293      	cmp	r3, r2
 80046e8:	dbc2      	blt.n	8004670 <_UG_PutChar+0x200>
 80046ea:	e153      	b.n	8004994 <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 80046ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ee:	791b      	ldrb	r3, [r3, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	f040 814f 	bne.w	8004994 <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 80046f6:	7e3b      	ldrb	r3, [r7, #24]
 80046f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80046fa:	8952      	ldrh	r2, [r2, #10]
 80046fc:	1a9b      	subs	r3, r3, r2
 80046fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004700:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004704:	fb02 f303 	mul.w	r3, r2, r3
 8004708:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800470a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800470e:	fb02 f303 	mul.w	r3, r2, r3
 8004712:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8004714:	2300      	movs	r3, #0
 8004716:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004718:	e04a      	b.n	80047b0 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 800471a:	2300      	movs	r3, #0
 800471c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800471e:	e036      	b.n	800478e <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 8004720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	1c59      	adds	r1, r3, #1
 8004728:	6179      	str	r1, [r7, #20]
 800472a:	4413      	add	r3, r2
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8004730:	883b      	ldrh	r3, [r7, #0]
 8004732:	b2db      	uxtb	r3, r3
 8004734:	7e7a      	ldrb	r2, [r7, #25]
 8004736:	fb03 f202 	mul.w	r2, r3, r2
 800473a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800473c:	b2db      	uxtb	r3, r3
 800473e:	7e79      	ldrb	r1, [r7, #25]
 8004740:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8004744:	fb01 f303 	mul.w	r3, r1, r3
 8004748:	4413      	add	r3, r2
 800474a:	121b      	asrs	r3, r3, #8
 800474c:	b21b      	sxth	r3, r3
 800474e:	b2db      	uxtb	r3, r3
 8004750:	b21a      	sxth	r2, r3
 8004752:	883b      	ldrh	r3, [r7, #0]
 8004754:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004758:	7e79      	ldrb	r1, [r7, #25]
 800475a:	fb03 f101 	mul.w	r1, r3, r1
 800475e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004760:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004764:	7e78      	ldrb	r0, [r7, #25]
 8004766:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	440b      	add	r3, r1
 8004770:	121b      	asrs	r3, r3, #8
 8004772:	b21b      	sxth	r3, r3
 8004774:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004778:	b21b      	sxth	r3, r3
 800477a:	4313      	orrs	r3, r2
 800477c:	b21b      	sxth	r3, r3
 800477e:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8004780:	8a3a      	ldrh	r2, [r7, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	4610      	mov	r0, r2
 8004786:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8004788:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800478a:	3301      	adds	r3, #1
 800478c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800478e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004790:	8a7b      	ldrh	r3, [r7, #18]
 8004792:	429a      	cmp	r2, r3
 8004794:	d3c4      	bcc.n	8004720 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 8004796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004798:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800479c:	461a      	mov	r2, r3
 800479e:	8a7b      	ldrh	r3, [r7, #18]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	461a      	mov	r2, r3
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 80047aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ac:	3301      	adds	r3, #1
 80047ae:	84bb      	strh	r3, [r7, #36]	; 0x24
 80047b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047b4:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80047b8:	4293      	cmp	r3, r2
 80047ba:	dbae      	blt.n	800471a <_UG_PutChar+0x2aa>
 80047bc:	e0ea      	b.n	8004994 <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 80047be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c0:	791b      	ldrb	r3, [r3, #4]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d16e      	bne.n	80048a4 <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 80047c6:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 80047ca:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80047ce:	8a7b      	ldrh	r3, [r7, #18]
 80047d0:	4413      	add	r3, r2
 80047d2:	3b01      	subs	r3, #1
 80047d4:	461c      	mov	r4, r3
 80047d6:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80047da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80047de:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047e0:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80047e4:	4413      	add	r3, r2
 80047e6:	3b01      	subs	r3, #1
 80047e8:	460a      	mov	r2, r1
 80047ea:	4621      	mov	r1, r4
 80047ec:	f000 f99c 	bl	8004b28 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 80047f0:	f000 fa14 	bl	8004c1c <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 80047f4:	7e3b      	ldrb	r3, [r7, #24]
 80047f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047f8:	8952      	ldrh	r2, [r2, #10]
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80047fe:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004802:	fb02 f303 	mul.w	r3, r2, r3
 8004806:	8b7a      	ldrh	r2, [r7, #26]
 8004808:	fb02 f303 	mul.w	r3, r2, r3
 800480c:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 800480e:	2300      	movs	r3, #0
 8004810:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004812:	e040      	b.n	8004896 <_UG_PutChar+0x426>
         {
           xo = x;
 8004814:	88bb      	ldrh	r3, [r7, #4]
 8004816:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8004818:	8a7b      	ldrh	r3, [r7, #18]
 800481a:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 800481c:	2300      	movs	r3, #0
 800481e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004820:	e02f      	b.n	8004882 <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 8004822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	1c59      	adds	r1, r3, #1
 800482a:	6179      	str	r1, [r7, #20]
 800482c:	4413      	add	r3, r2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 8004832:	2300      	movs	r3, #0
 8004834:	847b      	strh	r3, [r7, #34]	; 0x22
 8004836:	e01b      	b.n	8004870 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8004838:	7e7b      	ldrb	r3, [r7, #25]
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d006      	beq.n	8004850 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 8004842:	883b      	ldrh	r3, [r7, #0]
 8004844:	4618      	mov	r0, r3
 8004846:	f000 f9f0 	bl	8004c2a <SSD1963_ConsecutivePSet>
 800484a:	e005      	b.n	8004858 <_UG_PutChar+0x3e8>
 800484c:	20002830 	.word	0x20002830
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 8004850:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004852:	4618      	mov	r0, r3
 8004854:	f000 f9e9 	bl	8004c2a <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 8004858:	7e7b      	ldrb	r3, [r7, #25]
 800485a:	085b      	lsrs	r3, r3, #1
 800485c:	767b      	strb	r3, [r7, #25]
               xo++;
 800485e:	8c3b      	ldrh	r3, [r7, #32]
 8004860:	3301      	adds	r3, #1
 8004862:	843b      	strh	r3, [r7, #32]
               c--;
 8004864:	8bbb      	ldrh	r3, [r7, #28]
 8004866:	3b01      	subs	r3, #1
 8004868:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 800486a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800486c:	3301      	adds	r3, #1
 800486e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004870:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004872:	2b07      	cmp	r3, #7
 8004874:	d802      	bhi.n	800487c <_UG_PutChar+0x40c>
 8004876:	8bbb      	ldrh	r3, [r7, #28]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1dd      	bne.n	8004838 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 800487c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800487e:	3301      	adds	r3, #1
 8004880:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004882:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004884:	8b7b      	ldrh	r3, [r7, #26]
 8004886:	429a      	cmp	r2, r3
 8004888:	d3cb      	bcc.n	8004822 <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 800488a:	8bfb      	ldrh	r3, [r7, #30]
 800488c:	3301      	adds	r3, #1
 800488e:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8004890:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004892:	3301      	adds	r3, #1
 8004894:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004896:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004898:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800489a:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 800489e:	4293      	cmp	r3, r2
 80048a0:	dbb8      	blt.n	8004814 <_UG_PutChar+0x3a4>
 80048a2:	e077      	b.n	8004994 <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	791b      	ldrb	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d173      	bne.n	8004994 <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 80048ac:	7e3b      	ldrb	r3, [r7, #24]
 80048ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b0:	8952      	ldrh	r2, [r2, #10]
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048b6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80048ba:	fb02 f303 	mul.w	r3, r2, r3
 80048be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80048c0:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
 80048c8:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 80048ca:	2300      	movs	r3, #0
 80048cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048ce:	e057      	b.n	8004980 <_UG_PutChar+0x510>
         {
            xo = x;
 80048d0:	88bb      	ldrh	r3, [r7, #4]
 80048d2:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 80048d4:	2300      	movs	r3, #0
 80048d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048d8:	e03e      	b.n	8004958 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	1c59      	adds	r1, r3, #1
 80048e2:	6179      	str	r1, [r7, #20]
 80048e4:	4413      	add	r3, r2
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 80048ea:	883b      	ldrh	r3, [r7, #0]
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	7e7a      	ldrb	r2, [r7, #25]
 80048f0:	fb03 f202 	mul.w	r2, r3, r2
 80048f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	7e79      	ldrb	r1, [r7, #25]
 80048fa:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 80048fe:	fb01 f303 	mul.w	r3, r1, r3
 8004902:	4413      	add	r3, r2
 8004904:	121b      	asrs	r3, r3, #8
 8004906:	b21b      	sxth	r3, r3
 8004908:	b2db      	uxtb	r3, r3
 800490a:	b21a      	sxth	r2, r3
 800490c:	883b      	ldrh	r3, [r7, #0]
 800490e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004912:	7e79      	ldrb	r1, [r7, #25]
 8004914:	fb03 f101 	mul.w	r1, r3, r1
 8004918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800491a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800491e:	7e78      	ldrb	r0, [r7, #25]
 8004920:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004924:	fb00 f303 	mul.w	r3, r0, r3
 8004928:	440b      	add	r3, r1
 800492a:	121b      	asrs	r3, r3, #8
 800492c:	b21b      	sxth	r3, r3
 800492e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004932:	b21b      	sxth	r3, r3
 8004934:	4313      	orrs	r3, r2
 8004936:	b21b      	sxth	r3, r3
 8004938:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 800493a:	4b18      	ldr	r3, [pc, #96]	; (800499c <_UG_PutChar+0x52c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8004944:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8004948:	8a3a      	ldrh	r2, [r7, #16]
 800494a:	4798      	blx	r3
               xo++;
 800494c:	8c3b      	ldrh	r3, [r7, #32]
 800494e:	3301      	adds	r3, #1
 8004950:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8004952:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004954:	3301      	adds	r3, #1
 8004956:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004958:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800495a:	8a7b      	ldrh	r3, [r7, #18]
 800495c:	429a      	cmp	r2, r3
 800495e:	d3bc      	bcc.n	80048da <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 8004960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004962:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8004966:	461a      	mov	r2, r3
 8004968:	8a7b      	ldrh	r3, [r7, #18]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	461a      	mov	r2, r3
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	4413      	add	r3, r2
 8004972:	617b      	str	r3, [r7, #20]
            yo++;
 8004974:	8bfb      	ldrh	r3, [r7, #30]
 8004976:	3301      	adds	r3, #1
 8004978:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 800497a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800497c:	3301      	adds	r3, #1
 800497e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004980:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004982:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004984:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8004988:	4293      	cmp	r3, r2
 800498a:	dba1      	blt.n	80048d0 <_UG_PutChar+0x460>
 800498c:	e002      	b.n	8004994 <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 800498e:	bf00      	nop
 8004990:	e000      	b.n	8004994 <_UG_PutChar+0x524>
   if ( !bn ) return;
 8004992:	bf00      	nop
         }
      }
   }
}
 8004994:	3728      	adds	r7, #40	; 0x28
 8004996:	46bd      	mov	sp, r7
 8004998:	bdb0      	pop	{r4, r5, r7, pc}
 800499a:	bf00      	nop
 800499c:	20002830 	.word	0x20002830

080049a0 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 80049a0:	b480      	push	{r7}
 80049a2:	b083      	sub	sp, #12
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	4603      	mov	r3, r0
 80049a8:	6039      	str	r1, [r7, #0]
 80049aa:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	2b06      	cmp	r3, #6
 80049b0:	d810      	bhi.n	80049d4 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	; (80049e0 <UG_DriverRegister+0x40>)
 80049b4:	681a      	ldr	r2, [r3, #0]
 80049b6:	79fb      	ldrb	r3, [r7, #7]
 80049b8:	3309      	adds	r3, #9
 80049ba:	00db      	lsls	r3, r3, #3
 80049bc:	4413      	add	r3, r2
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 80049c2:	4b07      	ldr	r3, [pc, #28]	; (80049e0 <UG_DriverRegister+0x40>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	79fb      	ldrb	r3, [r7, #7]
 80049c8:	3309      	adds	r3, #9
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	2203      	movs	r2, #3
 80049d0:	721a      	strb	r2, [r3, #8]
 80049d2:	e000      	b.n	80049d6 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 80049d4:	bf00      	nop
}
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr
 80049e0:	20002830 	.word	0x20002830

080049e4 <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 80049e8:	2001      	movs	r0, #1
 80049ea:	f000 fa3e 	bl	8004e6a <write_command>
    HAL_Delay(10);
 80049ee:	200a      	movs	r0, #10
 80049f0:	f000 fb24 	bl	800503c <HAL_Delay>
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SSD1963_Init>:

void SSD1963_Init()
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 80049fc:	f7ff fff2 	bl	80049e4 <SSD1963_Reset>

    write_command(0xe0);
 8004a00:	20e0      	movs	r0, #224	; 0xe0
 8004a02:	f000 fa32 	bl	8004e6a <write_command>
    write_data(0x01);            //Enable PLL
 8004a06:	2001      	movs	r0, #1
 8004a08:	f000 fa4a 	bl	8004ea0 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 8004a0c:	20e0      	movs	r0, #224	; 0xe0
 8004a0e:	f000 fa2c 	bl	8004e6a <write_command>
    write_data(0x03);            //Lock PLL
 8004a12:	2003      	movs	r0, #3
 8004a14:	f000 fa44 	bl	8004ea0 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8004a18:	f7ff ffe4 	bl	80049e4 <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8004a1c:	20b0      	movs	r0, #176	; 0xb0
 8004a1e:	f000 fa24 	bl	8004e6a <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8004a22:	2008      	movs	r0, #8
 8004a24:	f000 fa3c 	bl	8004ea0 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8004a28:	2080      	movs	r0, #128	; 0x80
 8004a2a:	f000 fa39 	bl	8004ea0 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 8004a2e:	2001      	movs	r0, #1
 8004a30:	f000 fa36 	bl	8004ea0 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8004a34:	20df      	movs	r0, #223	; 0xdf
 8004a36:	f000 fa33 	bl	8004ea0 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8004a3a:	2001      	movs	r0, #1
 8004a3c:	f000 fa30 	bl	8004ea0 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8004a40:	200f      	movs	r0, #15
 8004a42:	f000 fa2d 	bl	8004ea0 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8004a46:	2000      	movs	r0, #0
 8004a48:	f000 fa2a 	bl	8004ea0 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8004a4c:	20f0      	movs	r0, #240	; 0xf0
 8004a4e:	f000 fa0c 	bl	8004e6a <write_command>
    write_data(0x03);
 8004a52:	2003      	movs	r0, #3
 8004a54:	f000 fa24 	bl	8004ea0 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8004a58:	20e6      	movs	r0, #230	; 0xe6
 8004a5a:	f000 fa06 	bl	8004e6a <write_command>
    write_data(0x01);    //02
 8004a5e:	2001      	movs	r0, #1
 8004a60:	f000 fa1e 	bl	8004ea0 <write_data>
    write_data(0x45);    //ff
 8004a64:	2045      	movs	r0, #69	; 0x45
 8004a66:	f000 fa1b 	bl	8004ea0 <write_data>
    write_data(0x47);    //ff
 8004a6a:	2047      	movs	r0, #71	; 0x47
 8004a6c:	f000 fa18 	bl	8004ea0 <write_data>

    write_command(0xb4); //set HBP
 8004a70:	20b4      	movs	r0, #180	; 0xb4
 8004a72:	f000 f9fa 	bl	8004e6a <write_command>
    write_data(0x02); //set Hsync = 600
 8004a76:	2002      	movs	r0, #2
 8004a78:	f000 fa12 	bl	8004ea0 <write_data>
    write_data(0x0d);
 8004a7c:	200d      	movs	r0, #13
 8004a7e:	f000 fa0f 	bl	8004ea0 <write_data>
    write_data(0x00);    //set HBP 68
 8004a82:	2000      	movs	r0, #0
 8004a84:	f000 fa0c 	bl	8004ea0 <write_data>
    write_data(0x2b);
 8004a88:	202b      	movs	r0, #43	; 0x2b
 8004a8a:	f000 fa09 	bl	8004ea0 <write_data>
    write_data(0x28);    //set VBP 16
 8004a8e:	2028      	movs	r0, #40	; 0x28
 8004a90:	f000 fa06 	bl	8004ea0 <write_data>
    write_data(0x00);    //Set Hsync start position
 8004a94:	2000      	movs	r0, #0
 8004a96:	f000 fa03 	bl	8004ea0 <write_data>
    write_data(0x00);
 8004a9a:	2000      	movs	r0, #0
 8004a9c:	f000 fa00 	bl	8004ea0 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	f000 f9fd 	bl	8004ea0 <write_data>

    write_command(0xb6); //set VBP
 8004aa6:	20b6      	movs	r0, #182	; 0xb6
 8004aa8:	f000 f9df 	bl	8004e6a <write_command>
    write_data(0x01);    //set Vsync total 360
 8004aac:	2001      	movs	r0, #1
 8004aae:	f000 f9f7 	bl	8004ea0 <write_data>
    write_data(0x1d);
 8004ab2:	201d      	movs	r0, #29
 8004ab4:	f000 f9f4 	bl	8004ea0 <write_data>
    write_data(0x00);    //set VBP = 19
 8004ab8:	2000      	movs	r0, #0
 8004aba:	f000 f9f1 	bl	8004ea0 <write_data>
    write_data(0x0c);
 8004abe:	200c      	movs	r0, #12
 8004ac0:	f000 f9ee 	bl	8004ea0 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 8004ac4:	2009      	movs	r0, #9
 8004ac6:	f000 f9eb 	bl	8004ea0 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 8004aca:	2000      	movs	r0, #0
 8004acc:	f000 f9e8 	bl	8004ea0 <write_data>
    write_data(0x00);
 8004ad0:	2000      	movs	r0, #0
 8004ad2:	f000 f9e5 	bl	8004ea0 <write_data>

    write_command(0x2a); //set column address
 8004ad6:	202a      	movs	r0, #42	; 0x2a
 8004ad8:	f000 f9c7 	bl	8004e6a <write_command>
    write_data(0x00);    //set start column address 0
 8004adc:	2000      	movs	r0, #0
 8004ade:	f000 f9df 	bl	8004ea0 <write_data>
    write_data(0x00);
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	f000 f9dc 	bl	8004ea0 <write_data>
    write_data(0x01);    //set end column address = 479
 8004ae8:	2001      	movs	r0, #1
 8004aea:	f000 f9d9 	bl	8004ea0 <write_data>
    write_data(0xdf);
 8004aee:	20df      	movs	r0, #223	; 0xdf
 8004af0:	f000 f9d6 	bl	8004ea0 <write_data>

    write_command(0x2b); //set page address
 8004af4:	202b      	movs	r0, #43	; 0x2b
 8004af6:	f000 f9b8 	bl	8004e6a <write_command>
    write_data(0x00);    //set start page address = 0
 8004afa:	2000      	movs	r0, #0
 8004afc:	f000 f9d0 	bl	8004ea0 <write_data>
    write_data(0x00);
 8004b00:	2000      	movs	r0, #0
 8004b02:	f000 f9cd 	bl	8004ea0 <write_data>
    write_data(0x01);    //set end column address = 479
 8004b06:	2001      	movs	r0, #1
 8004b08:	f000 f9ca 	bl	8004ea0 <write_data>
    write_data(0x0f);
 8004b0c:	200f      	movs	r0, #15
 8004b0e:	f000 f9c7 	bl	8004ea0 <write_data>

    write_command(0x13); //set normal mode
 8004b12:	2013      	movs	r0, #19
 8004b14:	f000 f9a9 	bl	8004e6a <write_command>
    write_command(0x38); //set normal mode
 8004b18:	2038      	movs	r0, #56	; 0x38
 8004b1a:	f000 f9a6 	bl	8004e6a <write_command>
    write_command(0x29); //set display on
 8004b1e:	2029      	movs	r0, #41	; 0x29
 8004b20:	f000 f9a3 	bl	8004e6a <write_command>
}
 8004b24:	bf00      	nop
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
 8004b34:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	0a1b      	lsrs	r3, r3, #8
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	b29b      	uxth	r3, r3
 8004b4a:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	0a1b      	lsrs	r3, r3, #8
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8004b62:	202a      	movs	r0, #42	; 0x2a
 8004b64:	f000 f981 	bl	8004e6a <write_command>
    write_multi_data(data, 4);
 8004b68:	f107 0310 	add.w	r3, r7, #16
 8004b6c:	2104      	movs	r1, #4
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f9b0 	bl	8004ed4 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	0a1b      	lsrs	r3, r3, #8
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	b2db      	uxtb	r3, r3
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	0a1b      	lsrs	r3, r3, #8
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	b29b      	uxth	r3, r3
 8004b94:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	b29b      	uxth	r3, r3
 8004b9a:	b2db      	uxtb	r3, r3
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8004ba0:	202b      	movs	r0, #43	; 0x2b
 8004ba2:	f000 f962 	bl	8004e6a <write_command>
    write_multi_data(data, 4);
 8004ba6:	f107 0310 	add.w	r3, r7, #16
 8004baa:	2104      	movs	r1, #4
 8004bac:	4618      	mov	r0, r3
 8004bae:	f000 f991 	bl	8004ed4 <write_multi_data>
}
 8004bb2:	bf00      	nop
 8004bb4:	3718      	adds	r7, #24
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b082      	sub	sp, #8
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	80fb      	strh	r3, [r7, #6]
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	80bb      	strh	r3, [r7, #4]
 8004bc8:	4613      	mov	r3, r2
 8004bca:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8004bcc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	db1f      	blt.n	8004c14 <SSD1963_PSet+0x5a>
 8004bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bd8:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004bdc:	da1a      	bge.n	8004c14 <SSD1963_PSet+0x5a>
 8004bde:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	db16      	blt.n	8004c14 <SSD1963_PSet+0x5a>
 8004be6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004bea:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004bee:	da11      	bge.n	8004c14 <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8004bf0:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004bf4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004c00:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c04:	3301      	adds	r3, #1
 8004c06:	f7ff ff8f 	bl	8004b28 <SSD1963_WindowSet>
    write_data(c);
 8004c0a:	887b      	ldrh	r3, [r7, #2]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f000 f947 	bl	8004ea0 <write_data>
 8004c12:	e000      	b.n	8004c16 <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8004c14:	bf00      	nop
}
 8004c16:	3708      	adds	r7, #8
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8004c20:	202c      	movs	r0, #44	; 0x2c
 8004c22:	f000 f922 	bl	8004e6a <write_command>
}
 8004c26:	bf00      	nop
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 8004c2a:	b580      	push	{r7, lr}
 8004c2c:	b082      	sub	sp, #8
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	4603      	mov	r3, r0
 8004c32:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 8004c34:	88fb      	ldrh	r3, [r7, #6]
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 f932 	bl	8004ea0 <write_data>
}
 8004c3c:	bf00      	nop
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8004c44:	b590      	push	{r4, r7, lr}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4604      	mov	r4, r0
 8004c4c:	4608      	mov	r0, r1
 8004c4e:	4611      	mov	r1, r2
 8004c50:	461a      	mov	r2, r3
 8004c52:	4623      	mov	r3, r4
 8004c54:	80fb      	strh	r3, [r7, #6]
 8004c56:	4603      	mov	r3, r0
 8004c58:	80bb      	strh	r3, [r7, #4]
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	807b      	strh	r3, [r7, #2]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004c62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	db0d      	blt.n	8004c86 <HW_FillFrame+0x42>
 8004c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c6e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004c72:	da08      	bge.n	8004c86 <HW_FillFrame+0x42>
 8004c74:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	db04      	blt.n	8004c86 <HW_FillFrame+0x42>
 8004c7c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004c80:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004c84:	db02      	blt.n	8004c8c <HW_FillFrame+0x48>
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004c8a:	e03c      	b.n	8004d06 <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004c8c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	db0d      	blt.n	8004cb0 <HW_FillFrame+0x6c>
 8004c94:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004c98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004c9c:	da08      	bge.n	8004cb0 <HW_FillFrame+0x6c>
 8004c9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	db04      	blt.n	8004cb0 <HW_FillFrame+0x6c>
 8004ca6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004caa:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004cae:	db02      	blt.n	8004cb6 <HW_FillFrame+0x72>
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004cb4:	e027      	b.n	8004d06 <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004cb6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004cba:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004cbe:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004cc2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004cc6:	f7ff ff2f 	bl	8004b28 <SSD1963_WindowSet>

    write_command(0x2c);
 8004cca:	202c      	movs	r0, #44	; 0x2c
 8004ccc:	f000 f8cd 	bl	8004e6a <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8004cd0:	88fb      	ldrh	r3, [r7, #6]
 8004cd2:	81fb      	strh	r3, [r7, #14]
 8004cd4:	e011      	b.n	8004cfa <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8004cd6:	88bb      	ldrh	r3, [r7, #4]
 8004cd8:	81bb      	strh	r3, [r7, #12]
 8004cda:	e006      	b.n	8004cea <HW_FillFrame+0xa6>
        {
            write_data(c);
 8004cdc:	8c3b      	ldrh	r3, [r7, #32]
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 f8de 	bl	8004ea0 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8004ce4:	89bb      	ldrh	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	81bb      	strh	r3, [r7, #12]
 8004cea:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004cee:	89bb      	ldrh	r3, [r7, #12]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	daf3      	bge.n	8004cdc <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8004cf4:	89fb      	ldrh	r3, [r7, #14]
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	81fb      	strh	r3, [r7, #14]
 8004cfa:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004cfe:	89fb      	ldrh	r3, [r7, #14]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	dae8      	bge.n	8004cd6 <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd90      	pop	{r4, r7, pc}

08004d0e <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8004d0e:	b590      	push	{r4, r7, lr}
 8004d10:	b085      	sub	sp, #20
 8004d12:	af02      	add	r7, sp, #8
 8004d14:	4604      	mov	r4, r0
 8004d16:	4608      	mov	r0, r1
 8004d18:	4611      	mov	r1, r2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	4623      	mov	r3, r4
 8004d1e:	80fb      	strh	r3, [r7, #6]
 8004d20:	4603      	mov	r3, r0
 8004d22:	80bb      	strh	r3, [r7, #4]
 8004d24:	460b      	mov	r3, r1
 8004d26:	807b      	strh	r3, [r7, #2]
 8004d28:	4613      	mov	r3, r2
 8004d2a:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004d2c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	db0d      	blt.n	8004d50 <HW_DrawLine+0x42>
 8004d34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d38:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004d3c:	da08      	bge.n	8004d50 <HW_DrawLine+0x42>
 8004d3e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	db04      	blt.n	8004d50 <HW_DrawLine+0x42>
 8004d46:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004d4a:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004d4e:	db02      	blt.n	8004d56 <HW_DrawLine+0x48>
 8004d50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d54:	e031      	b.n	8004dba <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004d56:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	db0d      	blt.n	8004d7a <HW_DrawLine+0x6c>
 8004d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d62:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004d66:	da08      	bge.n	8004d7a <HW_DrawLine+0x6c>
 8004d68:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	db04      	blt.n	8004d7a <HW_DrawLine+0x6c>
 8004d70:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d74:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004d78:	db02      	blt.n	8004d80 <HW_DrawLine+0x72>
 8004d7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d7e:	e01c      	b.n	8004dba <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8004d80:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004d84:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d005      	beq.n	8004d98 <HW_DrawLine+0x8a>
 8004d8c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004d90:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d10e      	bne.n	8004db6 <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8004d98:	f9b7 4000 	ldrsh.w	r4, [r7]
 8004d9c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8004da0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8004da4:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004da8:	8b3b      	ldrh	r3, [r7, #24]
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	4623      	mov	r3, r4
 8004dae:	f7ff ff49 	bl	8004c44 <HW_FillFrame>
        return UG_RESULT_OK;
 8004db2:	2300      	movs	r3, #0
 8004db4:	e001      	b.n	8004dba <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd90      	pop	{r4, r7, pc}

08004dc2 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 8004dc2:	b590      	push	{r4, r7, lr}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	4604      	mov	r4, r0
 8004dca:	4608      	mov	r0, r1
 8004dcc:	4611      	mov	r1, r2
 8004dce:	461a      	mov	r2, r3
 8004dd0:	4623      	mov	r3, r4
 8004dd2:	80fb      	strh	r3, [r7, #6]
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	80bb      	strh	r3, [r7, #4]
 8004dd8:	460b      	mov	r3, r1
 8004dda:	807b      	strh	r3, [r7, #2]
 8004ddc:	4613      	mov	r3, r2
 8004dde:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004de0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	db0d      	blt.n	8004e04 <HW_DrawImage+0x42>
 8004de8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004dec:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004df0:	da08      	bge.n	8004e04 <HW_DrawImage+0x42>
 8004df2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	db04      	blt.n	8004e04 <HW_DrawImage+0x42>
 8004dfa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004dfe:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004e02:	db02      	blt.n	8004e0a <HW_DrawImage+0x48>
 8004e04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e08:	e02b      	b.n	8004e62 <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8004e0a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	db0d      	blt.n	8004e2e <HW_DrawImage+0x6c>
 8004e12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004e16:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8004e1a:	da08      	bge.n	8004e2e <HW_DrawImage+0x6c>
 8004e1c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	db04      	blt.n	8004e2e <HW_DrawImage+0x6c>
 8004e24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e28:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8004e2c:	db02      	blt.n	8004e34 <HW_DrawImage+0x72>
 8004e2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e32:	e016      	b.n	8004e62 <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8004e34:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8004e38:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8004e3c:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8004e40:	f9b7 3000 	ldrsh.w	r3, [r7]
 8004e44:	f7ff fe70 	bl	8004b28 <SSD1963_WindowSet>

    write_command(0x2c);
 8004e48:	202c      	movs	r0, #44	; 0x2c
 8004e4a:	f000 f80e 	bl	8004e6a <write_command>
    write_multi_data((DATA_t*)image, pSize*3);
 8004e4e:	8bbb      	ldrh	r3, [r7, #28]
 8004e50:	461a      	mov	r2, r3
 8004e52:	0052      	lsls	r2, r2, #1
 8004e54:	4413      	add	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	4619      	mov	r1, r3
 8004e5a:	69b8      	ldr	r0, [r7, #24]
 8004e5c:	f000 f83a 	bl	8004ed4 <write_multi_data>

    return UG_RESULT_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	370c      	adds	r7, #12
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd90      	pop	{r4, r7, pc}

08004e6a <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b085      	sub	sp, #20
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	4603      	mov	r3, r0
 8004e72:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 8004e74:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8004e78:	79fa      	ldrb	r2, [r7, #7]
 8004e7a:	b292      	uxth	r2, r2
 8004e7c:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004e7e:	2300      	movs	r3, #0
 8004e80:	81fb      	strh	r3, [r7, #14]
 8004e82:	e002      	b.n	8004e8a <write_command+0x20>
 8004e84:	89fb      	ldrh	r3, [r7, #14]
 8004e86:	3301      	adds	r3, #1
 8004e88:	81fb      	strh	r3, [r7, #14]
 8004e8a:	89fb      	ldrh	r3, [r7, #14]
 8004e8c:	2b0b      	cmp	r3, #11
 8004e8e:	d9f9      	bls.n	8004e84 <write_command+0x1a>
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <write_data>:


void write_data(DATA_t data)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 8004eaa:	4a09      	ldr	r2, [pc, #36]	; (8004ed0 <write_data+0x30>)
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	81fb      	strh	r3, [r7, #14]
 8004eb4:	e002      	b.n	8004ebc <write_data+0x1c>
 8004eb6:	89fb      	ldrh	r3, [r7, #14]
 8004eb8:	3301      	adds	r3, #1
 8004eba:	81fb      	strh	r3, [r7, #14]
 8004ebc:	89fb      	ldrh	r3, [r7, #14]
 8004ebe:	2b0b      	cmp	r3, #11
 8004ec0:	d9f9      	bls.n	8004eb6 <write_data+0x16>
 }
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	60000100 	.word	0x60000100

08004ed4 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	81fb      	strh	r3, [r7, #14]
 8004ee4:	e016      	b.n	8004f14 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 8004ee6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	4413      	add	r3, r2
 8004ef0:	4a0e      	ldr	r2, [pc, #56]	; (8004f2c <write_multi_data+0x58>)
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	81bb      	strh	r3, [r7, #12]
 8004efa:	e002      	b.n	8004f02 <write_multi_data+0x2e>
 8004efc:	89bb      	ldrh	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	81bb      	strh	r3, [r7, #12]
 8004f02:	89bb      	ldrh	r3, [r7, #12]
 8004f04:	2b0b      	cmp	r3, #11
 8004f06:	d9f9      	bls.n	8004efc <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 8004f08:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3301      	adds	r3, #1
 8004f10:	b29b      	uxth	r3, r3
 8004f12:	81fb      	strh	r3, [r7, #14]
 8004f14:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004f18:	887b      	ldrh	r3, [r7, #2]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	dbe3      	blt.n	8004ee6 <write_multi_data+0x12>
    }
}
 8004f1e:	bf00      	nop
 8004f20:	bf00      	nop
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	60000100 	.word	0x60000100

08004f30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004f30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004f68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004f34:	480d      	ldr	r0, [pc, #52]	; (8004f6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004f36:	490e      	ldr	r1, [pc, #56]	; (8004f70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004f38:	4a0e      	ldr	r2, [pc, #56]	; (8004f74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f3c:	e002      	b.n	8004f44 <LoopCopyDataInit>

08004f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f42:	3304      	adds	r3, #4

08004f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f48:	d3f9      	bcc.n	8004f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f4a:	4a0b      	ldr	r2, [pc, #44]	; (8004f78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004f4c:	4c0b      	ldr	r4, [pc, #44]	; (8004f7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f50:	e001      	b.n	8004f56 <LoopFillZerobss>

08004f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f54:	3204      	adds	r2, #4

08004f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f58:	d3fb      	bcc.n	8004f52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004f5a:	f7fe feef 	bl	8003d3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004f5e:	f009 fd2b 	bl	800e9b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004f62:	f7fd f879 	bl	8002058 <main>
  bx  lr    
 8004f66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004f68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004f6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f70:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8004f74:	0801edec 	.word	0x0801edec
  ldr r2, =_sbss
 8004f78:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8004f7c:	20004c2c 	.word	0x20004c2c

08004f80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004f80:	e7fe      	b.n	8004f80 <ADC_IRQHandler>

08004f82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f82:	b580      	push	{r7, lr}
 8004f84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004f86:	2003      	movs	r0, #3
 8004f88:	f001 fb9e 	bl	80066c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004f8c:	200f      	movs	r0, #15
 8004f8e:	f000 f805 	bl	8004f9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004f92:	f7fe f999 	bl	80032c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b082      	sub	sp, #8
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004fa4:	4b12      	ldr	r3, [pc, #72]	; (8004ff0 <HAL_InitTick+0x54>)
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	4b12      	ldr	r3, [pc, #72]	; (8004ff4 <HAL_InitTick+0x58>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	4619      	mov	r1, r3
 8004fae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004fb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f001 fbb9 	bl	8006732 <HAL_SYSTICK_Config>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e00e      	b.n	8004fe8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b0f      	cmp	r3, #15
 8004fce:	d80a      	bhi.n	8004fe6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fd8:	f001 fb81 	bl	80066de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004fdc:	4a06      	ldr	r2, [pc, #24]	; (8004ff8 <HAL_InitTick+0x5c>)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	e000      	b.n	8004fe8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004fe6:	2301      	movs	r3, #1
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3708      	adds	r7, #8
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200000ac 	.word	0x200000ac
 8004ff4:	200000b4 	.word	0x200000b4
 8004ff8:	200000b0 	.word	0x200000b0

08004ffc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005000:	4b06      	ldr	r3, [pc, #24]	; (800501c <HAL_IncTick+0x20>)
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	4b06      	ldr	r3, [pc, #24]	; (8005020 <HAL_IncTick+0x24>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4413      	add	r3, r2
 800500c:	4a04      	ldr	r2, [pc, #16]	; (8005020 <HAL_IncTick+0x24>)
 800500e:	6013      	str	r3, [r2, #0]
}
 8005010:	bf00      	nop
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	200000b4 	.word	0x200000b4
 8005020:	20002834 	.word	0x20002834

08005024 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
  return uwTick;
 8005028:	4b03      	ldr	r3, [pc, #12]	; (8005038 <HAL_GetTick+0x14>)
 800502a:	681b      	ldr	r3, [r3, #0]
}
 800502c:	4618      	mov	r0, r3
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	20002834 	.word	0x20002834

0800503c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005044:	f7ff ffee 	bl	8005024 <HAL_GetTick>
 8005048:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005054:	d005      	beq.n	8005062 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005056:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <HAL_Delay+0x44>)
 8005058:	781b      	ldrb	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	4413      	add	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005062:	bf00      	nop
 8005064:	f7ff ffde 	bl	8005024 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	429a      	cmp	r2, r3
 8005072:	d8f7      	bhi.n	8005064 <HAL_Delay+0x28>
  {
  }
}
 8005074:	bf00      	nop
 8005076:	bf00      	nop
 8005078:	3710      	adds	r7, #16
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	200000b4 	.word	0x200000b4

08005084 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d101      	bne.n	800509a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e031      	b.n	80050fe <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d109      	bne.n	80050b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f7fe f934 	bl	8003310 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 0310 	and.w	r3, r3, #16
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d116      	bne.n	80050f0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050c6:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_ADC_Init+0x84>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	f043 0202 	orr.w	r2, r3, #2
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fad6 	bl	8005684 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2200      	movs	r2, #0
 80050dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	f043 0201 	orr.w	r2, r3, #1
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	641a      	str	r2, [r3, #64]	; 0x40
 80050ee:	e001      	b.n	80050f4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}
 8005106:	bf00      	nop
 8005108:	ffffeefd 	.word	0xffffeefd

0800510c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005114:	2300      	movs	r3, #0
 8005116:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800511e:	2b01      	cmp	r3, #1
 8005120:	d101      	bne.n	8005126 <HAL_ADC_Start+0x1a>
 8005122:	2302      	movs	r3, #2
 8005124:	e0ad      	b.n	8005282 <HAL_ADC_Start+0x176>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2201      	movs	r2, #1
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	f003 0301 	and.w	r3, r3, #1
 8005138:	2b01      	cmp	r3, #1
 800513a:	d018      	beq.n	800516e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	689a      	ldr	r2, [r3, #8]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800514c:	4b50      	ldr	r3, [pc, #320]	; (8005290 <HAL_ADC_Start+0x184>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a50      	ldr	r2, [pc, #320]	; (8005294 <HAL_ADC_Start+0x188>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0c9a      	lsrs	r2, r3, #18
 8005158:	4613      	mov	r3, r2
 800515a:	005b      	lsls	r3, r3, #1
 800515c:	4413      	add	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005160:	e002      	b.n	8005168 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3b01      	subs	r3, #1
 8005166:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f9      	bne.n	8005162 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f003 0301 	and.w	r3, r3, #1
 8005178:	2b01      	cmp	r3, #1
 800517a:	d175      	bne.n	8005268 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005180:	4b45      	ldr	r3, [pc, #276]	; (8005298 <HAL_ADC_Start+0x18c>)
 8005182:	4013      	ands	r3, r2
 8005184:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005196:	2b00      	cmp	r3, #0
 8005198:	d007      	beq.n	80051aa <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80051a2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b6:	d106      	bne.n	80051c6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051bc:	f023 0206 	bic.w	r2, r3, #6
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	645a      	str	r2, [r3, #68]	; 0x44
 80051c4:	e002      	b.n	80051cc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80051dc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80051de:	4b2f      	ldr	r3, [pc, #188]	; (800529c <HAL_ADC_Start+0x190>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10f      	bne.n	800520a <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d143      	bne.n	8005280 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689a      	ldr	r2, [r3, #8]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005206:	609a      	str	r2, [r3, #8]
 8005208:	e03a      	b.n	8005280 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a24      	ldr	r2, [pc, #144]	; (80052a0 <HAL_ADC_Start+0x194>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d10e      	bne.n	8005232 <HAL_ADC_Start+0x126>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800521e:	2b00      	cmp	r3, #0
 8005220:	d107      	bne.n	8005232 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	689a      	ldr	r2, [r3, #8]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005230:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005232:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_ADC_Start+0x190>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b00      	cmp	r3, #0
 800523c:	d120      	bne.n	8005280 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a18      	ldr	r2, [pc, #96]	; (80052a4 <HAL_ADC_Start+0x198>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d11b      	bne.n	8005280 <HAL_ADC_Start+0x174>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d114      	bne.n	8005280 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	689a      	ldr	r2, [r3, #8]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005264:	609a      	str	r2, [r3, #8]
 8005266:	e00b      	b.n	8005280 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526c:	f043 0210 	orr.w	r2, r3, #16
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005278:	f043 0201 	orr.w	r2, r3, #1
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	200000ac 	.word	0x200000ac
 8005294:	431bde83 	.word	0x431bde83
 8005298:	fffff8fe 	.word	0xfffff8fe
 800529c:	40012300 	.word	0x40012300
 80052a0:	40012000 	.word	0x40012000
 80052a4:	40012200 	.word	0x40012200

080052a8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052c4:	d113      	bne.n	80052ee <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80052d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d4:	d10b      	bne.n	80052ee <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f043 0220 	orr.w	r2, r3, #32
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e063      	b.n	80053b6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80052ee:	f7ff fe99 	bl	8005024 <HAL_GetTick>
 80052f2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80052f4:	e021      	b.n	800533a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fc:	d01d      	beq.n	800533a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_ADC_PollForConversion+0x6c>
 8005304:	f7ff fe8e 	bl	8005024 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	429a      	cmp	r2, r3
 8005312:	d212      	bcs.n	800533a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d00b      	beq.n	800533a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f043 0204 	orr.w	r2, r3, #4
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005336:	2303      	movs	r3, #3
 8005338:	e03d      	b.n	80053b6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0302 	and.w	r3, r3, #2
 8005344:	2b02      	cmp	r3, #2
 8005346:	d1d6      	bne.n	80052f6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f06f 0212 	mvn.w	r2, #18
 8005350:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005368:	2b00      	cmp	r3, #0
 800536a:	d123      	bne.n	80053b4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005370:	2b00      	cmp	r3, #0
 8005372:	d11f      	bne.n	80053b4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800537e:	2b00      	cmp	r3, #0
 8005380:	d006      	beq.n	8005390 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800538c:	2b00      	cmp	r3, #0
 800538e:	d111      	bne.n	80053b4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005394:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d105      	bne.n	80053b4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ac:	f043 0201 	orr.w	r2, r3, #1
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80053be:	b480      	push	{r7}
 80053c0:	b083      	sub	sp, #12
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80053d8:	b480      	push	{r7}
 80053da:	b085      	sub	sp, #20
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d101      	bne.n	80053f4 <HAL_ADC_ConfigChannel+0x1c>
 80053f0:	2302      	movs	r3, #2
 80053f2:	e136      	b.n	8005662 <HAL_ADC_ConfigChannel+0x28a>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	2b09      	cmp	r3, #9
 8005402:	d93a      	bls.n	800547a <HAL_ADC_ConfigChannel+0xa2>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800540c:	d035      	beq.n	800547a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68d9      	ldr	r1, [r3, #12]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	b29b      	uxth	r3, r3
 800541a:	461a      	mov	r2, r3
 800541c:	4613      	mov	r3, r2
 800541e:	005b      	lsls	r3, r3, #1
 8005420:	4413      	add	r3, r2
 8005422:	3b1e      	subs	r3, #30
 8005424:	2207      	movs	r2, #7
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	43da      	mvns	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	400a      	ands	r2, r1
 8005432:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a8d      	ldr	r2, [pc, #564]	; (8005670 <HAL_ADC_ConfigChannel+0x298>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d10a      	bne.n	8005454 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68d9      	ldr	r1, [r3, #12]
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	689b      	ldr	r3, [r3, #8]
 8005448:	061a      	lsls	r2, r3, #24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005452:	e035      	b.n	80054c0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68d9      	ldr	r1, [r3, #12]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	b29b      	uxth	r3, r3
 8005464:	4618      	mov	r0, r3
 8005466:	4603      	mov	r3, r0
 8005468:	005b      	lsls	r3, r3, #1
 800546a:	4403      	add	r3, r0
 800546c:	3b1e      	subs	r3, #30
 800546e:	409a      	lsls	r2, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005478:	e022      	b.n	80054c0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6919      	ldr	r1, [r3, #16]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	b29b      	uxth	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	4613      	mov	r3, r2
 800548a:	005b      	lsls	r3, r3, #1
 800548c:	4413      	add	r3, r2
 800548e:	2207      	movs	r2, #7
 8005490:	fa02 f303 	lsl.w	r3, r2, r3
 8005494:	43da      	mvns	r2, r3
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	400a      	ands	r2, r1
 800549c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	6919      	ldr	r1, [r3, #16]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	4618      	mov	r0, r3
 80054b0:	4603      	mov	r3, r0
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4403      	add	r3, r0
 80054b6:	409a      	lsls	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	430a      	orrs	r2, r1
 80054be:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2b06      	cmp	r3, #6
 80054c6:	d824      	bhi.n	8005512 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	685a      	ldr	r2, [r3, #4]
 80054d2:	4613      	mov	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	4413      	add	r3, r2
 80054d8:	3b05      	subs	r3, #5
 80054da:	221f      	movs	r2, #31
 80054dc:	fa02 f303 	lsl.w	r3, r2, r3
 80054e0:	43da      	mvns	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	400a      	ands	r2, r1
 80054e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	4618      	mov	r0, r3
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	3b05      	subs	r3, #5
 8005504:	fa00 f203 	lsl.w	r2, r0, r3
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	635a      	str	r2, [r3, #52]	; 0x34
 8005510:	e04c      	b.n	80055ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b0c      	cmp	r3, #12
 8005518:	d824      	bhi.n	8005564 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685a      	ldr	r2, [r3, #4]
 8005524:	4613      	mov	r3, r2
 8005526:	009b      	lsls	r3, r3, #2
 8005528:	4413      	add	r3, r2
 800552a:	3b23      	subs	r3, #35	; 0x23
 800552c:	221f      	movs	r2, #31
 800552e:	fa02 f303 	lsl.w	r3, r2, r3
 8005532:	43da      	mvns	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	400a      	ands	r2, r1
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	4618      	mov	r0, r3
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	4613      	mov	r3, r2
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	4413      	add	r3, r2
 8005554:	3b23      	subs	r3, #35	; 0x23
 8005556:	fa00 f203 	lsl.w	r2, r0, r3
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	430a      	orrs	r2, r1
 8005560:	631a      	str	r2, [r3, #48]	; 0x30
 8005562:	e023      	b.n	80055ac <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	685a      	ldr	r2, [r3, #4]
 800556e:	4613      	mov	r3, r2
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	4413      	add	r3, r2
 8005574:	3b41      	subs	r3, #65	; 0x41
 8005576:	221f      	movs	r2, #31
 8005578:	fa02 f303 	lsl.w	r3, r2, r3
 800557c:	43da      	mvns	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	400a      	ands	r2, r1
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	4618      	mov	r0, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	4413      	add	r3, r2
 800559e:	3b41      	subs	r3, #65	; 0x41
 80055a0:	fa00 f203 	lsl.w	r2, r0, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	430a      	orrs	r2, r1
 80055aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a30      	ldr	r2, [pc, #192]	; (8005674 <HAL_ADC_ConfigChannel+0x29c>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d10a      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1f4>
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055be:	d105      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80055c0:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 80055c6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80055ca:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a28      	ldr	r2, [pc, #160]	; (8005674 <HAL_ADC_ConfigChannel+0x29c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10f      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x21e>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b12      	cmp	r3, #18
 80055dc:	d10b      	bne.n	80055f6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80055de:	4b26      	ldr	r3, [pc, #152]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	4a25      	ldr	r2, [pc, #148]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 80055e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80055e8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80055ea:	4b23      	ldr	r3, [pc, #140]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	4a22      	ldr	r2, [pc, #136]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 80055f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80055f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1e      	ldr	r2, [pc, #120]	; (8005674 <HAL_ADC_ConfigChannel+0x29c>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d12b      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x280>
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1a      	ldr	r2, [pc, #104]	; (8005670 <HAL_ADC_ConfigChannel+0x298>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d003      	beq.n	8005612 <HAL_ADC_ConfigChannel+0x23a>
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	2b11      	cmp	r3, #17
 8005610:	d122      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005612:	4b19      	ldr	r3, [pc, #100]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	4a18      	ldr	r2, [pc, #96]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 8005618:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800561c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800561e:	4b16      	ldr	r3, [pc, #88]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	4a15      	ldr	r2, [pc, #84]	; (8005678 <HAL_ADC_ConfigChannel+0x2a0>)
 8005624:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005628:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a10      	ldr	r2, [pc, #64]	; (8005670 <HAL_ADC_ConfigChannel+0x298>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d111      	bne.n	8005658 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005634:	4b11      	ldr	r3, [pc, #68]	; (800567c <HAL_ADC_ConfigChannel+0x2a4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a11      	ldr	r2, [pc, #68]	; (8005680 <HAL_ADC_ConfigChannel+0x2a8>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0c9a      	lsrs	r2, r3, #18
 8005640:	4613      	mov	r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	4413      	add	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800564a:	e002      	b.n	8005652 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	3b01      	subs	r3, #1
 8005650:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1f9      	bne.n	800564c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3714      	adds	r7, #20
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	10000012 	.word	0x10000012
 8005674:	40012000 	.word	0x40012000
 8005678:	40012300 	.word	0x40012300
 800567c:	200000ac 	.word	0x200000ac
 8005680:	431bde83 	.word	0x431bde83

08005684 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005684:	b480      	push	{r7}
 8005686:	b083      	sub	sp, #12
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800568c:	4b78      	ldr	r3, [pc, #480]	; (8005870 <ADC_Init+0x1ec>)
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	4a77      	ldr	r2, [pc, #476]	; (8005870 <ADC_Init+0x1ec>)
 8005692:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005696:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005698:	4b75      	ldr	r3, [pc, #468]	; (8005870 <ADC_Init+0x1ec>)
 800569a:	685a      	ldr	r2, [r3, #4]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	4973      	ldr	r1, [pc, #460]	; (8005870 <ADC_Init+0x1ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056b4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	6859      	ldr	r1, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	691b      	ldr	r3, [r3, #16]
 80056c0:	021a      	lsls	r2, r3, #8
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80056d8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6859      	ldr	r1, [r3, #4]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80056fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6899      	ldr	r1, [r3, #8]
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68da      	ldr	r2, [r3, #12]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	430a      	orrs	r2, r1
 800570c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005712:	4a58      	ldr	r2, [pc, #352]	; (8005874 <ADC_Init+0x1f0>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d022      	beq.n	800575e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689a      	ldr	r2, [r3, #8]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005726:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6899      	ldr	r1, [r3, #8]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	689a      	ldr	r2, [r3, #8]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005748:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	6899      	ldr	r1, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	430a      	orrs	r2, r1
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	e00f      	b.n	800577e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800576c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	689a      	ldr	r2, [r3, #8]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800577c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	689a      	ldr	r2, [r3, #8]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f022 0202 	bic.w	r2, r2, #2
 800578c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6899      	ldr	r1, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	699b      	ldr	r3, [r3, #24]
 8005798:	005a      	lsls	r2, r3, #1
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d01b      	beq.n	80057e4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685a      	ldr	r2, [r3, #4]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80057ca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d6:	3b01      	subs	r3, #1
 80057d8:	035a      	lsls	r2, r3, #13
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	605a      	str	r2, [r3, #4]
 80057e2:	e007      	b.n	80057f4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80057f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005802:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	69db      	ldr	r3, [r3, #28]
 800580e:	3b01      	subs	r3, #1
 8005810:	051a      	lsls	r2, r3, #20
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	689a      	ldr	r2, [r3, #8]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005828:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6899      	ldr	r1, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005836:	025a      	lsls	r2, r3, #9
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	430a      	orrs	r2, r1
 800583e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	689a      	ldr	r2, [r3, #8]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800584e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6899      	ldr	r1, [r3, #8]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	695b      	ldr	r3, [r3, #20]
 800585a:	029a      	lsls	r2, r3, #10
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	430a      	orrs	r2, r1
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr
 8005870:	40012300 	.word	0x40012300
 8005874:	0f000001 	.word	0x0f000001

08005878 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e0ed      	b.n	8005a66 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005890:	b2db      	uxtb	r3, r3
 8005892:	2b00      	cmp	r3, #0
 8005894:	d102      	bne.n	800589c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7fd fe12 	bl	80034c0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058ac:	f7ff fbba 	bl	8005024 <HAL_GetTick>
 80058b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80058b2:	e012      	b.n	80058da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80058b4:	f7ff fbb6 	bl	8005024 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b0a      	cmp	r3, #10
 80058c0:	d90b      	bls.n	80058da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2205      	movs	r2, #5
 80058d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e0c5      	b.n	8005a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f003 0301 	and.w	r3, r3, #1
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d0e5      	beq.n	80058b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0202 	bic.w	r2, r2, #2
 80058f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80058f8:	f7ff fb94 	bl	8005024 <HAL_GetTick>
 80058fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80058fe:	e012      	b.n	8005926 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005900:	f7ff fb90 	bl	8005024 <HAL_GetTick>
 8005904:	4602      	mov	r2, r0
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	1ad3      	subs	r3, r2, r3
 800590a:	2b0a      	cmp	r3, #10
 800590c:	d90b      	bls.n	8005926 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2205      	movs	r2, #5
 800591e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	e09f      	b.n	8005a66 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	f003 0302 	and.w	r3, r3, #2
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1e5      	bne.n	8005900 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	7e1b      	ldrb	r3, [r3, #24]
 8005938:	2b01      	cmp	r3, #1
 800593a:	d108      	bne.n	800594e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	e007      	b.n	800595e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800595c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	7e5b      	ldrb	r3, [r3, #25]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d108      	bne.n	8005978 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681a      	ldr	r2, [r3, #0]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	e007      	b.n	8005988 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005986:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	7e9b      	ldrb	r3, [r3, #26]
 800598c:	2b01      	cmp	r3, #1
 800598e:	d108      	bne.n	80059a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0220 	orr.w	r2, r2, #32
 800599e:	601a      	str	r2, [r3, #0]
 80059a0:	e007      	b.n	80059b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0220 	bic.w	r2, r2, #32
 80059b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	7edb      	ldrb	r3, [r3, #27]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d108      	bne.n	80059cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f022 0210 	bic.w	r2, r2, #16
 80059c8:	601a      	str	r2, [r3, #0]
 80059ca:	e007      	b.n	80059dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0210 	orr.w	r2, r2, #16
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	7f1b      	ldrb	r3, [r3, #28]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d108      	bne.n	80059f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	681a      	ldr	r2, [r3, #0]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0208 	orr.w	r2, r2, #8
 80059f2:	601a      	str	r2, [r3, #0]
 80059f4:	e007      	b.n	8005a06 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0208 	bic.w	r2, r2, #8
 8005a04:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	7f5b      	ldrb	r3, [r3, #29]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d108      	bne.n	8005a20 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0204 	orr.w	r2, r2, #4
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e007      	b.n	8005a30 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f022 0204 	bic.w	r2, r2, #4
 8005a2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	ea42 0103 	orr.w	r1, r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	1e5a      	subs	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	430a      	orrs	r2, r1
 8005a54:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a86:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005a88:	7cfb      	ldrb	r3, [r7, #19]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d003      	beq.n	8005a96 <HAL_CAN_ConfigFilter+0x26>
 8005a8e:	7cfb      	ldrb	r3, [r7, #19]
 8005a90:	2b02      	cmp	r3, #2
 8005a92:	f040 80be 	bne.w	8005c12 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005a96:	4b65      	ldr	r3, [pc, #404]	; (8005c2c <HAL_CAN_ConfigFilter+0x1bc>)
 8005a98:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa0:	f043 0201 	orr.w	r2, r3, #1
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ab0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	695b      	ldr	r3, [r3, #20]
 8005ad2:	f003 031f 	and.w	r3, r3, #31
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8005adc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	401a      	ands	r2, r3
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d123      	bne.n	8005b40 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	43db      	mvns	r3, r3
 8005b02:	401a      	ands	r2, r3
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005b1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	3248      	adds	r2, #72	; 0x48
 8005b20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	689b      	ldr	r3, [r3, #8]
 8005b28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b36:	6979      	ldr	r1, [r7, #20]
 8005b38:	3348      	adds	r3, #72	; 0x48
 8005b3a:	00db      	lsls	r3, r3, #3
 8005b3c:	440b      	add	r3, r1
 8005b3e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	69db      	ldr	r3, [r3, #28]
 8005b44:	2b01      	cmp	r3, #1
 8005b46:	d122      	bne.n	8005b8e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	431a      	orrs	r2, r3
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005b68:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	3248      	adds	r2, #72	; 0x48
 8005b6e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005b82:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005b84:	6979      	ldr	r1, [r7, #20]
 8005b86:	3348      	adds	r3, #72	; 0x48
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	440b      	add	r3, r1
 8005b8c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	699b      	ldr	r3, [r3, #24]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d109      	bne.n	8005baa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	43db      	mvns	r3, r3
 8005ba0:	401a      	ands	r2, r3
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005ba8:	e007      	b.n	8005bba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	691b      	ldr	r3, [r3, #16]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d109      	bne.n	8005bd6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	401a      	ands	r2, r3
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005bd4:	e007      	b.n	8005be6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	431a      	orrs	r2, r3
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	6a1b      	ldr	r3, [r3, #32]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d107      	bne.n	8005bfe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c04:	f023 0201 	bic.w	r2, r3, #1
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	e006      	b.n	8005c20 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c16:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
  }
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	371c      	adds	r7, #28
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	40006400 	.word	0x40006400

08005c30 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b084      	sub	sp, #16
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d12e      	bne.n	8005ca2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f022 0201 	bic.w	r2, r2, #1
 8005c5a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005c5c:	f7ff f9e2 	bl	8005024 <HAL_GetTick>
 8005c60:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c62:	e012      	b.n	8005c8a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005c64:	f7ff f9de 	bl	8005024 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b0a      	cmp	r3, #10
 8005c70:	d90b      	bls.n	8005c8a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2205      	movs	r2, #5
 8005c82:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e012      	b.n	8005cb0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	f003 0301 	and.w	r3, r3, #1
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1e5      	bne.n	8005c64 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	e006      	b.n	8005cb0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
  }
}
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	3710      	adds	r7, #16
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b089      	sub	sp, #36	; 0x24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
 8005cc4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ccc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005cd6:	7ffb      	ldrb	r3, [r7, #31]
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d003      	beq.n	8005ce4 <HAL_CAN_AddTxMessage+0x2c>
 8005cdc:	7ffb      	ldrb	r3, [r7, #31]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	f040 80ad 	bne.w	8005e3e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d10a      	bne.n	8005d04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005cee:	69bb      	ldr	r3, [r7, #24]
 8005cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d105      	bne.n	8005d04 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 8095 	beq.w	8005e2e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	0e1b      	lsrs	r3, r3, #24
 8005d08:	f003 0303 	and.w	r3, r3, #3
 8005d0c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005d0e:	2201      	movs	r2, #1
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	409a      	lsls	r2, r3
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10d      	bne.n	8005d3c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	6809      	ldr	r1, [r1, #0]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	3318      	adds	r3, #24
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	440b      	add	r3, r1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e00f      	b.n	8005d5c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d46:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d4c:	68f9      	ldr	r1, [r7, #12]
 8005d4e:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005d50:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	3318      	adds	r3, #24
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	440b      	add	r3, r1
 8005d5a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6819      	ldr	r1, [r3, #0]
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	691a      	ldr	r2, [r3, #16]
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	3318      	adds	r3, #24
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	440b      	add	r3, r1
 8005d6c:	3304      	adds	r3, #4
 8005d6e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	7d1b      	ldrb	r3, [r3, #20]
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d111      	bne.n	8005d9c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	3318      	adds	r3, #24
 8005d80:	011b      	lsls	r3, r3, #4
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	6811      	ldr	r1, [r2, #0]
 8005d8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	3318      	adds	r3, #24
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	440b      	add	r3, r1
 8005d98:	3304      	adds	r3, #4
 8005d9a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	3307      	adds	r3, #7
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	061a      	lsls	r2, r3, #24
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	3306      	adds	r3, #6
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	041b      	lsls	r3, r3, #16
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	3305      	adds	r3, #5
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	021b      	lsls	r3, r3, #8
 8005db6:	4313      	orrs	r3, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	3204      	adds	r2, #4
 8005dbc:	7812      	ldrb	r2, [r2, #0]
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	68fa      	ldr	r2, [r7, #12]
 8005dc2:	6811      	ldr	r1, [r2, #0]
 8005dc4:	ea43 0200 	orr.w	r2, r3, r0
 8005dc8:	697b      	ldr	r3, [r7, #20]
 8005dca:	011b      	lsls	r3, r3, #4
 8005dcc:	440b      	add	r3, r1
 8005dce:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005dd2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	3303      	adds	r3, #3
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	061a      	lsls	r2, r3, #24
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	3302      	adds	r3, #2
 8005de0:	781b      	ldrb	r3, [r3, #0]
 8005de2:	041b      	lsls	r3, r3, #16
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	3301      	adds	r3, #1
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	4313      	orrs	r3, r2
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	7812      	ldrb	r2, [r2, #0]
 8005df4:	4610      	mov	r0, r2
 8005df6:	68fa      	ldr	r2, [r7, #12]
 8005df8:	6811      	ldr	r1, [r2, #0]
 8005dfa:	ea43 0200 	orr.w	r2, r3, r0
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	440b      	add	r3, r1
 8005e04:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005e08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	3318      	adds	r3, #24
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	4413      	add	r3, r2
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	6811      	ldr	r1, [r2, #0]
 8005e1c:	f043 0201 	orr.w	r2, r3, #1
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	3318      	adds	r3, #24
 8005e24:	011b      	lsls	r3, r3, #4
 8005e26:	440b      	add	r3, r1
 8005e28:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	e00e      	b.n	8005e4c <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e32:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e006      	b.n	8005e4c <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
  }
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3724      	adds	r7, #36	; 0x24
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	60f8      	str	r0, [r7, #12]
 8005e60:	60b9      	str	r1, [r7, #8]
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e6e:	7dfb      	ldrb	r3, [r7, #23]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d003      	beq.n	8005e7c <HAL_CAN_GetRxMessage+0x24>
 8005e74:	7dfb      	ldrb	r3, [r7, #23]
 8005e76:	2b02      	cmp	r3, #2
 8005e78:	f040 80f3 	bne.w	8006062 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10e      	bne.n	8005ea0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	f003 0303 	and.w	r3, r3, #3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d116      	bne.n	8005ebe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e0e7      	b.n	8006070 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d107      	bne.n	8005ebe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	e0d8      	b.n	8006070 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	331b      	adds	r3, #27
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f003 0204 	and.w	r2, r3, #4
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10c      	bne.n	8005ef6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	331b      	adds	r3, #27
 8005ee4:	011b      	lsls	r3, r3, #4
 8005ee6:	4413      	add	r3, r2
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	0d5b      	lsrs	r3, r3, #21
 8005eec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	e00b      	b.n	8005f0e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681a      	ldr	r2, [r3, #0]
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	331b      	adds	r3, #27
 8005efe:	011b      	lsls	r3, r3, #4
 8005f00:	4413      	add	r3, r2
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	08db      	lsrs	r3, r3, #3
 8005f06:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	331b      	adds	r3, #27
 8005f16:	011b      	lsls	r3, r3, #4
 8005f18:	4413      	add	r3, r2
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0202 	and.w	r2, r3, #2
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681a      	ldr	r2, [r3, #0]
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	331b      	adds	r3, #27
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	4413      	add	r3, r2
 8005f30:	3304      	adds	r3, #4
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 020f 	and.w	r2, r3, #15
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	331b      	adds	r3, #27
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	4413      	add	r3, r2
 8005f48:	3304      	adds	r3, #4
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0a1b      	lsrs	r3, r3, #8
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	331b      	adds	r3, #27
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	4413      	add	r3, r2
 8005f60:	3304      	adds	r3, #4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	0c1b      	lsrs	r3, r3, #16
 8005f66:	b29a      	uxth	r2, r3
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	011b      	lsls	r3, r3, #4
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4413      	add	r3, r2
 8005f8c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	0a1a      	lsrs	r2, r3, #8
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	3301      	adds	r3, #1
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681a      	ldr	r2, [r3, #0]
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	011b      	lsls	r3, r3, #4
 8005fa4:	4413      	add	r3, r2
 8005fa6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	0c1a      	lsrs	r2, r3, #16
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	3302      	adds	r3, #2
 8005fb2:	b2d2      	uxtb	r2, r2
 8005fb4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	011b      	lsls	r3, r3, #4
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	0e1a      	lsrs	r2, r3, #24
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	3303      	adds	r3, #3
 8005fcc:	b2d2      	uxtb	r2, r2
 8005fce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	011b      	lsls	r3, r3, #4
 8005fd8:	4413      	add	r3, r2
 8005fda:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	3304      	adds	r3, #4
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	011b      	lsls	r3, r3, #4
 8005ff0:	4413      	add	r3, r2
 8005ff2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	0a1a      	lsrs	r2, r3, #8
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	3305      	adds	r3, #5
 8005ffe:	b2d2      	uxtb	r2, r2
 8006000:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	011b      	lsls	r3, r3, #4
 800600a:	4413      	add	r3, r2
 800600c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	0c1a      	lsrs	r2, r3, #16
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	3306      	adds	r3, #6
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	4413      	add	r3, r2
 8006026:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	0e1a      	lsrs	r2, r3, #24
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	3307      	adds	r3, #7
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d108      	bne.n	800604e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68da      	ldr	r2, [r3, #12]
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0220 	orr.w	r2, r2, #32
 800604a:	60da      	str	r2, [r3, #12]
 800604c:	e007      	b.n	800605e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	691a      	ldr	r2, [r3, #16]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f042 0220 	orr.w	r2, r2, #32
 800605c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	e006      	b.n	8006070 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	371c      	adds	r7, #28
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800607c:	b480      	push	{r7}
 800607e:	b085      	sub	sp, #20
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
 8006084:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 3020 	ldrb.w	r3, [r3, #32]
 800608c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d002      	beq.n	800609a <HAL_CAN_ActivateNotification+0x1e>
 8006094:	7bfb      	ldrb	r3, [r7, #15]
 8006096:	2b02      	cmp	r3, #2
 8006098:	d109      	bne.n	80060ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	6959      	ldr	r1, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	683a      	ldr	r2, [r7, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80060aa:	2300      	movs	r3, #0
 80060ac:	e006      	b.n	80060bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b08a      	sub	sp, #40	; 0x28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80060d0:	2300      	movs	r3, #0
 80060d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006104:	6a3b      	ldr	r3, [r7, #32]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d07c      	beq.n	8006208 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800610e:	69bb      	ldr	r3, [r7, #24]
 8006110:	f003 0301 	and.w	r3, r3, #1
 8006114:	2b00      	cmp	r3, #0
 8006116:	d023      	beq.n	8006160 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2201      	movs	r2, #1
 800611e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	f003 0302 	and.w	r3, r3, #2
 8006126:	2b00      	cmp	r3, #0
 8006128:	d003      	beq.n	8006132 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f983 	bl	8006436 <HAL_CAN_TxMailbox0CompleteCallback>
 8006130:	e016      	b.n	8006160 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d004      	beq.n	8006146 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
 8006144:	e00c      	b.n	8006160 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006146:	69bb      	ldr	r3, [r7, #24]
 8006148:	f003 0308 	and.w	r3, r3, #8
 800614c:	2b00      	cmp	r3, #0
 800614e:	d004      	beq.n	800615a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006156:	627b      	str	r3, [r7, #36]	; 0x24
 8006158:	e002      	b.n	8006160 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 f989 	bl	8006472 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006160:	69bb      	ldr	r3, [r7, #24]
 8006162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006166:	2b00      	cmp	r3, #0
 8006168:	d024      	beq.n	80061b4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006172:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800617a:	2b00      	cmp	r3, #0
 800617c:	d003      	beq.n	8006186 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f963 	bl	800644a <HAL_CAN_TxMailbox1CompleteCallback>
 8006184:	e016      	b.n	80061b4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800618c:	2b00      	cmp	r3, #0
 800618e:	d004      	beq.n	800619a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006192:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006196:	627b      	str	r3, [r7, #36]	; 0x24
 8006198:	e00c      	b.n	80061b4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d004      	beq.n	80061ae <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061aa:	627b      	str	r3, [r7, #36]	; 0x24
 80061ac:	e002      	b.n	80061b4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80061ae:	6878      	ldr	r0, [r7, #4]
 80061b0:	f000 f969 	bl	8006486 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d024      	beq.n	8006208 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80061c6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80061d2:	6878      	ldr	r0, [r7, #4]
 80061d4:	f000 f943 	bl	800645e <HAL_CAN_TxMailbox2CompleteCallback>
 80061d8:	e016      	b.n	8006208 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d004      	beq.n	80061ee <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80061e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061ea:	627b      	str	r3, [r7, #36]	; 0x24
 80061ec:	e00c      	b.n	8006208 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80061ee:	69bb      	ldr	r3, [r7, #24]
 80061f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d004      	beq.n	8006202 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80061f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006200:	e002      	b.n	8006208 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f949 	bl	800649a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006208:	6a3b      	ldr	r3, [r7, #32]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00c      	beq.n	800622c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f003 0310 	and.w	r3, r3, #16
 8006218:	2b00      	cmp	r3, #0
 800621a:	d007      	beq.n	800622c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800621c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006222:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2210      	movs	r2, #16
 800622a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	f003 0304 	and.w	r3, r3, #4
 8006232:	2b00      	cmp	r3, #0
 8006234:	d00b      	beq.n	800624e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f003 0308 	and.w	r3, r3, #8
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	2208      	movs	r2, #8
 8006246:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f930 	bl	80064ae <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800624e:	6a3b      	ldr	r3, [r7, #32]
 8006250:	f003 0302 	and.w	r3, r3, #2
 8006254:	2b00      	cmp	r3, #0
 8006256:	d009      	beq.n	800626c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0303 	and.w	r3, r3, #3
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f7fa fdc6 	bl	8000df8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800626c:	6a3b      	ldr	r3, [r7, #32]
 800626e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00c      	beq.n	8006290 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	f003 0310 	and.w	r3, r3, #16
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006286:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2210      	movs	r2, #16
 800628e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f003 0320 	and.w	r3, r3, #32
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00b      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f003 0308 	and.w	r3, r3, #8
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d006      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2208      	movs	r2, #8
 80062aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f912 	bl	80064d6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	f003 0310 	and.w	r3, r3, #16
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d009      	beq.n	80062d0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	691b      	ldr	r3, [r3, #16]
 80062c2:	f003 0303 	and.w	r3, r3, #3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d002      	beq.n	80062d0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f8f9 	bl	80064c2 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00b      	beq.n	80062f2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	f003 0310 	and.w	r3, r3, #16
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d006      	beq.n	80062f2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2210      	movs	r2, #16
 80062ea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f000 f8fc 	bl	80064ea <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80062f2:	6a3b      	ldr	r3, [r7, #32]
 80062f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80062fc:	69fb      	ldr	r3, [r7, #28]
 80062fe:	f003 0308 	and.w	r3, r3, #8
 8006302:	2b00      	cmp	r3, #0
 8006304:	d006      	beq.n	8006314 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 f8f5 	bl	80064fe <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d07b      	beq.n	8006416 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b00      	cmp	r3, #0
 8006326:	d072      	beq.n	800640e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006328:	6a3b      	ldr	r3, [r7, #32]
 800632a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d008      	beq.n	8006344 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	f043 0301 	orr.w	r3, r3, #1
 8006342:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800634a:	2b00      	cmp	r3, #0
 800634c:	d008      	beq.n	8006360 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006354:	2b00      	cmp	r3, #0
 8006356:	d003      	beq.n	8006360 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635a:	f043 0302 	orr.w	r3, r3, #2
 800635e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006360:	6a3b      	ldr	r3, [r7, #32]
 8006362:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006366:	2b00      	cmp	r3, #0
 8006368:	d008      	beq.n	800637c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006376:	f043 0304 	orr.w	r3, r3, #4
 800637a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006382:	2b00      	cmp	r3, #0
 8006384:	d043      	beq.n	800640e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800638c:	2b00      	cmp	r3, #0
 800638e:	d03e      	beq.n	800640e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006396:	2b60      	cmp	r3, #96	; 0x60
 8006398:	d02b      	beq.n	80063f2 <HAL_CAN_IRQHandler+0x32a>
 800639a:	2b60      	cmp	r3, #96	; 0x60
 800639c:	d82e      	bhi.n	80063fc <HAL_CAN_IRQHandler+0x334>
 800639e:	2b50      	cmp	r3, #80	; 0x50
 80063a0:	d022      	beq.n	80063e8 <HAL_CAN_IRQHandler+0x320>
 80063a2:	2b50      	cmp	r3, #80	; 0x50
 80063a4:	d82a      	bhi.n	80063fc <HAL_CAN_IRQHandler+0x334>
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d019      	beq.n	80063de <HAL_CAN_IRQHandler+0x316>
 80063aa:	2b40      	cmp	r3, #64	; 0x40
 80063ac:	d826      	bhi.n	80063fc <HAL_CAN_IRQHandler+0x334>
 80063ae:	2b30      	cmp	r3, #48	; 0x30
 80063b0:	d010      	beq.n	80063d4 <HAL_CAN_IRQHandler+0x30c>
 80063b2:	2b30      	cmp	r3, #48	; 0x30
 80063b4:	d822      	bhi.n	80063fc <HAL_CAN_IRQHandler+0x334>
 80063b6:	2b10      	cmp	r3, #16
 80063b8:	d002      	beq.n	80063c0 <HAL_CAN_IRQHandler+0x2f8>
 80063ba:	2b20      	cmp	r3, #32
 80063bc:	d005      	beq.n	80063ca <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80063be:	e01d      	b.n	80063fc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	f043 0308 	orr.w	r3, r3, #8
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063c8:	e019      	b.n	80063fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	f043 0310 	orr.w	r3, r3, #16
 80063d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063d2:	e014      	b.n	80063fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80063d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d6:	f043 0320 	orr.w	r3, r3, #32
 80063da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063dc:	e00f      	b.n	80063fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063e6:	e00a      	b.n	80063fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80063e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063f0:	e005      	b.n	80063fe <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80063fa:	e000      	b.n	80063fe <HAL_CAN_IRQHandler+0x336>
            break;
 80063fc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800640c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2204      	movs	r2, #4
 8006414:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006418:	2b00      	cmp	r3, #0
 800641a:	d008      	beq.n	800642e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006422:	431a      	orrs	r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f872 	bl	8006512 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800642e:	bf00      	nop
 8006430:	3728      	adds	r7, #40	; 0x28
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}

08006436 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006436:	b480      	push	{r7}
 8006438:	b083      	sub	sp, #12
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800643e:	bf00      	nop
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800644a:	b480      	push	{r7}
 800644c:	b083      	sub	sp, #12
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr

0800645e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800645e:	b480      	push	{r7}
 8006460:	b083      	sub	sp, #12
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006466:	bf00      	nop
 8006468:	370c      	adds	r7, #12
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006472:	b480      	push	{r7}
 8006474:	b083      	sub	sp, #12
 8006476:	af00      	add	r7, sp, #0
 8006478:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800647a:	bf00      	nop
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006486:	b480      	push	{r7}
 8006488:	b083      	sub	sp, #12
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800648e:	bf00      	nop
 8006490:	370c      	adds	r7, #12
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800649a:	b480      	push	{r7}
 800649c:	b083      	sub	sp, #12
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80064a2:	bf00      	nop
 80064a4:	370c      	adds	r7, #12
 80064a6:	46bd      	mov	sp, r7
 80064a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ac:	4770      	bx	lr

080064ae <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80064b6:	bf00      	nop
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80064fe:	b480      	push	{r7}
 8006500:	b083      	sub	sp, #12
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006506:	bf00      	nop
 8006508:	370c      	adds	r7, #12
 800650a:	46bd      	mov	sp, r7
 800650c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006510:	4770      	bx	lr

08006512 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006512:	b480      	push	{r7}
 8006514:	b083      	sub	sp, #12
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <__NVIC_SetPriorityGrouping>:
{
 8006528:	b480      	push	{r7}
 800652a:	b085      	sub	sp, #20
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f003 0307 	and.w	r3, r3, #7
 8006536:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <__NVIC_SetPriorityGrouping+0x40>)
 800653a:	68db      	ldr	r3, [r3, #12]
 800653c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006544:	4013      	ands	r3, r2
 8006546:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800654c:	68bb      	ldr	r3, [r7, #8]
 800654e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006550:	4b06      	ldr	r3, [pc, #24]	; (800656c <__NVIC_SetPriorityGrouping+0x44>)
 8006552:	4313      	orrs	r3, r2
 8006554:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006556:	4a04      	ldr	r2, [pc, #16]	; (8006568 <__NVIC_SetPriorityGrouping+0x40>)
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	60d3      	str	r3, [r2, #12]
}
 800655c:	bf00      	nop
 800655e:	3714      	adds	r7, #20
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	e000ed00 	.word	0xe000ed00
 800656c:	05fa0000 	.word	0x05fa0000

08006570 <__NVIC_GetPriorityGrouping>:
{
 8006570:	b480      	push	{r7}
 8006572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006574:	4b04      	ldr	r3, [pc, #16]	; (8006588 <__NVIC_GetPriorityGrouping+0x18>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	f003 0307 	and.w	r3, r3, #7
}
 800657e:	4618      	mov	r0, r3
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr
 8006588:	e000ed00 	.word	0xe000ed00

0800658c <__NVIC_EnableIRQ>:
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	4603      	mov	r3, r0
 8006594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800659a:	2b00      	cmp	r3, #0
 800659c:	db0b      	blt.n	80065b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800659e:	79fb      	ldrb	r3, [r7, #7]
 80065a0:	f003 021f 	and.w	r2, r3, #31
 80065a4:	4907      	ldr	r1, [pc, #28]	; (80065c4 <__NVIC_EnableIRQ+0x38>)
 80065a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065aa:	095b      	lsrs	r3, r3, #5
 80065ac:	2001      	movs	r0, #1
 80065ae:	fa00 f202 	lsl.w	r2, r0, r2
 80065b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	e000e100 	.word	0xe000e100

080065c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	db0a      	blt.n	80065f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	b2da      	uxtb	r2, r3
 80065e0:	490c      	ldr	r1, [pc, #48]	; (8006614 <__NVIC_SetPriority+0x4c>)
 80065e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e6:	0112      	lsls	r2, r2, #4
 80065e8:	b2d2      	uxtb	r2, r2
 80065ea:	440b      	add	r3, r1
 80065ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80065f0:	e00a      	b.n	8006608 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	4908      	ldr	r1, [pc, #32]	; (8006618 <__NVIC_SetPriority+0x50>)
 80065f8:	79fb      	ldrb	r3, [r7, #7]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	3b04      	subs	r3, #4
 8006600:	0112      	lsls	r2, r2, #4
 8006602:	b2d2      	uxtb	r2, r2
 8006604:	440b      	add	r3, r1
 8006606:	761a      	strb	r2, [r3, #24]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr
 8006614:	e000e100 	.word	0xe000e100
 8006618:	e000ed00 	.word	0xe000ed00

0800661c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800661c:	b480      	push	{r7}
 800661e:	b089      	sub	sp, #36	; 0x24
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f003 0307 	and.w	r3, r3, #7
 800662e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006630:	69fb      	ldr	r3, [r7, #28]
 8006632:	f1c3 0307 	rsb	r3, r3, #7
 8006636:	2b04      	cmp	r3, #4
 8006638:	bf28      	it	cs
 800663a:	2304      	movcs	r3, #4
 800663c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	3304      	adds	r3, #4
 8006642:	2b06      	cmp	r3, #6
 8006644:	d902      	bls.n	800664c <NVIC_EncodePriority+0x30>
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3b03      	subs	r3, #3
 800664a:	e000      	b.n	800664e <NVIC_EncodePriority+0x32>
 800664c:	2300      	movs	r3, #0
 800664e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006650:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006654:	69bb      	ldr	r3, [r7, #24]
 8006656:	fa02 f303 	lsl.w	r3, r2, r3
 800665a:	43da      	mvns	r2, r3
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	401a      	ands	r2, r3
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006664:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	fa01 f303 	lsl.w	r3, r1, r3
 800666e:	43d9      	mvns	r1, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006674:	4313      	orrs	r3, r2
         );
}
 8006676:	4618      	mov	r0, r3
 8006678:	3724      	adds	r7, #36	; 0x24
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
	...

08006684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	3b01      	subs	r3, #1
 8006690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006694:	d301      	bcc.n	800669a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006696:	2301      	movs	r3, #1
 8006698:	e00f      	b.n	80066ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800669a:	4a0a      	ldr	r2, [pc, #40]	; (80066c4 <SysTick_Config+0x40>)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	3b01      	subs	r3, #1
 80066a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066a2:	210f      	movs	r1, #15
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80066a8:	f7ff ff8e 	bl	80065c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066ac:	4b05      	ldr	r3, [pc, #20]	; (80066c4 <SysTick_Config+0x40>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066b2:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <SysTick_Config+0x40>)
 80066b4:	2207      	movs	r2, #7
 80066b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3708      	adds	r7, #8
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	e000e010 	.word	0xe000e010

080066c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f7ff ff29 	bl	8006528 <__NVIC_SetPriorityGrouping>
}
 80066d6:	bf00      	nop
 80066d8:	3708      	adds	r7, #8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80066de:	b580      	push	{r7, lr}
 80066e0:	b086      	sub	sp, #24
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	4603      	mov	r3, r0
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	607a      	str	r2, [r7, #4]
 80066ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80066f0:	f7ff ff3e 	bl	8006570 <__NVIC_GetPriorityGrouping>
 80066f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	68b9      	ldr	r1, [r7, #8]
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f7ff ff8e 	bl	800661c <NVIC_EncodePriority>
 8006700:	4602      	mov	r2, r0
 8006702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006706:	4611      	mov	r1, r2
 8006708:	4618      	mov	r0, r3
 800670a:	f7ff ff5d 	bl	80065c8 <__NVIC_SetPriority>
}
 800670e:	bf00      	nop
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b082      	sub	sp, #8
 800671a:	af00      	add	r7, sp, #0
 800671c:	4603      	mov	r3, r0
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006724:	4618      	mov	r0, r3
 8006726:	f7ff ff31 	bl	800658c <__NVIC_EnableIRQ>
}
 800672a:	bf00      	nop
 800672c:	3708      	adds	r7, #8
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b082      	sub	sp, #8
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff ffa2 	bl	8006684 <SysTick_Config>
 8006740:	4603      	mov	r3, r0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}
	...

0800674c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006758:	f7fe fc64 	bl	8005024 <HAL_GetTick>
 800675c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d101      	bne.n	8006768 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006764:	2301      	movs	r3, #1
 8006766:	e099      	b.n	800689c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0201 	bic.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006788:	e00f      	b.n	80067aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800678a:	f7fe fc4b 	bl	8005024 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b05      	cmp	r3, #5
 8006796:	d908      	bls.n	80067aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2220      	movs	r2, #32
 800679c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2203      	movs	r2, #3
 80067a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80067a6:	2303      	movs	r3, #3
 80067a8:	e078      	b.n	800689c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d1e8      	bne.n	800678a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80067c0:	697a      	ldr	r2, [r7, #20]
 80067c2:	4b38      	ldr	r3, [pc, #224]	; (80068a4 <HAL_DMA_Init+0x158>)
 80067c4:	4013      	ands	r3, r2
 80067c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80067e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80067ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a1b      	ldr	r3, [r3, #32]
 80067f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80067f6:	697a      	ldr	r2, [r7, #20]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006800:	2b04      	cmp	r3, #4
 8006802:	d107      	bne.n	8006814 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680c:	4313      	orrs	r3, r2
 800680e:	697a      	ldr	r2, [r7, #20]
 8006810:	4313      	orrs	r3, r2
 8006812:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	697a      	ldr	r2, [r7, #20]
 800681a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	f023 0307 	bic.w	r3, r3, #7
 800682a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	4313      	orrs	r3, r2
 8006834:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800683a:	2b04      	cmp	r3, #4
 800683c:	d117      	bne.n	800686e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	697a      	ldr	r2, [r7, #20]
 8006844:	4313      	orrs	r3, r2
 8006846:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	2b00      	cmp	r3, #0
 800684e:	d00e      	beq.n	800686e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 faa5 	bl	8006da0 <DMA_CheckFifoParam>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d008      	beq.n	800686e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2240      	movs	r2, #64	; 0x40
 8006860:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800686a:	2301      	movs	r3, #1
 800686c:	e016      	b.n	800689c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	697a      	ldr	r2, [r7, #20]
 8006874:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fa5c 	bl	8006d34 <DMA_CalcBaseAndBitshift>
 800687c:	4603      	mov	r3, r0
 800687e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006884:	223f      	movs	r2, #63	; 0x3f
 8006886:	409a      	lsls	r2, r3
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2201      	movs	r2, #1
 8006896:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	f010803f 	.word	0xf010803f

080068a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
 80068b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068b6:	2300      	movs	r3, #0
 80068b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d101      	bne.n	80068ce <HAL_DMA_Start_IT+0x26>
 80068ca:	2302      	movs	r3, #2
 80068cc:	e048      	b.n	8006960 <HAL_DMA_Start_IT+0xb8>
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	2201      	movs	r2, #1
 80068d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d137      	bne.n	8006952 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2202      	movs	r2, #2
 80068e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	687a      	ldr	r2, [r7, #4]
 80068f4:	68b9      	ldr	r1, [r7, #8]
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 f9ee 	bl	8006cd8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006900:	223f      	movs	r2, #63	; 0x3f
 8006902:	409a      	lsls	r2, r3
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0216 	orr.w	r2, r2, #22
 8006916:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	695a      	ldr	r2, [r3, #20]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006926:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f042 0208 	orr.w	r2, r2, #8
 800693e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f042 0201 	orr.w	r2, r2, #1
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	e005      	b.n	800695e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800695a:	2302      	movs	r3, #2
 800695c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800695e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3718      	adds	r7, #24
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b02      	cmp	r3, #2
 800697a:	d004      	beq.n	8006986 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2280      	movs	r2, #128	; 0x80
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	e00c      	b.n	80069a0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2205      	movs	r2, #5
 800698a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	681a      	ldr	r2, [r3, #0]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f022 0201 	bic.w	r2, r2, #1
 800699c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	370c      	adds	r7, #12
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80069b4:	2300      	movs	r3, #0
 80069b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80069b8:	4b8e      	ldr	r3, [pc, #568]	; (8006bf4 <HAL_DMA_IRQHandler+0x248>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a8e      	ldr	r2, [pc, #568]	; (8006bf8 <HAL_DMA_IRQHandler+0x24c>)
 80069be:	fba2 2303 	umull	r2, r3, r2, r3
 80069c2:	0a9b      	lsrs	r3, r3, #10
 80069c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	2208      	movs	r2, #8
 80069d8:	409a      	lsls	r2, r3
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	4013      	ands	r3, r2
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01a      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d013      	beq.n	8006a18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f022 0204 	bic.w	r2, r2, #4
 80069fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a04:	2208      	movs	r2, #8
 8006a06:	409a      	lsls	r2, r3
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a10:	f043 0201 	orr.w	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	409a      	lsls	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4013      	ands	r3, r2
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d012      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695b      	ldr	r3, [r3, #20]
 8006a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00b      	beq.n	8006a4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a3a:	2201      	movs	r2, #1
 8006a3c:	409a      	lsls	r2, r3
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a46:	f043 0202 	orr.w	r2, r3, #2
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a52:	2204      	movs	r2, #4
 8006a54:	409a      	lsls	r2, r3
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	4013      	ands	r3, r2
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d012      	beq.n	8006a84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a70:	2204      	movs	r2, #4
 8006a72:	409a      	lsls	r2, r3
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a7c:	f043 0204 	orr.w	r2, r3, #4
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a88:	2210      	movs	r2, #16
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d043      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f003 0308 	and.w	r3, r3, #8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d03c      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aa6:	2210      	movs	r2, #16
 8006aa8:	409a      	lsls	r2, r3
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d018      	beq.n	8006aee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d108      	bne.n	8006adc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d024      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	4798      	blx	r3
 8006ada:	e01f      	b.n	8006b1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d01b      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	4798      	blx	r3
 8006aec:	e016      	b.n	8006b1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d107      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0208 	bic.w	r2, r2, #8
 8006b0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b20:	2220      	movs	r2, #32
 8006b22:	409a      	lsls	r2, r3
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	4013      	ands	r3, r2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	f000 808f 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0310 	and.w	r3, r3, #16
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	f000 8087 	beq.w	8006c4c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b42:	2220      	movs	r2, #32
 8006b44:	409a      	lsls	r2, r3
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	2b05      	cmp	r3, #5
 8006b54:	d136      	bne.n	8006bc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681a      	ldr	r2, [r3, #0]
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f022 0216 	bic.w	r2, r2, #22
 8006b64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	695a      	ldr	r2, [r3, #20]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d103      	bne.n	8006b86 <HAL_DMA_IRQHandler+0x1da>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d007      	beq.n	8006b96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f022 0208 	bic.w	r2, r2, #8
 8006b94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b9a:	223f      	movs	r2, #63	; 0x3f
 8006b9c:	409a      	lsls	r2, r3
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d07e      	beq.n	8006cb8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
        }
        return;
 8006bc2:	e079      	b.n	8006cb8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d01d      	beq.n	8006c0e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10d      	bne.n	8006bfc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d031      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bec:	6878      	ldr	r0, [r7, #4]
 8006bee:	4798      	blx	r3
 8006bf0:	e02c      	b.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
 8006bf2:	bf00      	nop
 8006bf4:	200000ac 	.word	0x200000ac
 8006bf8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d023      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	4798      	blx	r3
 8006c0c:	e01e      	b.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d10f      	bne.n	8006c3c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0210 	bic.w	r2, r2, #16
 8006c2a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d003      	beq.n	8006c4c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d032      	beq.n	8006cba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d022      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	2205      	movs	r2, #5
 8006c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f022 0201 	bic.w	r2, r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d307      	bcc.n	8006c94 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0301 	and.w	r3, r3, #1
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1f2      	bne.n	8006c78 <HAL_DMA_IRQHandler+0x2cc>
 8006c92:	e000      	b.n	8006c96 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c94:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d005      	beq.n	8006cba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	4798      	blx	r3
 8006cb6:	e000      	b.n	8006cba <HAL_DMA_IRQHandler+0x30e>
        return;
 8006cb8:	bf00      	nop
    }
  }
}
 8006cba:	3718      	adds	r7, #24
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b083      	sub	sp, #12
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	370c      	adds	r7, #12
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr

08006cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b085      	sub	sp, #20
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	60f8      	str	r0, [r7, #12]
 8006ce0:	60b9      	str	r1, [r7, #8]
 8006ce2:	607a      	str	r2, [r7, #4]
 8006ce4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	681a      	ldr	r2, [r3, #0]
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cf4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b40      	cmp	r3, #64	; 0x40
 8006d04:	d108      	bne.n	8006d18 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	68ba      	ldr	r2, [r7, #8]
 8006d14:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006d16:	e007      	b.n	8006d28 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	687a      	ldr	r2, [r7, #4]
 8006d26:	60da      	str	r2, [r3, #12]
}
 8006d28:	bf00      	nop
 8006d2a:	3714      	adds	r7, #20
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b085      	sub	sp, #20
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	3b10      	subs	r3, #16
 8006d44:	4a13      	ldr	r2, [pc, #76]	; (8006d94 <DMA_CalcBaseAndBitshift+0x60>)
 8006d46:	fba2 2303 	umull	r2, r3, r2, r3
 8006d4a:	091b      	lsrs	r3, r3, #4
 8006d4c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006d4e:	4a12      	ldr	r2, [pc, #72]	; (8006d98 <DMA_CalcBaseAndBitshift+0x64>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	461a      	mov	r2, r3
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2b03      	cmp	r3, #3
 8006d60:	d908      	bls.n	8006d74 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	461a      	mov	r2, r3
 8006d68:	4b0c      	ldr	r3, [pc, #48]	; (8006d9c <DMA_CalcBaseAndBitshift+0x68>)
 8006d6a:	4013      	ands	r3, r2
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	659a      	str	r2, [r3, #88]	; 0x58
 8006d72:	e006      	b.n	8006d82 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	461a      	mov	r2, r3
 8006d7a:	4b08      	ldr	r3, [pc, #32]	; (8006d9c <DMA_CalcBaseAndBitshift+0x68>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	687a      	ldr	r2, [r7, #4]
 8006d80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3714      	adds	r7, #20
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	aaaaaaab 	.word	0xaaaaaaab
 8006d98:	0801e94c 	.word	0x0801e94c
 8006d9c:	fffffc00 	.word	0xfffffc00

08006da0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b085      	sub	sp, #20
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006da8:	2300      	movs	r3, #0
 8006daa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	699b      	ldr	r3, [r3, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d11f      	bne.n	8006dfa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b03      	cmp	r3, #3
 8006dbe:	d856      	bhi.n	8006e6e <DMA_CheckFifoParam+0xce>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <DMA_CheckFifoParam+0x28>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006dd9 	.word	0x08006dd9
 8006dcc:	08006deb 	.word	0x08006deb
 8006dd0:	08006dd9 	.word	0x08006dd9
 8006dd4:	08006e6f 	.word	0x08006e6f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ddc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d046      	beq.n	8006e72 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006de8:	e043      	b.n	8006e72 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006df2:	d140      	bne.n	8006e76 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006df8:	e03d      	b.n	8006e76 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e02:	d121      	bne.n	8006e48 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b03      	cmp	r3, #3
 8006e08:	d837      	bhi.n	8006e7a <DMA_CheckFifoParam+0xda>
 8006e0a:	a201      	add	r2, pc, #4	; (adr r2, 8006e10 <DMA_CheckFifoParam+0x70>)
 8006e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e10:	08006e21 	.word	0x08006e21
 8006e14:	08006e27 	.word	0x08006e27
 8006e18:	08006e21 	.word	0x08006e21
 8006e1c:	08006e39 	.word	0x08006e39
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	73fb      	strb	r3, [r7, #15]
      break;
 8006e24:	e030      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d025      	beq.n	8006e7e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006e36:	e022      	b.n	8006e7e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006e40:	d11f      	bne.n	8006e82 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006e42:	2301      	movs	r3, #1
 8006e44:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006e46:	e01c      	b.n	8006e82 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d903      	bls.n	8006e56 <DMA_CheckFifoParam+0xb6>
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	2b03      	cmp	r3, #3
 8006e52:	d003      	beq.n	8006e5c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006e54:	e018      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	73fb      	strb	r3, [r7, #15]
      break;
 8006e5a:	e015      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d00e      	beq.n	8006e86 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6c:	e00b      	b.n	8006e86 <DMA_CheckFifoParam+0xe6>
      break;
 8006e6e:	bf00      	nop
 8006e70:	e00a      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e72:	bf00      	nop
 8006e74:	e008      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e76:	bf00      	nop
 8006e78:	e006      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e7a:	bf00      	nop
 8006e7c:	e004      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e7e:	bf00      	nop
 8006e80:	e002      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;   
 8006e82:	bf00      	nop
 8006e84:	e000      	b.n	8006e88 <DMA_CheckFifoParam+0xe8>
      break;
 8006e86:	bf00      	nop
    }
  } 
  
  return status; 
 8006e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop

08006e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b089      	sub	sp, #36	; 0x24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	61fb      	str	r3, [r7, #28]
 8006eb6:	e175      	b.n	80071a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006eb8:	2201      	movs	r2, #1
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	f040 8164 	bne.w	800719e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	685b      	ldr	r3, [r3, #4]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d005      	beq.n	8006eee <HAL_GPIO_Init+0x56>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	f003 0303 	and.w	r3, r3, #3
 8006eea:	2b02      	cmp	r3, #2
 8006eec:	d130      	bne.n	8006f50 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	005b      	lsls	r3, r3, #1
 8006ef8:	2203      	movs	r2, #3
 8006efa:	fa02 f303 	lsl.w	r3, r2, r3
 8006efe:	43db      	mvns	r3, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4013      	ands	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	68da      	ldr	r2, [r3, #12]
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	69ba      	ldr	r2, [r7, #24]
 8006f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f24:	2201      	movs	r2, #1
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	fa02 f303 	lsl.w	r3, r2, r3
 8006f2c:	43db      	mvns	r3, r3
 8006f2e:	69ba      	ldr	r2, [r7, #24]
 8006f30:	4013      	ands	r3, r2
 8006f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	091b      	lsrs	r3, r3, #4
 8006f3a:	f003 0201 	and.w	r2, r3, #1
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	69ba      	ldr	r2, [r7, #24]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69ba      	ldr	r2, [r7, #24]
 8006f4e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 0303 	and.w	r3, r3, #3
 8006f58:	2b03      	cmp	r3, #3
 8006f5a:	d017      	beq.n	8006f8c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	2203      	movs	r2, #3
 8006f68:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6c:	43db      	mvns	r3, r3
 8006f6e:	69ba      	ldr	r2, [r7, #24]
 8006f70:	4013      	ands	r3, r2
 8006f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689a      	ldr	r2, [r3, #8]
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	005b      	lsls	r3, r3, #1
 8006f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f80:	69ba      	ldr	r2, [r7, #24]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	69ba      	ldr	r2, [r7, #24]
 8006f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f003 0303 	and.w	r3, r3, #3
 8006f94:	2b02      	cmp	r3, #2
 8006f96:	d123      	bne.n	8006fe0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	08da      	lsrs	r2, r3, #3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3208      	adds	r2, #8
 8006fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	f003 0307 	and.w	r3, r3, #7
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	220f      	movs	r2, #15
 8006fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb4:	43db      	mvns	r3, r3
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	4013      	ands	r3, r2
 8006fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	691a      	ldr	r2, [r3, #16]
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	69ba      	ldr	r2, [r7, #24]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	08da      	lsrs	r2, r3, #3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	3208      	adds	r2, #8
 8006fda:	69b9      	ldr	r1, [r7, #24]
 8006fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fe6:	69fb      	ldr	r3, [r7, #28]
 8006fe8:	005b      	lsls	r3, r3, #1
 8006fea:	2203      	movs	r2, #3
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	43db      	mvns	r3, r3
 8006ff2:	69ba      	ldr	r2, [r7, #24]
 8006ff4:	4013      	ands	r3, r2
 8006ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	f003 0203 	and.w	r2, r3, #3
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	fa02 f303 	lsl.w	r3, r2, r3
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	4313      	orrs	r3, r2
 800700c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	69ba      	ldr	r2, [r7, #24]
 8007012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800701c:	2b00      	cmp	r3, #0
 800701e:	f000 80be 	beq.w	800719e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007022:	4b66      	ldr	r3, [pc, #408]	; (80071bc <HAL_GPIO_Init+0x324>)
 8007024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007026:	4a65      	ldr	r2, [pc, #404]	; (80071bc <HAL_GPIO_Init+0x324>)
 8007028:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800702c:	6453      	str	r3, [r2, #68]	; 0x44
 800702e:	4b63      	ldr	r3, [pc, #396]	; (80071bc <HAL_GPIO_Init+0x324>)
 8007030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007032:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007036:	60fb      	str	r3, [r7, #12]
 8007038:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800703a:	4a61      	ldr	r2, [pc, #388]	; (80071c0 <HAL_GPIO_Init+0x328>)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	089b      	lsrs	r3, r3, #2
 8007040:	3302      	adds	r3, #2
 8007042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007046:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f003 0303 	and.w	r3, r3, #3
 800704e:	009b      	lsls	r3, r3, #2
 8007050:	220f      	movs	r2, #15
 8007052:	fa02 f303 	lsl.w	r3, r2, r3
 8007056:	43db      	mvns	r3, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4013      	ands	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a58      	ldr	r2, [pc, #352]	; (80071c4 <HAL_GPIO_Init+0x32c>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d037      	beq.n	80070d6 <HAL_GPIO_Init+0x23e>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a57      	ldr	r2, [pc, #348]	; (80071c8 <HAL_GPIO_Init+0x330>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d031      	beq.n	80070d2 <HAL_GPIO_Init+0x23a>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	4a56      	ldr	r2, [pc, #344]	; (80071cc <HAL_GPIO_Init+0x334>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d02b      	beq.n	80070ce <HAL_GPIO_Init+0x236>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	4a55      	ldr	r2, [pc, #340]	; (80071d0 <HAL_GPIO_Init+0x338>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d025      	beq.n	80070ca <HAL_GPIO_Init+0x232>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a54      	ldr	r2, [pc, #336]	; (80071d4 <HAL_GPIO_Init+0x33c>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d01f      	beq.n	80070c6 <HAL_GPIO_Init+0x22e>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	4a53      	ldr	r2, [pc, #332]	; (80071d8 <HAL_GPIO_Init+0x340>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d019      	beq.n	80070c2 <HAL_GPIO_Init+0x22a>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a52      	ldr	r2, [pc, #328]	; (80071dc <HAL_GPIO_Init+0x344>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d013      	beq.n	80070be <HAL_GPIO_Init+0x226>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a51      	ldr	r2, [pc, #324]	; (80071e0 <HAL_GPIO_Init+0x348>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d00d      	beq.n	80070ba <HAL_GPIO_Init+0x222>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a50      	ldr	r2, [pc, #320]	; (80071e4 <HAL_GPIO_Init+0x34c>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d007      	beq.n	80070b6 <HAL_GPIO_Init+0x21e>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a4f      	ldr	r2, [pc, #316]	; (80071e8 <HAL_GPIO_Init+0x350>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d101      	bne.n	80070b2 <HAL_GPIO_Init+0x21a>
 80070ae:	2309      	movs	r3, #9
 80070b0:	e012      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070b2:	230a      	movs	r3, #10
 80070b4:	e010      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070b6:	2308      	movs	r3, #8
 80070b8:	e00e      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070ba:	2307      	movs	r3, #7
 80070bc:	e00c      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070be:	2306      	movs	r3, #6
 80070c0:	e00a      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070c2:	2305      	movs	r3, #5
 80070c4:	e008      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070c6:	2304      	movs	r3, #4
 80070c8:	e006      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070ca:	2303      	movs	r3, #3
 80070cc:	e004      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070ce:	2302      	movs	r3, #2
 80070d0:	e002      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070d2:	2301      	movs	r3, #1
 80070d4:	e000      	b.n	80070d8 <HAL_GPIO_Init+0x240>
 80070d6:	2300      	movs	r3, #0
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	f002 0203 	and.w	r2, r2, #3
 80070de:	0092      	lsls	r2, r2, #2
 80070e0:	4093      	lsls	r3, r2
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	4313      	orrs	r3, r2
 80070e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80070e8:	4935      	ldr	r1, [pc, #212]	; (80071c0 <HAL_GPIO_Init+0x328>)
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	089b      	lsrs	r3, r3, #2
 80070ee:	3302      	adds	r3, #2
 80070f0:	69ba      	ldr	r2, [r7, #24]
 80070f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070f6:	4b3d      	ldr	r3, [pc, #244]	; (80071ec <HAL_GPIO_Init+0x354>)
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	43db      	mvns	r3, r3
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	4013      	ands	r3, r2
 8007104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800710e:	2b00      	cmp	r3, #0
 8007110:	d003      	beq.n	800711a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800711a:	4a34      	ldr	r2, [pc, #208]	; (80071ec <HAL_GPIO_Init+0x354>)
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007120:	4b32      	ldr	r3, [pc, #200]	; (80071ec <HAL_GPIO_Init+0x354>)
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	43db      	mvns	r3, r3
 800712a:	69ba      	ldr	r2, [r7, #24]
 800712c:	4013      	ands	r3, r2
 800712e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007138:	2b00      	cmp	r3, #0
 800713a:	d003      	beq.n	8007144 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007144:	4a29      	ldr	r2, [pc, #164]	; (80071ec <HAL_GPIO_Init+0x354>)
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800714a:	4b28      	ldr	r3, [pc, #160]	; (80071ec <HAL_GPIO_Init+0x354>)
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	43db      	mvns	r3, r3
 8007154:	69ba      	ldr	r2, [r7, #24]
 8007156:	4013      	ands	r3, r2
 8007158:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d003      	beq.n	800716e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007166:	69ba      	ldr	r2, [r7, #24]
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	4313      	orrs	r3, r2
 800716c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800716e:	4a1f      	ldr	r2, [pc, #124]	; (80071ec <HAL_GPIO_Init+0x354>)
 8007170:	69bb      	ldr	r3, [r7, #24]
 8007172:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007174:	4b1d      	ldr	r3, [pc, #116]	; (80071ec <HAL_GPIO_Init+0x354>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	43db      	mvns	r3, r3
 800717e:	69ba      	ldr	r2, [r7, #24]
 8007180:	4013      	ands	r3, r2
 8007182:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	4313      	orrs	r3, r2
 8007196:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007198:	4a14      	ldr	r2, [pc, #80]	; (80071ec <HAL_GPIO_Init+0x354>)
 800719a:	69bb      	ldr	r3, [r7, #24]
 800719c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	3301      	adds	r3, #1
 80071a2:	61fb      	str	r3, [r7, #28]
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b0f      	cmp	r3, #15
 80071a8:	f67f ae86 	bls.w	8006eb8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80071ac:	bf00      	nop
 80071ae:	bf00      	nop
 80071b0:	3724      	adds	r7, #36	; 0x24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	40023800 	.word	0x40023800
 80071c0:	40013800 	.word	0x40013800
 80071c4:	40020000 	.word	0x40020000
 80071c8:	40020400 	.word	0x40020400
 80071cc:	40020800 	.word	0x40020800
 80071d0:	40020c00 	.word	0x40020c00
 80071d4:	40021000 	.word	0x40021000
 80071d8:	40021400 	.word	0x40021400
 80071dc:	40021800 	.word	0x40021800
 80071e0:	40021c00 	.word	0x40021c00
 80071e4:	40022000 	.word	0x40022000
 80071e8:	40022400 	.word	0x40022400
 80071ec:	40013c00 	.word	0x40013c00

080071f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691a      	ldr	r2, [r3, #16]
 8007200:	887b      	ldrh	r3, [r7, #2]
 8007202:	4013      	ands	r3, r2
 8007204:	2b00      	cmp	r3, #0
 8007206:	d002      	beq.n	800720e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007208:	2301      	movs	r3, #1
 800720a:	73fb      	strb	r3, [r7, #15]
 800720c:	e001      	b.n	8007212 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800720e:	2300      	movs	r3, #0
 8007210:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007212:	7bfb      	ldrb	r3, [r7, #15]
}
 8007214:	4618      	mov	r0, r3
 8007216:	3714      	adds	r7, #20
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	807b      	strh	r3, [r7, #2]
 800722c:	4613      	mov	r3, r2
 800722e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007230:	787b      	ldrb	r3, [r7, #1]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007236:	887a      	ldrh	r2, [r7, #2]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800723c:	e003      	b.n	8007246 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	041a      	lsls	r2, r3, #16
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	619a      	str	r2, [r3, #24]
}
 8007246:	bf00      	nop
 8007248:	370c      	adds	r7, #12
 800724a:	46bd      	mov	sp, r7
 800724c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007250:	4770      	bx	lr
	...

08007254 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800725e:	4b08      	ldr	r3, [pc, #32]	; (8007280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007260:	695a      	ldr	r2, [r3, #20]
 8007262:	88fb      	ldrh	r3, [r7, #6]
 8007264:	4013      	ands	r3, r2
 8007266:	2b00      	cmp	r3, #0
 8007268:	d006      	beq.n	8007278 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800726a:	4a05      	ldr	r2, [pc, #20]	; (8007280 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800726c:	88fb      	ldrh	r3, [r7, #6]
 800726e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007270:	88fb      	ldrh	r3, [r7, #6]
 8007272:	4618      	mov	r0, r3
 8007274:	f7fa fee0 	bl	8002038 <HAL_GPIO_EXTI_Callback>
  }
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	40013c00 	.word	0x40013c00

08007284 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800728a:	2300      	movs	r3, #0
 800728c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800728e:	4b23      	ldr	r3, [pc, #140]	; (800731c <HAL_PWREx_EnableOverDrive+0x98>)
 8007290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007292:	4a22      	ldr	r2, [pc, #136]	; (800731c <HAL_PWREx_EnableOverDrive+0x98>)
 8007294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007298:	6413      	str	r3, [r2, #64]	; 0x40
 800729a:	4b20      	ldr	r3, [pc, #128]	; (800731c <HAL_PWREx_EnableOverDrive+0x98>)
 800729c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072a2:	603b      	str	r3, [r7, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80072a6:	4b1e      	ldr	r3, [pc, #120]	; (8007320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072b2:	f7fd feb7 	bl	8005024 <HAL_GetTick>
 80072b6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072b8:	e009      	b.n	80072ce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072ba:	f7fd feb3 	bl	8005024 <HAL_GetTick>
 80072be:	4602      	mov	r2, r0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	1ad3      	subs	r3, r2, r3
 80072c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072c8:	d901      	bls.n	80072ce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80072ca:	2303      	movs	r3, #3
 80072cc:	e022      	b.n	8007314 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072ce:	4b14      	ldr	r3, [pc, #80]	; (8007320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072da:	d1ee      	bne.n	80072ba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80072dc:	4b10      	ldr	r3, [pc, #64]	; (8007320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a0f      	ldr	r2, [pc, #60]	; (8007320 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072e6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072e8:	f7fd fe9c 	bl	8005024 <HAL_GetTick>
 80072ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072ee:	e009      	b.n	8007304 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072f0:	f7fd fe98 	bl	8005024 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072fe:	d901      	bls.n	8007304 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007300:	2303      	movs	r3, #3
 8007302:	e007      	b.n	8007314 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007304:	4b06      	ldr	r3, [pc, #24]	; (8007320 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800730c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007310:	d1ee      	bne.n	80072f0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3708      	adds	r7, #8
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	40023800 	.word	0x40023800
 8007320:	40007000 	.word	0x40007000

08007324 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b086      	sub	sp, #24
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800732c:	2300      	movs	r3, #0
 800732e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e291      	b.n	800785e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	f000 8087 	beq.w	8007456 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007348:	4b96      	ldr	r3, [pc, #600]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 800734a:	689b      	ldr	r3, [r3, #8]
 800734c:	f003 030c 	and.w	r3, r3, #12
 8007350:	2b04      	cmp	r3, #4
 8007352:	d00c      	beq.n	800736e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007354:	4b93      	ldr	r3, [pc, #588]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f003 030c 	and.w	r3, r3, #12
 800735c:	2b08      	cmp	r3, #8
 800735e:	d112      	bne.n	8007386 <HAL_RCC_OscConfig+0x62>
 8007360:	4b90      	ldr	r3, [pc, #576]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007362:	685b      	ldr	r3, [r3, #4]
 8007364:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800736c:	d10b      	bne.n	8007386 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800736e:	4b8d      	ldr	r3, [pc, #564]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007376:	2b00      	cmp	r3, #0
 8007378:	d06c      	beq.n	8007454 <HAL_RCC_OscConfig+0x130>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d168      	bne.n	8007454 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007382:	2301      	movs	r3, #1
 8007384:	e26b      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800738e:	d106      	bne.n	800739e <HAL_RCC_OscConfig+0x7a>
 8007390:	4b84      	ldr	r3, [pc, #528]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a83      	ldr	r2, [pc, #524]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	e02e      	b.n	80073fc <HAL_RCC_OscConfig+0xd8>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	685b      	ldr	r3, [r3, #4]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d10c      	bne.n	80073c0 <HAL_RCC_OscConfig+0x9c>
 80073a6:	4b7f      	ldr	r3, [pc, #508]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a7e      	ldr	r2, [pc, #504]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b0:	6013      	str	r3, [r2, #0]
 80073b2:	4b7c      	ldr	r3, [pc, #496]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a7b      	ldr	r2, [pc, #492]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073bc:	6013      	str	r3, [r2, #0]
 80073be:	e01d      	b.n	80073fc <HAL_RCC_OscConfig+0xd8>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073c8:	d10c      	bne.n	80073e4 <HAL_RCC_OscConfig+0xc0>
 80073ca:	4b76      	ldr	r3, [pc, #472]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a75      	ldr	r2, [pc, #468]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073d4:	6013      	str	r3, [r2, #0]
 80073d6:	4b73      	ldr	r3, [pc, #460]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a72      	ldr	r2, [pc, #456]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e0:	6013      	str	r3, [r2, #0]
 80073e2:	e00b      	b.n	80073fc <HAL_RCC_OscConfig+0xd8>
 80073e4:	4b6f      	ldr	r3, [pc, #444]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a6e      	ldr	r2, [pc, #440]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ee:	6013      	str	r3, [r2, #0]
 80073f0:	4b6c      	ldr	r3, [pc, #432]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a6b      	ldr	r2, [pc, #428]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80073f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d013      	beq.n	800742c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007404:	f7fd fe0e 	bl	8005024 <HAL_GetTick>
 8007408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800740a:	e008      	b.n	800741e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800740c:	f7fd fe0a 	bl	8005024 <HAL_GetTick>
 8007410:	4602      	mov	r2, r0
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	1ad3      	subs	r3, r2, r3
 8007416:	2b64      	cmp	r3, #100	; 0x64
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e21f      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800741e:	4b61      	ldr	r3, [pc, #388]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0f0      	beq.n	800740c <HAL_RCC_OscConfig+0xe8>
 800742a:	e014      	b.n	8007456 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800742c:	f7fd fdfa 	bl	8005024 <HAL_GetTick>
 8007430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007432:	e008      	b.n	8007446 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007434:	f7fd fdf6 	bl	8005024 <HAL_GetTick>
 8007438:	4602      	mov	r2, r0
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	1ad3      	subs	r3, r2, r3
 800743e:	2b64      	cmp	r3, #100	; 0x64
 8007440:	d901      	bls.n	8007446 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007442:	2303      	movs	r3, #3
 8007444:	e20b      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007446:	4b57      	ldr	r3, [pc, #348]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1f0      	bne.n	8007434 <HAL_RCC_OscConfig+0x110>
 8007452:	e000      	b.n	8007456 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007454:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 0302 	and.w	r3, r3, #2
 800745e:	2b00      	cmp	r3, #0
 8007460:	d069      	beq.n	8007536 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007462:	4b50      	ldr	r3, [pc, #320]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f003 030c 	and.w	r3, r3, #12
 800746a:	2b00      	cmp	r3, #0
 800746c:	d00b      	beq.n	8007486 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800746e:	4b4d      	ldr	r3, [pc, #308]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f003 030c 	and.w	r3, r3, #12
 8007476:	2b08      	cmp	r3, #8
 8007478:	d11c      	bne.n	80074b4 <HAL_RCC_OscConfig+0x190>
 800747a:	4b4a      	ldr	r3, [pc, #296]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d116      	bne.n	80074b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007486:	4b47      	ldr	r3, [pc, #284]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d005      	beq.n	800749e <HAL_RCC_OscConfig+0x17a>
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	68db      	ldr	r3, [r3, #12]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d001      	beq.n	800749e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e1df      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800749e:	4b41      	ldr	r3, [pc, #260]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	00db      	lsls	r3, r3, #3
 80074ac:	493d      	ldr	r1, [pc, #244]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074b2:	e040      	b.n	8007536 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d023      	beq.n	8007504 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074bc:	4b39      	ldr	r3, [pc, #228]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	4a38      	ldr	r2, [pc, #224]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074c2:	f043 0301 	orr.w	r3, r3, #1
 80074c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074c8:	f7fd fdac 	bl	8005024 <HAL_GetTick>
 80074cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ce:	e008      	b.n	80074e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d0:	f7fd fda8 	bl	8005024 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d901      	bls.n	80074e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80074de:	2303      	movs	r3, #3
 80074e0:	e1bd      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074e2:	4b30      	ldr	r3, [pc, #192]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0f0      	beq.n	80074d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074ee:	4b2d      	ldr	r3, [pc, #180]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	00db      	lsls	r3, r3, #3
 80074fc:	4929      	ldr	r1, [pc, #164]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 80074fe:	4313      	orrs	r3, r2
 8007500:	600b      	str	r3, [r1, #0]
 8007502:	e018      	b.n	8007536 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007504:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a26      	ldr	r2, [pc, #152]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 800750a:	f023 0301 	bic.w	r3, r3, #1
 800750e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007510:	f7fd fd88 	bl	8005024 <HAL_GetTick>
 8007514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007516:	e008      	b.n	800752a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007518:	f7fd fd84 	bl	8005024 <HAL_GetTick>
 800751c:	4602      	mov	r2, r0
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	1ad3      	subs	r3, r2, r3
 8007522:	2b02      	cmp	r3, #2
 8007524:	d901      	bls.n	800752a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e199      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800752a:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d1f0      	bne.n	8007518 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	f003 0308 	and.w	r3, r3, #8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d038      	beq.n	80075b4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	695b      	ldr	r3, [r3, #20]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d019      	beq.n	800757e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800754a:	4b16      	ldr	r3, [pc, #88]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 800754c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800754e:	4a15      	ldr	r2, [pc, #84]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007550:	f043 0301 	orr.w	r3, r3, #1
 8007554:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007556:	f7fd fd65 	bl	8005024 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800755e:	f7fd fd61 	bl	8005024 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e176      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007570:	4b0c      	ldr	r3, [pc, #48]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x23a>
 800757c:	e01a      	b.n	80075b4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800757e:	4b09      	ldr	r3, [pc, #36]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007580:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007582:	4a08      	ldr	r2, [pc, #32]	; (80075a4 <HAL_RCC_OscConfig+0x280>)
 8007584:	f023 0301 	bic.w	r3, r3, #1
 8007588:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800758a:	f7fd fd4b 	bl	8005024 <HAL_GetTick>
 800758e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007590:	e00a      	b.n	80075a8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007592:	f7fd fd47 	bl	8005024 <HAL_GetTick>
 8007596:	4602      	mov	r2, r0
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	1ad3      	subs	r3, r2, r3
 800759c:	2b02      	cmp	r3, #2
 800759e:	d903      	bls.n	80075a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e15c      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
 80075a4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075a8:	4b91      	ldr	r3, [pc, #580]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80075aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ac:	f003 0302 	and.w	r3, r3, #2
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1ee      	bne.n	8007592 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f003 0304 	and.w	r3, r3, #4
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 80a4 	beq.w	800770a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075c2:	4b8b      	ldr	r3, [pc, #556]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80075c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10d      	bne.n	80075ea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80075ce:	4b88      	ldr	r3, [pc, #544]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80075d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075d2:	4a87      	ldr	r2, [pc, #540]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80075d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075d8:	6413      	str	r3, [r2, #64]	; 0x40
 80075da:	4b85      	ldr	r3, [pc, #532]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075e2:	60bb      	str	r3, [r7, #8]
 80075e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e6:	2301      	movs	r3, #1
 80075e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075ea:	4b82      	ldr	r3, [pc, #520]	; (80077f4 <HAL_RCC_OscConfig+0x4d0>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d118      	bne.n	8007628 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80075f6:	4b7f      	ldr	r3, [pc, #508]	; (80077f4 <HAL_RCC_OscConfig+0x4d0>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a7e      	ldr	r2, [pc, #504]	; (80077f4 <HAL_RCC_OscConfig+0x4d0>)
 80075fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007600:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007602:	f7fd fd0f 	bl	8005024 <HAL_GetTick>
 8007606:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007608:	e008      	b.n	800761c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800760a:	f7fd fd0b 	bl	8005024 <HAL_GetTick>
 800760e:	4602      	mov	r2, r0
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	1ad3      	subs	r3, r2, r3
 8007614:	2b64      	cmp	r3, #100	; 0x64
 8007616:	d901      	bls.n	800761c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007618:	2303      	movs	r3, #3
 800761a:	e120      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800761c:	4b75      	ldr	r3, [pc, #468]	; (80077f4 <HAL_RCC_OscConfig+0x4d0>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007624:	2b00      	cmp	r3, #0
 8007626:	d0f0      	beq.n	800760a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d106      	bne.n	800763e <HAL_RCC_OscConfig+0x31a>
 8007630:	4b6f      	ldr	r3, [pc, #444]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	4a6e      	ldr	r2, [pc, #440]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007636:	f043 0301 	orr.w	r3, r3, #1
 800763a:	6713      	str	r3, [r2, #112]	; 0x70
 800763c:	e02d      	b.n	800769a <HAL_RCC_OscConfig+0x376>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	689b      	ldr	r3, [r3, #8]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d10c      	bne.n	8007660 <HAL_RCC_OscConfig+0x33c>
 8007646:	4b6a      	ldr	r3, [pc, #424]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800764a:	4a69      	ldr	r2, [pc, #420]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800764c:	f023 0301 	bic.w	r3, r3, #1
 8007650:	6713      	str	r3, [r2, #112]	; 0x70
 8007652:	4b67      	ldr	r3, [pc, #412]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007656:	4a66      	ldr	r2, [pc, #408]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007658:	f023 0304 	bic.w	r3, r3, #4
 800765c:	6713      	str	r3, [r2, #112]	; 0x70
 800765e:	e01c      	b.n	800769a <HAL_RCC_OscConfig+0x376>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	2b05      	cmp	r3, #5
 8007666:	d10c      	bne.n	8007682 <HAL_RCC_OscConfig+0x35e>
 8007668:	4b61      	ldr	r3, [pc, #388]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800766a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800766c:	4a60      	ldr	r2, [pc, #384]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800766e:	f043 0304 	orr.w	r3, r3, #4
 8007672:	6713      	str	r3, [r2, #112]	; 0x70
 8007674:	4b5e      	ldr	r3, [pc, #376]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007678:	4a5d      	ldr	r2, [pc, #372]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800767a:	f043 0301 	orr.w	r3, r3, #1
 800767e:	6713      	str	r3, [r2, #112]	; 0x70
 8007680:	e00b      	b.n	800769a <HAL_RCC_OscConfig+0x376>
 8007682:	4b5b      	ldr	r3, [pc, #364]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007686:	4a5a      	ldr	r2, [pc, #360]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007688:	f023 0301 	bic.w	r3, r3, #1
 800768c:	6713      	str	r3, [r2, #112]	; 0x70
 800768e:	4b58      	ldr	r3, [pc, #352]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007692:	4a57      	ldr	r2, [pc, #348]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007694:	f023 0304 	bic.w	r3, r3, #4
 8007698:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d015      	beq.n	80076ce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076a2:	f7fd fcbf 	bl	8005024 <HAL_GetTick>
 80076a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076a8:	e00a      	b.n	80076c0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076aa:	f7fd fcbb 	bl	8005024 <HAL_GetTick>
 80076ae:	4602      	mov	r2, r0
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	1ad3      	subs	r3, r2, r3
 80076b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d901      	bls.n	80076c0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80076bc:	2303      	movs	r3, #3
 80076be:	e0ce      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c0:	4b4b      	ldr	r3, [pc, #300]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80076c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c4:	f003 0302 	and.w	r3, r3, #2
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d0ee      	beq.n	80076aa <HAL_RCC_OscConfig+0x386>
 80076cc:	e014      	b.n	80076f8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076ce:	f7fd fca9 	bl	8005024 <HAL_GetTick>
 80076d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076d4:	e00a      	b.n	80076ec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076d6:	f7fd fca5 	bl	8005024 <HAL_GetTick>
 80076da:	4602      	mov	r2, r0
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	1ad3      	subs	r3, r2, r3
 80076e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d901      	bls.n	80076ec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80076e8:	2303      	movs	r3, #3
 80076ea:	e0b8      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076ec:	4b40      	ldr	r3, [pc, #256]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80076ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1ee      	bne.n	80076d6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80076f8:	7dfb      	ldrb	r3, [r7, #23]
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d105      	bne.n	800770a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076fe:	4b3c      	ldr	r3, [pc, #240]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007702:	4a3b      	ldr	r2, [pc, #236]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007704:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007708:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	699b      	ldr	r3, [r3, #24]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80a4 	beq.w	800785c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007714:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007716:	689b      	ldr	r3, [r3, #8]
 8007718:	f003 030c 	and.w	r3, r3, #12
 800771c:	2b08      	cmp	r3, #8
 800771e:	d06b      	beq.n	80077f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699b      	ldr	r3, [r3, #24]
 8007724:	2b02      	cmp	r3, #2
 8007726:	d149      	bne.n	80077bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007728:	4b31      	ldr	r3, [pc, #196]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	4a30      	ldr	r2, [pc, #192]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800772e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007732:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007734:	f7fd fc76 	bl	8005024 <HAL_GetTick>
 8007738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773a:	e008      	b.n	800774e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800773c:	f7fd fc72 	bl	8005024 <HAL_GetTick>
 8007740:	4602      	mov	r2, r0
 8007742:	693b      	ldr	r3, [r7, #16]
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	2b02      	cmp	r3, #2
 8007748:	d901      	bls.n	800774e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800774a:	2303      	movs	r3, #3
 800774c:	e087      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800774e:	4b28      	ldr	r3, [pc, #160]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1f0      	bne.n	800773c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	69da      	ldr	r2, [r3, #28]
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6a1b      	ldr	r3, [r3, #32]
 8007762:	431a      	orrs	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007768:	019b      	lsls	r3, r3, #6
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	085b      	lsrs	r3, r3, #1
 8007772:	3b01      	subs	r3, #1
 8007774:	041b      	lsls	r3, r3, #16
 8007776:	431a      	orrs	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	061b      	lsls	r3, r3, #24
 800777e:	4313      	orrs	r3, r2
 8007780:	4a1b      	ldr	r2, [pc, #108]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 8007782:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007786:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007788:	4b19      	ldr	r3, [pc, #100]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a18      	ldr	r2, [pc, #96]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 800778e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007792:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007794:	f7fd fc46 	bl	8005024 <HAL_GetTick>
 8007798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800779a:	e008      	b.n	80077ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800779c:	f7fd fc42 	bl	8005024 <HAL_GetTick>
 80077a0:	4602      	mov	r2, r0
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	1ad3      	subs	r3, r2, r3
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d901      	bls.n	80077ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e057      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077ae:	4b10      	ldr	r3, [pc, #64]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d0f0      	beq.n	800779c <HAL_RCC_OscConfig+0x478>
 80077ba:	e04f      	b.n	800785c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077bc:	4b0c      	ldr	r3, [pc, #48]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a0b      	ldr	r2, [pc, #44]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80077c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077c8:	f7fd fc2c 	bl	8005024 <HAL_GetTick>
 80077cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ce:	e008      	b.n	80077e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d0:	f7fd fc28 	bl	8005024 <HAL_GetTick>
 80077d4:	4602      	mov	r2, r0
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	1ad3      	subs	r3, r2, r3
 80077da:	2b02      	cmp	r3, #2
 80077dc:	d901      	bls.n	80077e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e03d      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077e2:	4b03      	ldr	r3, [pc, #12]	; (80077f0 <HAL_RCC_OscConfig+0x4cc>)
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d1f0      	bne.n	80077d0 <HAL_RCC_OscConfig+0x4ac>
 80077ee:	e035      	b.n	800785c <HAL_RCC_OscConfig+0x538>
 80077f0:	40023800 	.word	0x40023800
 80077f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80077f8:	4b1b      	ldr	r3, [pc, #108]	; (8007868 <HAL_RCC_OscConfig+0x544>)
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	699b      	ldr	r3, [r3, #24]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d028      	beq.n	8007858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007810:	429a      	cmp	r2, r3
 8007812:	d121      	bne.n	8007858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800781e:	429a      	cmp	r2, r3
 8007820:	d11a      	bne.n	8007858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007822:	68fa      	ldr	r2, [r7, #12]
 8007824:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007828:	4013      	ands	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800782e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007830:	4293      	cmp	r3, r2
 8007832:	d111      	bne.n	8007858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	085b      	lsrs	r3, r3, #1
 8007840:	3b01      	subs	r3, #1
 8007842:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007844:	429a      	cmp	r2, r3
 8007846:	d107      	bne.n	8007858 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007852:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007854:	429a      	cmp	r2, r3
 8007856:	d001      	beq.n	800785c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	e000      	b.n	800785e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3718      	adds	r7, #24
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
 8007866:	bf00      	nop
 8007868:	40023800 	.word	0x40023800

0800786c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b084      	sub	sp, #16
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d101      	bne.n	8007884 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e0d0      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007884:	4b6a      	ldr	r3, [pc, #424]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f003 030f 	and.w	r3, r3, #15
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	429a      	cmp	r2, r3
 8007890:	d910      	bls.n	80078b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007892:	4b67      	ldr	r3, [pc, #412]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f023 020f 	bic.w	r2, r3, #15
 800789a:	4965      	ldr	r1, [pc, #404]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	4313      	orrs	r3, r2
 80078a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078a2:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f003 030f 	and.w	r3, r3, #15
 80078aa:	683a      	ldr	r2, [r7, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d001      	beq.n	80078b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e0b8      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f003 0302 	and.w	r3, r3, #2
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d020      	beq.n	8007902 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d005      	beq.n	80078d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078cc:	4b59      	ldr	r3, [pc, #356]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4a58      	ldr	r2, [pc, #352]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80078d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d005      	beq.n	80078f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078e4:	4b53      	ldr	r3, [pc, #332]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	4a52      	ldr	r2, [pc, #328]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80078ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078f0:	4b50      	ldr	r3, [pc, #320]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80078f2:	689b      	ldr	r3, [r3, #8]
 80078f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	494d      	ldr	r1, [pc, #308]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80078fe:	4313      	orrs	r3, r2
 8007900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0301 	and.w	r3, r3, #1
 800790a:	2b00      	cmp	r3, #0
 800790c:	d040      	beq.n	8007990 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2b01      	cmp	r3, #1
 8007914:	d107      	bne.n	8007926 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007916:	4b47      	ldr	r3, [pc, #284]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d115      	bne.n	800794e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	e07f      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b02      	cmp	r3, #2
 800792c:	d107      	bne.n	800793e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800792e:	4b41      	ldr	r3, [pc, #260]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d109      	bne.n	800794e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800793a:	2301      	movs	r3, #1
 800793c:	e073      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800793e:	4b3d      	ldr	r3, [pc, #244]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0302 	and.w	r3, r3, #2
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e06b      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800794e:	4b39      	ldr	r3, [pc, #228]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f023 0203 	bic.w	r2, r3, #3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	4936      	ldr	r1, [pc, #216]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 800795c:	4313      	orrs	r3, r2
 800795e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007960:	f7fd fb60 	bl	8005024 <HAL_GetTick>
 8007964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007966:	e00a      	b.n	800797e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007968:	f7fd fb5c 	bl	8005024 <HAL_GetTick>
 800796c:	4602      	mov	r2, r0
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1ad3      	subs	r3, r2, r3
 8007972:	f241 3288 	movw	r2, #5000	; 0x1388
 8007976:	4293      	cmp	r3, r2
 8007978:	d901      	bls.n	800797e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800797a:	2303      	movs	r3, #3
 800797c:	e053      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800797e:	4b2d      	ldr	r3, [pc, #180]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f003 020c 	and.w	r2, r3, #12
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	009b      	lsls	r3, r3, #2
 800798c:	429a      	cmp	r2, r3
 800798e:	d1eb      	bne.n	8007968 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007990:	4b27      	ldr	r3, [pc, #156]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f003 030f 	and.w	r3, r3, #15
 8007998:	683a      	ldr	r2, [r7, #0]
 800799a:	429a      	cmp	r2, r3
 800799c:	d210      	bcs.n	80079c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800799e:	4b24      	ldr	r3, [pc, #144]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f023 020f 	bic.w	r2, r3, #15
 80079a6:	4922      	ldr	r1, [pc, #136]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079ae:	4b20      	ldr	r3, [pc, #128]	; (8007a30 <HAL_RCC_ClockConfig+0x1c4>)
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	683a      	ldr	r2, [r7, #0]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d001      	beq.n	80079c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80079bc:	2301      	movs	r3, #1
 80079be:	e032      	b.n	8007a26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f003 0304 	and.w	r3, r3, #4
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079cc:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	68db      	ldr	r3, [r3, #12]
 80079d8:	4916      	ldr	r1, [pc, #88]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80079da:	4313      	orrs	r3, r2
 80079dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0308 	and.w	r3, r3, #8
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079ea:	4b12      	ldr	r3, [pc, #72]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	00db      	lsls	r3, r3, #3
 80079f8:	490e      	ldr	r1, [pc, #56]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 80079fa:	4313      	orrs	r3, r2
 80079fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80079fe:	f000 f821 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 8007a02:	4602      	mov	r2, r0
 8007a04:	4b0b      	ldr	r3, [pc, #44]	; (8007a34 <HAL_RCC_ClockConfig+0x1c8>)
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	091b      	lsrs	r3, r3, #4
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	490a      	ldr	r1, [pc, #40]	; (8007a38 <HAL_RCC_ClockConfig+0x1cc>)
 8007a10:	5ccb      	ldrb	r3, [r1, r3]
 8007a12:	fa22 f303 	lsr.w	r3, r2, r3
 8007a16:	4a09      	ldr	r2, [pc, #36]	; (8007a3c <HAL_RCC_ClockConfig+0x1d0>)
 8007a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007a1a:	4b09      	ldr	r3, [pc, #36]	; (8007a40 <HAL_RCC_ClockConfig+0x1d4>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4618      	mov	r0, r3
 8007a20:	f7fd fabc 	bl	8004f9c <HAL_InitTick>

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3710      	adds	r7, #16
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	bf00      	nop
 8007a30:	40023c00 	.word	0x40023c00
 8007a34:	40023800 	.word	0x40023800
 8007a38:	0800f50c 	.word	0x0800f50c
 8007a3c:	200000ac 	.word	0x200000ac
 8007a40:	200000b0 	.word	0x200000b0

08007a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a48:	b094      	sub	sp, #80	; 0x50
 8007a4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a50:	2300      	movs	r3, #0
 8007a52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a54:	2300      	movs	r3, #0
 8007a56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a5c:	4b79      	ldr	r3, [pc, #484]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f003 030c 	and.w	r3, r3, #12
 8007a64:	2b08      	cmp	r3, #8
 8007a66:	d00d      	beq.n	8007a84 <HAL_RCC_GetSysClockFreq+0x40>
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	f200 80e1 	bhi.w	8007c30 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d002      	beq.n	8007a78 <HAL_RCC_GetSysClockFreq+0x34>
 8007a72:	2b04      	cmp	r3, #4
 8007a74:	d003      	beq.n	8007a7e <HAL_RCC_GetSysClockFreq+0x3a>
 8007a76:	e0db      	b.n	8007c30 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a78:	4b73      	ldr	r3, [pc, #460]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a7c:	e0db      	b.n	8007c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a7e:	4b72      	ldr	r3, [pc, #456]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a82:	e0d8      	b.n	8007c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a84:	4b6f      	ldr	r3, [pc, #444]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a86:	685b      	ldr	r3, [r3, #4]
 8007a88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007a8e:	4b6d      	ldr	r3, [pc, #436]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d063      	beq.n	8007b62 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a9a:	4b6a      	ldr	r3, [pc, #424]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	099b      	lsrs	r3, r3, #6
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007aac:	633b      	str	r3, [r7, #48]	; 0x30
 8007aae:	2300      	movs	r3, #0
 8007ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	462b      	mov	r3, r5
 8007aba:	f04f 0000 	mov.w	r0, #0
 8007abe:	f04f 0100 	mov.w	r1, #0
 8007ac2:	0159      	lsls	r1, r3, #5
 8007ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ac8:	0150      	lsls	r0, r2, #5
 8007aca:	4602      	mov	r2, r0
 8007acc:	460b      	mov	r3, r1
 8007ace:	4621      	mov	r1, r4
 8007ad0:	1a51      	subs	r1, r2, r1
 8007ad2:	6139      	str	r1, [r7, #16]
 8007ad4:	4629      	mov	r1, r5
 8007ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ae8:	4659      	mov	r1, fp
 8007aea:	018b      	lsls	r3, r1, #6
 8007aec:	4651      	mov	r1, sl
 8007aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007af2:	4651      	mov	r1, sl
 8007af4:	018a      	lsls	r2, r1, #6
 8007af6:	4651      	mov	r1, sl
 8007af8:	ebb2 0801 	subs.w	r8, r2, r1
 8007afc:	4659      	mov	r1, fp
 8007afe:	eb63 0901 	sbc.w	r9, r3, r1
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b16:	4690      	mov	r8, r2
 8007b18:	4699      	mov	r9, r3
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	eb18 0303 	adds.w	r3, r8, r3
 8007b20:	60bb      	str	r3, [r7, #8]
 8007b22:	462b      	mov	r3, r5
 8007b24:	eb49 0303 	adc.w	r3, r9, r3
 8007b28:	60fb      	str	r3, [r7, #12]
 8007b2a:	f04f 0200 	mov.w	r2, #0
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b36:	4629      	mov	r1, r5
 8007b38:	028b      	lsls	r3, r1, #10
 8007b3a:	4621      	mov	r1, r4
 8007b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b40:	4621      	mov	r1, r4
 8007b42:	028a      	lsls	r2, r1, #10
 8007b44:	4610      	mov	r0, r2
 8007b46:	4619      	mov	r1, r3
 8007b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b54:	f7f8 ffd2 	bl	8000afc <__aeabi_uldivmod>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b60:	e058      	b.n	8007c14 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b62:	4b38      	ldr	r3, [pc, #224]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b72:	623b      	str	r3, [r7, #32]
 8007b74:	2300      	movs	r3, #0
 8007b76:	627b      	str	r3, [r7, #36]	; 0x24
 8007b78:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b7c:	4642      	mov	r2, r8
 8007b7e:	464b      	mov	r3, r9
 8007b80:	f04f 0000 	mov.w	r0, #0
 8007b84:	f04f 0100 	mov.w	r1, #0
 8007b88:	0159      	lsls	r1, r3, #5
 8007b8a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b8e:	0150      	lsls	r0, r2, #5
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	4641      	mov	r1, r8
 8007b96:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ba0:	f04f 0200 	mov.w	r2, #0
 8007ba4:	f04f 0300 	mov.w	r3, #0
 8007ba8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007bac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007bb0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bb4:	ebb2 040a 	subs.w	r4, r2, sl
 8007bb8:	eb63 050b 	sbc.w	r5, r3, fp
 8007bbc:	f04f 0200 	mov.w	r2, #0
 8007bc0:	f04f 0300 	mov.w	r3, #0
 8007bc4:	00eb      	lsls	r3, r5, #3
 8007bc6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bca:	00e2      	lsls	r2, r4, #3
 8007bcc:	4614      	mov	r4, r2
 8007bce:	461d      	mov	r5, r3
 8007bd0:	4643      	mov	r3, r8
 8007bd2:	18e3      	adds	r3, r4, r3
 8007bd4:	603b      	str	r3, [r7, #0]
 8007bd6:	464b      	mov	r3, r9
 8007bd8:	eb45 0303 	adc.w	r3, r5, r3
 8007bdc:	607b      	str	r3, [r7, #4]
 8007bde:	f04f 0200 	mov.w	r2, #0
 8007be2:	f04f 0300 	mov.w	r3, #0
 8007be6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bea:	4629      	mov	r1, r5
 8007bec:	028b      	lsls	r3, r1, #10
 8007bee:	4621      	mov	r1, r4
 8007bf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bf4:	4621      	mov	r1, r4
 8007bf6:	028a      	lsls	r2, r1, #10
 8007bf8:	4610      	mov	r0, r2
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bfe:	2200      	movs	r2, #0
 8007c00:	61bb      	str	r3, [r7, #24]
 8007c02:	61fa      	str	r2, [r7, #28]
 8007c04:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c08:	f7f8 ff78 	bl	8000afc <__aeabi_uldivmod>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4613      	mov	r3, r2
 8007c12:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007c14:	4b0b      	ldr	r3, [pc, #44]	; (8007c44 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c16:	685b      	ldr	r3, [r3, #4]
 8007c18:	0c1b      	lsrs	r3, r3, #16
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	3301      	adds	r3, #1
 8007c20:	005b      	lsls	r3, r3, #1
 8007c22:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007c24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c2e:	e002      	b.n	8007c36 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c30:	4b05      	ldr	r3, [pc, #20]	; (8007c48 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c32:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007c38:	4618      	mov	r0, r3
 8007c3a:	3750      	adds	r7, #80	; 0x50
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c42:	bf00      	nop
 8007c44:	40023800 	.word	0x40023800
 8007c48:	00f42400 	.word	0x00f42400

08007c4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c50:	4b03      	ldr	r3, [pc, #12]	; (8007c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c52:	681b      	ldr	r3, [r3, #0]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	200000ac 	.word	0x200000ac

08007c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c68:	f7ff fff0 	bl	8007c4c <HAL_RCC_GetHCLKFreq>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	4b05      	ldr	r3, [pc, #20]	; (8007c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	0a9b      	lsrs	r3, r3, #10
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	4903      	ldr	r1, [pc, #12]	; (8007c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c7a:	5ccb      	ldrb	r3, [r1, r3]
 8007c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	bd80      	pop	{r7, pc}
 8007c84:	40023800 	.word	0x40023800
 8007c88:	0800f51c 	.word	0x0800f51c

08007c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c90:	f7ff ffdc 	bl	8007c4c <HAL_RCC_GetHCLKFreq>
 8007c94:	4602      	mov	r2, r0
 8007c96:	4b05      	ldr	r3, [pc, #20]	; (8007cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	0b5b      	lsrs	r3, r3, #13
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	4903      	ldr	r1, [pc, #12]	; (8007cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ca2:	5ccb      	ldrb	r3, [r1, r3]
 8007ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	40023800 	.word	0x40023800
 8007cb0:	0800f51c 	.word	0x0800f51c

08007cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b088      	sub	sp, #32
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d012      	beq.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007cdc:	4b69      	ldr	r3, [pc, #420]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	4a68      	ldr	r2, [pc, #416]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ce2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ce6:	6093      	str	r3, [r2, #8]
 8007ce8:	4b66      	ldr	r3, [pc, #408]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cea:	689a      	ldr	r2, [r3, #8]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cf0:	4964      	ldr	r1, [pc, #400]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d017      	beq.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d0e:	4b5d      	ldr	r3, [pc, #372]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1c:	4959      	ldr	r1, [pc, #356]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1e:	4313      	orrs	r3, r2
 8007d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d2c:	d101      	bne.n	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d101      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d017      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d4a:	4b4e      	ldr	r3, [pc, #312]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d58:	494a      	ldr	r1, [pc, #296]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d68:	d101      	bne.n	8007d6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d101      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007d76:	2301      	movs	r3, #1
 8007d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007d86:	2301      	movs	r3, #1
 8007d88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f003 0320 	and.w	r3, r3, #32
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 808b 	beq.w	8007eae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d98:	4b3a      	ldr	r3, [pc, #232]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	4a39      	ldr	r2, [pc, #228]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007da2:	6413      	str	r3, [r2, #64]	; 0x40
 8007da4:	4b37      	ldr	r3, [pc, #220]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007dac:	60bb      	str	r3, [r7, #8]
 8007dae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007db0:	4b35      	ldr	r3, [pc, #212]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a34      	ldr	r2, [pc, #208]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dbc:	f7fd f932 	bl	8005024 <HAL_GetTick>
 8007dc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dc4:	f7fd f92e 	bl	8005024 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b64      	cmp	r3, #100	; 0x64
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e357      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007dd6:	4b2c      	ldr	r3, [pc, #176]	; (8007e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007de2:	4b28      	ldr	r3, [pc, #160]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d035      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dfa:	693a      	ldr	r2, [r7, #16]
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d02e      	beq.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e00:	4b20      	ldr	r3, [pc, #128]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e0a:	4b1e      	ldr	r3, [pc, #120]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e0e:	4a1d      	ldr	r2, [pc, #116]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e16:	4b1b      	ldr	r3, [pc, #108]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	4a1a      	ldr	r2, [pc, #104]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007e22:	4a18      	ldr	r2, [pc, #96]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e28:	4b16      	ldr	r3, [pc, #88]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d114      	bne.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e34:	f7fd f8f6 	bl	8005024 <HAL_GetTick>
 8007e38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e3a:	e00a      	b.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e3c:	f7fd f8f2 	bl	8005024 <HAL_GetTick>
 8007e40:	4602      	mov	r2, r0
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	1ad3      	subs	r3, r2, r3
 8007e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d901      	bls.n	8007e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007e4e:	2303      	movs	r3, #3
 8007e50:	e319      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e52:	4b0c      	ldr	r3, [pc, #48]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d0ee      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e6a:	d111      	bne.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007e6c:	4b05      	ldr	r3, [pc, #20]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e78:	4b04      	ldr	r3, [pc, #16]	; (8007e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007e7a:	400b      	ands	r3, r1
 8007e7c:	4901      	ldr	r1, [pc, #4]	; (8007e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	608b      	str	r3, [r1, #8]
 8007e82:	e00b      	b.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007e84:	40023800 	.word	0x40023800
 8007e88:	40007000 	.word	0x40007000
 8007e8c:	0ffffcff 	.word	0x0ffffcff
 8007e90:	4baa      	ldr	r3, [pc, #680]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	4aa9      	ldr	r2, [pc, #676]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e9a:	6093      	str	r3, [r2, #8]
 8007e9c:	4ba7      	ldr	r3, [pc, #668]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea8:	49a4      	ldr	r1, [pc, #656]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f003 0310 	and.w	r3, r3, #16
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d010      	beq.n	8007edc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eba:	4ba0      	ldr	r3, [pc, #640]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ec0:	4a9e      	ldr	r2, [pc, #632]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ec6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007eca:	4b9c      	ldr	r3, [pc, #624]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ecc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	4999      	ldr	r1, [pc, #612]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d00a      	beq.n	8007efe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ee8:	4b94      	ldr	r3, [pc, #592]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007eee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef6:	4991      	ldr	r1, [pc, #580]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d00a      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f0a:	4b8c      	ldr	r3, [pc, #560]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f18:	4988      	ldr	r1, [pc, #544]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d00a      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f2c:	4b83      	ldr	r3, [pc, #524]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f3a:	4980      	ldr	r1, [pc, #512]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d00a      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f4e:	4b7b      	ldr	r3, [pc, #492]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f5c:	4977      	ldr	r1, [pc, #476]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d00a      	beq.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f70:	4b72      	ldr	r3, [pc, #456]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f76:	f023 0203 	bic.w	r2, r3, #3
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f7e:	496f      	ldr	r1, [pc, #444]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f80:	4313      	orrs	r3, r2
 8007f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d00a      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f92:	4b6a      	ldr	r3, [pc, #424]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f98:	f023 020c 	bic.w	r2, r3, #12
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fa0:	4966      	ldr	r1, [pc, #408]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa2:	4313      	orrs	r3, r2
 8007fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d00a      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007fb4:	4b61      	ldr	r3, [pc, #388]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fc2:	495e      	ldr	r1, [pc, #376]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00a      	beq.n	8007fec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fd6:	4b59      	ldr	r3, [pc, #356]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fdc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fe4:	4955      	ldr	r1, [pc, #340]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d00a      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007ff8:	4b50      	ldr	r3, [pc, #320]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	494d      	ldr	r1, [pc, #308]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008008:	4313      	orrs	r3, r2
 800800a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008016:	2b00      	cmp	r3, #0
 8008018:	d00a      	beq.n	8008030 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800801a:	4b48      	ldr	r3, [pc, #288]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800801c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008020:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008028:	4944      	ldr	r1, [pc, #272]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00a      	beq.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800803c:	4b3f      	ldr	r3, [pc, #252]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800803e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800804a:	493c      	ldr	r1, [pc, #240]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804c:	4313      	orrs	r3, r2
 800804e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800805a:	2b00      	cmp	r3, #0
 800805c:	d00a      	beq.n	8008074 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800805e:	4b37      	ldr	r3, [pc, #220]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800806c:	4933      	ldr	r1, [pc, #204]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806e:	4313      	orrs	r3, r2
 8008070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00a      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008080:	4b2e      	ldr	r3, [pc, #184]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008086:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800808e:	492b      	ldr	r1, [pc, #172]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008090:	4313      	orrs	r3, r2
 8008092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d011      	beq.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80080a2:	4b26      	ldr	r3, [pc, #152]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080b0:	4922      	ldr	r1, [pc, #136]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b2:	4313      	orrs	r3, r2
 80080b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080c0:	d101      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80080c2:	2301      	movs	r3, #1
 80080c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0308 	and.w	r3, r3, #8
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80080d2:	2301      	movs	r3, #1
 80080d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d00a      	beq.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080e2:	4b16      	ldr	r3, [pc, #88]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080f0:	4912      	ldr	r1, [pc, #72]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f2:	4313      	orrs	r3, r2
 80080f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008100:	2b00      	cmp	r3, #0
 8008102:	d00b      	beq.n	800811c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008104:	4b0d      	ldr	r3, [pc, #52]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800810a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008114:	4909      	ldr	r1, [pc, #36]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008116:	4313      	orrs	r3, r2
 8008118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	2b01      	cmp	r3, #1
 8008120:	d006      	beq.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800812a:	2b00      	cmp	r3, #0
 800812c:	f000 80d9 	beq.w	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008130:	4b02      	ldr	r3, [pc, #8]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a01      	ldr	r2, [pc, #4]	; (800813c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800813a:	e001      	b.n	8008140 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800813c:	40023800 	.word	0x40023800
 8008140:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008142:	f7fc ff6f 	bl	8005024 <HAL_GetTick>
 8008146:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008148:	e008      	b.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800814a:	f7fc ff6b 	bl	8005024 <HAL_GetTick>
 800814e:	4602      	mov	r2, r0
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	2b64      	cmp	r3, #100	; 0x64
 8008156:	d901      	bls.n	800815c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008158:	2303      	movs	r3, #3
 800815a:	e194      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800815c:	4b6c      	ldr	r3, [pc, #432]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1f0      	bne.n	800814a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0301 	and.w	r3, r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	d021      	beq.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008178:	2b00      	cmp	r3, #0
 800817a:	d11d      	bne.n	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800817c:	4b64      	ldr	r3, [pc, #400]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800817e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008182:	0c1b      	lsrs	r3, r3, #16
 8008184:	f003 0303 	and.w	r3, r3, #3
 8008188:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800818a:	4b61      	ldr	r3, [pc, #388]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800818c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008190:	0e1b      	lsrs	r3, r3, #24
 8008192:	f003 030f 	and.w	r3, r3, #15
 8008196:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	019a      	lsls	r2, r3, #6
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	431a      	orrs	r2, r3
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	061b      	lsls	r3, r3, #24
 80081a8:	431a      	orrs	r2, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	071b      	lsls	r3, r3, #28
 80081b0:	4957      	ldr	r1, [pc, #348]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d004      	beq.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081cc:	d00a      	beq.n	80081e4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d02e      	beq.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e2:	d129      	bne.n	8008238 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081e4:	4b4a      	ldr	r3, [pc, #296]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081ea:	0c1b      	lsrs	r3, r3, #16
 80081ec:	f003 0303 	and.w	r3, r3, #3
 80081f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081f2:	4b47      	ldr	r3, [pc, #284]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f8:	0f1b      	lsrs	r3, r3, #28
 80081fa:	f003 0307 	and.w	r3, r3, #7
 80081fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	685b      	ldr	r3, [r3, #4]
 8008204:	019a      	lsls	r2, r3, #6
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	041b      	lsls	r3, r3, #16
 800820a:	431a      	orrs	r2, r3
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	68db      	ldr	r3, [r3, #12]
 8008210:	061b      	lsls	r3, r3, #24
 8008212:	431a      	orrs	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	071b      	lsls	r3, r3, #28
 8008218:	493d      	ldr	r1, [pc, #244]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800821a:	4313      	orrs	r3, r2
 800821c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008220:	4b3b      	ldr	r3, [pc, #236]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008222:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008226:	f023 021f 	bic.w	r2, r3, #31
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800822e:	3b01      	subs	r3, #1
 8008230:	4937      	ldr	r1, [pc, #220]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008232:	4313      	orrs	r3, r2
 8008234:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008240:	2b00      	cmp	r3, #0
 8008242:	d01d      	beq.n	8008280 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008244:	4b32      	ldr	r3, [pc, #200]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800824a:	0e1b      	lsrs	r3, r3, #24
 800824c:	f003 030f 	and.w	r3, r3, #15
 8008250:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008252:	4b2f      	ldr	r3, [pc, #188]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008258:	0f1b      	lsrs	r3, r3, #28
 800825a:	f003 0307 	and.w	r3, r3, #7
 800825e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	019a      	lsls	r2, r3, #6
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	041b      	lsls	r3, r3, #16
 800826c:	431a      	orrs	r2, r3
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	061b      	lsls	r3, r3, #24
 8008272:	431a      	orrs	r2, r3
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	071b      	lsls	r3, r3, #28
 8008278:	4925      	ldr	r1, [pc, #148]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800827a:	4313      	orrs	r3, r2
 800827c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d011      	beq.n	80082b0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	685b      	ldr	r3, [r3, #4]
 8008290:	019a      	lsls	r2, r3, #6
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	041b      	lsls	r3, r3, #16
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	061b      	lsls	r3, r3, #24
 80082a0:	431a      	orrs	r2, r3
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	689b      	ldr	r3, [r3, #8]
 80082a6:	071b      	lsls	r3, r3, #28
 80082a8:	4919      	ldr	r1, [pc, #100]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082aa:	4313      	orrs	r3, r2
 80082ac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082b0:	4b17      	ldr	r3, [pc, #92]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a16      	ldr	r2, [pc, #88]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082bc:	f7fc feb2 	bl	8005024 <HAL_GetTick>
 80082c0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082c2:	e008      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082c4:	f7fc feae 	bl	8005024 <HAL_GetTick>
 80082c8:	4602      	mov	r2, r0
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	1ad3      	subs	r3, r2, r3
 80082ce:	2b64      	cmp	r3, #100	; 0x64
 80082d0:	d901      	bls.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082d2:	2303      	movs	r3, #3
 80082d4:	e0d7      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082d6:	4b0e      	ldr	r3, [pc, #56]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d0f0      	beq.n	80082c4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80082e2:	69bb      	ldr	r3, [r7, #24]
 80082e4:	2b01      	cmp	r3, #1
 80082e6:	f040 80cd 	bne.w	8008484 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082ea:	4b09      	ldr	r3, [pc, #36]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a08      	ldr	r2, [pc, #32]	; (8008310 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082f6:	f7fc fe95 	bl	8005024 <HAL_GetTick>
 80082fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80082fc:	e00a      	b.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80082fe:	f7fc fe91 	bl	8005024 <HAL_GetTick>
 8008302:	4602      	mov	r2, r0
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	1ad3      	subs	r3, r2, r3
 8008308:	2b64      	cmp	r3, #100	; 0x64
 800830a:	d903      	bls.n	8008314 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e0ba      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008310:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008314:	4b5e      	ldr	r3, [pc, #376]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800831c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008320:	d0ed      	beq.n	80082fe <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800832a:	2b00      	cmp	r3, #0
 800832c:	d003      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008332:	2b00      	cmp	r3, #0
 8008334:	d009      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800833e:	2b00      	cmp	r3, #0
 8008340:	d02e      	beq.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008346:	2b00      	cmp	r3, #0
 8008348:	d12a      	bne.n	80083a0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800834a:	4b51      	ldr	r3, [pc, #324]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800834c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008350:	0c1b      	lsrs	r3, r3, #16
 8008352:	f003 0303 	and.w	r3, r3, #3
 8008356:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008358:	4b4d      	ldr	r3, [pc, #308]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800835a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835e:	0f1b      	lsrs	r3, r3, #28
 8008360:	f003 0307 	and.w	r3, r3, #7
 8008364:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	695b      	ldr	r3, [r3, #20]
 800836a:	019a      	lsls	r2, r3, #6
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	041b      	lsls	r3, r3, #16
 8008370:	431a      	orrs	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	699b      	ldr	r3, [r3, #24]
 8008376:	061b      	lsls	r3, r3, #24
 8008378:	431a      	orrs	r2, r3
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	071b      	lsls	r3, r3, #28
 800837e:	4944      	ldr	r1, [pc, #272]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008380:	4313      	orrs	r3, r2
 8008382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008386:	4b42      	ldr	r3, [pc, #264]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008388:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800838c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008394:	3b01      	subs	r3, #1
 8008396:	021b      	lsls	r3, r3, #8
 8008398:	493d      	ldr	r1, [pc, #244]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d022      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083b4:	d11d      	bne.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083b6:	4b36      	ldr	r3, [pc, #216]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083bc:	0e1b      	lsrs	r3, r3, #24
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80083c4:	4b32      	ldr	r3, [pc, #200]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ca:	0f1b      	lsrs	r3, r3, #28
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	695b      	ldr	r3, [r3, #20]
 80083d6:	019a      	lsls	r2, r3, #6
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	041b      	lsls	r3, r3, #16
 80083de:	431a      	orrs	r2, r3
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	061b      	lsls	r3, r3, #24
 80083e4:	431a      	orrs	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	071b      	lsls	r3, r3, #28
 80083ea:	4929      	ldr	r1, [pc, #164]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f003 0308 	and.w	r3, r3, #8
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d028      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083fe:	4b24      	ldr	r3, [pc, #144]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008404:	0e1b      	lsrs	r3, r3, #24
 8008406:	f003 030f 	and.w	r3, r3, #15
 800840a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800840c:	4b20      	ldr	r3, [pc, #128]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800840e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008412:	0c1b      	lsrs	r3, r3, #16
 8008414:	f003 0303 	and.w	r3, r3, #3
 8008418:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	019a      	lsls	r2, r3, #6
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	041b      	lsls	r3, r3, #16
 8008424:	431a      	orrs	r2, r3
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	061b      	lsls	r3, r3, #24
 800842a:	431a      	orrs	r2, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	69db      	ldr	r3, [r3, #28]
 8008430:	071b      	lsls	r3, r3, #28
 8008432:	4917      	ldr	r1, [pc, #92]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008434:	4313      	orrs	r3, r2
 8008436:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800843a:	4b15      	ldr	r3, [pc, #84]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800843c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008440:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008448:	4911      	ldr	r1, [pc, #68]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800844a:	4313      	orrs	r3, r2
 800844c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008450:	4b0f      	ldr	r3, [pc, #60]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a0e      	ldr	r2, [pc, #56]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008456:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800845a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800845c:	f7fc fde2 	bl	8005024 <HAL_GetTick>
 8008460:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008462:	e008      	b.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008464:	f7fc fdde 	bl	8005024 <HAL_GetTick>
 8008468:	4602      	mov	r2, r0
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	1ad3      	subs	r3, r2, r3
 800846e:	2b64      	cmp	r3, #100	; 0x64
 8008470:	d901      	bls.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008472:	2303      	movs	r3, #3
 8008474:	e007      	b.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008476:	4b06      	ldr	r3, [pc, #24]	; (8008490 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800847e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008482:	d1ef      	bne.n	8008464 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008484:	2300      	movs	r3, #0
}
 8008486:	4618      	mov	r0, r3
 8008488:	3720      	adds	r7, #32
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40023800 	.word	0x40023800

08008494 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e022      	b.n	80084ec <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d105      	bne.n	80084be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2200      	movs	r2, #0
 80084b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f7fb f8a1 	bl	8003600 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2203      	movs	r2, #3
 80084c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f814 	bl	80084f4 <HAL_SD_InitCard>
 80084cc:	4603      	mov	r3, r0
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d001      	beq.n	80084d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80084d2:	2301      	movs	r3, #1
 80084d4:	e00a      	b.n	80084ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2200      	movs	r2, #0
 80084da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2200      	movs	r2, #0
 80084e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80084ea:	2300      	movs	r3, #0
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80084f4:	b5b0      	push	{r4, r5, r7, lr}
 80084f6:	b08e      	sub	sp, #56	; 0x38
 80084f8:	af04      	add	r7, sp, #16
 80084fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80084fc:	2300      	movs	r3, #0
 80084fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008500:	2300      	movs	r3, #0
 8008502:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008504:	2300      	movs	r3, #0
 8008506:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008508:	2300      	movs	r3, #0
 800850a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800850c:	2300      	movs	r3, #0
 800850e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008510:	2376      	movs	r3, #118	; 0x76
 8008512:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681d      	ldr	r5, [r3, #0]
 8008518:	466c      	mov	r4, sp
 800851a:	f107 0314 	add.w	r3, r7, #20
 800851e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008526:	f107 0308 	add.w	r3, r7, #8
 800852a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800852c:	4628      	mov	r0, r5
 800852e:	f002 fb45 	bl	800abbc <SDMMC_Init>
 8008532:	4603      	mov	r3, r0
 8008534:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e059      	b.n	80085f8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008552:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4618      	mov	r0, r3
 800855a:	f002 fb79 	bl	800ac50 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685a      	ldr	r2, [r3, #4]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800856c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800856e:	2002      	movs	r0, #2
 8008570:	f7fc fd64 	bl	800503c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008574:	6878      	ldr	r0, [r7, #4]
 8008576:	f000 ff59 	bl	800942c <SD_PowerON>
 800857a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800857c:	6a3b      	ldr	r3, [r7, #32]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d00b      	beq.n	800859a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	431a      	orrs	r2, r3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e02e      	b.n	80085f8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	f000 fe78 	bl	8009290 <SD_InitCard>
 80085a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d00b      	beq.n	80085c0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2201      	movs	r2, #1
 80085ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085b4:	6a3b      	ldr	r3, [r7, #32]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e01b      	b.n	80085f8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80085c8:	4618      	mov	r0, r3
 80085ca:	f002 fbd3 	bl	800ad74 <SDMMC_CmdBlockLength>
 80085ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80085d0:	6a3b      	ldr	r3, [r7, #32]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00f      	beq.n	80085f6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	4a09      	ldr	r2, [pc, #36]	; (8008600 <HAL_SD_InitCard+0x10c>)
 80085dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085e2:	6a3b      	ldr	r3, [r7, #32]
 80085e4:	431a      	orrs	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80085f6:	2300      	movs	r3, #0
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3728      	adds	r7, #40	; 0x28
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008600:	004005ff 	.word	0x004005ff

08008604 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b08c      	sub	sp, #48	; 0x30
 8008608:	af00      	add	r7, sp, #0
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	60b9      	str	r1, [r7, #8]
 800860e:	607a      	str	r2, [r7, #4]
 8008610:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008616:	68bb      	ldr	r3, [r7, #8]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d107      	bne.n	800862c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e0c3      	b.n	80087b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008632:	b2db      	uxtb	r3, r3
 8008634:	2b01      	cmp	r3, #1
 8008636:	f040 80bc 	bne.w	80087b2 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008640:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	441a      	add	r2, r3
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800864a:	429a      	cmp	r2, r3
 800864c:	d907      	bls.n	800865e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e0aa      	b.n	80087b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	2203      	movs	r2, #3
 8008662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	2200      	movs	r2, #0
 800866c:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800867c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	4a4e      	ldr	r2, [pc, #312]	; (80087bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8008684:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800868a:	4a4d      	ldr	r2, [pc, #308]	; (80087c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800868c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008692:	2200      	movs	r2, #0
 8008694:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800869a:	2200      	movs	r2, #0
 800869c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	689a      	ldr	r2, [r3, #8]
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3380      	adds	r3, #128	; 0x80
 80086c4:	4619      	mov	r1, r3
 80086c6:	68ba      	ldr	r2, [r7, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	025b      	lsls	r3, r3, #9
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	f7fe f8eb 	bl	80068a8 <HAL_DMA_Start_IT>
 80086d2:	4603      	mov	r3, r0
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d017      	beq.n	8008708 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80086e6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a35      	ldr	r2, [pc, #212]	; (80087c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80086ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008704:	2301      	movs	r3, #1
 8008706:	e055      	b.n	80087b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f042 0208 	orr.w	r2, r2, #8
 8008716:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871c:	2b01      	cmp	r3, #1
 800871e:	d002      	beq.n	8008726 <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8008720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008722:	025b      	lsls	r3, r3, #9
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800872a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	025b      	lsls	r3, r3, #9
 8008730:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008732:	2390      	movs	r3, #144	; 0x90
 8008734:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008736:	2302      	movs	r3, #2
 8008738:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800873a:	2300      	movs	r3, #0
 800873c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800873e:	2301      	movs	r3, #1
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f107 0210 	add.w	r2, r7, #16
 800874a:	4611      	mov	r1, r2
 800874c:	4618      	mov	r0, r3
 800874e:	f002 fae5 	bl	800ad1c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d90a      	bls.n	800876e <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	2282      	movs	r2, #130	; 0x82
 800875c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008764:	4618      	mov	r0, r3
 8008766:	f002 fb49 	bl	800adfc <SDMMC_CmdReadMultiBlock>
 800876a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800876c:	e009      	b.n	8008782 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2281      	movs	r2, #129	; 0x81
 8008772:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800877a:	4618      	mov	r0, r3
 800877c:	f002 fb1c 	bl	800adb8 <SDMMC_CmdReadSingleBlock>
 8008780:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8008782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008784:	2b00      	cmp	r3, #0
 8008786:	d012      	beq.n	80087ae <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	4a0d      	ldr	r2, [pc, #52]	; (80087c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800878e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008796:	431a      	orrs	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e002      	b.n	80087b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 80087ae:	2300      	movs	r3, #0
 80087b0:	e000      	b.n	80087b4 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 80087b2:	2302      	movs	r3, #2
  }
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3730      	adds	r7, #48	; 0x30
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}
 80087bc:	0800909f 	.word	0x0800909f
 80087c0:	08009111 	.word	0x08009111
 80087c4:	004005ff 	.word	0x004005ff

080087c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b08c      	sub	sp, #48	; 0x30
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	607a      	str	r2, [r7, #4]
 80087d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d107      	bne.n	80087f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80087ec:	2301      	movs	r3, #1
 80087ee:	e0c6      	b.n	800897e <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	f040 80bf 	bne.w	800897c <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	441a      	add	r2, r3
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800880e:	429a      	cmp	r2, r3
 8008810:	d907      	bls.n	8008822 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e0ad      	b.n	800897e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2203      	movs	r2, #3
 8008826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f042 021a 	orr.w	r2, r2, #26
 8008840:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008846:	4a50      	ldr	r2, [pc, #320]	; (8008988 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8008848:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800884e:	4a4f      	ldr	r2, [pc, #316]	; (800898c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8008850:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008856:	2200      	movs	r2, #0
 8008858:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800885e:	2b01      	cmp	r3, #1
 8008860:	d002      	beq.n	8008868 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	025b      	lsls	r3, r3, #9
 8008866:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d90a      	bls.n	8008884 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	22a0      	movs	r2, #160	; 0xa0
 8008872:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800887a:	4618      	mov	r0, r3
 800887c:	f002 fb02 	bl	800ae84 <SDMMC_CmdWriteMultiBlock>
 8008880:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008882:	e009      	b.n	8008898 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2290      	movs	r2, #144	; 0x90
 8008888:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008890:	4618      	mov	r0, r3
 8008892:	f002 fad5 	bl	800ae40 <SDMMC_CmdWriteSingleBlock>
 8008896:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d012      	beq.n	80088c4 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a3b      	ldr	r2, [pc, #236]	; (8008990 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80088aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ac:	431a      	orrs	r2, r3
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	2200      	movs	r2, #0
 80088be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	e05c      	b.n	800897e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f042 0208 	orr.w	r2, r2, #8
 80088d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088d8:	2240      	movs	r2, #64	; 0x40
 80088da:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088ec:	689a      	ldr	r2, [r3, #8]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	430a      	orrs	r2, r1
 80088f6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3380      	adds	r3, #128	; 0x80
 8008904:	461a      	mov	r2, r3
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	025b      	lsls	r3, r3, #9
 800890a:	089b      	lsrs	r3, r3, #2
 800890c:	f7fd ffcc 	bl	80068a8 <HAL_DMA_Start_IT>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d01a      	beq.n	800894c <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f022 021a 	bic.w	r2, r2, #26
 8008924:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a19      	ldr	r2, [pc, #100]	; (8008990 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800892c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2200      	movs	r2, #0
 8008946:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e018      	b.n	800897e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800894c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008950:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008952:	683b      	ldr	r3, [r7, #0]
 8008954:	025b      	lsls	r3, r3, #9
 8008956:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008958:	2390      	movs	r3, #144	; 0x90
 800895a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008960:	2300      	movs	r3, #0
 8008962:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8008964:	2301      	movs	r3, #1
 8008966:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f107 0210 	add.w	r2, r7, #16
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f002 f9d2 	bl	800ad1c <SDMMC_ConfigData>

      return HAL_OK;
 8008978:	2300      	movs	r3, #0
 800897a:	e000      	b.n	800897e <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800897c:	2302      	movs	r3, #2
  }
}
 800897e:	4618      	mov	r0, r3
 8008980:	3730      	adds	r7, #48	; 0x30
 8008982:	46bd      	mov	sp, r7
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	08009075 	.word	0x08009075
 800898c:	08009111 	.word	0x08009111
 8008990:	004005ff 	.word	0x004005ff

08008994 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d008      	beq.n	80089c2 <HAL_SD_IRQHandler+0x2e>
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f003 0308 	and.w	r3, r3, #8
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fdec 	bl	8009598 <SD_Read_IT>
 80089c0:	e15a      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	f000 808d 	beq.w	8008aec <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80089da:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	4b9a      	ldr	r3, [pc, #616]	; (8008c50 <HAL_SD_IRQHandler+0x2bc>)
 80089e8:	400b      	ands	r3, r1
 80089ea:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f022 0201 	bic.w	r2, r2, #1
 80089fa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f003 0308 	and.w	r3, r3, #8
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d039      	beq.n	8008a7a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f003 0302 	and.w	r3, r3, #2
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d104      	bne.n	8008a1a <HAL_SD_IRQHandler+0x86>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f003 0320 	and.w	r3, r3, #32
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f002 fa52 	bl	800aec8 <SDMMC_CmdStopTransfer>
 8008a24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d008      	beq.n	8008a3e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	431a      	orrs	r2, r3
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f000 f921 	bl	8008c80 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f240 523a 	movw	r2, #1338	; 0x53a
 8008a46:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	f003 0301 	and.w	r3, r3, #1
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_SD_IRQHandler+0xd6>
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d003      	beq.n	8008a72 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f002 fe70 	bl	800b750 <HAL_SD_RxCpltCallback>
 8008a70:	e102      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f002 fe62 	bl	800b73c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008a78:	e0fe      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f000 80f9 	beq.w	8008c78 <HAL_SD_IRQHandler+0x2e4>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f003 0320 	and.w	r3, r3, #32
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d011      	beq.n	8008ab4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4618      	mov	r0, r3
 8008a96:	f002 fa17 	bl	800aec8 <SDMMC_CmdStopTransfer>
 8008a9a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d008      	beq.n	8008ab4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	431a      	orrs	r2, r3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 f8e6 	bl	8008c80 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	f040 80dc 	bne.w	8008c78 <HAL_SD_IRQHandler+0x2e4>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f003 0302 	and.w	r3, r3, #2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f040 80d6 	bne.w	8008c78 <HAL_SD_IRQHandler+0x2e4>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f022 0208 	bic.w	r2, r2, #8
 8008ada:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f002 fe29 	bl	800b73c <HAL_SD_TxCpltCallback>
}
 8008aea:	e0c5      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d008      	beq.n	8008b0c <HAL_SD_IRQHandler+0x178>
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	f003 0308 	and.w	r3, r3, #8
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d003      	beq.n	8008b0c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fd98 	bl	800963a <SD_Write_IT>
 8008b0a:	e0b5      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b12:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	f000 80ae 	beq.w	8008c78 <HAL_SD_IRQHandler+0x2e4>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b22:	f003 0302 	and.w	r3, r3, #2
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d005      	beq.n	8008b36 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	f043 0202 	orr.w	r2, r3, #2
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3c:	f003 0308 	and.w	r3, r3, #8
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b48:	f043 0208 	orr.w	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b56:	f003 0320 	and.w	r3, r3, #32
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d005      	beq.n	8008b6a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	f043 0220 	orr.w	r2, r3, #32
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	f003 0310 	and.w	r3, r3, #16
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d005      	beq.n	8008b84 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7c:	f043 0210 	orr.w	r2, r3, #16
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f240 523a 	movw	r2, #1338	; 0x53a
 8008b8c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008b9c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f002 f990 	bl	800aec8 <SDMMC_CmdStopTransfer>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bae:	431a      	orrs	r2, r3
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d00a      	beq.n	8008bd4 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2201      	movs	r2, #1
 8008bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 f857 	bl	8008c80 <HAL_SD_ErrorCallback>
}
 8008bd2:	e051      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d04c      	beq.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f003 0310 	and.w	r3, r3, #16
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d104      	bne.n	8008bf2 <HAL_SD_IRQHandler+0x25e>
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 0320 	and.w	r3, r3, #32
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d011      	beq.n	8008c16 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	4a17      	ldr	r2, [pc, #92]	; (8008c54 <HAL_SD_IRQHandler+0x2c0>)
 8008bf8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f7fd feb2 	bl	8006968 <HAL_DMA_Abort_IT>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d036      	beq.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
          SD_DMATxAbort(hsd->hdmatx);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 fad0 	bl	80091b4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8008c14:	e030      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f003 0301 	and.w	r3, r3, #1
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d104      	bne.n	8008c2a <HAL_SD_IRQHandler+0x296>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	f003 0302 	and.w	r3, r3, #2
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d018      	beq.n	8008c5c <HAL_SD_IRQHandler+0x2c8>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c2e:	4a0a      	ldr	r2, [pc, #40]	; (8008c58 <HAL_SD_IRQHandler+0x2c4>)
 8008c30:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c36:	4618      	mov	r0, r3
 8008c38:	f7fd fe96 	bl	8006968 <HAL_DMA_Abort_IT>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d01a      	beq.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
          SD_DMARxAbort(hsd->hdmarx);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	4618      	mov	r0, r3
 8008c48:	f000 faeb 	bl	8009222 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8008c4c:	e014      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
 8008c4e:	bf00      	nop
 8008c50:	ffff3ec5 	.word	0xffff3ec5
 8008c54:	080091b5 	.word	0x080091b5
 8008c58:	08009223 	.word	0x08009223
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f002 fd59 	bl	800b728 <HAL_SD_AbortCallback>
}
 8008c76:	e7ff      	b.n	8008c78 <HAL_SD_IRQHandler+0x2e4>
 8008c78:	bf00      	nop
 8008c7a:	3710      	adds	r7, #16
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ca2:	0f9b      	lsrs	r3, r3, #30
 8008ca4:	b2da      	uxtb	r2, r3
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cae:	0e9b      	lsrs	r3, r3, #26
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	f003 030f 	and.w	r3, r3, #15
 8008cb6:	b2da      	uxtb	r2, r3
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cc0:	0e1b      	lsrs	r3, r3, #24
 8008cc2:	b2db      	uxtb	r3, r3
 8008cc4:	f003 0303 	and.w	r3, r3, #3
 8008cc8:	b2da      	uxtb	r2, r3
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cd2:	0c1b      	lsrs	r3, r3, #16
 8008cd4:	b2da      	uxtb	r2, r3
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cde:	0a1b      	lsrs	r3, r3, #8
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf4:	0d1b      	lsrs	r3, r3, #20
 8008cf6:	b29a      	uxth	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d00:	0c1b      	lsrs	r3, r3, #16
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 030f 	and.w	r3, r3, #15
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d12:	0bdb      	lsrs	r3, r3, #15
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	f003 0301 	and.w	r3, r3, #1
 8008d1a:	b2da      	uxtb	r2, r3
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d24:	0b9b      	lsrs	r3, r3, #14
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	b2da      	uxtb	r2, r3
 8008d2e:	683b      	ldr	r3, [r7, #0]
 8008d30:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d36:	0b5b      	lsrs	r3, r3, #13
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	b2da      	uxtb	r2, r3
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d48:	0b1b      	lsrs	r3, r3, #12
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	f003 0301 	and.w	r3, r3, #1
 8008d50:	b2da      	uxtb	r2, r3
 8008d52:	683b      	ldr	r3, [r7, #0]
 8008d54:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d163      	bne.n	8008e2c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d68:	009a      	lsls	r2, r3, #2
 8008d6a:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008d6e:	4013      	ands	r3, r2
 8008d70:	687a      	ldr	r2, [r7, #4]
 8008d72:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008d74:	0f92      	lsrs	r2, r2, #30
 8008d76:	431a      	orrs	r2, r3
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d80:	0edb      	lsrs	r3, r3, #27
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 0307 	and.w	r3, r3, #7
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d92:	0e1b      	lsrs	r3, r3, #24
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	f003 0307 	and.w	r3, r3, #7
 8008d9a:	b2da      	uxtb	r2, r3
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008da4:	0d5b      	lsrs	r3, r3, #21
 8008da6:	b2db      	uxtb	r3, r3
 8008da8:	f003 0307 	and.w	r3, r3, #7
 8008dac:	b2da      	uxtb	r2, r3
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008db6:	0c9b      	lsrs	r3, r3, #18
 8008db8:	b2db      	uxtb	r3, r3
 8008dba:	f003 0307 	and.w	r3, r3, #7
 8008dbe:	b2da      	uxtb	r2, r3
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dc8:	0bdb      	lsrs	r3, r3, #15
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	f003 0307 	and.w	r3, r3, #7
 8008dd0:	b2da      	uxtb	r2, r3
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	691b      	ldr	r3, [r3, #16]
 8008dda:	1c5a      	adds	r2, r3, #1
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	7e1b      	ldrb	r3, [r3, #24]
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	3302      	adds	r3, #2
 8008dec:	2201      	movs	r2, #1
 8008dee:	fa02 f303 	lsl.w	r3, r2, r3
 8008df2:	687a      	ldr	r2, [r7, #4]
 8008df4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008df6:	fb03 f202 	mul.w	r2, r3, r2
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	7a1b      	ldrb	r3, [r3, #8]
 8008e02:	b2db      	uxtb	r3, r3
 8008e04:	f003 030f 	and.w	r3, r3, #15
 8008e08:	2201      	movs	r2, #1
 8008e0a:	409a      	lsls	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e14:	687a      	ldr	r2, [r7, #4]
 8008e16:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008e18:	0a52      	lsrs	r2, r2, #9
 8008e1a:	fb03 f202 	mul.w	r2, r3, r2
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e28:	661a      	str	r2, [r3, #96]	; 0x60
 8008e2a:	e031      	b.n	8008e90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e30:	2b01      	cmp	r3, #1
 8008e32:	d11d      	bne.n	8008e70 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e38:	041b      	lsls	r3, r3, #16
 8008e3a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e42:	0c1b      	lsrs	r3, r3, #16
 8008e44:	431a      	orrs	r2, r3
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	029a      	lsls	r2, r3, #10
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e64:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	661a      	str	r2, [r3, #96]	; 0x60
 8008e6e:	e00f      	b.n	8008e90 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a58      	ldr	r2, [pc, #352]	; (8008fd8 <HAL_SD_GetCardCSD+0x344>)
 8008e76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	e09d      	b.n	8008fcc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e94:	0b9b      	lsrs	r3, r3, #14
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	f003 0301 	and.w	r3, r3, #1
 8008e9c:	b2da      	uxtb	r2, r3
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ea6:	09db      	lsrs	r3, r3, #7
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eb8:	b2db      	uxtb	r3, r3
 8008eba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ebe:	b2da      	uxtb	r2, r3
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec8:	0fdb      	lsrs	r3, r3, #31
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed4:	0f5b      	lsrs	r3, r3, #29
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	f003 0303 	and.w	r3, r3, #3
 8008edc:	b2da      	uxtb	r2, r3
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee6:	0e9b      	lsrs	r3, r3, #26
 8008ee8:	b2db      	uxtb	r3, r3
 8008eea:	f003 0307 	and.w	r3, r3, #7
 8008eee:	b2da      	uxtb	r2, r3
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ef8:	0d9b      	lsrs	r3, r3, #22
 8008efa:	b2db      	uxtb	r3, r3
 8008efc:	f003 030f 	and.w	r3, r3, #15
 8008f00:	b2da      	uxtb	r2, r3
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0a:	0d5b      	lsrs	r3, r3, #21
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	f003 0301 	and.w	r3, r3, #1
 8008f12:	b2da      	uxtb	r2, r3
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f26:	0c1b      	lsrs	r3, r3, #16
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	f003 0301 	and.w	r3, r3, #1
 8008f2e:	b2da      	uxtb	r2, r3
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3a:	0bdb      	lsrs	r3, r3, #15
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f4e:	0b9b      	lsrs	r3, r3, #14
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	f003 0301 	and.w	r3, r3, #1
 8008f56:	b2da      	uxtb	r2, r3
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f62:	0b5b      	lsrs	r3, r3, #13
 8008f64:	b2db      	uxtb	r3, r3
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	b2da      	uxtb	r2, r3
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f76:	0b1b      	lsrs	r3, r3, #12
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	f003 0301 	and.w	r3, r3, #1
 8008f7e:	b2da      	uxtb	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8a:	0a9b      	lsrs	r3, r3, #10
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	f003 0303 	and.w	r3, r3, #3
 8008f92:	b2da      	uxtb	r2, r3
 8008f94:	683b      	ldr	r3, [r7, #0]
 8008f96:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f9e:	0a1b      	lsrs	r3, r3, #8
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	f003 0303 	and.w	r3, r3, #3
 8008fa6:	b2da      	uxtb	r2, r3
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb2:	085b      	lsrs	r3, r3, #1
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fba:	b2da      	uxtb	r2, r3
 8008fbc:	683b      	ldr	r3, [r7, #0]
 8008fbe:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	2201      	movs	r2, #1
 8008fc6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	370c      	adds	r7, #12
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd6:	4770      	bx	lr
 8008fd8:	004005ff 	.word	0x004005ff

08008fdc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8009026:	2300      	movs	r3, #0
}
 8009028:	4618      	mov	r0, r3
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr

08009034 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800903c:	2300      	movs	r3, #0
 800903e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009040:	f107 030c 	add.w	r3, r7, #12
 8009044:	4619      	mov	r1, r3
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa7e 	bl	8009548 <SD_SendStatus>
 800904c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d005      	beq.n	8009060 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	431a      	orrs	r2, r3
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	0a5b      	lsrs	r3, r3, #9
 8009064:	f003 030f 	and.w	r3, r3, #15
 8009068:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800906a:	693b      	ldr	r3, [r7, #16]
}
 800906c:	4618      	mov	r0, r3
 800906e:	3718      	adds	r7, #24
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009080:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009090:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8009092:	bf00      	nop
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr

0800909e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800909e:	b580      	push	{r7, lr}
 80090a0:	b084      	sub	sp, #16
 80090a2:	af00      	add	r7, sp, #0
 80090a4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090aa:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b0:	2b82      	cmp	r3, #130	; 0x82
 80090b2:	d111      	bne.n	80090d8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	4618      	mov	r0, r3
 80090ba:	f001 ff05 	bl	800aec8 <SDMMC_CmdStopTransfer>
 80090be:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d008      	beq.n	80090d8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	431a      	orrs	r2, r3
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff fdd4 	bl	8008c80 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f022 0208 	bic.w	r2, r2, #8
 80090e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f240 523a 	movw	r2, #1338	; 0x53a
 80090f0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2201      	movs	r2, #1
 80090f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	2200      	movs	r2, #0
 80090fe:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8009100:	68f8      	ldr	r0, [r7, #12]
 8009102:	f002 fb25 	bl	800b750 <HAL_SD_RxCpltCallback>
#endif
}
 8009106:	bf00      	nop
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
	...

08009110 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b086      	sub	sp, #24
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800911c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f7fd fdce 	bl	8006cc0 <HAL_DMA_GetError>
 8009124:	4603      	mov	r3, r0
 8009126:	2b02      	cmp	r3, #2
 8009128:	d03e      	beq.n	80091a8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009130:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009138:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	2b01      	cmp	r3, #1
 800913e:	d002      	beq.n	8009146 <SD_DMAError+0x36>
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2b01      	cmp	r3, #1
 8009144:	d12d      	bne.n	80091a2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	4a19      	ldr	r2, [pc, #100]	; (80091b0 <SD_DMAError+0xa0>)
 800914c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800914e:	697b      	ldr	r3, [r7, #20]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009154:	697b      	ldr	r3, [r7, #20]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800915c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800915e:	697b      	ldr	r3, [r7, #20]
 8009160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009162:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800916a:	6978      	ldr	r0, [r7, #20]
 800916c:	f7ff ff62 	bl	8009034 <HAL_SD_GetCardState>
 8009170:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2b06      	cmp	r3, #6
 8009176:	d002      	beq.n	800917e <SD_DMAError+0x6e>
 8009178:	68bb      	ldr	r3, [r7, #8]
 800917a:	2b05      	cmp	r3, #5
 800917c:	d10a      	bne.n	8009194 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4618      	mov	r0, r3
 8009184:	f001 fea0 	bl	800aec8 <SDMMC_CmdStopTransfer>
 8009188:	4602      	mov	r2, r0
 800918a:	697b      	ldr	r3, [r7, #20]
 800918c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800918e:	431a      	orrs	r2, r3
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	2201      	movs	r2, #1
 8009198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	2200      	movs	r2, #0
 80091a0:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80091a2:	6978      	ldr	r0, [r7, #20]
 80091a4:	f7ff fd6c 	bl	8008c80 <HAL_SD_ErrorCallback>
#endif
  }
}
 80091a8:	bf00      	nop
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}
 80091b0:	004005ff 	.word	0x004005ff

080091b4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80091b4:	b580      	push	{r7, lr}
 80091b6:	b084      	sub	sp, #16
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091c0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80091cc:	68f8      	ldr	r0, [r7, #12]
 80091ce:	f7ff ff31 	bl	8009034 <HAL_SD_GetCardState>
 80091d2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2201      	movs	r2, #1
 80091d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2200      	movs	r2, #0
 80091e0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	2b06      	cmp	r3, #6
 80091e6:	d002      	beq.n	80091ee <SD_DMATxAbort+0x3a>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	2b05      	cmp	r3, #5
 80091ec:	d10a      	bne.n	8009204 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4618      	mov	r0, r3
 80091f4:	f001 fe68 	bl	800aec8 <SDMMC_CmdStopTransfer>
 80091f8:	4602      	mov	r2, r0
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	431a      	orrs	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800920c:	68f8      	ldr	r0, [r7, #12]
 800920e:	f002 fa8b 	bl	800b728 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009212:	e002      	b.n	800921a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f7ff fd33 	bl	8008c80 <HAL_SD_ErrorCallback>
}
 800921a:	bf00      	nop
 800921c:	3710      	adds	r7, #16
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8009222:	b580      	push	{r7, lr}
 8009224:	b084      	sub	sp, #16
 8009226:	af00      	add	r7, sp, #0
 8009228:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f240 523a 	movw	r2, #1338	; 0x53a
 8009238:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800923a:	68f8      	ldr	r0, [r7, #12]
 800923c:	f7ff fefa 	bl	8009034 <HAL_SD_GetCardState>
 8009240:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	2201      	movs	r2, #1
 8009246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	2200      	movs	r2, #0
 800924e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	2b06      	cmp	r3, #6
 8009254:	d002      	beq.n	800925c <SD_DMARxAbort+0x3a>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	2b05      	cmp	r3, #5
 800925a:	d10a      	bne.n	8009272 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	4618      	mov	r0, r3
 8009262:	f001 fe31 	bl	800aec8 <SDMMC_CmdStopTransfer>
 8009266:	4602      	mov	r2, r0
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926c:	431a      	orrs	r2, r3
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800927a:	68f8      	ldr	r0, [r7, #12]
 800927c:	f002 fa54 	bl	800b728 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8009280:	e002      	b.n	8009288 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7ff fcfc 	bl	8008c80 <HAL_SD_ErrorCallback>
}
 8009288:	bf00      	nop
 800928a:	3710      	adds	r7, #16
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8009290:	b5b0      	push	{r4, r5, r7, lr}
 8009292:	b094      	sub	sp, #80	; 0x50
 8009294:	af04      	add	r7, sp, #16
 8009296:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8009298:	2301      	movs	r3, #1
 800929a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f001 fce3 	bl	800ac6c <SDMMC_GetPowerState>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80092ac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80092b0:	e0b8      	b.n	8009424 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d02f      	beq.n	800931a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	4618      	mov	r0, r3
 80092c0:	f001 feca 	bl	800b058 <SDMMC_CmdSendCID>
 80092c4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80092c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <SD_InitCard+0x40>
    {
      return errorstate;
 80092cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ce:	e0a9      	b.n	8009424 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f001 fd0d 	bl	800acf6 <SDMMC_GetResponse>
 80092dc:	4602      	mov	r2, r0
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	2104      	movs	r1, #4
 80092e8:	4618      	mov	r0, r3
 80092ea:	f001 fd04 	bl	800acf6 <SDMMC_GetResponse>
 80092ee:	4602      	mov	r2, r0
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2108      	movs	r1, #8
 80092fa:	4618      	mov	r0, r3
 80092fc:	f001 fcfb 	bl	800acf6 <SDMMC_GetResponse>
 8009300:	4602      	mov	r2, r0
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	210c      	movs	r1, #12
 800930c:	4618      	mov	r0, r3
 800930e:	f001 fcf2 	bl	800acf6 <SDMMC_GetResponse>
 8009312:	4602      	mov	r2, r0
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800931e:	2b03      	cmp	r3, #3
 8009320:	d00d      	beq.n	800933e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f107 020e 	add.w	r2, r7, #14
 800932a:	4611      	mov	r1, r2
 800932c:	4618      	mov	r0, r3
 800932e:	f001 fed0 	bl	800b0d2 <SDMMC_CmdSetRelAdd>
 8009332:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009336:	2b00      	cmp	r3, #0
 8009338:	d001      	beq.n	800933e <SD_InitCard+0xae>
    {
      return errorstate;
 800933a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800933c:	e072      	b.n	8009424 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009342:	2b03      	cmp	r3, #3
 8009344:	d036      	beq.n	80093b4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009346:	89fb      	ldrh	r3, [r7, #14]
 8009348:	461a      	mov	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681a      	ldr	r2, [r3, #0]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009356:	041b      	lsls	r3, r3, #16
 8009358:	4619      	mov	r1, r3
 800935a:	4610      	mov	r0, r2
 800935c:	f001 fe9a 	bl	800b094 <SDMMC_CmdSendCSD>
 8009360:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009362:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <SD_InitCard+0xdc>
    {
      return errorstate;
 8009368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800936a:	e05b      	b.n	8009424 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	2100      	movs	r1, #0
 8009372:	4618      	mov	r0, r3
 8009374:	f001 fcbf 	bl	800acf6 <SDMMC_GetResponse>
 8009378:	4602      	mov	r2, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2104      	movs	r1, #4
 8009384:	4618      	mov	r0, r3
 8009386:	f001 fcb6 	bl	800acf6 <SDMMC_GetResponse>
 800938a:	4602      	mov	r2, r0
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2108      	movs	r1, #8
 8009396:	4618      	mov	r0, r3
 8009398:	f001 fcad 	bl	800acf6 <SDMMC_GetResponse>
 800939c:	4602      	mov	r2, r0
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	210c      	movs	r1, #12
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 fca4 	bl	800acf6 <SDMMC_GetResponse>
 80093ae:	4602      	mov	r2, r0
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2104      	movs	r1, #4
 80093ba:	4618      	mov	r0, r3
 80093bc:	f001 fc9b 	bl	800acf6 <SDMMC_GetResponse>
 80093c0:	4603      	mov	r3, r0
 80093c2:	0d1a      	lsrs	r2, r3, #20
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80093c8:	f107 0310 	add.w	r3, r7, #16
 80093cc:	4619      	mov	r1, r3
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f7ff fc60 	bl	8008c94 <HAL_SD_GetCardCSD>
 80093d4:	4603      	mov	r3, r0
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d002      	beq.n	80093e0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093da:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093de:	e021      	b.n	8009424 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	6819      	ldr	r1, [r3, #0]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	2200      	movs	r2, #0
 80093ec:	461c      	mov	r4, r3
 80093ee:	4615      	mov	r5, r2
 80093f0:	4622      	mov	r2, r4
 80093f2:	462b      	mov	r3, r5
 80093f4:	4608      	mov	r0, r1
 80093f6:	f001 fd89 	bl	800af0c <SDMMC_CmdSelDesel>
 80093fa:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80093fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d001      	beq.n	8009406 <SD_InitCard+0x176>
  {
    return errorstate;
 8009402:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009404:	e00e      	b.n	8009424 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681d      	ldr	r5, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	466c      	mov	r4, sp
 800940e:	f103 0210 	add.w	r2, r3, #16
 8009412:	ca07      	ldmia	r2, {r0, r1, r2}
 8009414:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009418:	3304      	adds	r3, #4
 800941a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800941c:	4628      	mov	r0, r5
 800941e:	f001 fbcd 	bl	800abbc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3740      	adds	r7, #64	; 0x40
 8009428:	46bd      	mov	sp, r7
 800942a:	bdb0      	pop	{r4, r5, r7, pc}

0800942c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b086      	sub	sp, #24
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009438:	2300      	movs	r3, #0
 800943a:	617b      	str	r3, [r7, #20]
 800943c:	2300      	movs	r3, #0
 800943e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4618      	mov	r0, r3
 8009446:	f001 fd84 	bl	800af52 <SDMMC_CmdGoIdleState>
 800944a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <SD_PowerON+0x2a>
  {
    return errorstate;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	e072      	b.n	800953c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4618      	mov	r0, r3
 800945c:	f001 fd97 	bl	800af8e <SDMMC_CmdOperCond>
 8009460:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d00d      	beq.n	8009484 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4618      	mov	r0, r3
 8009474:	f001 fd6d 	bl	800af52 <SDMMC_CmdGoIdleState>
 8009478:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d004      	beq.n	800948a <SD_PowerON+0x5e>
    {
      return errorstate;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	e05b      	b.n	800953c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800948e:	2b01      	cmp	r3, #1
 8009490:	d137      	bne.n	8009502 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2100      	movs	r1, #0
 8009498:	4618      	mov	r0, r3
 800949a:	f001 fd97 	bl	800afcc <SDMMC_CmdAppCommand>
 800949e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d02d      	beq.n	8009502 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094aa:	e047      	b.n	800953c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2100      	movs	r1, #0
 80094b2:	4618      	mov	r0, r3
 80094b4:	f001 fd8a 	bl	800afcc <SDMMC_CmdAppCommand>
 80094b8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d001      	beq.n	80094c4 <SD_PowerON+0x98>
    {
      return errorstate;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	e03b      	b.n	800953c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	491e      	ldr	r1, [pc, #120]	; (8009544 <SD_PowerON+0x118>)
 80094ca:	4618      	mov	r0, r3
 80094cc:	f001 fda0 	bl	800b010 <SDMMC_CmdAppOperCommand>
 80094d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d002      	beq.n	80094de <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80094dc:	e02e      	b.n	800953c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 fc06 	bl	800acf6 <SDMMC_GetResponse>
 80094ea:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	0fdb      	lsrs	r3, r3, #31
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <SD_PowerON+0xcc>
 80094f4:	2301      	movs	r3, #1
 80094f6:	e000      	b.n	80094fa <SD_PowerON+0xce>
 80094f8:	2300      	movs	r3, #0
 80094fa:	613b      	str	r3, [r7, #16]

    count++;
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	3301      	adds	r3, #1
 8009500:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009508:	4293      	cmp	r3, r2
 800950a:	d802      	bhi.n	8009512 <SD_PowerON+0xe6>
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d0cc      	beq.n	80094ac <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009518:	4293      	cmp	r3, r2
 800951a:	d902      	bls.n	8009522 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800951c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009520:	e00c      	b.n	800953c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009528:	2b00      	cmp	r3, #0
 800952a:	d003      	beq.n	8009534 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	645a      	str	r2, [r3, #68]	; 0x44
 8009532:	e002      	b.n	800953a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2200      	movs	r2, #0
 8009538:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3718      	adds	r7, #24
 8009540:	46bd      	mov	sp, r7
 8009542:	bd80      	pop	{r7, pc}
 8009544:	c1100000 	.word	0xc1100000

08009548 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b084      	sub	sp, #16
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d102      	bne.n	800955e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009558:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800955c:	e018      	b.n	8009590 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009566:	041b      	lsls	r3, r3, #16
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f001 fdd2 	bl	800b114 <SDMMC_CmdSendStatus>
 8009570:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d001      	beq.n	800957c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	e009      	b.n	8009590 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f001 fbb7 	bl	800acf6 <SDMMC_GetResponse>
 8009588:	4602      	mov	r2, r0
 800958a:	683b      	ldr	r3, [r7, #0]
 800958c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800958e:	2300      	movs	r3, #0
}
 8009590:	4618      	mov	r0, r3
 8009592:	3710      	adds	r7, #16
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b086      	sub	sp, #24
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d03f      	beq.n	8009632 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80095b2:	2300      	movs	r3, #0
 80095b4:	617b      	str	r3, [r7, #20]
 80095b6:	e033      	b.n	8009620 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4618      	mov	r0, r3
 80095be:	f001 fb29 	bl	800ac14 <SDMMC_ReadFIFO>
 80095c2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80095c4:	68bb      	ldr	r3, [r7, #8]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	3301      	adds	r3, #1
 80095d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	3b01      	subs	r3, #1
 80095d6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80095d8:	68bb      	ldr	r3, [r7, #8]
 80095da:	0a1b      	lsrs	r3, r3, #8
 80095dc:	b2da      	uxtb	r2, r3
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80095ee:	68bb      	ldr	r3, [r7, #8]
 80095f0:	0c1b      	lsrs	r3, r3, #16
 80095f2:	b2da      	uxtb	r2, r3
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	701a      	strb	r2, [r3, #0]
      tmp++;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	3301      	adds	r3, #1
 80095fc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	3b01      	subs	r3, #1
 8009602:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	0e1b      	lsrs	r3, r3, #24
 8009608:	b2da      	uxtb	r2, r3
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	3301      	adds	r3, #1
 8009612:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	3b01      	subs	r3, #1
 8009618:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	3301      	adds	r3, #1
 800961e:	617b      	str	r3, [r7, #20]
 8009620:	697b      	ldr	r3, [r7, #20]
 8009622:	2b07      	cmp	r3, #7
 8009624:	d9c8      	bls.n	80095b8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	693a      	ldr	r2, [r7, #16]
 8009630:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009632:	bf00      	nop
 8009634:	3718      	adds	r7, #24
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b086      	sub	sp, #24
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6a1b      	ldr	r3, [r3, #32]
 8009646:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800964e:	693b      	ldr	r3, [r7, #16]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d043      	beq.n	80096dc <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009654:	2300      	movs	r3, #0
 8009656:	617b      	str	r3, [r7, #20]
 8009658:	e037      	b.n	80096ca <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	3301      	adds	r3, #1
 8009664:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	3b01      	subs	r3, #1
 800966a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	781b      	ldrb	r3, [r3, #0]
 8009670:	021a      	lsls	r2, r3, #8
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	4313      	orrs	r3, r2
 8009676:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	3301      	adds	r3, #1
 800967c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800967e:	693b      	ldr	r3, [r7, #16]
 8009680:	3b01      	subs	r3, #1
 8009682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	041a      	lsls	r2, r3, #16
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	4313      	orrs	r3, r2
 800968e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	3301      	adds	r3, #1
 8009694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8009696:	693b      	ldr	r3, [r7, #16]
 8009698:	3b01      	subs	r3, #1
 800969a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	061a      	lsls	r2, r3, #24
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4313      	orrs	r3, r2
 80096a6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	3301      	adds	r3, #1
 80096ac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	3b01      	subs	r3, #1
 80096b2:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f107 0208 	add.w	r2, r7, #8
 80096bc:	4611      	mov	r1, r2
 80096be:	4618      	mov	r0, r3
 80096c0:	f001 fab5 	bl	800ac2e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	3301      	adds	r3, #1
 80096c8:	617b      	str	r3, [r7, #20]
 80096ca:	697b      	ldr	r3, [r7, #20]
 80096cc:	2b07      	cmp	r3, #7
 80096ce:	d9c4      	bls.n	800965a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80096dc:	bf00      	nop
 80096de:	3718      	adds	r7, #24
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e038      	b.n	800976c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009700:	b2db      	uxtb	r3, r3
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f7fa fa5c 	bl	8003bcc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681a      	ldr	r2, [r3, #0]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	3308      	adds	r3, #8
 800971c:	4619      	mov	r1, r3
 800971e:	4610      	mov	r0, r2
 8009720:	f001 f934 	bl	800a98c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	6818      	ldr	r0, [r3, #0]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	689b      	ldr	r3, [r3, #8]
 800972c:	461a      	mov	r2, r3
 800972e:	68b9      	ldr	r1, [r7, #8]
 8009730:	f001 f9bc 	bl	800aaac <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	6858      	ldr	r0, [r3, #4]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	689a      	ldr	r2, [r3, #8]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009740:	6879      	ldr	r1, [r7, #4]
 8009742:	f001 fa03 	bl	800ab4c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	6892      	ldr	r2, [r2, #8]
 800974e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	68fa      	ldr	r2, [r7, #12]
 8009758:	6892      	ldr	r2, [r2, #8]
 800975a:	f041 0101 	orr.w	r1, r1, #1
 800975e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2201      	movs	r2, #1
 8009766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800976a:	2300      	movs	r3, #0
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d101      	bne.n	8009786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009782:	2301      	movs	r3, #1
 8009784:	e049      	b.n	800981a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800978c:	b2db      	uxtb	r3, r3
 800978e:	2b00      	cmp	r3, #0
 8009790:	d106      	bne.n	80097a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2200      	movs	r2, #0
 8009796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7fa f83e 	bl	800381c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2202      	movs	r2, #2
 80097a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3304      	adds	r3, #4
 80097b0:	4619      	mov	r1, r3
 80097b2:	4610      	mov	r0, r2
 80097b4:	f000 fa38 	bl	8009c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2201      	movs	r2, #1
 80097bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2201      	movs	r2, #1
 80097cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2201      	movs	r2, #1
 80097dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2201      	movs	r2, #1
 80097ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2201      	movs	r2, #1
 80097f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2201      	movs	r2, #1
 80097fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2201      	movs	r2, #1
 8009804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009832:	b2db      	uxtb	r3, r3
 8009834:	2b01      	cmp	r3, #1
 8009836:	d001      	beq.n	800983c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009838:	2301      	movs	r3, #1
 800983a:	e054      	b.n	80098e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2202      	movs	r2, #2
 8009840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	68da      	ldr	r2, [r3, #12]
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	f042 0201 	orr.w	r2, r2, #1
 8009852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a26      	ldr	r2, [pc, #152]	; (80098f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d022      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009866:	d01d      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a22      	ldr	r2, [pc, #136]	; (80098f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d018      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a21      	ldr	r2, [pc, #132]	; (80098fc <HAL_TIM_Base_Start_IT+0xd8>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d013      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a1f      	ldr	r2, [pc, #124]	; (8009900 <HAL_TIM_Base_Start_IT+0xdc>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d00e      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a1e      	ldr	r2, [pc, #120]	; (8009904 <HAL_TIM_Base_Start_IT+0xe0>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d009      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a1c      	ldr	r2, [pc, #112]	; (8009908 <HAL_TIM_Base_Start_IT+0xe4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d004      	beq.n	80098a4 <HAL_TIM_Base_Start_IT+0x80>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a1b      	ldr	r2, [pc, #108]	; (800990c <HAL_TIM_Base_Start_IT+0xe8>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d115      	bne.n	80098d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	689a      	ldr	r2, [r3, #8]
 80098aa:	4b19      	ldr	r3, [pc, #100]	; (8009910 <HAL_TIM_Base_Start_IT+0xec>)
 80098ac:	4013      	ands	r3, r2
 80098ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b06      	cmp	r3, #6
 80098b4:	d015      	beq.n	80098e2 <HAL_TIM_Base_Start_IT+0xbe>
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098bc:	d011      	beq.n	80098e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f042 0201 	orr.w	r2, r2, #1
 80098cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098ce:	e008      	b.n	80098e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0201 	orr.w	r2, r2, #1
 80098de:	601a      	str	r2, [r3, #0]
 80098e0:	e000      	b.n	80098e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80098e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr
 80098f2:	bf00      	nop
 80098f4:	40010000 	.word	0x40010000
 80098f8:	40000400 	.word	0x40000400
 80098fc:	40000800 	.word	0x40000800
 8009900:	40000c00 	.word	0x40000c00
 8009904:	40010400 	.word	0x40010400
 8009908:	40014000 	.word	0x40014000
 800990c:	40001800 	.word	0x40001800
 8009910:	00010007 	.word	0x00010007

08009914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b082      	sub	sp, #8
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	691b      	ldr	r3, [r3, #16]
 8009922:	f003 0302 	and.w	r3, r3, #2
 8009926:	2b02      	cmp	r3, #2
 8009928:	d122      	bne.n	8009970 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	f003 0302 	and.w	r3, r3, #2
 8009934:	2b02      	cmp	r3, #2
 8009936:	d11b      	bne.n	8009970 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f06f 0202 	mvn.w	r2, #2
 8009940:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	699b      	ldr	r3, [r3, #24]
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	2b00      	cmp	r3, #0
 8009954:	d003      	beq.n	800995e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f000 f947 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 800995c:	e005      	b.n	800996a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 f939 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 f94a 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2200      	movs	r2, #0
 800996e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	691b      	ldr	r3, [r3, #16]
 8009976:	f003 0304 	and.w	r3, r3, #4
 800997a:	2b04      	cmp	r3, #4
 800997c:	d122      	bne.n	80099c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	68db      	ldr	r3, [r3, #12]
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b04      	cmp	r3, #4
 800998a:	d11b      	bne.n	80099c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f06f 0204 	mvn.w	r2, #4
 8009994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2202      	movs	r2, #2
 800999a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d003      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f91d 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 80099b0:	e005      	b.n	80099be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f90f 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f920 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2200      	movs	r2, #0
 80099c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	f003 0308 	and.w	r3, r3, #8
 80099ce:	2b08      	cmp	r3, #8
 80099d0:	d122      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d11b      	bne.n	8009a18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f06f 0208 	mvn.w	r2, #8
 80099e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	2204      	movs	r2, #4
 80099ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	69db      	ldr	r3, [r3, #28]
 80099f6:	f003 0303 	and.w	r3, r3, #3
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d003      	beq.n	8009a06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 f8f3 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 8009a04:	e005      	b.n	8009a12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f8e5 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f8f6 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	2200      	movs	r2, #0
 8009a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	f003 0310 	and.w	r3, r3, #16
 8009a22:	2b10      	cmp	r3, #16
 8009a24:	d122      	bne.n	8009a6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f003 0310 	and.w	r3, r3, #16
 8009a30:	2b10      	cmp	r3, #16
 8009a32:	d11b      	bne.n	8009a6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f06f 0210 	mvn.w	r2, #16
 8009a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2208      	movs	r2, #8
 8009a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 f8c9 	bl	8009bea <HAL_TIM_IC_CaptureCallback>
 8009a58:	e005      	b.n	8009a66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	f000 f8bb 	bl	8009bd6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009a60:	6878      	ldr	r0, [r7, #4]
 8009a62:	f000 f8cc 	bl	8009bfe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	691b      	ldr	r3, [r3, #16]
 8009a72:	f003 0301 	and.w	r3, r3, #1
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d10e      	bne.n	8009a98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	68db      	ldr	r3, [r3, #12]
 8009a80:	f003 0301 	and.w	r3, r3, #1
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d107      	bne.n	8009a98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f06f 0201 	mvn.w	r2, #1
 8009a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f7f8 faa8 	bl	8001fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691b      	ldr	r3, [r3, #16]
 8009a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009aa2:	2b80      	cmp	r3, #128	; 0x80
 8009aa4:	d10e      	bne.n	8009ac4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68db      	ldr	r3, [r3, #12]
 8009aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab0:	2b80      	cmp	r3, #128	; 0x80
 8009ab2:	d107      	bne.n	8009ac4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 fafe 	bl	800a0c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ace:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ad2:	d10e      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68db      	ldr	r3, [r3, #12]
 8009ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ade:	2b80      	cmp	r3, #128	; 0x80
 8009ae0:	d107      	bne.n	8009af2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009aea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f000 faf1 	bl	800a0d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009afc:	2b40      	cmp	r3, #64	; 0x40
 8009afe:	d10e      	bne.n	8009b1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	68db      	ldr	r3, [r3, #12]
 8009b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b0a:	2b40      	cmp	r3, #64	; 0x40
 8009b0c:	d107      	bne.n	8009b1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f87a 	bl	8009c12 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	f003 0320 	and.w	r3, r3, #32
 8009b28:	2b20      	cmp	r3, #32
 8009b2a:	d10e      	bne.n	8009b4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	68db      	ldr	r3, [r3, #12]
 8009b32:	f003 0320 	and.w	r3, r3, #32
 8009b36:	2b20      	cmp	r3, #32
 8009b38:	d107      	bne.n	8009b4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f06f 0220 	mvn.w	r2, #32
 8009b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 fab1 	bl	800a0ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009b4a:	bf00      	nop
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}

08009b52 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b52:	b580      	push	{r7, lr}
 8009b54:	b082      	sub	sp, #8
 8009b56:	af00      	add	r7, sp, #0
 8009b58:	6078      	str	r0, [r7, #4]
 8009b5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b62:	2b01      	cmp	r3, #1
 8009b64:	d101      	bne.n	8009b6a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009b66:	2302      	movs	r3, #2
 8009b68:	e031      	b.n	8009bce <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	2201      	movs	r2, #1
 8009b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2202      	movs	r2, #2
 8009b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009b7a:	6839      	ldr	r1, [r7, #0]
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f8f3 	bl	8009d68 <TIM_SlaveTimer_SetConfig>
 8009b82:	4603      	mov	r3, r0
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d009      	beq.n	8009b9c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e018      	b.n	8009bce <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009baa:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	68da      	ldr	r2, [r3, #12]
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009bba:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009bcc:	2300      	movs	r3, #0
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	3708      	adds	r7, #8
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	bd80      	pop	{r7, pc}

08009bd6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009bd6:	b480      	push	{r7}
 8009bd8:	b083      	sub	sp, #12
 8009bda:	af00      	add	r7, sp, #0
 8009bdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009bde:	bf00      	nop
 8009be0:	370c      	adds	r7, #12
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009bea:	b480      	push	{r7}
 8009bec:	b083      	sub	sp, #12
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009bf2:	bf00      	nop
 8009bf4:	370c      	adds	r7, #12
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfc:	4770      	bx	lr

08009bfe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009bfe:	b480      	push	{r7}
 8009c00:	b083      	sub	sp, #12
 8009c02:	af00      	add	r7, sp, #0
 8009c04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c06:	bf00      	nop
 8009c08:	370c      	adds	r7, #12
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr

08009c12 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c12:	b480      	push	{r7}
 8009c14:	b083      	sub	sp, #12
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c1a:	bf00      	nop
 8009c1c:	370c      	adds	r7, #12
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c24:	4770      	bx	lr
	...

08009c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a40      	ldr	r2, [pc, #256]	; (8009d3c <TIM_Base_SetConfig+0x114>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d013      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c46:	d00f      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a3d      	ldr	r2, [pc, #244]	; (8009d40 <TIM_Base_SetConfig+0x118>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d00b      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a3c      	ldr	r2, [pc, #240]	; (8009d44 <TIM_Base_SetConfig+0x11c>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d007      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a3b      	ldr	r2, [pc, #236]	; (8009d48 <TIM_Base_SetConfig+0x120>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d003      	beq.n	8009c68 <TIM_Base_SetConfig+0x40>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a3a      	ldr	r2, [pc, #232]	; (8009d4c <TIM_Base_SetConfig+0x124>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d108      	bne.n	8009c7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	68fa      	ldr	r2, [r7, #12]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	4a2f      	ldr	r2, [pc, #188]	; (8009d3c <TIM_Base_SetConfig+0x114>)
 8009c7e:	4293      	cmp	r3, r2
 8009c80:	d02b      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c88:	d027      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	4a2c      	ldr	r2, [pc, #176]	; (8009d40 <TIM_Base_SetConfig+0x118>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d023      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4a2b      	ldr	r2, [pc, #172]	; (8009d44 <TIM_Base_SetConfig+0x11c>)
 8009c96:	4293      	cmp	r3, r2
 8009c98:	d01f      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	4a2a      	ldr	r2, [pc, #168]	; (8009d48 <TIM_Base_SetConfig+0x120>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d01b      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a29      	ldr	r2, [pc, #164]	; (8009d4c <TIM_Base_SetConfig+0x124>)
 8009ca6:	4293      	cmp	r3, r2
 8009ca8:	d017      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	4a28      	ldr	r2, [pc, #160]	; (8009d50 <TIM_Base_SetConfig+0x128>)
 8009cae:	4293      	cmp	r3, r2
 8009cb0:	d013      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	4a27      	ldr	r2, [pc, #156]	; (8009d54 <TIM_Base_SetConfig+0x12c>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d00f      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4a26      	ldr	r2, [pc, #152]	; (8009d58 <TIM_Base_SetConfig+0x130>)
 8009cbe:	4293      	cmp	r3, r2
 8009cc0:	d00b      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4a25      	ldr	r2, [pc, #148]	; (8009d5c <TIM_Base_SetConfig+0x134>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d007      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	4a24      	ldr	r2, [pc, #144]	; (8009d60 <TIM_Base_SetConfig+0x138>)
 8009cce:	4293      	cmp	r3, r2
 8009cd0:	d003      	beq.n	8009cda <TIM_Base_SetConfig+0xb2>
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	4a23      	ldr	r2, [pc, #140]	; (8009d64 <TIM_Base_SetConfig+0x13c>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d108      	bne.n	8009cec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ce0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	68fa      	ldr	r2, [r7, #12]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	695b      	ldr	r3, [r3, #20]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	68fa      	ldr	r2, [r7, #12]
 8009cfe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	689a      	ldr	r2, [r3, #8]
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <TIM_Base_SetConfig+0x114>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d003      	beq.n	8009d20 <TIM_Base_SetConfig+0xf8>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4a0c      	ldr	r2, [pc, #48]	; (8009d4c <TIM_Base_SetConfig+0x124>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d103      	bne.n	8009d28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	691a      	ldr	r2, [r3, #16]
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	615a      	str	r2, [r3, #20]
}
 8009d2e:	bf00      	nop
 8009d30:	3714      	adds	r7, #20
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr
 8009d3a:	bf00      	nop
 8009d3c:	40010000 	.word	0x40010000
 8009d40:	40000400 	.word	0x40000400
 8009d44:	40000800 	.word	0x40000800
 8009d48:	40000c00 	.word	0x40000c00
 8009d4c:	40010400 	.word	0x40010400
 8009d50:	40014000 	.word	0x40014000
 8009d54:	40014400 	.word	0x40014400
 8009d58:	40014800 	.word	0x40014800
 8009d5c:	40001800 	.word	0x40001800
 8009d60:	40001c00 	.word	0x40001c00
 8009d64:	40002000 	.word	0x40002000

08009d68 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b086      	sub	sp, #24
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009d72:	2300      	movs	r3, #0
 8009d74:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	689b      	ldr	r3, [r3, #8]
 8009d7c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d7e:	693b      	ldr	r3, [r7, #16]
 8009d80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d84:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	685b      	ldr	r3, [r3, #4]
 8009d8a:	693a      	ldr	r2, [r7, #16]
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009d90:	693a      	ldr	r2, [r7, #16]
 8009d92:	4b3e      	ldr	r3, [pc, #248]	; (8009e8c <TIM_SlaveTimer_SetConfig+0x124>)
 8009d94:	4013      	ands	r3, r2
 8009d96:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	693a      	ldr	r2, [r7, #16]
 8009d9e:	4313      	orrs	r3, r2
 8009da0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	693a      	ldr	r2, [r7, #16]
 8009da8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	685b      	ldr	r3, [r3, #4]
 8009dae:	2b70      	cmp	r3, #112	; 0x70
 8009db0:	d01a      	beq.n	8009de8 <TIM_SlaveTimer_SetConfig+0x80>
 8009db2:	2b70      	cmp	r3, #112	; 0x70
 8009db4:	d860      	bhi.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
 8009db6:	2b60      	cmp	r3, #96	; 0x60
 8009db8:	d054      	beq.n	8009e64 <TIM_SlaveTimer_SetConfig+0xfc>
 8009dba:	2b60      	cmp	r3, #96	; 0x60
 8009dbc:	d85c      	bhi.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
 8009dbe:	2b50      	cmp	r3, #80	; 0x50
 8009dc0:	d046      	beq.n	8009e50 <TIM_SlaveTimer_SetConfig+0xe8>
 8009dc2:	2b50      	cmp	r3, #80	; 0x50
 8009dc4:	d858      	bhi.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
 8009dc6:	2b40      	cmp	r3, #64	; 0x40
 8009dc8:	d019      	beq.n	8009dfe <TIM_SlaveTimer_SetConfig+0x96>
 8009dca:	2b40      	cmp	r3, #64	; 0x40
 8009dcc:	d854      	bhi.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
 8009dce:	2b30      	cmp	r3, #48	; 0x30
 8009dd0:	d055      	beq.n	8009e7e <TIM_SlaveTimer_SetConfig+0x116>
 8009dd2:	2b30      	cmp	r3, #48	; 0x30
 8009dd4:	d850      	bhi.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
 8009dd6:	2b20      	cmp	r3, #32
 8009dd8:	d051      	beq.n	8009e7e <TIM_SlaveTimer_SetConfig+0x116>
 8009dda:	2b20      	cmp	r3, #32
 8009ddc:	d84c      	bhi.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d04d      	beq.n	8009e7e <TIM_SlaveTimer_SetConfig+0x116>
 8009de2:	2b10      	cmp	r3, #16
 8009de4:	d04b      	beq.n	8009e7e <TIM_SlaveTimer_SetConfig+0x116>
 8009de6:	e047      	b.n	8009e78 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8009df8:	f000 f8a9 	bl	8009f4e <TIM_ETR_SetConfig>
      break;
 8009dfc:	e040      	b.n	8009e80 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	2b05      	cmp	r3, #5
 8009e04:	d101      	bne.n	8009e0a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009e06:	2301      	movs	r3, #1
 8009e08:	e03b      	b.n	8009e82 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	6a1a      	ldr	r2, [r3, #32]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f022 0201 	bic.w	r2, r2, #1
 8009e20:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	699b      	ldr	r3, [r3, #24]
 8009e28:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e30:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	011b      	lsls	r3, r3, #4
 8009e38:	68ba      	ldr	r2, [r7, #8]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68ba      	ldr	r2, [r7, #8]
 8009e44:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	68fa      	ldr	r2, [r7, #12]
 8009e4c:	621a      	str	r2, [r3, #32]
      break;
 8009e4e:	e017      	b.n	8009e80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009e5c:	461a      	mov	r2, r3
 8009e5e:	f000 f817 	bl	8009e90 <TIM_TI1_ConfigInputStage>
      break;
 8009e62:	e00d      	b.n	8009e80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009e70:	461a      	mov	r2, r3
 8009e72:	f000 f83c 	bl	8009eee <TIM_TI2_ConfigInputStage>
      break;
 8009e76:	e003      	b.n	8009e80 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009e78:	2301      	movs	r3, #1
 8009e7a:	75fb      	strb	r3, [r7, #23]
      break;
 8009e7c:	e000      	b.n	8009e80 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009e7e:	bf00      	nop
  }

  return status;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	fffefff8 	.word	0xfffefff8

08009e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6a1b      	ldr	r3, [r3, #32]
 8009ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	6a1b      	ldr	r3, [r3, #32]
 8009ea6:	f023 0201 	bic.w	r2, r3, #1
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	699b      	ldr	r3, [r3, #24]
 8009eb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009eba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	011b      	lsls	r3, r3, #4
 8009ec0:	693a      	ldr	r2, [r7, #16]
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f023 030a 	bic.w	r3, r3, #10
 8009ecc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009ece:	697a      	ldr	r2, [r7, #20]
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	697a      	ldr	r2, [r7, #20]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr

08009eee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eee:	b480      	push	{r7}
 8009ef0:	b087      	sub	sp, #28
 8009ef2:	af00      	add	r7, sp, #0
 8009ef4:	60f8      	str	r0, [r7, #12]
 8009ef6:	60b9      	str	r1, [r7, #8]
 8009ef8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f023 0210 	bic.w	r2, r3, #16
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6a1b      	ldr	r3, [r3, #32]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009f12:	697b      	ldr	r3, [r7, #20]
 8009f14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009f18:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	031b      	lsls	r3, r3, #12
 8009f1e:	697a      	ldr	r2, [r7, #20]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f2a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	011b      	lsls	r3, r3, #4
 8009f30:	693a      	ldr	r2, [r7, #16]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	697a      	ldr	r2, [r7, #20]
 8009f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	693a      	ldr	r2, [r7, #16]
 8009f40:	621a      	str	r2, [r3, #32]
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f4e:	b480      	push	{r7}
 8009f50:	b087      	sub	sp, #28
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	60f8      	str	r0, [r7, #12]
 8009f56:	60b9      	str	r1, [r7, #8]
 8009f58:	607a      	str	r2, [r7, #4]
 8009f5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	689b      	ldr	r3, [r3, #8]
 8009f60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f62:	697b      	ldr	r3, [r7, #20]
 8009f64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	021a      	lsls	r2, r3, #8
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	697a      	ldr	r2, [r7, #20]
 8009f78:	4313      	orrs	r3, r2
 8009f7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	609a      	str	r2, [r3, #8]
}
 8009f82:	bf00      	nop
 8009f84:	371c      	adds	r7, #28
 8009f86:	46bd      	mov	sp, r7
 8009f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8c:	4770      	bx	lr
	...

08009f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa0:	2b01      	cmp	r3, #1
 8009fa2:	d101      	bne.n	8009fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fa4:	2302      	movs	r3, #2
 8009fa6:	e06d      	b.n	800a084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2201      	movs	r2, #1
 8009fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2202      	movs	r2, #2
 8009fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689b      	ldr	r3, [r3, #8]
 8009fc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a30      	ldr	r2, [pc, #192]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fce:	4293      	cmp	r3, r2
 8009fd0:	d004      	beq.n	8009fdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a2f      	ldr	r2, [pc, #188]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d108      	bne.n	8009fee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009fe2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	4313      	orrs	r3, r2
 8009fec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ff4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	68fa      	ldr	r2, [r7, #12]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	68fa      	ldr	r2, [r7, #12]
 800a006:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a20      	ldr	r2, [pc, #128]	; (800a090 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d022      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a01a:	d01d      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a1d      	ldr	r2, [pc, #116]	; (800a098 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a022:	4293      	cmp	r3, r2
 800a024:	d018      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	4a1c      	ldr	r2, [pc, #112]	; (800a09c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d013      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a1a      	ldr	r2, [pc, #104]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d00e      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	4a15      	ldr	r2, [pc, #84]	; (800a094 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d009      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a16      	ldr	r2, [pc, #88]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d004      	beq.n	800a058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	4a15      	ldr	r2, [pc, #84]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a054:	4293      	cmp	r3, r2
 800a056:	d10c      	bne.n	800a072 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a058:	68bb      	ldr	r3, [r7, #8]
 800a05a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a05e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	4313      	orrs	r3, r2
 800a068:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	68ba      	ldr	r2, [r7, #8]
 800a070:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2201      	movs	r2, #1
 800a076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a082:	2300      	movs	r3, #0
}
 800a084:	4618      	mov	r0, r3
 800a086:	3714      	adds	r7, #20
 800a088:	46bd      	mov	sp, r7
 800a08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08e:	4770      	bx	lr
 800a090:	40010000 	.word	0x40010000
 800a094:	40010400 	.word	0x40010400
 800a098:	40000400 	.word	0x40000400
 800a09c:	40000800 	.word	0x40000800
 800a0a0:	40000c00 	.word	0x40000c00
 800a0a4:	40014000 	.word	0x40014000
 800a0a8:	40001800 	.word	0x40001800

0800a0ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a0ac:	b480      	push	{r7}
 800a0ae:	b083      	sub	sp, #12
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a0b4:	bf00      	nop
 800a0b6:	370c      	adds	r7, #12
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0be:	4770      	bx	lr

0800a0c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b083      	sub	sp, #12
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a0c8:	bf00      	nop
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a0dc:	bf00      	nop
 800a0de:	370c      	adds	r7, #12
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e6:	4770      	bx	lr

0800a0e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b082      	sub	sp, #8
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d101      	bne.n	800a0fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	e040      	b.n	800a17c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d106      	bne.n	800a110 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f7f9 fc16 	bl	800393c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2224      	movs	r2, #36	; 0x24
 800a114:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	681a      	ldr	r2, [r3, #0]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f022 0201 	bic.w	r2, r2, #1
 800a124:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a126:	6878      	ldr	r0, [r7, #4]
 800a128:	f000 f82c 	bl	800a184 <UART_SetConfig>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d101      	bne.n	800a136 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	e022      	b.n	800a17c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d002      	beq.n	800a144 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 fa84 	bl	800a64c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a152:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	689a      	ldr	r2, [r3, #8]
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a162:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	681a      	ldr	r2, [r3, #0]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f042 0201 	orr.w	r2, r2, #1
 800a172:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a174:	6878      	ldr	r0, [r7, #4]
 800a176:	f000 fb0b 	bl	800a790 <UART_CheckIdleState>
 800a17a:	4603      	mov	r3, r0
}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a18c:	2300      	movs	r3, #0
 800a18e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	689a      	ldr	r2, [r3, #8]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	431a      	orrs	r2, r3
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	695b      	ldr	r3, [r3, #20]
 800a19e:	431a      	orrs	r2, r3
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	69db      	ldr	r3, [r3, #28]
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	681a      	ldr	r2, [r3, #0]
 800a1ae:	4ba6      	ldr	r3, [pc, #664]	; (800a448 <UART_SetConfig+0x2c4>)
 800a1b0:	4013      	ands	r3, r2
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	6812      	ldr	r2, [r2, #0]
 800a1b6:	6979      	ldr	r1, [r7, #20]
 800a1b8:	430b      	orrs	r3, r1
 800a1ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	68da      	ldr	r2, [r3, #12]
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	699b      	ldr	r3, [r3, #24]
 800a1d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6a1b      	ldr	r3, [r3, #32]
 800a1dc:	697a      	ldr	r2, [r7, #20]
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	689b      	ldr	r3, [r3, #8]
 800a1e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	697a      	ldr	r2, [r7, #20]
 800a1f2:	430a      	orrs	r2, r1
 800a1f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a94      	ldr	r2, [pc, #592]	; (800a44c <UART_SetConfig+0x2c8>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d120      	bne.n	800a242 <UART_SetConfig+0xbe>
 800a200:	4b93      	ldr	r3, [pc, #588]	; (800a450 <UART_SetConfig+0x2cc>)
 800a202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a206:	f003 0303 	and.w	r3, r3, #3
 800a20a:	2b03      	cmp	r3, #3
 800a20c:	d816      	bhi.n	800a23c <UART_SetConfig+0xb8>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <UART_SetConfig+0x90>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a225 	.word	0x0800a225
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a22b 	.word	0x0800a22b
 800a220:	0800a237 	.word	0x0800a237
 800a224:	2301      	movs	r3, #1
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e150      	b.n	800a4cc <UART_SetConfig+0x348>
 800a22a:	2302      	movs	r3, #2
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e14d      	b.n	800a4cc <UART_SetConfig+0x348>
 800a230:	2304      	movs	r3, #4
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e14a      	b.n	800a4cc <UART_SetConfig+0x348>
 800a236:	2308      	movs	r3, #8
 800a238:	77fb      	strb	r3, [r7, #31]
 800a23a:	e147      	b.n	800a4cc <UART_SetConfig+0x348>
 800a23c:	2310      	movs	r3, #16
 800a23e:	77fb      	strb	r3, [r7, #31]
 800a240:	e144      	b.n	800a4cc <UART_SetConfig+0x348>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	4a83      	ldr	r2, [pc, #524]	; (800a454 <UART_SetConfig+0x2d0>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d132      	bne.n	800a2b2 <UART_SetConfig+0x12e>
 800a24c:	4b80      	ldr	r3, [pc, #512]	; (800a450 <UART_SetConfig+0x2cc>)
 800a24e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a252:	f003 030c 	and.w	r3, r3, #12
 800a256:	2b0c      	cmp	r3, #12
 800a258:	d828      	bhi.n	800a2ac <UART_SetConfig+0x128>
 800a25a:	a201      	add	r2, pc, #4	; (adr r2, 800a260 <UART_SetConfig+0xdc>)
 800a25c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a260:	0800a295 	.word	0x0800a295
 800a264:	0800a2ad 	.word	0x0800a2ad
 800a268:	0800a2ad 	.word	0x0800a2ad
 800a26c:	0800a2ad 	.word	0x0800a2ad
 800a270:	0800a2a1 	.word	0x0800a2a1
 800a274:	0800a2ad 	.word	0x0800a2ad
 800a278:	0800a2ad 	.word	0x0800a2ad
 800a27c:	0800a2ad 	.word	0x0800a2ad
 800a280:	0800a29b 	.word	0x0800a29b
 800a284:	0800a2ad 	.word	0x0800a2ad
 800a288:	0800a2ad 	.word	0x0800a2ad
 800a28c:	0800a2ad 	.word	0x0800a2ad
 800a290:	0800a2a7 	.word	0x0800a2a7
 800a294:	2300      	movs	r3, #0
 800a296:	77fb      	strb	r3, [r7, #31]
 800a298:	e118      	b.n	800a4cc <UART_SetConfig+0x348>
 800a29a:	2302      	movs	r3, #2
 800a29c:	77fb      	strb	r3, [r7, #31]
 800a29e:	e115      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2a0:	2304      	movs	r3, #4
 800a2a2:	77fb      	strb	r3, [r7, #31]
 800a2a4:	e112      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2a6:	2308      	movs	r3, #8
 800a2a8:	77fb      	strb	r3, [r7, #31]
 800a2aa:	e10f      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2ac:	2310      	movs	r3, #16
 800a2ae:	77fb      	strb	r3, [r7, #31]
 800a2b0:	e10c      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a68      	ldr	r2, [pc, #416]	; (800a458 <UART_SetConfig+0x2d4>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d120      	bne.n	800a2fe <UART_SetConfig+0x17a>
 800a2bc:	4b64      	ldr	r3, [pc, #400]	; (800a450 <UART_SetConfig+0x2cc>)
 800a2be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a2c6:	2b30      	cmp	r3, #48	; 0x30
 800a2c8:	d013      	beq.n	800a2f2 <UART_SetConfig+0x16e>
 800a2ca:	2b30      	cmp	r3, #48	; 0x30
 800a2cc:	d814      	bhi.n	800a2f8 <UART_SetConfig+0x174>
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	d009      	beq.n	800a2e6 <UART_SetConfig+0x162>
 800a2d2:	2b20      	cmp	r3, #32
 800a2d4:	d810      	bhi.n	800a2f8 <UART_SetConfig+0x174>
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d002      	beq.n	800a2e0 <UART_SetConfig+0x15c>
 800a2da:	2b10      	cmp	r3, #16
 800a2dc:	d006      	beq.n	800a2ec <UART_SetConfig+0x168>
 800a2de:	e00b      	b.n	800a2f8 <UART_SetConfig+0x174>
 800a2e0:	2300      	movs	r3, #0
 800a2e2:	77fb      	strb	r3, [r7, #31]
 800a2e4:	e0f2      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2e6:	2302      	movs	r3, #2
 800a2e8:	77fb      	strb	r3, [r7, #31]
 800a2ea:	e0ef      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2ec:	2304      	movs	r3, #4
 800a2ee:	77fb      	strb	r3, [r7, #31]
 800a2f0:	e0ec      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2f2:	2308      	movs	r3, #8
 800a2f4:	77fb      	strb	r3, [r7, #31]
 800a2f6:	e0e9      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2f8:	2310      	movs	r3, #16
 800a2fa:	77fb      	strb	r3, [r7, #31]
 800a2fc:	e0e6      	b.n	800a4cc <UART_SetConfig+0x348>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	4a56      	ldr	r2, [pc, #344]	; (800a45c <UART_SetConfig+0x2d8>)
 800a304:	4293      	cmp	r3, r2
 800a306:	d120      	bne.n	800a34a <UART_SetConfig+0x1c6>
 800a308:	4b51      	ldr	r3, [pc, #324]	; (800a450 <UART_SetConfig+0x2cc>)
 800a30a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a30e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a312:	2bc0      	cmp	r3, #192	; 0xc0
 800a314:	d013      	beq.n	800a33e <UART_SetConfig+0x1ba>
 800a316:	2bc0      	cmp	r3, #192	; 0xc0
 800a318:	d814      	bhi.n	800a344 <UART_SetConfig+0x1c0>
 800a31a:	2b80      	cmp	r3, #128	; 0x80
 800a31c:	d009      	beq.n	800a332 <UART_SetConfig+0x1ae>
 800a31e:	2b80      	cmp	r3, #128	; 0x80
 800a320:	d810      	bhi.n	800a344 <UART_SetConfig+0x1c0>
 800a322:	2b00      	cmp	r3, #0
 800a324:	d002      	beq.n	800a32c <UART_SetConfig+0x1a8>
 800a326:	2b40      	cmp	r3, #64	; 0x40
 800a328:	d006      	beq.n	800a338 <UART_SetConfig+0x1b4>
 800a32a:	e00b      	b.n	800a344 <UART_SetConfig+0x1c0>
 800a32c:	2300      	movs	r3, #0
 800a32e:	77fb      	strb	r3, [r7, #31]
 800a330:	e0cc      	b.n	800a4cc <UART_SetConfig+0x348>
 800a332:	2302      	movs	r3, #2
 800a334:	77fb      	strb	r3, [r7, #31]
 800a336:	e0c9      	b.n	800a4cc <UART_SetConfig+0x348>
 800a338:	2304      	movs	r3, #4
 800a33a:	77fb      	strb	r3, [r7, #31]
 800a33c:	e0c6      	b.n	800a4cc <UART_SetConfig+0x348>
 800a33e:	2308      	movs	r3, #8
 800a340:	77fb      	strb	r3, [r7, #31]
 800a342:	e0c3      	b.n	800a4cc <UART_SetConfig+0x348>
 800a344:	2310      	movs	r3, #16
 800a346:	77fb      	strb	r3, [r7, #31]
 800a348:	e0c0      	b.n	800a4cc <UART_SetConfig+0x348>
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a44      	ldr	r2, [pc, #272]	; (800a460 <UART_SetConfig+0x2dc>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d125      	bne.n	800a3a0 <UART_SetConfig+0x21c>
 800a354:	4b3e      	ldr	r3, [pc, #248]	; (800a450 <UART_SetConfig+0x2cc>)
 800a356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a35e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a362:	d017      	beq.n	800a394 <UART_SetConfig+0x210>
 800a364:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a368:	d817      	bhi.n	800a39a <UART_SetConfig+0x216>
 800a36a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a36e:	d00b      	beq.n	800a388 <UART_SetConfig+0x204>
 800a370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a374:	d811      	bhi.n	800a39a <UART_SetConfig+0x216>
 800a376:	2b00      	cmp	r3, #0
 800a378:	d003      	beq.n	800a382 <UART_SetConfig+0x1fe>
 800a37a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a37e:	d006      	beq.n	800a38e <UART_SetConfig+0x20a>
 800a380:	e00b      	b.n	800a39a <UART_SetConfig+0x216>
 800a382:	2300      	movs	r3, #0
 800a384:	77fb      	strb	r3, [r7, #31]
 800a386:	e0a1      	b.n	800a4cc <UART_SetConfig+0x348>
 800a388:	2302      	movs	r3, #2
 800a38a:	77fb      	strb	r3, [r7, #31]
 800a38c:	e09e      	b.n	800a4cc <UART_SetConfig+0x348>
 800a38e:	2304      	movs	r3, #4
 800a390:	77fb      	strb	r3, [r7, #31]
 800a392:	e09b      	b.n	800a4cc <UART_SetConfig+0x348>
 800a394:	2308      	movs	r3, #8
 800a396:	77fb      	strb	r3, [r7, #31]
 800a398:	e098      	b.n	800a4cc <UART_SetConfig+0x348>
 800a39a:	2310      	movs	r3, #16
 800a39c:	77fb      	strb	r3, [r7, #31]
 800a39e:	e095      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a2f      	ldr	r2, [pc, #188]	; (800a464 <UART_SetConfig+0x2e0>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d125      	bne.n	800a3f6 <UART_SetConfig+0x272>
 800a3aa:	4b29      	ldr	r3, [pc, #164]	; (800a450 <UART_SetConfig+0x2cc>)
 800a3ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a3b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3b8:	d017      	beq.n	800a3ea <UART_SetConfig+0x266>
 800a3ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a3be:	d817      	bhi.n	800a3f0 <UART_SetConfig+0x26c>
 800a3c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3c4:	d00b      	beq.n	800a3de <UART_SetConfig+0x25a>
 800a3c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a3ca:	d811      	bhi.n	800a3f0 <UART_SetConfig+0x26c>
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d003      	beq.n	800a3d8 <UART_SetConfig+0x254>
 800a3d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3d4:	d006      	beq.n	800a3e4 <UART_SetConfig+0x260>
 800a3d6:	e00b      	b.n	800a3f0 <UART_SetConfig+0x26c>
 800a3d8:	2301      	movs	r3, #1
 800a3da:	77fb      	strb	r3, [r7, #31]
 800a3dc:	e076      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3de:	2302      	movs	r3, #2
 800a3e0:	77fb      	strb	r3, [r7, #31]
 800a3e2:	e073      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3e4:	2304      	movs	r3, #4
 800a3e6:	77fb      	strb	r3, [r7, #31]
 800a3e8:	e070      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3ea:	2308      	movs	r3, #8
 800a3ec:	77fb      	strb	r3, [r7, #31]
 800a3ee:	e06d      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3f0:	2310      	movs	r3, #16
 800a3f2:	77fb      	strb	r3, [r7, #31]
 800a3f4:	e06a      	b.n	800a4cc <UART_SetConfig+0x348>
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	4a1b      	ldr	r2, [pc, #108]	; (800a468 <UART_SetConfig+0x2e4>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d138      	bne.n	800a472 <UART_SetConfig+0x2ee>
 800a400:	4b13      	ldr	r3, [pc, #76]	; (800a450 <UART_SetConfig+0x2cc>)
 800a402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a406:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a40a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a40e:	d017      	beq.n	800a440 <UART_SetConfig+0x2bc>
 800a410:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a414:	d82a      	bhi.n	800a46c <UART_SetConfig+0x2e8>
 800a416:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a41a:	d00b      	beq.n	800a434 <UART_SetConfig+0x2b0>
 800a41c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a420:	d824      	bhi.n	800a46c <UART_SetConfig+0x2e8>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d003      	beq.n	800a42e <UART_SetConfig+0x2aa>
 800a426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a42a:	d006      	beq.n	800a43a <UART_SetConfig+0x2b6>
 800a42c:	e01e      	b.n	800a46c <UART_SetConfig+0x2e8>
 800a42e:	2300      	movs	r3, #0
 800a430:	77fb      	strb	r3, [r7, #31]
 800a432:	e04b      	b.n	800a4cc <UART_SetConfig+0x348>
 800a434:	2302      	movs	r3, #2
 800a436:	77fb      	strb	r3, [r7, #31]
 800a438:	e048      	b.n	800a4cc <UART_SetConfig+0x348>
 800a43a:	2304      	movs	r3, #4
 800a43c:	77fb      	strb	r3, [r7, #31]
 800a43e:	e045      	b.n	800a4cc <UART_SetConfig+0x348>
 800a440:	2308      	movs	r3, #8
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e042      	b.n	800a4cc <UART_SetConfig+0x348>
 800a446:	bf00      	nop
 800a448:	efff69f3 	.word	0xefff69f3
 800a44c:	40011000 	.word	0x40011000
 800a450:	40023800 	.word	0x40023800
 800a454:	40004400 	.word	0x40004400
 800a458:	40004800 	.word	0x40004800
 800a45c:	40004c00 	.word	0x40004c00
 800a460:	40005000 	.word	0x40005000
 800a464:	40011400 	.word	0x40011400
 800a468:	40007800 	.word	0x40007800
 800a46c:	2310      	movs	r3, #16
 800a46e:	77fb      	strb	r3, [r7, #31]
 800a470:	e02c      	b.n	800a4cc <UART_SetConfig+0x348>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a72      	ldr	r2, [pc, #456]	; (800a640 <UART_SetConfig+0x4bc>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d125      	bne.n	800a4c8 <UART_SetConfig+0x344>
 800a47c:	4b71      	ldr	r3, [pc, #452]	; (800a644 <UART_SetConfig+0x4c0>)
 800a47e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a482:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a486:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a48a:	d017      	beq.n	800a4bc <UART_SetConfig+0x338>
 800a48c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a490:	d817      	bhi.n	800a4c2 <UART_SetConfig+0x33e>
 800a492:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a496:	d00b      	beq.n	800a4b0 <UART_SetConfig+0x32c>
 800a498:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a49c:	d811      	bhi.n	800a4c2 <UART_SetConfig+0x33e>
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d003      	beq.n	800a4aa <UART_SetConfig+0x326>
 800a4a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a4a6:	d006      	beq.n	800a4b6 <UART_SetConfig+0x332>
 800a4a8:	e00b      	b.n	800a4c2 <UART_SetConfig+0x33e>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	77fb      	strb	r3, [r7, #31]
 800a4ae:	e00d      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4b0:	2302      	movs	r3, #2
 800a4b2:	77fb      	strb	r3, [r7, #31]
 800a4b4:	e00a      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4b6:	2304      	movs	r3, #4
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e007      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4bc:	2308      	movs	r3, #8
 800a4be:	77fb      	strb	r3, [r7, #31]
 800a4c0:	e004      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4c2:	2310      	movs	r3, #16
 800a4c4:	77fb      	strb	r3, [r7, #31]
 800a4c6:	e001      	b.n	800a4cc <UART_SetConfig+0x348>
 800a4c8:	2310      	movs	r3, #16
 800a4ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	69db      	ldr	r3, [r3, #28]
 800a4d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4d4:	d15b      	bne.n	800a58e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a4d6:	7ffb      	ldrb	r3, [r7, #31]
 800a4d8:	2b08      	cmp	r3, #8
 800a4da:	d828      	bhi.n	800a52e <UART_SetConfig+0x3aa>
 800a4dc:	a201      	add	r2, pc, #4	; (adr r2, 800a4e4 <UART_SetConfig+0x360>)
 800a4de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4e2:	bf00      	nop
 800a4e4:	0800a509 	.word	0x0800a509
 800a4e8:	0800a511 	.word	0x0800a511
 800a4ec:	0800a519 	.word	0x0800a519
 800a4f0:	0800a52f 	.word	0x0800a52f
 800a4f4:	0800a51f 	.word	0x0800a51f
 800a4f8:	0800a52f 	.word	0x0800a52f
 800a4fc:	0800a52f 	.word	0x0800a52f
 800a500:	0800a52f 	.word	0x0800a52f
 800a504:	0800a527 	.word	0x0800a527
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a508:	f7fd fbac 	bl	8007c64 <HAL_RCC_GetPCLK1Freq>
 800a50c:	61b8      	str	r0, [r7, #24]
        break;
 800a50e:	e013      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a510:	f7fd fbbc 	bl	8007c8c <HAL_RCC_GetPCLK2Freq>
 800a514:	61b8      	str	r0, [r7, #24]
        break;
 800a516:	e00f      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a518:	4b4b      	ldr	r3, [pc, #300]	; (800a648 <UART_SetConfig+0x4c4>)
 800a51a:	61bb      	str	r3, [r7, #24]
        break;
 800a51c:	e00c      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a51e:	f7fd fa91 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800a522:	61b8      	str	r0, [r7, #24]
        break;
 800a524:	e008      	b.n	800a538 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a526:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a52a:	61bb      	str	r3, [r7, #24]
        break;
 800a52c:	e004      	b.n	800a538 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a52e:	2300      	movs	r3, #0
 800a530:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a532:	2301      	movs	r3, #1
 800a534:	77bb      	strb	r3, [r7, #30]
        break;
 800a536:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d074      	beq.n	800a628 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	005a      	lsls	r2, r3, #1
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	085b      	lsrs	r3, r3, #1
 800a548:	441a      	add	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a552:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	2b0f      	cmp	r3, #15
 800a558:	d916      	bls.n	800a588 <UART_SetConfig+0x404>
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a560:	d212      	bcs.n	800a588 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	b29b      	uxth	r3, r3
 800a566:	f023 030f 	bic.w	r3, r3, #15
 800a56a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	085b      	lsrs	r3, r3, #1
 800a570:	b29b      	uxth	r3, r3
 800a572:	f003 0307 	and.w	r3, r3, #7
 800a576:	b29a      	uxth	r2, r3
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	4313      	orrs	r3, r2
 800a57c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	89fa      	ldrh	r2, [r7, #14]
 800a584:	60da      	str	r2, [r3, #12]
 800a586:	e04f      	b.n	800a628 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a588:	2301      	movs	r3, #1
 800a58a:	77bb      	strb	r3, [r7, #30]
 800a58c:	e04c      	b.n	800a628 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a58e:	7ffb      	ldrb	r3, [r7, #31]
 800a590:	2b08      	cmp	r3, #8
 800a592:	d828      	bhi.n	800a5e6 <UART_SetConfig+0x462>
 800a594:	a201      	add	r2, pc, #4	; (adr r2, 800a59c <UART_SetConfig+0x418>)
 800a596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59a:	bf00      	nop
 800a59c:	0800a5c1 	.word	0x0800a5c1
 800a5a0:	0800a5c9 	.word	0x0800a5c9
 800a5a4:	0800a5d1 	.word	0x0800a5d1
 800a5a8:	0800a5e7 	.word	0x0800a5e7
 800a5ac:	0800a5d7 	.word	0x0800a5d7
 800a5b0:	0800a5e7 	.word	0x0800a5e7
 800a5b4:	0800a5e7 	.word	0x0800a5e7
 800a5b8:	0800a5e7 	.word	0x0800a5e7
 800a5bc:	0800a5df 	.word	0x0800a5df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a5c0:	f7fd fb50 	bl	8007c64 <HAL_RCC_GetPCLK1Freq>
 800a5c4:	61b8      	str	r0, [r7, #24]
        break;
 800a5c6:	e013      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a5c8:	f7fd fb60 	bl	8007c8c <HAL_RCC_GetPCLK2Freq>
 800a5cc:	61b8      	str	r0, [r7, #24]
        break;
 800a5ce:	e00f      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5d0:	4b1d      	ldr	r3, [pc, #116]	; (800a648 <UART_SetConfig+0x4c4>)
 800a5d2:	61bb      	str	r3, [r7, #24]
        break;
 800a5d4:	e00c      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5d6:	f7fd fa35 	bl	8007a44 <HAL_RCC_GetSysClockFreq>
 800a5da:	61b8      	str	r0, [r7, #24]
        break;
 800a5dc:	e008      	b.n	800a5f0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5e2:	61bb      	str	r3, [r7, #24]
        break;
 800a5e4:	e004      	b.n	800a5f0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	77bb      	strb	r3, [r7, #30]
        break;
 800a5ee:	bf00      	nop
    }

    if (pclk != 0U)
 800a5f0:	69bb      	ldr	r3, [r7, #24]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d018      	beq.n	800a628 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	085a      	lsrs	r2, r3, #1
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	441a      	add	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	685b      	ldr	r3, [r3, #4]
 800a604:	fbb2 f3f3 	udiv	r3, r2, r3
 800a608:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	2b0f      	cmp	r3, #15
 800a60e:	d909      	bls.n	800a624 <UART_SetConfig+0x4a0>
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a616:	d205      	bcs.n	800a624 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	60da      	str	r2, [r3, #12]
 800a622:	e001      	b.n	800a628 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	2200      	movs	r2, #0
 800a632:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a634:	7fbb      	ldrb	r3, [r7, #30]
}
 800a636:	4618      	mov	r0, r3
 800a638:	3720      	adds	r7, #32
 800a63a:	46bd      	mov	sp, r7
 800a63c:	bd80      	pop	{r7, pc}
 800a63e:	bf00      	nop
 800a640:	40007c00 	.word	0x40007c00
 800a644:	40023800 	.word	0x40023800
 800a648:	00f42400 	.word	0x00f42400

0800a64c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a64c:	b480      	push	{r7}
 800a64e:	b083      	sub	sp, #12
 800a650:	af00      	add	r7, sp, #0
 800a652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a658:	f003 0301 	and.w	r3, r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d00a      	beq.n	800a676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	430a      	orrs	r2, r1
 800a674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	f003 0302 	and.w	r3, r3, #2
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00a      	beq.n	800a698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	430a      	orrs	r2, r1
 800a696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69c:	f003 0304 	and.w	r3, r3, #4
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d00a      	beq.n	800a6ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	430a      	orrs	r2, r1
 800a6b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6be:	f003 0308 	and.w	r3, r3, #8
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d00a      	beq.n	800a6dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	685b      	ldr	r3, [r3, #4]
 800a6cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	430a      	orrs	r2, r1
 800a6da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e0:	f003 0310 	and.w	r3, r3, #16
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d00a      	beq.n	800a6fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a702:	f003 0320 	and.w	r3, r3, #32
 800a706:	2b00      	cmp	r3, #0
 800a708:	d00a      	beq.n	800a720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	689b      	ldr	r3, [r3, #8]
 800a710:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	430a      	orrs	r2, r1
 800a71e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01a      	beq.n	800a762 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685b      	ldr	r3, [r3, #4]
 800a732:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	430a      	orrs	r2, r1
 800a740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a746:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a74a:	d10a      	bne.n	800a762 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	430a      	orrs	r2, r1
 800a760:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d00a      	beq.n	800a784 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	430a      	orrs	r2, r1
 800a782:	605a      	str	r2, [r3, #4]
  }
}
 800a784:	bf00      	nop
 800a786:	370c      	adds	r7, #12
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b086      	sub	sp, #24
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2200      	movs	r2, #0
 800a79c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a7a0:	f7fa fc40 	bl	8005024 <HAL_GetTick>
 800a7a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 0308 	and.w	r3, r3, #8
 800a7b0:	2b08      	cmp	r3, #8
 800a7b2:	d10e      	bne.n	800a7d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7c2:	6878      	ldr	r0, [r7, #4]
 800a7c4:	f000 f81b 	bl	800a7fe <UART_WaitOnFlagUntilTimeout>
 800a7c8:	4603      	mov	r3, r0
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d001      	beq.n	800a7d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7ce:	2303      	movs	r3, #3
 800a7d0:	e011      	b.n	800a7f6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	2220      	movs	r2, #32
 800a7d6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2220      	movs	r2, #32
 800a7dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a7f4:	2300      	movs	r3, #0
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3710      	adds	r7, #16
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}

0800a7fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7fe:	b580      	push	{r7, lr}
 800a800:	b09c      	sub	sp, #112	; 0x70
 800a802:	af00      	add	r7, sp, #0
 800a804:	60f8      	str	r0, [r7, #12]
 800a806:	60b9      	str	r1, [r7, #8]
 800a808:	603b      	str	r3, [r7, #0]
 800a80a:	4613      	mov	r3, r2
 800a80c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a80e:	e0a7      	b.n	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a812:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a816:	f000 80a3 	beq.w	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a81a:	f7fa fc03 	bl	8005024 <HAL_GetTick>
 800a81e:	4602      	mov	r2, r0
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	1ad3      	subs	r3, r2, r3
 800a824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a826:	429a      	cmp	r2, r3
 800a828:	d302      	bcc.n	800a830 <UART_WaitOnFlagUntilTimeout+0x32>
 800a82a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d13f      	bne.n	800a8b0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a838:	e853 3f00 	ldrex	r3, [r3]
 800a83c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a844:	667b      	str	r3, [r7, #100]	; 0x64
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	461a      	mov	r2, r3
 800a84c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a84e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a850:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a856:	e841 2300 	strex	r3, r2, [r1]
 800a85a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a85c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1e6      	bne.n	800a830 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	3308      	adds	r3, #8
 800a868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a86c:	e853 3f00 	ldrex	r3, [r3]
 800a870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a874:	f023 0301 	bic.w	r3, r3, #1
 800a878:	663b      	str	r3, [r7, #96]	; 0x60
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	3308      	adds	r3, #8
 800a880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a882:	64ba      	str	r2, [r7, #72]	; 0x48
 800a884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a88a:	e841 2300 	strex	r3, r2, [r1]
 800a88e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a892:	2b00      	cmp	r3, #0
 800a894:	d1e5      	bne.n	800a862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2220      	movs	r2, #32
 800a89a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2220      	movs	r2, #32
 800a8a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a8ac:	2303      	movs	r3, #3
 800a8ae:	e068      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f003 0304 	and.w	r3, r3, #4
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d050      	beq.n	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	69db      	ldr	r3, [r3, #28]
 800a8c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8cc:	d148      	bne.n	800a960 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8d6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e0:	e853 3f00 	ldrex	r3, [r3]
 800a8e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f6:	637b      	str	r3, [r7, #52]	; 0x34
 800a8f8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8fa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8fe:	e841 2300 	strex	r3, r2, [r1]
 800a902:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a906:	2b00      	cmp	r3, #0
 800a908:	d1e6      	bne.n	800a8d8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	3308      	adds	r3, #8
 800a910:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	613b      	str	r3, [r7, #16]
   return(result);
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f023 0301 	bic.w	r3, r3, #1
 800a920:	66bb      	str	r3, [r7, #104]	; 0x68
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	3308      	adds	r3, #8
 800a928:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a92a:	623a      	str	r2, [r7, #32]
 800a92c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	69f9      	ldr	r1, [r7, #28]
 800a930:	6a3a      	ldr	r2, [r7, #32]
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	61bb      	str	r3, [r7, #24]
   return(result);
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e5      	bne.n	800a90a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2220      	movs	r2, #32
 800a942:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	2220      	movs	r2, #32
 800a948:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	2220      	movs	r2, #32
 800a950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	2200      	movs	r2, #0
 800a958:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a95c:	2303      	movs	r3, #3
 800a95e:	e010      	b.n	800a982 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	69da      	ldr	r2, [r3, #28]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	4013      	ands	r3, r2
 800a96a:	68ba      	ldr	r2, [r7, #8]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	bf0c      	ite	eq
 800a970:	2301      	moveq	r3, #1
 800a972:	2300      	movne	r3, #0
 800a974:	b2db      	uxtb	r3, r3
 800a976:	461a      	mov	r2, r3
 800a978:	79fb      	ldrb	r3, [r7, #7]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	f43f af48 	beq.w	800a810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a980:	2300      	movs	r3, #0
}
 800a982:	4618      	mov	r0, r3
 800a984:	3770      	adds	r7, #112	; 0x70
 800a986:	46bd      	mov	sp, r7
 800a988:	bd80      	pop	{r7, pc}
	...

0800a98c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b087      	sub	sp, #28
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
 800a994:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	681a      	ldr	r2, [r3, #0]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9a0:	683a      	ldr	r2, [r7, #0]
 800a9a2:	6812      	ldr	r2, [r2, #0]
 800a9a4:	f023 0101 	bic.w	r1, r3, #1
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	689b      	ldr	r3, [r3, #8]
 800a9b2:	2b08      	cmp	r3, #8
 800a9b4:	d102      	bne.n	800a9bc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a9b6:	2340      	movs	r3, #64	; 0x40
 800a9b8:	617b      	str	r3, [r7, #20]
 800a9ba:	e001      	b.n	800a9c0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a9bc:	2300      	movs	r3, #0
 800a9be:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a9c4:	697b      	ldr	r3, [r7, #20]
 800a9c6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a9cc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a9d2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a9d8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a9de:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a9e0:	683b      	ldr	r3, [r7, #0]
 800a9e2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a9e4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a9ea:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a9f0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a9f6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a9fc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a9fe:	683b      	ldr	r3, [r7, #0]
 800aa00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800aa02:	4313      	orrs	r3, r2
 800aa04:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800aa06:	683b      	ldr	r3, [r7, #0]
 800aa08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	4313      	orrs	r3, r2
 800aa0e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	4313      	orrs	r3, r2
 800aa18:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa1e:	693a      	ldr	r2, [r7, #16]
 800aa20:	4313      	orrs	r3, r2
 800aa22:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800aa24:	4b20      	ldr	r3, [pc, #128]	; (800aaa8 <FMC_NORSRAM_Init+0x11c>)
 800aa26:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa2e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa36:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800aa3e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800aa40:	683b      	ldr	r3, [r7, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	43db      	mvns	r3, r3
 800aa4e:	ea02 0103 	and.w	r1, r2, r3
 800aa52:	683b      	ldr	r3, [r7, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	4319      	orrs	r1, r3
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800aa60:	683b      	ldr	r3, [r7, #0]
 800aa62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa68:	d10c      	bne.n	800aa84 <FMC_NORSRAM_Init+0xf8>
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d008      	beq.n	800aa84 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa7e:	431a      	orrs	r2, r3
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d006      	beq.n	800aa9a <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681a      	ldr	r2, [r3, #0]
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa94:	431a      	orrs	r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa9a:	2300      	movs	r3, #0
}
 800aa9c:	4618      	mov	r0, r3
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	0008fb7f 	.word	0x0008fb7f

0800aaac <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aaac:	b480      	push	{r7}
 800aaae:	b087      	sub	sp, #28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	1c5a      	adds	r2, r3, #1
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aac2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	681a      	ldr	r2, [r3, #0]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	011b      	lsls	r3, r3, #4
 800aad0:	431a      	orrs	r2, r3
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	021b      	lsls	r3, r3, #8
 800aad8:	431a      	orrs	r2, r3
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	041b      	lsls	r3, r3, #16
 800aae0:	431a      	orrs	r2, r3
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	691b      	ldr	r3, [r3, #16]
 800aae6:	3b01      	subs	r3, #1
 800aae8:	051b      	lsls	r3, r3, #20
 800aaea:	431a      	orrs	r2, r3
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	3b02      	subs	r3, #2
 800aaf2:	061b      	lsls	r3, r3, #24
 800aaf4:	431a      	orrs	r2, r3
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	699b      	ldr	r3, [r3, #24]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	687a      	ldr	r2, [r7, #4]
 800aafe:	3201      	adds	r2, #1
 800ab00:	4319      	orrs	r1, r3
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab14:	d113      	bne.n	800ab3e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	685b      	ldr	r3, [r3, #4]
 800ab1a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ab1e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	691b      	ldr	r3, [r3, #16]
 800ab24:	3b01      	subs	r3, #1
 800ab26:	051b      	lsls	r3, r3, #20
 800ab28:	697a      	ldr	r2, [r7, #20]
 800ab2a:	4313      	orrs	r3, r2
 800ab2c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	685b      	ldr	r3, [r3, #4]
 800ab32:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab36:	697b      	ldr	r3, [r7, #20]
 800ab38:	431a      	orrs	r2, r3
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	371c      	adds	r7, #28
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b085      	sub	sp, #20
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	607a      	str	r2, [r7, #4]
 800ab58:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab60:	d11d      	bne.n	800ab9e <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	687a      	ldr	r2, [r7, #4]
 800ab66:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab6a:	4b13      	ldr	r3, [pc, #76]	; (800abb8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ab6c:	4013      	ands	r3, r2
 800ab6e:	68ba      	ldr	r2, [r7, #8]
 800ab70:	6811      	ldr	r1, [r2, #0]
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	6852      	ldr	r2, [r2, #4]
 800ab76:	0112      	lsls	r2, r2, #4
 800ab78:	4311      	orrs	r1, r2
 800ab7a:	68ba      	ldr	r2, [r7, #8]
 800ab7c:	6892      	ldr	r2, [r2, #8]
 800ab7e:	0212      	lsls	r2, r2, #8
 800ab80:	4311      	orrs	r1, r2
 800ab82:	68ba      	ldr	r2, [r7, #8]
 800ab84:	6992      	ldr	r2, [r2, #24]
 800ab86:	4311      	orrs	r1, r2
 800ab88:	68ba      	ldr	r2, [r7, #8]
 800ab8a:	68d2      	ldr	r2, [r2, #12]
 800ab8c:	0412      	lsls	r2, r2, #16
 800ab8e:	430a      	orrs	r2, r1
 800ab90:	ea43 0102 	orr.w	r1, r3, r2
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab9c:	e005      	b.n	800abaa <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800aba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	cff00000 	.word	0xcff00000

0800abbc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800abbc:	b084      	sub	sp, #16
 800abbe:	b480      	push	{r7}
 800abc0:	b085      	sub	sp, #20
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	f107 001c 	add.w	r0, r7, #28
 800abca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800abd2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800abd4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800abd6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800abd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800abda:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800abdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800abde:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800abe2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800abe6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800abe8:	68fa      	ldr	r2, [r7, #12]
 800abea:	4313      	orrs	r3, r2
 800abec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	685a      	ldr	r2, [r3, #4]
 800abf2:	4b07      	ldr	r3, [pc, #28]	; (800ac10 <SDMMC_Init+0x54>)
 800abf4:	4013      	ands	r3, r2
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	431a      	orrs	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800abfe:	2300      	movs	r3, #0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac0a:	b004      	add	sp, #16
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	ffff8100 	.word	0xffff8100

0800ac14 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b083      	sub	sp, #12
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ac22:	4618      	mov	r0, r3
 800ac24:	370c      	adds	r7, #12
 800ac26:	46bd      	mov	sp, r7
 800ac28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac2c:	4770      	bx	lr

0800ac2e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ac2e:	b480      	push	{r7}
 800ac30:	b083      	sub	sp, #12
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
 800ac36:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr

0800ac50 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ac50:	b480      	push	{r7}
 800ac52:	b083      	sub	sp, #12
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	2203      	movs	r2, #3
 800ac5c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	370c      	adds	r7, #12
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ac6c:	b480      	push	{r7}
 800ac6e:	b083      	sub	sp, #12
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f003 0303 	and.w	r3, r3, #3
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	370c      	adds	r7, #12
 800ac80:	46bd      	mov	sp, r7
 800ac82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac86:	4770      	bx	lr

0800ac88 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac92:	2300      	movs	r3, #0
 800ac94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aca6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800acac:	431a      	orrs	r2, r3
                       Command->CPSM);
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800acb2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800acb4:	68fa      	ldr	r2, [r7, #12]
 800acb6:	4313      	orrs	r3, r2
 800acb8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	68da      	ldr	r2, [r3, #12]
 800acbe:	4b06      	ldr	r3, [pc, #24]	; (800acd8 <SDMMC_SendCommand+0x50>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	68fa      	ldr	r2, [r7, #12]
 800acc4:	431a      	orrs	r2, r3
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800acca:	2300      	movs	r3, #0
}
 800accc:	4618      	mov	r0, r3
 800acce:	3714      	adds	r7, #20
 800acd0:	46bd      	mov	sp, r7
 800acd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd6:	4770      	bx	lr
 800acd8:	fffff000 	.word	0xfffff000

0800acdc <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800acdc:	b480      	push	{r7}
 800acde:	b083      	sub	sp, #12
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	691b      	ldr	r3, [r3, #16]
 800ace8:	b2db      	uxtb	r3, r3
}
 800acea:	4618      	mov	r0, r3
 800acec:	370c      	adds	r7, #12
 800acee:	46bd      	mov	sp, r7
 800acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf4:	4770      	bx	lr

0800acf6 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800acf6:	b480      	push	{r7}
 800acf8:	b085      	sub	sp, #20
 800acfa:	af00      	add	r7, sp, #0
 800acfc:	6078      	str	r0, [r7, #4]
 800acfe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	3314      	adds	r3, #20
 800ad04:	461a      	mov	r2, r3
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	4413      	add	r3, r2
 800ad0a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	681b      	ldr	r3, [r3, #0]
}  
 800ad10:	4618      	mov	r0, r3
 800ad12:	3714      	adds	r7, #20
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b085      	sub	sp, #20
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ad26:	2300      	movs	r3, #0
 800ad28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	681a      	ldr	r2, [r3, #0]
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad42:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ad48:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ad4e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	4313      	orrs	r3, r2
 800ad54:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad5a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	431a      	orrs	r2, r3
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0

}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ad74:	b580      	push	{r7, lr}
 800ad76:	b088      	sub	sp, #32
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	6078      	str	r0, [r7, #4]
 800ad7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad82:	2310      	movs	r3, #16
 800ad84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad86:	2340      	movs	r3, #64	; 0x40
 800ad88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad94:	f107 0308 	add.w	r3, r7, #8
 800ad98:	4619      	mov	r1, r3
 800ad9a:	6878      	ldr	r0, [r7, #4]
 800ad9c:	f7ff ff74 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ada0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ada4:	2110      	movs	r1, #16
 800ada6:	6878      	ldr	r0, [r7, #4]
 800ada8:	f000 f9d6 	bl	800b158 <SDMMC_GetCmdResp1>
 800adac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adae:	69fb      	ldr	r3, [r7, #28]
}
 800adb0:	4618      	mov	r0, r3
 800adb2:	3720      	adds	r7, #32
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bd80      	pop	{r7, pc}

0800adb8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b088      	sub	sp, #32
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]
 800adc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800adc2:	683b      	ldr	r3, [r7, #0]
 800adc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800adc6:	2311      	movs	r3, #17
 800adc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adca:	2340      	movs	r3, #64	; 0x40
 800adcc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adce:	2300      	movs	r3, #0
 800add0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800add2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800add6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800add8:	f107 0308 	add.w	r3, r7, #8
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f7ff ff52 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ade4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ade8:	2111      	movs	r1, #17
 800adea:	6878      	ldr	r0, [r7, #4]
 800adec:	f000 f9b4 	bl	800b158 <SDMMC_GetCmdResp1>
 800adf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adf2:	69fb      	ldr	r3, [r7, #28]
}
 800adf4:	4618      	mov	r0, r3
 800adf6:	3720      	adds	r7, #32
 800adf8:	46bd      	mov	sp, r7
 800adfa:	bd80      	pop	{r7, pc}

0800adfc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800adfc:	b580      	push	{r7, lr}
 800adfe:	b088      	sub	sp, #32
 800ae00:	af00      	add	r7, sp, #0
 800ae02:	6078      	str	r0, [r7, #4]
 800ae04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ae0a:	2312      	movs	r3, #18
 800ae0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae0e:	2340      	movs	r3, #64	; 0x40
 800ae10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae12:	2300      	movs	r3, #0
 800ae14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae1c:	f107 0308 	add.w	r3, r7, #8
 800ae20:	4619      	mov	r1, r3
 800ae22:	6878      	ldr	r0, [r7, #4]
 800ae24:	f7ff ff30 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae28:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae2c:	2112      	movs	r1, #18
 800ae2e:	6878      	ldr	r0, [r7, #4]
 800ae30:	f000 f992 	bl	800b158 <SDMMC_GetCmdResp1>
 800ae34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae36:	69fb      	ldr	r3, [r7, #28]
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	3720      	adds	r7, #32
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ae4e:	2318      	movs	r3, #24
 800ae50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae52:	2340      	movs	r3, #64	; 0x40
 800ae54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae56:	2300      	movs	r3, #0
 800ae58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae60:	f107 0308 	add.w	r3, r7, #8
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7ff ff0e 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ae6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae70:	2118      	movs	r1, #24
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f970 	bl	800b158 <SDMMC_GetCmdResp1>
 800ae78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
}
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	3720      	adds	r7, #32
 800ae80:	46bd      	mov	sp, r7
 800ae82:	bd80      	pop	{r7, pc}

0800ae84 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae84:	b580      	push	{r7, lr}
 800ae86:	b088      	sub	sp, #32
 800ae88:	af00      	add	r7, sp, #0
 800ae8a:	6078      	str	r0, [r7, #4]
 800ae8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae92:	2319      	movs	r3, #25
 800ae94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae96:	2340      	movs	r3, #64	; 0x40
 800ae98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae9a:	2300      	movs	r3, #0
 800ae9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aea2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aea4:	f107 0308 	add.w	r3, r7, #8
 800aea8:	4619      	mov	r1, r3
 800aeaa:	6878      	ldr	r0, [r7, #4]
 800aeac:	f7ff feec 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aeb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeb4:	2119      	movs	r1, #25
 800aeb6:	6878      	ldr	r0, [r7, #4]
 800aeb8:	f000 f94e 	bl	800b158 <SDMMC_GetCmdResp1>
 800aebc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aebe:	69fb      	ldr	r3, [r7, #28]
}
 800aec0:	4618      	mov	r0, r3
 800aec2:	3720      	adds	r7, #32
 800aec4:	46bd      	mov	sp, r7
 800aec6:	bd80      	pop	{r7, pc}

0800aec8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b088      	sub	sp, #32
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aed0:	2300      	movs	r3, #0
 800aed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aed4:	230c      	movs	r3, #12
 800aed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aed8:	2340      	movs	r3, #64	; 0x40
 800aeda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aedc:	2300      	movs	r3, #0
 800aede:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aee0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aee4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aee6:	f107 0308 	add.w	r3, r7, #8
 800aeea:	4619      	mov	r1, r3
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	f7ff fecb 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800aef2:	4a05      	ldr	r2, [pc, #20]	; (800af08 <SDMMC_CmdStopTransfer+0x40>)
 800aef4:	210c      	movs	r1, #12
 800aef6:	6878      	ldr	r0, [r7, #4]
 800aef8:	f000 f92e 	bl	800b158 <SDMMC_GetCmdResp1>
 800aefc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aefe:	69fb      	ldr	r3, [r7, #28]
}
 800af00:	4618      	mov	r0, r3
 800af02:	3720      	adds	r7, #32
 800af04:	46bd      	mov	sp, r7
 800af06:	bd80      	pop	{r7, pc}
 800af08:	05f5e100 	.word	0x05f5e100

0800af0c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b08a      	sub	sp, #40	; 0x28
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800af1c:	2307      	movs	r3, #7
 800af1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af20:	2340      	movs	r3, #64	; 0x40
 800af22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af24:	2300      	movs	r3, #0
 800af26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af2c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af2e:	f107 0310 	add.w	r3, r7, #16
 800af32:	4619      	mov	r1, r3
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f7ff fea7 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800af3a:	f241 3288 	movw	r2, #5000	; 0x1388
 800af3e:	2107      	movs	r1, #7
 800af40:	68f8      	ldr	r0, [r7, #12]
 800af42:	f000 f909 	bl	800b158 <SDMMC_GetCmdResp1>
 800af46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800af48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3728      	adds	r7, #40	; 0x28
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b088      	sub	sp, #32
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800af5a:	2300      	movs	r3, #0
 800af5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800af62:	2300      	movs	r3, #0
 800af64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af66:	2300      	movs	r3, #0
 800af68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af70:	f107 0308 	add.w	r3, r7, #8
 800af74:	4619      	mov	r1, r3
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f7ff fe86 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 fb23 	bl	800b5c8 <SDMMC_GetCmdError>
 800af82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af84:	69fb      	ldr	r3, [r7, #28]
}
 800af86:	4618      	mov	r0, r3
 800af88:	3720      	adds	r7, #32
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}

0800af8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af8e:	b580      	push	{r7, lr}
 800af90:	b088      	sub	sp, #32
 800af92:	af00      	add	r7, sp, #0
 800af94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af9c:	2308      	movs	r3, #8
 800af9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afa0:	2340      	movs	r3, #64	; 0x40
 800afa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afa4:	2300      	movs	r3, #0
 800afa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afac:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afae:	f107 0308 	add.w	r3, r7, #8
 800afb2:	4619      	mov	r1, r3
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f7ff fe67 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fab6 	bl	800b52c <SDMMC_GetCmdResp7>
 800afc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afc2:	69fb      	ldr	r3, [r7, #28]
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3720      	adds	r7, #32
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b088      	sub	sp, #32
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
 800afd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800afda:	2337      	movs	r3, #55	; 0x37
 800afdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afde:	2340      	movs	r3, #64	; 0x40
 800afe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	4619      	mov	r1, r3
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	f7ff fe48 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800affc:	2137      	movs	r1, #55	; 0x37
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 f8aa 	bl	800b158 <SDMMC_GetCmdResp1>
 800b004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b006:	69fb      	ldr	r3, [r7, #28]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3720      	adds	r7, #32
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}

0800b010 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b088      	sub	sp, #32
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
 800b018:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800b01a:	683a      	ldr	r2, [r7, #0]
 800b01c:	4b0d      	ldr	r3, [pc, #52]	; (800b054 <SDMMC_CmdAppOperCommand+0x44>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b022:	2329      	movs	r3, #41	; 0x29
 800b024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b026:	2340      	movs	r3, #64	; 0x40
 800b028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b02a:	2300      	movs	r3, #0
 800b02c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b02e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b032:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b034:	f107 0308 	add.w	r3, r7, #8
 800b038:	4619      	mov	r1, r3
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f7ff fe24 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f000 f9bf 	bl	800b3c4 <SDMMC_GetCmdResp3>
 800b046:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b048:	69fb      	ldr	r3, [r7, #28]
}
 800b04a:	4618      	mov	r0, r3
 800b04c:	3720      	adds	r7, #32
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}
 800b052:	bf00      	nop
 800b054:	80100000 	.word	0x80100000

0800b058 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b088      	sub	sp, #32
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b060:	2300      	movs	r3, #0
 800b062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b064:	2302      	movs	r3, #2
 800b066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b068:	23c0      	movs	r3, #192	; 0xc0
 800b06a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b06c:	2300      	movs	r3, #0
 800b06e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b074:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b076:	f107 0308 	add.w	r3, r7, #8
 800b07a:	4619      	mov	r1, r3
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f7ff fe03 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f956 	bl	800b334 <SDMMC_GetCmdResp2>
 800b088:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b08a:	69fb      	ldr	r3, [r7, #28]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	3720      	adds	r7, #32
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b088      	sub	sp, #32
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b0a2:	2309      	movs	r3, #9
 800b0a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b0a6:	23c0      	movs	r3, #192	; 0xc0
 800b0a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0b4:	f107 0308 	add.w	r3, r7, #8
 800b0b8:	4619      	mov	r1, r3
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f7ff fde4 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f937 	bl	800b334 <SDMMC_GetCmdResp2>
 800b0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3720      	adds	r7, #32
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b088      	sub	sp, #32
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0e4:	2340      	movs	r3, #64	; 0x40
 800b0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0f2:	f107 0308 	add.w	r3, r7, #8
 800b0f6:	4619      	mov	r1, r3
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f7ff fdc5 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0fe:	683a      	ldr	r2, [r7, #0]
 800b100:	2103      	movs	r1, #3
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 f99c 	bl	800b440 <SDMMC_GetCmdResp6>
 800b108:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b10a:	69fb      	ldr	r3, [r7, #28]
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3720      	adds	r7, #32
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b088      	sub	sp, #32
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b122:	230d      	movs	r3, #13
 800b124:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b126:	2340      	movs	r3, #64	; 0x40
 800b128:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b12a:	2300      	movs	r3, #0
 800b12c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b12e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b132:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b134:	f107 0308 	add.w	r3, r7, #8
 800b138:	4619      	mov	r1, r3
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	f7ff fda4 	bl	800ac88 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b140:	f241 3288 	movw	r2, #5000	; 0x1388
 800b144:	210d      	movs	r1, #13
 800b146:	6878      	ldr	r0, [r7, #4]
 800b148:	f000 f806 	bl	800b158 <SDMMC_GetCmdResp1>
 800b14c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b14e:	69fb      	ldr	r3, [r7, #28]
}
 800b150:	4618      	mov	r0, r3
 800b152:	3720      	adds	r7, #32
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b088      	sub	sp, #32
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	460b      	mov	r3, r1
 800b162:	607a      	str	r2, [r7, #4]
 800b164:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b166:	4b70      	ldr	r3, [pc, #448]	; (800b328 <SDMMC_GetCmdResp1+0x1d0>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4a70      	ldr	r2, [pc, #448]	; (800b32c <SDMMC_GetCmdResp1+0x1d4>)
 800b16c:	fba2 2303 	umull	r2, r3, r2, r3
 800b170:	0a5a      	lsrs	r2, r3, #9
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	fb02 f303 	mul.w	r3, r2, r3
 800b178:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	1e5a      	subs	r2, r3, #1
 800b17e:	61fa      	str	r2, [r7, #28]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d102      	bne.n	800b18a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b184:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b188:	e0c9      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b18e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b196:	2b00      	cmp	r3, #0
 800b198:	d0ef      	beq.n	800b17a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b19a:	69bb      	ldr	r3, [r7, #24]
 800b19c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d1ea      	bne.n	800b17a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a8:	f003 0304 	and.w	r3, r3, #4
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d004      	beq.n	800b1ba <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2204      	movs	r2, #4
 800b1b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1b6:	2304      	movs	r3, #4
 800b1b8:	e0b1      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1be:	f003 0301 	and.w	r3, r3, #1
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d004      	beq.n	800b1d0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	2201      	movs	r2, #1
 800b1ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e0a6      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	22c5      	movs	r2, #197	; 0xc5
 800b1d4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff fd80 	bl	800acdc <SDMMC_GetCommandResponse>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d001      	beq.n	800b1ea <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e099      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1ea:	2100      	movs	r1, #0
 800b1ec:	68f8      	ldr	r0, [r7, #12]
 800b1ee:	f7ff fd82 	bl	800acf6 <SDMMC_GetResponse>
 800b1f2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	4b4e      	ldr	r3, [pc, #312]	; (800b330 <SDMMC_GetCmdResp1+0x1d8>)
 800b1f8:	4013      	ands	r3, r2
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b1fe:	2300      	movs	r3, #0
 800b200:	e08d      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	2b00      	cmp	r3, #0
 800b206:	da02      	bge.n	800b20e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b208:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b20c:	e087      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d001      	beq.n	800b21c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b218:	2340      	movs	r3, #64	; 0x40
 800b21a:	e080      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b21c:	697b      	ldr	r3, [r7, #20]
 800b21e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b226:	2380      	movs	r3, #128	; 0x80
 800b228:	e079      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b22a:	697b      	ldr	r3, [r7, #20]
 800b22c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b230:	2b00      	cmp	r3, #0
 800b232:	d002      	beq.n	800b23a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b234:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b238:	e071      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b244:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b248:	e069      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b24a:	697b      	ldr	r3, [r7, #20]
 800b24c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d002      	beq.n	800b25a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b254:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b258:	e061      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b260:	2b00      	cmp	r3, #0
 800b262:	d002      	beq.n	800b26a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b264:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b268:	e059      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b26a:	697b      	ldr	r3, [r7, #20]
 800b26c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b274:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b278:	e051      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b280:	2b00      	cmp	r3, #0
 800b282:	d002      	beq.n	800b28a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b288:	e049      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b294:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b298:	e041      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2a8:	e039      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d002      	beq.n	800b2ba <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2b8:	e031      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b2c8:	e029      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2d4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2d8:	e021      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b2e4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b2e8:	e019      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2ea:	697b      	ldr	r3, [r7, #20]
 800b2ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d002      	beq.n	800b2fa <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b2f8:	e011      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2fa:	697b      	ldr	r3, [r7, #20]
 800b2fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b300:	2b00      	cmp	r3, #0
 800b302:	d002      	beq.n	800b30a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b304:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b308:	e009      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	f003 0308 	and.w	r3, r3, #8
 800b310:	2b00      	cmp	r3, #0
 800b312:	d002      	beq.n	800b31a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b314:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b318:	e001      	b.n	800b31e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b31a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b31e:	4618      	mov	r0, r3
 800b320:	3720      	adds	r7, #32
 800b322:	46bd      	mov	sp, r7
 800b324:	bd80      	pop	{r7, pc}
 800b326:	bf00      	nop
 800b328:	200000ac 	.word	0x200000ac
 800b32c:	10624dd3 	.word	0x10624dd3
 800b330:	fdffe008 	.word	0xfdffe008

0800b334 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b334:	b480      	push	{r7}
 800b336:	b085      	sub	sp, #20
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b33c:	4b1f      	ldr	r3, [pc, #124]	; (800b3bc <SDMMC_GetCmdResp2+0x88>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a1f      	ldr	r2, [pc, #124]	; (800b3c0 <SDMMC_GetCmdResp2+0x8c>)
 800b342:	fba2 2303 	umull	r2, r3, r2, r3
 800b346:	0a5b      	lsrs	r3, r3, #9
 800b348:	f241 3288 	movw	r2, #5000	; 0x1388
 800b34c:	fb02 f303 	mul.w	r3, r2, r3
 800b350:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	1e5a      	subs	r2, r3, #1
 800b356:	60fa      	str	r2, [r7, #12]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d102      	bne.n	800b362 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b35c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b360:	e026      	b.n	800b3b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b366:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d0ef      	beq.n	800b352 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d1ea      	bne.n	800b352 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b380:	f003 0304 	and.w	r3, r3, #4
 800b384:	2b00      	cmp	r3, #0
 800b386:	d004      	beq.n	800b392 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2204      	movs	r2, #4
 800b38c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b38e:	2304      	movs	r3, #4
 800b390:	e00e      	b.n	800b3b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d004      	beq.n	800b3a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3a4:	2301      	movs	r3, #1
 800b3a6:	e003      	b.n	800b3b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	22c5      	movs	r2, #197	; 0xc5
 800b3ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3714      	adds	r7, #20
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	200000ac 	.word	0x200000ac
 800b3c0:	10624dd3 	.word	0x10624dd3

0800b3c4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <SDMMC_GetCmdResp3+0x74>)
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a1a      	ldr	r2, [pc, #104]	; (800b43c <SDMMC_GetCmdResp3+0x78>)
 800b3d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b3d6:	0a5b      	lsrs	r3, r3, #9
 800b3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3dc:	fb02 f303 	mul.w	r3, r2, r3
 800b3e0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	1e5a      	subs	r2, r3, #1
 800b3e6:	60fa      	str	r2, [r7, #12]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d102      	bne.n	800b3f2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3f0:	e01b      	b.n	800b42a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0ef      	beq.n	800b3e2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d1ea      	bne.n	800b3e2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b410:	f003 0304 	and.w	r3, r3, #4
 800b414:	2b00      	cmp	r3, #0
 800b416:	d004      	beq.n	800b422 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2204      	movs	r2, #4
 800b41c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b41e:	2304      	movs	r3, #4
 800b420:	e003      	b.n	800b42a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	22c5      	movs	r2, #197	; 0xc5
 800b426:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b428:	2300      	movs	r3, #0
}
 800b42a:	4618      	mov	r0, r3
 800b42c:	3714      	adds	r7, #20
 800b42e:	46bd      	mov	sp, r7
 800b430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b434:	4770      	bx	lr
 800b436:	bf00      	nop
 800b438:	200000ac 	.word	0x200000ac
 800b43c:	10624dd3 	.word	0x10624dd3

0800b440 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b088      	sub	sp, #32
 800b444:	af00      	add	r7, sp, #0
 800b446:	60f8      	str	r0, [r7, #12]
 800b448:	460b      	mov	r3, r1
 800b44a:	607a      	str	r2, [r7, #4]
 800b44c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b44e:	4b35      	ldr	r3, [pc, #212]	; (800b524 <SDMMC_GetCmdResp6+0xe4>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a35      	ldr	r2, [pc, #212]	; (800b528 <SDMMC_GetCmdResp6+0xe8>)
 800b454:	fba2 2303 	umull	r2, r3, r2, r3
 800b458:	0a5b      	lsrs	r3, r3, #9
 800b45a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b45e:	fb02 f303 	mul.w	r3, r2, r3
 800b462:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	1e5a      	subs	r2, r3, #1
 800b468:	61fa      	str	r2, [r7, #28]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d102      	bne.n	800b474 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b46e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b472:	e052      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b478:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b480:	2b00      	cmp	r3, #0
 800b482:	d0ef      	beq.n	800b464 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1ea      	bne.n	800b464 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b492:	f003 0304 	and.w	r3, r3, #4
 800b496:	2b00      	cmp	r3, #0
 800b498:	d004      	beq.n	800b4a4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	2204      	movs	r2, #4
 800b49e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4a0:	2304      	movs	r3, #4
 800b4a2:	e03a      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4a8:	f003 0301 	and.w	r3, r3, #1
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	e02f      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b4ba:	68f8      	ldr	r0, [r7, #12]
 800b4bc:	f7ff fc0e 	bl	800acdc <SDMMC_GetCommandResponse>
 800b4c0:	4603      	mov	r3, r0
 800b4c2:	461a      	mov	r2, r3
 800b4c4:	7afb      	ldrb	r3, [r7, #11]
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d001      	beq.n	800b4ce <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e025      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	22c5      	movs	r2, #197	; 0xc5
 800b4d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4d4:	2100      	movs	r1, #0
 800b4d6:	68f8      	ldr	r0, [r7, #12]
 800b4d8:	f7ff fc0d 	bl	800acf6 <SDMMC_GetResponse>
 800b4dc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d106      	bne.n	800b4f6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b4e8:	697b      	ldr	r3, [r7, #20]
 800b4ea:	0c1b      	lsrs	r3, r3, #16
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	e011      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d002      	beq.n	800b506 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b500:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b504:	e009      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d002      	beq.n	800b516 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b514:	e001      	b.n	800b51a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b516:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3720      	adds	r7, #32
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	200000ac 	.word	0x200000ac
 800b528:	10624dd3 	.word	0x10624dd3

0800b52c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b085      	sub	sp, #20
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b534:	4b22      	ldr	r3, [pc, #136]	; (800b5c0 <SDMMC_GetCmdResp7+0x94>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a22      	ldr	r2, [pc, #136]	; (800b5c4 <SDMMC_GetCmdResp7+0x98>)
 800b53a:	fba2 2303 	umull	r2, r3, r2, r3
 800b53e:	0a5b      	lsrs	r3, r3, #9
 800b540:	f241 3288 	movw	r2, #5000	; 0x1388
 800b544:	fb02 f303 	mul.w	r3, r2, r3
 800b548:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	1e5a      	subs	r2, r3, #1
 800b54e:	60fa      	str	r2, [r7, #12]
 800b550:	2b00      	cmp	r3, #0
 800b552:	d102      	bne.n	800b55a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b554:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b558:	e02c      	b.n	800b5b4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b560:	68bb      	ldr	r3, [r7, #8]
 800b562:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b566:	2b00      	cmp	r3, #0
 800b568:	d0ef      	beq.n	800b54a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1ea      	bne.n	800b54a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b578:	f003 0304 	and.w	r3, r3, #4
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d004      	beq.n	800b58a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2204      	movs	r2, #4
 800b584:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b586:	2304      	movs	r3, #4
 800b588:	e014      	b.n	800b5b4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b58e:	f003 0301 	and.w	r3, r3, #1
 800b592:	2b00      	cmp	r3, #0
 800b594:	d004      	beq.n	800b5a0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2201      	movs	r2, #1
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e009      	b.n	800b5b4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d002      	beq.n	800b5b2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	2240      	movs	r2, #64	; 0x40
 800b5b0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b5b2:	2300      	movs	r3, #0
  
}
 800b5b4:	4618      	mov	r0, r3
 800b5b6:	3714      	adds	r7, #20
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	200000ac 	.word	0x200000ac
 800b5c4:	10624dd3 	.word	0x10624dd3

0800b5c8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b085      	sub	sp, #20
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5d0:	4b11      	ldr	r3, [pc, #68]	; (800b618 <SDMMC_GetCmdError+0x50>)
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	4a11      	ldr	r2, [pc, #68]	; (800b61c <SDMMC_GetCmdError+0x54>)
 800b5d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b5da:	0a5b      	lsrs	r3, r3, #9
 800b5dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5e0:	fb02 f303 	mul.w	r3, r2, r3
 800b5e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	1e5a      	subs	r2, r3, #1
 800b5ea:	60fa      	str	r2, [r7, #12]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d102      	bne.n	800b5f6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5f4:	e009      	b.n	800b60a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d0f1      	beq.n	800b5e6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	22c5      	movs	r2, #197	; 0xc5
 800b606:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	3714      	adds	r7, #20
 800b60e:	46bd      	mov	sp, r7
 800b610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	200000ac 	.word	0x200000ac
 800b61c:	10624dd3 	.word	0x10624dd3

0800b620 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b624:	4904      	ldr	r1, [pc, #16]	; (800b638 <MX_FATFS_Init+0x18>)
 800b626:	4805      	ldr	r0, [pc, #20]	; (800b63c <MX_FATFS_Init+0x1c>)
 800b628:	f003 f8c2 	bl	800e7b0 <FATFS_LinkDriver>
 800b62c:	4603      	mov	r3, r0
 800b62e:	461a      	mov	r2, r3
 800b630:	4b03      	ldr	r3, [pc, #12]	; (800b640 <MX_FATFS_Init+0x20>)
 800b632:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b634:	bf00      	nop
 800b636:	bd80      	pop	{r7, pc}
 800b638:	2000283c 	.word	0x2000283c
 800b63c:	0801e954 	.word	0x0801e954
 800b640:	20002838 	.word	0x20002838

0800b644 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800b644:	b480      	push	{r7}
 800b646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800b648:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b65a:	2300      	movs	r3, #0
 800b65c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b65e:	f000 f888 	bl	800b772 <BSP_SD_IsDetected>
 800b662:	4603      	mov	r3, r0
 800b664:	2b01      	cmp	r3, #1
 800b666:	d001      	beq.n	800b66c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800b668:	2302      	movs	r3, #2
 800b66a:	e005      	b.n	800b678 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800b66c:	4804      	ldr	r0, [pc, #16]	; (800b680 <BSP_SD_Init+0x2c>)
 800b66e:	f7fc ff11 	bl	8008494 <HAL_SD_Init>
 800b672:	4603      	mov	r3, r0
 800b674:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800b676:	79fb      	ldrb	r3, [r7, #7]
}
 800b678:	4618      	mov	r0, r3
 800b67a:	3708      	adds	r7, #8
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}
 800b680:	200023dc 	.word	0x200023dc

0800b684 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b684:	b580      	push	{r7, lr}
 800b686:	b086      	sub	sp, #24
 800b688:	af00      	add	r7, sp, #0
 800b68a:	60f8      	str	r0, [r7, #12]
 800b68c:	60b9      	str	r1, [r7, #8]
 800b68e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b690:	2300      	movs	r3, #0
 800b692:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	68ba      	ldr	r2, [r7, #8]
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	4806      	ldr	r0, [pc, #24]	; (800b6b4 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b69c:	f7fc ffb2 	bl	8008604 <HAL_SD_ReadBlocks_DMA>
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d001      	beq.n	800b6aa <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6ac:	4618      	mov	r0, r3
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	200023dc 	.word	0x200023dc

0800b6b8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b086      	sub	sp, #24
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	60f8      	str	r0, [r7, #12]
 800b6c0:	60b9      	str	r1, [r7, #8]
 800b6c2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b6c4:	2300      	movs	r3, #0
 800b6c6:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	68ba      	ldr	r2, [r7, #8]
 800b6cc:	68f9      	ldr	r1, [r7, #12]
 800b6ce:	4806      	ldr	r0, [pc, #24]	; (800b6e8 <BSP_SD_WriteBlocks_DMA+0x30>)
 800b6d0:	f7fd f87a 	bl	80087c8 <HAL_SD_WriteBlocks_DMA>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	d001      	beq.n	800b6de <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b6da:	2301      	movs	r3, #1
 800b6dc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b6de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	3718      	adds	r7, #24
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	bd80      	pop	{r7, pc}
 800b6e8:	200023dc 	.word	0x200023dc

0800b6ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b6f0:	4805      	ldr	r0, [pc, #20]	; (800b708 <BSP_SD_GetCardState+0x1c>)
 800b6f2:	f7fd fc9f 	bl	8009034 <HAL_SD_GetCardState>
 800b6f6:	4603      	mov	r3, r0
 800b6f8:	2b04      	cmp	r3, #4
 800b6fa:	bf14      	ite	ne
 800b6fc:	2301      	movne	r3, #1
 800b6fe:	2300      	moveq	r3, #0
 800b700:	b2db      	uxtb	r3, r3
}
 800b702:	4618      	mov	r0, r3
 800b704:	bd80      	pop	{r7, pc}
 800b706:	bf00      	nop
 800b708:	200023dc 	.word	0x200023dc

0800b70c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b082      	sub	sp, #8
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800b714:	6879      	ldr	r1, [r7, #4]
 800b716:	4803      	ldr	r0, [pc, #12]	; (800b724 <BSP_SD_GetCardInfo+0x18>)
 800b718:	f7fd fc60 	bl	8008fdc <HAL_SD_GetCardInfo>
}
 800b71c:	bf00      	nop
 800b71e:	3708      	adds	r7, #8
 800b720:	46bd      	mov	sp, r7
 800b722:	bd80      	pop	{r7, pc}
 800b724:	200023dc 	.word	0x200023dc

0800b728 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b082      	sub	sp, #8
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b730:	f000 f818 	bl	800b764 <BSP_SD_AbortCallback>
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b744:	f000 f9aa 	bl	800ba9c <BSP_SD_WriteCpltCallback>
}
 800b748:	bf00      	nop
 800b74a:	3708      	adds	r7, #8
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}

0800b750 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b082      	sub	sp, #8
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b758:	f000 f9ac 	bl	800bab4 <BSP_SD_ReadCpltCallback>
}
 800b75c:	bf00      	nop
 800b75e:	3708      	adds	r7, #8
 800b760:	46bd      	mov	sp, r7
 800b762:	bd80      	pop	{r7, pc}

0800b764 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b764:	b480      	push	{r7}
 800b766:	af00      	add	r7, sp, #0

}
 800b768:	bf00      	nop
 800b76a:	46bd      	mov	sp, r7
 800b76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b770:	4770      	bx	lr

0800b772 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b772:	b580      	push	{r7, lr}
 800b774:	b082      	sub	sp, #8
 800b776:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b778:	2301      	movs	r3, #1
 800b77a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b77c:	f000 f80c 	bl	800b798 <BSP_PlatformIsDetected>
 800b780:	4603      	mov	r3, r0
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b786:	2300      	movs	r3, #0
 800b788:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	b2db      	uxtb	r3, r3
}
 800b78e:	4618      	mov	r0, r3
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
	...

0800b798 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800b79e:	2301      	movs	r3, #1
 800b7a0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800b7a2:	2104      	movs	r1, #4
 800b7a4:	4807      	ldr	r0, [pc, #28]	; (800b7c4 <BSP_PlatformIsDetected+0x2c>)
 800b7a6:	f7fb fd23 	bl	80071f0 <HAL_GPIO_ReadPin>
 800b7aa:	4603      	mov	r3, r0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d001      	beq.n	800b7b4 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    status = SD_PRESENT;
 800b7b4:	2301      	movs	r3, #1
 800b7b6:	71fb      	strb	r3, [r7, #7]
    /* USER CODE END 1 */
    return status;
 800b7b8:	79fb      	ldrb	r3, [r7, #7]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	40021400 	.word	0x40021400

0800b7c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800b7d0:	f7f9 fc28 	bl	8005024 <HAL_GetTick>
 800b7d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800b7d6:	e006      	b.n	800b7e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b7d8:	f7ff ff88 	bl	800b6ec <BSP_SD_GetCardState>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d101      	bne.n	800b7e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	e009      	b.n	800b7fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800b7e6:	f7f9 fc1d 	bl	8005024 <HAL_GetTick>
 800b7ea:	4602      	mov	r2, r0
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	1ad3      	subs	r3, r2, r3
 800b7f0:	687a      	ldr	r2, [r7, #4]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d8f0      	bhi.n	800b7d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800b7f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3710      	adds	r7, #16
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b082      	sub	sp, #8
 800b808:	af00      	add	r7, sp, #0
 800b80a:	4603      	mov	r3, r0
 800b80c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800b80e:	4b0b      	ldr	r3, [pc, #44]	; (800b83c <SD_CheckStatus+0x38>)
 800b810:	2201      	movs	r2, #1
 800b812:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800b814:	f7ff ff6a 	bl	800b6ec <BSP_SD_GetCardState>
 800b818:	4603      	mov	r3, r0
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d107      	bne.n	800b82e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800b81e:	4b07      	ldr	r3, [pc, #28]	; (800b83c <SD_CheckStatus+0x38>)
 800b820:	781b      	ldrb	r3, [r3, #0]
 800b822:	b2db      	uxtb	r3, r3
 800b824:	f023 0301 	bic.w	r3, r3, #1
 800b828:	b2da      	uxtb	r2, r3
 800b82a:	4b04      	ldr	r3, [pc, #16]	; (800b83c <SD_CheckStatus+0x38>)
 800b82c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800b82e:	4b03      	ldr	r3, [pc, #12]	; (800b83c <SD_CheckStatus+0x38>)
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	b2db      	uxtb	r3, r3
}
 800b834:	4618      	mov	r0, r3
 800b836:	3708      	adds	r7, #8
 800b838:	46bd      	mov	sp, r7
 800b83a:	bd80      	pop	{r7, pc}
 800b83c:	200000b5 	.word	0x200000b5

0800b840 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	4603      	mov	r3, r0
 800b848:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800b84a:	f7ff ff03 	bl	800b654 <BSP_SD_Init>
 800b84e:	4603      	mov	r3, r0
 800b850:	2b00      	cmp	r3, #0
 800b852:	d107      	bne.n	800b864 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800b854:	79fb      	ldrb	r3, [r7, #7]
 800b856:	4618      	mov	r0, r3
 800b858:	f7ff ffd4 	bl	800b804 <SD_CheckStatus>
 800b85c:	4603      	mov	r3, r0
 800b85e:	461a      	mov	r2, r3
 800b860:	4b04      	ldr	r3, [pc, #16]	; (800b874 <SD_initialize+0x34>)
 800b862:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800b864:	4b03      	ldr	r3, [pc, #12]	; (800b874 <SD_initialize+0x34>)
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	b2db      	uxtb	r3, r3
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	200000b5 	.word	0x200000b5

0800b878 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b082      	sub	sp, #8
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	4603      	mov	r3, r0
 800b880:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	4618      	mov	r0, r3
 800b886:	f7ff ffbd 	bl	800b804 <SD_CheckStatus>
 800b88a:	4603      	mov	r3, r0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	3708      	adds	r7, #8
 800b890:	46bd      	mov	sp, r7
 800b892:	bd80      	pop	{r7, pc}

0800b894 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	b086      	sub	sp, #24
 800b898:	af00      	add	r7, sp, #0
 800b89a:	60b9      	str	r1, [r7, #8]
 800b89c:	607a      	str	r2, [r7, #4]
 800b89e:	603b      	str	r3, [r7, #0]
 800b8a0:	4603      	mov	r3, r0
 800b8a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b8a8:	f247 5030 	movw	r0, #30000	; 0x7530
 800b8ac:	f7ff ff8c 	bl	800b7c8 <SD_CheckStatusWithTimeout>
 800b8b0:	4603      	mov	r3, r0
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	da01      	bge.n	800b8ba <SD_read+0x26>
  {
    return res;
 800b8b6:	7dfb      	ldrb	r3, [r7, #23]
 800b8b8:	e03b      	b.n	800b932 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800b8ba:	683a      	ldr	r2, [r7, #0]
 800b8bc:	6879      	ldr	r1, [r7, #4]
 800b8be:	68b8      	ldr	r0, [r7, #8]
 800b8c0:	f7ff fee0 	bl	800b684 <BSP_SD_ReadBlocks_DMA>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d132      	bne.n	800b930 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800b8ca:	4b1c      	ldr	r3, [pc, #112]	; (800b93c <SD_read+0xa8>)
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800b8d0:	f7f9 fba8 	bl	8005024 <HAL_GetTick>
 800b8d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b8d6:	bf00      	nop
 800b8d8:	4b18      	ldr	r3, [pc, #96]	; (800b93c <SD_read+0xa8>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d108      	bne.n	800b8f2 <SD_read+0x5e>
 800b8e0:	f7f9 fba0 	bl	8005024 <HAL_GetTick>
 800b8e4:	4602      	mov	r2, r0
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	f247 522f 	movw	r2, #29999	; 0x752f
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d9f2      	bls.n	800b8d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800b8f2:	4b12      	ldr	r3, [pc, #72]	; (800b93c <SD_read+0xa8>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d102      	bne.n	800b900 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800b8fa:	2301      	movs	r3, #1
 800b8fc:	75fb      	strb	r3, [r7, #23]
 800b8fe:	e017      	b.n	800b930 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800b900:	4b0e      	ldr	r3, [pc, #56]	; (800b93c <SD_read+0xa8>)
 800b902:	2200      	movs	r2, #0
 800b904:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b906:	f7f9 fb8d 	bl	8005024 <HAL_GetTick>
 800b90a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b90c:	e007      	b.n	800b91e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b90e:	f7ff feed 	bl	800b6ec <BSP_SD_GetCardState>
 800b912:	4603      	mov	r3, r0
 800b914:	2b00      	cmp	r3, #0
 800b916:	d102      	bne.n	800b91e <SD_read+0x8a>
          {
            res = RES_OK;
 800b918:	2300      	movs	r3, #0
 800b91a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800b91c:	e008      	b.n	800b930 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b91e:	f7f9 fb81 	bl	8005024 <HAL_GetTick>
 800b922:	4602      	mov	r2, r0
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	1ad3      	subs	r3, r2, r3
 800b928:	f247 522f 	movw	r2, #29999	; 0x752f
 800b92c:	4293      	cmp	r3, r2
 800b92e:	d9ee      	bls.n	800b90e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800b930:	7dfb      	ldrb	r3, [r7, #23]
}
 800b932:	4618      	mov	r0, r3
 800b934:	3718      	adds	r7, #24
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	200048ac 	.word	0x200048ac

0800b940 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60b9      	str	r1, [r7, #8]
 800b948:	607a      	str	r2, [r7, #4]
 800b94a:	603b      	str	r3, [r7, #0]
 800b94c:	4603      	mov	r3, r0
 800b94e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800b954:	4b24      	ldr	r3, [pc, #144]	; (800b9e8 <SD_write+0xa8>)
 800b956:	2200      	movs	r2, #0
 800b958:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800b95a:	f247 5030 	movw	r0, #30000	; 0x7530
 800b95e:	f7ff ff33 	bl	800b7c8 <SD_CheckStatusWithTimeout>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	da01      	bge.n	800b96c <SD_write+0x2c>
  {
    return res;
 800b968:	7dfb      	ldrb	r3, [r7, #23]
 800b96a:	e038      	b.n	800b9de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800b96c:	683a      	ldr	r2, [r7, #0]
 800b96e:	6879      	ldr	r1, [r7, #4]
 800b970:	68b8      	ldr	r0, [r7, #8]
 800b972:	f7ff fea1 	bl	800b6b8 <BSP_SD_WriteBlocks_DMA>
 800b976:	4603      	mov	r3, r0
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d12f      	bne.n	800b9dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800b97c:	f7f9 fb52 	bl	8005024 <HAL_GetTick>
 800b980:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800b982:	bf00      	nop
 800b984:	4b18      	ldr	r3, [pc, #96]	; (800b9e8 <SD_write+0xa8>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d108      	bne.n	800b99e <SD_write+0x5e>
 800b98c:	f7f9 fb4a 	bl	8005024 <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	f247 522f 	movw	r2, #29999	; 0x752f
 800b99a:	4293      	cmp	r3, r2
 800b99c:	d9f2      	bls.n	800b984 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800b99e:	4b12      	ldr	r3, [pc, #72]	; (800b9e8 <SD_write+0xa8>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d102      	bne.n	800b9ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]
 800b9aa:	e017      	b.n	800b9dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800b9ac:	4b0e      	ldr	r3, [pc, #56]	; (800b9e8 <SD_write+0xa8>)
 800b9ae:	2200      	movs	r2, #0
 800b9b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800b9b2:	f7f9 fb37 	bl	8005024 <HAL_GetTick>
 800b9b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b9b8:	e007      	b.n	800b9ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800b9ba:	f7ff fe97 	bl	800b6ec <BSP_SD_GetCardState>
 800b9be:	4603      	mov	r3, r0
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d102      	bne.n	800b9ca <SD_write+0x8a>
          {
            res = RES_OK;
 800b9c4:	2300      	movs	r3, #0
 800b9c6:	75fb      	strb	r3, [r7, #23]
            break;
 800b9c8:	e008      	b.n	800b9dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800b9ca:	f7f9 fb2b 	bl	8005024 <HAL_GetTick>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	1ad3      	subs	r3, r2, r3
 800b9d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d9ee      	bls.n	800b9ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800b9dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9de:	4618      	mov	r0, r3
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	200048a8 	.word	0x200048a8

0800b9ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800b9ec:	b580      	push	{r7, lr}
 800b9ee:	b08c      	sub	sp, #48	; 0x30
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	603a      	str	r2, [r7, #0]
 800b9f6:	71fb      	strb	r3, [r7, #7]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800b9fc:	2301      	movs	r3, #1
 800b9fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ba02:	4b25      	ldr	r3, [pc, #148]	; (800ba98 <SD_ioctl+0xac>)
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	f003 0301 	and.w	r3, r3, #1
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d001      	beq.n	800ba14 <SD_ioctl+0x28>
 800ba10:	2303      	movs	r3, #3
 800ba12:	e03c      	b.n	800ba8e <SD_ioctl+0xa2>

  switch (cmd)
 800ba14:	79bb      	ldrb	r3, [r7, #6]
 800ba16:	2b03      	cmp	r3, #3
 800ba18:	d834      	bhi.n	800ba84 <SD_ioctl+0x98>
 800ba1a:	a201      	add	r2, pc, #4	; (adr r2, 800ba20 <SD_ioctl+0x34>)
 800ba1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba20:	0800ba31 	.word	0x0800ba31
 800ba24:	0800ba39 	.word	0x0800ba39
 800ba28:	0800ba51 	.word	0x0800ba51
 800ba2c:	0800ba6b 	.word	0x0800ba6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba36:	e028      	b.n	800ba8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba38:	f107 030c 	add.w	r3, r7, #12
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7ff fe65 	bl	800b70c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ba42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba48:	2300      	movs	r3, #0
 800ba4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba4e:	e01c      	b.n	800ba8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba50:	f107 030c 	add.w	r3, r7, #12
 800ba54:	4618      	mov	r0, r3
 800ba56:	f7ff fe59 	bl	800b70c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ba5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba5c:	b29a      	uxth	r2, r3
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba68:	e00f      	b.n	800ba8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ba6a:	f107 030c 	add.w	r3, r7, #12
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7ff fe4c 	bl	800b70c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ba74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba76:	0a5a      	lsrs	r2, r3, #9
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ba82:	e002      	b.n	800ba8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800ba84:	2304      	movs	r3, #4
 800ba86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800ba8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ba8e:	4618      	mov	r0, r3
 800ba90:	3730      	adds	r7, #48	; 0x30
 800ba92:	46bd      	mov	sp, r7
 800ba94:	bd80      	pop	{r7, pc}
 800ba96:	bf00      	nop
 800ba98:	200000b5 	.word	0x200000b5

0800ba9c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800baa0:	4b03      	ldr	r3, [pc, #12]	; (800bab0 <BSP_SD_WriteCpltCallback+0x14>)
 800baa2:	2201      	movs	r2, #1
 800baa4:	601a      	str	r2, [r3, #0]
}
 800baa6:	bf00      	nop
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	200048a8 	.word	0x200048a8

0800bab4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bab4:	b480      	push	{r7}
 800bab6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bab8:	4b03      	ldr	r3, [pc, #12]	; (800bac8 <BSP_SD_ReadCpltCallback+0x14>)
 800baba:	2201      	movs	r2, #1
 800babc:	601a      	str	r2, [r3, #0]
}
 800babe:	bf00      	nop
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	200048ac 	.word	0x200048ac

0800bacc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	4603      	mov	r3, r0
 800bad4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800bad6:	79fb      	ldrb	r3, [r7, #7]
 800bad8:	4a08      	ldr	r2, [pc, #32]	; (800bafc <disk_status+0x30>)
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	685b      	ldr	r3, [r3, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	79fa      	ldrb	r2, [r7, #7]
 800bae4:	4905      	ldr	r1, [pc, #20]	; (800bafc <disk_status+0x30>)
 800bae6:	440a      	add	r2, r1
 800bae8:	7a12      	ldrb	r2, [r2, #8]
 800baea:	4610      	mov	r0, r2
 800baec:	4798      	blx	r3
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800baf2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}
 800bafc:	20004ad8 	.word	0x20004ad8

0800bb00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800bb00:	b580      	push	{r7, lr}
 800bb02:	b084      	sub	sp, #16
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	4603      	mov	r3, r0
 800bb08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800bb0e:	79fb      	ldrb	r3, [r7, #7]
 800bb10:	4a0d      	ldr	r2, [pc, #52]	; (800bb48 <disk_initialize+0x48>)
 800bb12:	5cd3      	ldrb	r3, [r2, r3]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d111      	bne.n	800bb3c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	4a0b      	ldr	r2, [pc, #44]	; (800bb48 <disk_initialize+0x48>)
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800bb20:	79fb      	ldrb	r3, [r7, #7]
 800bb22:	4a09      	ldr	r2, [pc, #36]	; (800bb48 <disk_initialize+0x48>)
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4413      	add	r3, r2
 800bb28:	685b      	ldr	r3, [r3, #4]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	79fa      	ldrb	r2, [r7, #7]
 800bb2e:	4906      	ldr	r1, [pc, #24]	; (800bb48 <disk_initialize+0x48>)
 800bb30:	440a      	add	r2, r1
 800bb32:	7a12      	ldrb	r2, [r2, #8]
 800bb34:	4610      	mov	r0, r2
 800bb36:	4798      	blx	r3
 800bb38:	4603      	mov	r3, r0
 800bb3a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800bb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20004ad8 	.word	0x20004ad8

0800bb4c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800bb4c:	b590      	push	{r4, r7, lr}
 800bb4e:	b087      	sub	sp, #28
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	60b9      	str	r1, [r7, #8]
 800bb54:	607a      	str	r2, [r7, #4]
 800bb56:	603b      	str	r3, [r7, #0]
 800bb58:	4603      	mov	r3, r0
 800bb5a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
 800bb5e:	4a0a      	ldr	r2, [pc, #40]	; (800bb88 <disk_read+0x3c>)
 800bb60:	009b      	lsls	r3, r3, #2
 800bb62:	4413      	add	r3, r2
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	689c      	ldr	r4, [r3, #8]
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	4a07      	ldr	r2, [pc, #28]	; (800bb88 <disk_read+0x3c>)
 800bb6c:	4413      	add	r3, r2
 800bb6e:	7a18      	ldrb	r0, [r3, #8]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	687a      	ldr	r2, [r7, #4]
 800bb74:	68b9      	ldr	r1, [r7, #8]
 800bb76:	47a0      	blx	r4
 800bb78:	4603      	mov	r3, r0
 800bb7a:	75fb      	strb	r3, [r7, #23]
  return res;
 800bb7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	371c      	adds	r7, #28
 800bb82:	46bd      	mov	sp, r7
 800bb84:	bd90      	pop	{r4, r7, pc}
 800bb86:	bf00      	nop
 800bb88:	20004ad8 	.word	0x20004ad8

0800bb8c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800bb8c:	b590      	push	{r4, r7, lr}
 800bb8e:	b087      	sub	sp, #28
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60b9      	str	r1, [r7, #8]
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	4603      	mov	r3, r0
 800bb9a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800bb9c:	7bfb      	ldrb	r3, [r7, #15]
 800bb9e:	4a0a      	ldr	r2, [pc, #40]	; (800bbc8 <disk_write+0x3c>)
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	68dc      	ldr	r4, [r3, #12]
 800bba8:	7bfb      	ldrb	r3, [r7, #15]
 800bbaa:	4a07      	ldr	r2, [pc, #28]	; (800bbc8 <disk_write+0x3c>)
 800bbac:	4413      	add	r3, r2
 800bbae:	7a18      	ldrb	r0, [r3, #8]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	68b9      	ldr	r1, [r7, #8]
 800bbb6:	47a0      	blx	r4
 800bbb8:	4603      	mov	r3, r0
 800bbba:	75fb      	strb	r3, [r7, #23]
  return res;
 800bbbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	371c      	adds	r7, #28
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd90      	pop	{r4, r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20004ad8 	.word	0x20004ad8

0800bbcc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	603a      	str	r2, [r7, #0]
 800bbd6:	71fb      	strb	r3, [r7, #7]
 800bbd8:	460b      	mov	r3, r1
 800bbda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800bbdc:	79fb      	ldrb	r3, [r7, #7]
 800bbde:	4a09      	ldr	r2, [pc, #36]	; (800bc04 <disk_ioctl+0x38>)
 800bbe0:	009b      	lsls	r3, r3, #2
 800bbe2:	4413      	add	r3, r2
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	691b      	ldr	r3, [r3, #16]
 800bbe8:	79fa      	ldrb	r2, [r7, #7]
 800bbea:	4906      	ldr	r1, [pc, #24]	; (800bc04 <disk_ioctl+0x38>)
 800bbec:	440a      	add	r2, r1
 800bbee:	7a10      	ldrb	r0, [r2, #8]
 800bbf0:	79b9      	ldrb	r1, [r7, #6]
 800bbf2:	683a      	ldr	r2, [r7, #0]
 800bbf4:	4798      	blx	r3
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	73fb      	strb	r3, [r7, #15]
  return res;
 800bbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	3710      	adds	r7, #16
 800bc00:	46bd      	mov	sp, r7
 800bc02:	bd80      	pop	{r7, pc}
 800bc04:	20004ad8 	.word	0x20004ad8

0800bc08 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b085      	sub	sp, #20
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	3301      	adds	r3, #1
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800bc18:	89fb      	ldrh	r3, [r7, #14]
 800bc1a:	021b      	lsls	r3, r3, #8
 800bc1c:	b21a      	sxth	r2, r3
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	b21b      	sxth	r3, r3
 800bc24:	4313      	orrs	r3, r2
 800bc26:	b21b      	sxth	r3, r3
 800bc28:	81fb      	strh	r3, [r7, #14]
	return rv;
 800bc2a:	89fb      	ldrh	r3, [r7, #14]
}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3714      	adds	r7, #20
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b085      	sub	sp, #20
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	3303      	adds	r3, #3
 800bc44:	781b      	ldrb	r3, [r3, #0]
 800bc46:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	021b      	lsls	r3, r3, #8
 800bc4c:	687a      	ldr	r2, [r7, #4]
 800bc4e:	3202      	adds	r2, #2
 800bc50:	7812      	ldrb	r2, [r2, #0]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	021b      	lsls	r3, r3, #8
 800bc5a:	687a      	ldr	r2, [r7, #4]
 800bc5c:	3201      	adds	r2, #1
 800bc5e:	7812      	ldrb	r2, [r2, #0]
 800bc60:	4313      	orrs	r3, r2
 800bc62:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	021b      	lsls	r3, r3, #8
 800bc68:	687a      	ldr	r2, [r7, #4]
 800bc6a:	7812      	ldrb	r2, [r2, #0]
 800bc6c:	4313      	orrs	r3, r2
 800bc6e:	60fb      	str	r3, [r7, #12]
	return rv;
 800bc70:	68fb      	ldr	r3, [r7, #12]
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b083      	sub	sp, #12
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
 800bc86:	460b      	mov	r3, r1
 800bc88:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	1c5a      	adds	r2, r3, #1
 800bc8e:	607a      	str	r2, [r7, #4]
 800bc90:	887a      	ldrh	r2, [r7, #2]
 800bc92:	b2d2      	uxtb	r2, r2
 800bc94:	701a      	strb	r2, [r3, #0]
 800bc96:	887b      	ldrh	r3, [r7, #2]
 800bc98:	0a1b      	lsrs	r3, r3, #8
 800bc9a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	607a      	str	r2, [r7, #4]
 800bca2:	887a      	ldrh	r2, [r7, #2]
 800bca4:	b2d2      	uxtb	r2, r2
 800bca6:	701a      	strb	r2, [r3, #0]
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	1c5a      	adds	r2, r3, #1
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	683a      	ldr	r2, [r7, #0]
 800bcc6:	b2d2      	uxtb	r2, r2
 800bcc8:	701a      	strb	r2, [r3, #0]
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	0a1b      	lsrs	r3, r3, #8
 800bcce:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	1c5a      	adds	r2, r3, #1
 800bcd4:	607a      	str	r2, [r7, #4]
 800bcd6:	683a      	ldr	r2, [r7, #0]
 800bcd8:	b2d2      	uxtb	r2, r2
 800bcda:	701a      	strb	r2, [r3, #0]
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	0a1b      	lsrs	r3, r3, #8
 800bce0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	1c5a      	adds	r2, r3, #1
 800bce6:	607a      	str	r2, [r7, #4]
 800bce8:	683a      	ldr	r2, [r7, #0]
 800bcea:	b2d2      	uxtb	r2, r2
 800bcec:	701a      	strb	r2, [r3, #0]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	0a1b      	lsrs	r3, r3, #8
 800bcf2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	1c5a      	adds	r2, r3, #1
 800bcf8:	607a      	str	r2, [r7, #4]
 800bcfa:	683a      	ldr	r2, [r7, #0]
 800bcfc:	b2d2      	uxtb	r2, r2
 800bcfe:	701a      	strb	r2, [r3, #0]
}
 800bd00:	bf00      	nop
 800bd02:	370c      	adds	r7, #12
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800bd0c:	b480      	push	{r7}
 800bd0e:	b087      	sub	sp, #28
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	60f8      	str	r0, [r7, #12]
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00d      	beq.n	800bd42 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800bd26:	693a      	ldr	r2, [r7, #16]
 800bd28:	1c53      	adds	r3, r2, #1
 800bd2a:	613b      	str	r3, [r7, #16]
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	1c59      	adds	r1, r3, #1
 800bd30:	6179      	str	r1, [r7, #20]
 800bd32:	7812      	ldrb	r2, [r2, #0]
 800bd34:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	607b      	str	r3, [r7, #4]
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d1f1      	bne.n	800bd26 <mem_cpy+0x1a>
	}
}
 800bd42:	bf00      	nop
 800bd44:	371c      	adds	r7, #28
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800bd4e:	b480      	push	{r7}
 800bd50:	b087      	sub	sp, #28
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	60f8      	str	r0, [r7, #12]
 800bd56:	60b9      	str	r1, [r7, #8]
 800bd58:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800bd5a:	68fb      	ldr	r3, [r7, #12]
 800bd5c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800bd5e:	697b      	ldr	r3, [r7, #20]
 800bd60:	1c5a      	adds	r2, r3, #1
 800bd62:	617a      	str	r2, [r7, #20]
 800bd64:	68ba      	ldr	r2, [r7, #8]
 800bd66:	b2d2      	uxtb	r2, r2
 800bd68:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	3b01      	subs	r3, #1
 800bd6e:	607b      	str	r3, [r7, #4]
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d1f3      	bne.n	800bd5e <mem_set+0x10>
}
 800bd76:	bf00      	nop
 800bd78:	bf00      	nop
 800bd7a:	371c      	adds	r7, #28
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800bd84:	b480      	push	{r7}
 800bd86:	b089      	sub	sp, #36	; 0x24
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	61fb      	str	r3, [r7, #28]
 800bd94:	68bb      	ldr	r3, [r7, #8]
 800bd96:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	1c5a      	adds	r2, r3, #1
 800bda0:	61fa      	str	r2, [r7, #28]
 800bda2:	781b      	ldrb	r3, [r3, #0]
 800bda4:	4619      	mov	r1, r3
 800bda6:	69bb      	ldr	r3, [r7, #24]
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	61ba      	str	r2, [r7, #24]
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	1acb      	subs	r3, r1, r3
 800bdb0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	607b      	str	r3, [r7, #4]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d002      	beq.n	800bdc4 <mem_cmp+0x40>
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d0eb      	beq.n	800bd9c <mem_cmp+0x18>

	return r;
 800bdc4:	697b      	ldr	r3, [r7, #20]
}
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	3724      	adds	r7, #36	; 0x24
 800bdca:	46bd      	mov	sp, r7
 800bdcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd0:	4770      	bx	lr

0800bdd2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800bdd2:	b480      	push	{r7}
 800bdd4:	b083      	sub	sp, #12
 800bdd6:	af00      	add	r7, sp, #0
 800bdd8:	6078      	str	r0, [r7, #4]
 800bdda:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800bddc:	e002      	b.n	800bde4 <chk_chr+0x12>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	3301      	adds	r3, #1
 800bde2:	607b      	str	r3, [r7, #4]
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d005      	beq.n	800bdf8 <chk_chr+0x26>
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	781b      	ldrb	r3, [r3, #0]
 800bdf0:	461a      	mov	r2, r3
 800bdf2:	683b      	ldr	r3, [r7, #0]
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d1f2      	bne.n	800bdde <chk_chr+0xc>
	return *str;
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	781b      	ldrb	r3, [r3, #0]
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800be08:	b480      	push	{r7}
 800be0a:	b085      	sub	sp, #20
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be12:	2300      	movs	r3, #0
 800be14:	60bb      	str	r3, [r7, #8]
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	60fb      	str	r3, [r7, #12]
 800be1a:	e029      	b.n	800be70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800be1c:	4a27      	ldr	r2, [pc, #156]	; (800bebc <chk_lock+0xb4>)
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	011b      	lsls	r3, r3, #4
 800be22:	4413      	add	r3, r2
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d01d      	beq.n	800be66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be2a:	4a24      	ldr	r2, [pc, #144]	; (800bebc <chk_lock+0xb4>)
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	011b      	lsls	r3, r3, #4
 800be30:	4413      	add	r3, r2
 800be32:	681a      	ldr	r2, [r3, #0]
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d116      	bne.n	800be6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800be3c:	4a1f      	ldr	r2, [pc, #124]	; (800bebc <chk_lock+0xb4>)
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	011b      	lsls	r3, r3, #4
 800be42:	4413      	add	r3, r2
 800be44:	3304      	adds	r3, #4
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d10c      	bne.n	800be6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be50:	4a1a      	ldr	r2, [pc, #104]	; (800bebc <chk_lock+0xb4>)
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	011b      	lsls	r3, r3, #4
 800be56:	4413      	add	r3, r2
 800be58:	3308      	adds	r3, #8
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800be60:	429a      	cmp	r2, r3
 800be62:	d102      	bne.n	800be6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800be64:	e007      	b.n	800be76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800be66:	2301      	movs	r3, #1
 800be68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	3301      	adds	r3, #1
 800be6e:	60fb      	str	r3, [r7, #12]
 800be70:	68fb      	ldr	r3, [r7, #12]
 800be72:	2b01      	cmp	r3, #1
 800be74:	d9d2      	bls.n	800be1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d109      	bne.n	800be90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800be7c:	68bb      	ldr	r3, [r7, #8]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d102      	bne.n	800be88 <chk_lock+0x80>
 800be82:	683b      	ldr	r3, [r7, #0]
 800be84:	2b02      	cmp	r3, #2
 800be86:	d101      	bne.n	800be8c <chk_lock+0x84>
 800be88:	2300      	movs	r3, #0
 800be8a:	e010      	b.n	800beae <chk_lock+0xa6>
 800be8c:	2312      	movs	r3, #18
 800be8e:	e00e      	b.n	800beae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d108      	bne.n	800bea8 <chk_lock+0xa0>
 800be96:	4a09      	ldr	r2, [pc, #36]	; (800bebc <chk_lock+0xb4>)
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	011b      	lsls	r3, r3, #4
 800be9c:	4413      	add	r3, r2
 800be9e:	330c      	adds	r3, #12
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea6:	d101      	bne.n	800beac <chk_lock+0xa4>
 800bea8:	2310      	movs	r3, #16
 800beaa:	e000      	b.n	800beae <chk_lock+0xa6>
 800beac:	2300      	movs	r3, #0
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3714      	adds	r7, #20
 800beb2:	46bd      	mov	sp, r7
 800beb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beb8:	4770      	bx	lr
 800beba:	bf00      	nop
 800bebc:	200048b8 	.word	0x200048b8

0800bec0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800bec0:	b480      	push	{r7}
 800bec2:	b083      	sub	sp, #12
 800bec4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bec6:	2300      	movs	r3, #0
 800bec8:	607b      	str	r3, [r7, #4]
 800beca:	e002      	b.n	800bed2 <enq_lock+0x12>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	3301      	adds	r3, #1
 800bed0:	607b      	str	r3, [r7, #4]
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	2b01      	cmp	r3, #1
 800bed6:	d806      	bhi.n	800bee6 <enq_lock+0x26>
 800bed8:	4a09      	ldr	r2, [pc, #36]	; (800bf00 <enq_lock+0x40>)
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	011b      	lsls	r3, r3, #4
 800bede:	4413      	add	r3, r2
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d1f2      	bne.n	800becc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	2b02      	cmp	r3, #2
 800beea:	bf14      	ite	ne
 800beec:	2301      	movne	r3, #1
 800beee:	2300      	moveq	r3, #0
 800bef0:	b2db      	uxtb	r3, r3
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	370c      	adds	r7, #12
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	200048b8 	.word	0x200048b8

0800bf04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf0e:	2300      	movs	r3, #0
 800bf10:	60fb      	str	r3, [r7, #12]
 800bf12:	e01f      	b.n	800bf54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800bf14:	4a41      	ldr	r2, [pc, #260]	; (800c01c <inc_lock+0x118>)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	011b      	lsls	r3, r3, #4
 800bf1a:	4413      	add	r3, r2
 800bf1c:	681a      	ldr	r2, [r3, #0]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d113      	bne.n	800bf4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800bf26:	4a3d      	ldr	r2, [pc, #244]	; (800c01c <inc_lock+0x118>)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	011b      	lsls	r3, r3, #4
 800bf2c:	4413      	add	r3, r2
 800bf2e:	3304      	adds	r3, #4
 800bf30:	681a      	ldr	r2, [r3, #0]
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800bf36:	429a      	cmp	r2, r3
 800bf38:	d109      	bne.n	800bf4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800bf3a:	4a38      	ldr	r2, [pc, #224]	; (800c01c <inc_lock+0x118>)
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	011b      	lsls	r3, r3, #4
 800bf40:	4413      	add	r3, r2
 800bf42:	3308      	adds	r3, #8
 800bf44:	681a      	ldr	r2, [r3, #0]
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d006      	beq.n	800bf5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	3301      	adds	r3, #1
 800bf52:	60fb      	str	r3, [r7, #12]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d9dc      	bls.n	800bf14 <inc_lock+0x10>
 800bf5a:	e000      	b.n	800bf5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800bf5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	2b02      	cmp	r3, #2
 800bf62:	d132      	bne.n	800bfca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800bf64:	2300      	movs	r3, #0
 800bf66:	60fb      	str	r3, [r7, #12]
 800bf68:	e002      	b.n	800bf70 <inc_lock+0x6c>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	60fb      	str	r3, [r7, #12]
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d806      	bhi.n	800bf84 <inc_lock+0x80>
 800bf76:	4a29      	ldr	r2, [pc, #164]	; (800c01c <inc_lock+0x118>)
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	011b      	lsls	r3, r3, #4
 800bf7c:	4413      	add	r3, r2
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d1f2      	bne.n	800bf6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d101      	bne.n	800bf8e <inc_lock+0x8a>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	e040      	b.n	800c010 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681a      	ldr	r2, [r3, #0]
 800bf92:	4922      	ldr	r1, [pc, #136]	; (800c01c <inc_lock+0x118>)
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	011b      	lsls	r3, r3, #4
 800bf98:	440b      	add	r3, r1
 800bf9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689a      	ldr	r2, [r3, #8]
 800bfa0:	491e      	ldr	r1, [pc, #120]	; (800c01c <inc_lock+0x118>)
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	011b      	lsls	r3, r3, #4
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3304      	adds	r3, #4
 800bfaa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	695a      	ldr	r2, [r3, #20]
 800bfb0:	491a      	ldr	r1, [pc, #104]	; (800c01c <inc_lock+0x118>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	011b      	lsls	r3, r3, #4
 800bfb6:	440b      	add	r3, r1
 800bfb8:	3308      	adds	r3, #8
 800bfba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800bfbc:	4a17      	ldr	r2, [pc, #92]	; (800c01c <inc_lock+0x118>)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	011b      	lsls	r3, r3, #4
 800bfc2:	4413      	add	r3, r2
 800bfc4:	330c      	adds	r3, #12
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d009      	beq.n	800bfe4 <inc_lock+0xe0>
 800bfd0:	4a12      	ldr	r2, [pc, #72]	; (800c01c <inc_lock+0x118>)
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	011b      	lsls	r3, r3, #4
 800bfd6:	4413      	add	r3, r2
 800bfd8:	330c      	adds	r3, #12
 800bfda:	881b      	ldrh	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d001      	beq.n	800bfe4 <inc_lock+0xe0>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	e015      	b.n	800c010 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d108      	bne.n	800bffc <inc_lock+0xf8>
 800bfea:	4a0c      	ldr	r2, [pc, #48]	; (800c01c <inc_lock+0x118>)
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	011b      	lsls	r3, r3, #4
 800bff0:	4413      	add	r3, r2
 800bff2:	330c      	adds	r3, #12
 800bff4:	881b      	ldrh	r3, [r3, #0]
 800bff6:	3301      	adds	r3, #1
 800bff8:	b29a      	uxth	r2, r3
 800bffa:	e001      	b.n	800c000 <inc_lock+0xfc>
 800bffc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c000:	4906      	ldr	r1, [pc, #24]	; (800c01c <inc_lock+0x118>)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	011b      	lsls	r3, r3, #4
 800c006:	440b      	add	r3, r1
 800c008:	330c      	adds	r3, #12
 800c00a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	3301      	adds	r3, #1
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr
 800c01c:	200048b8 	.word	0x200048b8

0800c020 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	3b01      	subs	r3, #1
 800c02c:	607b      	str	r3, [r7, #4]
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b01      	cmp	r3, #1
 800c032:	d825      	bhi.n	800c080 <dec_lock+0x60>
		n = Files[i].ctr;
 800c034:	4a17      	ldr	r2, [pc, #92]	; (800c094 <dec_lock+0x74>)
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	011b      	lsls	r3, r3, #4
 800c03a:	4413      	add	r3, r2
 800c03c:	330c      	adds	r3, #12
 800c03e:	881b      	ldrh	r3, [r3, #0]
 800c040:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800c042:	89fb      	ldrh	r3, [r7, #14]
 800c044:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c048:	d101      	bne.n	800c04e <dec_lock+0x2e>
 800c04a:	2300      	movs	r3, #0
 800c04c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800c04e:	89fb      	ldrh	r3, [r7, #14]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d002      	beq.n	800c05a <dec_lock+0x3a>
 800c054:	89fb      	ldrh	r3, [r7, #14]
 800c056:	3b01      	subs	r3, #1
 800c058:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800c05a:	4a0e      	ldr	r2, [pc, #56]	; (800c094 <dec_lock+0x74>)
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	011b      	lsls	r3, r3, #4
 800c060:	4413      	add	r3, r2
 800c062:	330c      	adds	r3, #12
 800c064:	89fa      	ldrh	r2, [r7, #14]
 800c066:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800c068:	89fb      	ldrh	r3, [r7, #14]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d105      	bne.n	800c07a <dec_lock+0x5a>
 800c06e:	4a09      	ldr	r2, [pc, #36]	; (800c094 <dec_lock+0x74>)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	011b      	lsls	r3, r3, #4
 800c074:	4413      	add	r3, r2
 800c076:	2200      	movs	r2, #0
 800c078:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	737b      	strb	r3, [r7, #13]
 800c07e:	e001      	b.n	800c084 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800c080:	2302      	movs	r3, #2
 800c082:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800c084:	7b7b      	ldrb	r3, [r7, #13]
}
 800c086:	4618      	mov	r0, r3
 800c088:	3714      	adds	r7, #20
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr
 800c092:	bf00      	nop
 800c094:	200048b8 	.word	0x200048b8

0800c098 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800c098:	b480      	push	{r7}
 800c09a:	b085      	sub	sp, #20
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	e010      	b.n	800c0c8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800c0a6:	4a0d      	ldr	r2, [pc, #52]	; (800c0dc <clear_lock+0x44>)
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	011b      	lsls	r3, r3, #4
 800c0ac:	4413      	add	r3, r2
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	429a      	cmp	r2, r3
 800c0b4:	d105      	bne.n	800c0c2 <clear_lock+0x2a>
 800c0b6:	4a09      	ldr	r2, [pc, #36]	; (800c0dc <clear_lock+0x44>)
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	011b      	lsls	r3, r3, #4
 800c0bc:	4413      	add	r3, r2
 800c0be:	2200      	movs	r2, #0
 800c0c0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	60fb      	str	r3, [r7, #12]
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	2b01      	cmp	r3, #1
 800c0cc:	d9eb      	bls.n	800c0a6 <clear_lock+0xe>
	}
}
 800c0ce:	bf00      	nop
 800c0d0:	bf00      	nop
 800c0d2:	3714      	adds	r7, #20
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr
 800c0dc:	200048b8 	.word	0x200048b8

0800c0e0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b086      	sub	sp, #24
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	78db      	ldrb	r3, [r3, #3]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d034      	beq.n	800c15e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0f8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	7858      	ldrb	r0, [r3, #1]
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c104:	2301      	movs	r3, #1
 800c106:	697a      	ldr	r2, [r7, #20]
 800c108:	f7ff fd40 	bl	800bb8c <disk_write>
 800c10c:	4603      	mov	r3, r0
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d002      	beq.n	800c118 <sync_window+0x38>
			res = FR_DISK_ERR;
 800c112:	2301      	movs	r3, #1
 800c114:	73fb      	strb	r3, [r7, #15]
 800c116:	e022      	b.n	800c15e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2200      	movs	r2, #0
 800c11c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c122:	697a      	ldr	r2, [r7, #20]
 800c124:	1ad2      	subs	r2, r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6a1b      	ldr	r3, [r3, #32]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d217      	bcs.n	800c15e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	789b      	ldrb	r3, [r3, #2]
 800c132:	613b      	str	r3, [r7, #16]
 800c134:	e010      	b.n	800c158 <sync_window+0x78>
					wsect += fs->fsize;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6a1b      	ldr	r3, [r3, #32]
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	4413      	add	r3, r2
 800c13e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	7858      	ldrb	r0, [r3, #1]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c14a:	2301      	movs	r3, #1
 800c14c:	697a      	ldr	r2, [r7, #20]
 800c14e:	f7ff fd1d 	bl	800bb8c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	3b01      	subs	r3, #1
 800c156:	613b      	str	r3, [r7, #16]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d8eb      	bhi.n	800c136 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c160:	4618      	mov	r0, r3
 800c162:	3718      	adds	r7, #24
 800c164:	46bd      	mov	sp, r7
 800c166:	bd80      	pop	{r7, pc}

0800c168 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c17a:	683a      	ldr	r2, [r7, #0]
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d01b      	beq.n	800c1b8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f7ff ffad 	bl	800c0e0 <sync_window>
 800c186:	4603      	mov	r3, r0
 800c188:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800c18a:	7bfb      	ldrb	r3, [r7, #15]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d113      	bne.n	800c1b8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	7858      	ldrb	r0, [r3, #1]
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c19a:	2301      	movs	r3, #1
 800c19c:	683a      	ldr	r2, [r7, #0]
 800c19e:	f7ff fcd5 	bl	800bb4c <disk_read>
 800c1a2:	4603      	mov	r3, r0
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800c1a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c1ac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800c1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b084      	sub	sp, #16
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ff87 	bl	800c0e0 <sync_window>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c1d6:	7bfb      	ldrb	r3, [r7, #15]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d159      	bne.n	800c290 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	781b      	ldrb	r3, [r3, #0]
 800c1e0:	2b03      	cmp	r3, #3
 800c1e2:	d149      	bne.n	800c278 <sync_fs+0xb4>
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	791b      	ldrb	r3, [r3, #4]
 800c1e8:	2b01      	cmp	r3, #1
 800c1ea:	d145      	bne.n	800c278 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	899b      	ldrh	r3, [r3, #12]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	2100      	movs	r1, #0
 800c1fa:	f7ff fda8 	bl	800bd4e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	3338      	adds	r3, #56	; 0x38
 800c202:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c206:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800c20a:	4618      	mov	r0, r3
 800c20c:	f7ff fd37 	bl	800bc7e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	3338      	adds	r3, #56	; 0x38
 800c214:	4921      	ldr	r1, [pc, #132]	; (800c29c <sync_fs+0xd8>)
 800c216:	4618      	mov	r0, r3
 800c218:	f7ff fd4c 	bl	800bcb4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	3338      	adds	r3, #56	; 0x38
 800c220:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c224:	491e      	ldr	r1, [pc, #120]	; (800c2a0 <sync_fs+0xdc>)
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff fd44 	bl	800bcb4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	3338      	adds	r3, #56	; 0x38
 800c230:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	699b      	ldr	r3, [r3, #24]
 800c238:	4619      	mov	r1, r3
 800c23a:	4610      	mov	r0, r2
 800c23c:	f7ff fd3a 	bl	800bcb4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	3338      	adds	r3, #56	; 0x38
 800c244:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	695b      	ldr	r3, [r3, #20]
 800c24c:	4619      	mov	r1, r3
 800c24e:	4610      	mov	r0, r2
 800c250:	f7ff fd30 	bl	800bcb4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c258:	1c5a      	adds	r2, r3, #1
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	7858      	ldrb	r0, [r3, #1]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c26c:	2301      	movs	r3, #1
 800c26e:	f7ff fc8d 	bl	800bb8c <disk_write>
			fs->fsi_flag = 0;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2200      	movs	r2, #0
 800c276:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	785b      	ldrb	r3, [r3, #1]
 800c27c:	2200      	movs	r2, #0
 800c27e:	2100      	movs	r1, #0
 800c280:	4618      	mov	r0, r3
 800c282:	f7ff fca3 	bl	800bbcc <disk_ioctl>
 800c286:	4603      	mov	r3, r0
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d001      	beq.n	800c290 <sync_fs+0xcc>
 800c28c:	2301      	movs	r3, #1
 800c28e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	41615252 	.word	0x41615252
 800c2a0:	61417272 	.word	0x61417272

0800c2a4 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b083      	sub	sp, #12
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800c2ae:	683b      	ldr	r3, [r7, #0]
 800c2b0:	3b02      	subs	r3, #2
 800c2b2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	69db      	ldr	r3, [r3, #28]
 800c2b8:	3b02      	subs	r3, #2
 800c2ba:	683a      	ldr	r2, [r7, #0]
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d301      	bcc.n	800c2c4 <clust2sect+0x20>
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e008      	b.n	800c2d6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	895b      	ldrh	r3, [r3, #10]
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	fb03 f202 	mul.w	r2, r3, r2
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d4:	4413      	add	r3, r2
}
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	370c      	adds	r7, #12
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr

0800c2e2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800c2e2:	b580      	push	{r7, lr}
 800c2e4:	b086      	sub	sp, #24
 800c2e6:	af00      	add	r7, sp, #0
 800c2e8:	6078      	str	r0, [r7, #4]
 800c2ea:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	2b01      	cmp	r3, #1
 800c2f6:	d904      	bls.n	800c302 <get_fat+0x20>
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	69db      	ldr	r3, [r3, #28]
 800c2fc:	683a      	ldr	r2, [r7, #0]
 800c2fe:	429a      	cmp	r2, r3
 800c300:	d302      	bcc.n	800c308 <get_fat+0x26>
		val = 1;	/* Internal error */
 800c302:	2301      	movs	r3, #1
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	e0bb      	b.n	800c480 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800c308:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c30c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	2b03      	cmp	r3, #3
 800c314:	f000 8083 	beq.w	800c41e <get_fat+0x13c>
 800c318:	2b03      	cmp	r3, #3
 800c31a:	f300 80a7 	bgt.w	800c46c <get_fat+0x18a>
 800c31e:	2b01      	cmp	r3, #1
 800c320:	d002      	beq.n	800c328 <get_fat+0x46>
 800c322:	2b02      	cmp	r3, #2
 800c324:	d056      	beq.n	800c3d4 <get_fat+0xf2>
 800c326:	e0a1      	b.n	800c46c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800c328:	683b      	ldr	r3, [r7, #0]
 800c32a:	60fb      	str	r3, [r7, #12]
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	085b      	lsrs	r3, r3, #1
 800c330:	68fa      	ldr	r2, [r7, #12]
 800c332:	4413      	add	r3, r2
 800c334:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	899b      	ldrh	r3, [r3, #12]
 800c33e:	4619      	mov	r1, r3
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	fbb3 f3f1 	udiv	r3, r3, r1
 800c346:	4413      	add	r3, r2
 800c348:	4619      	mov	r1, r3
 800c34a:	6938      	ldr	r0, [r7, #16]
 800c34c:	f7ff ff0c 	bl	800c168 <move_window>
 800c350:	4603      	mov	r3, r0
 800c352:	2b00      	cmp	r3, #0
 800c354:	f040 808d 	bne.w	800c472 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	1c5a      	adds	r2, r3, #1
 800c35c:	60fa      	str	r2, [r7, #12]
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	8992      	ldrh	r2, [r2, #12]
 800c362:	fbb3 f1f2 	udiv	r1, r3, r2
 800c366:	fb01 f202 	mul.w	r2, r1, r2
 800c36a:	1a9b      	subs	r3, r3, r2
 800c36c:	693a      	ldr	r2, [r7, #16]
 800c36e:	4413      	add	r3, r2
 800c370:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c374:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c376:	693b      	ldr	r3, [r7, #16]
 800c378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	899b      	ldrh	r3, [r3, #12]
 800c37e:	4619      	mov	r1, r3
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	fbb3 f3f1 	udiv	r3, r3, r1
 800c386:	4413      	add	r3, r2
 800c388:	4619      	mov	r1, r3
 800c38a:	6938      	ldr	r0, [r7, #16]
 800c38c:	f7ff feec 	bl	800c168 <move_window>
 800c390:	4603      	mov	r3, r0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d16f      	bne.n	800c476 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800c396:	693b      	ldr	r3, [r7, #16]
 800c398:	899b      	ldrh	r3, [r3, #12]
 800c39a:	461a      	mov	r2, r3
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	fbb3 f1f2 	udiv	r1, r3, r2
 800c3a2:	fb01 f202 	mul.w	r2, r1, r2
 800c3a6:	1a9b      	subs	r3, r3, r2
 800c3a8:	693a      	ldr	r2, [r7, #16]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c3b0:	021b      	lsls	r3, r3, #8
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	f003 0301 	and.w	r3, r3, #1
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <get_fat+0xe8>
 800c3c4:	68bb      	ldr	r3, [r7, #8]
 800c3c6:	091b      	lsrs	r3, r3, #4
 800c3c8:	e002      	b.n	800c3d0 <get_fat+0xee>
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c3d0:	617b      	str	r3, [r7, #20]
			break;
 800c3d2:	e055      	b.n	800c480 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	899b      	ldrh	r3, [r3, #12]
 800c3dc:	085b      	lsrs	r3, r3, #1
 800c3de:	b29b      	uxth	r3, r3
 800c3e0:	4619      	mov	r1, r3
 800c3e2:	683b      	ldr	r3, [r7, #0]
 800c3e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c3e8:	4413      	add	r3, r2
 800c3ea:	4619      	mov	r1, r3
 800c3ec:	6938      	ldr	r0, [r7, #16]
 800c3ee:	f7ff febb 	bl	800c168 <move_window>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d140      	bne.n	800c47a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c3fe:	683b      	ldr	r3, [r7, #0]
 800c400:	005b      	lsls	r3, r3, #1
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	8992      	ldrh	r2, [r2, #12]
 800c406:	fbb3 f0f2 	udiv	r0, r3, r2
 800c40a:	fb00 f202 	mul.w	r2, r0, r2
 800c40e:	1a9b      	subs	r3, r3, r2
 800c410:	440b      	add	r3, r1
 800c412:	4618      	mov	r0, r3
 800c414:	f7ff fbf8 	bl	800bc08 <ld_word>
 800c418:	4603      	mov	r3, r0
 800c41a:	617b      	str	r3, [r7, #20]
			break;
 800c41c:	e030      	b.n	800c480 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c41e:	693b      	ldr	r3, [r7, #16]
 800c420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	899b      	ldrh	r3, [r3, #12]
 800c426:	089b      	lsrs	r3, r3, #2
 800c428:	b29b      	uxth	r3, r3
 800c42a:	4619      	mov	r1, r3
 800c42c:	683b      	ldr	r3, [r7, #0]
 800c42e:	fbb3 f3f1 	udiv	r3, r3, r1
 800c432:	4413      	add	r3, r2
 800c434:	4619      	mov	r1, r3
 800c436:	6938      	ldr	r0, [r7, #16]
 800c438:	f7ff fe96 	bl	800c168 <move_window>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d11d      	bne.n	800c47e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c448:	683b      	ldr	r3, [r7, #0]
 800c44a:	009b      	lsls	r3, r3, #2
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	8992      	ldrh	r2, [r2, #12]
 800c450:	fbb3 f0f2 	udiv	r0, r3, r2
 800c454:	fb00 f202 	mul.w	r2, r0, r2
 800c458:	1a9b      	subs	r3, r3, r2
 800c45a:	440b      	add	r3, r1
 800c45c:	4618      	mov	r0, r3
 800c45e:	f7ff fbeb 	bl	800bc38 <ld_dword>
 800c462:	4603      	mov	r3, r0
 800c464:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800c468:	617b      	str	r3, [r7, #20]
			break;
 800c46a:	e009      	b.n	800c480 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800c46c:	2301      	movs	r3, #1
 800c46e:	617b      	str	r3, [r7, #20]
 800c470:	e006      	b.n	800c480 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c472:	bf00      	nop
 800c474:	e004      	b.n	800c480 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800c476:	bf00      	nop
 800c478:	e002      	b.n	800c480 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800c47a:	bf00      	nop
 800c47c:	e000      	b.n	800c480 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800c47e:	bf00      	nop
		}
	}

	return val;
 800c480:	697b      	ldr	r3, [r7, #20]
}
 800c482:	4618      	mov	r0, r3
 800c484:	3718      	adds	r7, #24
 800c486:	46bd      	mov	sp, r7
 800c488:	bd80      	pop	{r7, pc}

0800c48a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800c48a:	b590      	push	{r4, r7, lr}
 800c48c:	b089      	sub	sp, #36	; 0x24
 800c48e:	af00      	add	r7, sp, #0
 800c490:	60f8      	str	r0, [r7, #12]
 800c492:	60b9      	str	r1, [r7, #8]
 800c494:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800c496:	2302      	movs	r3, #2
 800c498:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800c49a:	68bb      	ldr	r3, [r7, #8]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	f240 8109 	bls.w	800c6b4 <put_fat+0x22a>
 800c4a2:	68fb      	ldr	r3, [r7, #12]
 800c4a4:	69db      	ldr	r3, [r3, #28]
 800c4a6:	68ba      	ldr	r2, [r7, #8]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	f080 8103 	bcs.w	800c6b4 <put_fat+0x22a>
		switch (fs->fs_type) {
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	781b      	ldrb	r3, [r3, #0]
 800c4b2:	2b03      	cmp	r3, #3
 800c4b4:	f000 80b6 	beq.w	800c624 <put_fat+0x19a>
 800c4b8:	2b03      	cmp	r3, #3
 800c4ba:	f300 80fb 	bgt.w	800c6b4 <put_fat+0x22a>
 800c4be:	2b01      	cmp	r3, #1
 800c4c0:	d003      	beq.n	800c4ca <put_fat+0x40>
 800c4c2:	2b02      	cmp	r3, #2
 800c4c4:	f000 8083 	beq.w	800c5ce <put_fat+0x144>
 800c4c8:	e0f4      	b.n	800c6b4 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800c4ca:	68bb      	ldr	r3, [r7, #8]
 800c4cc:	61bb      	str	r3, [r7, #24]
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	085b      	lsrs	r3, r3, #1
 800c4d2:	69ba      	ldr	r2, [r7, #24]
 800c4d4:	4413      	add	r3, r2
 800c4d6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	899b      	ldrh	r3, [r3, #12]
 800c4e0:	4619      	mov	r1, r3
 800c4e2:	69bb      	ldr	r3, [r7, #24]
 800c4e4:	fbb3 f3f1 	udiv	r3, r3, r1
 800c4e8:	4413      	add	r3, r2
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f7ff fe3b 	bl	800c168 <move_window>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c4f6:	7ffb      	ldrb	r3, [r7, #31]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f040 80d4 	bne.w	800c6a6 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c504:	69bb      	ldr	r3, [r7, #24]
 800c506:	1c5a      	adds	r2, r3, #1
 800c508:	61ba      	str	r2, [r7, #24]
 800c50a:	68fa      	ldr	r2, [r7, #12]
 800c50c:	8992      	ldrh	r2, [r2, #12]
 800c50e:	fbb3 f0f2 	udiv	r0, r3, r2
 800c512:	fb00 f202 	mul.w	r2, r0, r2
 800c516:	1a9b      	subs	r3, r3, r2
 800c518:	440b      	add	r3, r1
 800c51a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00d      	beq.n	800c542 <put_fat+0xb8>
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	b25b      	sxtb	r3, r3
 800c52c:	f003 030f 	and.w	r3, r3, #15
 800c530:	b25a      	sxtb	r2, r3
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	b2db      	uxtb	r3, r3
 800c536:	011b      	lsls	r3, r3, #4
 800c538:	b25b      	sxtb	r3, r3
 800c53a:	4313      	orrs	r3, r2
 800c53c:	b25b      	sxtb	r3, r3
 800c53e:	b2db      	uxtb	r3, r3
 800c540:	e001      	b.n	800c546 <put_fat+0xbc>
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	b2db      	uxtb	r3, r3
 800c546:	697a      	ldr	r2, [r7, #20]
 800c548:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	2201      	movs	r2, #1
 800c54e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	899b      	ldrh	r3, [r3, #12]
 800c558:	4619      	mov	r1, r3
 800c55a:	69bb      	ldr	r3, [r7, #24]
 800c55c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c560:	4413      	add	r3, r2
 800c562:	4619      	mov	r1, r3
 800c564:	68f8      	ldr	r0, [r7, #12]
 800c566:	f7ff fdff 	bl	800c168 <move_window>
 800c56a:	4603      	mov	r3, r0
 800c56c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c56e:	7ffb      	ldrb	r3, [r7, #31]
 800c570:	2b00      	cmp	r3, #0
 800c572:	f040 809a 	bne.w	800c6aa <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	899b      	ldrh	r3, [r3, #12]
 800c580:	461a      	mov	r2, r3
 800c582:	69bb      	ldr	r3, [r7, #24]
 800c584:	fbb3 f0f2 	udiv	r0, r3, r2
 800c588:	fb00 f202 	mul.w	r2, r0, r2
 800c58c:	1a9b      	subs	r3, r3, r2
 800c58e:	440b      	add	r3, r1
 800c590:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	f003 0301 	and.w	r3, r3, #1
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d003      	beq.n	800c5a4 <put_fat+0x11a>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	091b      	lsrs	r3, r3, #4
 800c5a0:	b2db      	uxtb	r3, r3
 800c5a2:	e00e      	b.n	800c5c2 <put_fat+0x138>
 800c5a4:	697b      	ldr	r3, [r7, #20]
 800c5a6:	781b      	ldrb	r3, [r3, #0]
 800c5a8:	b25b      	sxtb	r3, r3
 800c5aa:	f023 030f 	bic.w	r3, r3, #15
 800c5ae:	b25a      	sxtb	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	0a1b      	lsrs	r3, r3, #8
 800c5b4:	b25b      	sxtb	r3, r3
 800c5b6:	f003 030f 	and.w	r3, r3, #15
 800c5ba:	b25b      	sxtb	r3, r3
 800c5bc:	4313      	orrs	r3, r2
 800c5be:	b25b      	sxtb	r3, r3
 800c5c0:	b2db      	uxtb	r3, r3
 800c5c2:	697a      	ldr	r2, [r7, #20]
 800c5c4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	2201      	movs	r2, #1
 800c5ca:	70da      	strb	r2, [r3, #3]
			break;
 800c5cc:	e072      	b.n	800c6b4 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	899b      	ldrh	r3, [r3, #12]
 800c5d6:	085b      	lsrs	r3, r3, #1
 800c5d8:	b29b      	uxth	r3, r3
 800c5da:	4619      	mov	r1, r3
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5e2:	4413      	add	r3, r2
 800c5e4:	4619      	mov	r1, r3
 800c5e6:	68f8      	ldr	r0, [r7, #12]
 800c5e8:	f7ff fdbe 	bl	800c168 <move_window>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c5f0:	7ffb      	ldrb	r3, [r7, #31]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d15b      	bne.n	800c6ae <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	005b      	lsls	r3, r3, #1
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	8992      	ldrh	r2, [r2, #12]
 800c604:	fbb3 f0f2 	udiv	r0, r3, r2
 800c608:	fb00 f202 	mul.w	r2, r0, r2
 800c60c:	1a9b      	subs	r3, r3, r2
 800c60e:	440b      	add	r3, r1
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	b292      	uxth	r2, r2
 800c614:	4611      	mov	r1, r2
 800c616:	4618      	mov	r0, r3
 800c618:	f7ff fb31 	bl	800bc7e <st_word>
			fs->wflag = 1;
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	2201      	movs	r2, #1
 800c620:	70da      	strb	r2, [r3, #3]
			break;
 800c622:	e047      	b.n	800c6b4 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	899b      	ldrh	r3, [r3, #12]
 800c62c:	089b      	lsrs	r3, r3, #2
 800c62e:	b29b      	uxth	r3, r3
 800c630:	4619      	mov	r1, r3
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	fbb3 f3f1 	udiv	r3, r3, r1
 800c638:	4413      	add	r3, r2
 800c63a:	4619      	mov	r1, r3
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f7ff fd93 	bl	800c168 <move_window>
 800c642:	4603      	mov	r3, r0
 800c644:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800c646:	7ffb      	ldrb	r3, [r7, #31]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d132      	bne.n	800c6b2 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	009b      	lsls	r3, r3, #2
 800c65c:	68fa      	ldr	r2, [r7, #12]
 800c65e:	8992      	ldrh	r2, [r2, #12]
 800c660:	fbb3 f0f2 	udiv	r0, r3, r2
 800c664:	fb00 f202 	mul.w	r2, r0, r2
 800c668:	1a9b      	subs	r3, r3, r2
 800c66a:	440b      	add	r3, r1
 800c66c:	4618      	mov	r0, r3
 800c66e:	f7ff fae3 	bl	800bc38 <ld_dword>
 800c672:	4603      	mov	r3, r0
 800c674:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c678:	4323      	orrs	r3, r4
 800c67a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	009b      	lsls	r3, r3, #2
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	8992      	ldrh	r2, [r2, #12]
 800c68a:	fbb3 f0f2 	udiv	r0, r3, r2
 800c68e:	fb00 f202 	mul.w	r2, r0, r2
 800c692:	1a9b      	subs	r3, r3, r2
 800c694:	440b      	add	r3, r1
 800c696:	6879      	ldr	r1, [r7, #4]
 800c698:	4618      	mov	r0, r3
 800c69a:	f7ff fb0b 	bl	800bcb4 <st_dword>
			fs->wflag = 1;
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	2201      	movs	r2, #1
 800c6a2:	70da      	strb	r2, [r3, #3]
			break;
 800c6a4:	e006      	b.n	800c6b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c6a6:	bf00      	nop
 800c6a8:	e004      	b.n	800c6b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c6aa:	bf00      	nop
 800c6ac:	e002      	b.n	800c6b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c6ae:	bf00      	nop
 800c6b0:	e000      	b.n	800c6b4 <put_fat+0x22a>
			if (res != FR_OK) break;
 800c6b2:	bf00      	nop
		}
	}
	return res;
 800c6b4:	7ffb      	ldrb	r3, [r7, #31]
}
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	3724      	adds	r7, #36	; 0x24
 800c6ba:	46bd      	mov	sp, r7
 800c6bc:	bd90      	pop	{r4, r7, pc}

0800c6be <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800c6be:	b580      	push	{r7, lr}
 800c6c0:	b088      	sub	sp, #32
 800c6c2:	af00      	add	r7, sp, #0
 800c6c4:	60f8      	str	r0, [r7, #12]
 800c6c6:	60b9      	str	r1, [r7, #8]
 800c6c8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800c6ca:	2300      	movs	r3, #0
 800c6cc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800c6d4:	68bb      	ldr	r3, [r7, #8]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d904      	bls.n	800c6e4 <remove_chain+0x26>
 800c6da:	69bb      	ldr	r3, [r7, #24]
 800c6dc:	69db      	ldr	r3, [r3, #28]
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	429a      	cmp	r2, r3
 800c6e2:	d301      	bcc.n	800c6e8 <remove_chain+0x2a>
 800c6e4:	2302      	movs	r3, #2
 800c6e6:	e04b      	b.n	800c780 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00c      	beq.n	800c708 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800c6ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	69b8      	ldr	r0, [r7, #24]
 800c6f6:	f7ff fec8 	bl	800c48a <put_fat>
 800c6fa:	4603      	mov	r3, r0
 800c6fc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800c6fe:	7ffb      	ldrb	r3, [r7, #31]
 800c700:	2b00      	cmp	r3, #0
 800c702:	d001      	beq.n	800c708 <remove_chain+0x4a>
 800c704:	7ffb      	ldrb	r3, [r7, #31]
 800c706:	e03b      	b.n	800c780 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800c708:	68b9      	ldr	r1, [r7, #8]
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f7ff fde9 	bl	800c2e2 <get_fat>
 800c710:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800c712:	697b      	ldr	r3, [r7, #20]
 800c714:	2b00      	cmp	r3, #0
 800c716:	d031      	beq.n	800c77c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800c718:	697b      	ldr	r3, [r7, #20]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d101      	bne.n	800c722 <remove_chain+0x64>
 800c71e:	2302      	movs	r3, #2
 800c720:	e02e      	b.n	800c780 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c728:	d101      	bne.n	800c72e <remove_chain+0x70>
 800c72a:	2301      	movs	r3, #1
 800c72c:	e028      	b.n	800c780 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800c72e:	2200      	movs	r2, #0
 800c730:	68b9      	ldr	r1, [r7, #8]
 800c732:	69b8      	ldr	r0, [r7, #24]
 800c734:	f7ff fea9 	bl	800c48a <put_fat>
 800c738:	4603      	mov	r3, r0
 800c73a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800c73c:	7ffb      	ldrb	r3, [r7, #31]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <remove_chain+0x88>
 800c742:	7ffb      	ldrb	r3, [r7, #31]
 800c744:	e01c      	b.n	800c780 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800c746:	69bb      	ldr	r3, [r7, #24]
 800c748:	699a      	ldr	r2, [r3, #24]
 800c74a:	69bb      	ldr	r3, [r7, #24]
 800c74c:	69db      	ldr	r3, [r3, #28]
 800c74e:	3b02      	subs	r3, #2
 800c750:	429a      	cmp	r2, r3
 800c752:	d20b      	bcs.n	800c76c <remove_chain+0xae>
			fs->free_clst++;
 800c754:	69bb      	ldr	r3, [r7, #24]
 800c756:	699b      	ldr	r3, [r3, #24]
 800c758:	1c5a      	adds	r2, r3, #1
 800c75a:	69bb      	ldr	r3, [r7, #24]
 800c75c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800c75e:	69bb      	ldr	r3, [r7, #24]
 800c760:	791b      	ldrb	r3, [r3, #4]
 800c762:	f043 0301 	orr.w	r3, r3, #1
 800c766:	b2da      	uxtb	r2, r3
 800c768:	69bb      	ldr	r3, [r7, #24]
 800c76a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	429a      	cmp	r2, r3
 800c778:	d3c6      	bcc.n	800c708 <remove_chain+0x4a>
 800c77a:	e000      	b.n	800c77e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800c77c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3720      	adds	r7, #32
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
 800c790:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d10d      	bne.n	800c7ba <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	695b      	ldr	r3, [r3, #20]
 800c7a2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800c7a4:	69bb      	ldr	r3, [r7, #24]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d004      	beq.n	800c7b4 <create_chain+0x2c>
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	69db      	ldr	r3, [r3, #28]
 800c7ae:	69ba      	ldr	r2, [r7, #24]
 800c7b0:	429a      	cmp	r2, r3
 800c7b2:	d31b      	bcc.n	800c7ec <create_chain+0x64>
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	61bb      	str	r3, [r7, #24]
 800c7b8:	e018      	b.n	800c7ec <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800c7ba:	6839      	ldr	r1, [r7, #0]
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7ff fd90 	bl	800c2e2 <get_fat>
 800c7c2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b01      	cmp	r3, #1
 800c7c8:	d801      	bhi.n	800c7ce <create_chain+0x46>
 800c7ca:	2301      	movs	r3, #1
 800c7cc:	e070      	b.n	800c8b0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c7d4:	d101      	bne.n	800c7da <create_chain+0x52>
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	e06a      	b.n	800c8b0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800c7da:	693b      	ldr	r3, [r7, #16]
 800c7dc:	69db      	ldr	r3, [r3, #28]
 800c7de:	68fa      	ldr	r2, [r7, #12]
 800c7e0:	429a      	cmp	r2, r3
 800c7e2:	d201      	bcs.n	800c7e8 <create_chain+0x60>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	e063      	b.n	800c8b0 <create_chain+0x128>
		scl = clst;
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	69db      	ldr	r3, [r3, #28]
 800c7fa:	69fa      	ldr	r2, [r7, #28]
 800c7fc:	429a      	cmp	r2, r3
 800c7fe:	d307      	bcc.n	800c810 <create_chain+0x88>
				ncl = 2;
 800c800:	2302      	movs	r3, #2
 800c802:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800c804:	69fa      	ldr	r2, [r7, #28]
 800c806:	69bb      	ldr	r3, [r7, #24]
 800c808:	429a      	cmp	r2, r3
 800c80a:	d901      	bls.n	800c810 <create_chain+0x88>
 800c80c:	2300      	movs	r3, #0
 800c80e:	e04f      	b.n	800c8b0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800c810:	69f9      	ldr	r1, [r7, #28]
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f7ff fd65 	bl	800c2e2 <get_fat>
 800c818:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d00e      	beq.n	800c83e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d003      	beq.n	800c82e <create_chain+0xa6>
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c82c:	d101      	bne.n	800c832 <create_chain+0xaa>
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	e03e      	b.n	800c8b0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800c832:	69fa      	ldr	r2, [r7, #28]
 800c834:	69bb      	ldr	r3, [r7, #24]
 800c836:	429a      	cmp	r2, r3
 800c838:	d1da      	bne.n	800c7f0 <create_chain+0x68>
 800c83a:	2300      	movs	r3, #0
 800c83c:	e038      	b.n	800c8b0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800c83e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800c840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c844:	69f9      	ldr	r1, [r7, #28]
 800c846:	6938      	ldr	r0, [r7, #16]
 800c848:	f7ff fe1f 	bl	800c48a <put_fat>
 800c84c:	4603      	mov	r3, r0
 800c84e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800c850:	7dfb      	ldrb	r3, [r7, #23]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d109      	bne.n	800c86a <create_chain+0xe2>
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d006      	beq.n	800c86a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800c85c:	69fa      	ldr	r2, [r7, #28]
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	6938      	ldr	r0, [r7, #16]
 800c862:	f7ff fe12 	bl	800c48a <put_fat>
 800c866:	4603      	mov	r3, r0
 800c868:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800c86a:	7dfb      	ldrb	r3, [r7, #23]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d116      	bne.n	800c89e <create_chain+0x116>
		fs->last_clst = ncl;
 800c870:	693b      	ldr	r3, [r7, #16]
 800c872:	69fa      	ldr	r2, [r7, #28]
 800c874:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	699a      	ldr	r2, [r3, #24]
 800c87a:	693b      	ldr	r3, [r7, #16]
 800c87c:	69db      	ldr	r3, [r3, #28]
 800c87e:	3b02      	subs	r3, #2
 800c880:	429a      	cmp	r2, r3
 800c882:	d804      	bhi.n	800c88e <create_chain+0x106>
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	699b      	ldr	r3, [r3, #24]
 800c888:	1e5a      	subs	r2, r3, #1
 800c88a:	693b      	ldr	r3, [r7, #16]
 800c88c:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	791b      	ldrb	r3, [r3, #4]
 800c892:	f043 0301 	orr.w	r3, r3, #1
 800c896:	b2da      	uxtb	r2, r3
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	711a      	strb	r2, [r3, #4]
 800c89c:	e007      	b.n	800c8ae <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800c89e:	7dfb      	ldrb	r3, [r7, #23]
 800c8a0:	2b01      	cmp	r3, #1
 800c8a2:	d102      	bne.n	800c8aa <create_chain+0x122>
 800c8a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c8a8:	e000      	b.n	800c8ac <create_chain+0x124>
 800c8aa:	2301      	movs	r3, #1
 800c8ac:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800c8ae:	69fb      	ldr	r3, [r7, #28]
}
 800c8b0:	4618      	mov	r0, r3
 800c8b2:	3720      	adds	r7, #32
 800c8b4:	46bd      	mov	sp, r7
 800c8b6:	bd80      	pop	{r7, pc}

0800c8b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
 800c8c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8cc:	3304      	adds	r3, #4
 800c8ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	899b      	ldrh	r3, [r3, #12]
 800c8d4:	461a      	mov	r2, r3
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	8952      	ldrh	r2, [r2, #10]
 800c8e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c8e4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c8e6:	693b      	ldr	r3, [r7, #16]
 800c8e8:	1d1a      	adds	r2, r3, #4
 800c8ea:	613a      	str	r2, [r7, #16]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d101      	bne.n	800c8fa <clmt_clust+0x42>
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	e010      	b.n	800c91c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800c8fa:	697a      	ldr	r2, [r7, #20]
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	429a      	cmp	r2, r3
 800c900:	d307      	bcc.n	800c912 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800c902:	697a      	ldr	r2, [r7, #20]
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	617b      	str	r3, [r7, #20]
 800c90a:	693b      	ldr	r3, [r7, #16]
 800c90c:	3304      	adds	r3, #4
 800c90e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800c910:	e7e9      	b.n	800c8e6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800c912:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800c914:	693b      	ldr	r3, [r7, #16]
 800c916:	681a      	ldr	r2, [r3, #0]
 800c918:	697b      	ldr	r3, [r7, #20]
 800c91a:	4413      	add	r3, r2
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	371c      	adds	r7, #28
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
 800c930:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c93e:	d204      	bcs.n	800c94a <dir_sdi+0x22>
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	f003 031f 	and.w	r3, r3, #31
 800c946:	2b00      	cmp	r3, #0
 800c948:	d001      	beq.n	800c94e <dir_sdi+0x26>
		return FR_INT_ERR;
 800c94a:	2302      	movs	r3, #2
 800c94c:	e071      	b.n	800ca32 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	683a      	ldr	r2, [r7, #0]
 800c952:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	689b      	ldr	r3, [r3, #8]
 800c958:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d106      	bne.n	800c96e <dir_sdi+0x46>
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	781b      	ldrb	r3, [r3, #0]
 800c964:	2b02      	cmp	r3, #2
 800c966:	d902      	bls.n	800c96e <dir_sdi+0x46>
		clst = fs->dirbase;
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10c      	bne.n	800c98e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	095b      	lsrs	r3, r3, #5
 800c978:	693a      	ldr	r2, [r7, #16]
 800c97a:	8912      	ldrh	r2, [r2, #8]
 800c97c:	4293      	cmp	r3, r2
 800c97e:	d301      	bcc.n	800c984 <dir_sdi+0x5c>
 800c980:	2302      	movs	r3, #2
 800c982:	e056      	b.n	800ca32 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800c984:	693b      	ldr	r3, [r7, #16]
 800c986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	61da      	str	r2, [r3, #28]
 800c98c:	e02d      	b.n	800c9ea <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	895b      	ldrh	r3, [r3, #10]
 800c992:	461a      	mov	r2, r3
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	899b      	ldrh	r3, [r3, #12]
 800c998:	fb02 f303 	mul.w	r3, r2, r3
 800c99c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c99e:	e019      	b.n	800c9d4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	6979      	ldr	r1, [r7, #20]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f7ff fc9c 	bl	800c2e2 <get_fat>
 800c9aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9b2:	d101      	bne.n	800c9b8 <dir_sdi+0x90>
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	e03c      	b.n	800ca32 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	2b01      	cmp	r3, #1
 800c9bc:	d904      	bls.n	800c9c8 <dir_sdi+0xa0>
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	69db      	ldr	r3, [r3, #28]
 800c9c2:	697a      	ldr	r2, [r7, #20]
 800c9c4:	429a      	cmp	r2, r3
 800c9c6:	d301      	bcc.n	800c9cc <dir_sdi+0xa4>
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	e032      	b.n	800ca32 <dir_sdi+0x10a>
			ofs -= csz;
 800c9cc:	683a      	ldr	r2, [r7, #0]
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800c9d4:	683a      	ldr	r2, [r7, #0]
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d2e1      	bcs.n	800c9a0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800c9dc:	6979      	ldr	r1, [r7, #20]
 800c9de:	6938      	ldr	r0, [r7, #16]
 800c9e0:	f7ff fc60 	bl	800c2a4 <clust2sect>
 800c9e4:	4602      	mov	r2, r0
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	697a      	ldr	r2, [r7, #20]
 800c9ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d101      	bne.n	800c9fc <dir_sdi+0xd4>
 800c9f8:	2302      	movs	r3, #2
 800c9fa:	e01a      	b.n	800ca32 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	69da      	ldr	r2, [r3, #28]
 800ca00:	693b      	ldr	r3, [r7, #16]
 800ca02:	899b      	ldrh	r3, [r3, #12]
 800ca04:	4619      	mov	r1, r3
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	fbb3 f3f1 	udiv	r3, r3, r1
 800ca0c:	441a      	add	r2, r3
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	899b      	ldrh	r3, [r3, #12]
 800ca1c:	461a      	mov	r2, r3
 800ca1e:	683b      	ldr	r3, [r7, #0]
 800ca20:	fbb3 f0f2 	udiv	r0, r3, r2
 800ca24:	fb00 f202 	mul.w	r2, r0, r2
 800ca28:	1a9b      	subs	r3, r3, r2
 800ca2a:	18ca      	adds	r2, r1, r3
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ca30:	2300      	movs	r3, #0
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	3718      	adds	r7, #24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	bd80      	pop	{r7, pc}

0800ca3a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800ca3a:	b580      	push	{r7, lr}
 800ca3c:	b086      	sub	sp, #24
 800ca3e:	af00      	add	r7, sp, #0
 800ca40:	6078      	str	r0, [r7, #4]
 800ca42:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	695b      	ldr	r3, [r3, #20]
 800ca4e:	3320      	adds	r3, #32
 800ca50:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	69db      	ldr	r3, [r3, #28]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d003      	beq.n	800ca62 <dir_next+0x28>
 800ca5a:	68bb      	ldr	r3, [r7, #8]
 800ca5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca60:	d301      	bcc.n	800ca66 <dir_next+0x2c>
 800ca62:	2304      	movs	r3, #4
 800ca64:	e0bb      	b.n	800cbde <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	899b      	ldrh	r3, [r3, #12]
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca72:	fb01 f202 	mul.w	r2, r1, r2
 800ca76:	1a9b      	subs	r3, r3, r2
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	f040 809d 	bne.w	800cbb8 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	1c5a      	adds	r2, r3, #1
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	699b      	ldr	r3, [r3, #24]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d10b      	bne.n	800caa8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	095b      	lsrs	r3, r3, #5
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	8912      	ldrh	r2, [r2, #8]
 800ca98:	4293      	cmp	r3, r2
 800ca9a:	f0c0 808d 	bcc.w	800cbb8 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	2200      	movs	r2, #0
 800caa2:	61da      	str	r2, [r3, #28]
 800caa4:	2304      	movs	r3, #4
 800caa6:	e09a      	b.n	800cbde <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	899b      	ldrh	r3, [r3, #12]
 800caac:	461a      	mov	r2, r3
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	fbb3 f3f2 	udiv	r3, r3, r2
 800cab4:	68fa      	ldr	r2, [r7, #12]
 800cab6:	8952      	ldrh	r2, [r2, #10]
 800cab8:	3a01      	subs	r2, #1
 800caba:	4013      	ands	r3, r2
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d17b      	bne.n	800cbb8 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	699b      	ldr	r3, [r3, #24]
 800cac6:	4619      	mov	r1, r3
 800cac8:	4610      	mov	r0, r2
 800caca:	f7ff fc0a 	bl	800c2e2 <get_fat>
 800cace:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800cad0:	697b      	ldr	r3, [r7, #20]
 800cad2:	2b01      	cmp	r3, #1
 800cad4:	d801      	bhi.n	800cada <dir_next+0xa0>
 800cad6:	2302      	movs	r3, #2
 800cad8:	e081      	b.n	800cbde <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800cada:	697b      	ldr	r3, [r7, #20]
 800cadc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cae0:	d101      	bne.n	800cae6 <dir_next+0xac>
 800cae2:	2301      	movs	r3, #1
 800cae4:	e07b      	b.n	800cbde <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	69db      	ldr	r3, [r3, #28]
 800caea:	697a      	ldr	r2, [r7, #20]
 800caec:	429a      	cmp	r2, r3
 800caee:	d359      	bcc.n	800cba4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d104      	bne.n	800cb00 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	2200      	movs	r2, #0
 800cafa:	61da      	str	r2, [r3, #28]
 800cafc:	2304      	movs	r3, #4
 800cafe:	e06e      	b.n	800cbde <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800cb00:	687a      	ldr	r2, [r7, #4]
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	4619      	mov	r1, r3
 800cb08:	4610      	mov	r0, r2
 800cb0a:	f7ff fe3d 	bl	800c788 <create_chain>
 800cb0e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d101      	bne.n	800cb1a <dir_next+0xe0>
 800cb16:	2307      	movs	r3, #7
 800cb18:	e061      	b.n	800cbde <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	2b01      	cmp	r3, #1
 800cb1e:	d101      	bne.n	800cb24 <dir_next+0xea>
 800cb20:	2302      	movs	r3, #2
 800cb22:	e05c      	b.n	800cbde <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb2a:	d101      	bne.n	800cb30 <dir_next+0xf6>
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	e056      	b.n	800cbde <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800cb30:	68f8      	ldr	r0, [r7, #12]
 800cb32:	f7ff fad5 	bl	800c0e0 <sync_window>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <dir_next+0x106>
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	e04e      	b.n	800cbde <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	899b      	ldrh	r3, [r3, #12]
 800cb4a:	461a      	mov	r2, r3
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	f7ff f8fe 	bl	800bd4e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb52:	2300      	movs	r3, #0
 800cb54:	613b      	str	r3, [r7, #16]
 800cb56:	6979      	ldr	r1, [r7, #20]
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f7ff fba3 	bl	800c2a4 <clust2sect>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	635a      	str	r2, [r3, #52]	; 0x34
 800cb64:	e012      	b.n	800cb8c <dir_next+0x152>
						fs->wflag = 1;
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2201      	movs	r2, #1
 800cb6a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff fab7 	bl	800c0e0 <sync_window>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d001      	beq.n	800cb7c <dir_next+0x142>
 800cb78:	2301      	movs	r3, #1
 800cb7a:	e030      	b.n	800cbde <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	3301      	adds	r3, #1
 800cb80:	613b      	str	r3, [r7, #16]
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb86:	1c5a      	adds	r2, r3, #1
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	635a      	str	r2, [r3, #52]	; 0x34
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	895b      	ldrh	r3, [r3, #10]
 800cb90:	461a      	mov	r2, r3
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	4293      	cmp	r3, r2
 800cb96:	d3e6      	bcc.n	800cb66 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cb9c:	693b      	ldr	r3, [r7, #16]
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	697a      	ldr	r2, [r7, #20]
 800cba8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800cbaa:	6979      	ldr	r1, [r7, #20]
 800cbac:	68f8      	ldr	r0, [r7, #12]
 800cbae:	f7ff fb79 	bl	800c2a4 <clust2sect>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	68ba      	ldr	r2, [r7, #8]
 800cbbc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	899b      	ldrh	r3, [r3, #12]
 800cbc8:	461a      	mov	r2, r3
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	fbb3 f0f2 	udiv	r0, r3, r2
 800cbd0:	fb00 f202 	mul.w	r2, r0, r2
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	18ca      	adds	r2, r1, r3
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800cbdc:	2300      	movs	r3, #0
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	3718      	adds	r7, #24
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd80      	pop	{r7, pc}

0800cbe6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800cbe6:	b580      	push	{r7, lr}
 800cbe8:	b086      	sub	sp, #24
 800cbea:	af00      	add	r7, sp, #0
 800cbec:	6078      	str	r0, [r7, #4]
 800cbee:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800cbf6:	2100      	movs	r1, #0
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f7ff fe95 	bl	800c928 <dir_sdi>
 800cbfe:	4603      	mov	r3, r0
 800cc00:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cc02:	7dfb      	ldrb	r3, [r7, #23]
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d12b      	bne.n	800cc60 <dir_alloc+0x7a>
		n = 0;
 800cc08:	2300      	movs	r3, #0
 800cc0a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	69db      	ldr	r3, [r3, #28]
 800cc10:	4619      	mov	r1, r3
 800cc12:	68f8      	ldr	r0, [r7, #12]
 800cc14:	f7ff faa8 	bl	800c168 <move_window>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800cc1c:	7dfb      	ldrb	r3, [r7, #23]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d11d      	bne.n	800cc5e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6a1b      	ldr	r3, [r3, #32]
 800cc26:	781b      	ldrb	r3, [r3, #0]
 800cc28:	2be5      	cmp	r3, #229	; 0xe5
 800cc2a:	d004      	beq.n	800cc36 <dir_alloc+0x50>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	6a1b      	ldr	r3, [r3, #32]
 800cc30:	781b      	ldrb	r3, [r3, #0]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d107      	bne.n	800cc46 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800cc36:	693b      	ldr	r3, [r7, #16]
 800cc38:	3301      	adds	r3, #1
 800cc3a:	613b      	str	r3, [r7, #16]
 800cc3c:	693a      	ldr	r2, [r7, #16]
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	429a      	cmp	r2, r3
 800cc42:	d102      	bne.n	800cc4a <dir_alloc+0x64>
 800cc44:	e00c      	b.n	800cc60 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800cc46:	2300      	movs	r3, #0
 800cc48:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800cc4a:	2101      	movs	r1, #1
 800cc4c:	6878      	ldr	r0, [r7, #4]
 800cc4e:	f7ff fef4 	bl	800ca3a <dir_next>
 800cc52:	4603      	mov	r3, r0
 800cc54:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800cc56:	7dfb      	ldrb	r3, [r7, #23]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d0d7      	beq.n	800cc0c <dir_alloc+0x26>
 800cc5c:	e000      	b.n	800cc60 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800cc5e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
 800cc62:	2b04      	cmp	r3, #4
 800cc64:	d101      	bne.n	800cc6a <dir_alloc+0x84>
 800cc66:	2307      	movs	r3, #7
 800cc68:	75fb      	strb	r3, [r7, #23]
	return res;
 800cc6a:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3718      	adds	r7, #24
 800cc70:	46bd      	mov	sp, r7
 800cc72:	bd80      	pop	{r7, pc}

0800cc74 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800cc74:	b580      	push	{r7, lr}
 800cc76:	b084      	sub	sp, #16
 800cc78:	af00      	add	r7, sp, #0
 800cc7a:	6078      	str	r0, [r7, #4]
 800cc7c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	331a      	adds	r3, #26
 800cc82:	4618      	mov	r0, r3
 800cc84:	f7fe ffc0 	bl	800bc08 <ld_word>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	781b      	ldrb	r3, [r3, #0]
 800cc90:	2b03      	cmp	r3, #3
 800cc92:	d109      	bne.n	800cca8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	3314      	adds	r3, #20
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fe ffb5 	bl	800bc08 <ld_word>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	041b      	lsls	r3, r3, #16
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	4313      	orrs	r3, r2
 800cca6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800cca8:	68fb      	ldr	r3, [r7, #12]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}

0800ccb2 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ccb2:	b580      	push	{r7, lr}
 800ccb4:	b084      	sub	sp, #16
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	60f8      	str	r0, [r7, #12]
 800ccba:	60b9      	str	r1, [r7, #8]
 800ccbc:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	331a      	adds	r3, #26
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	b292      	uxth	r2, r2
 800ccc6:	4611      	mov	r1, r2
 800ccc8:	4618      	mov	r0, r3
 800ccca:	f7fe ffd8 	bl	800bc7e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	781b      	ldrb	r3, [r3, #0]
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	d109      	bne.n	800ccea <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ccd6:	68bb      	ldr	r3, [r7, #8]
 800ccd8:	f103 0214 	add.w	r2, r3, #20
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	0c1b      	lsrs	r3, r3, #16
 800cce0:	b29b      	uxth	r3, r3
 800cce2:	4619      	mov	r1, r3
 800cce4:	4610      	mov	r0, r2
 800cce6:	f7fe ffca 	bl	800bc7e <st_word>
	}
}
 800ccea:	bf00      	nop
 800ccec:	3710      	adds	r7, #16
 800ccee:	46bd      	mov	sp, r7
 800ccf0:	bd80      	pop	{r7, pc}
	...

0800ccf4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800ccf4:	b590      	push	{r4, r7, lr}
 800ccf6:	b087      	sub	sp, #28
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	331a      	adds	r3, #26
 800cd02:	4618      	mov	r0, r3
 800cd04:	f7fe ff80 	bl	800bc08 <ld_word>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d001      	beq.n	800cd12 <cmp_lfn+0x1e>
 800cd0e:	2300      	movs	r3, #0
 800cd10:	e059      	b.n	800cdc6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	781b      	ldrb	r3, [r3, #0]
 800cd16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cd1a:	1e5a      	subs	r2, r3, #1
 800cd1c:	4613      	mov	r3, r2
 800cd1e:	005b      	lsls	r3, r3, #1
 800cd20:	4413      	add	r3, r2
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	4413      	add	r3, r2
 800cd26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd28:	2301      	movs	r3, #1
 800cd2a:	81fb      	strh	r3, [r7, #14]
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	613b      	str	r3, [r7, #16]
 800cd30:	e033      	b.n	800cd9a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800cd32:	4a27      	ldr	r2, [pc, #156]	; (800cdd0 <cmp_lfn+0xdc>)
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	4413      	add	r3, r2
 800cd38:	781b      	ldrb	r3, [r3, #0]
 800cd3a:	461a      	mov	r2, r3
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	4413      	add	r3, r2
 800cd40:	4618      	mov	r0, r3
 800cd42:	f7fe ff61 	bl	800bc08 <ld_word>
 800cd46:	4603      	mov	r3, r0
 800cd48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800cd4a:	89fb      	ldrh	r3, [r7, #14]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d01a      	beq.n	800cd86 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800cd50:	697b      	ldr	r3, [r7, #20]
 800cd52:	2bfe      	cmp	r3, #254	; 0xfe
 800cd54:	d812      	bhi.n	800cd7c <cmp_lfn+0x88>
 800cd56:	89bb      	ldrh	r3, [r7, #12]
 800cd58:	4618      	mov	r0, r3
 800cd5a:	f001 fd75 	bl	800e848 <ff_wtoupper>
 800cd5e:	4603      	mov	r3, r0
 800cd60:	461c      	mov	r4, r3
 800cd62:	697b      	ldr	r3, [r7, #20]
 800cd64:	1c5a      	adds	r2, r3, #1
 800cd66:	617a      	str	r2, [r7, #20]
 800cd68:	005b      	lsls	r3, r3, #1
 800cd6a:	687a      	ldr	r2, [r7, #4]
 800cd6c:	4413      	add	r3, r2
 800cd6e:	881b      	ldrh	r3, [r3, #0]
 800cd70:	4618      	mov	r0, r3
 800cd72:	f001 fd69 	bl	800e848 <ff_wtoupper>
 800cd76:	4603      	mov	r3, r0
 800cd78:	429c      	cmp	r4, r3
 800cd7a:	d001      	beq.n	800cd80 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	e022      	b.n	800cdc6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800cd80:	89bb      	ldrh	r3, [r7, #12]
 800cd82:	81fb      	strh	r3, [r7, #14]
 800cd84:	e006      	b.n	800cd94 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800cd86:	89bb      	ldrh	r3, [r7, #12]
 800cd88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d001      	beq.n	800cd94 <cmp_lfn+0xa0>
 800cd90:	2300      	movs	r3, #0
 800cd92:	e018      	b.n	800cdc6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800cd94:	693b      	ldr	r3, [r7, #16]
 800cd96:	3301      	adds	r3, #1
 800cd98:	613b      	str	r3, [r7, #16]
 800cd9a:	693b      	ldr	r3, [r7, #16]
 800cd9c:	2b0c      	cmp	r3, #12
 800cd9e:	d9c8      	bls.n	800cd32 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <cmp_lfn+0xd0>
 800cdac:	89fb      	ldrh	r3, [r7, #14]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d008      	beq.n	800cdc4 <cmp_lfn+0xd0>
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	005b      	lsls	r3, r3, #1
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	4413      	add	r3, r2
 800cdba:	881b      	ldrh	r3, [r3, #0]
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	d001      	beq.n	800cdc4 <cmp_lfn+0xd0>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	e000      	b.n	800cdc6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800cdc4:	2301      	movs	r3, #1
}
 800cdc6:	4618      	mov	r0, r3
 800cdc8:	371c      	adds	r7, #28
 800cdca:	46bd      	mov	sp, r7
 800cdcc:	bd90      	pop	{r4, r7, pc}
 800cdce:	bf00      	nop
 800cdd0:	0801e9e8 	.word	0x0801e9e8

0800cdd4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b088      	sub	sp, #32
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	4611      	mov	r1, r2
 800cde0:	461a      	mov	r2, r3
 800cde2:	460b      	mov	r3, r1
 800cde4:	71fb      	strb	r3, [r7, #7]
 800cde6:	4613      	mov	r3, r2
 800cde8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800cdea:	68bb      	ldr	r3, [r7, #8]
 800cdec:	330d      	adds	r3, #13
 800cdee:	79ba      	ldrb	r2, [r7, #6]
 800cdf0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	330b      	adds	r3, #11
 800cdf6:	220f      	movs	r2, #15
 800cdf8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800cdfa:	68bb      	ldr	r3, [r7, #8]
 800cdfc:	330c      	adds	r3, #12
 800cdfe:	2200      	movs	r2, #0
 800ce00:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	331a      	adds	r3, #26
 800ce06:	2100      	movs	r1, #0
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f7fe ff38 	bl	800bc7e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800ce0e:	79fb      	ldrb	r3, [r7, #7]
 800ce10:	1e5a      	subs	r2, r3, #1
 800ce12:	4613      	mov	r3, r2
 800ce14:	005b      	lsls	r3, r3, #1
 800ce16:	4413      	add	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	82fb      	strh	r3, [r7, #22]
 800ce22:	2300      	movs	r3, #0
 800ce24:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ce26:	8afb      	ldrh	r3, [r7, #22]
 800ce28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce2c:	4293      	cmp	r3, r2
 800ce2e:	d007      	beq.n	800ce40 <put_lfn+0x6c>
 800ce30:	69fb      	ldr	r3, [r7, #28]
 800ce32:	1c5a      	adds	r2, r3, #1
 800ce34:	61fa      	str	r2, [r7, #28]
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	881b      	ldrh	r3, [r3, #0]
 800ce3e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ce40:	4a17      	ldr	r2, [pc, #92]	; (800cea0 <put_lfn+0xcc>)
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	4413      	add	r3, r2
 800ce46:	781b      	ldrb	r3, [r3, #0]
 800ce48:	461a      	mov	r2, r3
 800ce4a:	68bb      	ldr	r3, [r7, #8]
 800ce4c:	4413      	add	r3, r2
 800ce4e:	8afa      	ldrh	r2, [r7, #22]
 800ce50:	4611      	mov	r1, r2
 800ce52:	4618      	mov	r0, r3
 800ce54:	f7fe ff13 	bl	800bc7e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ce58:	8afb      	ldrh	r3, [r7, #22]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d102      	bne.n	800ce64 <put_lfn+0x90>
 800ce5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ce62:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	3301      	adds	r3, #1
 800ce68:	61bb      	str	r3, [r7, #24]
 800ce6a:	69bb      	ldr	r3, [r7, #24]
 800ce6c:	2b0c      	cmp	r3, #12
 800ce6e:	d9da      	bls.n	800ce26 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ce70:	8afb      	ldrh	r3, [r7, #22]
 800ce72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce76:	4293      	cmp	r3, r2
 800ce78:	d006      	beq.n	800ce88 <put_lfn+0xb4>
 800ce7a:	69fb      	ldr	r3, [r7, #28]
 800ce7c:	005b      	lsls	r3, r3, #1
 800ce7e:	68fa      	ldr	r2, [r7, #12]
 800ce80:	4413      	add	r3, r2
 800ce82:	881b      	ldrh	r3, [r3, #0]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d103      	bne.n	800ce90 <put_lfn+0xbc>
 800ce88:	79fb      	ldrb	r3, [r7, #7]
 800ce8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce8e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	79fa      	ldrb	r2, [r7, #7]
 800ce94:	701a      	strb	r2, [r3, #0]
}
 800ce96:	bf00      	nop
 800ce98:	3720      	adds	r7, #32
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	0801e9e8 	.word	0x0801e9e8

0800cea4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b08c      	sub	sp, #48	; 0x30
 800cea8:	af00      	add	r7, sp, #0
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ceb2:	220b      	movs	r2, #11
 800ceb4:	68b9      	ldr	r1, [r7, #8]
 800ceb6:	68f8      	ldr	r0, [r7, #12]
 800ceb8:	f7fe ff28 	bl	800bd0c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b05      	cmp	r3, #5
 800cec0:	d929      	bls.n	800cf16 <gen_numname+0x72>
		sr = seq;
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800cec6:	e020      	b.n	800cf0a <gen_numname+0x66>
			wc = *lfn++;
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	1c9a      	adds	r2, r3, #2
 800cecc:	607a      	str	r2, [r7, #4]
 800cece:	881b      	ldrh	r3, [r3, #0]
 800ced0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ced2:	2300      	movs	r3, #0
 800ced4:	62bb      	str	r3, [r7, #40]	; 0x28
 800ced6:	e015      	b.n	800cf04 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 800ced8:	69fb      	ldr	r3, [r7, #28]
 800ceda:	005a      	lsls	r2, r3, #1
 800cedc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cede:	f003 0301 	and.w	r3, r3, #1
 800cee2:	4413      	add	r3, r2
 800cee4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800cee6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cee8:	085b      	lsrs	r3, r3, #1
 800ceea:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ceec:	69fb      	ldr	r3, [r7, #28]
 800ceee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d003      	beq.n	800cefe <gen_numname+0x5a>
 800cef6:	69fa      	ldr	r2, [r7, #28]
 800cef8:	4b30      	ldr	r3, [pc, #192]	; (800cfbc <gen_numname+0x118>)
 800cefa:	4053      	eors	r3, r2
 800cefc:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800cefe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf00:	3301      	adds	r3, #1
 800cf02:	62bb      	str	r3, [r7, #40]	; 0x28
 800cf04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf06:	2b0f      	cmp	r3, #15
 800cf08:	d9e6      	bls.n	800ced8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	881b      	ldrh	r3, [r3, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d1da      	bne.n	800cec8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800cf12:	69fb      	ldr	r3, [r7, #28]
 800cf14:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800cf16:	2307      	movs	r3, #7
 800cf18:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800cf1a:	683b      	ldr	r3, [r7, #0]
 800cf1c:	b2db      	uxtb	r3, r3
 800cf1e:	f003 030f 	and.w	r3, r3, #15
 800cf22:	b2db      	uxtb	r3, r3
 800cf24:	3330      	adds	r3, #48	; 0x30
 800cf26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800cf2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf2e:	2b39      	cmp	r3, #57	; 0x39
 800cf30:	d904      	bls.n	800cf3c <gen_numname+0x98>
 800cf32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf36:	3307      	adds	r3, #7
 800cf38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800cf3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf3e:	1e5a      	subs	r2, r3, #1
 800cf40:	62ba      	str	r2, [r7, #40]	; 0x28
 800cf42:	3330      	adds	r3, #48	; 0x30
 800cf44:	443b      	add	r3, r7
 800cf46:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800cf4a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800cf4e:	683b      	ldr	r3, [r7, #0]
 800cf50:	091b      	lsrs	r3, r3, #4
 800cf52:	603b      	str	r3, [r7, #0]
	} while (seq);
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d1df      	bne.n	800cf1a <gen_numname+0x76>
	ns[i] = '~';
 800cf5a:	f107 0214 	add.w	r2, r7, #20
 800cf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf60:	4413      	add	r3, r2
 800cf62:	227e      	movs	r2, #126	; 0x7e
 800cf64:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800cf66:	2300      	movs	r3, #0
 800cf68:	627b      	str	r3, [r7, #36]	; 0x24
 800cf6a:	e002      	b.n	800cf72 <gen_numname+0xce>
 800cf6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf6e:	3301      	adds	r3, #1
 800cf70:	627b      	str	r3, [r7, #36]	; 0x24
 800cf72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf76:	429a      	cmp	r2, r3
 800cf78:	d205      	bcs.n	800cf86 <gen_numname+0xe2>
 800cf7a:	68fa      	ldr	r2, [r7, #12]
 800cf7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7e:	4413      	add	r3, r2
 800cf80:	781b      	ldrb	r3, [r3, #0]
 800cf82:	2b20      	cmp	r3, #32
 800cf84:	d1f2      	bne.n	800cf6c <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	2b07      	cmp	r3, #7
 800cf8a:	d807      	bhi.n	800cf9c <gen_numname+0xf8>
 800cf8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf8e:	1c5a      	adds	r2, r3, #1
 800cf90:	62ba      	str	r2, [r7, #40]	; 0x28
 800cf92:	3330      	adds	r3, #48	; 0x30
 800cf94:	443b      	add	r3, r7
 800cf96:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800cf9a:	e000      	b.n	800cf9e <gen_numname+0xfa>
 800cf9c:	2120      	movs	r1, #32
 800cf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa0:	1c5a      	adds	r2, r3, #1
 800cfa2:	627a      	str	r2, [r7, #36]	; 0x24
 800cfa4:	68fa      	ldr	r2, [r7, #12]
 800cfa6:	4413      	add	r3, r2
 800cfa8:	460a      	mov	r2, r1
 800cfaa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800cfac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfae:	2b07      	cmp	r3, #7
 800cfb0:	d9e9      	bls.n	800cf86 <gen_numname+0xe2>
}
 800cfb2:	bf00      	nop
 800cfb4:	bf00      	nop
 800cfb6:	3730      	adds	r7, #48	; 0x30
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	00011021 	.word	0x00011021

0800cfc0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b085      	sub	sp, #20
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800cfcc:	230b      	movs	r3, #11
 800cfce:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800cfd0:	7bfb      	ldrb	r3, [r7, #15]
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	0852      	lsrs	r2, r2, #1
 800cfd6:	01db      	lsls	r3, r3, #7
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	b2da      	uxtb	r2, r3
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	1c59      	adds	r1, r3, #1
 800cfe0:	6079      	str	r1, [r7, #4]
 800cfe2:	781b      	ldrb	r3, [r3, #0]
 800cfe4:	4413      	add	r3, r2
 800cfe6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	3b01      	subs	r3, #1
 800cfec:	60bb      	str	r3, [r7, #8]
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d1ed      	bne.n	800cfd0 <sum_sfn+0x10>
	return sum;
 800cff4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff6:	4618      	mov	r0, r3
 800cff8:	3714      	adds	r7, #20
 800cffa:	46bd      	mov	sp, r7
 800cffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d000:	4770      	bx	lr

0800d002 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d002:	b580      	push	{r7, lr}
 800d004:	b086      	sub	sp, #24
 800d006:	af00      	add	r7, sp, #0
 800d008:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d010:	2100      	movs	r1, #0
 800d012:	6878      	ldr	r0, [r7, #4]
 800d014:	f7ff fc88 	bl	800c928 <dir_sdi>
 800d018:	4603      	mov	r3, r0
 800d01a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d01c:	7dfb      	ldrb	r3, [r7, #23]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d001      	beq.n	800d026 <dir_find+0x24>
 800d022:	7dfb      	ldrb	r3, [r7, #23]
 800d024:	e0a9      	b.n	800d17a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d026:	23ff      	movs	r3, #255	; 0xff
 800d028:	753b      	strb	r3, [r7, #20]
 800d02a:	7d3b      	ldrb	r3, [r7, #20]
 800d02c:	757b      	strb	r3, [r7, #21]
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d034:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	69db      	ldr	r3, [r3, #28]
 800d03a:	4619      	mov	r1, r3
 800d03c:	6938      	ldr	r0, [r7, #16]
 800d03e:	f7ff f893 	bl	800c168 <move_window>
 800d042:	4603      	mov	r3, r0
 800d044:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d046:	7dfb      	ldrb	r3, [r7, #23]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	f040 8090 	bne.w	800d16e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a1b      	ldr	r3, [r3, #32]
 800d052:	781b      	ldrb	r3, [r3, #0]
 800d054:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d056:	7dbb      	ldrb	r3, [r7, #22]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d102      	bne.n	800d062 <dir_find+0x60>
 800d05c:	2304      	movs	r3, #4
 800d05e:	75fb      	strb	r3, [r7, #23]
 800d060:	e08a      	b.n	800d178 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	6a1b      	ldr	r3, [r3, #32]
 800d066:	330b      	adds	r3, #11
 800d068:	781b      	ldrb	r3, [r3, #0]
 800d06a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d06e:	73fb      	strb	r3, [r7, #15]
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	7bfa      	ldrb	r2, [r7, #15]
 800d074:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800d076:	7dbb      	ldrb	r3, [r7, #22]
 800d078:	2be5      	cmp	r3, #229	; 0xe5
 800d07a:	d007      	beq.n	800d08c <dir_find+0x8a>
 800d07c:	7bfb      	ldrb	r3, [r7, #15]
 800d07e:	f003 0308 	and.w	r3, r3, #8
 800d082:	2b00      	cmp	r3, #0
 800d084:	d009      	beq.n	800d09a <dir_find+0x98>
 800d086:	7bfb      	ldrb	r3, [r7, #15]
 800d088:	2b0f      	cmp	r3, #15
 800d08a:	d006      	beq.n	800d09a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d08c:	23ff      	movs	r3, #255	; 0xff
 800d08e:	757b      	strb	r3, [r7, #21]
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d096:	631a      	str	r2, [r3, #48]	; 0x30
 800d098:	e05e      	b.n	800d158 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
 800d09c:	2b0f      	cmp	r3, #15
 800d09e:	d136      	bne.n	800d10e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d0a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d154      	bne.n	800d158 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800d0ae:	7dbb      	ldrb	r3, [r7, #22]
 800d0b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d00d      	beq.n	800d0d4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	6a1b      	ldr	r3, [r3, #32]
 800d0bc:	7b5b      	ldrb	r3, [r3, #13]
 800d0be:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800d0c0:	7dbb      	ldrb	r3, [r7, #22]
 800d0c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d0c6:	75bb      	strb	r3, [r7, #22]
 800d0c8:	7dbb      	ldrb	r3, [r7, #22]
 800d0ca:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	695a      	ldr	r2, [r3, #20]
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d0d4:	7dba      	ldrb	r2, [r7, #22]
 800d0d6:	7d7b      	ldrb	r3, [r7, #21]
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	d115      	bne.n	800d108 <dir_find+0x106>
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	6a1b      	ldr	r3, [r3, #32]
 800d0e0:	330d      	adds	r3, #13
 800d0e2:	781b      	ldrb	r3, [r3, #0]
 800d0e4:	7d3a      	ldrb	r2, [r7, #20]
 800d0e6:	429a      	cmp	r2, r3
 800d0e8:	d10e      	bne.n	800d108 <dir_find+0x106>
 800d0ea:	693b      	ldr	r3, [r7, #16]
 800d0ec:	691a      	ldr	r2, [r3, #16]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6a1b      	ldr	r3, [r3, #32]
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	4610      	mov	r0, r2
 800d0f6:	f7ff fdfd 	bl	800ccf4 <cmp_lfn>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d003      	beq.n	800d108 <dir_find+0x106>
 800d100:	7d7b      	ldrb	r3, [r7, #21]
 800d102:	3b01      	subs	r3, #1
 800d104:	b2db      	uxtb	r3, r3
 800d106:	e000      	b.n	800d10a <dir_find+0x108>
 800d108:	23ff      	movs	r3, #255	; 0xff
 800d10a:	757b      	strb	r3, [r7, #21]
 800d10c:	e024      	b.n	800d158 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d10e:	7d7b      	ldrb	r3, [r7, #21]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d109      	bne.n	800d128 <dir_find+0x126>
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	6a1b      	ldr	r3, [r3, #32]
 800d118:	4618      	mov	r0, r3
 800d11a:	f7ff ff51 	bl	800cfc0 <sum_sfn>
 800d11e:	4603      	mov	r3, r0
 800d120:	461a      	mov	r2, r3
 800d122:	7d3b      	ldrb	r3, [r7, #20]
 800d124:	4293      	cmp	r3, r2
 800d126:	d024      	beq.n	800d172 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d12e:	f003 0301 	and.w	r3, r3, #1
 800d132:	2b00      	cmp	r3, #0
 800d134:	d10a      	bne.n	800d14c <dir_find+0x14a>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a18      	ldr	r0, [r3, #32]
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	3324      	adds	r3, #36	; 0x24
 800d13e:	220b      	movs	r2, #11
 800d140:	4619      	mov	r1, r3
 800d142:	f7fe fe1f 	bl	800bd84 <mem_cmp>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d014      	beq.n	800d176 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800d14c:	23ff      	movs	r3, #255	; 0xff
 800d14e:	757b      	strb	r3, [r7, #21]
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d156:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d158:	2100      	movs	r1, #0
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f7ff fc6d 	bl	800ca3a <dir_next>
 800d160:	4603      	mov	r3, r0
 800d162:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d164:	7dfb      	ldrb	r3, [r7, #23]
 800d166:	2b00      	cmp	r3, #0
 800d168:	f43f af65 	beq.w	800d036 <dir_find+0x34>
 800d16c:	e004      	b.n	800d178 <dir_find+0x176>
		if (res != FR_OK) break;
 800d16e:	bf00      	nop
 800d170:	e002      	b.n	800d178 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800d172:	bf00      	nop
 800d174:	e000      	b.n	800d178 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800d176:	bf00      	nop

	return res;
 800d178:	7dfb      	ldrb	r3, [r7, #23]
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3718      	adds	r7, #24
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
	...

0800d184 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b08c      	sub	sp, #48	; 0x30
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d198:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	d001      	beq.n	800d1a4 <dir_register+0x20>
 800d1a0:	2306      	movs	r3, #6
 800d1a2:	e0e0      	b.n	800d366 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	627b      	str	r3, [r7, #36]	; 0x24
 800d1a8:	e002      	b.n	800d1b0 <dir_register+0x2c>
 800d1aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ac:	3301      	adds	r3, #1
 800d1ae:	627b      	str	r3, [r7, #36]	; 0x24
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	691a      	ldr	r2, [r3, #16]
 800d1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b6:	005b      	lsls	r3, r3, #1
 800d1b8:	4413      	add	r3, r2
 800d1ba:	881b      	ldrh	r3, [r3, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1f4      	bne.n	800d1aa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800d1c6:	f107 030c 	add.w	r3, r7, #12
 800d1ca:	220c      	movs	r2, #12
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe fd9d 	bl	800bd0c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800d1d2:	7dfb      	ldrb	r3, [r7, #23]
 800d1d4:	f003 0301 	and.w	r3, r3, #1
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d032      	beq.n	800d242 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2240      	movs	r2, #64	; 0x40
 800d1e0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800d1e4:	2301      	movs	r3, #1
 800d1e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800d1e8:	e016      	b.n	800d218 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800d1f0:	69fb      	ldr	r3, [r7, #28]
 800d1f2:	691a      	ldr	r2, [r3, #16]
 800d1f4:	f107 010c 	add.w	r1, r7, #12
 800d1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1fa:	f7ff fe53 	bl	800cea4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff feff 	bl	800d002 <dir_find>
 800d204:	4603      	mov	r3, r0
 800d206:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800d20a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d106      	bne.n	800d220 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800d212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d214:	3301      	adds	r3, #1
 800d216:	62bb      	str	r3, [r7, #40]	; 0x28
 800d218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d21a:	2b63      	cmp	r3, #99	; 0x63
 800d21c:	d9e5      	bls.n	800d1ea <dir_register+0x66>
 800d21e:	e000      	b.n	800d222 <dir_register+0x9e>
			if (res != FR_OK) break;
 800d220:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800d222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d224:	2b64      	cmp	r3, #100	; 0x64
 800d226:	d101      	bne.n	800d22c <dir_register+0xa8>
 800d228:	2307      	movs	r3, #7
 800d22a:	e09c      	b.n	800d366 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800d22c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d230:	2b04      	cmp	r3, #4
 800d232:	d002      	beq.n	800d23a <dir_register+0xb6>
 800d234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d238:	e095      	b.n	800d366 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800d23a:	7dfa      	ldrb	r2, [r7, #23]
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800d242:	7dfb      	ldrb	r3, [r7, #23]
 800d244:	f003 0302 	and.w	r3, r3, #2
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d007      	beq.n	800d25c <dir_register+0xd8>
 800d24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d24e:	330c      	adds	r3, #12
 800d250:	4a47      	ldr	r2, [pc, #284]	; (800d370 <dir_register+0x1ec>)
 800d252:	fba2 2303 	umull	r2, r3, r2, r3
 800d256:	089b      	lsrs	r3, r3, #2
 800d258:	3301      	adds	r3, #1
 800d25a:	e000      	b.n	800d25e <dir_register+0xda>
 800d25c:	2301      	movs	r3, #1
 800d25e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800d260:	6a39      	ldr	r1, [r7, #32]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f7ff fcbf 	bl	800cbe6 <dir_alloc>
 800d268:	4603      	mov	r3, r0
 800d26a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800d26e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d272:	2b00      	cmp	r3, #0
 800d274:	d148      	bne.n	800d308 <dir_register+0x184>
 800d276:	6a3b      	ldr	r3, [r7, #32]
 800d278:	3b01      	subs	r3, #1
 800d27a:	623b      	str	r3, [r7, #32]
 800d27c:	6a3b      	ldr	r3, [r7, #32]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d042      	beq.n	800d308 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	695a      	ldr	r2, [r3, #20]
 800d286:	6a3b      	ldr	r3, [r7, #32]
 800d288:	015b      	lsls	r3, r3, #5
 800d28a:	1ad3      	subs	r3, r2, r3
 800d28c:	4619      	mov	r1, r3
 800d28e:	6878      	ldr	r0, [r7, #4]
 800d290:	f7ff fb4a 	bl	800c928 <dir_sdi>
 800d294:	4603      	mov	r3, r0
 800d296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d29a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d132      	bne.n	800d308 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	3324      	adds	r3, #36	; 0x24
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f7ff fe8a 	bl	800cfc0 <sum_sfn>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	69db      	ldr	r3, [r3, #28]
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	69f8      	ldr	r0, [r7, #28]
 800d2b8:	f7fe ff56 	bl	800c168 <move_window>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800d2c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d11d      	bne.n	800d306 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	6918      	ldr	r0, [r3, #16]
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	6a19      	ldr	r1, [r3, #32]
 800d2d2:	6a3b      	ldr	r3, [r7, #32]
 800d2d4:	b2da      	uxtb	r2, r3
 800d2d6:	7efb      	ldrb	r3, [r7, #27]
 800d2d8:	f7ff fd7c 	bl	800cdd4 <put_lfn>
				fs->wflag = 1;
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	2201      	movs	r2, #1
 800d2e0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800d2e2:	2100      	movs	r1, #0
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f7ff fba8 	bl	800ca3a <dir_next>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800d2f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d107      	bne.n	800d308 <dir_register+0x184>
 800d2f8:	6a3b      	ldr	r3, [r7, #32]
 800d2fa:	3b01      	subs	r3, #1
 800d2fc:	623b      	str	r3, [r7, #32]
 800d2fe:	6a3b      	ldr	r3, [r7, #32]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d1d5      	bne.n	800d2b0 <dir_register+0x12c>
 800d304:	e000      	b.n	800d308 <dir_register+0x184>
				if (res != FR_OK) break;
 800d306:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d308:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d128      	bne.n	800d362 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	69db      	ldr	r3, [r3, #28]
 800d314:	4619      	mov	r1, r3
 800d316:	69f8      	ldr	r0, [r7, #28]
 800d318:	f7fe ff26 	bl	800c168 <move_window>
 800d31c:	4603      	mov	r3, r0
 800d31e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800d322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d326:	2b00      	cmp	r3, #0
 800d328:	d11b      	bne.n	800d362 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a1b      	ldr	r3, [r3, #32]
 800d32e:	2220      	movs	r2, #32
 800d330:	2100      	movs	r1, #0
 800d332:	4618      	mov	r0, r3
 800d334:	f7fe fd0b 	bl	800bd4e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6a18      	ldr	r0, [r3, #32]
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	3324      	adds	r3, #36	; 0x24
 800d340:	220b      	movs	r2, #11
 800d342:	4619      	mov	r1, r3
 800d344:	f7fe fce2 	bl	800bd0c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	6a1b      	ldr	r3, [r3, #32]
 800d352:	330c      	adds	r3, #12
 800d354:	f002 0218 	and.w	r2, r2, #24
 800d358:	b2d2      	uxtb	r2, r2
 800d35a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d35c:	69fb      	ldr	r3, [r7, #28]
 800d35e:	2201      	movs	r2, #1
 800d360:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d362:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d366:	4618      	mov	r0, r3
 800d368:	3730      	adds	r7, #48	; 0x30
 800d36a:	46bd      	mov	sp, r7
 800d36c:	bd80      	pop	{r7, pc}
 800d36e:	bf00      	nop
 800d370:	4ec4ec4f 	.word	0x4ec4ec4f

0800d374 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d374:	b580      	push	{r7, lr}
 800d376:	b08a      	sub	sp, #40	; 0x28
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
 800d37c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d37e:	683b      	ldr	r3, [r7, #0]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	613b      	str	r3, [r7, #16]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	691b      	ldr	r3, [r3, #16]
 800d38a:	60fb      	str	r3, [r7, #12]
 800d38c:	2300      	movs	r3, #0
 800d38e:	617b      	str	r3, [r7, #20]
 800d390:	697b      	ldr	r3, [r7, #20]
 800d392:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d394:	69bb      	ldr	r3, [r7, #24]
 800d396:	1c5a      	adds	r2, r3, #1
 800d398:	61ba      	str	r2, [r7, #24]
 800d39a:	693a      	ldr	r2, [r7, #16]
 800d39c:	4413      	add	r3, r2
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d3a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3a4:	2b1f      	cmp	r3, #31
 800d3a6:	d940      	bls.n	800d42a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d3a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3aa:	2b2f      	cmp	r3, #47	; 0x2f
 800d3ac:	d006      	beq.n	800d3bc <create_name+0x48>
 800d3ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3b0:	2b5c      	cmp	r3, #92	; 0x5c
 800d3b2:	d110      	bne.n	800d3d6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d3b4:	e002      	b.n	800d3bc <create_name+0x48>
 800d3b6:	69bb      	ldr	r3, [r7, #24]
 800d3b8:	3301      	adds	r3, #1
 800d3ba:	61bb      	str	r3, [r7, #24]
 800d3bc:	693a      	ldr	r2, [r7, #16]
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b2f      	cmp	r3, #47	; 0x2f
 800d3c6:	d0f6      	beq.n	800d3b6 <create_name+0x42>
 800d3c8:	693a      	ldr	r2, [r7, #16]
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	2b5c      	cmp	r3, #92	; 0x5c
 800d3d2:	d0f0      	beq.n	800d3b6 <create_name+0x42>
			break;
 800d3d4:	e02a      	b.n	800d42c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2bfe      	cmp	r3, #254	; 0xfe
 800d3da:	d901      	bls.n	800d3e0 <create_name+0x6c>
 800d3dc:	2306      	movs	r3, #6
 800d3de:	e17d      	b.n	800d6dc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d3e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3e2:	b2db      	uxtb	r3, r3
 800d3e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d3e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3e8:	2101      	movs	r1, #1
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f001 f9f0 	bl	800e7d0 <ff_convert>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d3f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d101      	bne.n	800d3fe <create_name+0x8a>
 800d3fa:	2306      	movs	r3, #6
 800d3fc:	e16e      	b.n	800d6dc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d3fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d400:	2b7f      	cmp	r3, #127	; 0x7f
 800d402:	d809      	bhi.n	800d418 <create_name+0xa4>
 800d404:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d406:	4619      	mov	r1, r3
 800d408:	488d      	ldr	r0, [pc, #564]	; (800d640 <create_name+0x2cc>)
 800d40a:	f7fe fce2 	bl	800bdd2 <chk_chr>
 800d40e:	4603      	mov	r3, r0
 800d410:	2b00      	cmp	r3, #0
 800d412:	d001      	beq.n	800d418 <create_name+0xa4>
 800d414:	2306      	movs	r3, #6
 800d416:	e161      	b.n	800d6dc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d418:	697b      	ldr	r3, [r7, #20]
 800d41a:	1c5a      	adds	r2, r3, #1
 800d41c:	617a      	str	r2, [r7, #20]
 800d41e:	005b      	lsls	r3, r3, #1
 800d420:	68fa      	ldr	r2, [r7, #12]
 800d422:	4413      	add	r3, r2
 800d424:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d426:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d428:	e7b4      	b.n	800d394 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d42a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	69bb      	ldr	r3, [r7, #24]
 800d430:	441a      	add	r2, r3
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d438:	2b1f      	cmp	r3, #31
 800d43a:	d801      	bhi.n	800d440 <create_name+0xcc>
 800d43c:	2304      	movs	r3, #4
 800d43e:	e000      	b.n	800d442 <create_name+0xce>
 800d440:	2300      	movs	r3, #0
 800d442:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d446:	e011      	b.n	800d46c <create_name+0xf8>
		w = lfn[di - 1];
 800d448:	697a      	ldr	r2, [r7, #20]
 800d44a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d44e:	4413      	add	r3, r2
 800d450:	005b      	lsls	r3, r3, #1
 800d452:	68fa      	ldr	r2, [r7, #12]
 800d454:	4413      	add	r3, r2
 800d456:	881b      	ldrh	r3, [r3, #0]
 800d458:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d45a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d45c:	2b20      	cmp	r3, #32
 800d45e:	d002      	beq.n	800d466 <create_name+0xf2>
 800d460:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d462:	2b2e      	cmp	r3, #46	; 0x2e
 800d464:	d106      	bne.n	800d474 <create_name+0x100>
		di--;
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	3b01      	subs	r3, #1
 800d46a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d46c:	697b      	ldr	r3, [r7, #20]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d1ea      	bne.n	800d448 <create_name+0xd4>
 800d472:	e000      	b.n	800d476 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d474:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d476:	697b      	ldr	r3, [r7, #20]
 800d478:	005b      	lsls	r3, r3, #1
 800d47a:	68fa      	ldr	r2, [r7, #12]
 800d47c:	4413      	add	r3, r2
 800d47e:	2200      	movs	r2, #0
 800d480:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d482:	697b      	ldr	r3, [r7, #20]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d101      	bne.n	800d48c <create_name+0x118>
 800d488:	2306      	movs	r3, #6
 800d48a:	e127      	b.n	800d6dc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	3324      	adds	r3, #36	; 0x24
 800d490:	220b      	movs	r2, #11
 800d492:	2120      	movs	r1, #32
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe fc5a 	bl	800bd4e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d49a:	2300      	movs	r3, #0
 800d49c:	61bb      	str	r3, [r7, #24]
 800d49e:	e002      	b.n	800d4a6 <create_name+0x132>
 800d4a0:	69bb      	ldr	r3, [r7, #24]
 800d4a2:	3301      	adds	r3, #1
 800d4a4:	61bb      	str	r3, [r7, #24]
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	005b      	lsls	r3, r3, #1
 800d4aa:	68fa      	ldr	r2, [r7, #12]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	881b      	ldrh	r3, [r3, #0]
 800d4b0:	2b20      	cmp	r3, #32
 800d4b2:	d0f5      	beq.n	800d4a0 <create_name+0x12c>
 800d4b4:	69bb      	ldr	r3, [r7, #24]
 800d4b6:	005b      	lsls	r3, r3, #1
 800d4b8:	68fa      	ldr	r2, [r7, #12]
 800d4ba:	4413      	add	r3, r2
 800d4bc:	881b      	ldrh	r3, [r3, #0]
 800d4be:	2b2e      	cmp	r3, #46	; 0x2e
 800d4c0:	d0ee      	beq.n	800d4a0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d4c2:	69bb      	ldr	r3, [r7, #24]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d009      	beq.n	800d4dc <create_name+0x168>
 800d4c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4cc:	f043 0303 	orr.w	r3, r3, #3
 800d4d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d4d4:	e002      	b.n	800d4dc <create_name+0x168>
 800d4d6:	697b      	ldr	r3, [r7, #20]
 800d4d8:	3b01      	subs	r3, #1
 800d4da:	617b      	str	r3, [r7, #20]
 800d4dc:	697b      	ldr	r3, [r7, #20]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d009      	beq.n	800d4f6 <create_name+0x182>
 800d4e2:	697a      	ldr	r2, [r7, #20]
 800d4e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800d4e8:	4413      	add	r3, r2
 800d4ea:	005b      	lsls	r3, r3, #1
 800d4ec:	68fa      	ldr	r2, [r7, #12]
 800d4ee:	4413      	add	r3, r2
 800d4f0:	881b      	ldrh	r3, [r3, #0]
 800d4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800d4f4:	d1ef      	bne.n	800d4d6 <create_name+0x162>

	i = b = 0; ni = 8;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	623b      	str	r3, [r7, #32]
 800d500:	2308      	movs	r3, #8
 800d502:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d504:	69bb      	ldr	r3, [r7, #24]
 800d506:	1c5a      	adds	r2, r3, #1
 800d508:	61ba      	str	r2, [r7, #24]
 800d50a:	005b      	lsls	r3, r3, #1
 800d50c:	68fa      	ldr	r2, [r7, #12]
 800d50e:	4413      	add	r3, r2
 800d510:	881b      	ldrh	r3, [r3, #0]
 800d512:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d514:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d516:	2b00      	cmp	r3, #0
 800d518:	f000 8090 	beq.w	800d63c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d51c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d51e:	2b20      	cmp	r3, #32
 800d520:	d006      	beq.n	800d530 <create_name+0x1bc>
 800d522:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d524:	2b2e      	cmp	r3, #46	; 0x2e
 800d526:	d10a      	bne.n	800d53e <create_name+0x1ca>
 800d528:	69ba      	ldr	r2, [r7, #24]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	429a      	cmp	r2, r3
 800d52e:	d006      	beq.n	800d53e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d530:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d534:	f043 0303 	orr.w	r3, r3, #3
 800d538:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d53c:	e07d      	b.n	800d63a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d53e:	6a3a      	ldr	r2, [r7, #32]
 800d540:	69fb      	ldr	r3, [r7, #28]
 800d542:	429a      	cmp	r2, r3
 800d544:	d203      	bcs.n	800d54e <create_name+0x1da>
 800d546:	69ba      	ldr	r2, [r7, #24]
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d123      	bne.n	800d596 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	2b0b      	cmp	r3, #11
 800d552:	d106      	bne.n	800d562 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d558:	f043 0303 	orr.w	r3, r3, #3
 800d55c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d560:	e075      	b.n	800d64e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d562:	69ba      	ldr	r2, [r7, #24]
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	429a      	cmp	r2, r3
 800d568:	d005      	beq.n	800d576 <create_name+0x202>
 800d56a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d56e:	f043 0303 	orr.w	r3, r3, #3
 800d572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d576:	69ba      	ldr	r2, [r7, #24]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d866      	bhi.n	800d64c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	61bb      	str	r3, [r7, #24]
 800d582:	2308      	movs	r3, #8
 800d584:	623b      	str	r3, [r7, #32]
 800d586:	230b      	movs	r3, #11
 800d588:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d58a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d594:	e051      	b.n	800d63a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d596:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d598:	2b7f      	cmp	r3, #127	; 0x7f
 800d59a:	d914      	bls.n	800d5c6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d59c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d59e:	2100      	movs	r1, #0
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	f001 f915 	bl	800e7d0 <ff_convert>
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d5aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <create_name+0x246>
 800d5b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5b2:	3b80      	subs	r3, #128	; 0x80
 800d5b4:	4a23      	ldr	r2, [pc, #140]	; (800d644 <create_name+0x2d0>)
 800d5b6:	5cd3      	ldrb	r3, [r2, r3]
 800d5b8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5be:	f043 0302 	orr.w	r3, r3, #2
 800d5c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d5c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d007      	beq.n	800d5dc <create_name+0x268>
 800d5cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5ce:	4619      	mov	r1, r3
 800d5d0:	481d      	ldr	r0, [pc, #116]	; (800d648 <create_name+0x2d4>)
 800d5d2:	f7fe fbfe 	bl	800bdd2 <chk_chr>
 800d5d6:	4603      	mov	r3, r0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d008      	beq.n	800d5ee <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d5dc:	235f      	movs	r3, #95	; 0x5f
 800d5de:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d5e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5e4:	f043 0303 	orr.w	r3, r3, #3
 800d5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d5ec:	e01b      	b.n	800d626 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d5ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5f0:	2b40      	cmp	r3, #64	; 0x40
 800d5f2:	d909      	bls.n	800d608 <create_name+0x294>
 800d5f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d5f6:	2b5a      	cmp	r3, #90	; 0x5a
 800d5f8:	d806      	bhi.n	800d608 <create_name+0x294>
					b |= 2;
 800d5fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d5fe:	f043 0302 	orr.w	r3, r3, #2
 800d602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d606:	e00e      	b.n	800d626 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d608:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d60a:	2b60      	cmp	r3, #96	; 0x60
 800d60c:	d90b      	bls.n	800d626 <create_name+0x2b2>
 800d60e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d610:	2b7a      	cmp	r3, #122	; 0x7a
 800d612:	d808      	bhi.n	800d626 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d614:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d618:	f043 0301 	orr.w	r3, r3, #1
 800d61c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d620:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d622:	3b20      	subs	r3, #32
 800d624:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d626:	6a3b      	ldr	r3, [r7, #32]
 800d628:	1c5a      	adds	r2, r3, #1
 800d62a:	623a      	str	r2, [r7, #32]
 800d62c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d62e:	b2d1      	uxtb	r1, r2
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	4413      	add	r3, r2
 800d634:	460a      	mov	r2, r1
 800d636:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800d63a:	e763      	b.n	800d504 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d63c:	bf00      	nop
 800d63e:	e006      	b.n	800d64e <create_name+0x2da>
 800d640:	0800f4bc 	.word	0x0800f4bc
 800d644:	0801e968 	.word	0x0801e968
 800d648:	0800f4c8 	.word	0x0800f4c8
			if (si > di) break;			/* No extension */
 800d64c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d654:	2be5      	cmp	r3, #229	; 0xe5
 800d656:	d103      	bne.n	800d660 <create_name+0x2ec>
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	2205      	movs	r2, #5
 800d65c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800d660:	69fb      	ldr	r3, [r7, #28]
 800d662:	2b08      	cmp	r3, #8
 800d664:	d104      	bne.n	800d670 <create_name+0x2fc>
 800d666:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d66a:	009b      	lsls	r3, r3, #2
 800d66c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d670:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d674:	f003 030c 	and.w	r3, r3, #12
 800d678:	2b0c      	cmp	r3, #12
 800d67a:	d005      	beq.n	800d688 <create_name+0x314>
 800d67c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d680:	f003 0303 	and.w	r3, r3, #3
 800d684:	2b03      	cmp	r3, #3
 800d686:	d105      	bne.n	800d694 <create_name+0x320>
 800d688:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d68c:	f043 0302 	orr.w	r3, r3, #2
 800d690:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d698:	f003 0302 	and.w	r3, r3, #2
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d117      	bne.n	800d6d0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d6a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6a4:	f003 0303 	and.w	r3, r3, #3
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d105      	bne.n	800d6b8 <create_name+0x344>
 800d6ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6b0:	f043 0310 	orr.w	r3, r3, #16
 800d6b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d6b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d6bc:	f003 030c 	and.w	r3, r3, #12
 800d6c0:	2b04      	cmp	r3, #4
 800d6c2:	d105      	bne.n	800d6d0 <create_name+0x35c>
 800d6c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6c8:	f043 0308 	orr.w	r3, r3, #8
 800d6cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d6d6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800d6da:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3728      	adds	r7, #40	; 0x28
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b086      	sub	sp, #24
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d6f8:	e002      	b.n	800d700 <follow_path+0x1c>
 800d6fa:	683b      	ldr	r3, [r7, #0]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	603b      	str	r3, [r7, #0]
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	2b2f      	cmp	r3, #47	; 0x2f
 800d706:	d0f8      	beq.n	800d6fa <follow_path+0x16>
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	781b      	ldrb	r3, [r3, #0]
 800d70c:	2b5c      	cmp	r3, #92	; 0x5c
 800d70e:	d0f4      	beq.n	800d6fa <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d710:	693b      	ldr	r3, [r7, #16]
 800d712:	2200      	movs	r2, #0
 800d714:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d716:	683b      	ldr	r3, [r7, #0]
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	2b1f      	cmp	r3, #31
 800d71c:	d80a      	bhi.n	800d734 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2280      	movs	r2, #128	; 0x80
 800d722:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800d726:	2100      	movs	r1, #0
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff f8fd 	bl	800c928 <dir_sdi>
 800d72e:	4603      	mov	r3, r0
 800d730:	75fb      	strb	r3, [r7, #23]
 800d732:	e048      	b.n	800d7c6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d734:	463b      	mov	r3, r7
 800d736:	4619      	mov	r1, r3
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f7ff fe1b 	bl	800d374 <create_name>
 800d73e:	4603      	mov	r3, r0
 800d740:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d742:	7dfb      	ldrb	r3, [r7, #23]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d139      	bne.n	800d7bc <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7ff fc5a 	bl	800d002 <dir_find>
 800d74e:	4603      	mov	r3, r0
 800d750:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800d758:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d75a:	7dfb      	ldrb	r3, [r7, #23]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d00a      	beq.n	800d776 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d760:	7dfb      	ldrb	r3, [r7, #23]
 800d762:	2b04      	cmp	r3, #4
 800d764:	d12c      	bne.n	800d7c0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d766:	7afb      	ldrb	r3, [r7, #11]
 800d768:	f003 0304 	and.w	r3, r3, #4
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d127      	bne.n	800d7c0 <follow_path+0xdc>
 800d770:	2305      	movs	r3, #5
 800d772:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d774:	e024      	b.n	800d7c0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d776:	7afb      	ldrb	r3, [r7, #11]
 800d778:	f003 0304 	and.w	r3, r3, #4
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d121      	bne.n	800d7c4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	799b      	ldrb	r3, [r3, #6]
 800d784:	f003 0310 	and.w	r3, r3, #16
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d102      	bne.n	800d792 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d78c:	2305      	movs	r3, #5
 800d78e:	75fb      	strb	r3, [r7, #23]
 800d790:	e019      	b.n	800d7c6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	695b      	ldr	r3, [r3, #20]
 800d79c:	68fa      	ldr	r2, [r7, #12]
 800d79e:	8992      	ldrh	r2, [r2, #12]
 800d7a0:	fbb3 f0f2 	udiv	r0, r3, r2
 800d7a4:	fb00 f202 	mul.w	r2, r0, r2
 800d7a8:	1a9b      	subs	r3, r3, r2
 800d7aa:	440b      	add	r3, r1
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	68f8      	ldr	r0, [r7, #12]
 800d7b0:	f7ff fa60 	bl	800cc74 <ld_clust>
 800d7b4:	4602      	mov	r2, r0
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d7ba:	e7bb      	b.n	800d734 <follow_path+0x50>
			if (res != FR_OK) break;
 800d7bc:	bf00      	nop
 800d7be:	e002      	b.n	800d7c6 <follow_path+0xe2>
				break;
 800d7c0:	bf00      	nop
 800d7c2:	e000      	b.n	800d7c6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d7c4:	bf00      	nop
			}
		}
	}

	return res;
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d7d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d7dc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d031      	beq.n	800d84a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	617b      	str	r3, [r7, #20]
 800d7ec:	e002      	b.n	800d7f4 <get_ldnumber+0x24>
 800d7ee:	697b      	ldr	r3, [r7, #20]
 800d7f0:	3301      	adds	r3, #1
 800d7f2:	617b      	str	r3, [r7, #20]
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	2b1f      	cmp	r3, #31
 800d7fa:	d903      	bls.n	800d804 <get_ldnumber+0x34>
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	781b      	ldrb	r3, [r3, #0]
 800d800:	2b3a      	cmp	r3, #58	; 0x3a
 800d802:	d1f4      	bne.n	800d7ee <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b3a      	cmp	r3, #58	; 0x3a
 800d80a:	d11c      	bne.n	800d846 <get_ldnumber+0x76>
			tp = *path;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	1c5a      	adds	r2, r3, #1
 800d816:	60fa      	str	r2, [r7, #12]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	3b30      	subs	r3, #48	; 0x30
 800d81c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d81e:	68bb      	ldr	r3, [r7, #8]
 800d820:	2b09      	cmp	r3, #9
 800d822:	d80e      	bhi.n	800d842 <get_ldnumber+0x72>
 800d824:	68fa      	ldr	r2, [r7, #12]
 800d826:	697b      	ldr	r3, [r7, #20]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d10a      	bne.n	800d842 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d107      	bne.n	800d842 <get_ldnumber+0x72>
					vol = (int)i;
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	3301      	adds	r3, #1
 800d83a:	617b      	str	r3, [r7, #20]
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	697a      	ldr	r2, [r7, #20]
 800d840:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d842:	693b      	ldr	r3, [r7, #16]
 800d844:	e002      	b.n	800d84c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d846:	2300      	movs	r3, #0
 800d848:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d84a:	693b      	ldr	r3, [r7, #16]
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	371c      	adds	r7, #28
 800d850:	46bd      	mov	sp, r7
 800d852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d856:	4770      	bx	lr

0800d858 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d858:	b580      	push	{r7, lr}
 800d85a:	b082      	sub	sp, #8
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	2200      	movs	r2, #0
 800d866:	70da      	strb	r2, [r3, #3]
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d86e:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d870:	6839      	ldr	r1, [r7, #0]
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7fe fc78 	bl	800c168 <move_window>
 800d878:	4603      	mov	r3, r0
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d001      	beq.n	800d882 <check_fs+0x2a>
 800d87e:	2304      	movs	r3, #4
 800d880:	e038      	b.n	800d8f4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	3338      	adds	r3, #56	; 0x38
 800d886:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fe f9bc 	bl	800bc08 <ld_word>
 800d890:	4603      	mov	r3, r0
 800d892:	461a      	mov	r2, r3
 800d894:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d898:	429a      	cmp	r2, r3
 800d89a:	d001      	beq.n	800d8a0 <check_fs+0x48>
 800d89c:	2303      	movs	r3, #3
 800d89e:	e029      	b.n	800d8f4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8a6:	2be9      	cmp	r3, #233	; 0xe9
 800d8a8:	d009      	beq.n	800d8be <check_fs+0x66>
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d8b0:	2beb      	cmp	r3, #235	; 0xeb
 800d8b2:	d11e      	bne.n	800d8f2 <check_fs+0x9a>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d8ba:	2b90      	cmp	r3, #144	; 0x90
 800d8bc:	d119      	bne.n	800d8f2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	3338      	adds	r3, #56	; 0x38
 800d8c2:	3336      	adds	r3, #54	; 0x36
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fe f9b7 	bl	800bc38 <ld_dword>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d8d0:	4a0a      	ldr	r2, [pc, #40]	; (800d8fc <check_fs+0xa4>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	d101      	bne.n	800d8da <check_fs+0x82>
 800d8d6:	2300      	movs	r3, #0
 800d8d8:	e00c      	b.n	800d8f4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	3338      	adds	r3, #56	; 0x38
 800d8de:	3352      	adds	r3, #82	; 0x52
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	f7fe f9a9 	bl	800bc38 <ld_dword>
 800d8e6:	4603      	mov	r3, r0
 800d8e8:	4a05      	ldr	r2, [pc, #20]	; (800d900 <check_fs+0xa8>)
 800d8ea:	4293      	cmp	r3, r2
 800d8ec:	d101      	bne.n	800d8f2 <check_fs+0x9a>
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	e000      	b.n	800d8f4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d8f2:	2302      	movs	r3, #2
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}
 800d8fc:	00544146 	.word	0x00544146
 800d900:	33544146 	.word	0x33544146

0800d904 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b096      	sub	sp, #88	; 0x58
 800d908:	af00      	add	r7, sp, #0
 800d90a:	60f8      	str	r0, [r7, #12]
 800d90c:	60b9      	str	r1, [r7, #8]
 800d90e:	4613      	mov	r3, r2
 800d910:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d912:	68bb      	ldr	r3, [r7, #8]
 800d914:	2200      	movs	r2, #0
 800d916:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d918:	68f8      	ldr	r0, [r7, #12]
 800d91a:	f7ff ff59 	bl	800d7d0 <get_ldnumber>
 800d91e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d922:	2b00      	cmp	r3, #0
 800d924:	da01      	bge.n	800d92a <find_volume+0x26>
 800d926:	230b      	movs	r3, #11
 800d928:	e265      	b.n	800ddf6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d92a:	4a9f      	ldr	r2, [pc, #636]	; (800dba8 <find_volume+0x2a4>)
 800d92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d932:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <find_volume+0x3a>
 800d93a:	230c      	movs	r3, #12
 800d93c:	e25b      	b.n	800ddf6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d942:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d944:	79fb      	ldrb	r3, [r7, #7]
 800d946:	f023 0301 	bic.w	r3, r3, #1
 800d94a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d01a      	beq.n	800d98a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d956:	785b      	ldrb	r3, [r3, #1]
 800d958:	4618      	mov	r0, r3
 800d95a:	f7fe f8b7 	bl	800bacc <disk_status>
 800d95e:	4603      	mov	r3, r0
 800d960:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d964:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d968:	f003 0301 	and.w	r3, r3, #1
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d10c      	bne.n	800d98a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d970:	79fb      	ldrb	r3, [r7, #7]
 800d972:	2b00      	cmp	r3, #0
 800d974:	d007      	beq.n	800d986 <find_volume+0x82>
 800d976:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d97a:	f003 0304 	and.w	r3, r3, #4
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d001      	beq.n	800d986 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d982:	230a      	movs	r3, #10
 800d984:	e237      	b.n	800ddf6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800d986:	2300      	movs	r3, #0
 800d988:	e235      	b.n	800ddf6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d98a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d98c:	2200      	movs	r2, #0
 800d98e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d992:	b2da      	uxtb	r2, r3
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d99a:	785b      	ldrb	r3, [r3, #1]
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fe f8af 	bl	800bb00 <disk_initialize>
 800d9a2:	4603      	mov	r3, r0
 800d9a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d9a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9ac:	f003 0301 	and.w	r3, r3, #1
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	e21e      	b.n	800ddf6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d9b8:	79fb      	ldrb	r3, [r7, #7]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d007      	beq.n	800d9ce <find_volume+0xca>
 800d9be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800d9c2:	f003 0304 	and.w	r3, r3, #4
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d001      	beq.n	800d9ce <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d9ca:	230a      	movs	r3, #10
 800d9cc:	e213      	b.n	800ddf6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800d9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d0:	7858      	ldrb	r0, [r3, #1]
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d4:	330c      	adds	r3, #12
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	2102      	movs	r1, #2
 800d9da:	f7fe f8f7 	bl	800bbcc <disk_ioctl>
 800d9de:	4603      	mov	r3, r0
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <find_volume+0xe4>
 800d9e4:	2301      	movs	r3, #1
 800d9e6:	e206      	b.n	800ddf6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800d9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9ea:	899b      	ldrh	r3, [r3, #12]
 800d9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9f0:	d80d      	bhi.n	800da0e <find_volume+0x10a>
 800d9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9f4:	899b      	ldrh	r3, [r3, #12]
 800d9f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9fa:	d308      	bcc.n	800da0e <find_volume+0x10a>
 800d9fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9fe:	899b      	ldrh	r3, [r3, #12]
 800da00:	461a      	mov	r2, r3
 800da02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da04:	899b      	ldrh	r3, [r3, #12]
 800da06:	3b01      	subs	r3, #1
 800da08:	4013      	ands	r3, r2
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d001      	beq.n	800da12 <find_volume+0x10e>
 800da0e:	2301      	movs	r3, #1
 800da10:	e1f1      	b.n	800ddf6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800da12:	2300      	movs	r3, #0
 800da14:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800da16:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da1a:	f7ff ff1d 	bl	800d858 <check_fs>
 800da1e:	4603      	mov	r3, r0
 800da20:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800da24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800da28:	2b02      	cmp	r3, #2
 800da2a:	d149      	bne.n	800dac0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da2c:	2300      	movs	r3, #0
 800da2e:	643b      	str	r3, [r7, #64]	; 0x40
 800da30:	e01e      	b.n	800da70 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800da32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da34:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800da38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da3a:	011b      	lsls	r3, r3, #4
 800da3c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800da40:	4413      	add	r3, r2
 800da42:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800da44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da46:	3304      	adds	r3, #4
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d006      	beq.n	800da5c <find_volume+0x158>
 800da4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da50:	3308      	adds	r3, #8
 800da52:	4618      	mov	r0, r3
 800da54:	f7fe f8f0 	bl	800bc38 <ld_dword>
 800da58:	4602      	mov	r2, r0
 800da5a:	e000      	b.n	800da5e <find_volume+0x15a>
 800da5c:	2200      	movs	r2, #0
 800da5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da60:	009b      	lsls	r3, r3, #2
 800da62:	3358      	adds	r3, #88	; 0x58
 800da64:	443b      	add	r3, r7
 800da66:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800da6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da6c:	3301      	adds	r3, #1
 800da6e:	643b      	str	r3, [r7, #64]	; 0x40
 800da70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da72:	2b03      	cmp	r3, #3
 800da74:	d9dd      	bls.n	800da32 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800da76:	2300      	movs	r3, #0
 800da78:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800da7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <find_volume+0x182>
 800da80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da82:	3b01      	subs	r3, #1
 800da84:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800da86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da88:	009b      	lsls	r3, r3, #2
 800da8a:	3358      	adds	r3, #88	; 0x58
 800da8c:	443b      	add	r3, r7
 800da8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800da92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800da94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <find_volume+0x1a2>
 800da9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800da9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800da9e:	f7ff fedb 	bl	800d858 <check_fs>
 800daa2:	4603      	mov	r3, r0
 800daa4:	e000      	b.n	800daa8 <find_volume+0x1a4>
 800daa6:	2303      	movs	r3, #3
 800daa8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800daac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dab0:	2b01      	cmp	r3, #1
 800dab2:	d905      	bls.n	800dac0 <find_volume+0x1bc>
 800dab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dab6:	3301      	adds	r3, #1
 800dab8:	643b      	str	r3, [r7, #64]	; 0x40
 800daba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dabc:	2b03      	cmp	r3, #3
 800dabe:	d9e2      	bls.n	800da86 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dac0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dac4:	2b04      	cmp	r3, #4
 800dac6:	d101      	bne.n	800dacc <find_volume+0x1c8>
 800dac8:	2301      	movs	r3, #1
 800daca:	e194      	b.n	800ddf6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dacc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d901      	bls.n	800dad8 <find_volume+0x1d4>
 800dad4:	230d      	movs	r3, #13
 800dad6:	e18e      	b.n	800ddf6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dada:	3338      	adds	r3, #56	; 0x38
 800dadc:	330b      	adds	r3, #11
 800dade:	4618      	mov	r0, r3
 800dae0:	f7fe f892 	bl	800bc08 <ld_word>
 800dae4:	4603      	mov	r3, r0
 800dae6:	461a      	mov	r2, r3
 800dae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daea:	899b      	ldrh	r3, [r3, #12]
 800daec:	429a      	cmp	r2, r3
 800daee:	d001      	beq.n	800daf4 <find_volume+0x1f0>
 800daf0:	230d      	movs	r3, #13
 800daf2:	e180      	b.n	800ddf6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800daf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daf6:	3338      	adds	r3, #56	; 0x38
 800daf8:	3316      	adds	r3, #22
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7fe f884 	bl	800bc08 <ld_word>
 800db00:	4603      	mov	r3, r0
 800db02:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800db04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db06:	2b00      	cmp	r3, #0
 800db08:	d106      	bne.n	800db18 <find_volume+0x214>
 800db0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db0c:	3338      	adds	r3, #56	; 0x38
 800db0e:	3324      	adds	r3, #36	; 0x24
 800db10:	4618      	mov	r0, r3
 800db12:	f7fe f891 	bl	800bc38 <ld_dword>
 800db16:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800db18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800db1c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800db1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db20:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800db24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800db28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db2a:	789b      	ldrb	r3, [r3, #2]
 800db2c:	2b01      	cmp	r3, #1
 800db2e:	d005      	beq.n	800db3c <find_volume+0x238>
 800db30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db32:	789b      	ldrb	r3, [r3, #2]
 800db34:	2b02      	cmp	r3, #2
 800db36:	d001      	beq.n	800db3c <find_volume+0x238>
 800db38:	230d      	movs	r3, #13
 800db3a:	e15c      	b.n	800ddf6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800db3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db3e:	789b      	ldrb	r3, [r3, #2]
 800db40:	461a      	mov	r2, r3
 800db42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800db44:	fb02 f303 	mul.w	r3, r2, r3
 800db48:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800db4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800db50:	b29a      	uxth	r2, r3
 800db52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800db56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db58:	895b      	ldrh	r3, [r3, #10]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d008      	beq.n	800db70 <find_volume+0x26c>
 800db5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db60:	895b      	ldrh	r3, [r3, #10]
 800db62:	461a      	mov	r2, r3
 800db64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db66:	895b      	ldrh	r3, [r3, #10]
 800db68:	3b01      	subs	r3, #1
 800db6a:	4013      	ands	r3, r2
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d001      	beq.n	800db74 <find_volume+0x270>
 800db70:	230d      	movs	r3, #13
 800db72:	e140      	b.n	800ddf6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800db74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db76:	3338      	adds	r3, #56	; 0x38
 800db78:	3311      	adds	r3, #17
 800db7a:	4618      	mov	r0, r3
 800db7c:	f7fe f844 	bl	800bc08 <ld_word>
 800db80:	4603      	mov	r3, r0
 800db82:	461a      	mov	r2, r3
 800db84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800db88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8a:	891b      	ldrh	r3, [r3, #8]
 800db8c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db8e:	8992      	ldrh	r2, [r2, #12]
 800db90:	0952      	lsrs	r2, r2, #5
 800db92:	b292      	uxth	r2, r2
 800db94:	fbb3 f1f2 	udiv	r1, r3, r2
 800db98:	fb01 f202 	mul.w	r2, r1, r2
 800db9c:	1a9b      	subs	r3, r3, r2
 800db9e:	b29b      	uxth	r3, r3
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d003      	beq.n	800dbac <find_volume+0x2a8>
 800dba4:	230d      	movs	r3, #13
 800dba6:	e126      	b.n	800ddf6 <find_volume+0x4f2>
 800dba8:	200048b0 	.word	0x200048b0

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dbac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbae:	3338      	adds	r3, #56	; 0x38
 800dbb0:	3313      	adds	r3, #19
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7fe f828 	bl	800bc08 <ld_word>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dbbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d106      	bne.n	800dbd0 <find_volume+0x2cc>
 800dbc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbc4:	3338      	adds	r3, #56	; 0x38
 800dbc6:	3320      	adds	r3, #32
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f7fe f835 	bl	800bc38 <ld_dword>
 800dbce:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dbd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd2:	3338      	adds	r3, #56	; 0x38
 800dbd4:	330e      	adds	r3, #14
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f7fe f816 	bl	800bc08 <ld_word>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dbe0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d101      	bne.n	800dbea <find_volume+0x2e6>
 800dbe6:	230d      	movs	r3, #13
 800dbe8:	e105      	b.n	800ddf6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dbea:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dbec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dbee:	4413      	add	r3, r2
 800dbf0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbf2:	8911      	ldrh	r1, [r2, #8]
 800dbf4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dbf6:	8992      	ldrh	r2, [r2, #12]
 800dbf8:	0952      	lsrs	r2, r2, #5
 800dbfa:	b292      	uxth	r2, r2
 800dbfc:	fbb1 f2f2 	udiv	r2, r1, r2
 800dc00:	b292      	uxth	r2, r2
 800dc02:	4413      	add	r3, r2
 800dc04:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dc06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc0a:	429a      	cmp	r2, r3
 800dc0c:	d201      	bcs.n	800dc12 <find_volume+0x30e>
 800dc0e:	230d      	movs	r3, #13
 800dc10:	e0f1      	b.n	800ddf6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dc12:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc16:	1ad3      	subs	r3, r2, r3
 800dc18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc1a:	8952      	ldrh	r2, [r2, #10]
 800dc1c:	fbb3 f3f2 	udiv	r3, r3, r2
 800dc20:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d101      	bne.n	800dc2c <find_volume+0x328>
 800dc28:	230d      	movs	r3, #13
 800dc2a:	e0e4      	b.n	800ddf6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dc32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc34:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800dc38:	4293      	cmp	r3, r2
 800dc3a:	d802      	bhi.n	800dc42 <find_volume+0x33e>
 800dc3c:	2302      	movs	r3, #2
 800dc3e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dc42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc44:	f640 72f5 	movw	r2, #4085	; 0xff5
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d802      	bhi.n	800dc52 <find_volume+0x34e>
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc54:	1c9a      	adds	r2, r3, #2
 800dc56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc58:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800dc5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc5e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dc60:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800dc62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc64:	441a      	add	r2, r3
 800dc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc68:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800dc6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800dc6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6e:	441a      	add	r2, r3
 800dc70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc72:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800dc74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dc78:	2b03      	cmp	r3, #3
 800dc7a:	d11e      	bne.n	800dcba <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dc7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc7e:	3338      	adds	r3, #56	; 0x38
 800dc80:	332a      	adds	r3, #42	; 0x2a
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7fd ffc0 	bl	800bc08 <ld_word>
 800dc88:	4603      	mov	r3, r0
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d001      	beq.n	800dc92 <find_volume+0x38e>
 800dc8e:	230d      	movs	r3, #13
 800dc90:	e0b1      	b.n	800ddf6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc94:	891b      	ldrh	r3, [r3, #8]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	d001      	beq.n	800dc9e <find_volume+0x39a>
 800dc9a:	230d      	movs	r3, #13
 800dc9c:	e0ab      	b.n	800ddf6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dc9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dca0:	3338      	adds	r3, #56	; 0x38
 800dca2:	332c      	adds	r3, #44	; 0x2c
 800dca4:	4618      	mov	r0, r3
 800dca6:	f7fd ffc7 	bl	800bc38 <ld_dword>
 800dcaa:	4602      	mov	r2, r0
 800dcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcae:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcb2:	69db      	ldr	r3, [r3, #28]
 800dcb4:	009b      	lsls	r3, r3, #2
 800dcb6:	647b      	str	r3, [r7, #68]	; 0x44
 800dcb8:	e01f      	b.n	800dcfa <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dcba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcbc:	891b      	ldrh	r3, [r3, #8]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d101      	bne.n	800dcc6 <find_volume+0x3c2>
 800dcc2:	230d      	movs	r3, #13
 800dcc4:	e097      	b.n	800ddf6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dcc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dcca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dccc:	441a      	add	r2, r3
 800dcce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd0:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dcd2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	d103      	bne.n	800dce2 <find_volume+0x3de>
 800dcda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcdc:	69db      	ldr	r3, [r3, #28]
 800dcde:	005b      	lsls	r3, r3, #1
 800dce0:	e00a      	b.n	800dcf8 <find_volume+0x3f4>
 800dce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dce4:	69da      	ldr	r2, [r3, #28]
 800dce6:	4613      	mov	r3, r2
 800dce8:	005b      	lsls	r3, r3, #1
 800dcea:	4413      	add	r3, r2
 800dcec:	085a      	lsrs	r2, r3, #1
 800dcee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcf0:	69db      	ldr	r3, [r3, #28]
 800dcf2:	f003 0301 	and.w	r3, r3, #1
 800dcf6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dcf8:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dcfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcfc:	6a1a      	ldr	r2, [r3, #32]
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd00:	899b      	ldrh	r3, [r3, #12]
 800dd02:	4619      	mov	r1, r3
 800dd04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd06:	440b      	add	r3, r1
 800dd08:	3b01      	subs	r3, #1
 800dd0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800dd0c:	8989      	ldrh	r1, [r1, #12]
 800dd0e:	fbb3 f3f1 	udiv	r3, r3, r1
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d201      	bcs.n	800dd1a <find_volume+0x416>
 800dd16:	230d      	movs	r3, #13
 800dd18:	e06d      	b.n	800ddf6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dd1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd20:	619a      	str	r2, [r3, #24]
 800dd22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd24:	699a      	ldr	r2, [r3, #24]
 800dd26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd28:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800dd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd2c:	2280      	movs	r2, #128	; 0x80
 800dd2e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dd30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800dd34:	2b03      	cmp	r3, #3
 800dd36:	d149      	bne.n	800ddcc <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dd38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd3a:	3338      	adds	r3, #56	; 0x38
 800dd3c:	3330      	adds	r3, #48	; 0x30
 800dd3e:	4618      	mov	r0, r3
 800dd40:	f7fd ff62 	bl	800bc08 <ld_word>
 800dd44:	4603      	mov	r3, r0
 800dd46:	2b01      	cmp	r3, #1
 800dd48:	d140      	bne.n	800ddcc <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd4c:	3301      	adds	r3, #1
 800dd4e:	4619      	mov	r1, r3
 800dd50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800dd52:	f7fe fa09 	bl	800c168 <move_window>
 800dd56:	4603      	mov	r3, r0
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d137      	bne.n	800ddcc <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800dd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd5e:	2200      	movs	r2, #0
 800dd60:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dd62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd64:	3338      	adds	r3, #56	; 0x38
 800dd66:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f7fd ff4c 	bl	800bc08 <ld_word>
 800dd70:	4603      	mov	r3, r0
 800dd72:	461a      	mov	r2, r3
 800dd74:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d127      	bne.n	800ddcc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dd7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd7e:	3338      	adds	r3, #56	; 0x38
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fd ff59 	bl	800bc38 <ld_dword>
 800dd86:	4603      	mov	r3, r0
 800dd88:	4a1d      	ldr	r2, [pc, #116]	; (800de00 <find_volume+0x4fc>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d11e      	bne.n	800ddcc <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd90:	3338      	adds	r3, #56	; 0x38
 800dd92:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fd ff4e 	bl	800bc38 <ld_dword>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	4a19      	ldr	r2, [pc, #100]	; (800de04 <find_volume+0x500>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d113      	bne.n	800ddcc <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dda4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dda6:	3338      	adds	r3, #56	; 0x38
 800dda8:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ddac:	4618      	mov	r0, r3
 800ddae:	f7fd ff43 	bl	800bc38 <ld_dword>
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddb6:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ddb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddba:	3338      	adds	r3, #56	; 0x38
 800ddbc:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fd ff39 	bl	800bc38 <ld_dword>
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddca:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddce:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800ddd2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <find_volume+0x504>)
 800ddd6:	881b      	ldrh	r3, [r3, #0]
 800ddd8:	3301      	adds	r3, #1
 800ddda:	b29a      	uxth	r2, r3
 800dddc:	4b0a      	ldr	r3, [pc, #40]	; (800de08 <find_volume+0x504>)
 800ddde:	801a      	strh	r2, [r3, #0]
 800dde0:	4b09      	ldr	r3, [pc, #36]	; (800de08 <find_volume+0x504>)
 800dde2:	881a      	ldrh	r2, [r3, #0]
 800dde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800dde8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddea:	4a08      	ldr	r2, [pc, #32]	; (800de0c <find_volume+0x508>)
 800ddec:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800ddee:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ddf0:	f7fe f952 	bl	800c098 <clear_lock>
#endif
	return FR_OK;
 800ddf4:	2300      	movs	r3, #0
}
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	3758      	adds	r7, #88	; 0x58
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	bd80      	pop	{r7, pc}
 800ddfe:	bf00      	nop
 800de00:	41615252 	.word	0x41615252
 800de04:	61417272 	.word	0x61417272
 800de08:	200048b4 	.word	0x200048b4
 800de0c:	200048d8 	.word	0x200048d8

0800de10 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b084      	sub	sp, #16
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800de1a:	2309      	movs	r3, #9
 800de1c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d01c      	beq.n	800de5e <validate+0x4e>
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d018      	beq.n	800de5e <validate+0x4e>
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d013      	beq.n	800de5e <validate+0x4e>
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	889a      	ldrh	r2, [r3, #4]
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	88db      	ldrh	r3, [r3, #6]
 800de40:	429a      	cmp	r2, r3
 800de42:	d10c      	bne.n	800de5e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	785b      	ldrb	r3, [r3, #1]
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7fd fe3e 	bl	800bacc <disk_status>
 800de50:	4603      	mov	r3, r0
 800de52:	f003 0301 	and.w	r3, r3, #1
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <validate+0x4e>
			res = FR_OK;
 800de5a:	2300      	movs	r3, #0
 800de5c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800de5e:	7bfb      	ldrb	r3, [r7, #15]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d102      	bne.n	800de6a <validate+0x5a>
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	e000      	b.n	800de6c <validate+0x5c>
 800de6a:	2300      	movs	r3, #0
 800de6c:	683a      	ldr	r2, [r7, #0]
 800de6e:	6013      	str	r3, [r2, #0]
	return res;
 800de70:	7bfb      	ldrb	r3, [r7, #15]
}
 800de72:	4618      	mov	r0, r3
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}
	...

0800de7c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b088      	sub	sp, #32
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	4613      	mov	r3, r2
 800de88:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800de8a:	68bb      	ldr	r3, [r7, #8]
 800de8c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800de8e:	f107 0310 	add.w	r3, r7, #16
 800de92:	4618      	mov	r0, r3
 800de94:	f7ff fc9c 	bl	800d7d0 <get_ldnumber>
 800de98:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800de9a:	69fb      	ldr	r3, [r7, #28]
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	da01      	bge.n	800dea4 <f_mount+0x28>
 800dea0:	230b      	movs	r3, #11
 800dea2:	e02b      	b.n	800defc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dea4:	4a17      	ldr	r2, [pc, #92]	; (800df04 <f_mount+0x88>)
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800deac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800deae:	69bb      	ldr	r3, [r7, #24]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d005      	beq.n	800dec0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800deb4:	69b8      	ldr	r0, [r7, #24]
 800deb6:	f7fe f8ef 	bl	800c098 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800deba:	69bb      	ldr	r3, [r7, #24]
 800debc:	2200      	movs	r2, #0
 800debe:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d002      	beq.n	800decc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	2200      	movs	r2, #0
 800deca:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800decc:	68fa      	ldr	r2, [r7, #12]
 800dece:	490d      	ldr	r1, [pc, #52]	; (800df04 <f_mount+0x88>)
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d002      	beq.n	800dee2 <f_mount+0x66>
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d001      	beq.n	800dee6 <f_mount+0x6a>
 800dee2:	2300      	movs	r3, #0
 800dee4:	e00a      	b.n	800defc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dee6:	f107 010c 	add.w	r1, r7, #12
 800deea:	f107 0308 	add.w	r3, r7, #8
 800deee:	2200      	movs	r2, #0
 800def0:	4618      	mov	r0, r3
 800def2:	f7ff fd07 	bl	800d904 <find_volume>
 800def6:	4603      	mov	r3, r0
 800def8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800defa:	7dfb      	ldrb	r3, [r7, #23]
}
 800defc:	4618      	mov	r0, r3
 800defe:	3720      	adds	r7, #32
 800df00:	46bd      	mov	sp, r7
 800df02:	bd80      	pop	{r7, pc}
 800df04:	200048b0 	.word	0x200048b0

0800df08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b09a      	sub	sp, #104	; 0x68
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	60f8      	str	r0, [r7, #12]
 800df10:	60b9      	str	r1, [r7, #8]
 800df12:	4613      	mov	r3, r2
 800df14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d101      	bne.n	800df20 <f_open+0x18>
 800df1c:	2309      	movs	r3, #9
 800df1e:	e1bb      	b.n	800e298 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800df20:	79fb      	ldrb	r3, [r7, #7]
 800df22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800df26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800df28:	79fa      	ldrb	r2, [r7, #7]
 800df2a:	f107 0114 	add.w	r1, r7, #20
 800df2e:	f107 0308 	add.w	r3, r7, #8
 800df32:	4618      	mov	r0, r3
 800df34:	f7ff fce6 	bl	800d904 <find_volume>
 800df38:	4603      	mov	r3, r0
 800df3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 800df3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df42:	2b00      	cmp	r3, #0
 800df44:	f040 819f 	bne.w	800e286 <f_open+0x37e>
		dj.obj.fs = fs;
 800df48:	697b      	ldr	r3, [r7, #20]
 800df4a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800df4c:	68ba      	ldr	r2, [r7, #8]
 800df4e:	f107 0318 	add.w	r3, r7, #24
 800df52:	4611      	mov	r1, r2
 800df54:	4618      	mov	r0, r3
 800df56:	f7ff fbc5 	bl	800d6e4 <follow_path>
 800df5a:	4603      	mov	r3, r0
 800df5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800df60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800df64:	2b00      	cmp	r3, #0
 800df66:	d11a      	bne.n	800df9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800df68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800df6c:	b25b      	sxtb	r3, r3
 800df6e:	2b00      	cmp	r3, #0
 800df70:	da03      	bge.n	800df7a <f_open+0x72>
				res = FR_INVALID_NAME;
 800df72:	2306      	movs	r3, #6
 800df74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800df78:	e011      	b.n	800df9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800df7a:	79fb      	ldrb	r3, [r7, #7]
 800df7c:	f023 0301 	bic.w	r3, r3, #1
 800df80:	2b00      	cmp	r3, #0
 800df82:	bf14      	ite	ne
 800df84:	2301      	movne	r3, #1
 800df86:	2300      	moveq	r3, #0
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	461a      	mov	r2, r3
 800df8c:	f107 0318 	add.w	r3, r7, #24
 800df90:	4611      	mov	r1, r2
 800df92:	4618      	mov	r0, r3
 800df94:	f7fd ff38 	bl	800be08 <chk_lock>
 800df98:	4603      	mov	r3, r0
 800df9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	f003 031c 	and.w	r3, r3, #28
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d07f      	beq.n	800e0a8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800dfa8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d017      	beq.n	800dfe0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800dfb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800dfb4:	2b04      	cmp	r3, #4
 800dfb6:	d10e      	bne.n	800dfd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800dfb8:	f7fd ff82 	bl	800bec0 <enq_lock>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d006      	beq.n	800dfd0 <f_open+0xc8>
 800dfc2:	f107 0318 	add.w	r3, r7, #24
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	f7ff f8dc 	bl	800d184 <dir_register>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	e000      	b.n	800dfd2 <f_open+0xca>
 800dfd0:	2312      	movs	r3, #18
 800dfd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800dfd6:	79fb      	ldrb	r3, [r7, #7]
 800dfd8:	f043 0308 	orr.w	r3, r3, #8
 800dfdc:	71fb      	strb	r3, [r7, #7]
 800dfde:	e010      	b.n	800e002 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800dfe0:	7fbb      	ldrb	r3, [r7, #30]
 800dfe2:	f003 0311 	and.w	r3, r3, #17
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d003      	beq.n	800dff2 <f_open+0xea>
					res = FR_DENIED;
 800dfea:	2307      	movs	r3, #7
 800dfec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800dff0:	e007      	b.n	800e002 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	f003 0304 	and.w	r3, r3, #4
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d002      	beq.n	800e002 <f_open+0xfa>
 800dffc:	2308      	movs	r3, #8
 800dffe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e002:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e006:	2b00      	cmp	r3, #0
 800e008:	d168      	bne.n	800e0dc <f_open+0x1d4>
 800e00a:	79fb      	ldrb	r3, [r7, #7]
 800e00c:	f003 0308 	and.w	r3, r3, #8
 800e010:	2b00      	cmp	r3, #0
 800e012:	d063      	beq.n	800e0dc <f_open+0x1d4>
				dw = GET_FATTIME();
 800e014:	f7fd fb16 	bl	800b644 <get_fattime>
 800e018:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e01a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e01c:	330e      	adds	r3, #14
 800e01e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e020:	4618      	mov	r0, r3
 800e022:	f7fd fe47 	bl	800bcb4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e028:	3316      	adds	r3, #22
 800e02a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e02c:	4618      	mov	r0, r3
 800e02e:	f7fd fe41 	bl	800bcb4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e034:	330b      	adds	r3, #11
 800e036:	2220      	movs	r2, #32
 800e038:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e03a:	697b      	ldr	r3, [r7, #20]
 800e03c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e03e:	4611      	mov	r1, r2
 800e040:	4618      	mov	r0, r3
 800e042:	f7fe fe17 	bl	800cc74 <ld_clust>
 800e046:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800e04c:	2200      	movs	r2, #0
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe fe2f 	bl	800ccb2 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e056:	331c      	adds	r3, #28
 800e058:	2100      	movs	r1, #0
 800e05a:	4618      	mov	r0, r3
 800e05c:	f7fd fe2a 	bl	800bcb4 <st_dword>
					fs->wflag = 1;
 800e060:	697b      	ldr	r3, [r7, #20]
 800e062:	2201      	movs	r2, #1
 800e064:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d037      	beq.n	800e0dc <f_open+0x1d4>
						dw = fs->winsect;
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e070:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 800e072:	f107 0318 	add.w	r3, r7, #24
 800e076:	2200      	movs	r2, #0
 800e078:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e07a:	4618      	mov	r0, r3
 800e07c:	f7fe fb1f 	bl	800c6be <remove_chain>
 800e080:	4603      	mov	r3, r0
 800e082:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 800e086:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d126      	bne.n	800e0dc <f_open+0x1d4>
							res = move_window(fs, dw);
 800e08e:	697b      	ldr	r3, [r7, #20]
 800e090:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e092:	4618      	mov	r0, r3
 800e094:	f7fe f868 	bl	800c168 <move_window>
 800e098:	4603      	mov	r3, r0
 800e09a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e0a2:	3a01      	subs	r2, #1
 800e0a4:	615a      	str	r2, [r3, #20]
 800e0a6:	e019      	b.n	800e0dc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e0a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d115      	bne.n	800e0dc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e0b0:	7fbb      	ldrb	r3, [r7, #30]
 800e0b2:	f003 0310 	and.w	r3, r3, #16
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d003      	beq.n	800e0c2 <f_open+0x1ba>
					res = FR_NO_FILE;
 800e0ba:	2304      	movs	r3, #4
 800e0bc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e0c0:	e00c      	b.n	800e0dc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e0c2:	79fb      	ldrb	r3, [r7, #7]
 800e0c4:	f003 0302 	and.w	r3, r3, #2
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d007      	beq.n	800e0dc <f_open+0x1d4>
 800e0cc:	7fbb      	ldrb	r3, [r7, #30]
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d002      	beq.n	800e0dc <f_open+0x1d4>
						res = FR_DENIED;
 800e0d6:	2307      	movs	r3, #7
 800e0d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 800e0dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d128      	bne.n	800e136 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e0e4:	79fb      	ldrb	r3, [r7, #7]
 800e0e6:	f003 0308 	and.w	r3, r3, #8
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d003      	beq.n	800e0f6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800e0ee:	79fb      	ldrb	r3, [r7, #7]
 800e0f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e0f4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e0f6:	697b      	ldr	r3, [r7, #20]
 800e0f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800e0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e104:	79fb      	ldrb	r3, [r7, #7]
 800e106:	f023 0301 	bic.w	r3, r3, #1
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	bf14      	ite	ne
 800e10e:	2301      	movne	r3, #1
 800e110:	2300      	moveq	r3, #0
 800e112:	b2db      	uxtb	r3, r3
 800e114:	461a      	mov	r2, r3
 800e116:	f107 0318 	add.w	r3, r7, #24
 800e11a:	4611      	mov	r1, r2
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fd fef1 	bl	800bf04 <inc_lock>
 800e122:	4602      	mov	r2, r0
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	691b      	ldr	r3, [r3, #16]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d102      	bne.n	800e136 <f_open+0x22e>
 800e130:	2302      	movs	r3, #2
 800e132:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e136:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f040 80a3 	bne.w	800e286 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e140:	697b      	ldr	r3, [r7, #20]
 800e142:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e144:	4611      	mov	r1, r2
 800e146:	4618      	mov	r0, r3
 800e148:	f7fe fd94 	bl	800cc74 <ld_clust>
 800e14c:	4602      	mov	r2, r0
 800e14e:	68fb      	ldr	r3, [r7, #12]
 800e150:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e154:	331c      	adds	r3, #28
 800e156:	4618      	mov	r0, r3
 800e158:	f7fd fd6e 	bl	800bc38 <ld_dword>
 800e15c:	4602      	mov	r2, r0
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	2200      	movs	r2, #0
 800e166:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e168:	697a      	ldr	r2, [r7, #20]
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e16e:	697b      	ldr	r3, [r7, #20]
 800e170:	88da      	ldrh	r2, [r3, #6]
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	79fa      	ldrb	r2, [r7, #7]
 800e17a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2200      	movs	r2, #0
 800e180:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	2200      	movs	r2, #0
 800e186:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	2200      	movs	r2, #0
 800e18c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3330      	adds	r3, #48	; 0x30
 800e192:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e196:	2100      	movs	r1, #0
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fd fdd8 	bl	800bd4e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e19e:	79fb      	ldrb	r3, [r7, #7]
 800e1a0:	f003 0320 	and.w	r3, r3, #32
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d06e      	beq.n	800e286 <f_open+0x37e>
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68db      	ldr	r3, [r3, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d06a      	beq.n	800e286 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	68da      	ldr	r2, [r3, #12]
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e1b8:	697b      	ldr	r3, [r7, #20]
 800e1ba:	895b      	ldrh	r3, [r3, #10]
 800e1bc:	461a      	mov	r2, r3
 800e1be:	697b      	ldr	r3, [r7, #20]
 800e1c0:	899b      	ldrh	r3, [r3, #12]
 800e1c2:	fb02 f303 	mul.w	r3, r2, r3
 800e1c6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	689b      	ldr	r3, [r3, #8]
 800e1cc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	68db      	ldr	r3, [r3, #12]
 800e1d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1d4:	e016      	b.n	800e204 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e1da:	4618      	mov	r0, r3
 800e1dc:	f7fe f881 	bl	800c2e2 <get_fat>
 800e1e0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800e1e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d802      	bhi.n	800e1ee <f_open+0x2e6>
 800e1e8:	2302      	movs	r3, #2
 800e1ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e1ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1f4:	d102      	bne.n	800e1fc <f_open+0x2f4>
 800e1f6:	2301      	movs	r3, #1
 800e1f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e1fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e200:	1ad3      	subs	r3, r2, r3
 800e202:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e204:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d103      	bne.n	800e214 <f_open+0x30c>
 800e20c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e20e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e210:	429a      	cmp	r2, r3
 800e212:	d8e0      	bhi.n	800e1d6 <f_open+0x2ce>
				}
				fp->clust = clst;
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e218:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e21a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d131      	bne.n	800e286 <f_open+0x37e>
 800e222:	697b      	ldr	r3, [r7, #20]
 800e224:	899b      	ldrh	r3, [r3, #12]
 800e226:	461a      	mov	r2, r3
 800e228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e22a:	fbb3 f1f2 	udiv	r1, r3, r2
 800e22e:	fb01 f202 	mul.w	r2, r1, r2
 800e232:	1a9b      	subs	r3, r3, r2
 800e234:	2b00      	cmp	r3, #0
 800e236:	d026      	beq.n	800e286 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fe f831 	bl	800c2a4 <clust2sect>
 800e242:	64f8      	str	r0, [r7, #76]	; 0x4c
 800e244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e246:	2b00      	cmp	r3, #0
 800e248:	d103      	bne.n	800e252 <f_open+0x34a>
						res = FR_INT_ERR;
 800e24a:	2302      	movs	r3, #2
 800e24c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800e250:	e019      	b.n	800e286 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e252:	697b      	ldr	r3, [r7, #20]
 800e254:	899b      	ldrh	r3, [r3, #12]
 800e256:	461a      	mov	r2, r3
 800e258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e25a:	fbb3 f2f2 	udiv	r2, r3, r2
 800e25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e260:	441a      	add	r2, r3
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e266:	697b      	ldr	r3, [r7, #20]
 800e268:	7858      	ldrb	r0, [r3, #1]
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	6a1a      	ldr	r2, [r3, #32]
 800e274:	2301      	movs	r3, #1
 800e276:	f7fd fc69 	bl	800bb4c <disk_read>
 800e27a:	4603      	mov	r3, r0
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d002      	beq.n	800e286 <f_open+0x37e>
 800e280:	2301      	movs	r3, #1
 800e282:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e286:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d002      	beq.n	800e294 <f_open+0x38c>
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	2200      	movs	r2, #0
 800e292:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e294:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3768      	adds	r7, #104	; 0x68
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b08c      	sub	sp, #48	; 0x30
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	60f8      	str	r0, [r7, #12]
 800e2a8:	60b9      	str	r1, [r7, #8]
 800e2aa:	607a      	str	r2, [r7, #4]
 800e2ac:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e2ae:	68bb      	ldr	r3, [r7, #8]
 800e2b0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f107 0210 	add.w	r2, r7, #16
 800e2be:	4611      	mov	r1, r2
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	f7ff fda5 	bl	800de10 <validate>
 800e2c6:	4603      	mov	r3, r0
 800e2c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e2cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d107      	bne.n	800e2e4 <f_write+0x44>
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	7d5b      	ldrb	r3, [r3, #21]
 800e2d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e2dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d002      	beq.n	800e2ea <f_write+0x4a>
 800e2e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e2e8:	e16a      	b.n	800e5c0 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	7d1b      	ldrb	r3, [r3, #20]
 800e2ee:	f003 0302 	and.w	r3, r3, #2
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d101      	bne.n	800e2fa <f_write+0x5a>
 800e2f6:	2307      	movs	r3, #7
 800e2f8:	e162      	b.n	800e5c0 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	699a      	ldr	r2, [r3, #24]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	441a      	add	r2, r3
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	699b      	ldr	r3, [r3, #24]
 800e306:	429a      	cmp	r2, r3
 800e308:	f080 814c 	bcs.w	800e5a4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	699b      	ldr	r3, [r3, #24]
 800e310:	43db      	mvns	r3, r3
 800e312:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e314:	e146      	b.n	800e5a4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	699b      	ldr	r3, [r3, #24]
 800e31a:	693a      	ldr	r2, [r7, #16]
 800e31c:	8992      	ldrh	r2, [r2, #12]
 800e31e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e322:	fb01 f202 	mul.w	r2, r1, r2
 800e326:	1a9b      	subs	r3, r3, r2
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f040 80f1 	bne.w	800e510 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	699b      	ldr	r3, [r3, #24]
 800e332:	693a      	ldr	r2, [r7, #16]
 800e334:	8992      	ldrh	r2, [r2, #12]
 800e336:	fbb3 f3f2 	udiv	r3, r3, r2
 800e33a:	693a      	ldr	r2, [r7, #16]
 800e33c:	8952      	ldrh	r2, [r2, #10]
 800e33e:	3a01      	subs	r2, #1
 800e340:	4013      	ands	r3, r2
 800e342:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e344:	69bb      	ldr	r3, [r7, #24]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d143      	bne.n	800e3d2 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	699b      	ldr	r3, [r3, #24]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d10c      	bne.n	800e36c <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	689b      	ldr	r3, [r3, #8]
 800e356:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d11a      	bne.n	800e394 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2100      	movs	r1, #0
 800e362:	4618      	mov	r0, r3
 800e364:	f7fe fa10 	bl	800c788 <create_chain>
 800e368:	62b8      	str	r0, [r7, #40]	; 0x28
 800e36a:	e013      	b.n	800e394 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e370:	2b00      	cmp	r3, #0
 800e372:	d007      	beq.n	800e384 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	699b      	ldr	r3, [r3, #24]
 800e378:	4619      	mov	r1, r3
 800e37a:	68f8      	ldr	r0, [r7, #12]
 800e37c:	f7fe fa9c 	bl	800c8b8 <clmt_clust>
 800e380:	62b8      	str	r0, [r7, #40]	; 0x28
 800e382:	e007      	b.n	800e394 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e384:	68fa      	ldr	r2, [r7, #12]
 800e386:	68fb      	ldr	r3, [r7, #12]
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	4619      	mov	r1, r3
 800e38c:	4610      	mov	r0, r2
 800e38e:	f7fe f9fb 	bl	800c788 <create_chain>
 800e392:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e396:	2b00      	cmp	r3, #0
 800e398:	f000 8109 	beq.w	800e5ae <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e39c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e39e:	2b01      	cmp	r3, #1
 800e3a0:	d104      	bne.n	800e3ac <f_write+0x10c>
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2202      	movs	r2, #2
 800e3a6:	755a      	strb	r2, [r3, #21]
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	e109      	b.n	800e5c0 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3b2:	d104      	bne.n	800e3be <f_write+0x11e>
 800e3b4:	68fb      	ldr	r3, [r7, #12]
 800e3b6:	2201      	movs	r2, #1
 800e3b8:	755a      	strb	r2, [r3, #21]
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	e100      	b.n	800e5c0 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3c2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d102      	bne.n	800e3d2 <f_write+0x132>
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e3d0:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	7d1b      	ldrb	r3, [r3, #20]
 800e3d6:	b25b      	sxtb	r3, r3
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	da18      	bge.n	800e40e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e3dc:	693b      	ldr	r3, [r7, #16]
 800e3de:	7858      	ldrb	r0, [r3, #1]
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	6a1a      	ldr	r2, [r3, #32]
 800e3ea:	2301      	movs	r3, #1
 800e3ec:	f7fd fbce 	bl	800bb8c <disk_write>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d004      	beq.n	800e400 <f_write+0x160>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	755a      	strb	r2, [r3, #21]
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	e0df      	b.n	800e5c0 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	7d1b      	ldrb	r3, [r3, #20]
 800e404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e408:	b2da      	uxtb	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e40e:	693a      	ldr	r2, [r7, #16]
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	69db      	ldr	r3, [r3, #28]
 800e414:	4619      	mov	r1, r3
 800e416:	4610      	mov	r0, r2
 800e418:	f7fd ff44 	bl	800c2a4 <clust2sect>
 800e41c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e41e:	697b      	ldr	r3, [r7, #20]
 800e420:	2b00      	cmp	r3, #0
 800e422:	d104      	bne.n	800e42e <f_write+0x18e>
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	2202      	movs	r2, #2
 800e428:	755a      	strb	r2, [r3, #21]
 800e42a:	2302      	movs	r3, #2
 800e42c:	e0c8      	b.n	800e5c0 <f_write+0x320>
			sect += csect;
 800e42e:	697a      	ldr	r2, [r7, #20]
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	4413      	add	r3, r2
 800e434:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e436:	693b      	ldr	r3, [r7, #16]
 800e438:	899b      	ldrh	r3, [r3, #12]
 800e43a:	461a      	mov	r2, r3
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e442:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e444:	6a3b      	ldr	r3, [r7, #32]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d043      	beq.n	800e4d2 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e44a:	69ba      	ldr	r2, [r7, #24]
 800e44c:	6a3b      	ldr	r3, [r7, #32]
 800e44e:	4413      	add	r3, r2
 800e450:	693a      	ldr	r2, [r7, #16]
 800e452:	8952      	ldrh	r2, [r2, #10]
 800e454:	4293      	cmp	r3, r2
 800e456:	d905      	bls.n	800e464 <f_write+0x1c4>
					cc = fs->csize - csect;
 800e458:	693b      	ldr	r3, [r7, #16]
 800e45a:	895b      	ldrh	r3, [r3, #10]
 800e45c:	461a      	mov	r2, r3
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	1ad3      	subs	r3, r2, r3
 800e462:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	7858      	ldrb	r0, [r3, #1]
 800e468:	6a3b      	ldr	r3, [r7, #32]
 800e46a:	697a      	ldr	r2, [r7, #20]
 800e46c:	69f9      	ldr	r1, [r7, #28]
 800e46e:	f7fd fb8d 	bl	800bb8c <disk_write>
 800e472:	4603      	mov	r3, r0
 800e474:	2b00      	cmp	r3, #0
 800e476:	d004      	beq.n	800e482 <f_write+0x1e2>
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2201      	movs	r2, #1
 800e47c:	755a      	strb	r2, [r3, #21]
 800e47e:	2301      	movs	r3, #1
 800e480:	e09e      	b.n	800e5c0 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	6a1a      	ldr	r2, [r3, #32]
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	1ad3      	subs	r3, r2, r3
 800e48a:	6a3a      	ldr	r2, [r7, #32]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d918      	bls.n	800e4c2 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6a1a      	ldr	r2, [r3, #32]
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	693a      	ldr	r2, [r7, #16]
 800e4a0:	8992      	ldrh	r2, [r2, #12]
 800e4a2:	fb02 f303 	mul.w	r3, r2, r3
 800e4a6:	69fa      	ldr	r2, [r7, #28]
 800e4a8:	18d1      	adds	r1, r2, r3
 800e4aa:	693b      	ldr	r3, [r7, #16]
 800e4ac:	899b      	ldrh	r3, [r3, #12]
 800e4ae:	461a      	mov	r2, r3
 800e4b0:	f7fd fc2c 	bl	800bd0c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	7d1b      	ldrb	r3, [r3, #20]
 800e4b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e4bc:	b2da      	uxtb	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e4c2:	693b      	ldr	r3, [r7, #16]
 800e4c4:	899b      	ldrh	r3, [r3, #12]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	6a3b      	ldr	r3, [r7, #32]
 800e4ca:	fb02 f303 	mul.w	r3, r2, r3
 800e4ce:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e4d0:	e04b      	b.n	800e56a <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	6a1b      	ldr	r3, [r3, #32]
 800e4d6:	697a      	ldr	r2, [r7, #20]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d016      	beq.n	800e50a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800e4dc:	68fb      	ldr	r3, [r7, #12]
 800e4de:	699a      	ldr	r2, [r3, #24]
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e4e4:	429a      	cmp	r2, r3
 800e4e6:	d210      	bcs.n	800e50a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e4e8:	693b      	ldr	r3, [r7, #16]
 800e4ea:	7858      	ldrb	r0, [r3, #1]
 800e4ec:	68fb      	ldr	r3, [r7, #12]
 800e4ee:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	f7fd fb29 	bl	800bb4c <disk_read>
 800e4fa:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d004      	beq.n	800e50a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	2201      	movs	r2, #1
 800e504:	755a      	strb	r2, [r3, #21]
 800e506:	2301      	movs	r3, #1
 800e508:	e05a      	b.n	800e5c0 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	697a      	ldr	r2, [r7, #20]
 800e50e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e510:	693b      	ldr	r3, [r7, #16]
 800e512:	899b      	ldrh	r3, [r3, #12]
 800e514:	4618      	mov	r0, r3
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	699b      	ldr	r3, [r3, #24]
 800e51a:	693a      	ldr	r2, [r7, #16]
 800e51c:	8992      	ldrh	r2, [r2, #12]
 800e51e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e522:	fb01 f202 	mul.w	r2, r1, r2
 800e526:	1a9b      	subs	r3, r3, r2
 800e528:	1ac3      	subs	r3, r0, r3
 800e52a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e52c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	429a      	cmp	r2, r3
 800e532:	d901      	bls.n	800e538 <f_write+0x298>
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	693a      	ldr	r2, [r7, #16]
 800e544:	8992      	ldrh	r2, [r2, #12]
 800e546:	fbb3 f0f2 	udiv	r0, r3, r2
 800e54a:	fb00 f202 	mul.w	r2, r0, r2
 800e54e:	1a9b      	subs	r3, r3, r2
 800e550:	440b      	add	r3, r1
 800e552:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e554:	69f9      	ldr	r1, [r7, #28]
 800e556:	4618      	mov	r0, r3
 800e558:	f7fd fbd8 	bl	800bd0c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	7d1b      	ldrb	r3, [r3, #20]
 800e560:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e564:	b2da      	uxtb	r2, r3
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e56a:	69fa      	ldr	r2, [r7, #28]
 800e56c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e56e:	4413      	add	r3, r2
 800e570:	61fb      	str	r3, [r7, #28]
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	699a      	ldr	r2, [r3, #24]
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	441a      	add	r2, r3
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	619a      	str	r2, [r3, #24]
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	68da      	ldr	r2, [r3, #12]
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	699b      	ldr	r3, [r3, #24]
 800e586:	429a      	cmp	r2, r3
 800e588:	bf38      	it	cc
 800e58a:	461a      	movcc	r2, r3
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	60da      	str	r2, [r3, #12]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	681a      	ldr	r2, [r3, #0]
 800e594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e596:	441a      	add	r2, r3
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	601a      	str	r2, [r3, #0]
 800e59c:	687a      	ldr	r2, [r7, #4]
 800e59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a0:	1ad3      	subs	r3, r2, r3
 800e5a2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	f47f aeb5 	bne.w	800e316 <f_write+0x76>
 800e5ac:	e000      	b.n	800e5b0 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e5ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	7d1b      	ldrb	r3, [r3, #20]
 800e5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5b8:	b2da      	uxtb	r2, r3
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800e5be:	2300      	movs	r3, #0
}
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	3730      	adds	r7, #48	; 0x30
 800e5c4:	46bd      	mov	sp, r7
 800e5c6:	bd80      	pop	{r7, pc}

0800e5c8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b086      	sub	sp, #24
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f107 0208 	add.w	r2, r7, #8
 800e5d6:	4611      	mov	r1, r2
 800e5d8:	4618      	mov	r0, r3
 800e5da:	f7ff fc19 	bl	800de10 <validate>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e5e2:	7dfb      	ldrb	r3, [r7, #23]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d168      	bne.n	800e6ba <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7d1b      	ldrb	r3, [r3, #20]
 800e5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d062      	beq.n	800e6ba <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	7d1b      	ldrb	r3, [r3, #20]
 800e5f8:	b25b      	sxtb	r3, r3
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	da15      	bge.n	800e62a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	7858      	ldrb	r0, [r3, #1]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	6a1a      	ldr	r2, [r3, #32]
 800e60c:	2301      	movs	r3, #1
 800e60e:	f7fd fabd 	bl	800bb8c <disk_write>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <f_sync+0x54>
 800e618:	2301      	movs	r3, #1
 800e61a:	e04f      	b.n	800e6bc <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	7d1b      	ldrb	r3, [r3, #20]
 800e620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e624:	b2da      	uxtb	r2, r3
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e62a:	f7fd f80b 	bl	800b644 <get_fattime>
 800e62e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e630:	68ba      	ldr	r2, [r7, #8]
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e636:	4619      	mov	r1, r3
 800e638:	4610      	mov	r0, r2
 800e63a:	f7fd fd95 	bl	800c168 <move_window>
 800e63e:	4603      	mov	r3, r0
 800e640:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e642:	7dfb      	ldrb	r3, [r7, #23]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d138      	bne.n	800e6ba <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e64c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	330b      	adds	r3, #11
 800e652:	781a      	ldrb	r2, [r3, #0]
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	330b      	adds	r3, #11
 800e658:	f042 0220 	orr.w	r2, r2, #32
 800e65c:	b2d2      	uxtb	r2, r2
 800e65e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6818      	ldr	r0, [r3, #0]
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	689b      	ldr	r3, [r3, #8]
 800e668:	461a      	mov	r2, r3
 800e66a:	68f9      	ldr	r1, [r7, #12]
 800e66c:	f7fe fb21 	bl	800ccb2 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	f103 021c 	add.w	r2, r3, #28
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	68db      	ldr	r3, [r3, #12]
 800e67a:	4619      	mov	r1, r3
 800e67c:	4610      	mov	r0, r2
 800e67e:	f7fd fb19 	bl	800bcb4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	3316      	adds	r3, #22
 800e686:	6939      	ldr	r1, [r7, #16]
 800e688:	4618      	mov	r0, r3
 800e68a:	f7fd fb13 	bl	800bcb4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	3312      	adds	r3, #18
 800e692:	2100      	movs	r1, #0
 800e694:	4618      	mov	r0, r3
 800e696:	f7fd faf2 	bl	800bc7e <st_word>
					fs->wflag = 1;
 800e69a:	68bb      	ldr	r3, [r7, #8]
 800e69c:	2201      	movs	r2, #1
 800e69e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fd fd8e 	bl	800c1c4 <sync_fs>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	7d1b      	ldrb	r3, [r3, #20]
 800e6b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6b4:	b2da      	uxtb	r2, r3
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e6ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6bc:	4618      	mov	r0, r3
 800e6be:	3718      	adds	r7, #24
 800e6c0:	46bd      	mov	sp, r7
 800e6c2:	bd80      	pop	{r7, pc}

0800e6c4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff ff7b 	bl	800e5c8 <f_sync>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e6d6:	7bfb      	ldrb	r3, [r7, #15]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d118      	bne.n	800e70e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	f107 0208 	add.w	r2, r7, #8
 800e6e2:	4611      	mov	r1, r2
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7ff fb93 	bl	800de10 <validate>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d10c      	bne.n	800e70e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	691b      	ldr	r3, [r3, #16]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f7fd fc91 	bl	800c020 <dec_lock>
 800e6fe:	4603      	mov	r3, r0
 800e700:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e702:	7bfb      	ldrb	r3, [r7, #15]
 800e704:	2b00      	cmp	r3, #0
 800e706:	d102      	bne.n	800e70e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e70e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e710:	4618      	mov	r0, r3
 800e712:	3710      	adds	r7, #16
 800e714:	46bd      	mov	sp, r7
 800e716:	bd80      	pop	{r7, pc}

0800e718 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e718:	b480      	push	{r7}
 800e71a:	b087      	sub	sp, #28
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	60f8      	str	r0, [r7, #12]
 800e720:	60b9      	str	r1, [r7, #8]
 800e722:	4613      	mov	r3, r2
 800e724:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e726:	2301      	movs	r3, #1
 800e728:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e72e:	4b1f      	ldr	r3, [pc, #124]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e730:	7a5b      	ldrb	r3, [r3, #9]
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b00      	cmp	r3, #0
 800e736:	d131      	bne.n	800e79c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e738:	4b1c      	ldr	r3, [pc, #112]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e73a:	7a5b      	ldrb	r3, [r3, #9]
 800e73c:	b2db      	uxtb	r3, r3
 800e73e:	461a      	mov	r2, r3
 800e740:	4b1a      	ldr	r3, [pc, #104]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e742:	2100      	movs	r1, #0
 800e744:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e746:	4b19      	ldr	r3, [pc, #100]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e748:	7a5b      	ldrb	r3, [r3, #9]
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	4a17      	ldr	r2, [pc, #92]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e74e:	009b      	lsls	r3, r3, #2
 800e750:	4413      	add	r3, r2
 800e752:	68fa      	ldr	r2, [r7, #12]
 800e754:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e756:	4b15      	ldr	r3, [pc, #84]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e758:	7a5b      	ldrb	r3, [r3, #9]
 800e75a:	b2db      	uxtb	r3, r3
 800e75c:	461a      	mov	r2, r3
 800e75e:	4b13      	ldr	r3, [pc, #76]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e760:	4413      	add	r3, r2
 800e762:	79fa      	ldrb	r2, [r7, #7]
 800e764:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e766:	4b11      	ldr	r3, [pc, #68]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e768:	7a5b      	ldrb	r3, [r3, #9]
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	1c5a      	adds	r2, r3, #1
 800e76e:	b2d1      	uxtb	r1, r2
 800e770:	4a0e      	ldr	r2, [pc, #56]	; (800e7ac <FATFS_LinkDriverEx+0x94>)
 800e772:	7251      	strb	r1, [r2, #9]
 800e774:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e776:	7dbb      	ldrb	r3, [r7, #22]
 800e778:	3330      	adds	r3, #48	; 0x30
 800e77a:	b2da      	uxtb	r2, r3
 800e77c:	68bb      	ldr	r3, [r7, #8]
 800e77e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	3301      	adds	r3, #1
 800e784:	223a      	movs	r2, #58	; 0x3a
 800e786:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e788:	68bb      	ldr	r3, [r7, #8]
 800e78a:	3302      	adds	r3, #2
 800e78c:	222f      	movs	r2, #47	; 0x2f
 800e78e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	3303      	adds	r3, #3
 800e794:	2200      	movs	r2, #0
 800e796:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e798:	2300      	movs	r3, #0
 800e79a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	371c      	adds	r7, #28
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a8:	4770      	bx	lr
 800e7aa:	bf00      	nop
 800e7ac:	20004ad8 	.word	0x20004ad8

0800e7b0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
 800e7b6:	6078      	str	r0, [r7, #4]
 800e7b8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	6839      	ldr	r1, [r7, #0]
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7ff ffaa 	bl	800e718 <FATFS_LinkDriverEx>
 800e7c4:	4603      	mov	r3, r0
}
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	3708      	adds	r7, #8
 800e7ca:	46bd      	mov	sp, r7
 800e7cc:	bd80      	pop	{r7, pc}
	...

0800e7d0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800e7d0:	b480      	push	{r7}
 800e7d2:	b085      	sub	sp, #20
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	6039      	str	r1, [r7, #0]
 800e7da:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800e7dc:	88fb      	ldrh	r3, [r7, #6]
 800e7de:	2b7f      	cmp	r3, #127	; 0x7f
 800e7e0:	d802      	bhi.n	800e7e8 <ff_convert+0x18>
		c = chr;
 800e7e2:	88fb      	ldrh	r3, [r7, #6]
 800e7e4:	81fb      	strh	r3, [r7, #14]
 800e7e6:	e025      	b.n	800e834 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d00b      	beq.n	800e806 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800e7ee:	88fb      	ldrh	r3, [r7, #6]
 800e7f0:	2bff      	cmp	r3, #255	; 0xff
 800e7f2:	d805      	bhi.n	800e800 <ff_convert+0x30>
 800e7f4:	88fb      	ldrh	r3, [r7, #6]
 800e7f6:	3b80      	subs	r3, #128	; 0x80
 800e7f8:	4a12      	ldr	r2, [pc, #72]	; (800e844 <ff_convert+0x74>)
 800e7fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e7fe:	e000      	b.n	800e802 <ff_convert+0x32>
 800e800:	2300      	movs	r3, #0
 800e802:	81fb      	strh	r3, [r7, #14]
 800e804:	e016      	b.n	800e834 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800e806:	2300      	movs	r3, #0
 800e808:	81fb      	strh	r3, [r7, #14]
 800e80a:	e009      	b.n	800e820 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800e80c:	89fb      	ldrh	r3, [r7, #14]
 800e80e:	4a0d      	ldr	r2, [pc, #52]	; (800e844 <ff_convert+0x74>)
 800e810:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e814:	88fa      	ldrh	r2, [r7, #6]
 800e816:	429a      	cmp	r2, r3
 800e818:	d006      	beq.n	800e828 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800e81a:	89fb      	ldrh	r3, [r7, #14]
 800e81c:	3301      	adds	r3, #1
 800e81e:	81fb      	strh	r3, [r7, #14]
 800e820:	89fb      	ldrh	r3, [r7, #14]
 800e822:	2b7f      	cmp	r3, #127	; 0x7f
 800e824:	d9f2      	bls.n	800e80c <ff_convert+0x3c>
 800e826:	e000      	b.n	800e82a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800e828:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800e82a:	89fb      	ldrh	r3, [r7, #14]
 800e82c:	3380      	adds	r3, #128	; 0x80
 800e82e:	b29b      	uxth	r3, r3
 800e830:	b2db      	uxtb	r3, r3
 800e832:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800e834:	89fb      	ldrh	r3, [r7, #14]
}
 800e836:	4618      	mov	r0, r3
 800e838:	3714      	adds	r7, #20
 800e83a:	46bd      	mov	sp, r7
 800e83c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e840:	4770      	bx	lr
 800e842:	bf00      	nop
 800e844:	0801e9f8 	.word	0x0801e9f8

0800e848 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800e848:	b480      	push	{r7}
 800e84a:	b087      	sub	sp, #28
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	4603      	mov	r3, r0
 800e850:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800e852:	88fb      	ldrh	r3, [r7, #6]
 800e854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e858:	d201      	bcs.n	800e85e <ff_wtoupper+0x16>
 800e85a:	4b3e      	ldr	r3, [pc, #248]	; (800e954 <ff_wtoupper+0x10c>)
 800e85c:	e000      	b.n	800e860 <ff_wtoupper+0x18>
 800e85e:	4b3e      	ldr	r3, [pc, #248]	; (800e958 <ff_wtoupper+0x110>)
 800e860:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	1c9a      	adds	r2, r3, #2
 800e866:	617a      	str	r2, [r7, #20]
 800e868:	881b      	ldrh	r3, [r3, #0]
 800e86a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800e86c:	8a7b      	ldrh	r3, [r7, #18]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d068      	beq.n	800e944 <ff_wtoupper+0xfc>
 800e872:	88fa      	ldrh	r2, [r7, #6]
 800e874:	8a7b      	ldrh	r3, [r7, #18]
 800e876:	429a      	cmp	r2, r3
 800e878:	d364      	bcc.n	800e944 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	1c9a      	adds	r2, r3, #2
 800e87e:	617a      	str	r2, [r7, #20]
 800e880:	881b      	ldrh	r3, [r3, #0]
 800e882:	823b      	strh	r3, [r7, #16]
 800e884:	8a3b      	ldrh	r3, [r7, #16]
 800e886:	0a1b      	lsrs	r3, r3, #8
 800e888:	81fb      	strh	r3, [r7, #14]
 800e88a:	8a3b      	ldrh	r3, [r7, #16]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800e890:	88fa      	ldrh	r2, [r7, #6]
 800e892:	8a79      	ldrh	r1, [r7, #18]
 800e894:	8a3b      	ldrh	r3, [r7, #16]
 800e896:	440b      	add	r3, r1
 800e898:	429a      	cmp	r2, r3
 800e89a:	da49      	bge.n	800e930 <ff_wtoupper+0xe8>
			switch (cmd) {
 800e89c:	89fb      	ldrh	r3, [r7, #14]
 800e89e:	2b08      	cmp	r3, #8
 800e8a0:	d84f      	bhi.n	800e942 <ff_wtoupper+0xfa>
 800e8a2:	a201      	add	r2, pc, #4	; (adr r2, 800e8a8 <ff_wtoupper+0x60>)
 800e8a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8a8:	0800e8cd 	.word	0x0800e8cd
 800e8ac:	0800e8df 	.word	0x0800e8df
 800e8b0:	0800e8f5 	.word	0x0800e8f5
 800e8b4:	0800e8fd 	.word	0x0800e8fd
 800e8b8:	0800e905 	.word	0x0800e905
 800e8bc:	0800e90d 	.word	0x0800e90d
 800e8c0:	0800e915 	.word	0x0800e915
 800e8c4:	0800e91d 	.word	0x0800e91d
 800e8c8:	0800e925 	.word	0x0800e925
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800e8cc:	88fa      	ldrh	r2, [r7, #6]
 800e8ce:	8a7b      	ldrh	r3, [r7, #18]
 800e8d0:	1ad3      	subs	r3, r2, r3
 800e8d2:	005b      	lsls	r3, r3, #1
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	4413      	add	r3, r2
 800e8d8:	881b      	ldrh	r3, [r3, #0]
 800e8da:	80fb      	strh	r3, [r7, #6]
 800e8dc:	e027      	b.n	800e92e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800e8de:	88fa      	ldrh	r2, [r7, #6]
 800e8e0:	8a7b      	ldrh	r3, [r7, #18]
 800e8e2:	1ad3      	subs	r3, r2, r3
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	f003 0301 	and.w	r3, r3, #1
 800e8ea:	b29b      	uxth	r3, r3
 800e8ec:	88fa      	ldrh	r2, [r7, #6]
 800e8ee:	1ad3      	subs	r3, r2, r3
 800e8f0:	80fb      	strh	r3, [r7, #6]
 800e8f2:	e01c      	b.n	800e92e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800e8f4:	88fb      	ldrh	r3, [r7, #6]
 800e8f6:	3b10      	subs	r3, #16
 800e8f8:	80fb      	strh	r3, [r7, #6]
 800e8fa:	e018      	b.n	800e92e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800e8fc:	88fb      	ldrh	r3, [r7, #6]
 800e8fe:	3b20      	subs	r3, #32
 800e900:	80fb      	strh	r3, [r7, #6]
 800e902:	e014      	b.n	800e92e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800e904:	88fb      	ldrh	r3, [r7, #6]
 800e906:	3b30      	subs	r3, #48	; 0x30
 800e908:	80fb      	strh	r3, [r7, #6]
 800e90a:	e010      	b.n	800e92e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800e90c:	88fb      	ldrh	r3, [r7, #6]
 800e90e:	3b1a      	subs	r3, #26
 800e910:	80fb      	strh	r3, [r7, #6]
 800e912:	e00c      	b.n	800e92e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800e914:	88fb      	ldrh	r3, [r7, #6]
 800e916:	3308      	adds	r3, #8
 800e918:	80fb      	strh	r3, [r7, #6]
 800e91a:	e008      	b.n	800e92e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800e91c:	88fb      	ldrh	r3, [r7, #6]
 800e91e:	3b50      	subs	r3, #80	; 0x50
 800e920:	80fb      	strh	r3, [r7, #6]
 800e922:	e004      	b.n	800e92e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800e924:	88fb      	ldrh	r3, [r7, #6]
 800e926:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800e92a:	80fb      	strh	r3, [r7, #6]
 800e92c:	bf00      	nop
			}
			break;
 800e92e:	e008      	b.n	800e942 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800e930:	89fb      	ldrh	r3, [r7, #14]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d195      	bne.n	800e862 <ff_wtoupper+0x1a>
 800e936:	8a3b      	ldrh	r3, [r7, #16]
 800e938:	005b      	lsls	r3, r3, #1
 800e93a:	697a      	ldr	r2, [r7, #20]
 800e93c:	4413      	add	r3, r2
 800e93e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800e940:	e78f      	b.n	800e862 <ff_wtoupper+0x1a>
			break;
 800e942:	bf00      	nop
	}

	return chr;
 800e944:	88fb      	ldrh	r3, [r7, #6]
}
 800e946:	4618      	mov	r0, r3
 800e948:	371c      	adds	r7, #28
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	0801eaf8 	.word	0x0801eaf8
 800e958:	0801ecec 	.word	0x0801ecec

0800e95c <siprintf>:
 800e95c:	b40e      	push	{r1, r2, r3}
 800e95e:	b500      	push	{lr}
 800e960:	b09c      	sub	sp, #112	; 0x70
 800e962:	ab1d      	add	r3, sp, #116	; 0x74
 800e964:	9002      	str	r0, [sp, #8]
 800e966:	9006      	str	r0, [sp, #24]
 800e968:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e96c:	4809      	ldr	r0, [pc, #36]	; (800e994 <siprintf+0x38>)
 800e96e:	9107      	str	r1, [sp, #28]
 800e970:	9104      	str	r1, [sp, #16]
 800e972:	4909      	ldr	r1, [pc, #36]	; (800e998 <siprintf+0x3c>)
 800e974:	f853 2b04 	ldr.w	r2, [r3], #4
 800e978:	9105      	str	r1, [sp, #20]
 800e97a:	6800      	ldr	r0, [r0, #0]
 800e97c:	9301      	str	r3, [sp, #4]
 800e97e:	a902      	add	r1, sp, #8
 800e980:	f000 f89a 	bl	800eab8 <_svfiprintf_r>
 800e984:	9b02      	ldr	r3, [sp, #8]
 800e986:	2200      	movs	r2, #0
 800e988:	701a      	strb	r2, [r3, #0]
 800e98a:	b01c      	add	sp, #112	; 0x70
 800e98c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e990:	b003      	add	sp, #12
 800e992:	4770      	bx	lr
 800e994:	20000104 	.word	0x20000104
 800e998:	ffff0208 	.word	0xffff0208

0800e99c <memset>:
 800e99c:	4402      	add	r2, r0
 800e99e:	4603      	mov	r3, r0
 800e9a0:	4293      	cmp	r3, r2
 800e9a2:	d100      	bne.n	800e9a6 <memset+0xa>
 800e9a4:	4770      	bx	lr
 800e9a6:	f803 1b01 	strb.w	r1, [r3], #1
 800e9aa:	e7f9      	b.n	800e9a0 <memset+0x4>

0800e9ac <__errno>:
 800e9ac:	4b01      	ldr	r3, [pc, #4]	; (800e9b4 <__errno+0x8>)
 800e9ae:	6818      	ldr	r0, [r3, #0]
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	20000104 	.word	0x20000104

0800e9b8 <__libc_init_array>:
 800e9b8:	b570      	push	{r4, r5, r6, lr}
 800e9ba:	4d0d      	ldr	r5, [pc, #52]	; (800e9f0 <__libc_init_array+0x38>)
 800e9bc:	4c0d      	ldr	r4, [pc, #52]	; (800e9f4 <__libc_init_array+0x3c>)
 800e9be:	1b64      	subs	r4, r4, r5
 800e9c0:	10a4      	asrs	r4, r4, #2
 800e9c2:	2600      	movs	r6, #0
 800e9c4:	42a6      	cmp	r6, r4
 800e9c6:	d109      	bne.n	800e9dc <__libc_init_array+0x24>
 800e9c8:	4d0b      	ldr	r5, [pc, #44]	; (800e9f8 <__libc_init_array+0x40>)
 800e9ca:	4c0c      	ldr	r4, [pc, #48]	; (800e9fc <__libc_init_array+0x44>)
 800e9cc:	f000 fc6a 	bl	800f2a4 <_init>
 800e9d0:	1b64      	subs	r4, r4, r5
 800e9d2:	10a4      	asrs	r4, r4, #2
 800e9d4:	2600      	movs	r6, #0
 800e9d6:	42a6      	cmp	r6, r4
 800e9d8:	d105      	bne.n	800e9e6 <__libc_init_array+0x2e>
 800e9da:	bd70      	pop	{r4, r5, r6, pc}
 800e9dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9e0:	4798      	blx	r3
 800e9e2:	3601      	adds	r6, #1
 800e9e4:	e7ee      	b.n	800e9c4 <__libc_init_array+0xc>
 800e9e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e9ea:	4798      	blx	r3
 800e9ec:	3601      	adds	r6, #1
 800e9ee:	e7f2      	b.n	800e9d6 <__libc_init_array+0x1e>
 800e9f0:	0801ede4 	.word	0x0801ede4
 800e9f4:	0801ede4 	.word	0x0801ede4
 800e9f8:	0801ede4 	.word	0x0801ede4
 800e9fc:	0801ede8 	.word	0x0801ede8

0800ea00 <__retarget_lock_acquire_recursive>:
 800ea00:	4770      	bx	lr

0800ea02 <__retarget_lock_release_recursive>:
 800ea02:	4770      	bx	lr

0800ea04 <__ssputs_r>:
 800ea04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea08:	688e      	ldr	r6, [r1, #8]
 800ea0a:	461f      	mov	r7, r3
 800ea0c:	42be      	cmp	r6, r7
 800ea0e:	680b      	ldr	r3, [r1, #0]
 800ea10:	4682      	mov	sl, r0
 800ea12:	460c      	mov	r4, r1
 800ea14:	4690      	mov	r8, r2
 800ea16:	d82c      	bhi.n	800ea72 <__ssputs_r+0x6e>
 800ea18:	898a      	ldrh	r2, [r1, #12]
 800ea1a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ea1e:	d026      	beq.n	800ea6e <__ssputs_r+0x6a>
 800ea20:	6965      	ldr	r5, [r4, #20]
 800ea22:	6909      	ldr	r1, [r1, #16]
 800ea24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ea28:	eba3 0901 	sub.w	r9, r3, r1
 800ea2c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ea30:	1c7b      	adds	r3, r7, #1
 800ea32:	444b      	add	r3, r9
 800ea34:	106d      	asrs	r5, r5, #1
 800ea36:	429d      	cmp	r5, r3
 800ea38:	bf38      	it	cc
 800ea3a:	461d      	movcc	r5, r3
 800ea3c:	0553      	lsls	r3, r2, #21
 800ea3e:	d527      	bpl.n	800ea90 <__ssputs_r+0x8c>
 800ea40:	4629      	mov	r1, r5
 800ea42:	f000 f957 	bl	800ecf4 <_malloc_r>
 800ea46:	4606      	mov	r6, r0
 800ea48:	b360      	cbz	r0, 800eaa4 <__ssputs_r+0xa0>
 800ea4a:	6921      	ldr	r1, [r4, #16]
 800ea4c:	464a      	mov	r2, r9
 800ea4e:	f000 fbc7 	bl	800f1e0 <memcpy>
 800ea52:	89a3      	ldrh	r3, [r4, #12]
 800ea54:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ea58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ea5c:	81a3      	strh	r3, [r4, #12]
 800ea5e:	6126      	str	r6, [r4, #16]
 800ea60:	6165      	str	r5, [r4, #20]
 800ea62:	444e      	add	r6, r9
 800ea64:	eba5 0509 	sub.w	r5, r5, r9
 800ea68:	6026      	str	r6, [r4, #0]
 800ea6a:	60a5      	str	r5, [r4, #8]
 800ea6c:	463e      	mov	r6, r7
 800ea6e:	42be      	cmp	r6, r7
 800ea70:	d900      	bls.n	800ea74 <__ssputs_r+0x70>
 800ea72:	463e      	mov	r6, r7
 800ea74:	6820      	ldr	r0, [r4, #0]
 800ea76:	4632      	mov	r2, r6
 800ea78:	4641      	mov	r1, r8
 800ea7a:	f000 fb86 	bl	800f18a <memmove>
 800ea7e:	68a3      	ldr	r3, [r4, #8]
 800ea80:	1b9b      	subs	r3, r3, r6
 800ea82:	60a3      	str	r3, [r4, #8]
 800ea84:	6823      	ldr	r3, [r4, #0]
 800ea86:	4433      	add	r3, r6
 800ea88:	6023      	str	r3, [r4, #0]
 800ea8a:	2000      	movs	r0, #0
 800ea8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea90:	462a      	mov	r2, r5
 800ea92:	f000 fb4b 	bl	800f12c <_realloc_r>
 800ea96:	4606      	mov	r6, r0
 800ea98:	2800      	cmp	r0, #0
 800ea9a:	d1e0      	bne.n	800ea5e <__ssputs_r+0x5a>
 800ea9c:	6921      	ldr	r1, [r4, #16]
 800ea9e:	4650      	mov	r0, sl
 800eaa0:	f000 fbac 	bl	800f1fc <_free_r>
 800eaa4:	230c      	movs	r3, #12
 800eaa6:	f8ca 3000 	str.w	r3, [sl]
 800eaaa:	89a3      	ldrh	r3, [r4, #12]
 800eaac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eab0:	81a3      	strh	r3, [r4, #12]
 800eab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eab6:	e7e9      	b.n	800ea8c <__ssputs_r+0x88>

0800eab8 <_svfiprintf_r>:
 800eab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eabc:	4698      	mov	r8, r3
 800eabe:	898b      	ldrh	r3, [r1, #12]
 800eac0:	061b      	lsls	r3, r3, #24
 800eac2:	b09d      	sub	sp, #116	; 0x74
 800eac4:	4607      	mov	r7, r0
 800eac6:	460d      	mov	r5, r1
 800eac8:	4614      	mov	r4, r2
 800eaca:	d50e      	bpl.n	800eaea <_svfiprintf_r+0x32>
 800eacc:	690b      	ldr	r3, [r1, #16]
 800eace:	b963      	cbnz	r3, 800eaea <_svfiprintf_r+0x32>
 800ead0:	2140      	movs	r1, #64	; 0x40
 800ead2:	f000 f90f 	bl	800ecf4 <_malloc_r>
 800ead6:	6028      	str	r0, [r5, #0]
 800ead8:	6128      	str	r0, [r5, #16]
 800eada:	b920      	cbnz	r0, 800eae6 <_svfiprintf_r+0x2e>
 800eadc:	230c      	movs	r3, #12
 800eade:	603b      	str	r3, [r7, #0]
 800eae0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eae4:	e0d0      	b.n	800ec88 <_svfiprintf_r+0x1d0>
 800eae6:	2340      	movs	r3, #64	; 0x40
 800eae8:	616b      	str	r3, [r5, #20]
 800eaea:	2300      	movs	r3, #0
 800eaec:	9309      	str	r3, [sp, #36]	; 0x24
 800eaee:	2320      	movs	r3, #32
 800eaf0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eaf4:	f8cd 800c 	str.w	r8, [sp, #12]
 800eaf8:	2330      	movs	r3, #48	; 0x30
 800eafa:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800eca0 <_svfiprintf_r+0x1e8>
 800eafe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eb02:	f04f 0901 	mov.w	r9, #1
 800eb06:	4623      	mov	r3, r4
 800eb08:	469a      	mov	sl, r3
 800eb0a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eb0e:	b10a      	cbz	r2, 800eb14 <_svfiprintf_r+0x5c>
 800eb10:	2a25      	cmp	r2, #37	; 0x25
 800eb12:	d1f9      	bne.n	800eb08 <_svfiprintf_r+0x50>
 800eb14:	ebba 0b04 	subs.w	fp, sl, r4
 800eb18:	d00b      	beq.n	800eb32 <_svfiprintf_r+0x7a>
 800eb1a:	465b      	mov	r3, fp
 800eb1c:	4622      	mov	r2, r4
 800eb1e:	4629      	mov	r1, r5
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7ff ff6f 	bl	800ea04 <__ssputs_r>
 800eb26:	3001      	adds	r0, #1
 800eb28:	f000 80a9 	beq.w	800ec7e <_svfiprintf_r+0x1c6>
 800eb2c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800eb2e:	445a      	add	r2, fp
 800eb30:	9209      	str	r2, [sp, #36]	; 0x24
 800eb32:	f89a 3000 	ldrb.w	r3, [sl]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f000 80a1 	beq.w	800ec7e <_svfiprintf_r+0x1c6>
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb46:	f10a 0a01 	add.w	sl, sl, #1
 800eb4a:	9304      	str	r3, [sp, #16]
 800eb4c:	9307      	str	r3, [sp, #28]
 800eb4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800eb52:	931a      	str	r3, [sp, #104]	; 0x68
 800eb54:	4654      	mov	r4, sl
 800eb56:	2205      	movs	r2, #5
 800eb58:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb5c:	4850      	ldr	r0, [pc, #320]	; (800eca0 <_svfiprintf_r+0x1e8>)
 800eb5e:	f7f1 fb5f 	bl	8000220 <memchr>
 800eb62:	9a04      	ldr	r2, [sp, #16]
 800eb64:	b9d8      	cbnz	r0, 800eb9e <_svfiprintf_r+0xe6>
 800eb66:	06d0      	lsls	r0, r2, #27
 800eb68:	bf44      	itt	mi
 800eb6a:	2320      	movmi	r3, #32
 800eb6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb70:	0711      	lsls	r1, r2, #28
 800eb72:	bf44      	itt	mi
 800eb74:	232b      	movmi	r3, #43	; 0x2b
 800eb76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800eb7a:	f89a 3000 	ldrb.w	r3, [sl]
 800eb7e:	2b2a      	cmp	r3, #42	; 0x2a
 800eb80:	d015      	beq.n	800ebae <_svfiprintf_r+0xf6>
 800eb82:	9a07      	ldr	r2, [sp, #28]
 800eb84:	4654      	mov	r4, sl
 800eb86:	2000      	movs	r0, #0
 800eb88:	f04f 0c0a 	mov.w	ip, #10
 800eb8c:	4621      	mov	r1, r4
 800eb8e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb92:	3b30      	subs	r3, #48	; 0x30
 800eb94:	2b09      	cmp	r3, #9
 800eb96:	d94d      	bls.n	800ec34 <_svfiprintf_r+0x17c>
 800eb98:	b1b0      	cbz	r0, 800ebc8 <_svfiprintf_r+0x110>
 800eb9a:	9207      	str	r2, [sp, #28]
 800eb9c:	e014      	b.n	800ebc8 <_svfiprintf_r+0x110>
 800eb9e:	eba0 0308 	sub.w	r3, r0, r8
 800eba2:	fa09 f303 	lsl.w	r3, r9, r3
 800eba6:	4313      	orrs	r3, r2
 800eba8:	9304      	str	r3, [sp, #16]
 800ebaa:	46a2      	mov	sl, r4
 800ebac:	e7d2      	b.n	800eb54 <_svfiprintf_r+0x9c>
 800ebae:	9b03      	ldr	r3, [sp, #12]
 800ebb0:	1d19      	adds	r1, r3, #4
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	9103      	str	r1, [sp, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	bfbb      	ittet	lt
 800ebba:	425b      	neglt	r3, r3
 800ebbc:	f042 0202 	orrlt.w	r2, r2, #2
 800ebc0:	9307      	strge	r3, [sp, #28]
 800ebc2:	9307      	strlt	r3, [sp, #28]
 800ebc4:	bfb8      	it	lt
 800ebc6:	9204      	strlt	r2, [sp, #16]
 800ebc8:	7823      	ldrb	r3, [r4, #0]
 800ebca:	2b2e      	cmp	r3, #46	; 0x2e
 800ebcc:	d10c      	bne.n	800ebe8 <_svfiprintf_r+0x130>
 800ebce:	7863      	ldrb	r3, [r4, #1]
 800ebd0:	2b2a      	cmp	r3, #42	; 0x2a
 800ebd2:	d134      	bne.n	800ec3e <_svfiprintf_r+0x186>
 800ebd4:	9b03      	ldr	r3, [sp, #12]
 800ebd6:	1d1a      	adds	r2, r3, #4
 800ebd8:	681b      	ldr	r3, [r3, #0]
 800ebda:	9203      	str	r2, [sp, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	bfb8      	it	lt
 800ebe0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ebe4:	3402      	adds	r4, #2
 800ebe6:	9305      	str	r3, [sp, #20]
 800ebe8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ecb0 <_svfiprintf_r+0x1f8>
 800ebec:	7821      	ldrb	r1, [r4, #0]
 800ebee:	2203      	movs	r2, #3
 800ebf0:	4650      	mov	r0, sl
 800ebf2:	f7f1 fb15 	bl	8000220 <memchr>
 800ebf6:	b138      	cbz	r0, 800ec08 <_svfiprintf_r+0x150>
 800ebf8:	9b04      	ldr	r3, [sp, #16]
 800ebfa:	eba0 000a 	sub.w	r0, r0, sl
 800ebfe:	2240      	movs	r2, #64	; 0x40
 800ec00:	4082      	lsls	r2, r0
 800ec02:	4313      	orrs	r3, r2
 800ec04:	3401      	adds	r4, #1
 800ec06:	9304      	str	r3, [sp, #16]
 800ec08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec0c:	4825      	ldr	r0, [pc, #148]	; (800eca4 <_svfiprintf_r+0x1ec>)
 800ec0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ec12:	2206      	movs	r2, #6
 800ec14:	f7f1 fb04 	bl	8000220 <memchr>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	d038      	beq.n	800ec8e <_svfiprintf_r+0x1d6>
 800ec1c:	4b22      	ldr	r3, [pc, #136]	; (800eca8 <_svfiprintf_r+0x1f0>)
 800ec1e:	bb1b      	cbnz	r3, 800ec68 <_svfiprintf_r+0x1b0>
 800ec20:	9b03      	ldr	r3, [sp, #12]
 800ec22:	3307      	adds	r3, #7
 800ec24:	f023 0307 	bic.w	r3, r3, #7
 800ec28:	3308      	adds	r3, #8
 800ec2a:	9303      	str	r3, [sp, #12]
 800ec2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec2e:	4433      	add	r3, r6
 800ec30:	9309      	str	r3, [sp, #36]	; 0x24
 800ec32:	e768      	b.n	800eb06 <_svfiprintf_r+0x4e>
 800ec34:	fb0c 3202 	mla	r2, ip, r2, r3
 800ec38:	460c      	mov	r4, r1
 800ec3a:	2001      	movs	r0, #1
 800ec3c:	e7a6      	b.n	800eb8c <_svfiprintf_r+0xd4>
 800ec3e:	2300      	movs	r3, #0
 800ec40:	3401      	adds	r4, #1
 800ec42:	9305      	str	r3, [sp, #20]
 800ec44:	4619      	mov	r1, r3
 800ec46:	f04f 0c0a 	mov.w	ip, #10
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec50:	3a30      	subs	r2, #48	; 0x30
 800ec52:	2a09      	cmp	r2, #9
 800ec54:	d903      	bls.n	800ec5e <_svfiprintf_r+0x1a6>
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d0c6      	beq.n	800ebe8 <_svfiprintf_r+0x130>
 800ec5a:	9105      	str	r1, [sp, #20]
 800ec5c:	e7c4      	b.n	800ebe8 <_svfiprintf_r+0x130>
 800ec5e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec62:	4604      	mov	r4, r0
 800ec64:	2301      	movs	r3, #1
 800ec66:	e7f0      	b.n	800ec4a <_svfiprintf_r+0x192>
 800ec68:	ab03      	add	r3, sp, #12
 800ec6a:	9300      	str	r3, [sp, #0]
 800ec6c:	462a      	mov	r2, r5
 800ec6e:	4b0f      	ldr	r3, [pc, #60]	; (800ecac <_svfiprintf_r+0x1f4>)
 800ec70:	a904      	add	r1, sp, #16
 800ec72:	4638      	mov	r0, r7
 800ec74:	f3af 8000 	nop.w
 800ec78:	1c42      	adds	r2, r0, #1
 800ec7a:	4606      	mov	r6, r0
 800ec7c:	d1d6      	bne.n	800ec2c <_svfiprintf_r+0x174>
 800ec7e:	89ab      	ldrh	r3, [r5, #12]
 800ec80:	065b      	lsls	r3, r3, #25
 800ec82:	f53f af2d 	bmi.w	800eae0 <_svfiprintf_r+0x28>
 800ec86:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ec88:	b01d      	add	sp, #116	; 0x74
 800ec8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec8e:	ab03      	add	r3, sp, #12
 800ec90:	9300      	str	r3, [sp, #0]
 800ec92:	462a      	mov	r2, r5
 800ec94:	4b05      	ldr	r3, [pc, #20]	; (800ecac <_svfiprintf_r+0x1f4>)
 800ec96:	a904      	add	r1, sp, #16
 800ec98:	4638      	mov	r0, r7
 800ec9a:	f000 f919 	bl	800eed0 <_printf_i>
 800ec9e:	e7eb      	b.n	800ec78 <_svfiprintf_r+0x1c0>
 800eca0:	0801eda8 	.word	0x0801eda8
 800eca4:	0801edb2 	.word	0x0801edb2
 800eca8:	00000000 	.word	0x00000000
 800ecac:	0800ea05 	.word	0x0800ea05
 800ecb0:	0801edae 	.word	0x0801edae

0800ecb4 <sbrk_aligned>:
 800ecb4:	b570      	push	{r4, r5, r6, lr}
 800ecb6:	4e0e      	ldr	r6, [pc, #56]	; (800ecf0 <sbrk_aligned+0x3c>)
 800ecb8:	460c      	mov	r4, r1
 800ecba:	6831      	ldr	r1, [r6, #0]
 800ecbc:	4605      	mov	r5, r0
 800ecbe:	b911      	cbnz	r1, 800ecc6 <sbrk_aligned+0x12>
 800ecc0:	f000 fa7e 	bl	800f1c0 <_sbrk_r>
 800ecc4:	6030      	str	r0, [r6, #0]
 800ecc6:	4621      	mov	r1, r4
 800ecc8:	4628      	mov	r0, r5
 800ecca:	f000 fa79 	bl	800f1c0 <_sbrk_r>
 800ecce:	1c43      	adds	r3, r0, #1
 800ecd0:	d00a      	beq.n	800ece8 <sbrk_aligned+0x34>
 800ecd2:	1cc4      	adds	r4, r0, #3
 800ecd4:	f024 0403 	bic.w	r4, r4, #3
 800ecd8:	42a0      	cmp	r0, r4
 800ecda:	d007      	beq.n	800ecec <sbrk_aligned+0x38>
 800ecdc:	1a21      	subs	r1, r4, r0
 800ecde:	4628      	mov	r0, r5
 800ece0:	f000 fa6e 	bl	800f1c0 <_sbrk_r>
 800ece4:	3001      	adds	r0, #1
 800ece6:	d101      	bne.n	800ecec <sbrk_aligned+0x38>
 800ece8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ecec:	4620      	mov	r0, r4
 800ecee:	bd70      	pop	{r4, r5, r6, pc}
 800ecf0:	20004c24 	.word	0x20004c24

0800ecf4 <_malloc_r>:
 800ecf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecf8:	1ccd      	adds	r5, r1, #3
 800ecfa:	f025 0503 	bic.w	r5, r5, #3
 800ecfe:	3508      	adds	r5, #8
 800ed00:	2d0c      	cmp	r5, #12
 800ed02:	bf38      	it	cc
 800ed04:	250c      	movcc	r5, #12
 800ed06:	2d00      	cmp	r5, #0
 800ed08:	4607      	mov	r7, r0
 800ed0a:	db01      	blt.n	800ed10 <_malloc_r+0x1c>
 800ed0c:	42a9      	cmp	r1, r5
 800ed0e:	d905      	bls.n	800ed1c <_malloc_r+0x28>
 800ed10:	230c      	movs	r3, #12
 800ed12:	603b      	str	r3, [r7, #0]
 800ed14:	2600      	movs	r6, #0
 800ed16:	4630      	mov	r0, r6
 800ed18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ed1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800edf0 <_malloc_r+0xfc>
 800ed20:	f000 f9f8 	bl	800f114 <__malloc_lock>
 800ed24:	f8d8 3000 	ldr.w	r3, [r8]
 800ed28:	461c      	mov	r4, r3
 800ed2a:	bb5c      	cbnz	r4, 800ed84 <_malloc_r+0x90>
 800ed2c:	4629      	mov	r1, r5
 800ed2e:	4638      	mov	r0, r7
 800ed30:	f7ff ffc0 	bl	800ecb4 <sbrk_aligned>
 800ed34:	1c43      	adds	r3, r0, #1
 800ed36:	4604      	mov	r4, r0
 800ed38:	d155      	bne.n	800ede6 <_malloc_r+0xf2>
 800ed3a:	f8d8 4000 	ldr.w	r4, [r8]
 800ed3e:	4626      	mov	r6, r4
 800ed40:	2e00      	cmp	r6, #0
 800ed42:	d145      	bne.n	800edd0 <_malloc_r+0xdc>
 800ed44:	2c00      	cmp	r4, #0
 800ed46:	d048      	beq.n	800edda <_malloc_r+0xe6>
 800ed48:	6823      	ldr	r3, [r4, #0]
 800ed4a:	4631      	mov	r1, r6
 800ed4c:	4638      	mov	r0, r7
 800ed4e:	eb04 0903 	add.w	r9, r4, r3
 800ed52:	f000 fa35 	bl	800f1c0 <_sbrk_r>
 800ed56:	4581      	cmp	r9, r0
 800ed58:	d13f      	bne.n	800edda <_malloc_r+0xe6>
 800ed5a:	6821      	ldr	r1, [r4, #0]
 800ed5c:	1a6d      	subs	r5, r5, r1
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4638      	mov	r0, r7
 800ed62:	f7ff ffa7 	bl	800ecb4 <sbrk_aligned>
 800ed66:	3001      	adds	r0, #1
 800ed68:	d037      	beq.n	800edda <_malloc_r+0xe6>
 800ed6a:	6823      	ldr	r3, [r4, #0]
 800ed6c:	442b      	add	r3, r5
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	f8d8 3000 	ldr.w	r3, [r8]
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d038      	beq.n	800edea <_malloc_r+0xf6>
 800ed78:	685a      	ldr	r2, [r3, #4]
 800ed7a:	42a2      	cmp	r2, r4
 800ed7c:	d12b      	bne.n	800edd6 <_malloc_r+0xe2>
 800ed7e:	2200      	movs	r2, #0
 800ed80:	605a      	str	r2, [r3, #4]
 800ed82:	e00f      	b.n	800eda4 <_malloc_r+0xb0>
 800ed84:	6822      	ldr	r2, [r4, #0]
 800ed86:	1b52      	subs	r2, r2, r5
 800ed88:	d41f      	bmi.n	800edca <_malloc_r+0xd6>
 800ed8a:	2a0b      	cmp	r2, #11
 800ed8c:	d917      	bls.n	800edbe <_malloc_r+0xca>
 800ed8e:	1961      	adds	r1, r4, r5
 800ed90:	42a3      	cmp	r3, r4
 800ed92:	6025      	str	r5, [r4, #0]
 800ed94:	bf18      	it	ne
 800ed96:	6059      	strne	r1, [r3, #4]
 800ed98:	6863      	ldr	r3, [r4, #4]
 800ed9a:	bf08      	it	eq
 800ed9c:	f8c8 1000 	streq.w	r1, [r8]
 800eda0:	5162      	str	r2, [r4, r5]
 800eda2:	604b      	str	r3, [r1, #4]
 800eda4:	4638      	mov	r0, r7
 800eda6:	f104 060b 	add.w	r6, r4, #11
 800edaa:	f000 f9b9 	bl	800f120 <__malloc_unlock>
 800edae:	f026 0607 	bic.w	r6, r6, #7
 800edb2:	1d23      	adds	r3, r4, #4
 800edb4:	1af2      	subs	r2, r6, r3
 800edb6:	d0ae      	beq.n	800ed16 <_malloc_r+0x22>
 800edb8:	1b9b      	subs	r3, r3, r6
 800edba:	50a3      	str	r3, [r4, r2]
 800edbc:	e7ab      	b.n	800ed16 <_malloc_r+0x22>
 800edbe:	42a3      	cmp	r3, r4
 800edc0:	6862      	ldr	r2, [r4, #4]
 800edc2:	d1dd      	bne.n	800ed80 <_malloc_r+0x8c>
 800edc4:	f8c8 2000 	str.w	r2, [r8]
 800edc8:	e7ec      	b.n	800eda4 <_malloc_r+0xb0>
 800edca:	4623      	mov	r3, r4
 800edcc:	6864      	ldr	r4, [r4, #4]
 800edce:	e7ac      	b.n	800ed2a <_malloc_r+0x36>
 800edd0:	4634      	mov	r4, r6
 800edd2:	6876      	ldr	r6, [r6, #4]
 800edd4:	e7b4      	b.n	800ed40 <_malloc_r+0x4c>
 800edd6:	4613      	mov	r3, r2
 800edd8:	e7cc      	b.n	800ed74 <_malloc_r+0x80>
 800edda:	230c      	movs	r3, #12
 800eddc:	603b      	str	r3, [r7, #0]
 800edde:	4638      	mov	r0, r7
 800ede0:	f000 f99e 	bl	800f120 <__malloc_unlock>
 800ede4:	e797      	b.n	800ed16 <_malloc_r+0x22>
 800ede6:	6025      	str	r5, [r4, #0]
 800ede8:	e7dc      	b.n	800eda4 <_malloc_r+0xb0>
 800edea:	605b      	str	r3, [r3, #4]
 800edec:	deff      	udf	#255	; 0xff
 800edee:	bf00      	nop
 800edf0:	20004c20 	.word	0x20004c20

0800edf4 <_printf_common>:
 800edf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edf8:	4616      	mov	r6, r2
 800edfa:	4699      	mov	r9, r3
 800edfc:	688a      	ldr	r2, [r1, #8]
 800edfe:	690b      	ldr	r3, [r1, #16]
 800ee00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ee04:	4293      	cmp	r3, r2
 800ee06:	bfb8      	it	lt
 800ee08:	4613      	movlt	r3, r2
 800ee0a:	6033      	str	r3, [r6, #0]
 800ee0c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ee10:	4607      	mov	r7, r0
 800ee12:	460c      	mov	r4, r1
 800ee14:	b10a      	cbz	r2, 800ee1a <_printf_common+0x26>
 800ee16:	3301      	adds	r3, #1
 800ee18:	6033      	str	r3, [r6, #0]
 800ee1a:	6823      	ldr	r3, [r4, #0]
 800ee1c:	0699      	lsls	r1, r3, #26
 800ee1e:	bf42      	ittt	mi
 800ee20:	6833      	ldrmi	r3, [r6, #0]
 800ee22:	3302      	addmi	r3, #2
 800ee24:	6033      	strmi	r3, [r6, #0]
 800ee26:	6825      	ldr	r5, [r4, #0]
 800ee28:	f015 0506 	ands.w	r5, r5, #6
 800ee2c:	d106      	bne.n	800ee3c <_printf_common+0x48>
 800ee2e:	f104 0a19 	add.w	sl, r4, #25
 800ee32:	68e3      	ldr	r3, [r4, #12]
 800ee34:	6832      	ldr	r2, [r6, #0]
 800ee36:	1a9b      	subs	r3, r3, r2
 800ee38:	42ab      	cmp	r3, r5
 800ee3a:	dc26      	bgt.n	800ee8a <_printf_common+0x96>
 800ee3c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ee40:	1e13      	subs	r3, r2, #0
 800ee42:	6822      	ldr	r2, [r4, #0]
 800ee44:	bf18      	it	ne
 800ee46:	2301      	movne	r3, #1
 800ee48:	0692      	lsls	r2, r2, #26
 800ee4a:	d42b      	bmi.n	800eea4 <_printf_common+0xb0>
 800ee4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee50:	4649      	mov	r1, r9
 800ee52:	4638      	mov	r0, r7
 800ee54:	47c0      	blx	r8
 800ee56:	3001      	adds	r0, #1
 800ee58:	d01e      	beq.n	800ee98 <_printf_common+0xa4>
 800ee5a:	6823      	ldr	r3, [r4, #0]
 800ee5c:	6922      	ldr	r2, [r4, #16]
 800ee5e:	f003 0306 	and.w	r3, r3, #6
 800ee62:	2b04      	cmp	r3, #4
 800ee64:	bf02      	ittt	eq
 800ee66:	68e5      	ldreq	r5, [r4, #12]
 800ee68:	6833      	ldreq	r3, [r6, #0]
 800ee6a:	1aed      	subeq	r5, r5, r3
 800ee6c:	68a3      	ldr	r3, [r4, #8]
 800ee6e:	bf0c      	ite	eq
 800ee70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee74:	2500      	movne	r5, #0
 800ee76:	4293      	cmp	r3, r2
 800ee78:	bfc4      	itt	gt
 800ee7a:	1a9b      	subgt	r3, r3, r2
 800ee7c:	18ed      	addgt	r5, r5, r3
 800ee7e:	2600      	movs	r6, #0
 800ee80:	341a      	adds	r4, #26
 800ee82:	42b5      	cmp	r5, r6
 800ee84:	d11a      	bne.n	800eebc <_printf_common+0xc8>
 800ee86:	2000      	movs	r0, #0
 800ee88:	e008      	b.n	800ee9c <_printf_common+0xa8>
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	4652      	mov	r2, sl
 800ee8e:	4649      	mov	r1, r9
 800ee90:	4638      	mov	r0, r7
 800ee92:	47c0      	blx	r8
 800ee94:	3001      	adds	r0, #1
 800ee96:	d103      	bne.n	800eea0 <_printf_common+0xac>
 800ee98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eea0:	3501      	adds	r5, #1
 800eea2:	e7c6      	b.n	800ee32 <_printf_common+0x3e>
 800eea4:	18e1      	adds	r1, r4, r3
 800eea6:	1c5a      	adds	r2, r3, #1
 800eea8:	2030      	movs	r0, #48	; 0x30
 800eeaa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800eeae:	4422      	add	r2, r4
 800eeb0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800eeb4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800eeb8:	3302      	adds	r3, #2
 800eeba:	e7c7      	b.n	800ee4c <_printf_common+0x58>
 800eebc:	2301      	movs	r3, #1
 800eebe:	4622      	mov	r2, r4
 800eec0:	4649      	mov	r1, r9
 800eec2:	4638      	mov	r0, r7
 800eec4:	47c0      	blx	r8
 800eec6:	3001      	adds	r0, #1
 800eec8:	d0e6      	beq.n	800ee98 <_printf_common+0xa4>
 800eeca:	3601      	adds	r6, #1
 800eecc:	e7d9      	b.n	800ee82 <_printf_common+0x8e>
	...

0800eed0 <_printf_i>:
 800eed0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eed4:	7e0f      	ldrb	r7, [r1, #24]
 800eed6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800eed8:	2f78      	cmp	r7, #120	; 0x78
 800eeda:	4691      	mov	r9, r2
 800eedc:	4680      	mov	r8, r0
 800eede:	460c      	mov	r4, r1
 800eee0:	469a      	mov	sl, r3
 800eee2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800eee6:	d807      	bhi.n	800eef8 <_printf_i+0x28>
 800eee8:	2f62      	cmp	r7, #98	; 0x62
 800eeea:	d80a      	bhi.n	800ef02 <_printf_i+0x32>
 800eeec:	2f00      	cmp	r7, #0
 800eeee:	f000 80d4 	beq.w	800f09a <_printf_i+0x1ca>
 800eef2:	2f58      	cmp	r7, #88	; 0x58
 800eef4:	f000 80c0 	beq.w	800f078 <_printf_i+0x1a8>
 800eef8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eefc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ef00:	e03a      	b.n	800ef78 <_printf_i+0xa8>
 800ef02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ef06:	2b15      	cmp	r3, #21
 800ef08:	d8f6      	bhi.n	800eef8 <_printf_i+0x28>
 800ef0a:	a101      	add	r1, pc, #4	; (adr r1, 800ef10 <_printf_i+0x40>)
 800ef0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ef10:	0800ef69 	.word	0x0800ef69
 800ef14:	0800ef7d 	.word	0x0800ef7d
 800ef18:	0800eef9 	.word	0x0800eef9
 800ef1c:	0800eef9 	.word	0x0800eef9
 800ef20:	0800eef9 	.word	0x0800eef9
 800ef24:	0800eef9 	.word	0x0800eef9
 800ef28:	0800ef7d 	.word	0x0800ef7d
 800ef2c:	0800eef9 	.word	0x0800eef9
 800ef30:	0800eef9 	.word	0x0800eef9
 800ef34:	0800eef9 	.word	0x0800eef9
 800ef38:	0800eef9 	.word	0x0800eef9
 800ef3c:	0800f081 	.word	0x0800f081
 800ef40:	0800efa9 	.word	0x0800efa9
 800ef44:	0800f03b 	.word	0x0800f03b
 800ef48:	0800eef9 	.word	0x0800eef9
 800ef4c:	0800eef9 	.word	0x0800eef9
 800ef50:	0800f0a3 	.word	0x0800f0a3
 800ef54:	0800eef9 	.word	0x0800eef9
 800ef58:	0800efa9 	.word	0x0800efa9
 800ef5c:	0800eef9 	.word	0x0800eef9
 800ef60:	0800eef9 	.word	0x0800eef9
 800ef64:	0800f043 	.word	0x0800f043
 800ef68:	682b      	ldr	r3, [r5, #0]
 800ef6a:	1d1a      	adds	r2, r3, #4
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	602a      	str	r2, [r5, #0]
 800ef70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef78:	2301      	movs	r3, #1
 800ef7a:	e09f      	b.n	800f0bc <_printf_i+0x1ec>
 800ef7c:	6820      	ldr	r0, [r4, #0]
 800ef7e:	682b      	ldr	r3, [r5, #0]
 800ef80:	0607      	lsls	r7, r0, #24
 800ef82:	f103 0104 	add.w	r1, r3, #4
 800ef86:	6029      	str	r1, [r5, #0]
 800ef88:	d501      	bpl.n	800ef8e <_printf_i+0xbe>
 800ef8a:	681e      	ldr	r6, [r3, #0]
 800ef8c:	e003      	b.n	800ef96 <_printf_i+0xc6>
 800ef8e:	0646      	lsls	r6, r0, #25
 800ef90:	d5fb      	bpl.n	800ef8a <_printf_i+0xba>
 800ef92:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ef96:	2e00      	cmp	r6, #0
 800ef98:	da03      	bge.n	800efa2 <_printf_i+0xd2>
 800ef9a:	232d      	movs	r3, #45	; 0x2d
 800ef9c:	4276      	negs	r6, r6
 800ef9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800efa2:	485a      	ldr	r0, [pc, #360]	; (800f10c <_printf_i+0x23c>)
 800efa4:	230a      	movs	r3, #10
 800efa6:	e012      	b.n	800efce <_printf_i+0xfe>
 800efa8:	682b      	ldr	r3, [r5, #0]
 800efaa:	6820      	ldr	r0, [r4, #0]
 800efac:	1d19      	adds	r1, r3, #4
 800efae:	6029      	str	r1, [r5, #0]
 800efb0:	0605      	lsls	r5, r0, #24
 800efb2:	d501      	bpl.n	800efb8 <_printf_i+0xe8>
 800efb4:	681e      	ldr	r6, [r3, #0]
 800efb6:	e002      	b.n	800efbe <_printf_i+0xee>
 800efb8:	0641      	lsls	r1, r0, #25
 800efba:	d5fb      	bpl.n	800efb4 <_printf_i+0xe4>
 800efbc:	881e      	ldrh	r6, [r3, #0]
 800efbe:	4853      	ldr	r0, [pc, #332]	; (800f10c <_printf_i+0x23c>)
 800efc0:	2f6f      	cmp	r7, #111	; 0x6f
 800efc2:	bf0c      	ite	eq
 800efc4:	2308      	moveq	r3, #8
 800efc6:	230a      	movne	r3, #10
 800efc8:	2100      	movs	r1, #0
 800efca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800efce:	6865      	ldr	r5, [r4, #4]
 800efd0:	60a5      	str	r5, [r4, #8]
 800efd2:	2d00      	cmp	r5, #0
 800efd4:	bfa2      	ittt	ge
 800efd6:	6821      	ldrge	r1, [r4, #0]
 800efd8:	f021 0104 	bicge.w	r1, r1, #4
 800efdc:	6021      	strge	r1, [r4, #0]
 800efde:	b90e      	cbnz	r6, 800efe4 <_printf_i+0x114>
 800efe0:	2d00      	cmp	r5, #0
 800efe2:	d04b      	beq.n	800f07c <_printf_i+0x1ac>
 800efe4:	4615      	mov	r5, r2
 800efe6:	fbb6 f1f3 	udiv	r1, r6, r3
 800efea:	fb03 6711 	mls	r7, r3, r1, r6
 800efee:	5dc7      	ldrb	r7, [r0, r7]
 800eff0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eff4:	4637      	mov	r7, r6
 800eff6:	42bb      	cmp	r3, r7
 800eff8:	460e      	mov	r6, r1
 800effa:	d9f4      	bls.n	800efe6 <_printf_i+0x116>
 800effc:	2b08      	cmp	r3, #8
 800effe:	d10b      	bne.n	800f018 <_printf_i+0x148>
 800f000:	6823      	ldr	r3, [r4, #0]
 800f002:	07de      	lsls	r6, r3, #31
 800f004:	d508      	bpl.n	800f018 <_printf_i+0x148>
 800f006:	6923      	ldr	r3, [r4, #16]
 800f008:	6861      	ldr	r1, [r4, #4]
 800f00a:	4299      	cmp	r1, r3
 800f00c:	bfde      	ittt	le
 800f00e:	2330      	movle	r3, #48	; 0x30
 800f010:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f014:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f018:	1b52      	subs	r2, r2, r5
 800f01a:	6122      	str	r2, [r4, #16]
 800f01c:	f8cd a000 	str.w	sl, [sp]
 800f020:	464b      	mov	r3, r9
 800f022:	aa03      	add	r2, sp, #12
 800f024:	4621      	mov	r1, r4
 800f026:	4640      	mov	r0, r8
 800f028:	f7ff fee4 	bl	800edf4 <_printf_common>
 800f02c:	3001      	adds	r0, #1
 800f02e:	d14a      	bne.n	800f0c6 <_printf_i+0x1f6>
 800f030:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f034:	b004      	add	sp, #16
 800f036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f03a:	6823      	ldr	r3, [r4, #0]
 800f03c:	f043 0320 	orr.w	r3, r3, #32
 800f040:	6023      	str	r3, [r4, #0]
 800f042:	4833      	ldr	r0, [pc, #204]	; (800f110 <_printf_i+0x240>)
 800f044:	2778      	movs	r7, #120	; 0x78
 800f046:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f04a:	6823      	ldr	r3, [r4, #0]
 800f04c:	6829      	ldr	r1, [r5, #0]
 800f04e:	061f      	lsls	r7, r3, #24
 800f050:	f851 6b04 	ldr.w	r6, [r1], #4
 800f054:	d402      	bmi.n	800f05c <_printf_i+0x18c>
 800f056:	065f      	lsls	r7, r3, #25
 800f058:	bf48      	it	mi
 800f05a:	b2b6      	uxthmi	r6, r6
 800f05c:	07df      	lsls	r7, r3, #31
 800f05e:	bf48      	it	mi
 800f060:	f043 0320 	orrmi.w	r3, r3, #32
 800f064:	6029      	str	r1, [r5, #0]
 800f066:	bf48      	it	mi
 800f068:	6023      	strmi	r3, [r4, #0]
 800f06a:	b91e      	cbnz	r6, 800f074 <_printf_i+0x1a4>
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	f023 0320 	bic.w	r3, r3, #32
 800f072:	6023      	str	r3, [r4, #0]
 800f074:	2310      	movs	r3, #16
 800f076:	e7a7      	b.n	800efc8 <_printf_i+0xf8>
 800f078:	4824      	ldr	r0, [pc, #144]	; (800f10c <_printf_i+0x23c>)
 800f07a:	e7e4      	b.n	800f046 <_printf_i+0x176>
 800f07c:	4615      	mov	r5, r2
 800f07e:	e7bd      	b.n	800effc <_printf_i+0x12c>
 800f080:	682b      	ldr	r3, [r5, #0]
 800f082:	6826      	ldr	r6, [r4, #0]
 800f084:	6961      	ldr	r1, [r4, #20]
 800f086:	1d18      	adds	r0, r3, #4
 800f088:	6028      	str	r0, [r5, #0]
 800f08a:	0635      	lsls	r5, r6, #24
 800f08c:	681b      	ldr	r3, [r3, #0]
 800f08e:	d501      	bpl.n	800f094 <_printf_i+0x1c4>
 800f090:	6019      	str	r1, [r3, #0]
 800f092:	e002      	b.n	800f09a <_printf_i+0x1ca>
 800f094:	0670      	lsls	r0, r6, #25
 800f096:	d5fb      	bpl.n	800f090 <_printf_i+0x1c0>
 800f098:	8019      	strh	r1, [r3, #0]
 800f09a:	2300      	movs	r3, #0
 800f09c:	6123      	str	r3, [r4, #16]
 800f09e:	4615      	mov	r5, r2
 800f0a0:	e7bc      	b.n	800f01c <_printf_i+0x14c>
 800f0a2:	682b      	ldr	r3, [r5, #0]
 800f0a4:	1d1a      	adds	r2, r3, #4
 800f0a6:	602a      	str	r2, [r5, #0]
 800f0a8:	681d      	ldr	r5, [r3, #0]
 800f0aa:	6862      	ldr	r2, [r4, #4]
 800f0ac:	2100      	movs	r1, #0
 800f0ae:	4628      	mov	r0, r5
 800f0b0:	f7f1 f8b6 	bl	8000220 <memchr>
 800f0b4:	b108      	cbz	r0, 800f0ba <_printf_i+0x1ea>
 800f0b6:	1b40      	subs	r0, r0, r5
 800f0b8:	6060      	str	r0, [r4, #4]
 800f0ba:	6863      	ldr	r3, [r4, #4]
 800f0bc:	6123      	str	r3, [r4, #16]
 800f0be:	2300      	movs	r3, #0
 800f0c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f0c4:	e7aa      	b.n	800f01c <_printf_i+0x14c>
 800f0c6:	6923      	ldr	r3, [r4, #16]
 800f0c8:	462a      	mov	r2, r5
 800f0ca:	4649      	mov	r1, r9
 800f0cc:	4640      	mov	r0, r8
 800f0ce:	47d0      	blx	sl
 800f0d0:	3001      	adds	r0, #1
 800f0d2:	d0ad      	beq.n	800f030 <_printf_i+0x160>
 800f0d4:	6823      	ldr	r3, [r4, #0]
 800f0d6:	079b      	lsls	r3, r3, #30
 800f0d8:	d413      	bmi.n	800f102 <_printf_i+0x232>
 800f0da:	68e0      	ldr	r0, [r4, #12]
 800f0dc:	9b03      	ldr	r3, [sp, #12]
 800f0de:	4298      	cmp	r0, r3
 800f0e0:	bfb8      	it	lt
 800f0e2:	4618      	movlt	r0, r3
 800f0e4:	e7a6      	b.n	800f034 <_printf_i+0x164>
 800f0e6:	2301      	movs	r3, #1
 800f0e8:	4632      	mov	r2, r6
 800f0ea:	4649      	mov	r1, r9
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	47d0      	blx	sl
 800f0f0:	3001      	adds	r0, #1
 800f0f2:	d09d      	beq.n	800f030 <_printf_i+0x160>
 800f0f4:	3501      	adds	r5, #1
 800f0f6:	68e3      	ldr	r3, [r4, #12]
 800f0f8:	9903      	ldr	r1, [sp, #12]
 800f0fa:	1a5b      	subs	r3, r3, r1
 800f0fc:	42ab      	cmp	r3, r5
 800f0fe:	dcf2      	bgt.n	800f0e6 <_printf_i+0x216>
 800f100:	e7eb      	b.n	800f0da <_printf_i+0x20a>
 800f102:	2500      	movs	r5, #0
 800f104:	f104 0619 	add.w	r6, r4, #25
 800f108:	e7f5      	b.n	800f0f6 <_printf_i+0x226>
 800f10a:	bf00      	nop
 800f10c:	0801edb9 	.word	0x0801edb9
 800f110:	0801edca 	.word	0x0801edca

0800f114 <__malloc_lock>:
 800f114:	4801      	ldr	r0, [pc, #4]	; (800f11c <__malloc_lock+0x8>)
 800f116:	f7ff bc73 	b.w	800ea00 <__retarget_lock_acquire_recursive>
 800f11a:	bf00      	nop
 800f11c:	20004c1c 	.word	0x20004c1c

0800f120 <__malloc_unlock>:
 800f120:	4801      	ldr	r0, [pc, #4]	; (800f128 <__malloc_unlock+0x8>)
 800f122:	f7ff bc6e 	b.w	800ea02 <__retarget_lock_release_recursive>
 800f126:	bf00      	nop
 800f128:	20004c1c 	.word	0x20004c1c

0800f12c <_realloc_r>:
 800f12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f130:	4680      	mov	r8, r0
 800f132:	4614      	mov	r4, r2
 800f134:	460e      	mov	r6, r1
 800f136:	b921      	cbnz	r1, 800f142 <_realloc_r+0x16>
 800f138:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f13c:	4611      	mov	r1, r2
 800f13e:	f7ff bdd9 	b.w	800ecf4 <_malloc_r>
 800f142:	b92a      	cbnz	r2, 800f150 <_realloc_r+0x24>
 800f144:	f000 f85a 	bl	800f1fc <_free_r>
 800f148:	4625      	mov	r5, r4
 800f14a:	4628      	mov	r0, r5
 800f14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f150:	f000 f8a0 	bl	800f294 <_malloc_usable_size_r>
 800f154:	4284      	cmp	r4, r0
 800f156:	4607      	mov	r7, r0
 800f158:	d802      	bhi.n	800f160 <_realloc_r+0x34>
 800f15a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f15e:	d812      	bhi.n	800f186 <_realloc_r+0x5a>
 800f160:	4621      	mov	r1, r4
 800f162:	4640      	mov	r0, r8
 800f164:	f7ff fdc6 	bl	800ecf4 <_malloc_r>
 800f168:	4605      	mov	r5, r0
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d0ed      	beq.n	800f14a <_realloc_r+0x1e>
 800f16e:	42bc      	cmp	r4, r7
 800f170:	4622      	mov	r2, r4
 800f172:	4631      	mov	r1, r6
 800f174:	bf28      	it	cs
 800f176:	463a      	movcs	r2, r7
 800f178:	f000 f832 	bl	800f1e0 <memcpy>
 800f17c:	4631      	mov	r1, r6
 800f17e:	4640      	mov	r0, r8
 800f180:	f000 f83c 	bl	800f1fc <_free_r>
 800f184:	e7e1      	b.n	800f14a <_realloc_r+0x1e>
 800f186:	4635      	mov	r5, r6
 800f188:	e7df      	b.n	800f14a <_realloc_r+0x1e>

0800f18a <memmove>:
 800f18a:	4288      	cmp	r0, r1
 800f18c:	b510      	push	{r4, lr}
 800f18e:	eb01 0402 	add.w	r4, r1, r2
 800f192:	d902      	bls.n	800f19a <memmove+0x10>
 800f194:	4284      	cmp	r4, r0
 800f196:	4623      	mov	r3, r4
 800f198:	d807      	bhi.n	800f1aa <memmove+0x20>
 800f19a:	1e43      	subs	r3, r0, #1
 800f19c:	42a1      	cmp	r1, r4
 800f19e:	d008      	beq.n	800f1b2 <memmove+0x28>
 800f1a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f1a4:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f1a8:	e7f8      	b.n	800f19c <memmove+0x12>
 800f1aa:	4402      	add	r2, r0
 800f1ac:	4601      	mov	r1, r0
 800f1ae:	428a      	cmp	r2, r1
 800f1b0:	d100      	bne.n	800f1b4 <memmove+0x2a>
 800f1b2:	bd10      	pop	{r4, pc}
 800f1b4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f1b8:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f1bc:	e7f7      	b.n	800f1ae <memmove+0x24>
	...

0800f1c0 <_sbrk_r>:
 800f1c0:	b538      	push	{r3, r4, r5, lr}
 800f1c2:	4d06      	ldr	r5, [pc, #24]	; (800f1dc <_sbrk_r+0x1c>)
 800f1c4:	2300      	movs	r3, #0
 800f1c6:	4604      	mov	r4, r0
 800f1c8:	4608      	mov	r0, r1
 800f1ca:	602b      	str	r3, [r5, #0]
 800f1cc:	f7f4 fd80 	bl	8003cd0 <_sbrk>
 800f1d0:	1c43      	adds	r3, r0, #1
 800f1d2:	d102      	bne.n	800f1da <_sbrk_r+0x1a>
 800f1d4:	682b      	ldr	r3, [r5, #0]
 800f1d6:	b103      	cbz	r3, 800f1da <_sbrk_r+0x1a>
 800f1d8:	6023      	str	r3, [r4, #0]
 800f1da:	bd38      	pop	{r3, r4, r5, pc}
 800f1dc:	20004c28 	.word	0x20004c28

0800f1e0 <memcpy>:
 800f1e0:	440a      	add	r2, r1
 800f1e2:	4291      	cmp	r1, r2
 800f1e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f1e8:	d100      	bne.n	800f1ec <memcpy+0xc>
 800f1ea:	4770      	bx	lr
 800f1ec:	b510      	push	{r4, lr}
 800f1ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f1f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f1f6:	4291      	cmp	r1, r2
 800f1f8:	d1f9      	bne.n	800f1ee <memcpy+0xe>
 800f1fa:	bd10      	pop	{r4, pc}

0800f1fc <_free_r>:
 800f1fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f1fe:	2900      	cmp	r1, #0
 800f200:	d044      	beq.n	800f28c <_free_r+0x90>
 800f202:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f206:	9001      	str	r0, [sp, #4]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	f1a1 0404 	sub.w	r4, r1, #4
 800f20e:	bfb8      	it	lt
 800f210:	18e4      	addlt	r4, r4, r3
 800f212:	f7ff ff7f 	bl	800f114 <__malloc_lock>
 800f216:	4a1e      	ldr	r2, [pc, #120]	; (800f290 <_free_r+0x94>)
 800f218:	9801      	ldr	r0, [sp, #4]
 800f21a:	6813      	ldr	r3, [r2, #0]
 800f21c:	b933      	cbnz	r3, 800f22c <_free_r+0x30>
 800f21e:	6063      	str	r3, [r4, #4]
 800f220:	6014      	str	r4, [r2, #0]
 800f222:	b003      	add	sp, #12
 800f224:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f228:	f7ff bf7a 	b.w	800f120 <__malloc_unlock>
 800f22c:	42a3      	cmp	r3, r4
 800f22e:	d908      	bls.n	800f242 <_free_r+0x46>
 800f230:	6825      	ldr	r5, [r4, #0]
 800f232:	1961      	adds	r1, r4, r5
 800f234:	428b      	cmp	r3, r1
 800f236:	bf01      	itttt	eq
 800f238:	6819      	ldreq	r1, [r3, #0]
 800f23a:	685b      	ldreq	r3, [r3, #4]
 800f23c:	1949      	addeq	r1, r1, r5
 800f23e:	6021      	streq	r1, [r4, #0]
 800f240:	e7ed      	b.n	800f21e <_free_r+0x22>
 800f242:	461a      	mov	r2, r3
 800f244:	685b      	ldr	r3, [r3, #4]
 800f246:	b10b      	cbz	r3, 800f24c <_free_r+0x50>
 800f248:	42a3      	cmp	r3, r4
 800f24a:	d9fa      	bls.n	800f242 <_free_r+0x46>
 800f24c:	6811      	ldr	r1, [r2, #0]
 800f24e:	1855      	adds	r5, r2, r1
 800f250:	42a5      	cmp	r5, r4
 800f252:	d10b      	bne.n	800f26c <_free_r+0x70>
 800f254:	6824      	ldr	r4, [r4, #0]
 800f256:	4421      	add	r1, r4
 800f258:	1854      	adds	r4, r2, r1
 800f25a:	42a3      	cmp	r3, r4
 800f25c:	6011      	str	r1, [r2, #0]
 800f25e:	d1e0      	bne.n	800f222 <_free_r+0x26>
 800f260:	681c      	ldr	r4, [r3, #0]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	6053      	str	r3, [r2, #4]
 800f266:	440c      	add	r4, r1
 800f268:	6014      	str	r4, [r2, #0]
 800f26a:	e7da      	b.n	800f222 <_free_r+0x26>
 800f26c:	d902      	bls.n	800f274 <_free_r+0x78>
 800f26e:	230c      	movs	r3, #12
 800f270:	6003      	str	r3, [r0, #0]
 800f272:	e7d6      	b.n	800f222 <_free_r+0x26>
 800f274:	6825      	ldr	r5, [r4, #0]
 800f276:	1961      	adds	r1, r4, r5
 800f278:	428b      	cmp	r3, r1
 800f27a:	bf04      	itt	eq
 800f27c:	6819      	ldreq	r1, [r3, #0]
 800f27e:	685b      	ldreq	r3, [r3, #4]
 800f280:	6063      	str	r3, [r4, #4]
 800f282:	bf04      	itt	eq
 800f284:	1949      	addeq	r1, r1, r5
 800f286:	6021      	streq	r1, [r4, #0]
 800f288:	6054      	str	r4, [r2, #4]
 800f28a:	e7ca      	b.n	800f222 <_free_r+0x26>
 800f28c:	b003      	add	sp, #12
 800f28e:	bd30      	pop	{r4, r5, pc}
 800f290:	20004c20 	.word	0x20004c20

0800f294 <_malloc_usable_size_r>:
 800f294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f298:	1f18      	subs	r0, r3, #4
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	bfbc      	itt	lt
 800f29e:	580b      	ldrlt	r3, [r1, r0]
 800f2a0:	18c0      	addlt	r0, r0, r3
 800f2a2:	4770      	bx	lr

0800f2a4 <_init>:
 800f2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2a6:	bf00      	nop
 800f2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	469e      	mov	lr, r3
 800f2ae:	4770      	bx	lr

0800f2b0 <_fini>:
 800f2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2b2:	bf00      	nop
 800f2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2b6:	bc08      	pop	{r3}
 800f2b8:	469e      	mov	lr, r3
 800f2ba:	4770      	bx	lr
