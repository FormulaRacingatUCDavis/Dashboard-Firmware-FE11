
FE11_dash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000240c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d424  080025d4  080025d4  000125d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f9f8  0800f9f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f9f8  0800f9f8  0001f9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa00  0800fa00  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa00  0800fa00  0001fa00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa04  0800fa04  0001fa04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800fa08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f8  2000000c  0800fa14  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000104  0800fa14  00020104  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bc7b  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c65  00000000  00000000  0002bcfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c80  00000000  00000000  0002d960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000965  00000000  00000000  0002e5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000266cf  00000000  00000000  0002ef45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d1ea  00000000  00000000  00055614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e69d8  00000000  00000000  000627fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003414  00000000  00000000  001491d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0014c5ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080025bc 	.word	0x080025bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	080025bc 	.word	0x080025bc

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b970 	b.w	8000500 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9e08      	ldr	r6, [sp, #32]
 800023e:	460d      	mov	r5, r1
 8000240:	4604      	mov	r4, r0
 8000242:	460f      	mov	r7, r1
 8000244:	2b00      	cmp	r3, #0
 8000246:	d14a      	bne.n	80002de <__udivmoddi4+0xa6>
 8000248:	428a      	cmp	r2, r1
 800024a:	4694      	mov	ip, r2
 800024c:	d965      	bls.n	800031a <__udivmoddi4+0xe2>
 800024e:	fab2 f382 	clz	r3, r2
 8000252:	b143      	cbz	r3, 8000266 <__udivmoddi4+0x2e>
 8000254:	fa02 fc03 	lsl.w	ip, r2, r3
 8000258:	f1c3 0220 	rsb	r2, r3, #32
 800025c:	409f      	lsls	r7, r3
 800025e:	fa20 f202 	lsr.w	r2, r0, r2
 8000262:	4317      	orrs	r7, r2
 8000264:	409c      	lsls	r4, r3
 8000266:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800026a:	fa1f f58c 	uxth.w	r5, ip
 800026e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000272:	0c22      	lsrs	r2, r4, #16
 8000274:	fb0e 7711 	mls	r7, lr, r1, r7
 8000278:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800027c:	fb01 f005 	mul.w	r0, r1, r5
 8000280:	4290      	cmp	r0, r2
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x62>
 8000284:	eb1c 0202 	adds.w	r2, ip, r2
 8000288:	f101 37ff 	add.w	r7, r1, #4294967295
 800028c:	f080 811c 	bcs.w	80004c8 <__udivmoddi4+0x290>
 8000290:	4290      	cmp	r0, r2
 8000292:	f240 8119 	bls.w	80004c8 <__udivmoddi4+0x290>
 8000296:	3902      	subs	r1, #2
 8000298:	4462      	add	r2, ip
 800029a:	1a12      	subs	r2, r2, r0
 800029c:	b2a4      	uxth	r4, r4
 800029e:	fbb2 f0fe 	udiv	r0, r2, lr
 80002a2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002aa:	fb00 f505 	mul.w	r5, r0, r5
 80002ae:	42a5      	cmp	r5, r4
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x90>
 80002b2:	eb1c 0404 	adds.w	r4, ip, r4
 80002b6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ba:	f080 8107 	bcs.w	80004cc <__udivmoddi4+0x294>
 80002be:	42a5      	cmp	r5, r4
 80002c0:	f240 8104 	bls.w	80004cc <__udivmoddi4+0x294>
 80002c4:	4464      	add	r4, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002cc:	1b64      	subs	r4, r4, r5
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11e      	cbz	r6, 80002da <__udivmoddi4+0xa2>
 80002d2:	40dc      	lsrs	r4, r3
 80002d4:	2300      	movs	r3, #0
 80002d6:	e9c6 4300 	strd	r4, r3, [r6]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0xbc>
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	f000 80ed 	beq.w	80004c2 <__udivmoddi4+0x28a>
 80002e8:	2100      	movs	r1, #0
 80002ea:	e9c6 0500 	strd	r0, r5, [r6]
 80002ee:	4608      	mov	r0, r1
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	fab3 f183 	clz	r1, r3
 80002f8:	2900      	cmp	r1, #0
 80002fa:	d149      	bne.n	8000390 <__udivmoddi4+0x158>
 80002fc:	42ab      	cmp	r3, r5
 80002fe:	d302      	bcc.n	8000306 <__udivmoddi4+0xce>
 8000300:	4282      	cmp	r2, r0
 8000302:	f200 80f8 	bhi.w	80004f6 <__udivmoddi4+0x2be>
 8000306:	1a84      	subs	r4, r0, r2
 8000308:	eb65 0203 	sbc.w	r2, r5, r3
 800030c:	2001      	movs	r0, #1
 800030e:	4617      	mov	r7, r2
 8000310:	2e00      	cmp	r6, #0
 8000312:	d0e2      	beq.n	80002da <__udivmoddi4+0xa2>
 8000314:	e9c6 4700 	strd	r4, r7, [r6]
 8000318:	e7df      	b.n	80002da <__udivmoddi4+0xa2>
 800031a:	b902      	cbnz	r2, 800031e <__udivmoddi4+0xe6>
 800031c:	deff      	udf	#255	; 0xff
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	2b00      	cmp	r3, #0
 8000324:	f040 8090 	bne.w	8000448 <__udivmoddi4+0x210>
 8000328:	1a8a      	subs	r2, r1, r2
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2101      	movs	r1, #1
 8000334:	fbb2 f5f7 	udiv	r5, r2, r7
 8000338:	fb07 2015 	mls	r0, r7, r5, r2
 800033c:	0c22      	lsrs	r2, r4, #16
 800033e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000342:	fb0e f005 	mul.w	r0, lr, r5
 8000346:	4290      	cmp	r0, r2
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x124>
 800034a:	eb1c 0202 	adds.w	r2, ip, r2
 800034e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x122>
 8000354:	4290      	cmp	r0, r2
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2b8>
 800035a:	4645      	mov	r5, r8
 800035c:	1a12      	subs	r2, r2, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb2 f0f7 	udiv	r0, r2, r7
 8000364:	fb07 2210 	mls	r2, r7, r0, r2
 8000368:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x14e>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 32ff 	add.w	r2, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x14c>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2c2>
 8000384:	4610      	mov	r0, r2
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038e:	e79f      	b.n	80002d0 <__udivmoddi4+0x98>
 8000390:	f1c1 0720 	rsb	r7, r1, #32
 8000394:	408b      	lsls	r3, r1
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa05 f401 	lsl.w	r4, r5, r1
 80003a2:	fa20 f307 	lsr.w	r3, r0, r7
 80003a6:	40fd      	lsrs	r5, r7
 80003a8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ac:	4323      	orrs	r3, r4
 80003ae:	fbb5 f8f9 	udiv	r8, r5, r9
 80003b2:	fa1f fe8c 	uxth.w	lr, ip
 80003b6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ba:	0c1c      	lsrs	r4, r3, #16
 80003bc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c0:	fb08 f50e 	mul.w	r5, r8, lr
 80003c4:	42a5      	cmp	r5, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	fa00 f001 	lsl.w	r0, r0, r1
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b0>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2b4>
 80003dc:	42a5      	cmp	r5, r4
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2b4>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4464      	add	r4, ip
 80003e8:	1b64      	subs	r4, r4, r5
 80003ea:	b29d      	uxth	r5, r3
 80003ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f0:	fb09 4413 	mls	r4, r9, r3, r4
 80003f4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003fc:	45a6      	cmp	lr, r4
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1da>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f103 35ff 	add.w	r5, r3, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2ac>
 800040a:	45a6      	cmp	lr, r4
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2ac>
 800040e:	3b02      	subs	r3, #2
 8000410:	4464      	add	r4, ip
 8000412:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000416:	fba3 9502 	umull	r9, r5, r3, r2
 800041a:	eba4 040e 	sub.w	r4, r4, lr
 800041e:	42ac      	cmp	r4, r5
 8000420:	46c8      	mov	r8, r9
 8000422:	46ae      	mov	lr, r5
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x29c>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x298>
 8000428:	b156      	cbz	r6, 8000440 <__udivmoddi4+0x208>
 800042a:	ebb0 0208 	subs.w	r2, r0, r8
 800042e:	eb64 040e 	sbc.w	r4, r4, lr
 8000432:	fa04 f707 	lsl.w	r7, r4, r7
 8000436:	40ca      	lsrs	r2, r1
 8000438:	40cc      	lsrs	r4, r1
 800043a:	4317      	orrs	r7, r2
 800043c:	e9c6 7400 	strd	r7, r4, [r6]
 8000440:	4618      	mov	r0, r3
 8000442:	2100      	movs	r1, #0
 8000444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000448:	f1c3 0120 	rsb	r1, r3, #32
 800044c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000450:	fa20 f201 	lsr.w	r2, r0, r1
 8000454:	fa25 f101 	lsr.w	r1, r5, r1
 8000458:	409d      	lsls	r5, r3
 800045a:	432a      	orrs	r2, r5
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb1 f0f7 	udiv	r0, r1, r7
 8000468:	fb07 1510 	mls	r5, r7, r0, r1
 800046c:	0c11      	lsrs	r1, r2, #16
 800046e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000472:	fb00 f50e 	mul.w	r5, r0, lr
 8000476:	428d      	cmp	r5, r1
 8000478:	fa04 f403 	lsl.w	r4, r4, r3
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x258>
 800047e:	eb1c 0101 	adds.w	r1, ip, r1
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 8000488:	428d      	cmp	r5, r1
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 800048c:	3802      	subs	r0, #2
 800048e:	4461      	add	r1, ip
 8000490:	1b49      	subs	r1, r1, r5
 8000492:	b292      	uxth	r2, r2
 8000494:	fbb1 f5f7 	udiv	r5, r1, r7
 8000498:	fb07 1115 	mls	r1, r7, r5, r1
 800049c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a0:	fb05 f10e 	mul.w	r1, r5, lr
 80004a4:	4291      	cmp	r1, r2
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x282>
 80004a8:	eb1c 0202 	adds.w	r2, ip, r2
 80004ac:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 80004b2:	4291      	cmp	r1, r2
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 80004b6:	3d02      	subs	r5, #2
 80004b8:	4462      	add	r2, ip
 80004ba:	1a52      	subs	r2, r2, r1
 80004bc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0xfc>
 80004c2:	4631      	mov	r1, r6
 80004c4:	4630      	mov	r0, r6
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xa2>
 80004c8:	4639      	mov	r1, r7
 80004ca:	e6e6      	b.n	800029a <__udivmoddi4+0x62>
 80004cc:	4610      	mov	r0, r2
 80004ce:	e6fb      	b.n	80002c8 <__udivmoddi4+0x90>
 80004d0:	4548      	cmp	r0, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f0>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004dc:	3b01      	subs	r3, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f0>
 80004e0:	4645      	mov	r5, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x282>
 80004e4:	462b      	mov	r3, r5
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1da>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x258>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b0>
 80004f0:	3d02      	subs	r5, #2
 80004f2:	4462      	add	r2, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x124>
 80004f6:	4608      	mov	r0, r1
 80004f8:	e70a      	b.n	8000310 <__udivmoddi4+0xd8>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x14e>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	SSD1963_Init();
 8000508:	f000 fc24 	bl	8000d54 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 800050c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000510:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000514:	490b      	ldr	r1, [pc, #44]	; (8000544 <Display_Init+0x40>)
 8000516:	480c      	ldr	r0, [pc, #48]	; (8000548 <Display_Init+0x44>)
 8000518:	f000 fa66 	bl	80009e8 <UG_Init>

	UG_FontSetVSpace(0);
 800051c:	2000      	movs	r0, #0
 800051e:	f000 fbd9 	bl	8000cd4 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 8000522:	2000      	movs	r0, #0
 8000524:	f000 fbc2 	bl	8000cac <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 8000528:	4908      	ldr	r1, [pc, #32]	; (800054c <Display_Init+0x48>)
 800052a:	2001      	movs	r0, #1
 800052c:	f000 fbe6 	bl	8000cfc <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 8000530:	4907      	ldr	r1, [pc, #28]	; (8000550 <Display_Init+0x4c>)
 8000532:	2000      	movs	r0, #0
 8000534:	f000 fbe2 	bl	8000cfc <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 8000538:	4906      	ldr	r1, [pc, #24]	; (8000554 <Display_Init+0x50>)
 800053a:	2003      	movs	r0, #3
 800053c:	f000 fbde 	bl	8000cfc <UG_DriverRegister>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	08000f17 	.word	0x08000f17
 8000548:	20000028 	.word	0x20000028
 800054c:	08000f79 	.word	0x08000f79
 8000550:	08001043 	.word	0x08001043
 8000554:	080010f7 	.word	0x080010f7

08000558 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 800055e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000562:	f000 faed 	bl	8000b40 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 8000566:	231f      	movs	r3, #31
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800056e:	220a      	movs	r2, #10
 8000570:	f44f 7183 	mov.w	r1, #262	; 0x106
 8000574:	2000      	movs	r0, #0
 8000576:	f000 fb05 	bl	8000b84 <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 800057a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800057e:	9300      	str	r3, [sp, #0]
 8000580:	230a      	movs	r3, #10
 8000582:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000586:	2100      	movs	r1, #0
 8000588:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800058c:	f000 fafa 	bl	8000b84 <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8000590:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	f44f 7388 	mov.w	r3, #272	; 0x110
 800059a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800059e:	f44f 7183 	mov.w	r1, #262	; 0x106
 80005a2:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 80005a6:	f000 faed 	bl	8000b84 <UG_FillFrame>
}
 80005aa:	bf00      	nop
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}

080005b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b4:	f000 fe7f 	bl	80012b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b8:	f000 f81a 	bl	80005f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005bc:	f000 f900 	bl	80007c0 <MX_GPIO_Init>
  MX_FMC_Init();
 80005c0:	f000 f882 	bl	80006c8 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  Display_Init();
 80005c4:	f7ff ff9e 	bl	8000504 <Display_Init>

    UG_FontSelect(&FONT_32X53);
 80005c8:	4808      	ldr	r0, [pc, #32]	; (80005ec <main+0x3c>)
 80005ca:	f000 faa3 	bl	8000b14 <UG_FontSelect>
    UG_SetBackcolor(C_BLACK);
 80005ce:	2000      	movs	r0, #0
 80005d0:	f000 fb5a 	bl	8000c88 <UG_SetBackcolor>
    UG_SetForecolor(C_WHITE);
 80005d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80005d8:	f000 fb44 	bl	8000c64 <UG_SetForecolor>

    Display_CalibrateScreen();
 80005dc:	f7ff ffbc 	bl	8000558 <Display_CalibrateScreen>
    HAL_Delay(5000);
 80005e0:	f241 3088 	movw	r0, #5000	; 0x1388
 80005e4:	f000 fec4 	bl	8001370 <HAL_Delay>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e8:	e7fe      	b.n	80005e8 <main+0x38>
 80005ea:	bf00      	nop
 80005ec:	0800f9e4 	.word	0x0800f9e4

080005f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b094      	sub	sp, #80	; 0x50
 80005f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f6:	f107 0320 	add.w	r3, r7, #32
 80005fa:	2230      	movs	r2, #48	; 0x30
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 ffb0 	bl	8002564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000604:	f107 030c 	add.w	r3, r7, #12
 8000608:	2200      	movs	r2, #0
 800060a:	601a      	str	r2, [r3, #0]
 800060c:	605a      	str	r2, [r3, #4]
 800060e:	609a      	str	r2, [r3, #8]
 8000610:	60da      	str	r2, [r3, #12]
 8000612:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000614:	4b2a      	ldr	r3, [pc, #168]	; (80006c0 <SystemClock_Config+0xd0>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	4a29      	ldr	r2, [pc, #164]	; (80006c0 <SystemClock_Config+0xd0>)
 800061a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800061e:	6413      	str	r3, [r2, #64]	; 0x40
 8000620:	4b27      	ldr	r3, [pc, #156]	; (80006c0 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800062c:	4b25      	ldr	r3, [pc, #148]	; (80006c4 <SystemClock_Config+0xd4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a24      	ldr	r2, [pc, #144]	; (80006c4 <SystemClock_Config+0xd4>)
 8000632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	4b22      	ldr	r3, [pc, #136]	; (80006c4 <SystemClock_Config+0xd4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000640:	607b      	str	r3, [r7, #4]
 8000642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000644:	2301      	movs	r3, #1
 8000646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000648:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000652:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000656:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000658:	2308      	movs	r3, #8
 800065a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800065c:	23d8      	movs	r3, #216	; 0xd8
 800065e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000664:	2302      	movs	r3, #2
 8000666:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000668:	f107 0320 	add.w	r3, r7, #32
 800066c:	4618      	mov	r0, r3
 800066e:	f001 f985 	bl	800197c <HAL_RCC_OscConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000678:	f000 f8ea 	bl	8000850 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800067c:	f001 f92e 	bl	80018dc <HAL_PWREx_EnableOverDrive>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d001      	beq.n	800068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000686:	f000 f8e3 	bl	8000850 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068a:	230f      	movs	r3, #15
 800068c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068e:	2302      	movs	r3, #2
 8000690:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000696:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800069a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800069c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2107      	movs	r1, #7
 80006a8:	4618      	mov	r0, r3
 80006aa:	f001 fc0b 	bl	8001ec4 <HAL_RCC_ClockConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80006b4:	f000 f8cc 	bl	8000850 <Error_Handler>
  }
}
 80006b8:	bf00      	nop
 80006ba:	3750      	adds	r7, #80	; 0x50
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40023800 	.word	0x40023800
 80006c4:	40007000 	.word	0x40007000

080006c8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b08e      	sub	sp, #56	; 0x38
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
 80006d6:	605a      	str	r2, [r3, #4]
 80006d8:	609a      	str	r2, [r3, #8]
 80006da:	60da      	str	r2, [r3, #12]
 80006dc:	611a      	str	r2, [r3, #16]
 80006de:	615a      	str	r2, [r3, #20]
 80006e0:	619a      	str	r2, [r3, #24]
  FMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2200      	movs	r2, #0
 80006e6:	601a      	str	r2, [r3, #0]
 80006e8:	605a      	str	r2, [r3, #4]
 80006ea:	609a      	str	r2, [r3, #8]
 80006ec:	60da      	str	r2, [r3, #12]
 80006ee:	611a      	str	r2, [r3, #16]
 80006f0:	615a      	str	r2, [r3, #20]
 80006f2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 80006f4:	4b30      	ldr	r3, [pc, #192]	; (80007b8 <MX_FMC_Init+0xf0>)
 80006f6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80006fa:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80006fc:	4b2e      	ldr	r3, [pc, #184]	; (80007b8 <MX_FMC_Init+0xf0>)
 80006fe:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <MX_FMC_Init+0xf4>)
 8000700:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000702:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000708:	4b2b      	ldr	r3, [pc, #172]	; (80007b8 <MX_FMC_Init+0xf0>)
 800070a:	2200      	movs	r2, #0
 800070c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 800070e:	4b2a      	ldr	r3, [pc, #168]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000710:	2200      	movs	r2, #0
 8000712:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000714:	4b28      	ldr	r3, [pc, #160]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000716:	2210      	movs	r2, #16
 8000718:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800071a:	4b27      	ldr	r3, [pc, #156]	; (80007b8 <MX_FMC_Init+0xf0>)
 800071c:	2200      	movs	r2, #0
 800071e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000720:	4b25      	ldr	r3, [pc, #148]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000722:	2200      	movs	r2, #0
 8000724:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000726:	4b24      	ldr	r3, [pc, #144]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000728:	2200      	movs	r2, #0
 800072a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <MX_FMC_Init+0xf0>)
 800072e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000732:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000734:	4b20      	ldr	r3, [pc, #128]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000736:	2200      	movs	r2, #0
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;
 800073a:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <MX_FMC_Init+0xf0>)
 800073c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000740:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000742:	4b1d      	ldr	r3, [pc, #116]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000744:	2200      	movs	r2, #0
 8000746:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000748:	4b1b      	ldr	r3, [pc, #108]	; (80007b8 <MX_FMC_Init+0xf0>)
 800074a:	2200      	movs	r2, #0
 800074c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800074e:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000750:	2200      	movs	r2, #0
 8000752:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000754:	4b18      	ldr	r3, [pc, #96]	; (80007b8 <MX_FMC_Init+0xf0>)
 8000756:	2200      	movs	r2, #0
 8000758:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 800075a:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <MX_FMC_Init+0xf0>)
 800075c:	2200      	movs	r2, #0
 800075e:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 1;
 8000760:	2301      	movs	r3, #1
 8000762:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 8000764:	230f      	movs	r3, #15
 8000766:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 1;
 8000768:	2301      	movs	r3, #1
 800076a:	627b      	str	r3, [r7, #36]	; 0x24
  Timing.BusTurnAroundDuration = 1;
 800076c:	2301      	movs	r3, #1
 800076e:	62bb      	str	r3, [r7, #40]	; 0x28
  Timing.CLKDivision = 16;
 8000770:	2310      	movs	r3, #16
 8000772:	62fb      	str	r3, [r7, #44]	; 0x2c
  Timing.DataLatency = 17;
 8000774:	2311      	movs	r3, #17
 8000776:	633b      	str	r3, [r7, #48]	; 0x30
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000778:	2300      	movs	r3, #0
 800077a:	637b      	str	r3, [r7, #52]	; 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 1;
 800077c:	2301      	movs	r3, #1
 800077e:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 8000780:	230f      	movs	r3, #15
 8000782:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 1;
 8000784:	2301      	movs	r3, #1
 8000786:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 8000788:	230f      	movs	r3, #15
 800078a:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 800078c:	2310      	movs	r3, #16
 800078e:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 8000790:	2311      	movs	r3, #17
 8000792:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FMC_ACCESS_MODE_A;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8000798:	463a      	mov	r2, r7
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	4805      	ldr	r0, [pc, #20]	; (80007b8 <MX_FMC_Init+0xf0>)
 80007a2:	f001 fd7f 	bl	80022a4 <HAL_SRAM_Init>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_FMC_Init+0xe8>
  {
    Error_Handler( );
 80007ac:	f000 f850 	bl	8000850 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80007b0:	bf00      	nop
 80007b2:	3738      	adds	r7, #56	; 0x38
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000ac 	.word	0x200000ac
 80007bc:	a0000104 	.word	0xa0000104

080007c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_GPIO_Init+0x8c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a20      	ldr	r2, [pc, #128]	; (800084c <MX_GPIO_Init+0x8c>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b1e      	ldr	r3, [pc, #120]	; (800084c <MX_GPIO_Init+0x8c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	617b      	str	r3, [r7, #20]
 80007dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007de:	4b1b      	ldr	r3, [pc, #108]	; (800084c <MX_GPIO_Init+0x8c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1a      	ldr	r2, [pc, #104]	; (800084c <MX_GPIO_Init+0x8c>)
 80007e4:	f043 0320 	orr.w	r3, r3, #32
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b18      	ldr	r3, [pc, #96]	; (800084c <MX_GPIO_Init+0x8c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0320 	and.w	r3, r3, #32
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_GPIO_Init+0x8c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a14      	ldr	r2, [pc, #80]	; (800084c <MX_GPIO_Init+0x8c>)
 80007fc:	f043 0310 	orr.w	r3, r3, #16
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_GPIO_Init+0x8c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0310 	and.w	r3, r3, #16
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_GPIO_Init+0x8c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a0e      	ldr	r2, [pc, #56]	; (800084c <MX_GPIO_Init+0x8c>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_GPIO_Init+0x8c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_GPIO_Init+0x8c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <MX_GPIO_Init+0x8c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_GPIO_Init+0x8c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800083e:	bf00      	nop
 8000840:	371c      	adds	r7, #28
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000854:	b672      	cpsid	i
}
 8000856:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000858:	e7fe      	b.n	8000858 <Error_Handler+0x8>
	...

0800085c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <HAL_MspInit+0x44>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <HAL_MspInit+0x44>)
 8000868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086c:	6413      	str	r3, [r2, #64]	; 0x40
 800086e:	4b0c      	ldr	r3, [pc, #48]	; (80008a0 <HAL_MspInit+0x44>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_MspInit+0x44>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_MspInit+0x44>)
 8000880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000884:	6453      	str	r3, [r2, #68]	; 0x44
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_MspInit+0x44>)
 8000888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800088a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	370c      	adds	r7, #12
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80008aa:	1d3b      	adds	r3, r7, #4
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_FMC_MspInit+0xa4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d13f      	bne.n	8000940 <HAL_FMC_MspInit+0x9c>
    return;
  }
  FMC_Initialized = 1;
 80008c0:	4b21      	ldr	r3, [pc, #132]	; (8000948 <HAL_FMC_MspInit+0xa4>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80008c6:	4b21      	ldr	r3, [pc, #132]	; (800094c <HAL_FMC_MspInit+0xa8>)
 80008c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008ca:	4a20      	ldr	r2, [pc, #128]	; (800094c <HAL_FMC_MspInit+0xa8>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6393      	str	r3, [r2, #56]	; 0x38
 80008d2:	4b1e      	ldr	r3, [pc, #120]	; (800094c <HAL_FMC_MspInit+0xa8>)
 80008d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008e2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008f0:	230c      	movs	r3, #12
 80008f2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008f4:	1d3b      	adds	r3, r7, #4
 80008f6:	4619      	mov	r1, r3
 80008f8:	4815      	ldr	r0, [pc, #84]	; (8000950 <HAL_FMC_MspInit+0xac>)
 80008fa:	f000 fe43 	bl	8001584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008fe:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000902:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000910:	230c      	movs	r3, #12
 8000912:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000914:	1d3b      	adds	r3, r7, #4
 8000916:	4619      	mov	r1, r3
 8000918:	480e      	ldr	r0, [pc, #56]	; (8000954 <HAL_FMC_MspInit+0xb0>)
 800091a:	f000 fe33 	bl	8001584 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800091e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8000922:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000924:	2302      	movs	r3, #2
 8000926:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000930:	230c      	movs	r3, #12
 8000932:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4619      	mov	r1, r3
 8000938:	4807      	ldr	r0, [pc, #28]	; (8000958 <HAL_FMC_MspInit+0xb4>)
 800093a:	f000 fe23 	bl	8001584 <HAL_GPIO_Init>
 800093e:	e000      	b.n	8000942 <HAL_FMC_MspInit+0x9e>
    return;
 8000940:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8000942:	3718      	adds	r7, #24
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	200000f8 	.word	0x200000f8
 800094c:	40023800 	.word	0x40023800
 8000950:	40021400 	.word	0x40021400
 8000954:	40021000 	.word	0x40021000
 8000958:	40020c00 	.word	0x40020c00

0800095c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8000964:	f7ff ff9e 	bl	80008a4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8000968:	bf00      	nop
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fcb8 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 80009e8:	b480      	push	{r7}
 80009ea:	b087      	sub	sp, #28
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	4611      	mov	r1, r2
 80009f4:	461a      	mov	r2, r3
 80009f6:	460b      	mov	r3, r1
 80009f8:	80fb      	strh	r3, [r7, #6]
 80009fa:	4613      	mov	r3, r2
 80009fc:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	68ba      	ldr	r2, [r7, #8]
 8000a02:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	88fa      	ldrh	r2, [r7, #6]
 8000a08:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	88ba      	ldrh	r2, [r7, #4]
 8000a0e:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2204      	movs	r2, #4
 8000a14:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	2204      	movs	r2, #4
 8000a1a:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000a22:	b29a      	uxth	r2, r3
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	1ad3      	subs	r3, r2, r3
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	3b01      	subs	r3, #1
 8000a32:	b29b      	uxth	r3, r3
 8000a34:	b21a      	sxth	r2, r3
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000a40:	b29a      	uxth	r2, r3
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8000a48:	b29b      	uxth	r3, r3
 8000a4a:	1ad3      	subs	r3, r2, r3
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	b21a      	sxth	r2, r3
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2201      	movs	r2, #1
 8000a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2201      	movs	r2, #1
 8000a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2200      	movs	r2, #0
 8000a86:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2200      	movs	r2, #0
 8000a98:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8000aa6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	2200      	movs	r2, #0
 8000ac0:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2200      	movs	r2, #0
 8000acc:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	e010      	b.n	8000af6 <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 8000ad4:	7dfb      	ldrb	r3, [r7, #23]
 8000ad6:	68fa      	ldr	r2, [r7, #12]
 8000ad8:	3309      	adds	r3, #9
 8000ada:	00db      	lsls	r3, r3, #3
 8000adc:	4413      	add	r3, r2
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 8000ae2:	7dfb      	ldrb	r3, [r7, #23]
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	3309      	adds	r3, #9
 8000ae8:	00db      	lsls	r3, r3, #3
 8000aea:	4413      	add	r3, r2
 8000aec:	2200      	movs	r2, #0
 8000aee:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 8000af0:	7dfb      	ldrb	r3, [r7, #23]
 8000af2:	3301      	adds	r3, #1
 8000af4:	75fb      	strb	r3, [r7, #23]
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2b06      	cmp	r3, #6
 8000afa:	d9eb      	bls.n	8000ad4 <UG_Init+0xec>
   }

   gui = g;
 8000afc:	4a04      	ldr	r2, [pc, #16]	; (8000b10 <UG_Init+0x128>)
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6013      	str	r3, [r2, #0]
   return 1;
 8000b02:	2301      	movs	r3, #1
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	371c      	adds	r7, #28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	200000fc 	.word	0x200000fc

08000b14 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 8000b14:	b4b0      	push	{r4, r5, r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 8000b1c:	4b07      	ldr	r3, [pc, #28]	; (8000b3c <UG_FontSelect+0x28>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	687a      	ldr	r2, [r7, #4]
 8000b22:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8000b26:	4615      	mov	r5, r2
 8000b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b2c:	682b      	ldr	r3, [r5, #0]
 8000b2e:	6023      	str	r3, [r4, #0]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bcb0      	pop	{r4, r5, r7}
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	200000fc 	.word	0x200000fc

08000b40 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af02      	add	r7, sp, #8
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <UG_FillScreen+0x40>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	3b01      	subs	r3, #1
 8000b56:	b29b      	uxth	r3, r3
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <UG_FillScreen+0x40>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	3b01      	subs	r3, #1
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	b219      	sxth	r1, r3
 8000b6a:	88fb      	ldrh	r3, [r7, #6]
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	2100      	movs	r1, #0
 8000b72:	2000      	movs	r0, #0
 8000b74:	f000 f806 	bl	8000b84 <UG_FillFrame>
}
 8000b78:	bf00      	nop
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	200000fc 	.word	0x200000fc

08000b84 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8000b84:	b5b0      	push	{r4, r5, r7, lr}
 8000b86:	b086      	sub	sp, #24
 8000b88:	af02      	add	r7, sp, #8
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	4611      	mov	r1, r2
 8000b90:	461a      	mov	r2, r3
 8000b92:	4623      	mov	r3, r4
 8000b94:	80fb      	strh	r3, [r7, #6]
 8000b96:	4603      	mov	r3, r0
 8000b98:	80bb      	strh	r3, [r7, #4]
 8000b9a:	460b      	mov	r3, r1
 8000b9c:	807b      	strh	r3, [r7, #2]
 8000b9e:	4613      	mov	r3, r2
 8000ba0:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8000ba2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000baa:	429a      	cmp	r2, r3
 8000bac:	da05      	bge.n	8000bba <UG_FillFrame+0x36>
   {
      n = x2;
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	807b      	strh	r3, [r7, #2]
      x1 = n;
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 8000bba:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000bbe:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000bc2:	429a      	cmp	r2, r3
 8000bc4:	da05      	bge.n	8000bd2 <UG_FillFrame+0x4e>
   {
      n = y2;
 8000bc6:	883b      	ldrh	r3, [r7, #0]
 8000bc8:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 8000bca:	88bb      	ldrh	r3, [r7, #4]
 8000bcc:	803b      	strh	r3, [r7, #0]
      y1 = n;
 8000bce:	89fb      	ldrh	r3, [r7, #14]
 8000bd0:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 8000bd2:	4b23      	ldr	r3, [pc, #140]	; (8000c60 <UG_FillFrame+0xdc>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000bda:	f003 0302 	and.w	r3, r3, #2
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d012      	beq.n	8000c08 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8000be2:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <UG_FillFrame+0xdc>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000be8:	461d      	mov	r5, r3
 8000bea:	f9b7 4000 	ldrsh.w	r4, [r7]
 8000bee:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000bf2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000bf6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000bfa:	8c3b      	ldrh	r3, [r7, #32]
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4623      	mov	r3, r4
 8000c00:	47a8      	blx	r5
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d027      	beq.n	8000c58 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 8000c08:	88bb      	ldrh	r3, [r7, #4]
 8000c0a:	81bb      	strh	r3, [r7, #12]
 8000c0c:	e01d      	b.n	8000c4a <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 8000c0e:	88fb      	ldrh	r3, [r7, #6]
 8000c10:	81fb      	strh	r3, [r7, #14]
 8000c12:	e00e      	b.n	8000c32 <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <UG_FillFrame+0xdc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	8c3a      	ldrh	r2, [r7, #32]
 8000c1c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000c20:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8000c24:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8000c26:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c2a:	b29b      	uxth	r3, r3
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	81fb      	strh	r3, [r7, #14]
 8000c32:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8000c36:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	ddea      	ble.n	8000c14 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 8000c3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	3301      	adds	r3, #1
 8000c46:	b29b      	uxth	r3, r3
 8000c48:	81bb      	strh	r3, [r7, #12]
 8000c4a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c4e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000c52:	429a      	cmp	r2, r3
 8000c54:	dddb      	ble.n	8000c0e <UG_FillFrame+0x8a>
 8000c56:	e000      	b.n	8000c5a <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8000c58:	bf00      	nop
      }
   }
}
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8000c60:	200000fc 	.word	0x200000fc

08000c64 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <UG_SetForecolor+0x20>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	88fa      	ldrh	r2, [r7, #6]
 8000c74:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c82:	4770      	bx	lr
 8000c84:	200000fc 	.word	0x200000fc

08000c88 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 8000c92:	4b05      	ldr	r3, [pc, #20]	; (8000ca8 <UG_SetBackcolor+0x20>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	88fa      	ldrh	r2, [r7, #6]
 8000c98:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	200000fc 	.word	0x200000fc

08000cac <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <UG_FontSetHSpace+0x24>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	88fa      	ldrh	r2, [r7, #6]
 8000cbc:	b252      	sxtb	r2, r2
 8000cbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	200000fc 	.word	0x200000fc

08000cd4 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 8000cde:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <UG_FontSetVSpace+0x24>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	88fa      	ldrh	r2, [r7, #6]
 8000ce4:	b252      	sxtb	r2, r2
 8000ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	200000fc 	.word	0x200000fc

08000cfc <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d810      	bhi.n	8000d30 <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <UG_DriverRegister+0x40>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	3309      	adds	r3, #9
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	4413      	add	r3, r2
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <UG_DriverRegister+0x40>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	79fb      	ldrb	r3, [r7, #7]
 8000d24:	3309      	adds	r3, #9
 8000d26:	00db      	lsls	r3, r3, #3
 8000d28:	4413      	add	r3, r2
 8000d2a:	2203      	movs	r2, #3
 8000d2c:	721a      	strb	r2, [r3, #8]
 8000d2e:	e000      	b.n	8000d32 <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8000d30:	bf00      	nop
}
 8000d32:	370c      	adds	r7, #12
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	200000fc 	.word	0x200000fc

08000d40 <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 8000d44:	2001      	movs	r0, #1
 8000d46:	f000 fa2a 	bl	800119e <write_command>
    HAL_Delay(10);
 8000d4a:	200a      	movs	r0, #10
 8000d4c:	f000 fb10 	bl	8001370 <HAL_Delay>
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <SSD1963_Init>:

void SSD1963_Init()
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 8000d58:	f7ff fff2 	bl	8000d40 <SSD1963_Reset>

    write_command(0xe0);
 8000d5c:	20e0      	movs	r0, #224	; 0xe0
 8000d5e:	f000 fa1e 	bl	800119e <write_command>
    write_data(0x01);            //Enable PLL
 8000d62:	2001      	movs	r0, #1
 8000d64:	f000 fa36 	bl	80011d4 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 8000d68:	20e0      	movs	r0, #224	; 0xe0
 8000d6a:	f000 fa18 	bl	800119e <write_command>
    write_data(0x03);            //Lock PLL
 8000d6e:	2003      	movs	r0, #3
 8000d70:	f000 fa30 	bl	80011d4 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8000d74:	f7ff ffe4 	bl	8000d40 <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8000d78:	20b0      	movs	r0, #176	; 0xb0
 8000d7a:	f000 fa10 	bl	800119e <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8000d7e:	2008      	movs	r0, #8
 8000d80:	f000 fa28 	bl	80011d4 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8000d84:	2080      	movs	r0, #128	; 0x80
 8000d86:	f000 fa25 	bl	80011d4 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	f000 fa22 	bl	80011d4 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8000d90:	20df      	movs	r0, #223	; 0xdf
 8000d92:	f000 fa1f 	bl	80011d4 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8000d96:	2001      	movs	r0, #1
 8000d98:	f000 fa1c 	bl	80011d4 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8000d9c:	200f      	movs	r0, #15
 8000d9e:	f000 fa19 	bl	80011d4 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 fa16 	bl	80011d4 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8000da8:	20f0      	movs	r0, #240	; 0xf0
 8000daa:	f000 f9f8 	bl	800119e <write_command>
    write_data(0x03);
 8000dae:	2003      	movs	r0, #3
 8000db0:	f000 fa10 	bl	80011d4 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8000db4:	20e6      	movs	r0, #230	; 0xe6
 8000db6:	f000 f9f2 	bl	800119e <write_command>
    write_data(0x01);    //02
 8000dba:	2001      	movs	r0, #1
 8000dbc:	f000 fa0a 	bl	80011d4 <write_data>
    write_data(0x45);    //ff
 8000dc0:	2045      	movs	r0, #69	; 0x45
 8000dc2:	f000 fa07 	bl	80011d4 <write_data>
    write_data(0x47);    //ff
 8000dc6:	2047      	movs	r0, #71	; 0x47
 8000dc8:	f000 fa04 	bl	80011d4 <write_data>

    write_command(0xb4); //set HBP
 8000dcc:	20b4      	movs	r0, #180	; 0xb4
 8000dce:	f000 f9e6 	bl	800119e <write_command>
    write_data(0x02); //set Hsync = 600
 8000dd2:	2002      	movs	r0, #2
 8000dd4:	f000 f9fe 	bl	80011d4 <write_data>
    write_data(0x0d);
 8000dd8:	200d      	movs	r0, #13
 8000dda:	f000 f9fb 	bl	80011d4 <write_data>
    write_data(0x00);    //set HBP 68
 8000dde:	2000      	movs	r0, #0
 8000de0:	f000 f9f8 	bl	80011d4 <write_data>
    write_data(0x2b);
 8000de4:	202b      	movs	r0, #43	; 0x2b
 8000de6:	f000 f9f5 	bl	80011d4 <write_data>
    write_data(0x28);    //set VBP 16
 8000dea:	2028      	movs	r0, #40	; 0x28
 8000dec:	f000 f9f2 	bl	80011d4 <write_data>
    write_data(0x00);    //Set Hsync start position
 8000df0:	2000      	movs	r0, #0
 8000df2:	f000 f9ef 	bl	80011d4 <write_data>
    write_data(0x00);
 8000df6:	2000      	movs	r0, #0
 8000df8:	f000 f9ec 	bl	80011d4 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 f9e9 	bl	80011d4 <write_data>

    write_command(0xb6); //set VBP
 8000e02:	20b6      	movs	r0, #182	; 0xb6
 8000e04:	f000 f9cb 	bl	800119e <write_command>
    write_data(0x01);    //set Vsync total 360
 8000e08:	2001      	movs	r0, #1
 8000e0a:	f000 f9e3 	bl	80011d4 <write_data>
    write_data(0x1d);
 8000e0e:	201d      	movs	r0, #29
 8000e10:	f000 f9e0 	bl	80011d4 <write_data>
    write_data(0x00);    //set VBP = 19
 8000e14:	2000      	movs	r0, #0
 8000e16:	f000 f9dd 	bl	80011d4 <write_data>
    write_data(0x0c);
 8000e1a:	200c      	movs	r0, #12
 8000e1c:	f000 f9da 	bl	80011d4 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 8000e20:	2009      	movs	r0, #9
 8000e22:	f000 f9d7 	bl	80011d4 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 8000e26:	2000      	movs	r0, #0
 8000e28:	f000 f9d4 	bl	80011d4 <write_data>
    write_data(0x00);
 8000e2c:	2000      	movs	r0, #0
 8000e2e:	f000 f9d1 	bl	80011d4 <write_data>

    write_command(0x2a); //set column address
 8000e32:	202a      	movs	r0, #42	; 0x2a
 8000e34:	f000 f9b3 	bl	800119e <write_command>
    write_data(0x00);    //set start column address 0
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f000 f9cb 	bl	80011d4 <write_data>
    write_data(0x00);
 8000e3e:	2000      	movs	r0, #0
 8000e40:	f000 f9c8 	bl	80011d4 <write_data>
    write_data(0x01);    //set end column address = 479
 8000e44:	2001      	movs	r0, #1
 8000e46:	f000 f9c5 	bl	80011d4 <write_data>
    write_data(0xdf);
 8000e4a:	20df      	movs	r0, #223	; 0xdf
 8000e4c:	f000 f9c2 	bl	80011d4 <write_data>

    write_command(0x2b); //set page address
 8000e50:	202b      	movs	r0, #43	; 0x2b
 8000e52:	f000 f9a4 	bl	800119e <write_command>
    write_data(0x00);    //set start page address = 0
 8000e56:	2000      	movs	r0, #0
 8000e58:	f000 f9bc 	bl	80011d4 <write_data>
    write_data(0x00);
 8000e5c:	2000      	movs	r0, #0
 8000e5e:	f000 f9b9 	bl	80011d4 <write_data>
    write_data(0x01);    //set end column address = 479
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 f9b6 	bl	80011d4 <write_data>
    write_data(0x0f);
 8000e68:	200f      	movs	r0, #15
 8000e6a:	f000 f9b3 	bl	80011d4 <write_data>

    write_command(0x13); //set normal mode
 8000e6e:	2013      	movs	r0, #19
 8000e70:	f000 f995 	bl	800119e <write_command>
    write_command(0x38); //set normal mode
 8000e74:	2038      	movs	r0, #56	; 0x38
 8000e76:	f000 f992 	bl	800119e <write_command>
    write_command(0x29); //set display on
 8000e7a:	2029      	movs	r0, #41	; 0x29
 8000e7c:	f000 f98f 	bl	800119e <write_command>
}
 8000e80:	bf00      	nop
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	60f8      	str	r0, [r7, #12]
 8000e8c:	60b9      	str	r1, [r7, #8]
 8000e8e:	607a      	str	r2, [r7, #4]
 8000e90:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	b29b      	uxth	r3, r3
 8000ebc:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8000ebe:	202a      	movs	r0, #42	; 0x2a
 8000ec0:	f000 f96d 	bl	800119e <write_command>
    write_multi_data(data, 4);
 8000ec4:	f107 0310 	add.w	r3, r7, #16
 8000ec8:	2104      	movs	r1, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f000 f99c 	bl	8001208 <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	0a1b      	lsrs	r3, r3, #8
 8000ed4:	b29b      	uxth	r3, r3
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	0a1b      	lsrs	r3, r3, #8
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	b29b      	uxth	r3, r3
 8000efa:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8000efc:	202b      	movs	r0, #43	; 0x2b
 8000efe:	f000 f94e 	bl	800119e <write_command>
    write_multi_data(data, 4);
 8000f02:	f107 0310 	add.w	r3, r7, #16
 8000f06:	2104      	movs	r1, #4
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f000 f97d 	bl	8001208 <write_multi_data>
}
 8000f0e:	bf00      	nop
 8000f10:	3718      	adds	r7, #24
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b082      	sub	sp, #8
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	80fb      	strh	r3, [r7, #6]
 8000f20:	460b      	mov	r3, r1
 8000f22:	80bb      	strh	r3, [r7, #4]
 8000f24:	4613      	mov	r3, r2
 8000f26:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8000f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	db1f      	blt.n	8000f70 <SSD1963_PSet+0x5a>
 8000f30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f34:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000f38:	da1a      	bge.n	8000f70 <SSD1963_PSet+0x5a>
 8000f3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	db16      	blt.n	8000f70 <SSD1963_PSet+0x5a>
 8000f42:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f46:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000f4a:	da11      	bge.n	8000f70 <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8000f4c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000f50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f54:	3301      	adds	r3, #1
 8000f56:	4619      	mov	r1, r3
 8000f58:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000f5c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f60:	3301      	adds	r3, #1
 8000f62:	f7ff ff8f 	bl	8000e84 <SSD1963_WindowSet>
    write_data(c);
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f000 f933 	bl	80011d4 <write_data>
 8000f6e:	e000      	b.n	8000f72 <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8000f70:	bf00      	nop
}
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HW_FillFrame>:
{
    write_data(c);
}

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8000f78:	b590      	push	{r4, r7, lr}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4604      	mov	r4, r0
 8000f80:	4608      	mov	r0, r1
 8000f82:	4611      	mov	r1, r2
 8000f84:	461a      	mov	r2, r3
 8000f86:	4623      	mov	r3, r4
 8000f88:	80fb      	strh	r3, [r7, #6]
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	80bb      	strh	r3, [r7, #4]
 8000f8e:	460b      	mov	r3, r1
 8000f90:	807b      	strh	r3, [r7, #2]
 8000f92:	4613      	mov	r3, r2
 8000f94:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8000f96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0d      	blt.n	8000fba <HW_FillFrame+0x42>
 8000f9e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fa2:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000fa6:	da08      	bge.n	8000fba <HW_FillFrame+0x42>
 8000fa8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	db04      	blt.n	8000fba <HW_FillFrame+0x42>
 8000fb0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fb4:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000fb8:	db02      	blt.n	8000fc0 <HW_FillFrame+0x48>
 8000fba:	f04f 33ff 	mov.w	r3, #4294967295
 8000fbe:	e03c      	b.n	800103a <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8000fc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0d      	blt.n	8000fe4 <HW_FillFrame+0x6c>
 8000fc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000fcc:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8000fd0:	da08      	bge.n	8000fe4 <HW_FillFrame+0x6c>
 8000fd2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	db04      	blt.n	8000fe4 <HW_FillFrame+0x6c>
 8000fda:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fde:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8000fe2:	db02      	blt.n	8000fea <HW_FillFrame+0x72>
 8000fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe8:	e027      	b.n	800103a <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8000fea:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000fee:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000ff2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000ff6:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000ffa:	f7ff ff43 	bl	8000e84 <SSD1963_WindowSet>

    write_command(0x2c);
 8000ffe:	202c      	movs	r0, #44	; 0x2c
 8001000:	f000 f8cd 	bl	800119e <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	81fb      	strh	r3, [r7, #14]
 8001008:	e011      	b.n	800102e <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 800100a:	88bb      	ldrh	r3, [r7, #4]
 800100c:	81bb      	strh	r3, [r7, #12]
 800100e:	e006      	b.n	800101e <HW_FillFrame+0xa6>
        {
            write_data(c);
 8001010:	8c3b      	ldrh	r3, [r7, #32]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f8de 	bl	80011d4 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8001018:	89bb      	ldrh	r3, [r7, #12]
 800101a:	3301      	adds	r3, #1
 800101c:	81bb      	strh	r3, [r7, #12]
 800101e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001022:	89bb      	ldrh	r3, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	daf3      	bge.n	8001010 <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8001028:	89fb      	ldrh	r3, [r7, #14]
 800102a:	3301      	adds	r3, #1
 800102c:	81fb      	strh	r3, [r7, #14]
 800102e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001032:	89fb      	ldrh	r3, [r7, #14]
 8001034:	429a      	cmp	r2, r3
 8001036:	dae8      	bge.n	800100a <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8001038:	2300      	movs	r3, #0
}
 800103a:	4618      	mov	r0, r3
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bd90      	pop	{r4, r7, pc}

08001042 <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8001042:	b590      	push	{r4, r7, lr}
 8001044:	b085      	sub	sp, #20
 8001046:	af02      	add	r7, sp, #8
 8001048:	4604      	mov	r4, r0
 800104a:	4608      	mov	r0, r1
 800104c:	4611      	mov	r1, r2
 800104e:	461a      	mov	r2, r3
 8001050:	4623      	mov	r3, r4
 8001052:	80fb      	strh	r3, [r7, #6]
 8001054:	4603      	mov	r3, r0
 8001056:	80bb      	strh	r3, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8001060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001064:	2b00      	cmp	r3, #0
 8001066:	db0d      	blt.n	8001084 <HW_DrawLine+0x42>
 8001068:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800106c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001070:	da08      	bge.n	8001084 <HW_DrawLine+0x42>
 8001072:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	db04      	blt.n	8001084 <HW_DrawLine+0x42>
 800107a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800107e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001082:	db02      	blt.n	800108a <HW_DrawLine+0x48>
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
 8001088:	e031      	b.n	80010ee <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800108a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0d      	blt.n	80010ae <HW_DrawLine+0x6c>
 8001092:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001096:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800109a:	da08      	bge.n	80010ae <HW_DrawLine+0x6c>
 800109c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db04      	blt.n	80010ae <HW_DrawLine+0x6c>
 80010a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010a8:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80010ac:	db02      	blt.n	80010b4 <HW_DrawLine+0x72>
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e01c      	b.n	80010ee <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 80010b4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d005      	beq.n	80010cc <HW_DrawLine+0x8a>
 80010c0:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80010c4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d10e      	bne.n	80010ea <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 80010cc:	f9b7 4000 	ldrsh.w	r4, [r7]
 80010d0:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80010d4:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010d8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80010dc:	8b3b      	ldrh	r3, [r7, #24]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	4623      	mov	r3, r4
 80010e2:	f7ff ff49 	bl	8000f78 <HW_FillFrame>
        return UG_RESULT_OK;
 80010e6:	2300      	movs	r3, #0
 80010e8:	e001      	b.n	80010ee <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd90      	pop	{r4, r7, pc}

080010f6 <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 80010f6:	b590      	push	{r4, r7, lr}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4604      	mov	r4, r0
 80010fe:	4608      	mov	r0, r1
 8001100:	4611      	mov	r1, r2
 8001102:	461a      	mov	r2, r3
 8001104:	4623      	mov	r3, r4
 8001106:	80fb      	strh	r3, [r7, #6]
 8001108:	4603      	mov	r3, r0
 800110a:	80bb      	strh	r3, [r7, #4]
 800110c:	460b      	mov	r3, r1
 800110e:	807b      	strh	r3, [r7, #2]
 8001110:	4613      	mov	r3, r2
 8001112:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8001114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0d      	blt.n	8001138 <HW_DrawImage+0x42>
 800111c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001120:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001124:	da08      	bge.n	8001138 <HW_DrawImage+0x42>
 8001126:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	db04      	blt.n	8001138 <HW_DrawImage+0x42>
 800112e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001132:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001136:	db02      	blt.n	800113e <HW_DrawImage+0x48>
 8001138:	f04f 33ff 	mov.w	r3, #4294967295
 800113c:	e02b      	b.n	8001196 <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800113e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001142:	2b00      	cmp	r3, #0
 8001144:	db0d      	blt.n	8001162 <HW_DrawImage+0x6c>
 8001146:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800114a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800114e:	da08      	bge.n	8001162 <HW_DrawImage+0x6c>
 8001150:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	db04      	blt.n	8001162 <HW_DrawImage+0x6c>
 8001158:	f9b7 3000 	ldrsh.w	r3, [r7]
 800115c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001160:	db02      	blt.n	8001168 <HW_DrawImage+0x72>
 8001162:	f04f 33ff 	mov.w	r3, #4294967295
 8001166:	e016      	b.n	8001196 <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8001168:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800116c:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001170:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001174:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001178:	f7ff fe84 	bl	8000e84 <SSD1963_WindowSet>

    write_command(0x2c);
 800117c:	202c      	movs	r0, #44	; 0x2c
 800117e:	f000 f80e 	bl	800119e <write_command>
    write_multi_data(image, pSize*3);
 8001182:	8bbb      	ldrh	r3, [r7, #28]
 8001184:	461a      	mov	r2, r3
 8001186:	0052      	lsls	r2, r2, #1
 8001188:	4413      	add	r3, r2
 800118a:	b29b      	uxth	r3, r3
 800118c:	4619      	mov	r1, r3
 800118e:	69b8      	ldr	r0, [r7, #24]
 8001190:	f000 f83a 	bl	8001208 <write_multi_data>

    return UG_RESULT_OK;
 8001194:	2300      	movs	r3, #0
}
 8001196:	4618      	mov	r0, r3
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	bd90      	pop	{r4, r7, pc}

0800119e <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 800119e:	b480      	push	{r7}
 80011a0:	b085      	sub	sp, #20
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	4603      	mov	r3, r0
 80011a6:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 80011a8:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80011ac:	79fa      	ldrb	r2, [r7, #7]
 80011ae:	b292      	uxth	r2, r2
 80011b0:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80011b2:	2300      	movs	r3, #0
 80011b4:	81fb      	strh	r3, [r7, #14]
 80011b6:	e002      	b.n	80011be <write_command+0x20>
 80011b8:	89fb      	ldrh	r3, [r7, #14]
 80011ba:	3301      	adds	r3, #1
 80011bc:	81fb      	strh	r3, [r7, #14]
 80011be:	89fb      	ldrh	r3, [r7, #14]
 80011c0:	2b0b      	cmp	r3, #11
 80011c2:	d9f9      	bls.n	80011b8 <write_command+0x1a>
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <write_data>:


void write_data(DATA_t data)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b085      	sub	sp, #20
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 80011de:	4a09      	ldr	r2, [pc, #36]	; (8001204 <write_data+0x30>)
 80011e0:	88fb      	ldrh	r3, [r7, #6]
 80011e2:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80011e4:	2300      	movs	r3, #0
 80011e6:	81fb      	strh	r3, [r7, #14]
 80011e8:	e002      	b.n	80011f0 <write_data+0x1c>
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	3301      	adds	r3, #1
 80011ee:	81fb      	strh	r3, [r7, #14]
 80011f0:	89fb      	ldrh	r3, [r7, #14]
 80011f2:	2b0b      	cmp	r3, #11
 80011f4:	d9f9      	bls.n	80011ea <write_data+0x16>
 }
 80011f6:	bf00      	nop
 80011f8:	bf00      	nop
 80011fa:	3714      	adds	r7, #20
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	60000100 	.word	0x60000100

08001208 <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	460b      	mov	r3, r1
 8001212:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	81fb      	strh	r3, [r7, #14]
 8001218:	e016      	b.n	8001248 <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 800121a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	4413      	add	r3, r2
 8001224:	4a0e      	ldr	r2, [pc, #56]	; (8001260 <write_multi_data+0x58>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 800122a:	2300      	movs	r3, #0
 800122c:	81bb      	strh	r3, [r7, #12]
 800122e:	e002      	b.n	8001236 <write_multi_data+0x2e>
 8001230:	89bb      	ldrh	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	81bb      	strh	r3, [r7, #12]
 8001236:	89bb      	ldrh	r3, [r7, #12]
 8001238:	2b0b      	cmp	r3, #11
 800123a:	d9f9      	bls.n	8001230 <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 800123c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001240:	b29b      	uxth	r3, r3
 8001242:	3301      	adds	r3, #1
 8001244:	b29b      	uxth	r3, r3
 8001246:	81fb      	strh	r3, [r7, #14]
 8001248:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800124c:	887b      	ldrh	r3, [r7, #2]
 800124e:	429a      	cmp	r2, r3
 8001250:	dbe3      	blt.n	800121a <write_multi_data+0x12>
    }
}
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	60000100 	.word	0x60000100

08001264 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001264:	f8df d034 	ldr.w	sp, [pc, #52]	; 800129c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001268:	480d      	ldr	r0, [pc, #52]	; (80012a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800126a:	490e      	ldr	r1, [pc, #56]	; (80012a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0b      	ldr	r2, [pc, #44]	; (80012ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001280:	4c0b      	ldr	r4, [pc, #44]	; (80012b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800128e:	f7ff fb99 	bl	80009c4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001292:	f001 f96f 	bl	8002574 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001296:	f7ff f98b 	bl	80005b0 <main>
  bx  lr    
 800129a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80012a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012a8:	0800fa08 	.word	0x0800fa08
  ldr r2, =_sbss
 80012ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012b0:	20000104 	.word	0x20000104

080012b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012b4:	e7fe      	b.n	80012b4 <ADC_IRQHandler>

080012b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f92e 	bl	800151c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c0:	200f      	movs	r0, #15
 80012c2:	f000 f805 	bl	80012d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c6:	f7ff fac9 	bl	800085c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <HAL_InitTick+0x54>)
 80012da:	681a      	ldr	r2, [r3, #0]
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x58>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	4619      	mov	r1, r3
 80012e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f93b 	bl	800156a <HAL_SYSTICK_Config>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e00e      	b.n	800131c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2b0f      	cmp	r3, #15
 8001302:	d80a      	bhi.n	800131a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001304:	2200      	movs	r2, #0
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	f04f 30ff 	mov.w	r0, #4294967295
 800130c:	f000 f911 	bl	8001532 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001310:	4a06      	ldr	r2, [pc, #24]	; (800132c <HAL_InitTick+0x5c>)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e000      	b.n	800131c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
}
 800131c:	4618      	mov	r0, r3
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	20000000 	.word	0x20000000
 8001328:	20000008 	.word	0x20000008
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	; (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	20000100 	.word	0x20000100

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	; (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000100 	.word	0x20000100

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138a:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013e6:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <__NVIC_SetPriorityGrouping+0x40>)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	60d3      	str	r3, [r2, #12]
}
 80013ec:	bf00      	nop
 80013ee:	3714      	adds	r7, #20
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00
 80013fc:	05fa0000 	.word	0x05fa0000

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	; (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	db0a      	blt.n	8001446 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	b2da      	uxtb	r2, r3
 8001434:	490c      	ldr	r1, [pc, #48]	; (8001468 <__NVIC_SetPriority+0x4c>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	0112      	lsls	r2, r2, #4
 800143c:	b2d2      	uxtb	r2, r2
 800143e:	440b      	add	r3, r1
 8001440:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001444:	e00a      	b.n	800145c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	b2da      	uxtb	r2, r3
 800144a:	4908      	ldr	r1, [pc, #32]	; (800146c <__NVIC_SetPriority+0x50>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	0112      	lsls	r2, r2, #4
 8001456:	b2d2      	uxtb	r2, r2
 8001458:	440b      	add	r3, r1
 800145a:	761a      	strb	r2, [r3, #24]
}
 800145c:	bf00      	nop
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000e100 	.word	0xe000e100
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	; 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f1c3 0307 	rsb	r3, r3, #7
 800148a:	2b04      	cmp	r3, #4
 800148c:	bf28      	it	cs
 800148e:	2304      	movcs	r3, #4
 8001490:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3304      	adds	r3, #4
 8001496:	2b06      	cmp	r3, #6
 8001498:	d902      	bls.n	80014a0 <NVIC_EncodePriority+0x30>
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3b03      	subs	r3, #3
 800149e:	e000      	b.n	80014a2 <NVIC_EncodePriority+0x32>
 80014a0:	2300      	movs	r3, #0
 80014a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	f04f 32ff 	mov.w	r2, #4294967295
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	fa02 f303 	lsl.w	r3, r2, r3
 80014ae:	43da      	mvns	r2, r3
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	401a      	ands	r2, r3
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b8:	f04f 31ff 	mov.w	r1, #4294967295
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	fa01 f303 	lsl.w	r3, r1, r3
 80014c2:	43d9      	mvns	r1, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c8:	4313      	orrs	r3, r2
         );
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3724      	adds	r7, #36	; 0x24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
	...

080014d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	3b01      	subs	r3, #1
 80014e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014e8:	d301      	bcc.n	80014ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00f      	b.n	800150e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ee:	4a0a      	ldr	r2, [pc, #40]	; (8001518 <SysTick_Config+0x40>)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014f6:	210f      	movs	r1, #15
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f7ff ff8e 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001500:	4b05      	ldr	r3, [pc, #20]	; (8001518 <SysTick_Config+0x40>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <SysTick_Config+0x40>)
 8001508:	2207      	movs	r2, #7
 800150a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	e000e010 	.word	0xe000e010

0800151c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	f7ff ff47 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001544:	f7ff ff5c 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001548:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154a:	687a      	ldr	r2, [r7, #4]
 800154c:	68b9      	ldr	r1, [r7, #8]
 800154e:	6978      	ldr	r0, [r7, #20]
 8001550:	f7ff ff8e 	bl	8001470 <NVIC_EncodePriority>
 8001554:	4602      	mov	r2, r0
 8001556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	bf00      	nop
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffb0 	bl	80014d8 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001584:	b480      	push	{r7}
 8001586:	b089      	sub	sp, #36	; 0x24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001596:	2300      	movs	r3, #0
 8001598:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
 80015a2:	e175      	b.n	8001890 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80015a4:	2201      	movs	r2, #1
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	697a      	ldr	r2, [r7, #20]
 80015b4:	4013      	ands	r3, r2
 80015b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015b8:	693a      	ldr	r2, [r7, #16]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	429a      	cmp	r2, r3
 80015be:	f040 8164 	bne.w	800188a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d005      	beq.n	80015da <HAL_GPIO_Init+0x56>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d130      	bne.n	800163c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	2203      	movs	r2, #3
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43db      	mvns	r3, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4013      	ands	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	69fb      	ldr	r3, [r7, #28]
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4313      	orrs	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001610:	2201      	movs	r2, #1
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	43db      	mvns	r3, r3
 800161a:	69ba      	ldr	r2, [r7, #24]
 800161c:	4013      	ands	r3, r2
 800161e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	091b      	lsrs	r3, r3, #4
 8001626:	f003 0201 	and.w	r2, r3, #1
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4313      	orrs	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69ba      	ldr	r2, [r7, #24]
 800163a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b03      	cmp	r3, #3
 8001646:	d017      	beq.n	8001678 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	2203      	movs	r2, #3
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	69ba      	ldr	r2, [r7, #24]
 800165c:	4013      	ands	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	69ba      	ldr	r2, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	69ba      	ldr	r2, [r7, #24]
 8001676:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 0303 	and.w	r3, r3, #3
 8001680:	2b02      	cmp	r3, #2
 8001682:	d123      	bne.n	80016cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	08da      	lsrs	r2, r3, #3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3208      	adds	r2, #8
 800168c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	f003 0307 	and.w	r3, r3, #7
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	220f      	movs	r2, #15
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	43db      	mvns	r3, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4013      	ands	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80016be:	69fb      	ldr	r3, [r7, #28]
 80016c0:	08da      	lsrs	r2, r3, #3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	3208      	adds	r2, #8
 80016c6:	69b9      	ldr	r1, [r7, #24]
 80016c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2203      	movs	r2, #3
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	69ba      	ldr	r2, [r7, #24]
 80016e0:	4013      	ands	r3, r2
 80016e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 0203 	and.w	r2, r3, #3
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001708:	2b00      	cmp	r3, #0
 800170a:	f000 80be 	beq.w	800188a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800170e:	4b66      	ldr	r3, [pc, #408]	; (80018a8 <HAL_GPIO_Init+0x324>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001712:	4a65      	ldr	r2, [pc, #404]	; (80018a8 <HAL_GPIO_Init+0x324>)
 8001714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001718:	6453      	str	r3, [r2, #68]	; 0x44
 800171a:	4b63      	ldr	r3, [pc, #396]	; (80018a8 <HAL_GPIO_Init+0x324>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001726:	4a61      	ldr	r2, [pc, #388]	; (80018ac <HAL_GPIO_Init+0x328>)
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	089b      	lsrs	r3, r3, #2
 800172c:	3302      	adds	r3, #2
 800172e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0303 	and.w	r3, r3, #3
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a58      	ldr	r2, [pc, #352]	; (80018b0 <HAL_GPIO_Init+0x32c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d037      	beq.n	80017c2 <HAL_GPIO_Init+0x23e>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a57      	ldr	r2, [pc, #348]	; (80018b4 <HAL_GPIO_Init+0x330>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d031      	beq.n	80017be <HAL_GPIO_Init+0x23a>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a56      	ldr	r2, [pc, #344]	; (80018b8 <HAL_GPIO_Init+0x334>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d02b      	beq.n	80017ba <HAL_GPIO_Init+0x236>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a55      	ldr	r2, [pc, #340]	; (80018bc <HAL_GPIO_Init+0x338>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d025      	beq.n	80017b6 <HAL_GPIO_Init+0x232>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	4a54      	ldr	r2, [pc, #336]	; (80018c0 <HAL_GPIO_Init+0x33c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01f      	beq.n	80017b2 <HAL_GPIO_Init+0x22e>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a53      	ldr	r2, [pc, #332]	; (80018c4 <HAL_GPIO_Init+0x340>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d019      	beq.n	80017ae <HAL_GPIO_Init+0x22a>
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a52      	ldr	r2, [pc, #328]	; (80018c8 <HAL_GPIO_Init+0x344>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d013      	beq.n	80017aa <HAL_GPIO_Init+0x226>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4a51      	ldr	r2, [pc, #324]	; (80018cc <HAL_GPIO_Init+0x348>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d00d      	beq.n	80017a6 <HAL_GPIO_Init+0x222>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4a50      	ldr	r2, [pc, #320]	; (80018d0 <HAL_GPIO_Init+0x34c>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d007      	beq.n	80017a2 <HAL_GPIO_Init+0x21e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4a4f      	ldr	r2, [pc, #316]	; (80018d4 <HAL_GPIO_Init+0x350>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d101      	bne.n	800179e <HAL_GPIO_Init+0x21a>
 800179a:	2309      	movs	r3, #9
 800179c:	e012      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 800179e:	230a      	movs	r3, #10
 80017a0:	e010      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017a2:	2308      	movs	r3, #8
 80017a4:	e00e      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017a6:	2307      	movs	r3, #7
 80017a8:	e00c      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017aa:	2306      	movs	r3, #6
 80017ac:	e00a      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017ae:	2305      	movs	r3, #5
 80017b0:	e008      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017b2:	2304      	movs	r3, #4
 80017b4:	e006      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017b6:	2303      	movs	r3, #3
 80017b8:	e004      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e002      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017be:	2301      	movs	r3, #1
 80017c0:	e000      	b.n	80017c4 <HAL_GPIO_Init+0x240>
 80017c2:	2300      	movs	r3, #0
 80017c4:	69fa      	ldr	r2, [r7, #28]
 80017c6:	f002 0203 	and.w	r2, r2, #3
 80017ca:	0092      	lsls	r2, r2, #2
 80017cc:	4093      	lsls	r3, r2
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80017d4:	4935      	ldr	r1, [pc, #212]	; (80018ac <HAL_GPIO_Init+0x328>)
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	089b      	lsrs	r3, r3, #2
 80017da:	3302      	adds	r3, #2
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017e2:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_GPIO_Init+0x354>)
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d003      	beq.n	8001806 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001806:	4a34      	ldr	r2, [pc, #208]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800180c:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <HAL_GPIO_Init+0x354>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	43db      	mvns	r3, r3
 8001816:	69ba      	ldr	r2, [r7, #24]
 8001818:	4013      	ands	r3, r2
 800181a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d003      	beq.n	8001830 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001830:	4a29      	ldr	r2, [pc, #164]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	43db      	mvns	r3, r3
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	4013      	ands	r3, r2
 8001844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d003      	beq.n	800185a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800185a:	4a1f      	ldr	r2, [pc, #124]	; (80018d8 <HAL_GPIO_Init+0x354>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001878:	2b00      	cmp	r3, #0
 800187a:	d003      	beq.n	8001884 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001884:	4a14      	ldr	r2, [pc, #80]	; (80018d8 <HAL_GPIO_Init+0x354>)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3301      	adds	r3, #1
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	2b0f      	cmp	r3, #15
 8001894:	f67f ae86 	bls.w	80015a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	3724      	adds	r7, #36	; 0x24
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40013800 	.word	0x40013800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020400 	.word	0x40020400
 80018b8:	40020800 	.word	0x40020800
 80018bc:	40020c00 	.word	0x40020c00
 80018c0:	40021000 	.word	0x40021000
 80018c4:	40021400 	.word	0x40021400
 80018c8:	40021800 	.word	0x40021800
 80018cc:	40021c00 	.word	0x40021c00
 80018d0:	40022000 	.word	0x40022000
 80018d4:	40022400 	.word	0x40022400
 80018d8:	40013c00 	.word	0x40013c00

080018dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <HAL_PWREx_EnableOverDrive+0x98>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ea:	4a22      	ldr	r2, [pc, #136]	; (8001974 <HAL_PWREx_EnableOverDrive+0x98>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	; 0x40
 80018f2:	4b20      	ldr	r3, [pc, #128]	; (8001974 <HAL_PWREx_EnableOverDrive+0x98>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018fe:	4b1e      	ldr	r3, [pc, #120]	; (8001978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a1d      	ldr	r2, [pc, #116]	; (8001978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001908:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190a:	f7ff fd25 	bl	8001358 <HAL_GetTick>
 800190e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001910:	e009      	b.n	8001926 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001912:	f7ff fd21 	bl	8001358 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001920:	d901      	bls.n	8001926 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e022      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001926:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800192e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001932:	d1ee      	bne.n	8001912 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <HAL_PWREx_EnableOverDrive+0x9c>)
 800193a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800193e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001940:	f7ff fd0a 	bl	8001358 <HAL_GetTick>
 8001944:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001946:	e009      	b.n	800195c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001948:	f7ff fd06 	bl	8001358 <HAL_GetTick>
 800194c:	4602      	mov	r2, r0
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001956:	d901      	bls.n	800195c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e007      	b.n	800196c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_PWREx_EnableOverDrive+0x9c>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001968:	d1ee      	bne.n	8001948 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800196a:	2300      	movs	r3, #0
}
 800196c:	4618      	mov	r0, r3
 800196e:	3708      	adds	r7, #8
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	40023800 	.word	0x40023800
 8001978:	40007000 	.word	0x40007000

0800197c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001984:	2300      	movs	r3, #0
 8001986:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e291      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b96      	ldr	r3, [pc, #600]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80019ac:	4b93      	ldr	r3, [pc, #588]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x62>
 80019b8:	4b90      	ldr	r3, [pc, #576]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b8d      	ldr	r3, [pc, #564]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x130>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e26b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x7a>
 80019e8:	4b84      	ldr	r3, [pc, #528]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a83      	ldr	r2, [pc, #524]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd8>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x9c>
 80019fe:	4b7f      	ldr	r3, [pc, #508]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7e      	ldr	r2, [pc, #504]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b7c      	ldr	r3, [pc, #496]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a7b      	ldr	r2, [pc, #492]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xc0>
 8001a22:	4b76      	ldr	r3, [pc, #472]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a75      	ldr	r2, [pc, #468]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a72      	ldr	r2, [pc, #456]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd8>
 8001a3c:	4b6f      	ldr	r3, [pc, #444]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6e      	ldr	r2, [pc, #440]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b6c      	ldr	r3, [pc, #432]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a6b      	ldr	r2, [pc, #428]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a5c:	f7ff fc7c 	bl	8001358 <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff fc78 	bl	8001358 <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e21f      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b61      	ldr	r3, [pc, #388]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe8>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a84:	f7ff fc68 	bl	8001358 <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff fc64 	bl	8001358 <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e20b      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b57      	ldr	r3, [pc, #348]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x110>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d069      	beq.n	8001b8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b50      	ldr	r3, [pc, #320]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ac6:	4b4d      	ldr	r3, [pc, #308]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x190>
 8001ad2:	4b4a      	ldr	r3, [pc, #296]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b47      	ldr	r3, [pc, #284]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1df      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b41      	ldr	r3, [pc, #260]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	493d      	ldr	r1, [pc, #244]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e040      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d023      	beq.n	8001b5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a38      	ldr	r2, [pc, #224]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fc1a 	bl	8001358 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fc16 	bl	8001358 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e1bd      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	4b30      	ldr	r3, [pc, #192]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d0f0      	beq.n	8001b28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b46:	4b2d      	ldr	r3, [pc, #180]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	4929      	ldr	r1, [pc, #164]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	600b      	str	r3, [r1, #0]
 8001b5a:	e018      	b.n	8001b8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b5c:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a26      	ldr	r2, [pc, #152]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b62:	f023 0301 	bic.w	r3, r3, #1
 8001b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fbf6 	bl	8001358 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b70:	f7ff fbf2 	bl	8001358 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e199      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b82:	4b1e      	ldr	r3, [pc, #120]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f0      	bne.n	8001b70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d038      	beq.n	8001c0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d019      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba2:	4b16      	ldr	r3, [pc, #88]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba6:	4a15      	ldr	r2, [pc, #84]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bae:	f7ff fbd3 	bl	8001358 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fbcf 	bl	8001358 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e176      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bcc:	f003 0302 	and.w	r3, r3, #2
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x23a>
 8001bd4:	e01a      	b.n	8001c0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd6:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bda:	4a08      	ldr	r2, [pc, #32]	; (8001bfc <HAL_RCC_OscConfig+0x280>)
 8001bdc:	f023 0301 	bic.w	r3, r3, #1
 8001be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be2:	f7ff fbb9 	bl	8001358 <HAL_GetTick>
 8001be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001be8:	e00a      	b.n	8001c00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bea:	f7ff fbb5 	bl	8001358 <HAL_GetTick>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d903      	bls.n	8001c00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e15c      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
 8001bfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c00:	4b91      	ldr	r3, [pc, #580]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d1ee      	bne.n	8001bea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0304 	and.w	r3, r3, #4
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f000 80a4 	beq.w	8001d62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c1a:	4b8b      	ldr	r3, [pc, #556]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d10d      	bne.n	8001c42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c26:	4b88      	ldr	r3, [pc, #544]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	4a87      	ldr	r2, [pc, #540]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c30:	6413      	str	r3, [r2, #64]	; 0x40
 8001c32:	4b85      	ldr	r3, [pc, #532]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c3a:	60bb      	str	r3, [r7, #8]
 8001c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c42:	4b82      	ldr	r3, [pc, #520]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d118      	bne.n	8001c80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c4e:	4b7f      	ldr	r3, [pc, #508]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a7e      	ldr	r2, [pc, #504]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c5a:	f7ff fb7d 	bl	8001358 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c62:	f7ff fb79 	bl	8001358 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b64      	cmp	r3, #100	; 0x64
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e120      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c74:	4b75      	ldr	r3, [pc, #468]	; (8001e4c <HAL_RCC_OscConfig+0x4d0>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d106      	bne.n	8001c96 <HAL_RCC_OscConfig+0x31a>
 8001c88:	4b6f      	ldr	r3, [pc, #444]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c8c:	4a6e      	ldr	r2, [pc, #440]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
 8001c94:	e02d      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d10c      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x33c>
 8001c9e:	4b6a      	ldr	r3, [pc, #424]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a69      	ldr	r2, [pc, #420]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4b67      	ldr	r3, [pc, #412]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a66      	ldr	r2, [pc, #408]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8001cb6:	e01c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	2b05      	cmp	r3, #5
 8001cbe:	d10c      	bne.n	8001cda <HAL_RCC_OscConfig+0x35e>
 8001cc0:	4b61      	ldr	r3, [pc, #388]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc4:	4a60      	ldr	r2, [pc, #384]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	6713      	str	r3, [r2, #112]	; 0x70
 8001ccc:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd0:	4a5d      	ldr	r2, [pc, #372]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cd2:	f043 0301 	orr.w	r3, r3, #1
 8001cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001cd8:	e00b      	b.n	8001cf2 <HAL_RCC_OscConfig+0x376>
 8001cda:	4b5b      	ldr	r3, [pc, #364]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a5a      	ldr	r2, [pc, #360]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8001ce6:	4b58      	ldr	r3, [pc, #352]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cea:	4a57      	ldr	r2, [pc, #348]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d015      	beq.n	8001d26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cfa:	f7ff fb2d 	bl	8001358 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d00:	e00a      	b.n	8001d18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d02:	f7ff fb29 	bl	8001358 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e0ce      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d18:	4b4b      	ldr	r3, [pc, #300]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d0ee      	beq.n	8001d02 <HAL_RCC_OscConfig+0x386>
 8001d24:	e014      	b.n	8001d50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d26:	f7ff fb17 	bl	8001358 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2e:	f7ff fb13 	bl	8001358 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d901      	bls.n	8001d44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d40:	2303      	movs	r3, #3
 8001d42:	e0b8      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d44:	4b40      	ldr	r3, [pc, #256]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d1ee      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d50:	7dfb      	ldrb	r3, [r7, #23]
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d105      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d56:	4b3c      	ldr	r3, [pc, #240]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5a:	4a3b      	ldr	r2, [pc, #236]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	699b      	ldr	r3, [r3, #24]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 80a4 	beq.w	8001eb4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d6c:	4b36      	ldr	r3, [pc, #216]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	f003 030c 	and.w	r3, r3, #12
 8001d74:	2b08      	cmp	r3, #8
 8001d76:	d06b      	beq.n	8001e50 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699b      	ldr	r3, [r3, #24]
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d149      	bne.n	8001e14 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d80:	4b31      	ldr	r3, [pc, #196]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a30      	ldr	r2, [pc, #192]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fae4 	bl	8001358 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d94:	f7ff fae0 	bl	8001358 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e087      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001da6:	4b28      	ldr	r3, [pc, #160]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	69da      	ldr	r2, [r3, #28]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a1b      	ldr	r3, [r3, #32]
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc0:	019b      	lsls	r3, r3, #6
 8001dc2:	431a      	orrs	r2, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	041b      	lsls	r3, r3, #16
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd4:	061b      	lsls	r3, r3, #24
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	4a1b      	ldr	r2, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001dde:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001de0:	4b19      	ldr	r3, [pc, #100]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a18      	ldr	r2, [pc, #96]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff fab4 	bl	8001358 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001df4:	f7ff fab0 	bl	8001358 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e057      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e06:	4b10      	ldr	r3, [pc, #64]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x478>
 8001e12:	e04f      	b.n	8001eb4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e14:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e20:	f7ff fa9a 	bl	8001358 <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e26:	e008      	b.n	8001e3a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e28:	f7ff fa96 	bl	8001358 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e03d      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e3a:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <HAL_RCC_OscConfig+0x4cc>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1f0      	bne.n	8001e28 <HAL_RCC_OscConfig+0x4ac>
 8001e46:	e035      	b.n	8001eb4 <HAL_RCC_OscConfig+0x538>
 8001e48:	40023800 	.word	0x40023800
 8001e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e50:	4b1b      	ldr	r3, [pc, #108]	; (8001ec0 <HAL_RCC_OscConfig+0x544>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d028      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d121      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d11a      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e80:	4013      	ands	r3, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d111      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e96:	085b      	lsrs	r3, r3, #1
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d001      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e000      	b.n	8001eb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3718      	adds	r7, #24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bd80      	pop	{r7, pc}
 8001ebe:	bf00      	nop
 8001ec0:	40023800 	.word	0x40023800

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d0      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001edc:	4b6a      	ldr	r3, [pc, #424]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d910      	bls.n	8001f0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eea:	4b67      	ldr	r3, [pc, #412]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f023 020f 	bic.w	r2, r3, #15
 8001ef2:	4965      	ldr	r1, [pc, #404]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001efa:	4b63      	ldr	r3, [pc, #396]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d001      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e0b8      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d020      	beq.n	8001f5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f24:	4b59      	ldr	r3, [pc, #356]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	4a58      	ldr	r2, [pc, #352]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001f2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f3c:	4b53      	ldr	r3, [pc, #332]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a52      	ldr	r2, [pc, #328]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f48:	4b50      	ldr	r3, [pc, #320]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	494d      	ldr	r1, [pc, #308]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f56:	4313      	orrs	r3, r2
 8001f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d040      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d107      	bne.n	8001f7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d115      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e07f      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f86:	4b41      	ldr	r3, [pc, #260]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e073      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f96:	4b3d      	ldr	r3, [pc, #244]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e06b      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa6:	4b39      	ldr	r3, [pc, #228]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	f023 0203 	bic.w	r2, r3, #3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	4936      	ldr	r1, [pc, #216]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fb8:	f7ff f9ce 	bl	8001358 <HAL_GetTick>
 8001fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	e00a      	b.n	8001fd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc0:	f7ff f9ca 	bl	8001358 <HAL_GetTick>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	1ad3      	subs	r3, r2, r3
 8001fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d901      	bls.n	8001fd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001fd2:	2303      	movs	r3, #3
 8001fd4:	e053      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 020c 	and.w	r2, r3, #12
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d1eb      	bne.n	8001fc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe8:	4b27      	ldr	r3, [pc, #156]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 030f 	and.w	r3, r3, #15
 8001ff0:	683a      	ldr	r2, [r7, #0]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d210      	bcs.n	8002018 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff6:	4b24      	ldr	r3, [pc, #144]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 020f 	bic.w	r2, r3, #15
 8001ffe:	4922      	ldr	r1, [pc, #136]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	4313      	orrs	r3, r2
 8002004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 030f 	and.w	r3, r3, #15
 800200e:	683a      	ldr	r2, [r7, #0]
 8002010:	429a      	cmp	r2, r3
 8002012:	d001      	beq.n	8002018 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e032      	b.n	800207e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d008      	beq.n	8002036 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002024:	4b19      	ldr	r3, [pc, #100]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	4916      	ldr	r1, [pc, #88]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002032:	4313      	orrs	r3, r2
 8002034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0308 	and.w	r3, r3, #8
 800203e:	2b00      	cmp	r3, #0
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002042:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	490e      	ldr	r1, [pc, #56]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002056:	f000 f821 	bl	800209c <HAL_RCC_GetSysClockFreq>
 800205a:	4602      	mov	r2, r0
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x1c8>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	091b      	lsrs	r3, r3, #4
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	490a      	ldr	r1, [pc, #40]	; (8002090 <HAL_RCC_ClockConfig+0x1cc>)
 8002068:	5ccb      	ldrb	r3, [r1, r3]
 800206a:	fa22 f303 	lsr.w	r3, r2, r3
 800206e:	4a09      	ldr	r2, [pc, #36]	; (8002094 <HAL_RCC_ClockConfig+0x1d0>)
 8002070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <HAL_RCC_ClockConfig+0x1d4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff f92a 	bl	80012d0 <HAL_InitTick>

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023c00 	.word	0x40023c00
 800208c:	40023800 	.word	0x40023800
 8002090:	080025d4 	.word	0x080025d4
 8002094:	20000000 	.word	0x20000000
 8002098:	20000004 	.word	0x20000004

0800209c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800209c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020a0:	b094      	sub	sp, #80	; 0x50
 80020a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	647b      	str	r3, [r7, #68]	; 0x44
 80020a8:	2300      	movs	r3, #0
 80020aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020ac:	2300      	movs	r3, #0
 80020ae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020b4:	4b79      	ldr	r3, [pc, #484]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 030c 	and.w	r3, r3, #12
 80020bc:	2b08      	cmp	r3, #8
 80020be:	d00d      	beq.n	80020dc <HAL_RCC_GetSysClockFreq+0x40>
 80020c0:	2b08      	cmp	r3, #8
 80020c2:	f200 80e1 	bhi.w	8002288 <HAL_RCC_GetSysClockFreq+0x1ec>
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d002      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0x34>
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	d003      	beq.n	80020d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80020ce:	e0db      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80020d0:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020d2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020d4:	e0db      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80020d6:	4b72      	ldr	r3, [pc, #456]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80020da:	e0d8      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020dc:	4b6f      	ldr	r3, [pc, #444]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020e4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020e6:	4b6d      	ldr	r3, [pc, #436]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d063      	beq.n	80021ba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f2:	4b6a      	ldr	r3, [pc, #424]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	099b      	lsrs	r3, r3, #6
 80020f8:	2200      	movs	r2, #0
 80020fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80020fc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80020fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002104:	633b      	str	r3, [r7, #48]	; 0x30
 8002106:	2300      	movs	r3, #0
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
 800210a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800210e:	4622      	mov	r2, r4
 8002110:	462b      	mov	r3, r5
 8002112:	f04f 0000 	mov.w	r0, #0
 8002116:	f04f 0100 	mov.w	r1, #0
 800211a:	0159      	lsls	r1, r3, #5
 800211c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002120:	0150      	lsls	r0, r2, #5
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4621      	mov	r1, r4
 8002128:	1a51      	subs	r1, r2, r1
 800212a:	6139      	str	r1, [r7, #16]
 800212c:	4629      	mov	r1, r5
 800212e:	eb63 0301 	sbc.w	r3, r3, r1
 8002132:	617b      	str	r3, [r7, #20]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002140:	4659      	mov	r1, fp
 8002142:	018b      	lsls	r3, r1, #6
 8002144:	4651      	mov	r1, sl
 8002146:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800214a:	4651      	mov	r1, sl
 800214c:	018a      	lsls	r2, r1, #6
 800214e:	4651      	mov	r1, sl
 8002150:	ebb2 0801 	subs.w	r8, r2, r1
 8002154:	4659      	mov	r1, fp
 8002156:	eb63 0901 	sbc.w	r9, r3, r1
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800216a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800216e:	4690      	mov	r8, r2
 8002170:	4699      	mov	r9, r3
 8002172:	4623      	mov	r3, r4
 8002174:	eb18 0303 	adds.w	r3, r8, r3
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	462b      	mov	r3, r5
 800217c:	eb49 0303 	adc.w	r3, r9, r3
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800218e:	4629      	mov	r1, r5
 8002190:	028b      	lsls	r3, r1, #10
 8002192:	4621      	mov	r1, r4
 8002194:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002198:	4621      	mov	r1, r4
 800219a:	028a      	lsls	r2, r1, #10
 800219c:	4610      	mov	r0, r2
 800219e:	4619      	mov	r1, r3
 80021a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021a2:	2200      	movs	r2, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80021a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80021a8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80021ac:	f7fe f82c 	bl	8000208 <__aeabi_uldivmod>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4613      	mov	r3, r2
 80021b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80021b8:	e058      	b.n	800226c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ba:	4b38      	ldr	r3, [pc, #224]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	099b      	lsrs	r3, r3, #6
 80021c0:	2200      	movs	r2, #0
 80021c2:	4618      	mov	r0, r3
 80021c4:	4611      	mov	r1, r2
 80021c6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80021ca:	623b      	str	r3, [r7, #32]
 80021cc:	2300      	movs	r3, #0
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80021d4:	4642      	mov	r2, r8
 80021d6:	464b      	mov	r3, r9
 80021d8:	f04f 0000 	mov.w	r0, #0
 80021dc:	f04f 0100 	mov.w	r1, #0
 80021e0:	0159      	lsls	r1, r3, #5
 80021e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021e6:	0150      	lsls	r0, r2, #5
 80021e8:	4602      	mov	r2, r0
 80021ea:	460b      	mov	r3, r1
 80021ec:	4641      	mov	r1, r8
 80021ee:	ebb2 0a01 	subs.w	sl, r2, r1
 80021f2:	4649      	mov	r1, r9
 80021f4:	eb63 0b01 	sbc.w	fp, r3, r1
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002204:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002208:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800220c:	ebb2 040a 	subs.w	r4, r2, sl
 8002210:	eb63 050b 	sbc.w	r5, r3, fp
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	f04f 0300 	mov.w	r3, #0
 800221c:	00eb      	lsls	r3, r5, #3
 800221e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002222:	00e2      	lsls	r2, r4, #3
 8002224:	4614      	mov	r4, r2
 8002226:	461d      	mov	r5, r3
 8002228:	4643      	mov	r3, r8
 800222a:	18e3      	adds	r3, r4, r3
 800222c:	603b      	str	r3, [r7, #0]
 800222e:	464b      	mov	r3, r9
 8002230:	eb45 0303 	adc.w	r3, r5, r3
 8002234:	607b      	str	r3, [r7, #4]
 8002236:	f04f 0200 	mov.w	r2, #0
 800223a:	f04f 0300 	mov.w	r3, #0
 800223e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002242:	4629      	mov	r1, r5
 8002244:	028b      	lsls	r3, r1, #10
 8002246:	4621      	mov	r1, r4
 8002248:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800224c:	4621      	mov	r1, r4
 800224e:	028a      	lsls	r2, r1, #10
 8002250:	4610      	mov	r0, r2
 8002252:	4619      	mov	r1, r3
 8002254:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002256:	2200      	movs	r2, #0
 8002258:	61bb      	str	r3, [r7, #24]
 800225a:	61fa      	str	r2, [r7, #28]
 800225c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002260:	f7fd ffd2 	bl	8000208 <__aeabi_uldivmod>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4613      	mov	r3, r2
 800226a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_RCC_GetSysClockFreq+0x200>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	0c1b      	lsrs	r3, r3, #16
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	3301      	adds	r3, #1
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800227c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800227e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002280:	fbb2 f3f3 	udiv	r3, r2, r3
 8002284:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002286:	e002      	b.n	800228e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002288:	4b05      	ldr	r3, [pc, #20]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x204>)
 800228a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800228c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800228e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002290:	4618      	mov	r0, r3
 8002292:	3750      	adds	r7, #80	; 0x50
 8002294:	46bd      	mov	sp, r7
 8002296:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800229a:	bf00      	nop
 800229c:	40023800 	.word	0x40023800
 80022a0:	00f42400 	.word	0x00f42400

080022a4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e038      	b.n	800232c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d106      	bne.n	80022d4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	f7fe fb44 	bl	800095c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	3308      	adds	r3, #8
 80022dc:	4619      	mov	r1, r3
 80022de:	4610      	mov	r0, r2
 80022e0:	f000 f828 	bl	8002334 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6818      	ldr	r0, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	461a      	mov	r2, r3
 80022ee:	68b9      	ldr	r1, [r7, #8]
 80022f0:	f000 f8b0 	bl	8002454 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6858      	ldr	r0, [r3, #4]
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	689a      	ldr	r2, [r3, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002300:	6879      	ldr	r1, [r7, #4]
 8002302:	f000 f8f7 	bl	80024f4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	6892      	ldr	r2, [r2, #8]
 800230e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	6892      	ldr	r2, [r2, #8]
 800231a:	f041 0101 	orr.w	r1, r1, #1
 800231e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	f023 0101 	bic.w	r1, r3, #1
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	2b08      	cmp	r3, #8
 800235c:	d102      	bne.n	8002364 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800235e:	2340      	movs	r3, #64	; 0x40
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	e001      	b.n	8002368 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002374:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800237a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002380:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002386:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800238c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8002392:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8002398:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800239e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80023a4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80023aa:	4313      	orrs	r3, r2
 80023ac:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023bc:	693a      	ldr	r2, [r7, #16]
 80023be:	4313      	orrs	r3, r2
 80023c0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c6:	693a      	ldr	r2, [r7, #16]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 80023cc:	4b20      	ldr	r3, [pc, #128]	; (8002450 <FMC_NORSRAM_Init+0x11c>)
 80023ce:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023d6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80023de:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80023e6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	ea02 0103 	and.w	r1, r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4319      	orrs	r1, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002410:	d10c      	bne.n	800242c <FMC_NORSRAM_Init+0xf8>
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d008      	beq.n	800242c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	431a      	orrs	r2, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d006      	beq.n	8002442 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	371c      	adds	r7, #28
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	0008fb7f 	.word	0x0008fb7f

08002454 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800246a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	431a      	orrs	r2, r3
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	431a      	orrs	r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	041b      	lsls	r3, r3, #16
 8002488:	431a      	orrs	r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	3b01      	subs	r3, #1
 8002490:	051b      	lsls	r3, r3, #20
 8002492:	431a      	orrs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	3b02      	subs	r3, #2
 800249a:	061b      	lsls	r3, r3, #24
 800249c:	431a      	orrs	r2, r3
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	3201      	adds	r2, #1
 80024a8:	4319      	orrs	r1, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024bc:	d113      	bne.n	80024e6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80024c6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	3b01      	subs	r3, #1
 80024ce:	051b      	lsls	r3, r3, #20
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80024e6:	2300      	movs	r3, #0
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	371c      	adds	r7, #28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr

080024f4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b085      	sub	sp, #20
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	60b9      	str	r1, [r7, #8]
 80024fe:	607a      	str	r2, [r7, #4]
 8002500:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002508:	d11d      	bne.n	8002546 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002512:	4b13      	ldr	r3, [pc, #76]	; (8002560 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002514:	4013      	ands	r3, r2
 8002516:	68ba      	ldr	r2, [r7, #8]
 8002518:	6811      	ldr	r1, [r2, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	6852      	ldr	r2, [r2, #4]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	4311      	orrs	r1, r2
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	6892      	ldr	r2, [r2, #8]
 8002526:	0212      	lsls	r2, r2, #8
 8002528:	4311      	orrs	r1, r2
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	6992      	ldr	r2, [r2, #24]
 800252e:	4311      	orrs	r1, r2
 8002530:	68ba      	ldr	r2, [r7, #8]
 8002532:	68d2      	ldr	r2, [r2, #12]
 8002534:	0412      	lsls	r2, r2, #16
 8002536:	430a      	orrs	r2, r1
 8002538:	ea43 0102 	orr.w	r1, r3, r2
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002544:	e005      	b.n	8002552 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800254e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	cff00000 	.word	0xcff00000

08002564 <memset>:
 8002564:	4402      	add	r2, r0
 8002566:	4603      	mov	r3, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	d100      	bne.n	800256e <memset+0xa>
 800256c:	4770      	bx	lr
 800256e:	f803 1b01 	strb.w	r1, [r3], #1
 8002572:	e7f9      	b.n	8002568 <memset+0x4>

08002574 <__libc_init_array>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	4d0d      	ldr	r5, [pc, #52]	; (80025ac <__libc_init_array+0x38>)
 8002578:	4c0d      	ldr	r4, [pc, #52]	; (80025b0 <__libc_init_array+0x3c>)
 800257a:	1b64      	subs	r4, r4, r5
 800257c:	10a4      	asrs	r4, r4, #2
 800257e:	2600      	movs	r6, #0
 8002580:	42a6      	cmp	r6, r4
 8002582:	d109      	bne.n	8002598 <__libc_init_array+0x24>
 8002584:	4d0b      	ldr	r5, [pc, #44]	; (80025b4 <__libc_init_array+0x40>)
 8002586:	4c0c      	ldr	r4, [pc, #48]	; (80025b8 <__libc_init_array+0x44>)
 8002588:	f000 f818 	bl	80025bc <_init>
 800258c:	1b64      	subs	r4, r4, r5
 800258e:	10a4      	asrs	r4, r4, #2
 8002590:	2600      	movs	r6, #0
 8002592:	42a6      	cmp	r6, r4
 8002594:	d105      	bne.n	80025a2 <__libc_init_array+0x2e>
 8002596:	bd70      	pop	{r4, r5, r6, pc}
 8002598:	f855 3b04 	ldr.w	r3, [r5], #4
 800259c:	4798      	blx	r3
 800259e:	3601      	adds	r6, #1
 80025a0:	e7ee      	b.n	8002580 <__libc_init_array+0xc>
 80025a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80025a6:	4798      	blx	r3
 80025a8:	3601      	adds	r6, #1
 80025aa:	e7f2      	b.n	8002592 <__libc_init_array+0x1e>
 80025ac:	0800fa00 	.word	0x0800fa00
 80025b0:	0800fa00 	.word	0x0800fa00
 80025b4:	0800fa00 	.word	0x0800fa00
 80025b8:	0800fa04 	.word	0x0800fa04

080025bc <_init>:
 80025bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025be:	bf00      	nop
 80025c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025c2:	bc08      	pop	{r3}
 80025c4:	469e      	mov	lr, r3
 80025c6:	4770      	bx	lr

080025c8 <_fini>:
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	bf00      	nop
 80025cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ce:	bc08      	pop	{r3}
 80025d0:	469e      	mov	lr, r3
 80025d2:	4770      	bx	lr
