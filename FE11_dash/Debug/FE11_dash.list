
FE11_dash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c88  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f5e8  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013440  08013440  000300b8  2**0
                  CONTENTS
  4 .ARM          00000008  08013440  08013440  00023440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013448  08013448  000300b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013448  08013448  00023448  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801344c  0801344c  0002344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b8  20000000  08013450  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200000b8  08013508  000300b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  08013508  00030330  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300b8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000be38  00000000  00000000  0003012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d29  00000000  00000000  0003bf63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ca0  00000000  00000000  0003dc90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000978  00000000  00000000  0003e930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026a0a  00000000  00000000  0003f2a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d772  00000000  00000000  00065cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6ec9  00000000  00000000  00073424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003980  00000000  00000000  0015a2f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  0015dc70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000b8 	.word	0x200000b8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003e40 	.word	0x08003e40

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000bc 	.word	0x200000bc
 800020c:	08003e40 	.word	0x08003e40

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <Display_Init>:
void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len);
UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value);


void Display_Init()
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
	SSD1963_Init();
 80005b0:	f001 fb86 	bl	8001cc0 <SSD1963_Init>

	// Initialize global structure and set PSET to this.PSET.
	UG_Init(&gui1963, SSD1963_PSet, DISPLAY_WIDTH, DISPLAY_HEIGHT);
 80005b4:	f44f 7388 	mov.w	r3, #272	; 0x110
 80005b8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80005bc:	490b      	ldr	r1, [pc, #44]	; (80005ec <Display_Init+0x40>)
 80005be:	480c      	ldr	r0, [pc, #48]	; (80005f0 <Display_Init+0x44>)
 80005c0:	f000 fe02 	bl	80011c8 <UG_Init>

	UG_FontSetVSpace(0);
 80005c4:	2000      	movs	r0, #0
 80005c6:	f001 f8a3 	bl	8001710 <UG_FontSetVSpace>
	UG_FontSetHSpace(0);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f001 f88c 	bl	80016e8 <UG_FontSetHSpace>

	// Register acceleratos.
	UG_DriverRegister(DRIVER_FILL_FRAME, (void*)HW_FillFrame);
 80005d0:	4908      	ldr	r1, [pc, #32]	; (80005f4 <Display_Init+0x48>)
 80005d2:	2001      	movs	r0, #1
 80005d4:	f001 fb48 	bl	8001c68 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_LINE, (void*)HW_DrawLine);
 80005d8:	4907      	ldr	r1, [pc, #28]	; (80005f8 <Display_Init+0x4c>)
 80005da:	2000      	movs	r0, #0
 80005dc:	f001 fb44 	bl	8001c68 <UG_DriverRegister>
	UG_DriverRegister(DRIVER_DRAW_IMAGE, (void*)HW_DrawImage);
 80005e0:	4906      	ldr	r1, [pc, #24]	; (80005fc <Display_Init+0x50>)
 80005e2:	2003      	movs	r0, #3
 80005e4:	f001 fb40 	bl	8001c68 <UG_DriverRegister>
}
 80005e8:	bf00      	nop
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	08001e83 	.word	0x08001e83
 80005f0:	20000104 	.word	0x20000104
 80005f4:	08001f0d 	.word	0x08001f0d
 80005f8:	08001fd7 	.word	0x08001fd7
 80005fc:	0800208b 	.word	0x0800208b

08000600 <Display_CalibrateScreen>:


// Just a test function that displays elements at the supposed corners of the screen
void Display_CalibrateScreen() {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af02      	add	r7, sp, #8
    UG_FillScreen(C_WHITE);
 8000606:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800060a:	f000 fe89 	bl	8001320 <UG_FillScreen>
    //UG_FillFrame(0, 0, 10, 10, C_RED);
    UG_FillFrame(0, 262, 10, 272, C_BLUE);
 800060e:	231f      	movs	r3, #31
 8000610:	9300      	str	r3, [sp, #0]
 8000612:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000616:	220a      	movs	r2, #10
 8000618:	f44f 7183 	mov.w	r1, #262	; 0x106
 800061c:	2000      	movs	r0, #0
 800061e:	f000 fea1 	bl	8001364 <UG_FillFrame>
    UG_FillFrame(470, 0, 480, 10, C_GREEN);
 8000622:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000626:	9300      	str	r3, [sp, #0]
 8000628:	230a      	movs	r3, #10
 800062a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800062e:	2100      	movs	r1, #0
 8000630:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 8000634:	f000 fe96 	bl	8001364 <UG_FillFrame>
    UG_FillFrame(470, 262, 480, 272, C_YELLOW);
 8000638:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8000642:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8000646:	f44f 7183 	mov.w	r1, #262	; 0x106
 800064a:	f44f 70eb 	mov.w	r0, #470	; 0x1d6
 800064e:	f000 fe89 	bl	8001364 <UG_FillFrame>
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <Display_DriveTemplate>:
    // setup textbox configs

}

void Display_DriveTemplate()
{
 8000658:	b5b0      	push	{r4, r5, r7, lr}
 800065a:	af00      	add	r7, sp, #0
    debug_mode = false;
 800065c:	4b36      	ldr	r3, [pc, #216]	; (8000738 <Display_DriveTemplate+0xe0>)
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]

    // clear screen
    UG_FillScreen(C_BLACK);
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fe5c 	bl	8001320 <UG_FillScreen>

    // draw labels
    UG_PutString(68, 10, "PACK SOC");
 8000668:	4a34      	ldr	r2, [pc, #208]	; (800073c <Display_DriveTemplate+0xe4>)
 800066a:	210a      	movs	r1, #10
 800066c:	2044      	movs	r0, #68	; 0x44
 800066e:	f000 fee9 	bl	8001444 <UG_PutString>
    UG_PutString(297, 10, "MAX PACK T");
 8000672:	4a33      	ldr	r2, [pc, #204]	; (8000740 <Display_DriveTemplate+0xe8>)
 8000674:	210a      	movs	r1, #10
 8000676:	f240 1029 	movw	r0, #297	; 0x129
 800067a:	f000 fee3 	bl	8001444 <UG_PutString>
    UG_PutString(5, 180, "STATE:");
 800067e:	4a31      	ldr	r2, [pc, #196]	; (8000744 <Display_DriveTemplate+0xec>)
 8000680:	21b4      	movs	r1, #180	; 0xb4
 8000682:	2005      	movs	r0, #5
 8000684:	f000 fede 	bl	8001444 <UG_PutString>
    UG_PutString(275, 180, "GLV V:");
 8000688:	4a2f      	ldr	r2, [pc, #188]	; (8000748 <Display_DriveTemplate+0xf0>)
 800068a:	21b4      	movs	r1, #180	; 0xb4
 800068c:	f240 1013 	movw	r0, #275	; 0x113
 8000690:	f000 fed8 	bl	8001444 <UG_PutString>

    // setup textbox configs
    soc_box.box_x1 = 30;
 8000694:	4b2d      	ldr	r3, [pc, #180]	; (800074c <Display_DriveTemplate+0xf4>)
 8000696:	221e      	movs	r2, #30
 8000698:	801a      	strh	r2, [r3, #0]
    soc_box.box_y1 = 35;
 800069a:	4b2c      	ldr	r3, [pc, #176]	; (800074c <Display_DriveTemplate+0xf4>)
 800069c:	2223      	movs	r2, #35	; 0x23
 800069e:	805a      	strh	r2, [r3, #2]
    soc_box.box_x2 = 210;
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <Display_DriveTemplate+0xf4>)
 80006a2:	22d2      	movs	r2, #210	; 0xd2
 80006a4:	809a      	strh	r2, [r3, #4]
    soc_box.box_y2 = 170;
 80006a6:	4b29      	ldr	r3, [pc, #164]	; (800074c <Display_DriveTemplate+0xf4>)
 80006a8:	22aa      	movs	r2, #170	; 0xaa
 80006aa:	80da      	strh	r2, [r3, #6]
    soc_box.font = FONT_32X53;
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <Display_DriveTemplate+0xf4>)
 80006ae:	4a28      	ldr	r2, [pc, #160]	; (8000750 <Display_DriveTemplate+0xf8>)
 80006b0:	f103 0410 	add.w	r4, r3, #16
 80006b4:	4615      	mov	r5, r2
 80006b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ba:	682b      	ldr	r3, [r5, #0]
 80006bc:	6023      	str	r3, [r4, #0]
    soc_box.last_color = C_BLACK;  // force box redraw
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <Display_DriveTemplate+0xf4>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	849a      	strh	r2, [r3, #36]	; 0x24
    soc_box.last_value = 255;
 80006c4:	4b21      	ldr	r3, [pc, #132]	; (800074c <Display_DriveTemplate+0xf4>)
 80006c6:	22ff      	movs	r2, #255	; 0xff
 80006c8:	84da      	strh	r2, [r3, #38]	; 0x26

    bms_temp_box.box_x1 = 270;
 80006ca:	4b22      	ldr	r3, [pc, #136]	; (8000754 <Display_DriveTemplate+0xfc>)
 80006cc:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80006d0:	801a      	strh	r2, [r3, #0]
	bms_temp_box.box_y1 = 35;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <Display_DriveTemplate+0xfc>)
 80006d4:	2223      	movs	r2, #35	; 0x23
 80006d6:	805a      	strh	r2, [r3, #2]
	bms_temp_box.box_x2 = 450;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <Display_DriveTemplate+0xfc>)
 80006da:	f44f 72e1 	mov.w	r2, #450	; 0x1c2
 80006de:	809a      	strh	r2, [r3, #4]
	bms_temp_box.box_y2 = 170;
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <Display_DriveTemplate+0xfc>)
 80006e2:	22aa      	movs	r2, #170	; 0xaa
 80006e4:	80da      	strh	r2, [r3, #6]
	bms_temp_box.font = FONT_32X53;
 80006e6:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <Display_DriveTemplate+0xfc>)
 80006e8:	4a19      	ldr	r2, [pc, #100]	; (8000750 <Display_DriveTemplate+0xf8>)
 80006ea:	f103 0410 	add.w	r4, r3, #16
 80006ee:	4615      	mov	r5, r2
 80006f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f4:	682b      	ldr	r3, [r5, #0]
 80006f6:	6023      	str	r3, [r4, #0]
	bms_temp_box.last_color = C_BLACK;  // force box redraw
 80006f8:	4b16      	ldr	r3, [pc, #88]	; (8000754 <Display_DriveTemplate+0xfc>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	849a      	strh	r2, [r3, #36]	; 0x24
	bms_temp_box.last_value = 255;
 80006fe:	4b15      	ldr	r3, [pc, #84]	; (8000754 <Display_DriveTemplate+0xfc>)
 8000700:	22ff      	movs	r2, #255	; 0xff
 8000702:	84da      	strh	r2, [r3, #38]	; 0x26

	state_box.box_x1 = 20;
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <Display_DriveTemplate+0x100>)
 8000706:	2214      	movs	r2, #20
 8000708:	801a      	strh	r2, [r3, #0]
	state_box.box_y1 = 200;
 800070a:	4b13      	ldr	r3, [pc, #76]	; (8000758 <Display_DriveTemplate+0x100>)
 800070c:	22c8      	movs	r2, #200	; 0xc8
 800070e:	805a      	strh	r2, [r3, #2]
	state_box.box_x2 = 200;
 8000710:	4b11      	ldr	r3, [pc, #68]	; (8000758 <Display_DriveTemplate+0x100>)
 8000712:	22c8      	movs	r2, #200	; 0xc8
 8000714:	809a      	strh	r2, [r3, #4]
	state_box.box_y2 = 230;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <Display_DriveTemplate+0x100>)
 8000718:	22e6      	movs	r2, #230	; 0xe6
 800071a:	80da      	strh	r2, [r3, #6]
	state_box.font = FONT_12X16;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <Display_DriveTemplate+0x100>)
 800071e:	4a0f      	ldr	r2, [pc, #60]	; (800075c <Display_DriveTemplate+0x104>)
 8000720:	f103 0410 	add.w	r4, r3, #16
 8000724:	4615      	mov	r5, r2
 8000726:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000728:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800072a:	682b      	ldr	r3, [r5, #0]
 800072c:	6023      	str	r3, [r4, #0]
	state_box.last_color = C_BLACK;  // force box redraw
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <Display_DriveTemplate+0x100>)
 8000730:	2200      	movs	r2, #0
 8000732:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8000734:	bf00      	nop
 8000736:	bdb0      	pop	{r4, r5, r7, pc}
 8000738:	20000100 	.word	0x20000100
 800073c:	08003eac 	.word	0x08003eac
 8000740:	08003eb8 	.word	0x08003eb8
 8000744:	08003e70 	.word	0x08003e70
 8000748:	08003e80 	.word	0x08003e80
 800074c:	20000000 	.word	0x20000000
 8000750:	080133f8 	.word	0x080133f8
 8000754:	2000002c 	.word	0x2000002c
 8000758:	200000d4 	.word	0x200000d4
 800075c:	080133e4 	.word	0x080133e4

08000760 <Display_Update>:

void Display_Update()
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	static uint8_t soc = 0;
	soc = soc+1 ;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <Display_Update+0x38>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <Display_Update+0x38>)
 800076e:	701a      	strb	r2, [r3, #0]

    draw_soc(soc);
 8000770:	4b09      	ldr	r3, [pc, #36]	; (8000798 <Display_Update+0x38>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	b29b      	uxth	r3, r3
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f810 	bl	800079c <draw_soc>
    draw_bms_temp(soc);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <Display_Update+0x38>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	b29b      	uxth	r3, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f81a 	bl	80007bc <draw_bms_temp>
    draw_state(soc, 0);
 8000788:	4b03      	ldr	r3, [pc, #12]	; (8000798 <Display_Update+0x38>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2100      	movs	r1, #0
 800078e:	4618      	mov	r0, r3
 8000790:	f000 f824 	bl	80007dc <draw_state>
}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000188 	.word	0x20000188

0800079c <draw_soc>:



void draw_soc(uint16_t soc)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&soc_box, soc);
 80007a6:	88fb      	ldrh	r3, [r7, #6]
 80007a8:	4619      	mov	r1, r3
 80007aa:	4803      	ldr	r0, [pc, #12]	; (80007b8 <draw_soc+0x1c>)
 80007ac:	f000 fa0a 	bl	8000bc4 <draw_value_textbox>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000

080007bc <draw_bms_temp>:

void draw_bms_temp(uint16_t temp)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	80fb      	strh	r3, [r7, #6]
	draw_value_textbox(&bms_temp_box, temp);
 80007c6:	88fb      	ldrh	r3, [r7, #6]
 80007c8:	4619      	mov	r1, r3
 80007ca:	4803      	ldr	r0, [pc, #12]	; (80007d8 <draw_bms_temp+0x1c>)
 80007cc:	f000 f9fa 	bl	8000bc4 <draw_value_textbox>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	2000002c 	.word	0x2000002c

080007dc <draw_state>:

void draw_state(uint8_t state, uint16_t bms_status)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	460a      	mov	r2, r1
 80007e6:	71fb      	strb	r3, [r7, #7]
 80007e8:	4613      	mov	r3, r2
 80007ea:	80bb      	strh	r3, [r7, #4]
    static uint8_t last_state = 255;
    static uint16_t last_bms_status;

    if((state == last_state) && (bms_status == last_bms_status))  // skip function if value is the same
 80007ec:	4ba6      	ldr	r3, [pc, #664]	; (8000a88 <draw_state+0x2ac>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	79fa      	ldrb	r2, [r7, #7]
 80007f2:	429a      	cmp	r2, r3
 80007f4:	d105      	bne.n	8000802 <draw_state+0x26>
 80007f6:	4ba5      	ldr	r3, [pc, #660]	; (8000a8c <draw_state+0x2b0>)
 80007f8:	881b      	ldrh	r3, [r3, #0]
 80007fa:	88ba      	ldrh	r2, [r7, #4]
 80007fc:	429a      	cmp	r2, r3
 80007fe:	f000 8195 	beq.w	8000b2c <draw_state+0x350>
    }

    UG_COLOR color;
    char string[15];

    switch(bms_status)  // BMS faults more important than VCU faults
 8000802:	88bb      	ldrh	r3, [r7, #4]
 8000804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000808:	d052      	beq.n	80008b0 <draw_state+0xd4>
 800080a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800080e:	dc59      	bgt.n	80008c4 <draw_state+0xe8>
 8000810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000814:	d03f      	beq.n	8000896 <draw_state+0xba>
 8000816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800081a:	dc53      	bgt.n	80008c4 <draw_state+0xe8>
 800081c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000820:	d02f      	beq.n	8000882 <draw_state+0xa6>
 8000822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000826:	dc4d      	bgt.n	80008c4 <draw_state+0xe8>
 8000828:	2b40      	cmp	r3, #64	; 0x40
 800082a:	d020      	beq.n	800086e <draw_state+0x92>
 800082c:	2b40      	cmp	r3, #64	; 0x40
 800082e:	dc49      	bgt.n	80008c4 <draw_state+0xe8>
 8000830:	2b10      	cmp	r3, #16
 8000832:	d012      	beq.n	800085a <draw_state+0x7e>
 8000834:	2b10      	cmp	r3, #16
 8000836:	dc45      	bgt.n	80008c4 <draw_state+0xe8>
 8000838:	2b02      	cmp	r3, #2
 800083a:	d001      	beq.n	8000840 <draw_state+0x64>
 800083c:	2b08      	cmp	r3, #8
 800083e:	d141      	bne.n	80008c4 <draw_state+0xe8>
    {
        case PACK_TEMP_OVER:
        case PACK_TEMP_UNDER:
            color = C_RED;
 8000840:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000844:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " BMS TEMP ");
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	4a91      	ldr	r2, [pc, #580]	; (8000a90 <draw_state+0x2b4>)
 800084c:	ca07      	ldmia	r2, {r0, r1, r2}
 800084e:	c303      	stmia	r3!, {r0, r1}
 8000850:	801a      	strh	r2, [r3, #0]
 8000852:	3302      	adds	r3, #2
 8000854:	0c12      	lsrs	r2, r2, #16
 8000856:	701a      	strb	r2, [r3, #0]
            break;
 8000858:	e160      	b.n	8000b1c <draw_state+0x340>
        case LOW_SOC:
            color = C_RED;
 800085a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800085e:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " LOW SOC ");
 8000860:	f107 030c 	add.w	r3, r7, #12
 8000864:	4a8b      	ldr	r2, [pc, #556]	; (8000a94 <draw_state+0x2b8>)
 8000866:	ca07      	ldmia	r2, {r0, r1, r2}
 8000868:	c303      	stmia	r3!, {r0, r1}
 800086a:	801a      	strh	r2, [r3, #0]
            break;
 800086c:	e156      	b.n	8000b1c <draw_state+0x340>
        case IMBALANCE:
            color = C_RED;
 800086e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000872:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "IMBALANCE");
 8000874:	f107 030c 	add.w	r3, r7, #12
 8000878:	4a87      	ldr	r2, [pc, #540]	; (8000a98 <draw_state+0x2bc>)
 800087a:	ca07      	ldmia	r2, {r0, r1, r2}
 800087c:	c303      	stmia	r3!, {r0, r1}
 800087e:	801a      	strh	r2, [r3, #0]
            break;
 8000880:	e14c      	b.n	8000b1c <draw_state+0x340>
        case SPI_FAULT:
            color = C_RED;
 8000882:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000886:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "SPI FAULT");
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4a83      	ldr	r2, [pc, #524]	; (8000a9c <draw_state+0x2c0>)
 800088e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000890:	c303      	stmia	r3!, {r0, r1}
 8000892:	801a      	strh	r2, [r3, #0]
            break;
 8000894:	e142      	b.n	8000b1c <draw_state+0x340>
        case CELL_VOLT_OVER:
            color = C_RED;
 8000896:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800089a:	83fb      	strh	r3, [r7, #30]
            strcpy(string, " OVERVOLT ");
 800089c:	f107 030c 	add.w	r3, r7, #12
 80008a0:	4a7f      	ldr	r2, [pc, #508]	; (8000aa0 <draw_state+0x2c4>)
 80008a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80008a4:	c303      	stmia	r3!, {r0, r1}
 80008a6:	801a      	strh	r2, [r3, #0]
 80008a8:	3302      	adds	r3, #2
 80008aa:	0c12      	lsrs	r2, r2, #16
 80008ac:	701a      	strb	r2, [r3, #0]
            break;
 80008ae:	e135      	b.n	8000b1c <draw_state+0x340>
        case CELL_VOLT_UNDER:
            color = C_RED;
 80008b0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80008b4:	83fb      	strh	r3, [r7, #30]
            strcpy(string, "UNDERVOLT");
 80008b6:	f107 030c 	add.w	r3, r7, #12
 80008ba:	4a7a      	ldr	r2, [pc, #488]	; (8000aa4 <draw_state+0x2c8>)
 80008bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80008be:	c303      	stmia	r3!, {r0, r1}
 80008c0:	801a      	strh	r2, [r3, #0]
            break;
 80008c2:	e12b      	b.n	8000b1c <draw_state+0x340>
        default:
            // check fault bit
            if (state & 0x80) {
 80008c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	f280 80b7 	bge.w	8000a3c <draw_state+0x260>
                // *************** FAULTS ***************
                uint8_t fault = state & 0x7f; // mask off fault bit
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008d4:	777b      	strb	r3, [r7, #29]
                switch(fault)
 80008d6:	7f7b      	ldrb	r3, [r7, #29]
 80008d8:	2b0a      	cmp	r3, #10
 80008da:	f200 80a5 	bhi.w	8000a28 <draw_state+0x24c>
 80008de:	a201      	add	r2, pc, #4	; (adr r2, 80008e4 <draw_state+0x108>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000911 	.word	0x08000911
 80008e8:	0800092b 	.word	0x0800092b
 80008ec:	08000945 	.word	0x08000945
 80008f0:	0800095f 	.word	0x0800095f
 80008f4:	08000979 	.word	0x08000979
 80008f8:	08000993 	.word	0x08000993
 80008fc:	080009ad 	.word	0x080009ad
 8000900:	080009c7 	.word	0x080009c7
 8000904:	080009e1 	.word	0x080009e1
 8000908:	080009fb 	.word	0x080009fb
 800090c:	08000a0f 	.word	0x08000a0f
                {
                    case NONE: // STARTUP (effectively)
                        // not obtainable via CAN
                        // would only show when hardcoded on startup
                        color = C_YELLOW;
 8000910:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000914:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " STARTUP  ");
 8000916:	f107 030c 	add.w	r3, r7, #12
 800091a:	4a63      	ldr	r2, [pc, #396]	; (8000aa8 <draw_state+0x2cc>)
 800091c:	ca07      	ldmia	r2, {r0, r1, r2}
 800091e:	c303      	stmia	r3!, {r0, r1}
 8000920:	801a      	strh	r2, [r3, #0]
 8000922:	3302      	adds	r3, #2
 8000924:	0c12      	lsrs	r2, r2, #16
 8000926:	701a      	strb	r2, [r3, #0]
                        break;
 8000928:	e0f8      	b.n	8000b1c <draw_state+0x340>
                    case DRIVE_REQUEST_FROM_LV:
                        color = C_RED;
 800092a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800092e:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "DRV FRM LV");
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4a5d      	ldr	r2, [pc, #372]	; (8000aac <draw_state+0x2d0>)
 8000936:	ca07      	ldmia	r2, {r0, r1, r2}
 8000938:	c303      	stmia	r3!, {r0, r1}
 800093a:	801a      	strh	r2, [r3, #0]
 800093c:	3302      	adds	r3, #2
 800093e:	0c12      	lsrs	r2, r2, #16
 8000940:	701a      	strb	r2, [r3, #0]
                        break;
 8000942:	e0eb      	b.n	8000b1c <draw_state+0x340>
                    case CONSERVATIVE_TIMER_MAXED:
                        color = C_RED;
 8000944:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000948:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "PRE TM OUT");
 800094a:	f107 030c 	add.w	r3, r7, #12
 800094e:	4a58      	ldr	r2, [pc, #352]	; (8000ab0 <draw_state+0x2d4>)
 8000950:	ca07      	ldmia	r2, {r0, r1, r2}
 8000952:	c303      	stmia	r3!, {r0, r1}
 8000954:	801a      	strh	r2, [r3, #0]
 8000956:	3302      	adds	r3, #2
 8000958:	0c12      	lsrs	r2, r2, #16
 800095a:	701a      	strb	r2, [r3, #0]
                        break;
 800095c:	e0de      	b.n	8000b1c <draw_state+0x340>
                    case BRAKE_NOT_PRESSED:
                        color = C_RED;
 800095e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000962:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BR NOT PRS");
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	4a52      	ldr	r2, [pc, #328]	; (8000ab4 <draw_state+0x2d8>)
 800096a:	ca07      	ldmia	r2, {r0, r1, r2}
 800096c:	c303      	stmia	r3!, {r0, r1}
 800096e:	801a      	strh	r2, [r3, #0]
 8000970:	3302      	adds	r3, #2
 8000972:	0c12      	lsrs	r2, r2, #16
 8000974:	701a      	strb	r2, [r3, #0]
                        break;
 8000976:	e0d1      	b.n	8000b1c <draw_state+0x340>
                    case HV_DISABLED_WHILE_DRIVING:
                        color = C_RED;
 8000978:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800097c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HV OFF DRV");
 800097e:	f107 030c 	add.w	r3, r7, #12
 8000982:	4a4d      	ldr	r2, [pc, #308]	; (8000ab8 <draw_state+0x2dc>)
 8000984:	ca07      	ldmia	r2, {r0, r1, r2}
 8000986:	c303      	stmia	r3!, {r0, r1}
 8000988:	801a      	strh	r2, [r3, #0]
 800098a:	3302      	adds	r3, #2
 800098c:	0c12      	lsrs	r2, r2, #16
 800098e:	701a      	strb	r2, [r3, #0]
                        break;
 8000990:	e0c4      	b.n	8000b1c <draw_state+0x340>
                    case SENSOR_DISCREPANCY:
                        color = C_RED;
 8000992:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000996:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SNSR DSCRP");
 8000998:	f107 030c 	add.w	r3, r7, #12
 800099c:	4a47      	ldr	r2, [pc, #284]	; (8000abc <draw_state+0x2e0>)
 800099e:	ca07      	ldmia	r2, {r0, r1, r2}
 80009a0:	c303      	stmia	r3!, {r0, r1}
 80009a2:	801a      	strh	r2, [r3, #0]
 80009a4:	3302      	adds	r3, #2
 80009a6:	0c12      	lsrs	r2, r2, #16
 80009a8:	701a      	strb	r2, [r3, #0]
                        break;
 80009aa:	e0b7      	b.n	8000b1c <draw_state+0x340>
                    case BRAKE_IMPLAUSIBLE:
                        color = C_YELLOW;
 80009ac:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 80009b0:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "BSPD TRIPD");
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4a42      	ldr	r2, [pc, #264]	; (8000ac0 <draw_state+0x2e4>)
 80009b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ba:	c303      	stmia	r3!, {r0, r1}
 80009bc:	801a      	strh	r2, [r3, #0]
 80009be:	3302      	adds	r3, #2
 80009c0:	0c12      	lsrs	r2, r2, #16
 80009c2:	701a      	strb	r2, [r3, #0]
                        break;
 80009c4:	e0aa      	b.n	8000b1c <draw_state+0x340>
                    case SHUTDOWN_CIRCUIT_OPEN:
                        color = C_RED;
 80009c6:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009ca:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "SHTDWN OPN");
 80009cc:	f107 030c 	add.w	r3, r7, #12
 80009d0:	4a3c      	ldr	r2, [pc, #240]	; (8000ac4 <draw_state+0x2e8>)
 80009d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80009d4:	c303      	stmia	r3!, {r0, r1}
 80009d6:	801a      	strh	r2, [r3, #0]
 80009d8:	3302      	adds	r3, #2
 80009da:	0c12      	lsrs	r2, r2, #16
 80009dc:	701a      	strb	r2, [r3, #0]
                        break;
 80009de:	e09d      	b.n	8000b1c <draw_state+0x340>
                    case UNCALIBRATED:
                        color = C_RED;
 80009e0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009e4:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "UNCALIBRTD");
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4a37      	ldr	r2, [pc, #220]	; (8000ac8 <draw_state+0x2ec>)
 80009ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ee:	c303      	stmia	r3!, {r0, r1}
 80009f0:	801a      	strh	r2, [r3, #0]
 80009f2:	3302      	adds	r3, #2
 80009f4:	0c12      	lsrs	r2, r2, #16
 80009f6:	701a      	strb	r2, [r3, #0]
                        break;
 80009f8:	e090      	b.n	8000b1c <draw_state+0x340>
                    case HARD_BSPD:
                        color = C_RED;
 80009fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80009fe:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, "HARD BSPD");
 8000a00:	f107 030c 	add.w	r3, r7, #12
 8000a04:	4a31      	ldr	r2, [pc, #196]	; (8000acc <draw_state+0x2f0>)
 8000a06:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a08:	c303      	stmia	r3!, {r0, r1}
 8000a0a:	801a      	strh	r2, [r3, #0]
                        break;
 8000a0c:	e086      	b.n	8000b1c <draw_state+0x340>
                    case MC_FAULT:
                        color = C_RED;
 8000a0e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a12:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " MC FAULT ");
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	4a2d      	ldr	r2, [pc, #180]	; (8000ad0 <draw_state+0x2f4>)
 8000a1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a1c:	c303      	stmia	r3!, {r0, r1}
 8000a1e:	801a      	strh	r2, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	0c12      	lsrs	r2, r2, #16
 8000a24:	701a      	strb	r2, [r3, #0]
                        break;
 8000a26:	e079      	b.n	8000b1c <draw_state+0x340>
                    default:
                        color = C_RED;
 8000a28:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000a2c:	83fb      	strh	r3, [r7, #30]
                        strcpy(string, " YO WTF? ");
 8000a2e:	f107 030c 	add.w	r3, r7, #12
 8000a32:	4a28      	ldr	r2, [pc, #160]	; (8000ad4 <draw_state+0x2f8>)
 8000a34:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a36:	c303      	stmia	r3!, {r0, r1}
 8000a38:	801a      	strh	r2, [r3, #0]
                        break;
 8000a3a:	e06f      	b.n	8000b1c <draw_state+0x340>
                }
            }
            else
            {
                // *************** NO FAULTS ***************
                color = C_GREEN;
 8000a3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000a40:	83fb      	strh	r3, [r7, #30]
                switch(state)
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d85f      	bhi.n	8000b08 <draw_state+0x32c>
 8000a48:	a201      	add	r2, pc, #4	; (adr r2, 8000a50 <draw_state+0x274>)
 8000a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000a61 	.word	0x08000a61
 8000a54:	08000a75 	.word	0x08000a75
 8000a58:	08000ae1 	.word	0x08000ae1
 8000a5c:	08000af5 	.word	0x08000af5
                {
                    case LV:
                        strcpy(string, "    LV    ");
 8000a60:	f107 030c 	add.w	r3, r7, #12
 8000a64:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <draw_state+0x2fc>)
 8000a66:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a68:	c303      	stmia	r3!, {r0, r1}
 8000a6a:	801a      	strh	r2, [r3, #0]
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	0c12      	lsrs	r2, r2, #16
 8000a70:	701a      	strb	r2, [r3, #0]
                        break;
 8000a72:	e053      	b.n	8000b1c <draw_state+0x340>
                    case PRECHARGING:
                        strcpy(string, "PRECHARGE ");
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4a18      	ldr	r2, [pc, #96]	; (8000adc <draw_state+0x300>)
 8000a7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a7c:	c303      	stmia	r3!, {r0, r1}
 8000a7e:	801a      	strh	r2, [r3, #0]
 8000a80:	3302      	adds	r3, #2
 8000a82:	0c12      	lsrs	r2, r2, #16
 8000a84:	701a      	strb	r2, [r3, #0]
                        break;
 8000a86:	e049      	b.n	8000b1c <draw_state+0x340>
 8000a88:	20000058 	.word	0x20000058
 8000a8c:	2000018a 	.word	0x2000018a
 8000a90:	08003ec4 	.word	0x08003ec4
 8000a94:	08003ed0 	.word	0x08003ed0
 8000a98:	08003edc 	.word	0x08003edc
 8000a9c:	08003ee8 	.word	0x08003ee8
 8000aa0:	08003ef4 	.word	0x08003ef4
 8000aa4:	08003f00 	.word	0x08003f00
 8000aa8:	08003f0c 	.word	0x08003f0c
 8000aac:	08003f18 	.word	0x08003f18
 8000ab0:	08003f24 	.word	0x08003f24
 8000ab4:	08003f30 	.word	0x08003f30
 8000ab8:	08003f3c 	.word	0x08003f3c
 8000abc:	08003f48 	.word	0x08003f48
 8000ac0:	08003f54 	.word	0x08003f54
 8000ac4:	08003f60 	.word	0x08003f60
 8000ac8:	08003f6c 	.word	0x08003f6c
 8000acc:	08003f78 	.word	0x08003f78
 8000ad0:	08003f84 	.word	0x08003f84
 8000ad4:	08003f90 	.word	0x08003f90
 8000ad8:	08003f9c 	.word	0x08003f9c
 8000adc:	08003fa8 	.word	0x08003fa8
                    case HV_ENABLED:
                        strcpy(string, "HV ENABLED");
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4a13      	ldr	r2, [pc, #76]	; (8000b34 <draw_state+0x358>)
 8000ae6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ae8:	c303      	stmia	r3!, {r0, r1}
 8000aea:	801a      	strh	r2, [r3, #0]
 8000aec:	3302      	adds	r3, #2
 8000aee:	0c12      	lsrs	r2, r2, #16
 8000af0:	701a      	strb	r2, [r3, #0]
                        break;
 8000af2:	e013      	b.n	8000b1c <draw_state+0x340>
                    case DRIVE:
                        strcpy(string, "  DRIVE   ");
 8000af4:	f107 030c 	add.w	r3, r7, #12
 8000af8:	4a0f      	ldr	r2, [pc, #60]	; (8000b38 <draw_state+0x35c>)
 8000afa:	ca07      	ldmia	r2, {r0, r1, r2}
 8000afc:	c303      	stmia	r3!, {r0, r1}
 8000afe:	801a      	strh	r2, [r3, #0]
 8000b00:	3302      	adds	r3, #2
 8000b02:	0c12      	lsrs	r2, r2, #16
 8000b04:	701a      	strb	r2, [r3, #0]
                        break;
 8000b06:	e009      	b.n	8000b1c <draw_state+0x340>
                    default:
						color = C_RED;
 8000b08:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b0c:	83fb      	strh	r3, [r7, #30]
						strcpy(string, " YO WTF? ");
 8000b0e:	f107 030c 	add.w	r3, r7, #12
 8000b12:	4a0a      	ldr	r2, [pc, #40]	; (8000b3c <draw_state+0x360>)
 8000b14:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b16:	c303      	stmia	r3!, {r0, r1}
 8000b18:	801a      	strh	r2, [r3, #0]
						break;
 8000b1a:	bf00      	nop
                }
            }
    }

    draw_textbox(&state_box, color, string, 11);
 8000b1c:	f107 020c 	add.w	r2, r7, #12
 8000b20:	8bf9      	ldrh	r1, [r7, #30]
 8000b22:	230b      	movs	r3, #11
 8000b24:	4806      	ldr	r0, [pc, #24]	; (8000b40 <draw_state+0x364>)
 8000b26:	f000 f887 	bl	8000c38 <draw_textbox>
 8000b2a:	e000      	b.n	8000b2e <draw_state+0x352>
        return;
 8000b2c:	bf00      	nop
}
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	08003fb4 	.word	0x08003fb4
 8000b38:	08003fc0 	.word	0x08003fc0
 8000b3c:	08003f90 	.word	0x08003f90
 8000b40:	200000d4 	.word	0x200000d4

08000b44 <value_to_color>:




UG_COLOR value_to_color(TEXTBOX_CONFIG cfg, uint16_t value)
{
 8000b44:	b084      	sub	sp, #16
 8000b46:	b490      	push	{r4, r7}
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	f107 0408 	add.w	r4, r7, #8
 8000b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    if(cfg.grn_ylw_cutoff > cfg.ylw_org_cutoff)   // green for large red for small
 8000b52:	8a3a      	ldrh	r2, [r7, #16]
 8000b54:	8a7b      	ldrh	r3, [r7, #18]
 8000b56:	429a      	cmp	r2, r3
 8000b58:	d917      	bls.n	8000b8a <value_to_color+0x46>
    {
        if(value > cfg.grn_ylw_cutoff)
 8000b5a:	8a3b      	ldrh	r3, [r7, #16]
 8000b5c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b5e:	429a      	cmp	r2, r3
 8000b60:	d902      	bls.n	8000b68 <value_to_color+0x24>
        {
            return C_GREEN;
 8000b62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000b66:	e027      	b.n	8000bb8 <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 8000b68:	8a7b      	ldrh	r3, [r7, #18]
 8000b6a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d902      	bls.n	8000b76 <value_to_color+0x32>
        {
            return C_YELLOW;
 8000b70:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000b74:	e020      	b.n	8000bb8 <value_to_color+0x74>
        }
        else if(value > cfg.org_red_cutoff)
 8000b76:	8abb      	ldrh	r3, [r7, #20]
 8000b78:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d902      	bls.n	8000b84 <value_to_color+0x40>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8000b7e:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8000b82:	e019      	b.n	8000bb8 <value_to_color+0x74>
        }
        else
        {
            return C_RED;
 8000b84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b88:	e016      	b.n	8000bb8 <value_to_color+0x74>
        }
    }
    else  // red for large green for small
    {
        if(value > cfg.org_red_cutoff)
 8000b8a:	8abb      	ldrh	r3, [r7, #20]
 8000b8c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d902      	bls.n	8000b98 <value_to_color+0x54>
        {
            return C_RED;
 8000b92:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000b96:	e00f      	b.n	8000bb8 <value_to_color+0x74>
        }
        else if(value > cfg.ylw_org_cutoff)
 8000b98:	8a7b      	ldrh	r3, [r7, #18]
 8000b9a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d902      	bls.n	8000ba6 <value_to_color+0x62>
        {
            return C_ORANGE_RED;  // normal orange looks yellow
 8000ba0:	f64f 43a0 	movw	r3, #64672	; 0xfca0
 8000ba4:	e008      	b.n	8000bb8 <value_to_color+0x74>
        }
        else if(value > cfg.grn_ylw_cutoff)
 8000ba6:	8a3b      	ldrh	r3, [r7, #16]
 8000ba8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d902      	bls.n	8000bb4 <value_to_color+0x70>
        {
            return C_YELLOW;
 8000bae:	f64f 73c0 	movw	r3, #65472	; 0xffc0
 8000bb2:	e001      	b.n	8000bb8 <value_to_color+0x74>
        }
        else
        {
            return C_GREEN;
 8000bb4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
        }
    }
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc90      	pop	{r4, r7}
 8000bbe:	b004      	add	sp, #16
 8000bc0:	4770      	bx	lr
	...

08000bc4 <draw_value_textbox>:

void draw_value_textbox(TEXTBOX_CONFIG* cfg, uint16_t value)
{
 8000bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bc6:	b08f      	sub	sp, #60	; 0x3c
 8000bc8:	af08      	add	r7, sp, #32
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	807b      	strh	r3, [r7, #2]
	if(value == cfg->last_value)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8000bd4:	887a      	ldrh	r2, [r7, #2]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d028      	beq.n	8000c2c <draw_value_textbox+0x68>
	{
		return;
	}

	cfg->last_value = value;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	887a      	ldrh	r2, [r7, #2]
 8000bde:	84da      	strh	r2, [r3, #38]	; 0x26

	UG_COLOR color = value_to_color(*cfg, value);
 8000be0:	687e      	ldr	r6, [r7, #4]
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	9307      	str	r3, [sp, #28]
 8000be6:	466d      	mov	r5, sp
 8000be8:	f106 0410 	add.w	r4, r6, #16
 8000bec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000bee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bf0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000bf4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000bf8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000bfc:	f7ff ffa2 	bl	8000b44 <value_to_color>
 8000c00:	4603      	mov	r3, r0
 8000c02:	82fb      	strh	r3, [r7, #22]
	char string[10];
	uint16_t str_len = sprintf(string, "%d%c", value, cfg->units);
 8000c04:	887a      	ldrh	r2, [r7, #2]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000c0c:	f107 0008 	add.w	r0, r7, #8
 8000c10:	4908      	ldr	r1, [pc, #32]	; (8000c34 <draw_value_textbox+0x70>)
 8000c12:	f002 fc71 	bl	80034f8 <siprintf>
 8000c16:	4603      	mov	r3, r0
 8000c18:	82bb      	strh	r3, [r7, #20]

	draw_textbox(cfg, color, string, str_len);
 8000c1a:	8abb      	ldrh	r3, [r7, #20]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	f107 0208 	add.w	r2, r7, #8
 8000c22:	8af9      	ldrh	r1, [r7, #22]
 8000c24:	6878      	ldr	r0, [r7, #4]
 8000c26:	f000 f807 	bl	8000c38 <draw_textbox>
 8000c2a:	e000      	b.n	8000c2e <draw_value_textbox+0x6a>
		return;
 8000c2c:	bf00      	nop
}
 8000c2e:	371c      	adds	r7, #28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c34:	08003fcc 	.word	0x08003fcc

08000c38 <draw_textbox>:

void draw_textbox(TEXTBOX_CONFIG* cfg, UG_COLOR color, char* string, uint8_t str_len)
{
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b089      	sub	sp, #36	; 0x24
 8000c3c:	af02      	add	r7, sp, #8
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	607a      	str	r2, [r7, #4]
 8000c42:	461a      	mov	r2, r3
 8000c44:	460b      	mov	r3, r1
 8000c46:	817b      	strh	r3, [r7, #10]
 8000c48:	4613      	mov	r3, r2
 8000c4a:	727b      	strb	r3, [r7, #9]
    // determine x and y coordinates to center text
    uint16_t text_x = (cfg->box_x2 + cfg->box_x1)/2 - ((str_len * cfg->font.char_width)/2);
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	889b      	ldrh	r3, [r3, #4]
 8000c50:	461a      	mov	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	da00      	bge.n	8000c5e <draw_textbox+0x26>
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	105b      	asrs	r3, r3, #1
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	7a7b      	ldrb	r3, [r7, #9]
 8000c64:	68f9      	ldr	r1, [r7, #12]
 8000c66:	f9b1 1016 	ldrsh.w	r1, [r1, #22]
 8000c6a:	fb01 f303 	mul.w	r3, r1, r3
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	da00      	bge.n	8000c74 <draw_textbox+0x3c>
 8000c72:	3301      	adds	r3, #1
 8000c74:	105b      	asrs	r3, r3, #1
 8000c76:	425b      	negs	r3, r3
 8000c78:	b29b      	uxth	r3, r3
 8000c7a:	4413      	add	r3, r2
 8000c7c:	82fb      	strh	r3, [r7, #22]
    uint16_t text_y = (cfg->box_y2 + cfg->box_y1)/2 - (cfg->font.char_height/2);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	88db      	ldrh	r3, [r3, #6]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	885b      	ldrh	r3, [r3, #2]
 8000c88:	4413      	add	r3, r2
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	da00      	bge.n	8000c90 <draw_textbox+0x58>
 8000c8e:	3301      	adds	r3, #1
 8000c90:	105b      	asrs	r3, r3, #1
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	da00      	bge.n	8000ca0 <draw_textbox+0x68>
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	105b      	asrs	r3, r3, #1
 8000ca2:	b21b      	sxth	r3, r3
 8000ca4:	b29b      	uxth	r3, r3
 8000ca6:	1ad3      	subs	r3, r2, r3
 8000ca8:	82bb      	strh	r3, [r7, #20]

    if(color != cfg->last_color)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000cae:	897a      	ldrh	r2, [r7, #10]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	d016      	beq.n	8000ce2 <draw_textbox+0xaa>
    {
    	color = C_WHITE;
 8000cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb8:	817b      	strh	r3, [r7, #10]
        UG_FillFrame(cfg->box_x1, cfg->box_y1, cfg->box_x2, cfg->box_y2, color);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	b218      	sxth	r0, r3
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	885b      	ldrh	r3, [r3, #2]
 8000cc4:	b219      	sxth	r1, r3
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	889b      	ldrh	r3, [r3, #4]
 8000cca:	b21a      	sxth	r2, r3
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	88db      	ldrh	r3, [r3, #6]
 8000cd0:	b21c      	sxth	r4, r3
 8000cd2:	897b      	ldrh	r3, [r7, #10]
 8000cd4:	9300      	str	r3, [sp, #0]
 8000cd6:	4623      	mov	r3, r4
 8000cd8:	f000 fb44 	bl	8001364 <UG_FillFrame>
        cfg->last_color = color;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	897a      	ldrh	r2, [r7, #10]
 8000ce0:	849a      	strh	r2, [r3, #36]	; 0x24
    }

    UG_FontSelect(&cfg->font);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	3310      	adds	r3, #16
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f000 fb04 	bl	80012f4 <UG_FontSelect>
    UG_PutColorString(text_x, text_y, string, C_BLACK, color);
 8000cec:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8000cf0:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8000cf4:	897b      	ldrh	r3, [r7, #10]
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	f000 fc28 	bl	8001550 <UG_PutColorString>
}
 8000d00:	bf00      	nop
 8000d02:	371c      	adds	r7, #28
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd90      	pop	{r4, r7, pc}

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f001 fa9d 	bl	800224a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f822 	bl	8000d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 f8f0 	bl	8000ef8 <MX_GPIO_Init>
  MX_FMC_Init();
 8000d18:	f000 f88c 	bl	8000e34 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */

  Display_Init();
 8000d1c:	f7ff fc46 	bl	80005ac <Display_Init>

  UG_FontSelect(&FONT_12X16);
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <main+0x4c>)
 8000d22:	f000 fae7 	bl	80012f4 <UG_FontSelect>
	UG_SetBackcolor(C_BLACK);
 8000d26:	2000      	movs	r0, #0
 8000d28:	f000 fccc 	bl	80016c4 <UG_SetBackcolor>
	UG_SetForecolor(C_WHITE);
 8000d2c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d30:	f000 fcb6 	bl	80016a0 <UG_SetForecolor>

	Display_CalibrateScreen();
 8000d34:	f7ff fc64 	bl	8000600 <Display_CalibrateScreen>
	HAL_Delay(5000);
 8000d38:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d3c:	f001 fae2 	bl	8002304 <HAL_Delay>
//	  LED_color_wheel(200);
//
//	ADC_GLV_V_Start();
//
	  // initialize display layout
	  Display_DriveTemplate(FAULT, 0); // effectively STARTUP
 8000d40:	2100      	movs	r1, #0
 8000d42:	2080      	movs	r0, #128	; 0x80
 8000d44:	f7ff fc88 	bl	8000658 <Display_DriveTemplate>
	  Display_Update();
 8000d48:	f7ff fd0a 	bl	8000760 <Display_Update>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Display_Update();
 8000d4c:	f7ff fd08 	bl	8000760 <Display_Update>
 8000d50:	e7fc      	b.n	8000d4c <main+0x44>
 8000d52:	bf00      	nop
 8000d54:	080133e4 	.word	0x080133e4

08000d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b094      	sub	sp, #80	; 0x50
 8000d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d5e:	f107 0320 	add.w	r3, r7, #32
 8000d62:	2230      	movs	r2, #48	; 0x30
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f002 fbe6 	bl	8003538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d6c:	f107 030c 	add.w	r3, r7, #12
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <SystemClock_Config+0xd4>)
 8000d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d80:	4a2a      	ldr	r2, [pc, #168]	; (8000e2c <SystemClock_Config+0xd4>)
 8000d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d86:	6413      	str	r3, [r2, #64]	; 0x40
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <SystemClock_Config+0xd4>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d90:	60bb      	str	r3, [r7, #8]
 8000d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <SystemClock_Config+0xd8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d9c:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <SystemClock_Config+0xd8>)
 8000d9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da2:	6013      	str	r3, [r2, #0]
 8000da4:	4b22      	ldr	r3, [pc, #136]	; (8000e30 <SystemClock_Config+0xd8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000db0:	2301      	movs	r3, #1
 8000db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000db4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dc4:	2308      	movs	r3, #8
 8000dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000dc8:	2364      	movs	r3, #100	; 0x64
 8000dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f107 0320 	add.w	r3, r7, #32
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f001 fd99 	bl	8002910 <HAL_RCC_OscConfig>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000de4:	f000 f8dc 	bl	8000fa0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000de8:	f001 fd42 	bl	8002870 <HAL_PWREx_EnableOverDrive>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000df2:	f000 f8d5 	bl	8000fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df6:	230f      	movs	r3, #15
 8000df8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfa:	2302      	movs	r3, #2
 8000dfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2103      	movs	r1, #3
 8000e14:	4618      	mov	r0, r3
 8000e16:	f002 f81f 	bl	8002e58 <HAL_RCC_ClockConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e20:	f000 f8be 	bl	8000fa0 <Error_Handler>
  }
}
 8000e24:	bf00      	nop
 8000e26:	3750      	adds	r7, #80	; 0x50
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40023800 	.word	0x40023800
 8000e30:	40007000 	.word	0x40007000

08000e34 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b088      	sub	sp, #32
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000e3a:	1d3b      	adds	r3, r7, #4
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	605a      	str	r2, [r3, #4]
 8000e42:	609a      	str	r2, [r3, #8]
 8000e44:	60da      	str	r2, [r3, #12]
 8000e46:	611a      	str	r2, [r3, #16]
 8000e48:	615a      	str	r2, [r3, #20]
 8000e4a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e4e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8000e52:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000e54:	4b26      	ldr	r3, [pc, #152]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e56:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <MX_FMC_Init+0xc0>)
 8000e58:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK2;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000e60:	4b23      	ldr	r3, [pc, #140]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000e66:	4b22      	ldr	r3, [pc, #136]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000e6c:	4b20      	ldr	r3, [pc, #128]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e6e:	2210      	movs	r2, #16
 8000e70:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000e72:	4b1f      	ldr	r3, [pc, #124]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000e78:	4b1d      	ldr	r3, [pc, #116]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000e7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000e84:	4b1a      	ldr	r3, [pc, #104]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e86:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e8a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000e8c:	4b18      	ldr	r3, [pc, #96]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000e92:	4b17      	ldr	r3, [pc, #92]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000e98:	4b15      	ldr	r3, [pc, #84]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8000eba:	230f      	movs	r3, #15
 8000ebc:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8000ebe:	23ff      	movs	r3, #255	; 0xff
 8000ec0:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000ec2:	230f      	movs	r3, #15
 8000ec4:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000ec6:	2310      	movs	r3, #16
 8000ec8:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000eca:	2311      	movs	r3, #17
 8000ecc:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	4805      	ldr	r0, [pc, #20]	; (8000ef0 <MX_FMC_Init+0xbc>)
 8000eda:	f002 f9ad 	bl	8003238 <HAL_SRAM_Init>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_FMC_Init+0xb4>
  {
    Error_Handler( );
 8000ee4:	f000 f85c 	bl	8000fa0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ee8:	bf00      	nop
 8000eea:	3720      	adds	r7, #32
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	2000018c 	.word	0x2000018c
 8000ef4:	a0000104 	.word	0xa0000104

08000ef8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b087      	sub	sp, #28
 8000efc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b24      	ldr	r3, [pc, #144]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f16:	4b21      	ldr	r3, [pc, #132]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a20      	ldr	r2, [pc, #128]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b1e      	ldr	r3, [pc, #120]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0320 	and.w	r3, r3, #32
 8000f2a:	613b      	str	r3, [r7, #16]
 8000f2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f2e:	4b1b      	ldr	r3, [pc, #108]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	4a1a      	ldr	r2, [pc, #104]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f34:	f043 0310 	orr.w	r3, r3, #16
 8000f38:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3a:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3e:	f003 0310 	and.w	r3, r3, #16
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f4c:	f043 0308 	orr.w	r3, r3, #8
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f62:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	6313      	str	r3, [r2, #48]	; 0x30
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a08      	ldr	r2, [pc, #32]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_GPIO_Init+0xa4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8e:	bf00      	nop
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800

08000fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fa4:	b672      	cpsid	i
}
 8000fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <Error_Handler+0x8>
	...

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	4a08      	ldr	r2, [pc, #32]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8000ffa:	1d3b      	adds	r3, r7, #4
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001008:	4b2b      	ldr	r3, [pc, #172]	; (80010b8 <HAL_FMC_MspInit+0xc4>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d14f      	bne.n	80010b0 <HAL_FMC_MspInit+0xbc>
    return;
  }
  FMC_Initialized = 1;
 8001010:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_FMC_MspInit+0xc4>)
 8001012:	2201      	movs	r2, #1
 8001014:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001016:	4b29      	ldr	r3, [pc, #164]	; (80010bc <HAL_FMC_MspInit+0xc8>)
 8001018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800101a:	4a28      	ldr	r2, [pc, #160]	; (80010bc <HAL_FMC_MspInit+0xc8>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6393      	str	r3, [r2, #56]	; 0x38
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_FMC_MspInit+0xc8>)
 8001024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  PG9   ------> FMC_NE2
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800102e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001032:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	2303      	movs	r3, #3
 800103e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001040:	230c      	movs	r3, #12
 8001042:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001044:	1d3b      	adds	r3, r7, #4
 8001046:	4619      	mov	r1, r3
 8001048:	481d      	ldr	r0, [pc, #116]	; (80010c0 <HAL_FMC_MspInit+0xcc>)
 800104a:	f001 fa65 	bl	8002518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800104e:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001052:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	2300      	movs	r3, #0
 800105a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105c:	2303      	movs	r3, #3
 800105e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001060:	230c      	movs	r3, #12
 8001062:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001064:	1d3b      	adds	r3, r7, #4
 8001066:	4619      	mov	r1, r3
 8001068:	4816      	ldr	r0, [pc, #88]	; (80010c4 <HAL_FMC_MspInit+0xd0>)
 800106a:	f001 fa55 	bl	8002518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800106e:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 8001072:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001080:	230c      	movs	r3, #12
 8001082:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	1d3b      	adds	r3, r7, #4
 8001086:	4619      	mov	r1, r3
 8001088:	480f      	ldr	r0, [pc, #60]	; (80010c8 <HAL_FMC_MspInit+0xd4>)
 800108a:	f001 fa45 	bl	8002518 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800108e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001092:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80010a0:	230c      	movs	r3, #12
 80010a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	4619      	mov	r1, r3
 80010a8:	4808      	ldr	r0, [pc, #32]	; (80010cc <HAL_FMC_MspInit+0xd8>)
 80010aa:	f001 fa35 	bl	8002518 <HAL_GPIO_Init>
 80010ae:	e000      	b.n	80010b2 <HAL_FMC_MspInit+0xbe>
    return;
 80010b0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80010b2:	3718      	adds	r7, #24
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200001d8 	.word	0x200001d8
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40021400 	.word	0x40021400
 80010c4:	40021000 	.word	0x40021000
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021800 	.word	0x40021800

080010d0 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80010d8:	f7ff ff8c 	bl	8000ff4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e8:	e7fe      	b.n	80010e8 <NMI_Handler+0x4>

080010ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ee:	e7fe      	b.n	80010ee <HardFault_Handler+0x4>

080010f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f4:	e7fe      	b.n	80010f4 <MemManage_Handler+0x4>

080010f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f6:	b480      	push	{r7}
 80010f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010fa:	e7fe      	b.n	80010fa <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <UsageFault_Handler+0x4>

08001102 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001130:	f001 f8c8 	bl	80022c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	bd80      	pop	{r7, pc}

08001138 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001140:	4a14      	ldr	r2, [pc, #80]	; (8001194 <_sbrk+0x5c>)
 8001142:	4b15      	ldr	r3, [pc, #84]	; (8001198 <_sbrk+0x60>)
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800114c:	4b13      	ldr	r3, [pc, #76]	; (800119c <_sbrk+0x64>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d102      	bne.n	800115a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001154:	4b11      	ldr	r3, [pc, #68]	; (800119c <_sbrk+0x64>)
 8001156:	4a12      	ldr	r2, [pc, #72]	; (80011a0 <_sbrk+0x68>)
 8001158:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800115a:	4b10      	ldr	r3, [pc, #64]	; (800119c <_sbrk+0x64>)
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4413      	add	r3, r2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	429a      	cmp	r2, r3
 8001166:	d207      	bcs.n	8001178 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001168:	f002 f9ee 	bl	8003548 <__errno>
 800116c:	4603      	mov	r3, r0
 800116e:	220c      	movs	r2, #12
 8001170:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001172:	f04f 33ff 	mov.w	r3, #4294967295
 8001176:	e009      	b.n	800118c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <_sbrk+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117e:	4b07      	ldr	r3, [pc, #28]	; (800119c <_sbrk+0x64>)
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	4413      	add	r3, r2
 8001186:	4a05      	ldr	r2, [pc, #20]	; (800119c <_sbrk+0x64>)
 8001188:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800118a:	68fb      	ldr	r3, [r7, #12]
}
 800118c:	4618      	mov	r0, r3
 800118e:	3718      	adds	r7, #24
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20050000 	.word	0x20050000
 8001198:	00000400 	.word	0x00000400
 800119c:	200001dc 	.word	0x200001dc
 80011a0:	20000330 	.word	0x20000330

080011a4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <UG_Init>:
#endif



UG_S16 UG_Init( UG_GUI* g, void (*p)(UG_S16,UG_S16,UG_COLOR), UG_S16 x, UG_S16 y )
{
 80011c8:	b480      	push	{r7}
 80011ca:	b087      	sub	sp, #28
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	60b9      	str	r1, [r7, #8]
 80011d2:	4611      	mov	r1, r2
 80011d4:	461a      	mov	r2, r3
 80011d6:	460b      	mov	r3, r1
 80011d8:	80fb      	strh	r3, [r7, #6]
 80011da:	4613      	mov	r3, r2
 80011dc:	80bb      	strh	r3, [r7, #4]
   UG_U8 i;

   g->pset = (void(*)(UG_S16,UG_S16,UG_COLOR))p;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	68ba      	ldr	r2, [r7, #8]
 80011e2:	601a      	str	r2, [r3, #0]
   g->x_dim = x;
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	88fa      	ldrh	r2, [r7, #6]
 80011e8:	809a      	strh	r2, [r3, #4]
   g->y_dim = y;
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	88ba      	ldrh	r2, [r7, #4]
 80011ee:	80da      	strh	r2, [r3, #6]
   g->console.x_start = 4;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2204      	movs	r2, #4
 80011f4:	841a      	strh	r2, [r3, #32]
   g->console.y_start = 4;
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2204      	movs	r2, #4
 80011fa:	845a      	strh	r2, [r3, #34]	; 0x22
   g->console.x_end = g->x_dim - g->console.x_start-1;
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001202:	b29a      	uxth	r2, r3
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800120a:	b29b      	uxth	r3, r3
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	b29b      	uxth	r3, r3
 8001210:	3b01      	subs	r3, #1
 8001212:	b29b      	uxth	r3, r3
 8001214:	b21a      	sxth	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	849a      	strh	r2, [r3, #36]	; 0x24
   g->console.y_end = g->y_dim - g->console.x_start-1;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001220:	b29a      	uxth	r2, r3
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001228:	b29b      	uxth	r3, r3
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	b29b      	uxth	r3, r3
 800122e:	3b01      	subs	r3, #1
 8001230:	b29b      	uxth	r3, r3
 8001232:	b21a      	sxth	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	84da      	strh	r2, [r3, #38]	; 0x26
   g->console.x_pos = g->console.x_end;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f9b3 2024 	ldrsh.w	r2, [r3, #36]	; 0x24
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	839a      	strh	r2, [r3, #28]
   g->console.y_pos = g->console.y_end;
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	; 0x26
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	83da      	strh	r2, [r3, #30]
   g->char_h_space = 1;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
   g->char_v_space = 1;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
   g->font.p = NULL;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	2200      	movs	r2, #0
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
   g->font.char_height = 0;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	2200      	movs	r2, #0
 8001266:	869a      	strh	r2, [r3, #52]	; 0x34
   g->font.char_width = 0;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2200      	movs	r2, #0
 800126c:	865a      	strh	r2, [r3, #50]	; 0x32
   g->font.start_char = 0;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2200      	movs	r2, #0
 8001272:	86da      	strh	r2, [r3, #54]	; 0x36
   g->font.end_char = 0;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	2200      	movs	r2, #0
 8001278:	871a      	strh	r2, [r3, #56]	; 0x38
   g->font.widths = NULL;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	2200      	movs	r2, #0
 800127e:	63da      	str	r2, [r3, #60]	; 0x3c
   #ifdef USE_COLOR_RGB888
   g->desktop_color = 0x5E8BEf;
   #endif
   #ifdef USE_COLOR_RGB565
   g->desktop_color = 0x5C5D;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f645 425d 	movw	r2, #23645	; 0x5c5d
 8001286:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
   #endif
   g->fore_color = C_WHITE;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001290:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
   g->back_color = C_BLACK;
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2200      	movs	r2, #0
 8001298:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   g->next_window = NULL;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	2200      	movs	r2, #0
 80012a0:	611a      	str	r2, [r3, #16]
   g->active_window = NULL;
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	2200      	movs	r2, #0
 80012a6:	615a      	str	r2, [r3, #20]
   g->last_window = NULL;
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2200      	movs	r2, #0
 80012ac:	619a      	str	r2, [r3, #24]

   /* Clear drivers */
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e010      	b.n	80012d6 <UG_Init+0x10e>
   {
      g->driver[i].driver = NULL;
 80012b4:	7dfb      	ldrb	r3, [r7, #23]
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	3309      	adds	r3, #9
 80012ba:	00db      	lsls	r3, r3, #3
 80012bc:	4413      	add	r3, r2
 80012be:	2200      	movs	r2, #0
 80012c0:	605a      	str	r2, [r3, #4]
      g->driver[i].state = 0;
 80012c2:	7dfb      	ldrb	r3, [r7, #23]
 80012c4:	68fa      	ldr	r2, [r7, #12]
 80012c6:	3309      	adds	r3, #9
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4413      	add	r3, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	721a      	strb	r2, [r3, #8]
   for(i=0;i<NUMBER_OF_DRIVERS;i++)
 80012d0:	7dfb      	ldrb	r3, [r7, #23]
 80012d2:	3301      	adds	r3, #1
 80012d4:	75fb      	strb	r3, [r7, #23]
 80012d6:	7dfb      	ldrb	r3, [r7, #23]
 80012d8:	2b06      	cmp	r3, #6
 80012da:	d9eb      	bls.n	80012b4 <UG_Init+0xec>
   }

   gui = g;
 80012dc:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <UG_Init+0x128>)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6013      	str	r3, [r2, #0]
   return 1;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	371c      	adds	r7, #28
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	200001e0 	.word	0x200001e0

080012f4 <UG_FontSelect>:
   gui = g;
   return 1;
}

void UG_FontSelect( const UG_FONT* font )
{
 80012f4:	b4b0      	push	{r4, r5, r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
   gui->font = *font;
 80012fc:	4b07      	ldr	r3, [pc, #28]	; (800131c <UG_FontSelect+0x28>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f103 042c 	add.w	r4, r3, #44	; 0x2c
 8001306:	4615      	mov	r5, r2
 8001308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800130a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800130c:	682b      	ldr	r3, [r5, #0]
 800130e:	6023      	str	r3, [r4, #0]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	bcb0      	pop	{r4, r5, r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	200001e0 	.word	0x200001e0

08001320 <UG_FillScreen>:

void UG_FillScreen( UG_COLOR c )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af02      	add	r7, sp, #8
 8001326:	4603      	mov	r3, r0
 8001328:	80fb      	strh	r3, [r7, #6]
   UG_FillFrame(0,0,gui->x_dim-1,gui->y_dim-1,c);
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <UG_FillScreen+0x40>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001332:	b29b      	uxth	r3, r3
 8001334:	3b01      	subs	r3, #1
 8001336:	b29b      	uxth	r3, r3
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <UG_FillScreen+0x40>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001342:	b29b      	uxth	r3, r3
 8001344:	3b01      	subs	r3, #1
 8001346:	b29b      	uxth	r3, r3
 8001348:	b219      	sxth	r1, r3
 800134a:	88fb      	ldrh	r3, [r7, #6]
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	460b      	mov	r3, r1
 8001350:	2100      	movs	r1, #0
 8001352:	2000      	movs	r0, #0
 8001354:	f000 f806 	bl	8001364 <UG_FillFrame>
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	200001e0 	.word	0x200001e0

08001364 <UG_FillFrame>:

void UG_FillFrame( UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c )
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b086      	sub	sp, #24
 8001368:	af02      	add	r7, sp, #8
 800136a:	4604      	mov	r4, r0
 800136c:	4608      	mov	r0, r1
 800136e:	4611      	mov	r1, r2
 8001370:	461a      	mov	r2, r3
 8001372:	4623      	mov	r3, r4
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	4603      	mov	r3, r0
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	460b      	mov	r3, r1
 800137c:	807b      	strh	r3, [r7, #2]
 800137e:	4613      	mov	r3, r2
 8001380:	803b      	strh	r3, [r7, #0]
   UG_S16 n,m;

   if ( x2 < x1 )
 8001382:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001386:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138a:	429a      	cmp	r2, r3
 800138c:	da05      	bge.n	800139a <UG_FillFrame+0x36>
   {
      n = x2;
 800138e:	887b      	ldrh	r3, [r7, #2]
 8001390:	81fb      	strh	r3, [r7, #14]
      x2 = x1;
 8001392:	88fb      	ldrh	r3, [r7, #6]
 8001394:	807b      	strh	r3, [r7, #2]
      x1 = n;
 8001396:	89fb      	ldrh	r3, [r7, #14]
 8001398:	80fb      	strh	r3, [r7, #6]
   }
   if ( y2 < y1 )
 800139a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800139e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	da05      	bge.n	80013b2 <UG_FillFrame+0x4e>
   {
      n = y2;
 80013a6:	883b      	ldrh	r3, [r7, #0]
 80013a8:	81fb      	strh	r3, [r7, #14]
      y2 = y1;
 80013aa:	88bb      	ldrh	r3, [r7, #4]
 80013ac:	803b      	strh	r3, [r7, #0]
      y1 = n;
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	80bb      	strh	r3, [r7, #4]
   }

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_FRAME].state & DRIVER_ENABLED )
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <UG_FillFrame+0xdc>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d012      	beq.n	80013e8 <UG_FillFrame+0x84>
   {
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 80013c2:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <UG_FillFrame+0xdc>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c8:	461d      	mov	r5, r3
 80013ca:	f9b7 4000 	ldrsh.w	r4, [r7]
 80013ce:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013d2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80013d6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80013da:	8c3b      	ldrh	r3, [r7, #32]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4623      	mov	r3, r4
 80013e0:	47a8      	blx	r5
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d027      	beq.n	8001438 <UG_FillFrame+0xd4>
   }

   for( m=y1; m<=y2; m++ )
 80013e8:	88bb      	ldrh	r3, [r7, #4]
 80013ea:	81bb      	strh	r3, [r7, #12]
 80013ec:	e01d      	b.n	800142a <UG_FillFrame+0xc6>
   {
      for( n=x1; n<=x2; n++ )
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	81fb      	strh	r3, [r7, #14]
 80013f2:	e00e      	b.n	8001412 <UG_FillFrame+0xae>
      {
         gui->pset(n,m,c);
 80013f4:	4b12      	ldr	r3, [pc, #72]	; (8001440 <UG_FillFrame+0xdc>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	8c3a      	ldrh	r2, [r7, #32]
 80013fc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8001400:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8001404:	4798      	blx	r3
      for( n=x1; n<=x2; n++ )
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	b29b      	uxth	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
 8001412:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001416:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800141a:	429a      	cmp	r2, r3
 800141c:	ddea      	ble.n	80013f4 <UG_FillFrame+0x90>
   for( m=y1; m<=y2; m++ )
 800141e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001422:	b29b      	uxth	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	81bb      	strh	r3, [r7, #12]
 800142a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800142e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001432:	429a      	cmp	r2, r3
 8001434:	dddb      	ble.n	80013ee <UG_FillFrame+0x8a>
 8001436:	e000      	b.n	800143a <UG_FillFrame+0xd6>
      if( ((UG_RESULT(*)(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c))gui->driver[DRIVER_FILL_FRAME].driver)(x1,y1,x2,y2,c) == UG_RESULT_OK ) return;
 8001438:	bf00      	nop
      }
   }
}
 800143a:	3710      	adds	r7, #16
 800143c:	46bd      	mov	sp, r7
 800143e:	bdb0      	pop	{r4, r5, r7, pc}
 8001440:	200001e0 	.word	0x200001e0

08001444 <UG_PutString>:
      }
   }
}

void UG_PutString( UG_S16 x, UG_S16 y, char* str )
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af02      	add	r7, sp, #8
 800144a:	4603      	mov	r3, r0
 800144c:	603a      	str	r2, [r7, #0]
 800144e:	80fb      	strh	r3, [r7, #6]
 8001450:	460b      	mov	r3, r1
 8001452:	80bb      	strh	r3, [r7, #4]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	81fb      	strh	r3, [r7, #14]
   yp=y;
 8001458:	88bb      	ldrh	r3, [r7, #4]
 800145a:	81bb      	strh	r3, [r7, #12]

   while ( *str != 0 )
 800145c:	e06d      	b.n	800153a <UG_PutString+0xf6>
   {
      chr = *str++;
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	1c5a      	adds	r2, r3, #1
 8001462:	603a      	str	r2, [r7, #0]
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	72fb      	strb	r3, [r7, #11]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 8001468:	7afb      	ldrb	r3, [r7, #11]
 800146a:	b29a      	uxth	r2, r3
 800146c:	4b37      	ldr	r3, [pc, #220]	; (800154c <UG_PutString+0x108>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001472:	429a      	cmp	r2, r3
 8001474:	d361      	bcc.n	800153a <UG_PutString+0xf6>
 8001476:	7afb      	ldrb	r3, [r7, #11]
 8001478:	b29a      	uxth	r2, r3
 800147a:	4b34      	ldr	r3, [pc, #208]	; (800154c <UG_PutString+0x108>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001480:	429a      	cmp	r2, r3
 8001482:	d900      	bls.n	8001486 <UG_PutString+0x42>
 8001484:	e059      	b.n	800153a <UG_PutString+0xf6>
      if ( chr == '\n' )
 8001486:	7afb      	ldrb	r3, [r7, #11]
 8001488:	2b0a      	cmp	r3, #10
 800148a:	d104      	bne.n	8001496 <UG_PutString+0x52>
      {
         xp = gui->x_dim;
 800148c:	4b2f      	ldr	r3, [pc, #188]	; (800154c <UG_PutString+0x108>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	889b      	ldrh	r3, [r3, #4]
 8001492:	81fb      	strh	r3, [r7, #14]
         continue;
 8001494:	e051      	b.n	800153a <UG_PutString+0xf6>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 8001496:	4b2d      	ldr	r3, [pc, #180]	; (800154c <UG_PutString+0x108>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00a      	beq.n	80014b6 <UG_PutString+0x72>
 80014a0:	4b2a      	ldr	r3, [pc, #168]	; (800154c <UG_PutString+0x108>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	7afa      	ldrb	r2, [r7, #11]
 80014a8:	4928      	ldr	r1, [pc, #160]	; (800154c <UG_PutString+0x108>)
 80014aa:	6809      	ldr	r1, [r1, #0]
 80014ac:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80014ae:	1a52      	subs	r2, r2, r1
 80014b0:	4413      	add	r3, r2
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	e004      	b.n	80014c0 <UG_PutString+0x7c>
 80014b6:	4b25      	ldr	r3, [pc, #148]	; (800154c <UG_PutString+0x108>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	72bb      	strb	r3, [r7, #10]

      if ( xp + cw > gui->x_dim - 1 )
 80014c2:	4b22      	ldr	r3, [pc, #136]	; (800154c <UG_PutString+0x108>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80014ca:	4619      	mov	r1, r3
 80014cc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80014d0:	7abb      	ldrb	r3, [r7, #10]
 80014d2:	4413      	add	r3, r2
 80014d4:	4299      	cmp	r1, r3
 80014d6:	dc11      	bgt.n	80014fc <UG_PutString+0xb8>
      {
         xp = x;
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	81fb      	strh	r3, [r7, #14]
         yp += gui->font.char_height+gui->char_v_space;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	; (800154c <UG_PutString+0x108>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	4b19      	ldr	r3, [pc, #100]	; (800154c <UG_PutString+0x108>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4413      	add	r3, r2
 80014f2:	b29a      	uxth	r2, r3
 80014f4:	89bb      	ldrh	r3, [r7, #12]
 80014f6:	4413      	add	r3, r2
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	81bb      	strh	r3, [r7, #12]
      }

      UG_PutChar(chr, xp, yp, gui->fore_color, gui->back_color);
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <UG_PutString+0x108>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8b3 4042 	ldrh.w	r4, [r3, #66]	; 0x42
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <UG_PutString+0x108>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800150c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001510:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8001514:	7af8      	ldrb	r0, [r7, #11]
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	4623      	mov	r3, r4
 800151a:	f000 f89d 	bl	8001658 <UG_PutChar>

      xp += cw + gui->char_h_space;
 800151e:	7abb      	ldrb	r3, [r7, #10]
 8001520:	b21a      	sxth	r2, r3
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <UG_PutString+0x108>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 800152a:	b21b      	sxth	r3, r3
 800152c:	4413      	add	r3, r2
 800152e:	b21b      	sxth	r3, r3
 8001530:	b29a      	uxth	r2, r3
 8001532:	89fb      	ldrh	r3, [r7, #14]
 8001534:	4413      	add	r3, r2
 8001536:	b29b      	uxth	r3, r3
 8001538:	81fb      	strh	r3, [r7, #14]
   while ( *str != 0 )
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d18d      	bne.n	800145e <UG_PutString+0x1a>
   }
}
 8001542:	bf00      	nop
 8001544:	bf00      	nop
 8001546:	3714      	adds	r7, #20
 8001548:	46bd      	mov	sp, r7
 800154a:	bd90      	pop	{r4, r7, pc}
 800154c:	200001e0 	.word	0x200001e0

08001550 <UG_PutColorString>:

// FRUCD addition
void UG_PutColorString( UG_S16 x, UG_S16 y, char* str, UG_COLOR fc, UG_COLOR bc )
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b089      	sub	sp, #36	; 0x24
 8001554:	af02      	add	r7, sp, #8
 8001556:	60ba      	str	r2, [r7, #8]
 8001558:	461a      	mov	r2, r3
 800155a:	4603      	mov	r3, r0
 800155c:	81fb      	strh	r3, [r7, #14]
 800155e:	460b      	mov	r3, r1
 8001560:	81bb      	strh	r3, [r7, #12]
 8001562:	4613      	mov	r3, r2
 8001564:	80fb      	strh	r3, [r7, #6]
   UG_S16 xp,yp;
   UG_U8 cw;
   char chr;

   xp=x;
 8001566:	89fb      	ldrh	r3, [r7, #14]
 8001568:	82fb      	strh	r3, [r7, #22]
   yp=y;
 800156a:	89bb      	ldrh	r3, [r7, #12]
 800156c:	82bb      	strh	r3, [r7, #20]

   while ( *str != 0 )
 800156e:	e067      	b.n	8001640 <UG_PutColorString+0xf0>
   {
      chr = *str++;
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	60ba      	str	r2, [r7, #8]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	74fb      	strb	r3, [r7, #19]
	  if (chr < gui->font.start_char || chr > gui->font.end_char) continue;
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <UG_PutColorString+0x104>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001584:	429a      	cmp	r2, r3
 8001586:	d35b      	bcc.n	8001640 <UG_PutColorString+0xf0>
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	b29a      	uxth	r2, r3
 800158c:	4b31      	ldr	r3, [pc, #196]	; (8001654 <UG_PutColorString+0x104>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8001592:	429a      	cmp	r2, r3
 8001594:	d900      	bls.n	8001598 <UG_PutColorString+0x48>
 8001596:	e053      	b.n	8001640 <UG_PutColorString+0xf0>
      if ( chr == '\n' )
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2b0a      	cmp	r3, #10
 800159c:	d104      	bne.n	80015a8 <UG_PutColorString+0x58>
      {
         xp = gui->x_dim;
 800159e:	4b2d      	ldr	r3, [pc, #180]	; (8001654 <UG_PutColorString+0x104>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	889b      	ldrh	r3, [r3, #4]
 80015a4:	82fb      	strh	r3, [r7, #22]
         continue;
 80015a6:	e04b      	b.n	8001640 <UG_PutColorString+0xf0>
      }
	  cw = gui->font.widths ? gui->font.widths[chr - gui->font.start_char] : gui->font.char_width;
 80015a8:	4b2a      	ldr	r3, [pc, #168]	; (8001654 <UG_PutColorString+0x104>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d00a      	beq.n	80015c8 <UG_PutColorString+0x78>
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <UG_PutColorString+0x104>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b8:	7cfa      	ldrb	r2, [r7, #19]
 80015ba:	4926      	ldr	r1, [pc, #152]	; (8001654 <UG_PutColorString+0x104>)
 80015bc:	6809      	ldr	r1, [r1, #0]
 80015be:	8ec9      	ldrh	r1, [r1, #54]	; 0x36
 80015c0:	1a52      	subs	r2, r2, r1
 80015c2:	4413      	add	r3, r2
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	e004      	b.n	80015d2 <UG_PutColorString+0x82>
 80015c8:	4b22      	ldr	r3, [pc, #136]	; (8001654 <UG_PutColorString+0x104>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	74bb      	strb	r3, [r7, #18]

      if ( xp + cw > gui->x_dim - 1 )
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <UG_PutColorString+0x104>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015dc:	4619      	mov	r1, r3
 80015de:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80015e2:	7cbb      	ldrb	r3, [r7, #18]
 80015e4:	4413      	add	r3, r2
 80015e6:	4299      	cmp	r1, r3
 80015e8:	dc11      	bgt.n	800160e <UG_PutColorString+0xbe>
      {
         xp = x;
 80015ea:	89fb      	ldrh	r3, [r7, #14]
 80015ec:	82fb      	strh	r3, [r7, #22]
         yp += gui->font.char_height+gui->char_v_space;
 80015ee:	4b19      	ldr	r3, [pc, #100]	; (8001654 <UG_PutColorString+0x104>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	4b16      	ldr	r3, [pc, #88]	; (8001654 <UG_PutColorString+0x104>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f993 3041 	ldrsb.w	r3, [r3, #65]	; 0x41
 8001600:	b29b      	uxth	r3, r3
 8001602:	4413      	add	r3, r2
 8001604:	b29a      	uxth	r2, r3
 8001606:	8abb      	ldrh	r3, [r7, #20]
 8001608:	4413      	add	r3, r2
 800160a:	b29b      	uxth	r3, r3
 800160c:	82bb      	strh	r3, [r7, #20]
      }

      UG_PutChar(chr, xp, yp, fc, bc);
 800160e:	88fc      	ldrh	r4, [r7, #6]
 8001610:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001614:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 8001618:	7cf8      	ldrb	r0, [r7, #19]
 800161a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4623      	mov	r3, r4
 8001620:	f000 f81a 	bl	8001658 <UG_PutChar>

      xp += cw + gui->char_h_space;
 8001624:	7cbb      	ldrb	r3, [r7, #18]
 8001626:	b21a      	sxth	r2, r3
 8001628:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <UG_PutColorString+0x104>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f993 3040 	ldrsb.w	r3, [r3, #64]	; 0x40
 8001630:	b21b      	sxth	r3, r3
 8001632:	4413      	add	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	b29a      	uxth	r2, r3
 8001638:	8afb      	ldrh	r3, [r7, #22]
 800163a:	4413      	add	r3, r2
 800163c:	b29b      	uxth	r3, r3
 800163e:	82fb      	strh	r3, [r7, #22]
   while ( *str != 0 )
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d193      	bne.n	8001570 <UG_PutColorString+0x20>
   }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	371c      	adds	r7, #28
 800164e:	46bd      	mov	sp, r7
 8001650:	bd90      	pop	{r4, r7, pc}
 8001652:	bf00      	nop
 8001654:	200001e0 	.word	0x200001e0

08001658 <UG_PutChar>:

void UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc )
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af02      	add	r7, sp, #8
 800165e:	4604      	mov	r4, r0
 8001660:	4608      	mov	r0, r1
 8001662:	4611      	mov	r1, r2
 8001664:	461a      	mov	r2, r3
 8001666:	4623      	mov	r3, r4
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	4603      	mov	r3, r0
 800166c:	80bb      	strh	r3, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	807b      	strh	r3, [r7, #2]
 8001672:	4613      	mov	r3, r2
 8001674:	803b      	strh	r3, [r7, #0]
	_UG_PutChar(chr,x,y,fc,bc,&gui->font);
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <UG_PutChar+0x44>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	332c      	adds	r3, #44	; 0x2c
 800167c:	883c      	ldrh	r4, [r7, #0]
 800167e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001682:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001686:	79f8      	ldrb	r0, [r7, #7]
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	8b3b      	ldrh	r3, [r7, #24]
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	4623      	mov	r3, r4
 8001690:	f000 f852 	bl	8001738 <_UG_PutChar>
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	bd90      	pop	{r4, r7, pc}
 800169c:	200001e0 	.word	0x200001e0

080016a0 <UG_SetForecolor>:
{
   gui->console.back_color = c;
}

void UG_SetForecolor( UG_COLOR c )
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
   gui->fore_color = c;
 80016aa:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <UG_SetForecolor+0x20>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	88fa      	ldrh	r2, [r7, #6]
 80016b0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	200001e0 	.word	0x200001e0

080016c4 <UG_SetBackcolor>:

void UG_SetBackcolor( UG_COLOR c )
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	4603      	mov	r3, r0
 80016cc:	80fb      	strh	r3, [r7, #6]
   gui->back_color = c;
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <UG_SetBackcolor+0x20>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
}
 80016d8:	bf00      	nop
 80016da:	370c      	adds	r7, #12
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr
 80016e4:	200001e0 	.word	0x200001e0

080016e8 <UG_FontSetHSpace>:
{
   return gui->y_dim;
}

void UG_FontSetHSpace( UG_U16 s )
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	80fb      	strh	r3, [r7, #6]
   gui->char_h_space = s;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <UG_FontSetHSpace+0x24>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	88fa      	ldrh	r2, [r7, #6]
 80016f8:	b252      	sxtb	r2, r2
 80016fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	200001e0 	.word	0x200001e0

08001710 <UG_FontSetVSpace>:

void UG_FontSetVSpace( UG_U16 s )
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	4603      	mov	r3, r0
 8001718:	80fb      	strh	r3, [r7, #6]
   gui->char_v_space = s;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <UG_FontSetVSpace+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	88fa      	ldrh	r2, [r7, #6]
 8001720:	b252      	sxtb	r2, r2
 8001722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	200001e0 	.word	0x200001e0

08001738 <_UG_PutChar>:
   }
}
*/

void _UG_PutChar( char chr, UG_S16 x, UG_S16 y, UG_COLOR fc, UG_COLOR bc, const UG_FONT* font)
{
 8001738:	b5b0      	push	{r4, r5, r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0
 800173e:	4604      	mov	r4, r0
 8001740:	4608      	mov	r0, r1
 8001742:	4611      	mov	r1, r2
 8001744:	461a      	mov	r2, r3
 8001746:	4623      	mov	r3, r4
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	4603      	mov	r3, r0
 800174c:	80bb      	strh	r3, [r7, #4]
 800174e:	460b      	mov	r3, r1
 8001750:	807b      	strh	r3, [r7, #2]
 8001752:	4613      	mov	r3, r2
 8001754:	803b      	strh	r3, [r7, #0]
   UG_U8 b,bt;
   UG_U32 index;
   UG_COLOR color;
   void(*push_pixel)(UG_COLOR);

   bt = (UG_U8)chr;
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	763b      	strb	r3, [r7, #24]

   switch ( bt )
 800175a:	7e3b      	ldrb	r3, [r7, #24]
 800175c:	2bfc      	cmp	r3, #252	; 0xfc
 800175e:	dc77      	bgt.n	8001850 <_UG_PutChar+0x118>
 8001760:	2bd6      	cmp	r3, #214	; 0xd6
 8001762:	da08      	bge.n	8001776 <_UG_PutChar+0x3e>
 8001764:	2bc4      	cmp	r3, #196	; 0xc4
 8001766:	d06a      	beq.n	800183e <_UG_PutChar+0x106>
 8001768:	2bc4      	cmp	r3, #196	; 0xc4
 800176a:	dc71      	bgt.n	8001850 <_UG_PutChar+0x118>
 800176c:	2bb0      	cmp	r3, #176	; 0xb0
 800176e:	d06c      	beq.n	800184a <_UG_PutChar+0x112>
 8001770:	2bb5      	cmp	r3, #181	; 0xb5
 8001772:	d067      	beq.n	8001844 <_UG_PutChar+0x10c>
 8001774:	e06c      	b.n	8001850 <_UG_PutChar+0x118>
 8001776:	3bd6      	subs	r3, #214	; 0xd6
 8001778:	2b26      	cmp	r3, #38	; 0x26
 800177a:	d869      	bhi.n	8001850 <_UG_PutChar+0x118>
 800177c:	a201      	add	r2, pc, #4	; (adr r2, 8001784 <_UG_PutChar+0x4c>)
 800177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001782:	bf00      	nop
 8001784:	08001827 	.word	0x08001827
 8001788:	08001851 	.word	0x08001851
 800178c:	08001851 	.word	0x08001851
 8001790:	08001851 	.word	0x08001851
 8001794:	08001851 	.word	0x08001851
 8001798:	08001851 	.word	0x08001851
 800179c:	08001833 	.word	0x08001833
 80017a0:	08001851 	.word	0x08001851
 80017a4:	08001851 	.word	0x08001851
 80017a8:	08001851 	.word	0x08001851
 80017ac:	08001851 	.word	0x08001851
 80017b0:	08001851 	.word	0x08001851
 80017b4:	08001851 	.word	0x08001851
 80017b8:	08001851 	.word	0x08001851
 80017bc:	08001839 	.word	0x08001839
 80017c0:	08001851 	.word	0x08001851
 80017c4:	08001851 	.word	0x08001851
 80017c8:	08001851 	.word	0x08001851
 80017cc:	08001851 	.word	0x08001851
 80017d0:	08001851 	.word	0x08001851
 80017d4:	08001851 	.word	0x08001851
 80017d8:	08001851 	.word	0x08001851
 80017dc:	08001851 	.word	0x08001851
 80017e0:	08001851 	.word	0x08001851
 80017e4:	08001851 	.word	0x08001851
 80017e8:	08001851 	.word	0x08001851
 80017ec:	08001851 	.word	0x08001851
 80017f0:	08001851 	.word	0x08001851
 80017f4:	08001851 	.word	0x08001851
 80017f8:	08001851 	.word	0x08001851
 80017fc:	08001851 	.word	0x08001851
 8001800:	08001851 	.word	0x08001851
 8001804:	08001821 	.word	0x08001821
 8001808:	08001851 	.word	0x08001851
 800180c:	08001851 	.word	0x08001851
 8001810:	08001851 	.word	0x08001851
 8001814:	08001851 	.word	0x08001851
 8001818:	08001851 	.word	0x08001851
 800181c:	0800182d 	.word	0x0800182d
   {
      case 0xF6: bt = 0x94; break; // ö
 8001820:	2394      	movs	r3, #148	; 0x94
 8001822:	763b      	strb	r3, [r7, #24]
 8001824:	e014      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xD6: bt = 0x99; break; // Ö
 8001826:	2399      	movs	r3, #153	; 0x99
 8001828:	763b      	strb	r3, [r7, #24]
 800182a:	e011      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xFC: bt = 0x81; break; // ü
 800182c:	2381      	movs	r3, #129	; 0x81
 800182e:	763b      	strb	r3, [r7, #24]
 8001830:	e00e      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xDC: bt = 0x9A; break; // Ü
 8001832:	239a      	movs	r3, #154	; 0x9a
 8001834:	763b      	strb	r3, [r7, #24]
 8001836:	e00b      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xE4: bt = 0x84; break; // ä
 8001838:	2384      	movs	r3, #132	; 0x84
 800183a:	763b      	strb	r3, [r7, #24]
 800183c:	e008      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xC4: bt = 0x8E; break; // Ä
 800183e:	238e      	movs	r3, #142	; 0x8e
 8001840:	763b      	strb	r3, [r7, #24]
 8001842:	e005      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xB5: bt = 0xE6; break; // µ
 8001844:	23e6      	movs	r3, #230	; 0xe6
 8001846:	763b      	strb	r3, [r7, #24]
 8001848:	e002      	b.n	8001850 <_UG_PutChar+0x118>
      case 0xB0: bt = 0xF8; break; // °
 800184a:	23f8      	movs	r3, #248	; 0xf8
 800184c:	763b      	strb	r3, [r7, #24]
 800184e:	bf00      	nop
   }

   if (bt < font->start_char || bt > font->end_char) return;
 8001850:	7e3b      	ldrb	r3, [r7, #24]
 8001852:	b29a      	uxth	r2, r3
 8001854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001856:	895b      	ldrh	r3, [r3, #10]
 8001858:	429a      	cmp	r2, r3
 800185a:	f0c0 81fc 	bcc.w	8001c56 <_UG_PutChar+0x51e>
 800185e:	7e3b      	ldrb	r3, [r7, #24]
 8001860:	b29a      	uxth	r2, r3
 8001862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001864:	899b      	ldrh	r3, [r3, #12]
 8001866:	429a      	cmp	r2, r3
 8001868:	f200 81f5 	bhi.w	8001c56 <_UG_PutChar+0x51e>

   yo = y;
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	83fb      	strh	r3, [r7, #30]
   bn = font->char_width;
 8001870:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001872:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001876:	837b      	strh	r3, [r7, #26]
   if ( !bn ) return;
 8001878:	8b7b      	ldrh	r3, [r7, #26]
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 81ed 	beq.w	8001c5a <_UG_PutChar+0x522>
   bn >>= 3;
 8001880:	8b7b      	ldrh	r3, [r7, #26]
 8001882:	08db      	lsrs	r3, r3, #3
 8001884:	837b      	strh	r3, [r7, #26]
   if ( font->char_width % 8 ) bn++;
 8001886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001888:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800188c:	b29b      	uxth	r3, r3
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	b29b      	uxth	r3, r3
 8001894:	2b00      	cmp	r3, #0
 8001896:	d002      	beq.n	800189e <_UG_PutChar+0x166>
 8001898:	8b7b      	ldrh	r3, [r7, #26]
 800189a:	3301      	adds	r3, #1
 800189c:	837b      	strh	r3, [r7, #26]
   actual_char_width = (font->widths ? font->widths[bt - font->start_char] : font->char_width);
 800189e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a0:	691b      	ldr	r3, [r3, #16]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <_UG_PutChar+0x182>
 80018a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	7e3a      	ldrb	r2, [r7, #24]
 80018ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80018ae:	8949      	ldrh	r1, [r1, #10]
 80018b0:	1a52      	subs	r2, r2, r1
 80018b2:	4413      	add	r3, r2
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	e003      	b.n	80018c2 <_UG_PutChar+0x18a>
 80018ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018bc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	827b      	strh	r3, [r7, #18]

   /* Is hardware acceleration available? */
   if ( gui->driver[DRIVER_FILL_AREA].state & DRIVER_ENABLED )
 80018c4:	4b93      	ldr	r3, [pc, #588]	; (8001b14 <_UG_PutChar+0x3dc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	f000 80d8 	beq.w	8001a86 <_UG_PutChar+0x34e>
   {
	   //(void(*)(UG_COLOR))
      push_pixel = ((void*(*)(UG_S16, UG_S16, UG_S16, UG_S16))gui->driver[DRIVER_FILL_AREA].driver)(x,y,x+actual_char_width-1,y+font->char_height-1);
 80018d6:	4b8f      	ldr	r3, [pc, #572]	; (8001b14 <_UG_PutChar+0x3dc>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018dc:	461d      	mov	r5, r3
 80018de:	88ba      	ldrh	r2, [r7, #4]
 80018e0:	8a7b      	ldrh	r3, [r7, #18]
 80018e2:	4413      	add	r3, r2
 80018e4:	b29b      	uxth	r3, r3
 80018e6:	3b01      	subs	r3, #1
 80018e8:	b29b      	uxth	r3, r3
 80018ea:	b21c      	sxth	r4, r3
 80018ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ee:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80018f2:	b29a      	uxth	r2, r3
 80018f4:	887b      	ldrh	r3, [r7, #2]
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	3b01      	subs	r3, #1
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	b21b      	sxth	r3, r3
 8001900:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001904:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001908:	4622      	mov	r2, r4
 800190a:	47a8      	blx	r5
 800190c:	4603      	mov	r3, r0
 800190e:	60fb      	str	r3, [r7, #12]

      if (font->font_type == FONT_TYPE_1BPP)
 8001910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001912:	791b      	ldrb	r3, [r3, #4]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d14d      	bne.n	80019b4 <_UG_PutChar+0x27c>
	  {
	      index = (bt - font->start_char)* font->char_height * bn;
 8001918:	7e3b      	ldrb	r3, [r7, #24]
 800191a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800191c:	8952      	ldrh	r2, [r2, #10]
 800191e:	1a9b      	subs	r3, r3, r2
 8001920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001922:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	8b7a      	ldrh	r2, [r7, #26]
 800192c:	fb02 f303 	mul.w	r3, r2, r3
 8001930:	617b      	str	r3, [r7, #20]
		  for( j=0;j<font->char_height;j++ )
 8001932:	2300      	movs	r3, #0
 8001934:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001936:	e036      	b.n	80019a6 <_UG_PutChar+0x26e>
		  {
			 c=actual_char_width;
 8001938:	8a7b      	ldrh	r3, [r7, #18]
 800193a:	83bb      	strh	r3, [r7, #28]
			 for( i=0;i<bn;i++ )
 800193c:	2300      	movs	r3, #0
 800193e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001940:	e02a      	b.n	8001998 <_UG_PutChar+0x260>
			 {
				b = font->p[index++];
 8001942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	1c59      	adds	r1, r3, #1
 800194a:	6179      	str	r1, [r7, #20]
 800194c:	4413      	add	r3, r2
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	767b      	strb	r3, [r7, #25]
				for( k=0;(k<8) && c;k++ )
 8001952:	2300      	movs	r3, #0
 8001954:	847b      	strh	r3, [r7, #34]	; 0x22
 8001956:	e016      	b.n	8001986 <_UG_PutChar+0x24e>
				{
				   if( b & 0x01 )
 8001958:	7e7b      	ldrb	r3, [r7, #25]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d004      	beq.n	800196c <_UG_PutChar+0x234>
				   {
					  push_pixel(fc);
 8001962:	883a      	ldrh	r2, [r7, #0]
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	4610      	mov	r0, r2
 8001968:	4798      	blx	r3
 800196a:	e003      	b.n	8001974 <_UG_PutChar+0x23c>
				   }
				   else
				   {
					  push_pixel(bc);
 800196c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4610      	mov	r0, r2
 8001972:	4798      	blx	r3
				   }
				   b >>= 1;
 8001974:	7e7b      	ldrb	r3, [r7, #25]
 8001976:	085b      	lsrs	r3, r3, #1
 8001978:	767b      	strb	r3, [r7, #25]
				   c--;
 800197a:	8bbb      	ldrh	r3, [r7, #28]
 800197c:	3b01      	subs	r3, #1
 800197e:	83bb      	strh	r3, [r7, #28]
				for( k=0;(k<8) && c;k++ )
 8001980:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001982:	3301      	adds	r3, #1
 8001984:	847b      	strh	r3, [r7, #34]	; 0x22
 8001986:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001988:	2b07      	cmp	r3, #7
 800198a:	d802      	bhi.n	8001992 <_UG_PutChar+0x25a>
 800198c:	8bbb      	ldrh	r3, [r7, #28]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e2      	bne.n	8001958 <_UG_PutChar+0x220>
			 for( i=0;i<bn;i++ )
 8001992:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001994:	3301      	adds	r3, #1
 8001996:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001998:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800199a:	8b7b      	ldrh	r3, [r7, #26]
 800199c:	429a      	cmp	r2, r3
 800199e:	d3d0      	bcc.n	8001942 <_UG_PutChar+0x20a>
		  for( j=0;j<font->char_height;j++ )
 80019a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019a2:	3301      	adds	r3, #1
 80019a4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80019a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019aa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80019ae:	4293      	cmp	r3, r2
 80019b0:	dbc2      	blt.n	8001938 <_UG_PutChar+0x200>
 80019b2:	e153      	b.n	8001c5c <_UG_PutChar+0x524>
				}
			 }
	 	 }
	  }
	  else if (font->font_type == FONT_TYPE_8BPP)
 80019b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019b6:	791b      	ldrb	r3, [r3, #4]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	f040 814f 	bne.w	8001c5c <_UG_PutChar+0x524>
	  {
		   index = (bt - font->start_char)* font->char_height * font->char_width;
 80019be:	7e3b      	ldrb	r3, [r7, #24]
 80019c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019c2:	8952      	ldrh	r2, [r2, #10]
 80019c4:	1a9b      	subs	r3, r3, r2
 80019c6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019c8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80019d2:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 80019d6:	fb02 f303 	mul.w	r3, r2, r3
 80019da:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 80019dc:	2300      	movs	r3, #0
 80019de:	84bb      	strh	r3, [r7, #36]	; 0x24
 80019e0:	e04a      	b.n	8001a78 <_UG_PutChar+0x340>
		   {
			  for( i=0;i<actual_char_width;i++ )
 80019e2:	2300      	movs	r3, #0
 80019e4:	84fb      	strh	r3, [r7, #38]	; 0x26
 80019e6:	e036      	b.n	8001a56 <_UG_PutChar+0x31e>
			  {
				 b = font->p[index++];
 80019e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	1c59      	adds	r1, r3, #1
 80019f0:	6179      	str	r1, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	767b      	strb	r3, [r7, #25]
                                //Blue component                                                           //Green component                                            //Red component
				 color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 80019f8:	883b      	ldrh	r3, [r7, #0]
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	7e7a      	ldrb	r2, [r7, #25]
 80019fe:	fb03 f202 	mul.w	r2, r3, r2
 8001a02:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	7e79      	ldrb	r1, [r7, #25]
 8001a08:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8001a0c:	fb01 f303 	mul.w	r3, r1, r3
 8001a10:	4413      	add	r3, r2
 8001a12:	121b      	asrs	r3, r3, #8
 8001a14:	b21b      	sxth	r3, r3
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	883b      	ldrh	r3, [r7, #0]
 8001a1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001a20:	7e79      	ldrb	r1, [r7, #25]
 8001a22:	fb03 f101 	mul.w	r1, r3, r1
 8001a26:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a28:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001a2c:	7e78      	ldrb	r0, [r7, #25]
 8001a2e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8001a32:	fb00 f303 	mul.w	r3, r0, r3
 8001a36:	440b      	add	r3, r1
 8001a38:	121b      	asrs	r3, r3, #8
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a40:	b21b      	sxth	r3, r3
 8001a42:	4313      	orrs	r3, r2
 8001a44:	b21b      	sxth	r3, r3
 8001a46:	823b      	strh	r3, [r7, #16]

				 push_pixel(color);
 8001a48:	8a3a      	ldrh	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4610      	mov	r0, r2
 8001a4e:	4798      	blx	r3
			  for( i=0;i<actual_char_width;i++ )
 8001a50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a52:	3301      	adds	r3, #1
 8001a54:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001a56:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001a58:	8a7b      	ldrh	r3, [r7, #18]
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d3c4      	bcc.n	80019e8 <_UG_PutChar+0x2b0>
			  }
			  index += font->char_width - actual_char_width;
 8001a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a60:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001a64:	461a      	mov	r2, r3
 8001a66:	8a7b      	ldrh	r3, [r7, #18]
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4413      	add	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
		   for( j=0;j<font->char_height;j++ )
 8001a72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a74:	3301      	adds	r3, #1
 8001a76:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001a78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a7a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001a7c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001a80:	4293      	cmp	r3, r2
 8001a82:	dbae      	blt.n	80019e2 <_UG_PutChar+0x2aa>
 8001a84:	e0ea      	b.n	8001c5c <_UG_PutChar+0x524>
	  }
   }
   else
   {
	   /*Not accelerated output*/
	   if (font->font_type == FONT_TYPE_1BPP)
 8001a86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a88:	791b      	ldrb	r3, [r3, #4]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d16e      	bne.n	8001b6c <_UG_PutChar+0x434>
	   {

		 SSD1963_WindowSet(x, x+actual_char_width-1, y, y+font->char_height-1);
 8001a8e:	f9b7 0004 	ldrsh.w	r0, [r7, #4]
 8001a92:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a96:	8a7b      	ldrh	r3, [r7, #18]
 8001a98:	4413      	add	r3, r2
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	461c      	mov	r4, r3
 8001a9e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001aa2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001aa6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001aa8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001aac:	4413      	add	r3, r2
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	460a      	mov	r2, r1
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	f000 f99c 	bl	8001df0 <SSD1963_WindowSet>
		 SSD1963_WriteMemoryStart();
 8001ab8:	f000 fa14 	bl	8001ee4 <SSD1963_WriteMemoryStart>

         index = (bt - font->start_char)* font->char_height * bn;
 8001abc:	7e3b      	ldrb	r3, [r7, #24]
 8001abe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ac0:	8952      	ldrh	r2, [r2, #10]
 8001ac2:	1a9b      	subs	r3, r3, r2
 8001ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ac6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	8b7a      	ldrh	r2, [r7, #26]
 8001ad0:	fb02 f303 	mul.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001ada:	e040      	b.n	8001b5e <_UG_PutChar+0x426>
         {
           xo = x;
 8001adc:	88bb      	ldrh	r3, [r7, #4]
 8001ade:	843b      	strh	r3, [r7, #32]
           c=actual_char_width;
 8001ae0:	8a7b      	ldrh	r3, [r7, #18]
 8001ae2:	83bb      	strh	r3, [r7, #28]
           for( i=0;i<bn;i++ )
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ae8:	e02f      	b.n	8001b4a <_UG_PutChar+0x412>
           {
             b = font->p[index++];
 8001aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	1c59      	adds	r1, r3, #1
 8001af2:	6179      	str	r1, [r7, #20]
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	767b      	strb	r3, [r7, #25]
             for( k=0;(k<8) && c;k++ )
 8001afa:	2300      	movs	r3, #0
 8001afc:	847b      	strh	r3, [r7, #34]	; 0x22
 8001afe:	e01b      	b.n	8001b38 <_UG_PutChar+0x400>
             {
               if( b & 0x01 )
 8001b00:	7e7b      	ldrb	r3, [r7, #25]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <_UG_PutChar+0x3e0>
               {
            	  SSD1963_ConsecutivePSet(fc);
 8001b0a:	883b      	ldrh	r3, [r7, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f000 f9f0 	bl	8001ef2 <SSD1963_ConsecutivePSet>
 8001b12:	e005      	b.n	8001b20 <_UG_PutChar+0x3e8>
 8001b14:	200001e0 	.word	0x200001e0
               }
               else
               {
            	  SSD1963_ConsecutivePSet(bc);
 8001b18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 f9e9 	bl	8001ef2 <SSD1963_ConsecutivePSet>
               }
               b >>= 1;
 8001b20:	7e7b      	ldrb	r3, [r7, #25]
 8001b22:	085b      	lsrs	r3, r3, #1
 8001b24:	767b      	strb	r3, [r7, #25]
               xo++;
 8001b26:	8c3b      	ldrh	r3, [r7, #32]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	843b      	strh	r3, [r7, #32]
               c--;
 8001b2c:	8bbb      	ldrh	r3, [r7, #28]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	83bb      	strh	r3, [r7, #28]
             for( k=0;(k<8) && c;k++ )
 8001b32:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b34:	3301      	adds	r3, #1
 8001b36:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b38:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b3a:	2b07      	cmp	r3, #7
 8001b3c:	d802      	bhi.n	8001b44 <_UG_PutChar+0x40c>
 8001b3e:	8bbb      	ldrh	r3, [r7, #28]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1dd      	bne.n	8001b00 <_UG_PutChar+0x3c8>
           for( i=0;i<bn;i++ )
 8001b44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001b46:	3301      	adds	r3, #1
 8001b48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001b4a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b4c:	8b7b      	ldrh	r3, [r7, #26]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3cb      	bcc.n	8001aea <_UG_PutChar+0x3b2>
             }
           }
           yo++;
 8001b52:	8bfb      	ldrh	r3, [r7, #30]
 8001b54:	3301      	adds	r3, #1
 8001b56:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8001b58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b62:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001b66:	4293      	cmp	r3, r2
 8001b68:	dbb8      	blt.n	8001adc <_UG_PutChar+0x3a4>
 8001b6a:	e077      	b.n	8001c5c <_UG_PutChar+0x524>
         }
      }
      else if (font->font_type == FONT_TYPE_8BPP)
 8001b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d173      	bne.n	8001c5c <_UG_PutChar+0x524>
      {
         index = (bt - font->start_char)* font->char_height * font->char_width;
 8001b74:	7e3b      	ldrb	r3, [r7, #24]
 8001b76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b78:	8952      	ldrh	r2, [r2, #10]
 8001b7a:	1a9b      	subs	r3, r3, r2
 8001b7c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b7e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b88:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	617b      	str	r3, [r7, #20]
         for( j=0;j<font->char_height;j++ )
 8001b92:	2300      	movs	r3, #0
 8001b94:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b96:	e057      	b.n	8001c48 <_UG_PutChar+0x510>
         {
            xo = x;
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001ba0:	e03e      	b.n	8001c20 <_UG_PutChar+0x4e8>
            {
               b = font->p[index++];
 8001ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	1c59      	adds	r1, r3, #1
 8001baa:	6179      	str	r1, [r7, #20]
 8001bac:	4413      	add	r3, r2
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	767b      	strb	r3, [r7, #25]

                           //Blue component                                                           //Green component                                            //Red component
			   color = ((((fc & 0xFF) * b + (bc & 0xFF) * (256 - b)) >> 8) & 0xFF) | ((((fc & 0xFF00) * b + (bc & 0xFF00) * (256 - b)) >> 8)  & 0xFF00) | ((((fc & 0xFF0000) * b + (bc & 0xFF0000) * (256 - b)) >> 8) & 0xFF0000);
 8001bb2:	883b      	ldrh	r3, [r7, #0]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	7e7a      	ldrb	r2, [r7, #25]
 8001bb8:	fb03 f202 	mul.w	r2, r3, r2
 8001bbc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	7e79      	ldrb	r1, [r7, #25]
 8001bc2:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	121b      	asrs	r3, r3, #8
 8001bce:	b21b      	sxth	r3, r3
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	b21a      	sxth	r2, r3
 8001bd4:	883b      	ldrh	r3, [r7, #0]
 8001bd6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001bda:	7e79      	ldrb	r1, [r7, #25]
 8001bdc:	fb03 f101 	mul.w	r1, r3, r1
 8001be0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001be2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001be6:	7e78      	ldrb	r0, [r7, #25]
 8001be8:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8001bec:	fb00 f303 	mul.w	r3, r0, r3
 8001bf0:	440b      	add	r3, r1
 8001bf2:	121b      	asrs	r3, r3, #8
 8001bf4:	b21b      	sxth	r3, r3
 8001bf6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bfa:	b21b      	sxth	r3, r3
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	823b      	strh	r3, [r7, #16]

               gui->pset(xo,yo,color);
 8001c02:	4b18      	ldr	r3, [pc, #96]	; (8001c64 <_UG_PutChar+0x52c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f9b7 0020 	ldrsh.w	r0, [r7, #32]
 8001c0c:	f9b7 101e 	ldrsh.w	r1, [r7, #30]
 8001c10:	8a3a      	ldrh	r2, [r7, #16]
 8001c12:	4798      	blx	r3
               xo++;
 8001c14:	8c3b      	ldrh	r3, [r7, #32]
 8001c16:	3301      	adds	r3, #1
 8001c18:	843b      	strh	r3, [r7, #32]
            for( i=0;i<actual_char_width;i++ )
 8001c1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001c20:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001c22:	8a7b      	ldrh	r3, [r7, #18]
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d3bc      	bcc.n	8001ba2 <_UG_PutChar+0x46a>
            }
            index += font->char_width - actual_char_width;
 8001c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c2a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	8a7b      	ldrh	r3, [r7, #18]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	461a      	mov	r2, r3
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	4413      	add	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]
            yo++;
 8001c3c:	8bfb      	ldrh	r3, [r7, #30]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	83fb      	strh	r3, [r7, #30]
         for( j=0;j<font->char_height;j++ )
 8001c42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001c48:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c4a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c4c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8001c50:	4293      	cmp	r3, r2
 8001c52:	dba1      	blt.n	8001b98 <_UG_PutChar+0x460>
 8001c54:	e002      	b.n	8001c5c <_UG_PutChar+0x524>
   if (bt < font->start_char || bt > font->end_char) return;
 8001c56:	bf00      	nop
 8001c58:	e000      	b.n	8001c5c <_UG_PutChar+0x524>
   if ( !bn ) return;
 8001c5a:	bf00      	nop
         }
      }
   }
}
 8001c5c:	3728      	adds	r7, #40	; 0x28
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bdb0      	pop	{r4, r5, r7, pc}
 8001c62:	bf00      	nop
 8001c64:	200001e0 	.word	0x200001e0

08001c68 <UG_DriverRegister>:

/* -------------------------------------------------------------------------------- */
/* -- DRIVER FUNCTIONS                                                           -- */
/* -------------------------------------------------------------------------------- */
void UG_DriverRegister( UG_U8 type, void* driver )
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	4603      	mov	r3, r0
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	71fb      	strb	r3, [r7, #7]
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8001c74:	79fb      	ldrb	r3, [r7, #7]
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d810      	bhi.n	8001c9c <UG_DriverRegister+0x34>

   gui->driver[type].driver = driver;
 8001c7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ca8 <UG_DriverRegister+0x40>)
 8001c7c:	681a      	ldr	r2, [r3, #0]
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	3309      	adds	r3, #9
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	4413      	add	r3, r2
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	605a      	str	r2, [r3, #4]
   gui->driver[type].state = DRIVER_REGISTERED | DRIVER_ENABLED;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <UG_DriverRegister+0x40>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	3309      	adds	r3, #9
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4413      	add	r3, r2
 8001c96:	2203      	movs	r2, #3
 8001c98:	721a      	strb	r2, [r3, #8]
 8001c9a:	e000      	b.n	8001c9e <UG_DriverRegister+0x36>
   if ( type >= NUMBER_OF_DRIVERS ) return;
 8001c9c:	bf00      	nop
}
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	200001e0 	.word	0x200001e0

08001cac <SSD1963_Reset>:


//////      Public Function Definitions  ///////

void SSD1963_Reset()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
    write_command(0x01);         //Software reset
 8001cb0:	2001      	movs	r0, #1
 8001cb2:	f000 fa3e 	bl	8002132 <write_command>
    HAL_Delay(10);
 8001cb6:	200a      	movs	r0, #10
 8001cb8:	f000 fb24 	bl	8002304 <HAL_Delay>
}
 8001cbc:	bf00      	nop
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <SSD1963_Init>:

void SSD1963_Init()
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
    SSD1963_Reset();                    //Software reset
 8001cc4:	f7ff fff2 	bl	8001cac <SSD1963_Reset>

    write_command(0xe0);
 8001cc8:	20e0      	movs	r0, #224	; 0xe0
 8001cca:	f000 fa32 	bl	8002132 <write_command>
    write_data(0x01);            //Enable PLL
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f000 fa4a 	bl	8002168 <write_data>
    //HAL_Delay(50);

    write_command(0xe0);
 8001cd4:	20e0      	movs	r0, #224	; 0xe0
 8001cd6:	f000 fa2c 	bl	8002132 <write_command>
    write_data(0x03);            //Lock PLL
 8001cda:	2003      	movs	r0, #3
 8001cdc:	f000 fa44 	bl	8002168 <write_data>
    //HAL_Delay(50);
    SSD1963_Reset();                    //Software reset
 8001ce0:	f7ff ffe4 	bl	8001cac <SSD1963_Reset>
    //HAL_Delay(50);

    write_command(0xb0);  //set LCD mode set TFT 18Bits mode
 8001ce4:	20b0      	movs	r0, #176	; 0xb0
 8001ce6:	f000 fa24 	bl	8002132 <write_command>

	write_data(0x08); //set TFT Mode - 0x0c
 8001cea:	2008      	movs	r0, #8
 8001cec:	f000 fa3c 	bl	8002168 <write_data>
    write_data(0x80); //set TFT mode and hsync + vsync + DEN mode
 8001cf0:	2080      	movs	r0, #128	; 0x80
 8001cf2:	f000 fa39 	bl	8002168 <write_data>
    write_data(0x01); //set horizontal size = 480 - 1 hightbyte
 8001cf6:	2001      	movs	r0, #1
 8001cf8:	f000 fa36 	bl	8002168 <write_data>
    write_data(0xdf); //set horizontal size = 480 - 1 lowbyte
 8001cfc:	20df      	movs	r0, #223	; 0xdf
 8001cfe:	f000 fa33 	bl	8002168 <write_data>
    write_data(0x01); //set vertical sive = 272 - 1 hightbyte
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 fa30 	bl	8002168 <write_data>
    write_data(0x0f); //set vertical size = 272 - 1 lowbyte
 8001d08:	200f      	movs	r0, #15
 8001d0a:	f000 fa2d 	bl	8002168 <write_data>
    write_data(0x00); //set even/odd line RGB seq
 8001d0e:	2000      	movs	r0, #0
 8001d10:	f000 fa2a 	bl	8002168 <write_data>

    write_command(0xf0); //set pixel data I/F format = 16 bit
 8001d14:	20f0      	movs	r0, #240	; 0xf0
 8001d16:	f000 fa0c 	bl	8002132 <write_command>
    write_data(0x03);
 8001d1a:	2003      	movs	r0, #3
 8001d1c:	f000 fa24 	bl	8002168 <write_data>

    //write_command(0x3a); //set RGB format = 6 6 6
    //write_data(0x60);

    write_command(0xe6); //set PCLK freq = 4.94 MHz; pixel clock frequency
 8001d20:	20e6      	movs	r0, #230	; 0xe6
 8001d22:	f000 fa06 	bl	8002132 <write_command>
    write_data(0x01);    //02
 8001d26:	2001      	movs	r0, #1
 8001d28:	f000 fa1e 	bl	8002168 <write_data>
    write_data(0x45);    //ff
 8001d2c:	2045      	movs	r0, #69	; 0x45
 8001d2e:	f000 fa1b 	bl	8002168 <write_data>
    write_data(0x47);    //ff
 8001d32:	2047      	movs	r0, #71	; 0x47
 8001d34:	f000 fa18 	bl	8002168 <write_data>

    write_command(0xb4); //set HBP
 8001d38:	20b4      	movs	r0, #180	; 0xb4
 8001d3a:	f000 f9fa 	bl	8002132 <write_command>
    write_data(0x02); //set Hsync = 600
 8001d3e:	2002      	movs	r0, #2
 8001d40:	f000 fa12 	bl	8002168 <write_data>
    write_data(0x0d);
 8001d44:	200d      	movs	r0, #13
 8001d46:	f000 fa0f 	bl	8002168 <write_data>
    write_data(0x00);    //set HBP 68
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f000 fa0c 	bl	8002168 <write_data>
    write_data(0x2b);
 8001d50:	202b      	movs	r0, #43	; 0x2b
 8001d52:	f000 fa09 	bl	8002168 <write_data>
    write_data(0x28);    //set VBP 16
 8001d56:	2028      	movs	r0, #40	; 0x28
 8001d58:	f000 fa06 	bl	8002168 <write_data>
    write_data(0x00);    //Set Hsync start position
 8001d5c:	2000      	movs	r0, #0
 8001d5e:	f000 fa03 	bl	8002168 <write_data>
    write_data(0x00);
 8001d62:	2000      	movs	r0, #0
 8001d64:	f000 fa00 	bl	8002168 <write_data>
    write_data(0x00);    //set Hsync pulse subpixel start pos
 8001d68:	2000      	movs	r0, #0
 8001d6a:	f000 f9fd 	bl	8002168 <write_data>

    write_command(0xb6); //set VBP
 8001d6e:	20b6      	movs	r0, #182	; 0xb6
 8001d70:	f000 f9df 	bl	8002132 <write_command>
    write_data(0x01);    //set Vsync total 360
 8001d74:	2001      	movs	r0, #1
 8001d76:	f000 f9f7 	bl	8002168 <write_data>
    write_data(0x1d);
 8001d7a:	201d      	movs	r0, #29
 8001d7c:	f000 f9f4 	bl	8002168 <write_data>
    write_data(0x00);    //set VBP = 19
 8001d80:	2000      	movs	r0, #0
 8001d82:	f000 f9f1 	bl	8002168 <write_data>
    write_data(0x0c);
 8001d86:	200c      	movs	r0, #12
 8001d88:	f000 f9ee 	bl	8002168 <write_data>
    write_data(0x09);    //set Vsync pulse 8
 8001d8c:	2009      	movs	r0, #9
 8001d8e:	f000 f9eb 	bl	8002168 <write_data>
    write_data(0x00);    //set Vsync pulse start pos
 8001d92:	2000      	movs	r0, #0
 8001d94:	f000 f9e8 	bl	8002168 <write_data>
    write_data(0x00);
 8001d98:	2000      	movs	r0, #0
 8001d9a:	f000 f9e5 	bl	8002168 <write_data>

    write_command(0x2a); //set column address
 8001d9e:	202a      	movs	r0, #42	; 0x2a
 8001da0:	f000 f9c7 	bl	8002132 <write_command>
    write_data(0x00);    //set start column address 0
 8001da4:	2000      	movs	r0, #0
 8001da6:	f000 f9df 	bl	8002168 <write_data>
    write_data(0x00);
 8001daa:	2000      	movs	r0, #0
 8001dac:	f000 f9dc 	bl	8002168 <write_data>
    write_data(0x01);    //set end column address = 479
 8001db0:	2001      	movs	r0, #1
 8001db2:	f000 f9d9 	bl	8002168 <write_data>
    write_data(0xdf);
 8001db6:	20df      	movs	r0, #223	; 0xdf
 8001db8:	f000 f9d6 	bl	8002168 <write_data>

    write_command(0x2b); //set page address
 8001dbc:	202b      	movs	r0, #43	; 0x2b
 8001dbe:	f000 f9b8 	bl	8002132 <write_command>
    write_data(0x00);    //set start page address = 0
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f000 f9d0 	bl	8002168 <write_data>
    write_data(0x00);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f9cd 	bl	8002168 <write_data>
    write_data(0x01);    //set end column address = 479
 8001dce:	2001      	movs	r0, #1
 8001dd0:	f000 f9ca 	bl	8002168 <write_data>
    write_data(0x0f);
 8001dd4:	200f      	movs	r0, #15
 8001dd6:	f000 f9c7 	bl	8002168 <write_data>

    write_command(0x13); //set normal mode
 8001dda:	2013      	movs	r0, #19
 8001ddc:	f000 f9a9 	bl	8002132 <write_command>
    write_command(0x38); //set normal mode
 8001de0:	2038      	movs	r0, #56	; 0x38
 8001de2:	f000 f9a6 	bl	8002132 <write_command>
    write_command(0x29); //set display on
 8001de6:	2029      	movs	r0, #41	; 0x29
 8001de8:	f000 f9a3 	bl	8002132 <write_command>
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <SSD1963_WindowSet>:

void SSD1963_WindowSet(unsigned int s_x, unsigned int e_x, unsigned int s_y, unsigned int e_y)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
 8001dfc:	603b      	str	r3, [r7, #0]
    uint16_t data[4];

    data[0] = ((s_x)>>8) & 0x00FF;                   //SET start column address
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	823b      	strh	r3, [r7, #16]
    data[1] = (s_x) & 0x00FF;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_x)>>8) & 0x00FF;			        //SET end column address
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	0a1b      	lsrs	r3, r3, #8
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	b2db      	uxtb	r3, r3
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_x) & 0x00FF;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	b29b      	uxth	r3, r3
 8001e28:	82fb      	strh	r3, [r7, #22]
	write_command(0x2a);		        //SET column address
 8001e2a:	202a      	movs	r0, #42	; 0x2a
 8001e2c:	f000 f981 	bl	8002132 <write_command>
    write_multi_data(data, 4);
 8001e30:	f107 0310 	add.w	r3, r7, #16
 8001e34:	2104      	movs	r1, #4
 8001e36:	4618      	mov	r0, r3
 8001e38:	f000 f9b0 	bl	800219c <write_multi_data>


    data[0] = ((s_y)>>8) & 0x00FF;                   //SET start row address
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	0a1b      	lsrs	r3, r3, #8
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	b29b      	uxth	r3, r3
 8001e46:	823b      	strh	r3, [r7, #16]
    data[1] = (s_y) & 0x00FF;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	827b      	strh	r3, [r7, #18]
    data[2] = ((e_y)>>8) & 0x00FF;			        //SET end row address
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	0a1b      	lsrs	r3, r3, #8
 8001e56:	b29b      	uxth	r3, r3
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	82bb      	strh	r3, [r7, #20]
    data[3] = (e_y) & 0x00FF;
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b29b      	uxth	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	b29b      	uxth	r3, r3
 8001e66:	82fb      	strh	r3, [r7, #22]
	write_command(0x2b);		        //SET row address
 8001e68:	202b      	movs	r0, #43	; 0x2b
 8001e6a:	f000 f962 	bl	8002132 <write_command>
    write_multi_data(data, 4);
 8001e6e:	f107 0310 	add.w	r3, r7, #16
 8001e72:	2104      	movs	r1, #4
 8001e74:	4618      	mov	r0, r3
 8001e76:	f000 f991 	bl	800219c <write_multi_data>
}
 8001e7a:	bf00      	nop
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <SSD1963_PSet>:

void SSD1963_PSet(UG_S16 x, UG_S16 y, UG_COLOR c)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	80fb      	strh	r3, [r7, #6]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	80bb      	strh	r3, [r7, #4]
 8001e90:	4613      	mov	r3, r2
 8001e92:	807b      	strh	r3, [r7, #2]
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8001e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db1f      	blt.n	8001edc <SSD1963_PSet+0x5a>
 8001e9c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ea0:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001ea4:	da1a      	bge.n	8001edc <SSD1963_PSet+0x5a>
 8001ea6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db16      	blt.n	8001edc <SSD1963_PSet+0x5a>
 8001eae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001eb2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001eb6:	da11      	bge.n	8001edc <SSD1963_PSet+0x5a>

    SSD1963_WindowSet(x, x + 1, y, y + 1);
 8001eb8:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001ebc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001ec8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	f7ff ff8f 	bl	8001df0 <SSD1963_WindowSet>
    write_data(c);
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f947 	bl	8002168 <write_data>
 8001eda:	e000      	b.n	8001ede <SSD1963_PSet+0x5c>
    if((x < 0) ||(x >= DISPLAY_WIDTH) || (y < 0) || (y >= DISPLAY_HEIGHT)) return;
 8001edc:	bf00      	nop
}
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}

08001ee4 <SSD1963_WriteMemoryStart>:

void SSD1963_WriteMemoryStart()  // command to start writing pixels to frame buffer. Use before SSD1963_ConsecutivePSet
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
	write_command(0x2c);
 8001ee8:	202c      	movs	r0, #44	; 0x2c
 8001eea:	f000 f922 	bl	8002132 <write_command>
}
 8001eee:	bf00      	nop
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <SSD1963_ConsecutivePSet>:

void SSD1963_ConsecutivePSet(UG_COLOR c)  // Write pixel data without setting frame. Use SSD1963_WriteMemoryStart() before first pixel
{
 8001ef2:	b580      	push	{r7, lr}
 8001ef4:	b082      	sub	sp, #8
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	4603      	mov	r3, r0
 8001efa:	80fb      	strh	r3, [r7, #6]
    write_data(c);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f000 f932 	bl	8002168 <write_data>
}
 8001f04:	bf00      	nop
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HW_FillFrame>:

UG_RESULT HW_FillFrame(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, UG_COLOR c)
{
 8001f0c:	b590      	push	{r4, r7, lr}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4604      	mov	r4, r0
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4623      	mov	r3, r4
 8001f1c:	80fb      	strh	r3, [r7, #6]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80bb      	strh	r3, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	807b      	strh	r3, [r7, #2]
 8001f26:	4613      	mov	r3, r2
 8001f28:	803b      	strh	r3, [r7, #0]
    uint16_t loopx, loopy;

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8001f2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0d      	blt.n	8001f4e <HW_FillFrame+0x42>
 8001f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f36:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f3a:	da08      	bge.n	8001f4e <HW_FillFrame+0x42>
 8001f3c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	db04      	blt.n	8001f4e <HW_FillFrame+0x42>
 8001f44:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001f48:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001f4c:	db02      	blt.n	8001f54 <HW_FillFrame+0x48>
 8001f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f52:	e03c      	b.n	8001fce <HW_FillFrame+0xc2>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8001f54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	db0d      	blt.n	8001f78 <HW_FillFrame+0x6c>
 8001f5c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001f60:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8001f64:	da08      	bge.n	8001f78 <HW_FillFrame+0x6c>
 8001f66:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	db04      	blt.n	8001f78 <HW_FillFrame+0x6c>
 8001f6e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f72:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001f76:	db02      	blt.n	8001f7e <HW_FillFrame+0x72>
 8001f78:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7c:	e027      	b.n	8001fce <HW_FillFrame+0xc2>

    SSD1963_WindowSet(x1,x2,y1,y2);
 8001f7e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001f82:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8001f86:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f8a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001f8e:	f7ff ff2f 	bl	8001df0 <SSD1963_WindowSet>

    write_command(0x2c);
 8001f92:	202c      	movs	r0, #44	; 0x2c
 8001f94:	f000 f8cd 	bl	8002132 <write_command>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8001f98:	88fb      	ldrh	r3, [r7, #6]
 8001f9a:	81fb      	strh	r3, [r7, #14]
 8001f9c:	e011      	b.n	8001fc2 <HW_FillFrame+0xb6>
    {
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8001f9e:	88bb      	ldrh	r3, [r7, #4]
 8001fa0:	81bb      	strh	r3, [r7, #12]
 8001fa2:	e006      	b.n	8001fb2 <HW_FillFrame+0xa6>
        {
            write_data(c);
 8001fa4:	8c3b      	ldrh	r3, [r7, #32]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f8de 	bl	8002168 <write_data>
        for (loopy = y1; loopy < y2 + 1; loopy++)
 8001fac:	89bb      	ldrh	r3, [r7, #12]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	81bb      	strh	r3, [r7, #12]
 8001fb2:	f9b7 2000 	ldrsh.w	r2, [r7]
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	daf3      	bge.n	8001fa4 <HW_FillFrame+0x98>
    for (loopx = x1; loopx < x2 + 1; loopx++)
 8001fbc:	89fb      	ldrh	r3, [r7, #14]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	81fb      	strh	r3, [r7, #14]
 8001fc2:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001fc6:	89fb      	ldrh	r3, [r7, #14]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	dae8      	bge.n	8001f9e <HW_FillFrame+0x92>
        }
    }

    return UG_RESULT_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd90      	pop	{r4, r7, pc}

08001fd6 <HW_DrawLine>:

UG_RESULT HW_DrawLine( UG_S16 x1 , UG_S16 y1 , UG_S16 x2 , UG_S16 y2 , UG_COLOR c )
{
 8001fd6:	b590      	push	{r4, r7, lr}
 8001fd8:	b085      	sub	sp, #20
 8001fda:	af02      	add	r7, sp, #8
 8001fdc:	4604      	mov	r4, r0
 8001fde:	4608      	mov	r0, r1
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	80fb      	strh	r3, [r7, #6]
 8001fe8:	4603      	mov	r3, r0
 8001fea:	80bb      	strh	r3, [r7, #4]
 8001fec:	460b      	mov	r3, r1
 8001fee:	807b      	strh	r3, [r7, #2]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	803b      	strh	r3, [r7, #0]
    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 8001ff4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	db0d      	blt.n	8002018 <HW_DrawLine+0x42>
 8001ffc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002000:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002004:	da08      	bge.n	8002018 <HW_DrawLine+0x42>
 8002006:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db04      	blt.n	8002018 <HW_DrawLine+0x42>
 800200e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002012:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002016:	db02      	blt.n	800201e <HW_DrawLine+0x48>
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	e031      	b.n	8002082 <HW_DrawLine+0xac>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 800201e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002022:	2b00      	cmp	r3, #0
 8002024:	db0d      	blt.n	8002042 <HW_DrawLine+0x6c>
 8002026:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800202a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800202e:	da08      	bge.n	8002042 <HW_DrawLine+0x6c>
 8002030:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002034:	2b00      	cmp	r3, #0
 8002036:	db04      	blt.n	8002042 <HW_DrawLine+0x6c>
 8002038:	f9b7 3000 	ldrsh.w	r3, [r7]
 800203c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002040:	db02      	blt.n	8002048 <HW_DrawLine+0x72>
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
 8002046:	e01c      	b.n	8002082 <HW_DrawLine+0xac>

    // If it is a vertical or a horizontal line, draw it.
    // If not, then use original drawline routine.
    if ((x1 == x2) || (y1 == y2))
 8002048:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800204c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002050:	429a      	cmp	r2, r3
 8002052:	d005      	beq.n	8002060 <HW_DrawLine+0x8a>
 8002054:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002058:	f9b7 3000 	ldrsh.w	r3, [r7]
 800205c:	429a      	cmp	r2, r3
 800205e:	d10e      	bne.n	800207e <HW_DrawLine+0xa8>
    {
        HW_FillFrame(x1, y1, x2, y2, c);
 8002060:	f9b7 4000 	ldrsh.w	r4, [r7]
 8002064:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8002068:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800206c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002070:	8b3b      	ldrh	r3, [r7, #24]
 8002072:	9300      	str	r3, [sp, #0]
 8002074:	4623      	mov	r3, r4
 8002076:	f7ff ff49 	bl	8001f0c <HW_FillFrame>
        return UG_RESULT_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e001      	b.n	8002082 <HW_DrawLine+0xac>
    }

    return UG_RESULT_FAIL;
 800207e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002082:	4618      	mov	r0, r3
 8002084:	370c      	adds	r7, #12
 8002086:	46bd      	mov	sp, r7
 8002088:	bd90      	pop	{r4, r7, pc}

0800208a <HW_DrawImage>:

UG_RESULT HW_DrawImage(UG_S16 x1, UG_S16 y1, UG_S16 x2, UG_S16 y2, uint8_t *image, uint16_t pSize)
{
 800208a:	b590      	push	{r4, r7, lr}
 800208c:	b083      	sub	sp, #12
 800208e:	af00      	add	r7, sp, #0
 8002090:	4604      	mov	r4, r0
 8002092:	4608      	mov	r0, r1
 8002094:	4611      	mov	r1, r2
 8002096:	461a      	mov	r2, r3
 8002098:	4623      	mov	r3, r4
 800209a:	80fb      	strh	r3, [r7, #6]
 800209c:	4603      	mov	r3, r0
 800209e:	80bb      	strh	r3, [r7, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	807b      	strh	r3, [r7, #2]
 80020a4:	4613      	mov	r3, r2
 80020a6:	803b      	strh	r3, [r7, #0]

    if((x1 < 0) ||(x1 >= DISPLAY_WIDTH) || (y1 < 0) || (y1 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80020a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	db0d      	blt.n	80020cc <HW_DrawImage+0x42>
 80020b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020b4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80020b8:	da08      	bge.n	80020cc <HW_DrawImage+0x42>
 80020ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	db04      	blt.n	80020cc <HW_DrawImage+0x42>
 80020c2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020c6:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80020ca:	db02      	blt.n	80020d2 <HW_DrawImage+0x48>
 80020cc:	f04f 33ff 	mov.w	r3, #4294967295
 80020d0:	e02b      	b.n	800212a <HW_DrawImage+0xa0>
    if((x2 < 0) ||(x2 >= DISPLAY_WIDTH) || (y2 < 0) || (y2 >= DISPLAY_HEIGHT)) return UG_RESULT_FAIL;
 80020d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	db0d      	blt.n	80020f6 <HW_DrawImage+0x6c>
 80020da:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80020de:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80020e2:	da08      	bge.n	80020f6 <HW_DrawImage+0x6c>
 80020e4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	db04      	blt.n	80020f6 <HW_DrawImage+0x6c>
 80020ec:	f9b7 3000 	ldrsh.w	r3, [r7]
 80020f0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80020f4:	db02      	blt.n	80020fc <HW_DrawImage+0x72>
 80020f6:	f04f 33ff 	mov.w	r3, #4294967295
 80020fa:	e016      	b.n	800212a <HW_DrawImage+0xa0>

    SSD1963_WindowSet(x1,x2,y1,y2);
 80020fc:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002100:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8002104:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002108:	f9b7 3000 	ldrsh.w	r3, [r7]
 800210c:	f7ff fe70 	bl	8001df0 <SSD1963_WindowSet>

    write_command(0x2c);
 8002110:	202c      	movs	r0, #44	; 0x2c
 8002112:	f000 f80e 	bl	8002132 <write_command>
    write_multi_data(image, pSize*3);
 8002116:	8bbb      	ldrh	r3, [r7, #28]
 8002118:	461a      	mov	r2, r3
 800211a:	0052      	lsls	r2, r2, #1
 800211c:	4413      	add	r3, r2
 800211e:	b29b      	uxth	r3, r3
 8002120:	4619      	mov	r1, r3
 8002122:	69b8      	ldr	r0, [r7, #24]
 8002124:	f000 f83a 	bl	800219c <write_multi_data>

    return UG_RESULT_OK;
 8002128:	2300      	movs	r3, #0
}
 800212a:	4618      	mov	r0, r3
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	bd90      	pop	{r4, r7, pc}

08002132 <write_command>:


//////      Private Function Definitions   ///////

void write_command(uint8_t index)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	4603      	mov	r3, r0
 800213a:	71fb      	strb	r3, [r7, #7]
	LCD_REG	= index;
 800213c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8002140:	79fa      	ldrb	r2, [r7, #7]
 8002142:	b292      	uxth	r2, r2
 8002144:	801a      	strh	r2, [r3, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);  // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002146:	2300      	movs	r3, #0
 8002148:	81fb      	strh	r3, [r7, #14]
 800214a:	e002      	b.n	8002152 <write_command+0x20>
 800214c:	89fb      	ldrh	r3, [r7, #14]
 800214e:	3301      	adds	r3, #1
 8002150:	81fb      	strh	r3, [r7, #14]
 8002152:	89fb      	ldrh	r3, [r7, #14]
 8002154:	2b0b      	cmp	r3, #11
 8002156:	d9f9      	bls.n	800214c <write_command+0x1a>
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
	...

08002168 <write_data>:


void write_data(DATA_t data)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	4603      	mov	r3, r0
 8002170:	80fb      	strh	r3, [r7, #6]
	LCD_RAM = data;
 8002172:	4a09      	ldr	r2, [pc, #36]	; (8002198 <write_data+0x30>)
 8002174:	88fb      	ldrh	r3, [r7, #6]
 8002176:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0; i<FMC_DELAY_CYCLES; i++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 8002178:	2300      	movs	r3, #0
 800217a:	81fb      	strh	r3, [r7, #14]
 800217c:	e002      	b.n	8002184 <write_data+0x1c>
 800217e:	89fb      	ldrh	r3, [r7, #14]
 8002180:	3301      	adds	r3, #1
 8002182:	81fb      	strh	r3, [r7, #14]
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	2b0b      	cmp	r3, #11
 8002188:	d9f9      	bls.n	800217e <write_data+0x16>
 }
 800218a:	bf00      	nop
 800218c:	bf00      	nop
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	60000100 	.word	0x60000100

0800219c <write_multi_data>:
{
	return LCD_RAM;
}

void write_multi_data(DATA_t *data, uint16_t size)
{
 800219c:	b480      	push	{r7}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	460b      	mov	r3, r1
 80021a6:	807b      	strh	r3, [r7, #2]
    for(int16_t i = 0; i < size; i++)
 80021a8:	2300      	movs	r3, #0
 80021aa:	81fb      	strh	r3, [r7, #14]
 80021ac:	e016      	b.n	80021dc <write_multi_data+0x40>
    {
    	LCD_RAM = data[i];
 80021ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <write_multi_data+0x58>)
 80021ba:	881b      	ldrh	r3, [r3, #0]
 80021bc:	8013      	strh	r3, [r2, #0]
    	for(uint16_t j = 0; j<FMC_DELAY_CYCLES; j++);   // delay to allow FMC to complete write operation, replace with something that actually checks for FMC completion?
 80021be:	2300      	movs	r3, #0
 80021c0:	81bb      	strh	r3, [r7, #12]
 80021c2:	e002      	b.n	80021ca <write_multi_data+0x2e>
 80021c4:	89bb      	ldrh	r3, [r7, #12]
 80021c6:	3301      	adds	r3, #1
 80021c8:	81bb      	strh	r3, [r7, #12]
 80021ca:	89bb      	ldrh	r3, [r7, #12]
 80021cc:	2b0b      	cmp	r3, #11
 80021ce:	d9f9      	bls.n	80021c4 <write_multi_data+0x28>
    for(int16_t i = 0; i < size; i++)
 80021d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	3301      	adds	r3, #1
 80021d8:	b29b      	uxth	r3, r3
 80021da:	81fb      	strh	r3, [r7, #14]
 80021dc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	dbe3      	blt.n	80021ae <write_multi_data+0x12>
    }
}
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	3714      	adds	r7, #20
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr
 80021f4:	60000100 	.word	0x60000100

080021f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80021f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002230 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80021fc:	480d      	ldr	r0, [pc, #52]	; (8002234 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80021fe:	490e      	ldr	r1, [pc, #56]	; (8002238 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002200:	4a0e      	ldr	r2, [pc, #56]	; (800223c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a0b      	ldr	r2, [pc, #44]	; (8002240 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002214:	4c0b      	ldr	r4, [pc, #44]	; (8002244 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002222:	f7fe ffbf 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002226:	f001 f995 	bl	8003554 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800222a:	f7fe fd6d 	bl	8000d08 <main>
  bx  lr    
 800222e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002230:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002234:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002238:	200000b8 	.word	0x200000b8
  ldr r2, =_sidata
 800223c:	08013450 	.word	0x08013450
  ldr r2, =_sbss
 8002240:	200000b8 	.word	0x200000b8
  ldr r4, =_ebss
 8002244:	20000330 	.word	0x20000330

08002248 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002248:	e7fe      	b.n	8002248 <ADC_IRQHandler>

0800224a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800224a:	b580      	push	{r7, lr}
 800224c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800224e:	2003      	movs	r0, #3
 8002250:	f000 f92e 	bl	80024b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002254:	200f      	movs	r0, #15
 8002256:	f000 f805 	bl	8002264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800225a:	f7fe fea7 	bl	8000fac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b082      	sub	sp, #8
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800226c:	4b12      	ldr	r3, [pc, #72]	; (80022b8 <HAL_InitTick+0x54>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_InitTick+0x58>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	4619      	mov	r1, r3
 8002276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800227a:	fbb3 f3f1 	udiv	r3, r3, r1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4618      	mov	r0, r3
 8002284:	f000 f93b 	bl	80024fe <HAL_SYSTICK_Config>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e00e      	b.n	80022b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	2b0f      	cmp	r3, #15
 8002296:	d80a      	bhi.n	80022ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002298:	2200      	movs	r2, #0
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	f04f 30ff 	mov.w	r0, #4294967295
 80022a0:	f000 f911 	bl	80024c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022a4:	4a06      	ldr	r2, [pc, #24]	; (80022c0 <HAL_InitTick+0x5c>)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e000      	b.n	80022b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	2000005c 	.word	0x2000005c
 80022bc:	20000064 	.word	0x20000064
 80022c0:	20000060 	.word	0x20000060

080022c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022c8:	4b06      	ldr	r3, [pc, #24]	; (80022e4 <HAL_IncTick+0x20>)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	4b06      	ldr	r3, [pc, #24]	; (80022e8 <HAL_IncTick+0x24>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	4a04      	ldr	r2, [pc, #16]	; (80022e8 <HAL_IncTick+0x24>)
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	20000064 	.word	0x20000064
 80022e8:	200001e4 	.word	0x200001e4

080022ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return uwTick;
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <HAL_GetTick+0x14>)
 80022f2:	681b      	ldr	r3, [r3, #0]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	200001e4 	.word	0x200001e4

08002304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800230c:	f7ff ffee 	bl	80022ec <HAL_GetTick>
 8002310:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f1b3 3fff 	cmp.w	r3, #4294967295
 800231c:	d005      	beq.n	800232a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800231e:	4b0a      	ldr	r3, [pc, #40]	; (8002348 <HAL_Delay+0x44>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4413      	add	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800232a:	bf00      	nop
 800232c:	f7ff ffde 	bl	80022ec <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	429a      	cmp	r2, r3
 800233a:	d8f7      	bhi.n	800232c <HAL_Delay+0x28>
  {
  }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3710      	adds	r7, #16
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	20000064 	.word	0x20000064

0800234c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800235c:	4b0b      	ldr	r3, [pc, #44]	; (800238c <__NVIC_SetPriorityGrouping+0x40>)
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002362:	68ba      	ldr	r2, [r7, #8]
 8002364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002368:	4013      	ands	r3, r2
 800236a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <__NVIC_SetPriorityGrouping+0x44>)
 8002376:	4313      	orrs	r3, r2
 8002378:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800237a:	4a04      	ldr	r2, [pc, #16]	; (800238c <__NVIC_SetPriorityGrouping+0x40>)
 800237c:	68bb      	ldr	r3, [r7, #8]
 800237e:	60d3      	str	r3, [r2, #12]
}
 8002380:	bf00      	nop
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00
 8002390:	05fa0000 	.word	0x05fa0000

08002394 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <__NVIC_GetPriorityGrouping+0x18>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	0a1b      	lsrs	r3, r3, #8
 800239e:	f003 0307 	and.w	r3, r3, #7
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000ed00 	.word	0xe000ed00

080023b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	4603      	mov	r3, r0
 80023b8:	6039      	str	r1, [r7, #0]
 80023ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	db0a      	blt.n	80023da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	490c      	ldr	r1, [pc, #48]	; (80023fc <__NVIC_SetPriority+0x4c>)
 80023ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ce:	0112      	lsls	r2, r2, #4
 80023d0:	b2d2      	uxtb	r2, r2
 80023d2:	440b      	add	r3, r1
 80023d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023d8:	e00a      	b.n	80023f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	b2da      	uxtb	r2, r3
 80023de:	4908      	ldr	r1, [pc, #32]	; (8002400 <__NVIC_SetPriority+0x50>)
 80023e0:	79fb      	ldrb	r3, [r7, #7]
 80023e2:	f003 030f 	and.w	r3, r3, #15
 80023e6:	3b04      	subs	r3, #4
 80023e8:	0112      	lsls	r2, r2, #4
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	440b      	add	r3, r1
 80023ee:	761a      	strb	r2, [r3, #24]
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr
 80023fc:	e000e100 	.word	0xe000e100
 8002400:	e000ed00 	.word	0xe000ed00

08002404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002404:	b480      	push	{r7}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	60f8      	str	r0, [r7, #12]
 800240c:	60b9      	str	r1, [r7, #8]
 800240e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f1c3 0307 	rsb	r3, r3, #7
 800241e:	2b04      	cmp	r3, #4
 8002420:	bf28      	it	cs
 8002422:	2304      	movcs	r3, #4
 8002424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	3304      	adds	r3, #4
 800242a:	2b06      	cmp	r3, #6
 800242c:	d902      	bls.n	8002434 <NVIC_EncodePriority+0x30>
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	3b03      	subs	r3, #3
 8002432:	e000      	b.n	8002436 <NVIC_EncodePriority+0x32>
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002438:	f04f 32ff 	mov.w	r2, #4294967295
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	43da      	mvns	r2, r3
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	401a      	ands	r2, r3
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800244c:	f04f 31ff 	mov.w	r1, #4294967295
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	fa01 f303 	lsl.w	r3, r1, r3
 8002456:	43d9      	mvns	r1, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800245c:	4313      	orrs	r3, r2
         );
}
 800245e:	4618      	mov	r0, r3
 8002460:	3724      	adds	r7, #36	; 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800247c:	d301      	bcc.n	8002482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800247e:	2301      	movs	r3, #1
 8002480:	e00f      	b.n	80024a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002482:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <SysTick_Config+0x40>)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	3b01      	subs	r3, #1
 8002488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800248a:	210f      	movs	r1, #15
 800248c:	f04f 30ff 	mov.w	r0, #4294967295
 8002490:	f7ff ff8e 	bl	80023b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <SysTick_Config+0x40>)
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800249a:	4b04      	ldr	r3, [pc, #16]	; (80024ac <SysTick_Config+0x40>)
 800249c:	2207      	movs	r2, #7
 800249e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3708      	adds	r7, #8
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	e000e010 	.word	0xe000e010

080024b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7ff ff47 	bl	800234c <__NVIC_SetPriorityGrouping>
}
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b086      	sub	sp, #24
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	60b9      	str	r1, [r7, #8]
 80024d0:	607a      	str	r2, [r7, #4]
 80024d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024d4:	2300      	movs	r3, #0
 80024d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024d8:	f7ff ff5c 	bl	8002394 <__NVIC_GetPriorityGrouping>
 80024dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	68b9      	ldr	r1, [r7, #8]
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f7ff ff8e 	bl	8002404 <NVIC_EncodePriority>
 80024e8:	4602      	mov	r2, r0
 80024ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f7ff ff5d 	bl	80023b0 <__NVIC_SetPriority>
}
 80024f6:	bf00      	nop
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b082      	sub	sp, #8
 8002502:	af00      	add	r7, sp, #0
 8002504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f7ff ffb0 	bl	800246c <SysTick_Config>
 800250c:	4603      	mov	r3, r0
}
 800250e:	4618      	mov	r0, r3
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
	...

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002522:	2300      	movs	r3, #0
 8002524:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800252a:	2300      	movs	r3, #0
 800252c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800252e:	2300      	movs	r3, #0
 8002530:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
 8002536:	e175      	b.n	8002824 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002538:	2201      	movs	r2, #1
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	429a      	cmp	r2, r3
 8002552:	f040 8164 	bne.w	800281e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b01      	cmp	r3, #1
 8002560:	d005      	beq.n	800256e <HAL_GPIO_Init+0x56>
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d130      	bne.n	80025d0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	2203      	movs	r2, #3
 800257a:	fa02 f303 	lsl.w	r3, r2, r3
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	005b      	lsls	r3, r3, #1
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4313      	orrs	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a4:	2201      	movs	r2, #1
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69ba      	ldr	r2, [r7, #24]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 0201 	and.w	r2, r3, #1
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0303 	and.w	r3, r3, #3
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d017      	beq.n	800260c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	2203      	movs	r2, #3
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	43db      	mvns	r3, r3
 80025ee:	69ba      	ldr	r2, [r7, #24]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	005b      	lsls	r3, r3, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	69ba      	ldr	r2, [r7, #24]
 8002602:	4313      	orrs	r3, r2
 8002604:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f003 0303 	and.w	r3, r3, #3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d123      	bne.n	8002660 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	08da      	lsrs	r2, r3, #3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	3208      	adds	r2, #8
 8002620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002624:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	220f      	movs	r2, #15
 8002630:	fa02 f303 	lsl.w	r3, r2, r3
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	691a      	ldr	r2, [r3, #16]
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	f003 0307 	and.w	r3, r3, #7
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	69ba      	ldr	r2, [r7, #24]
 800264e:	4313      	orrs	r3, r2
 8002650:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	08da      	lsrs	r2, r3, #3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	3208      	adds	r2, #8
 800265a:	69b9      	ldr	r1, [r7, #24]
 800265c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	005b      	lsls	r3, r3, #1
 800266a:	2203      	movs	r2, #3
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0203 	and.w	r2, r3, #3
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 80be 	beq.w	800281e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a2:	4b66      	ldr	r3, [pc, #408]	; (800283c <HAL_GPIO_Init+0x324>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a65      	ldr	r2, [pc, #404]	; (800283c <HAL_GPIO_Init+0x324>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b63      	ldr	r3, [pc, #396]	; (800283c <HAL_GPIO_Init+0x324>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80026ba:	4a61      	ldr	r2, [pc, #388]	; (8002840 <HAL_GPIO_Init+0x328>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_GPIO_Init+0x32c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d037      	beq.n	8002756 <HAL_GPIO_Init+0x23e>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a57      	ldr	r2, [pc, #348]	; (8002848 <HAL_GPIO_Init+0x330>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d031      	beq.n	8002752 <HAL_GPIO_Init+0x23a>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a56      	ldr	r2, [pc, #344]	; (800284c <HAL_GPIO_Init+0x334>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d02b      	beq.n	800274e <HAL_GPIO_Init+0x236>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a55      	ldr	r2, [pc, #340]	; (8002850 <HAL_GPIO_Init+0x338>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d025      	beq.n	800274a <HAL_GPIO_Init+0x232>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a54      	ldr	r2, [pc, #336]	; (8002854 <HAL_GPIO_Init+0x33c>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d01f      	beq.n	8002746 <HAL_GPIO_Init+0x22e>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a53      	ldr	r2, [pc, #332]	; (8002858 <HAL_GPIO_Init+0x340>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d019      	beq.n	8002742 <HAL_GPIO_Init+0x22a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a52      	ldr	r2, [pc, #328]	; (800285c <HAL_GPIO_Init+0x344>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d013      	beq.n	800273e <HAL_GPIO_Init+0x226>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a51      	ldr	r2, [pc, #324]	; (8002860 <HAL_GPIO_Init+0x348>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d00d      	beq.n	800273a <HAL_GPIO_Init+0x222>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a50      	ldr	r2, [pc, #320]	; (8002864 <HAL_GPIO_Init+0x34c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d007      	beq.n	8002736 <HAL_GPIO_Init+0x21e>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a4f      	ldr	r2, [pc, #316]	; (8002868 <HAL_GPIO_Init+0x350>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d101      	bne.n	8002732 <HAL_GPIO_Init+0x21a>
 800272e:	2309      	movs	r3, #9
 8002730:	e012      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002732:	230a      	movs	r3, #10
 8002734:	e010      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002736:	2308      	movs	r3, #8
 8002738:	e00e      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800273a:	2307      	movs	r3, #7
 800273c:	e00c      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800273e:	2306      	movs	r3, #6
 8002740:	e00a      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002742:	2305      	movs	r3, #5
 8002744:	e008      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002746:	2304      	movs	r3, #4
 8002748:	e006      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800274a:	2303      	movs	r3, #3
 800274c:	e004      	b.n	8002758 <HAL_GPIO_Init+0x240>
 800274e:	2302      	movs	r3, #2
 8002750:	e002      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <HAL_GPIO_Init+0x240>
 8002756:	2300      	movs	r3, #0
 8002758:	69fa      	ldr	r2, [r7, #28]
 800275a:	f002 0203 	and.w	r2, r2, #3
 800275e:	0092      	lsls	r2, r2, #2
 8002760:	4093      	lsls	r3, r2
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4313      	orrs	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002768:	4935      	ldr	r1, [pc, #212]	; (8002840 <HAL_GPIO_Init+0x328>)
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	089b      	lsrs	r3, r3, #2
 800276e:	3302      	adds	r3, #2
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002776:	4b3d      	ldr	r3, [pc, #244]	; (800286c <HAL_GPIO_Init+0x354>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	43db      	mvns	r3, r3
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	4013      	ands	r3, r2
 8002784:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	4313      	orrs	r3, r2
 8002798:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800279a:	4a34      	ldr	r2, [pc, #208]	; (800286c <HAL_GPIO_Init+0x354>)
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027a0:	4b32      	ldr	r3, [pc, #200]	; (800286c <HAL_GPIO_Init+0x354>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80027c4:	4a29      	ldr	r2, [pc, #164]	; (800286c <HAL_GPIO_Init+0x354>)
 80027c6:	69bb      	ldr	r3, [r7, #24]
 80027c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80027ca:	4b28      	ldr	r3, [pc, #160]	; (800286c <HAL_GPIO_Init+0x354>)
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	43db      	mvns	r3, r3
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	4013      	ands	r3, r2
 80027d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ee:	4a1f      	ldr	r2, [pc, #124]	; (800286c <HAL_GPIO_Init+0x354>)
 80027f0:	69bb      	ldr	r3, [r7, #24]
 80027f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027f4:	4b1d      	ldr	r3, [pc, #116]	; (800286c <HAL_GPIO_Init+0x354>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	43db      	mvns	r3, r3
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4013      	ands	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002818:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_GPIO_Init+0x354>)
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	3301      	adds	r3, #1
 8002822:	61fb      	str	r3, [r7, #28]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	2b0f      	cmp	r3, #15
 8002828:	f67f ae86 	bls.w	8002538 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3724      	adds	r7, #36	; 0x24
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	40023800 	.word	0x40023800
 8002840:	40013800 	.word	0x40013800
 8002844:	40020000 	.word	0x40020000
 8002848:	40020400 	.word	0x40020400
 800284c:	40020800 	.word	0x40020800
 8002850:	40020c00 	.word	0x40020c00
 8002854:	40021000 	.word	0x40021000
 8002858:	40021400 	.word	0x40021400
 800285c:	40021800 	.word	0x40021800
 8002860:	40021c00 	.word	0x40021c00
 8002864:	40022000 	.word	0x40022000
 8002868:	40022400 	.word	0x40022400
 800286c:	40013c00 	.word	0x40013c00

08002870 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b23      	ldr	r3, [pc, #140]	; (8002908 <HAL_PWREx_EnableOverDrive+0x98>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a22      	ldr	r2, [pc, #136]	; (8002908 <HAL_PWREx_EnableOverDrive+0x98>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b20      	ldr	r3, [pc, #128]	; (8002908 <HAL_PWREx_EnableOverDrive+0x98>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	603b      	str	r3, [r7, #0]
 8002890:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800289c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800289e:	f7ff fd25 	bl	80022ec <HAL_GetTick>
 80028a2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028a4:	e009      	b.n	80028ba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028a6:	f7ff fd21 	bl	80022ec <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028b4:	d901      	bls.n	80028ba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e022      	b.n	8002900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80028ba:	4b14      	ldr	r3, [pc, #80]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028c6:	d1ee      	bne.n	80028a6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80028c8:	4b10      	ldr	r3, [pc, #64]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028d4:	f7ff fd0a 	bl	80022ec <HAL_GetTick>
 80028d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028da:	e009      	b.n	80028f0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80028dc:	f7ff fd06 	bl	80022ec <HAL_GetTick>
 80028e0:	4602      	mov	r2, r0
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80028ea:	d901      	bls.n	80028f0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80028ec:	2303      	movs	r3, #3
 80028ee:	e007      	b.n	8002900 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <HAL_PWREx_EnableOverDrive+0x9c>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80028fc:	d1ee      	bne.n	80028dc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40023800 	.word	0x40023800
 800290c:	40007000 	.word	0x40007000

08002910 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002918:	2300      	movs	r3, #0
 800291a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e291      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0301 	and.w	r3, r3, #1
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 8087 	beq.w	8002a42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002934:	4b96      	ldr	r3, [pc, #600]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 030c 	and.w	r3, r3, #12
 800293c:	2b04      	cmp	r3, #4
 800293e:	d00c      	beq.n	800295a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002940:	4b93      	ldr	r3, [pc, #588]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 030c 	and.w	r3, r3, #12
 8002948:	2b08      	cmp	r3, #8
 800294a:	d112      	bne.n	8002972 <HAL_RCC_OscConfig+0x62>
 800294c:	4b90      	ldr	r3, [pc, #576]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002958:	d10b      	bne.n	8002972 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800295a:	4b8d      	ldr	r3, [pc, #564]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d06c      	beq.n	8002a40 <HAL_RCC_OscConfig+0x130>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d168      	bne.n	8002a40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e26b      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800297a:	d106      	bne.n	800298a <HAL_RCC_OscConfig+0x7a>
 800297c:	4b84      	ldr	r3, [pc, #528]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a83      	ldr	r2, [pc, #524]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	e02e      	b.n	80029e8 <HAL_RCC_OscConfig+0xd8>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10c      	bne.n	80029ac <HAL_RCC_OscConfig+0x9c>
 8002992:	4b7f      	ldr	r3, [pc, #508]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a7e      	ldr	r2, [pc, #504]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002998:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	4b7c      	ldr	r3, [pc, #496]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7b      	ldr	r2, [pc, #492]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029a8:	6013      	str	r3, [r2, #0]
 80029aa:	e01d      	b.n	80029e8 <HAL_RCC_OscConfig+0xd8>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCC_OscConfig+0xc0>
 80029b6:	4b76      	ldr	r3, [pc, #472]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a75      	ldr	r2, [pc, #468]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	4b73      	ldr	r3, [pc, #460]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a72      	ldr	r2, [pc, #456]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	e00b      	b.n	80029e8 <HAL_RCC_OscConfig+0xd8>
 80029d0:	4b6f      	ldr	r3, [pc, #444]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a6e      	ldr	r2, [pc, #440]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029da:	6013      	str	r3, [r2, #0]
 80029dc:	4b6c      	ldr	r3, [pc, #432]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a6b      	ldr	r2, [pc, #428]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 80029e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d013      	beq.n	8002a18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f0:	f7ff fc7c 	bl	80022ec <HAL_GetTick>
 80029f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029f6:	e008      	b.n	8002a0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029f8:	f7ff fc78 	bl	80022ec <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	2b64      	cmp	r3, #100	; 0x64
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e21f      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a0a:	4b61      	ldr	r3, [pc, #388]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d0f0      	beq.n	80029f8 <HAL_RCC_OscConfig+0xe8>
 8002a16:	e014      	b.n	8002a42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a18:	f7ff fc68 	bl	80022ec <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a20:	f7ff fc64 	bl	80022ec <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b64      	cmp	r3, #100	; 0x64
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e20b      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f0      	bne.n	8002a20 <HAL_RCC_OscConfig+0x110>
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d069      	beq.n	8002b22 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002a4e:	4b50      	ldr	r3, [pc, #320]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00b      	beq.n	8002a72 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b4d      	ldr	r3, [pc, #308]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b08      	cmp	r3, #8
 8002a64:	d11c      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x190>
 8002a66:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d116      	bne.n	8002aa0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a72:	4b47      	ldr	r3, [pc, #284]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d005      	beq.n	8002a8a <HAL_RCC_OscConfig+0x17a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d001      	beq.n	8002a8a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e1df      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a8a:	4b41      	ldr	r3, [pc, #260]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	00db      	lsls	r3, r3, #3
 8002a98:	493d      	ldr	r1, [pc, #244]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a9e:	e040      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d023      	beq.n	8002af0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002aa8:	4b39      	ldr	r3, [pc, #228]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fc1a 	bl	80022ec <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002abc:	f7ff fc16 	bl	80022ec <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1bd      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ace:	4b30      	ldr	r3, [pc, #192]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ada:	4b2d      	ldr	r3, [pc, #180]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4929      	ldr	r1, [pc, #164]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]
 8002aee:	e018      	b.n	8002b22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af0:	4b27      	ldr	r3, [pc, #156]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a26      	ldr	r2, [pc, #152]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002af6:	f023 0301 	bic.w	r3, r3, #1
 8002afa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff fbf6 	bl	80022ec <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b04:	f7ff fbf2 	bl	80022ec <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e199      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	4b1e      	ldr	r3, [pc, #120]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d038      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d019      	beq.n	8002b6a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4b16      	ldr	r3, [pc, #88]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b42:	f7ff fbd3 	bl	80022ec <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b48:	e008      	b.n	8002b5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b4a:	f7ff fbcf 	bl	80022ec <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d901      	bls.n	8002b5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e176      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d0f0      	beq.n	8002b4a <HAL_RCC_OscConfig+0x23a>
 8002b68:	e01a      	b.n	8002ba0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b6e:	4a08      	ldr	r2, [pc, #32]	; (8002b90 <HAL_RCC_OscConfig+0x280>)
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b76:	f7ff fbb9 	bl	80022ec <HAL_GetTick>
 8002b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b7c:	e00a      	b.n	8002b94 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b7e:	f7ff fbb5 	bl	80022ec <HAL_GetTick>
 8002b82:	4602      	mov	r2, r0
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	1ad3      	subs	r3, r2, r3
 8002b88:	2b02      	cmp	r3, #2
 8002b8a:	d903      	bls.n	8002b94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e15c      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
 8002b90:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b94:	4b91      	ldr	r3, [pc, #580]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d1ee      	bne.n	8002b7e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f000 80a4 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b8b      	ldr	r3, [pc, #556]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10d      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a87      	ldr	r2, [pc, #540]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b85      	ldr	r3, [pc, #532]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bd6:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d118      	bne.n	8002c14 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002be2:	4b7f      	ldr	r3, [pc, #508]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a7e      	ldr	r2, [pc, #504]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bee:	f7ff fb7d 	bl	80022ec <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf6:	f7ff fb79 	bl	80022ec <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b64      	cmp	r3, #100	; 0x64
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e120      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c08:	4b75      	ldr	r3, [pc, #468]	; (8002de0 <HAL_RCC_OscConfig+0x4d0>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d0f0      	beq.n	8002bf6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d106      	bne.n	8002c2a <HAL_RCC_OscConfig+0x31a>
 8002c1c:	4b6f      	ldr	r3, [pc, #444]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c20:	4a6e      	ldr	r2, [pc, #440]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6713      	str	r3, [r2, #112]	; 0x70
 8002c28:	e02d      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x33c>
 8002c32:	4b6a      	ldr	r3, [pc, #424]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c36:	4a69      	ldr	r2, [pc, #420]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c38:	f023 0301 	bic.w	r3, r3, #1
 8002c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a66      	ldr	r2, [pc, #408]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c44:	f023 0304 	bic.w	r3, r3, #4
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	e01c      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	2b05      	cmp	r3, #5
 8002c52:	d10c      	bne.n	8002c6e <HAL_RCC_OscConfig+0x35e>
 8002c54:	4b61      	ldr	r3, [pc, #388]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	4a60      	ldr	r2, [pc, #384]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c60:	4b5e      	ldr	r3, [pc, #376]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c64:	4a5d      	ldr	r2, [pc, #372]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c66:	f043 0301 	orr.w	r3, r3, #1
 8002c6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6c:	e00b      	b.n	8002c86 <HAL_RCC_OscConfig+0x376>
 8002c6e:	4b5b      	ldr	r3, [pc, #364]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c72:	4a5a      	ldr	r2, [pc, #360]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	6713      	str	r3, [r2, #112]	; 0x70
 8002c7a:	4b58      	ldr	r3, [pc, #352]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7e:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	f023 0304 	bic.w	r3, r3, #4
 8002c84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d015      	beq.n	8002cba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8e:	f7ff fb2d 	bl	80022ec <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c94:	e00a      	b.n	8002cac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c96:	f7ff fb29 	bl	80022ec <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d901      	bls.n	8002cac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	e0ce      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cac:	4b4b      	ldr	r3, [pc, #300]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d0ee      	beq.n	8002c96 <HAL_RCC_OscConfig+0x386>
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cba:	f7ff fb17 	bl	80022ec <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cc0:	e00a      	b.n	8002cd8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cc2:	f7ff fb13 	bl	80022ec <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d901      	bls.n	8002cd8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002cd4:	2303      	movs	r3, #3
 8002cd6:	e0b8      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cd8:	4b40      	ldr	r3, [pc, #256]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cdc:	f003 0302 	and.w	r3, r3, #2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1ee      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ce4:	7dfb      	ldrb	r3, [r7, #23]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d105      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cea:	4b3c      	ldr	r3, [pc, #240]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	4a3b      	ldr	r2, [pc, #236]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002cf0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	699b      	ldr	r3, [r3, #24]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 80a4 	beq.w	8002e48 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d00:	4b36      	ldr	r3, [pc, #216]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b08      	cmp	r3, #8
 8002d0a:	d06b      	beq.n	8002de4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d149      	bne.n	8002da8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d14:	4b31      	ldr	r3, [pc, #196]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a30      	ldr	r2, [pc, #192]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d20:	f7ff fae4 	bl	80022ec <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d28:	f7ff fae0 	bl	80022ec <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e087      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3a:	4b28      	ldr	r3, [pc, #160]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d1f0      	bne.n	8002d28 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	69da      	ldr	r2, [r3, #28]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	019b      	lsls	r3, r3, #6
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	061b      	lsls	r3, r3, #24
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	4a1b      	ldr	r2, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d72:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b19      	ldr	r3, [pc, #100]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a18      	ldr	r2, [pc, #96]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d7a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7ff fab4 	bl	80022ec <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d88:	f7ff fab0 	bl	80022ec <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e057      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d9a:	4b10      	ldr	r3, [pc, #64]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d0f0      	beq.n	8002d88 <HAL_RCC_OscConfig+0x478>
 8002da6:	e04f      	b.n	8002e48 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a0b      	ldr	r2, [pc, #44]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db4:	f7ff fa9a 	bl	80022ec <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7ff fa96 	bl	80022ec <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e03d      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dce:	4b03      	ldr	r3, [pc, #12]	; (8002ddc <HAL_RCC_OscConfig+0x4cc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x4ac>
 8002dda:	e035      	b.n	8002e48 <HAL_RCC_OscConfig+0x538>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <HAL_RCC_OscConfig+0x544>)
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	699b      	ldr	r3, [r3, #24]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d028      	beq.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d121      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d11a      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e1a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d111      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d107      	bne.n	8002e44 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3718      	adds	r7, #24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800

08002e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0d0      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b6a      	ldr	r3, [pc, #424]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 030f 	and.w	r3, r3, #15
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d910      	bls.n	8002ea0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b67      	ldr	r3, [pc, #412]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f023 020f 	bic.w	r2, r3, #15
 8002e86:	4965      	ldr	r1, [pc, #404]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e8e:	4b63      	ldr	r3, [pc, #396]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	683a      	ldr	r2, [r7, #0]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d001      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d020      	beq.n	8002eee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb8:	4b59      	ldr	r3, [pc, #356]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	4a58      	ldr	r2, [pc, #352]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ebe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ec2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d005      	beq.n	8002edc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ed0:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	4a52      	ldr	r2, [pc, #328]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eda:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	494d      	ldr	r1, [pc, #308]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d040      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d107      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b47      	ldr	r3, [pc, #284]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d115      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e07f      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b41      	ldr	r3, [pc, #260]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e073      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3d      	ldr	r3, [pc, #244]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e06b      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b39      	ldr	r3, [pc, #228]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4936      	ldr	r1, [pc, #216]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f4c:	f7ff f9ce 	bl	80022ec <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7ff f9ca 	bl	80022ec <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e053      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2d      	ldr	r3, [pc, #180]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b27      	ldr	r3, [pc, #156]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d210      	bcs.n	8002fac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b24      	ldr	r3, [pc, #144]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 020f 	bic.w	r2, r3, #15
 8002f92:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f9a:	4b20      	ldr	r3, [pc, #128]	; (800301c <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d001      	beq.n	8002fac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e032      	b.n	8003012 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f003 0304 	and.w	r3, r3, #4
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d008      	beq.n	8002fca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb8:	4b19      	ldr	r3, [pc, #100]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4916      	ldr	r1, [pc, #88]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0308 	and.w	r3, r3, #8
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d009      	beq.n	8002fea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	691b      	ldr	r3, [r3, #16]
 8002fe2:	00db      	lsls	r3, r3, #3
 8002fe4:	490e      	ldr	r1, [pc, #56]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002fea:	f000 f821 	bl	8003030 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCC_ClockConfig+0x1c8>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	490a      	ldr	r1, [pc, #40]	; (8003024 <HAL_RCC_ClockConfig+0x1cc>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	fa22 f303 	lsr.w	r3, r2, r3
 8003002:	4a09      	ldr	r2, [pc, #36]	; (8003028 <HAL_RCC_ClockConfig+0x1d0>)
 8003004:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003006:	4b09      	ldr	r3, [pc, #36]	; (800302c <HAL_RCC_ClockConfig+0x1d4>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f92a 	bl	8002264 <HAL_InitTick>

  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3710      	adds	r7, #16
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00
 8003020:	40023800 	.word	0x40023800
 8003024:	08003fd4 	.word	0x08003fd4
 8003028:	2000005c 	.word	0x2000005c
 800302c:	20000060 	.word	0x20000060

08003030 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b094      	sub	sp, #80	; 0x50
 8003036:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003038:	2300      	movs	r3, #0
 800303a:	647b      	str	r3, [r7, #68]	; 0x44
 800303c:	2300      	movs	r3, #0
 800303e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003040:	2300      	movs	r3, #0
 8003042:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003044:	2300      	movs	r3, #0
 8003046:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003048:	4b79      	ldr	r3, [pc, #484]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f003 030c 	and.w	r3, r3, #12
 8003050:	2b08      	cmp	r3, #8
 8003052:	d00d      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0x40>
 8003054:	2b08      	cmp	r3, #8
 8003056:	f200 80e1 	bhi.w	800321c <HAL_RCC_GetSysClockFreq+0x1ec>
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_RCC_GetSysClockFreq+0x34>
 800305e:	2b04      	cmp	r3, #4
 8003060:	d003      	beq.n	800306a <HAL_RCC_GetSysClockFreq+0x3a>
 8003062:	e0db      	b.n	800321c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003064:	4b73      	ldr	r3, [pc, #460]	; (8003234 <HAL_RCC_GetSysClockFreq+0x204>)
 8003066:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003068:	e0db      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800306a:	4b72      	ldr	r3, [pc, #456]	; (8003234 <HAL_RCC_GetSysClockFreq+0x204>)
 800306c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800306e:	e0d8      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003070:	4b6f      	ldr	r3, [pc, #444]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003078:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800307a:	4b6d      	ldr	r3, [pc, #436]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d063      	beq.n	800314e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003086:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	099b      	lsrs	r3, r3, #6
 800308c:	2200      	movs	r2, #0
 800308e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003090:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003098:	633b      	str	r3, [r7, #48]	; 0x30
 800309a:	2300      	movs	r3, #0
 800309c:	637b      	str	r3, [r7, #52]	; 0x34
 800309e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80030a2:	4622      	mov	r2, r4
 80030a4:	462b      	mov	r3, r5
 80030a6:	f04f 0000 	mov.w	r0, #0
 80030aa:	f04f 0100 	mov.w	r1, #0
 80030ae:	0159      	lsls	r1, r3, #5
 80030b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030b4:	0150      	lsls	r0, r2, #5
 80030b6:	4602      	mov	r2, r0
 80030b8:	460b      	mov	r3, r1
 80030ba:	4621      	mov	r1, r4
 80030bc:	1a51      	subs	r1, r2, r1
 80030be:	6139      	str	r1, [r7, #16]
 80030c0:	4629      	mov	r1, r5
 80030c2:	eb63 0301 	sbc.w	r3, r3, r1
 80030c6:	617b      	str	r3, [r7, #20]
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	f04f 0300 	mov.w	r3, #0
 80030d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030d4:	4659      	mov	r1, fp
 80030d6:	018b      	lsls	r3, r1, #6
 80030d8:	4651      	mov	r1, sl
 80030da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030de:	4651      	mov	r1, sl
 80030e0:	018a      	lsls	r2, r1, #6
 80030e2:	4651      	mov	r1, sl
 80030e4:	ebb2 0801 	subs.w	r8, r2, r1
 80030e8:	4659      	mov	r1, fp
 80030ea:	eb63 0901 	sbc.w	r9, r3, r1
 80030ee:	f04f 0200 	mov.w	r2, #0
 80030f2:	f04f 0300 	mov.w	r3, #0
 80030f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003102:	4690      	mov	r8, r2
 8003104:	4699      	mov	r9, r3
 8003106:	4623      	mov	r3, r4
 8003108:	eb18 0303 	adds.w	r3, r8, r3
 800310c:	60bb      	str	r3, [r7, #8]
 800310e:	462b      	mov	r3, r5
 8003110:	eb49 0303 	adc.w	r3, r9, r3
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003122:	4629      	mov	r1, r5
 8003124:	028b      	lsls	r3, r1, #10
 8003126:	4621      	mov	r1, r4
 8003128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800312c:	4621      	mov	r1, r4
 800312e:	028a      	lsls	r2, r1, #10
 8003130:	4610      	mov	r0, r2
 8003132:	4619      	mov	r1, r3
 8003134:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003136:	2200      	movs	r2, #0
 8003138:	62bb      	str	r3, [r7, #40]	; 0x28
 800313a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800313c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003140:	f7fd f8b6 	bl	80002b0 <__aeabi_uldivmod>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4613      	mov	r3, r2
 800314a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800314c:	e058      	b.n	8003200 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800314e:	4b38      	ldr	r3, [pc, #224]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	099b      	lsrs	r3, r3, #6
 8003154:	2200      	movs	r2, #0
 8003156:	4618      	mov	r0, r3
 8003158:	4611      	mov	r1, r2
 800315a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	2300      	movs	r3, #0
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
 8003164:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003168:	4642      	mov	r2, r8
 800316a:	464b      	mov	r3, r9
 800316c:	f04f 0000 	mov.w	r0, #0
 8003170:	f04f 0100 	mov.w	r1, #0
 8003174:	0159      	lsls	r1, r3, #5
 8003176:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800317a:	0150      	lsls	r0, r2, #5
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4641      	mov	r1, r8
 8003182:	ebb2 0a01 	subs.w	sl, r2, r1
 8003186:	4649      	mov	r1, r9
 8003188:	eb63 0b01 	sbc.w	fp, r3, r1
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	f04f 0300 	mov.w	r3, #0
 8003194:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003198:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800319c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80031a0:	ebb2 040a 	subs.w	r4, r2, sl
 80031a4:	eb63 050b 	sbc.w	r5, r3, fp
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	f04f 0300 	mov.w	r3, #0
 80031b0:	00eb      	lsls	r3, r5, #3
 80031b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80031b6:	00e2      	lsls	r2, r4, #3
 80031b8:	4614      	mov	r4, r2
 80031ba:	461d      	mov	r5, r3
 80031bc:	4643      	mov	r3, r8
 80031be:	18e3      	adds	r3, r4, r3
 80031c0:	603b      	str	r3, [r7, #0]
 80031c2:	464b      	mov	r3, r9
 80031c4:	eb45 0303 	adc.w	r3, r5, r3
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	f04f 0200 	mov.w	r2, #0
 80031ce:	f04f 0300 	mov.w	r3, #0
 80031d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031d6:	4629      	mov	r1, r5
 80031d8:	028b      	lsls	r3, r1, #10
 80031da:	4621      	mov	r1, r4
 80031dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031e0:	4621      	mov	r1, r4
 80031e2:	028a      	lsls	r2, r1, #10
 80031e4:	4610      	mov	r0, r2
 80031e6:	4619      	mov	r1, r3
 80031e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	61bb      	str	r3, [r7, #24]
 80031ee:	61fa      	str	r2, [r7, #28]
 80031f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031f4:	f7fd f85c 	bl	80002b0 <__aeabi_uldivmod>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4613      	mov	r3, r2
 80031fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003200:	4b0b      	ldr	r3, [pc, #44]	; (8003230 <HAL_RCC_GetSysClockFreq+0x200>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	0c1b      	lsrs	r3, r3, #16
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	3301      	adds	r3, #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003210:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003212:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800321a:	e002      	b.n	8003222 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800321c:	4b05      	ldr	r3, [pc, #20]	; (8003234 <HAL_RCC_GetSysClockFreq+0x204>)
 800321e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003220:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003224:	4618      	mov	r0, r3
 8003226:	3750      	adds	r7, #80	; 0x50
 8003228:	46bd      	mov	sp, r7
 800322a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800322e:	bf00      	nop
 8003230:	40023800 	.word	0x40023800
 8003234:	00f42400 	.word	0x00f42400

08003238 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e038      	b.n	80032c0 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d106      	bne.n	8003268 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f7fd ff34 	bl	80010d0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3308      	adds	r3, #8
 8003270:	4619      	mov	r1, r3
 8003272:	4610      	mov	r0, r2
 8003274:	f000 f828 	bl	80032c8 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6818      	ldr	r0, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	461a      	mov	r2, r3
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	f000 f8b0 	bl	80033e8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6858      	ldr	r0, [r3, #4]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	f000 f8f7 	bl	8003488 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	6892      	ldr	r2, [r2, #8]
 80032a2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68fa      	ldr	r2, [r7, #12]
 80032ac:	6892      	ldr	r2, [r2, #8]
 80032ae:	f041 0101 	orr.w	r1, r1, #1
 80032b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 80032be:	2300      	movs	r3, #0
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b087      	sub	sp, #28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	6812      	ldr	r2, [r2, #0]
 80032e0:	f023 0101 	bic.w	r1, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	2b08      	cmp	r3, #8
 80032f0:	d102      	bne.n	80032f8 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80032f2:	2340      	movs	r3, #64	; 0x40
 80032f4:	617b      	str	r3, [r7, #20]
 80032f6:	e001      	b.n	80032fc <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003308:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800330e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003314:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800331a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8003320:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8003326:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800332c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8003332:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8003338:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800333e:	4313      	orrs	r3, r2
 8003340:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	4313      	orrs	r3, r2
 800334a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	4313      	orrs	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8003360:	4b20      	ldr	r3, [pc, #128]	; (80033e4 <FMC_NORSRAM_Init+0x11c>)
 8003362:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800336a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003372:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800337a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	43db      	mvns	r3, r3
 800338a:	ea02 0103 	and.w	r1, r2, r3
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	693b      	ldr	r3, [r7, #16]
 8003394:	4319      	orrs	r1, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033a4:	d10c      	bne.n	80033c0 <FMC_NORSRAM_Init+0xf8>
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d008      	beq.n	80033c0 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	431a      	orrs	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	0008fb7f 	.word	0x0008fb7f

080033e8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b087      	sub	sp, #28
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	60f8      	str	r0, [r7, #12]
 80033f0:	60b9      	str	r1, [r7, #8]
 80033f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	1c5a      	adds	r2, r3, #1
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033fe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	011b      	lsls	r3, r3, #4
 800340c:	431a      	orrs	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	689b      	ldr	r3, [r3, #8]
 8003412:	021b      	lsls	r3, r3, #8
 8003414:	431a      	orrs	r2, r3
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	041b      	lsls	r3, r3, #16
 800341c:	431a      	orrs	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	691b      	ldr	r3, [r3, #16]
 8003422:	3b01      	subs	r3, #1
 8003424:	051b      	lsls	r3, r3, #20
 8003426:	431a      	orrs	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	695b      	ldr	r3, [r3, #20]
 800342c:	3b02      	subs	r3, #2
 800342e:	061b      	lsls	r3, r3, #24
 8003430:	431a      	orrs	r2, r3
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	3201      	adds	r2, #1
 800343c:	4319      	orrs	r1, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003450:	d113      	bne.n	800347a <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800345a:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	3b01      	subs	r3, #1
 8003462:	051b      	lsls	r3, r3, #20
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	431a      	orrs	r2, r3
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	371c      	adds	r7, #28
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003488:	b480      	push	{r7}
 800348a:	b085      	sub	sp, #20
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
 8003494:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800349c:	d11d      	bne.n	80034da <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80034a6:	4b13      	ldr	r3, [pc, #76]	; (80034f4 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	6811      	ldr	r1, [r2, #0]
 80034ae:	68ba      	ldr	r2, [r7, #8]
 80034b0:	6852      	ldr	r2, [r2, #4]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	4311      	orrs	r1, r2
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	6892      	ldr	r2, [r2, #8]
 80034ba:	0212      	lsls	r2, r2, #8
 80034bc:	4311      	orrs	r1, r2
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	6992      	ldr	r2, [r2, #24]
 80034c2:	4311      	orrs	r1, r2
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	68d2      	ldr	r2, [r2, #12]
 80034c8:	0412      	lsls	r2, r2, #16
 80034ca:	430a      	orrs	r2, r1
 80034cc:	ea43 0102 	orr.w	r1, r3, r2
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80034d8:	e005      	b.n	80034e6 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80034e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3714      	adds	r7, #20
 80034ec:	46bd      	mov	sp, r7
 80034ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f2:	4770      	bx	lr
 80034f4:	cff00000 	.word	0xcff00000

080034f8 <siprintf>:
 80034f8:	b40e      	push	{r1, r2, r3}
 80034fa:	b500      	push	{lr}
 80034fc:	b09c      	sub	sp, #112	; 0x70
 80034fe:	ab1d      	add	r3, sp, #116	; 0x74
 8003500:	9002      	str	r0, [sp, #8]
 8003502:	9006      	str	r0, [sp, #24]
 8003504:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003508:	4809      	ldr	r0, [pc, #36]	; (8003530 <siprintf+0x38>)
 800350a:	9107      	str	r1, [sp, #28]
 800350c:	9104      	str	r1, [sp, #16]
 800350e:	4909      	ldr	r1, [pc, #36]	; (8003534 <siprintf+0x3c>)
 8003510:	f853 2b04 	ldr.w	r2, [r3], #4
 8003514:	9105      	str	r1, [sp, #20]
 8003516:	6800      	ldr	r0, [r0, #0]
 8003518:	9301      	str	r3, [sp, #4]
 800351a:	a902      	add	r1, sp, #8
 800351c:	f000 f992 	bl	8003844 <_svfiprintf_r>
 8003520:	9b02      	ldr	r3, [sp, #8]
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
 8003526:	b01c      	add	sp, #112	; 0x70
 8003528:	f85d eb04 	ldr.w	lr, [sp], #4
 800352c:	b003      	add	sp, #12
 800352e:	4770      	bx	lr
 8003530:	200000b4 	.word	0x200000b4
 8003534:	ffff0208 	.word	0xffff0208

08003538 <memset>:
 8003538:	4402      	add	r2, r0
 800353a:	4603      	mov	r3, r0
 800353c:	4293      	cmp	r3, r2
 800353e:	d100      	bne.n	8003542 <memset+0xa>
 8003540:	4770      	bx	lr
 8003542:	f803 1b01 	strb.w	r1, [r3], #1
 8003546:	e7f9      	b.n	800353c <memset+0x4>

08003548 <__errno>:
 8003548:	4b01      	ldr	r3, [pc, #4]	; (8003550 <__errno+0x8>)
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	4770      	bx	lr
 800354e:	bf00      	nop
 8003550:	200000b4 	.word	0x200000b4

08003554 <__libc_init_array>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	4d0d      	ldr	r5, [pc, #52]	; (800358c <__libc_init_array+0x38>)
 8003558:	4c0d      	ldr	r4, [pc, #52]	; (8003590 <__libc_init_array+0x3c>)
 800355a:	1b64      	subs	r4, r4, r5
 800355c:	10a4      	asrs	r4, r4, #2
 800355e:	2600      	movs	r6, #0
 8003560:	42a6      	cmp	r6, r4
 8003562:	d109      	bne.n	8003578 <__libc_init_array+0x24>
 8003564:	4d0b      	ldr	r5, [pc, #44]	; (8003594 <__libc_init_array+0x40>)
 8003566:	4c0c      	ldr	r4, [pc, #48]	; (8003598 <__libc_init_array+0x44>)
 8003568:	f000 fc6a 	bl	8003e40 <_init>
 800356c:	1b64      	subs	r4, r4, r5
 800356e:	10a4      	asrs	r4, r4, #2
 8003570:	2600      	movs	r6, #0
 8003572:	42a6      	cmp	r6, r4
 8003574:	d105      	bne.n	8003582 <__libc_init_array+0x2e>
 8003576:	bd70      	pop	{r4, r5, r6, pc}
 8003578:	f855 3b04 	ldr.w	r3, [r5], #4
 800357c:	4798      	blx	r3
 800357e:	3601      	adds	r6, #1
 8003580:	e7ee      	b.n	8003560 <__libc_init_array+0xc>
 8003582:	f855 3b04 	ldr.w	r3, [r5], #4
 8003586:	4798      	blx	r3
 8003588:	3601      	adds	r6, #1
 800358a:	e7f2      	b.n	8003572 <__libc_init_array+0x1e>
 800358c:	08013448 	.word	0x08013448
 8003590:	08013448 	.word	0x08013448
 8003594:	08013448 	.word	0x08013448
 8003598:	0801344c 	.word	0x0801344c

0800359c <__retarget_lock_acquire_recursive>:
 800359c:	4770      	bx	lr

0800359e <__retarget_lock_release_recursive>:
 800359e:	4770      	bx	lr

080035a0 <_free_r>:
 80035a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80035a2:	2900      	cmp	r1, #0
 80035a4:	d044      	beq.n	8003630 <_free_r+0x90>
 80035a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035aa:	9001      	str	r0, [sp, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f1a1 0404 	sub.w	r4, r1, #4
 80035b2:	bfb8      	it	lt
 80035b4:	18e4      	addlt	r4, r4, r3
 80035b6:	f000 f8df 	bl	8003778 <__malloc_lock>
 80035ba:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <_free_r+0x94>)
 80035bc:	9801      	ldr	r0, [sp, #4]
 80035be:	6813      	ldr	r3, [r2, #0]
 80035c0:	b933      	cbnz	r3, 80035d0 <_free_r+0x30>
 80035c2:	6063      	str	r3, [r4, #4]
 80035c4:	6014      	str	r4, [r2, #0]
 80035c6:	b003      	add	sp, #12
 80035c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80035cc:	f000 b8da 	b.w	8003784 <__malloc_unlock>
 80035d0:	42a3      	cmp	r3, r4
 80035d2:	d908      	bls.n	80035e6 <_free_r+0x46>
 80035d4:	6825      	ldr	r5, [r4, #0]
 80035d6:	1961      	adds	r1, r4, r5
 80035d8:	428b      	cmp	r3, r1
 80035da:	bf01      	itttt	eq
 80035dc:	6819      	ldreq	r1, [r3, #0]
 80035de:	685b      	ldreq	r3, [r3, #4]
 80035e0:	1949      	addeq	r1, r1, r5
 80035e2:	6021      	streq	r1, [r4, #0]
 80035e4:	e7ed      	b.n	80035c2 <_free_r+0x22>
 80035e6:	461a      	mov	r2, r3
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	b10b      	cbz	r3, 80035f0 <_free_r+0x50>
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	d9fa      	bls.n	80035e6 <_free_r+0x46>
 80035f0:	6811      	ldr	r1, [r2, #0]
 80035f2:	1855      	adds	r5, r2, r1
 80035f4:	42a5      	cmp	r5, r4
 80035f6:	d10b      	bne.n	8003610 <_free_r+0x70>
 80035f8:	6824      	ldr	r4, [r4, #0]
 80035fa:	4421      	add	r1, r4
 80035fc:	1854      	adds	r4, r2, r1
 80035fe:	42a3      	cmp	r3, r4
 8003600:	6011      	str	r1, [r2, #0]
 8003602:	d1e0      	bne.n	80035c6 <_free_r+0x26>
 8003604:	681c      	ldr	r4, [r3, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	6053      	str	r3, [r2, #4]
 800360a:	440c      	add	r4, r1
 800360c:	6014      	str	r4, [r2, #0]
 800360e:	e7da      	b.n	80035c6 <_free_r+0x26>
 8003610:	d902      	bls.n	8003618 <_free_r+0x78>
 8003612:	230c      	movs	r3, #12
 8003614:	6003      	str	r3, [r0, #0]
 8003616:	e7d6      	b.n	80035c6 <_free_r+0x26>
 8003618:	6825      	ldr	r5, [r4, #0]
 800361a:	1961      	adds	r1, r4, r5
 800361c:	428b      	cmp	r3, r1
 800361e:	bf04      	itt	eq
 8003620:	6819      	ldreq	r1, [r3, #0]
 8003622:	685b      	ldreq	r3, [r3, #4]
 8003624:	6063      	str	r3, [r4, #4]
 8003626:	bf04      	itt	eq
 8003628:	1949      	addeq	r1, r1, r5
 800362a:	6021      	streq	r1, [r4, #0]
 800362c:	6054      	str	r4, [r2, #4]
 800362e:	e7ca      	b.n	80035c6 <_free_r+0x26>
 8003630:	b003      	add	sp, #12
 8003632:	bd30      	pop	{r4, r5, pc}
 8003634:	20000328 	.word	0x20000328

08003638 <sbrk_aligned>:
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	4e0e      	ldr	r6, [pc, #56]	; (8003674 <sbrk_aligned+0x3c>)
 800363c:	460c      	mov	r4, r1
 800363e:	6831      	ldr	r1, [r6, #0]
 8003640:	4605      	mov	r5, r0
 8003642:	b911      	cbnz	r1, 800364a <sbrk_aligned+0x12>
 8003644:	f000 fba6 	bl	8003d94 <_sbrk_r>
 8003648:	6030      	str	r0, [r6, #0]
 800364a:	4621      	mov	r1, r4
 800364c:	4628      	mov	r0, r5
 800364e:	f000 fba1 	bl	8003d94 <_sbrk_r>
 8003652:	1c43      	adds	r3, r0, #1
 8003654:	d00a      	beq.n	800366c <sbrk_aligned+0x34>
 8003656:	1cc4      	adds	r4, r0, #3
 8003658:	f024 0403 	bic.w	r4, r4, #3
 800365c:	42a0      	cmp	r0, r4
 800365e:	d007      	beq.n	8003670 <sbrk_aligned+0x38>
 8003660:	1a21      	subs	r1, r4, r0
 8003662:	4628      	mov	r0, r5
 8003664:	f000 fb96 	bl	8003d94 <_sbrk_r>
 8003668:	3001      	adds	r0, #1
 800366a:	d101      	bne.n	8003670 <sbrk_aligned+0x38>
 800366c:	f04f 34ff 	mov.w	r4, #4294967295
 8003670:	4620      	mov	r0, r4
 8003672:	bd70      	pop	{r4, r5, r6, pc}
 8003674:	2000032c 	.word	0x2000032c

08003678 <_malloc_r>:
 8003678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800367c:	1ccd      	adds	r5, r1, #3
 800367e:	f025 0503 	bic.w	r5, r5, #3
 8003682:	3508      	adds	r5, #8
 8003684:	2d0c      	cmp	r5, #12
 8003686:	bf38      	it	cc
 8003688:	250c      	movcc	r5, #12
 800368a:	2d00      	cmp	r5, #0
 800368c:	4607      	mov	r7, r0
 800368e:	db01      	blt.n	8003694 <_malloc_r+0x1c>
 8003690:	42a9      	cmp	r1, r5
 8003692:	d905      	bls.n	80036a0 <_malloc_r+0x28>
 8003694:	230c      	movs	r3, #12
 8003696:	603b      	str	r3, [r7, #0]
 8003698:	2600      	movs	r6, #0
 800369a:	4630      	mov	r0, r6
 800369c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80036a0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003774 <_malloc_r+0xfc>
 80036a4:	f000 f868 	bl	8003778 <__malloc_lock>
 80036a8:	f8d8 3000 	ldr.w	r3, [r8]
 80036ac:	461c      	mov	r4, r3
 80036ae:	bb5c      	cbnz	r4, 8003708 <_malloc_r+0x90>
 80036b0:	4629      	mov	r1, r5
 80036b2:	4638      	mov	r0, r7
 80036b4:	f7ff ffc0 	bl	8003638 <sbrk_aligned>
 80036b8:	1c43      	adds	r3, r0, #1
 80036ba:	4604      	mov	r4, r0
 80036bc:	d155      	bne.n	800376a <_malloc_r+0xf2>
 80036be:	f8d8 4000 	ldr.w	r4, [r8]
 80036c2:	4626      	mov	r6, r4
 80036c4:	2e00      	cmp	r6, #0
 80036c6:	d145      	bne.n	8003754 <_malloc_r+0xdc>
 80036c8:	2c00      	cmp	r4, #0
 80036ca:	d048      	beq.n	800375e <_malloc_r+0xe6>
 80036cc:	6823      	ldr	r3, [r4, #0]
 80036ce:	4631      	mov	r1, r6
 80036d0:	4638      	mov	r0, r7
 80036d2:	eb04 0903 	add.w	r9, r4, r3
 80036d6:	f000 fb5d 	bl	8003d94 <_sbrk_r>
 80036da:	4581      	cmp	r9, r0
 80036dc:	d13f      	bne.n	800375e <_malloc_r+0xe6>
 80036de:	6821      	ldr	r1, [r4, #0]
 80036e0:	1a6d      	subs	r5, r5, r1
 80036e2:	4629      	mov	r1, r5
 80036e4:	4638      	mov	r0, r7
 80036e6:	f7ff ffa7 	bl	8003638 <sbrk_aligned>
 80036ea:	3001      	adds	r0, #1
 80036ec:	d037      	beq.n	800375e <_malloc_r+0xe6>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	442b      	add	r3, r5
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	f8d8 3000 	ldr.w	r3, [r8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d038      	beq.n	800376e <_malloc_r+0xf6>
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	42a2      	cmp	r2, r4
 8003700:	d12b      	bne.n	800375a <_malloc_r+0xe2>
 8003702:	2200      	movs	r2, #0
 8003704:	605a      	str	r2, [r3, #4]
 8003706:	e00f      	b.n	8003728 <_malloc_r+0xb0>
 8003708:	6822      	ldr	r2, [r4, #0]
 800370a:	1b52      	subs	r2, r2, r5
 800370c:	d41f      	bmi.n	800374e <_malloc_r+0xd6>
 800370e:	2a0b      	cmp	r2, #11
 8003710:	d917      	bls.n	8003742 <_malloc_r+0xca>
 8003712:	1961      	adds	r1, r4, r5
 8003714:	42a3      	cmp	r3, r4
 8003716:	6025      	str	r5, [r4, #0]
 8003718:	bf18      	it	ne
 800371a:	6059      	strne	r1, [r3, #4]
 800371c:	6863      	ldr	r3, [r4, #4]
 800371e:	bf08      	it	eq
 8003720:	f8c8 1000 	streq.w	r1, [r8]
 8003724:	5162      	str	r2, [r4, r5]
 8003726:	604b      	str	r3, [r1, #4]
 8003728:	4638      	mov	r0, r7
 800372a:	f104 060b 	add.w	r6, r4, #11
 800372e:	f000 f829 	bl	8003784 <__malloc_unlock>
 8003732:	f026 0607 	bic.w	r6, r6, #7
 8003736:	1d23      	adds	r3, r4, #4
 8003738:	1af2      	subs	r2, r6, r3
 800373a:	d0ae      	beq.n	800369a <_malloc_r+0x22>
 800373c:	1b9b      	subs	r3, r3, r6
 800373e:	50a3      	str	r3, [r4, r2]
 8003740:	e7ab      	b.n	800369a <_malloc_r+0x22>
 8003742:	42a3      	cmp	r3, r4
 8003744:	6862      	ldr	r2, [r4, #4]
 8003746:	d1dd      	bne.n	8003704 <_malloc_r+0x8c>
 8003748:	f8c8 2000 	str.w	r2, [r8]
 800374c:	e7ec      	b.n	8003728 <_malloc_r+0xb0>
 800374e:	4623      	mov	r3, r4
 8003750:	6864      	ldr	r4, [r4, #4]
 8003752:	e7ac      	b.n	80036ae <_malloc_r+0x36>
 8003754:	4634      	mov	r4, r6
 8003756:	6876      	ldr	r6, [r6, #4]
 8003758:	e7b4      	b.n	80036c4 <_malloc_r+0x4c>
 800375a:	4613      	mov	r3, r2
 800375c:	e7cc      	b.n	80036f8 <_malloc_r+0x80>
 800375e:	230c      	movs	r3, #12
 8003760:	603b      	str	r3, [r7, #0]
 8003762:	4638      	mov	r0, r7
 8003764:	f000 f80e 	bl	8003784 <__malloc_unlock>
 8003768:	e797      	b.n	800369a <_malloc_r+0x22>
 800376a:	6025      	str	r5, [r4, #0]
 800376c:	e7dc      	b.n	8003728 <_malloc_r+0xb0>
 800376e:	605b      	str	r3, [r3, #4]
 8003770:	deff      	udf	#255	; 0xff
 8003772:	bf00      	nop
 8003774:	20000328 	.word	0x20000328

08003778 <__malloc_lock>:
 8003778:	4801      	ldr	r0, [pc, #4]	; (8003780 <__malloc_lock+0x8>)
 800377a:	f7ff bf0f 	b.w	800359c <__retarget_lock_acquire_recursive>
 800377e:	bf00      	nop
 8003780:	20000324 	.word	0x20000324

08003784 <__malloc_unlock>:
 8003784:	4801      	ldr	r0, [pc, #4]	; (800378c <__malloc_unlock+0x8>)
 8003786:	f7ff bf0a 	b.w	800359e <__retarget_lock_release_recursive>
 800378a:	bf00      	nop
 800378c:	20000324 	.word	0x20000324

08003790 <__ssputs_r>:
 8003790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003794:	688e      	ldr	r6, [r1, #8]
 8003796:	461f      	mov	r7, r3
 8003798:	42be      	cmp	r6, r7
 800379a:	680b      	ldr	r3, [r1, #0]
 800379c:	4682      	mov	sl, r0
 800379e:	460c      	mov	r4, r1
 80037a0:	4690      	mov	r8, r2
 80037a2:	d82c      	bhi.n	80037fe <__ssputs_r+0x6e>
 80037a4:	898a      	ldrh	r2, [r1, #12]
 80037a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80037aa:	d026      	beq.n	80037fa <__ssputs_r+0x6a>
 80037ac:	6965      	ldr	r5, [r4, #20]
 80037ae:	6909      	ldr	r1, [r1, #16]
 80037b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80037b4:	eba3 0901 	sub.w	r9, r3, r1
 80037b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80037bc:	1c7b      	adds	r3, r7, #1
 80037be:	444b      	add	r3, r9
 80037c0:	106d      	asrs	r5, r5, #1
 80037c2:	429d      	cmp	r5, r3
 80037c4:	bf38      	it	cc
 80037c6:	461d      	movcc	r5, r3
 80037c8:	0553      	lsls	r3, r2, #21
 80037ca:	d527      	bpl.n	800381c <__ssputs_r+0x8c>
 80037cc:	4629      	mov	r1, r5
 80037ce:	f7ff ff53 	bl	8003678 <_malloc_r>
 80037d2:	4606      	mov	r6, r0
 80037d4:	b360      	cbz	r0, 8003830 <__ssputs_r+0xa0>
 80037d6:	6921      	ldr	r1, [r4, #16]
 80037d8:	464a      	mov	r2, r9
 80037da:	f000 faeb 	bl	8003db4 <memcpy>
 80037de:	89a3      	ldrh	r3, [r4, #12]
 80037e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80037e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037e8:	81a3      	strh	r3, [r4, #12]
 80037ea:	6126      	str	r6, [r4, #16]
 80037ec:	6165      	str	r5, [r4, #20]
 80037ee:	444e      	add	r6, r9
 80037f0:	eba5 0509 	sub.w	r5, r5, r9
 80037f4:	6026      	str	r6, [r4, #0]
 80037f6:	60a5      	str	r5, [r4, #8]
 80037f8:	463e      	mov	r6, r7
 80037fa:	42be      	cmp	r6, r7
 80037fc:	d900      	bls.n	8003800 <__ssputs_r+0x70>
 80037fe:	463e      	mov	r6, r7
 8003800:	6820      	ldr	r0, [r4, #0]
 8003802:	4632      	mov	r2, r6
 8003804:	4641      	mov	r1, r8
 8003806:	f000 faab 	bl	8003d60 <memmove>
 800380a:	68a3      	ldr	r3, [r4, #8]
 800380c:	1b9b      	subs	r3, r3, r6
 800380e:	60a3      	str	r3, [r4, #8]
 8003810:	6823      	ldr	r3, [r4, #0]
 8003812:	4433      	add	r3, r6
 8003814:	6023      	str	r3, [r4, #0]
 8003816:	2000      	movs	r0, #0
 8003818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800381c:	462a      	mov	r2, r5
 800381e:	f000 fad7 	bl	8003dd0 <_realloc_r>
 8003822:	4606      	mov	r6, r0
 8003824:	2800      	cmp	r0, #0
 8003826:	d1e0      	bne.n	80037ea <__ssputs_r+0x5a>
 8003828:	6921      	ldr	r1, [r4, #16]
 800382a:	4650      	mov	r0, sl
 800382c:	f7ff feb8 	bl	80035a0 <_free_r>
 8003830:	230c      	movs	r3, #12
 8003832:	f8ca 3000 	str.w	r3, [sl]
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	f04f 30ff 	mov.w	r0, #4294967295
 8003842:	e7e9      	b.n	8003818 <__ssputs_r+0x88>

08003844 <_svfiprintf_r>:
 8003844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003848:	4698      	mov	r8, r3
 800384a:	898b      	ldrh	r3, [r1, #12]
 800384c:	061b      	lsls	r3, r3, #24
 800384e:	b09d      	sub	sp, #116	; 0x74
 8003850:	4607      	mov	r7, r0
 8003852:	460d      	mov	r5, r1
 8003854:	4614      	mov	r4, r2
 8003856:	d50e      	bpl.n	8003876 <_svfiprintf_r+0x32>
 8003858:	690b      	ldr	r3, [r1, #16]
 800385a:	b963      	cbnz	r3, 8003876 <_svfiprintf_r+0x32>
 800385c:	2140      	movs	r1, #64	; 0x40
 800385e:	f7ff ff0b 	bl	8003678 <_malloc_r>
 8003862:	6028      	str	r0, [r5, #0]
 8003864:	6128      	str	r0, [r5, #16]
 8003866:	b920      	cbnz	r0, 8003872 <_svfiprintf_r+0x2e>
 8003868:	230c      	movs	r3, #12
 800386a:	603b      	str	r3, [r7, #0]
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	e0d0      	b.n	8003a14 <_svfiprintf_r+0x1d0>
 8003872:	2340      	movs	r3, #64	; 0x40
 8003874:	616b      	str	r3, [r5, #20]
 8003876:	2300      	movs	r3, #0
 8003878:	9309      	str	r3, [sp, #36]	; 0x24
 800387a:	2320      	movs	r3, #32
 800387c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003880:	f8cd 800c 	str.w	r8, [sp, #12]
 8003884:	2330      	movs	r3, #48	; 0x30
 8003886:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003a2c <_svfiprintf_r+0x1e8>
 800388a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800388e:	f04f 0901 	mov.w	r9, #1
 8003892:	4623      	mov	r3, r4
 8003894:	469a      	mov	sl, r3
 8003896:	f813 2b01 	ldrb.w	r2, [r3], #1
 800389a:	b10a      	cbz	r2, 80038a0 <_svfiprintf_r+0x5c>
 800389c:	2a25      	cmp	r2, #37	; 0x25
 800389e:	d1f9      	bne.n	8003894 <_svfiprintf_r+0x50>
 80038a0:	ebba 0b04 	subs.w	fp, sl, r4
 80038a4:	d00b      	beq.n	80038be <_svfiprintf_r+0x7a>
 80038a6:	465b      	mov	r3, fp
 80038a8:	4622      	mov	r2, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	4638      	mov	r0, r7
 80038ae:	f7ff ff6f 	bl	8003790 <__ssputs_r>
 80038b2:	3001      	adds	r0, #1
 80038b4:	f000 80a9 	beq.w	8003a0a <_svfiprintf_r+0x1c6>
 80038b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80038ba:	445a      	add	r2, fp
 80038bc:	9209      	str	r2, [sp, #36]	; 0x24
 80038be:	f89a 3000 	ldrb.w	r3, [sl]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	f000 80a1 	beq.w	8003a0a <_svfiprintf_r+0x1c6>
 80038c8:	2300      	movs	r3, #0
 80038ca:	f04f 32ff 	mov.w	r2, #4294967295
 80038ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80038d2:	f10a 0a01 	add.w	sl, sl, #1
 80038d6:	9304      	str	r3, [sp, #16]
 80038d8:	9307      	str	r3, [sp, #28]
 80038da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80038de:	931a      	str	r3, [sp, #104]	; 0x68
 80038e0:	4654      	mov	r4, sl
 80038e2:	2205      	movs	r2, #5
 80038e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038e8:	4850      	ldr	r0, [pc, #320]	; (8003a2c <_svfiprintf_r+0x1e8>)
 80038ea:	f7fc fc91 	bl	8000210 <memchr>
 80038ee:	9a04      	ldr	r2, [sp, #16]
 80038f0:	b9d8      	cbnz	r0, 800392a <_svfiprintf_r+0xe6>
 80038f2:	06d0      	lsls	r0, r2, #27
 80038f4:	bf44      	itt	mi
 80038f6:	2320      	movmi	r3, #32
 80038f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80038fc:	0711      	lsls	r1, r2, #28
 80038fe:	bf44      	itt	mi
 8003900:	232b      	movmi	r3, #43	; 0x2b
 8003902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003906:	f89a 3000 	ldrb.w	r3, [sl]
 800390a:	2b2a      	cmp	r3, #42	; 0x2a
 800390c:	d015      	beq.n	800393a <_svfiprintf_r+0xf6>
 800390e:	9a07      	ldr	r2, [sp, #28]
 8003910:	4654      	mov	r4, sl
 8003912:	2000      	movs	r0, #0
 8003914:	f04f 0c0a 	mov.w	ip, #10
 8003918:	4621      	mov	r1, r4
 800391a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800391e:	3b30      	subs	r3, #48	; 0x30
 8003920:	2b09      	cmp	r3, #9
 8003922:	d94d      	bls.n	80039c0 <_svfiprintf_r+0x17c>
 8003924:	b1b0      	cbz	r0, 8003954 <_svfiprintf_r+0x110>
 8003926:	9207      	str	r2, [sp, #28]
 8003928:	e014      	b.n	8003954 <_svfiprintf_r+0x110>
 800392a:	eba0 0308 	sub.w	r3, r0, r8
 800392e:	fa09 f303 	lsl.w	r3, r9, r3
 8003932:	4313      	orrs	r3, r2
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	46a2      	mov	sl, r4
 8003938:	e7d2      	b.n	80038e0 <_svfiprintf_r+0x9c>
 800393a:	9b03      	ldr	r3, [sp, #12]
 800393c:	1d19      	adds	r1, r3, #4
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	9103      	str	r1, [sp, #12]
 8003942:	2b00      	cmp	r3, #0
 8003944:	bfbb      	ittet	lt
 8003946:	425b      	neglt	r3, r3
 8003948:	f042 0202 	orrlt.w	r2, r2, #2
 800394c:	9307      	strge	r3, [sp, #28]
 800394e:	9307      	strlt	r3, [sp, #28]
 8003950:	bfb8      	it	lt
 8003952:	9204      	strlt	r2, [sp, #16]
 8003954:	7823      	ldrb	r3, [r4, #0]
 8003956:	2b2e      	cmp	r3, #46	; 0x2e
 8003958:	d10c      	bne.n	8003974 <_svfiprintf_r+0x130>
 800395a:	7863      	ldrb	r3, [r4, #1]
 800395c:	2b2a      	cmp	r3, #42	; 0x2a
 800395e:	d134      	bne.n	80039ca <_svfiprintf_r+0x186>
 8003960:	9b03      	ldr	r3, [sp, #12]
 8003962:	1d1a      	adds	r2, r3, #4
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	9203      	str	r2, [sp, #12]
 8003968:	2b00      	cmp	r3, #0
 800396a:	bfb8      	it	lt
 800396c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003970:	3402      	adds	r4, #2
 8003972:	9305      	str	r3, [sp, #20]
 8003974:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8003a3c <_svfiprintf_r+0x1f8>
 8003978:	7821      	ldrb	r1, [r4, #0]
 800397a:	2203      	movs	r2, #3
 800397c:	4650      	mov	r0, sl
 800397e:	f7fc fc47 	bl	8000210 <memchr>
 8003982:	b138      	cbz	r0, 8003994 <_svfiprintf_r+0x150>
 8003984:	9b04      	ldr	r3, [sp, #16]
 8003986:	eba0 000a 	sub.w	r0, r0, sl
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	4082      	lsls	r2, r0
 800398e:	4313      	orrs	r3, r2
 8003990:	3401      	adds	r4, #1
 8003992:	9304      	str	r3, [sp, #16]
 8003994:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003998:	4825      	ldr	r0, [pc, #148]	; (8003a30 <_svfiprintf_r+0x1ec>)
 800399a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800399e:	2206      	movs	r2, #6
 80039a0:	f7fc fc36 	bl	8000210 <memchr>
 80039a4:	2800      	cmp	r0, #0
 80039a6:	d038      	beq.n	8003a1a <_svfiprintf_r+0x1d6>
 80039a8:	4b22      	ldr	r3, [pc, #136]	; (8003a34 <_svfiprintf_r+0x1f0>)
 80039aa:	bb1b      	cbnz	r3, 80039f4 <_svfiprintf_r+0x1b0>
 80039ac:	9b03      	ldr	r3, [sp, #12]
 80039ae:	3307      	adds	r3, #7
 80039b0:	f023 0307 	bic.w	r3, r3, #7
 80039b4:	3308      	adds	r3, #8
 80039b6:	9303      	str	r3, [sp, #12]
 80039b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039ba:	4433      	add	r3, r6
 80039bc:	9309      	str	r3, [sp, #36]	; 0x24
 80039be:	e768      	b.n	8003892 <_svfiprintf_r+0x4e>
 80039c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80039c4:	460c      	mov	r4, r1
 80039c6:	2001      	movs	r0, #1
 80039c8:	e7a6      	b.n	8003918 <_svfiprintf_r+0xd4>
 80039ca:	2300      	movs	r3, #0
 80039cc:	3401      	adds	r4, #1
 80039ce:	9305      	str	r3, [sp, #20]
 80039d0:	4619      	mov	r1, r3
 80039d2:	f04f 0c0a 	mov.w	ip, #10
 80039d6:	4620      	mov	r0, r4
 80039d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80039dc:	3a30      	subs	r2, #48	; 0x30
 80039de:	2a09      	cmp	r2, #9
 80039e0:	d903      	bls.n	80039ea <_svfiprintf_r+0x1a6>
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0c6      	beq.n	8003974 <_svfiprintf_r+0x130>
 80039e6:	9105      	str	r1, [sp, #20]
 80039e8:	e7c4      	b.n	8003974 <_svfiprintf_r+0x130>
 80039ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80039ee:	4604      	mov	r4, r0
 80039f0:	2301      	movs	r3, #1
 80039f2:	e7f0      	b.n	80039d6 <_svfiprintf_r+0x192>
 80039f4:	ab03      	add	r3, sp, #12
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	462a      	mov	r2, r5
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <_svfiprintf_r+0x1f4>)
 80039fc:	a904      	add	r1, sp, #16
 80039fe:	4638      	mov	r0, r7
 8003a00:	f3af 8000 	nop.w
 8003a04:	1c42      	adds	r2, r0, #1
 8003a06:	4606      	mov	r6, r0
 8003a08:	d1d6      	bne.n	80039b8 <_svfiprintf_r+0x174>
 8003a0a:	89ab      	ldrh	r3, [r5, #12]
 8003a0c:	065b      	lsls	r3, r3, #25
 8003a0e:	f53f af2d 	bmi.w	800386c <_svfiprintf_r+0x28>
 8003a12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a14:	b01d      	add	sp, #116	; 0x74
 8003a16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a1a:	ab03      	add	r3, sp, #12
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	462a      	mov	r2, r5
 8003a20:	4b05      	ldr	r3, [pc, #20]	; (8003a38 <_svfiprintf_r+0x1f4>)
 8003a22:	a904      	add	r1, sp, #16
 8003a24:	4638      	mov	r0, r7
 8003a26:	f000 f879 	bl	8003b1c <_printf_i>
 8003a2a:	e7eb      	b.n	8003a04 <_svfiprintf_r+0x1c0>
 8003a2c:	0801340c 	.word	0x0801340c
 8003a30:	08013416 	.word	0x08013416
 8003a34:	00000000 	.word	0x00000000
 8003a38:	08003791 	.word	0x08003791
 8003a3c:	08013412 	.word	0x08013412

08003a40 <_printf_common>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	4616      	mov	r6, r2
 8003a46:	4699      	mov	r9, r3
 8003a48:	688a      	ldr	r2, [r1, #8]
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a50:	4293      	cmp	r3, r2
 8003a52:	bfb8      	it	lt
 8003a54:	4613      	movlt	r3, r2
 8003a56:	6033      	str	r3, [r6, #0]
 8003a58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a5c:	4607      	mov	r7, r0
 8003a5e:	460c      	mov	r4, r1
 8003a60:	b10a      	cbz	r2, 8003a66 <_printf_common+0x26>
 8003a62:	3301      	adds	r3, #1
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	0699      	lsls	r1, r3, #26
 8003a6a:	bf42      	ittt	mi
 8003a6c:	6833      	ldrmi	r3, [r6, #0]
 8003a6e:	3302      	addmi	r3, #2
 8003a70:	6033      	strmi	r3, [r6, #0]
 8003a72:	6825      	ldr	r5, [r4, #0]
 8003a74:	f015 0506 	ands.w	r5, r5, #6
 8003a78:	d106      	bne.n	8003a88 <_printf_common+0x48>
 8003a7a:	f104 0a19 	add.w	sl, r4, #25
 8003a7e:	68e3      	ldr	r3, [r4, #12]
 8003a80:	6832      	ldr	r2, [r6, #0]
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	42ab      	cmp	r3, r5
 8003a86:	dc26      	bgt.n	8003ad6 <_printf_common+0x96>
 8003a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a8c:	1e13      	subs	r3, r2, #0
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	bf18      	it	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	0692      	lsls	r2, r2, #26
 8003a96:	d42b      	bmi.n	8003af0 <_printf_common+0xb0>
 8003a98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003a9c:	4649      	mov	r1, r9
 8003a9e:	4638      	mov	r0, r7
 8003aa0:	47c0      	blx	r8
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d01e      	beq.n	8003ae4 <_printf_common+0xa4>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	6922      	ldr	r2, [r4, #16]
 8003aaa:	f003 0306 	and.w	r3, r3, #6
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf02      	ittt	eq
 8003ab2:	68e5      	ldreq	r5, [r4, #12]
 8003ab4:	6833      	ldreq	r3, [r6, #0]
 8003ab6:	1aed      	subeq	r5, r5, r3
 8003ab8:	68a3      	ldr	r3, [r4, #8]
 8003aba:	bf0c      	ite	eq
 8003abc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac0:	2500      	movne	r5, #0
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	bfc4      	itt	gt
 8003ac6:	1a9b      	subgt	r3, r3, r2
 8003ac8:	18ed      	addgt	r5, r5, r3
 8003aca:	2600      	movs	r6, #0
 8003acc:	341a      	adds	r4, #26
 8003ace:	42b5      	cmp	r5, r6
 8003ad0:	d11a      	bne.n	8003b08 <_printf_common+0xc8>
 8003ad2:	2000      	movs	r0, #0
 8003ad4:	e008      	b.n	8003ae8 <_printf_common+0xa8>
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	4652      	mov	r2, sl
 8003ada:	4649      	mov	r1, r9
 8003adc:	4638      	mov	r0, r7
 8003ade:	47c0      	blx	r8
 8003ae0:	3001      	adds	r0, #1
 8003ae2:	d103      	bne.n	8003aec <_printf_common+0xac>
 8003ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aec:	3501      	adds	r5, #1
 8003aee:	e7c6      	b.n	8003a7e <_printf_common+0x3e>
 8003af0:	18e1      	adds	r1, r4, r3
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	2030      	movs	r0, #48	; 0x30
 8003af6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003afa:	4422      	add	r2, r4
 8003afc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b04:	3302      	adds	r3, #2
 8003b06:	e7c7      	b.n	8003a98 <_printf_common+0x58>
 8003b08:	2301      	movs	r3, #1
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	4649      	mov	r1, r9
 8003b0e:	4638      	mov	r0, r7
 8003b10:	47c0      	blx	r8
 8003b12:	3001      	adds	r0, #1
 8003b14:	d0e6      	beq.n	8003ae4 <_printf_common+0xa4>
 8003b16:	3601      	adds	r6, #1
 8003b18:	e7d9      	b.n	8003ace <_printf_common+0x8e>
	...

08003b1c <_printf_i>:
 8003b1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b20:	7e0f      	ldrb	r7, [r1, #24]
 8003b22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b24:	2f78      	cmp	r7, #120	; 0x78
 8003b26:	4691      	mov	r9, r2
 8003b28:	4680      	mov	r8, r0
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	469a      	mov	sl, r3
 8003b2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b32:	d807      	bhi.n	8003b44 <_printf_i+0x28>
 8003b34:	2f62      	cmp	r7, #98	; 0x62
 8003b36:	d80a      	bhi.n	8003b4e <_printf_i+0x32>
 8003b38:	2f00      	cmp	r7, #0
 8003b3a:	f000 80d4 	beq.w	8003ce6 <_printf_i+0x1ca>
 8003b3e:	2f58      	cmp	r7, #88	; 0x58
 8003b40:	f000 80c0 	beq.w	8003cc4 <_printf_i+0x1a8>
 8003b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b4c:	e03a      	b.n	8003bc4 <_printf_i+0xa8>
 8003b4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b52:	2b15      	cmp	r3, #21
 8003b54:	d8f6      	bhi.n	8003b44 <_printf_i+0x28>
 8003b56:	a101      	add	r1, pc, #4	; (adr r1, 8003b5c <_printf_i+0x40>)
 8003b58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b5c:	08003bb5 	.word	0x08003bb5
 8003b60:	08003bc9 	.word	0x08003bc9
 8003b64:	08003b45 	.word	0x08003b45
 8003b68:	08003b45 	.word	0x08003b45
 8003b6c:	08003b45 	.word	0x08003b45
 8003b70:	08003b45 	.word	0x08003b45
 8003b74:	08003bc9 	.word	0x08003bc9
 8003b78:	08003b45 	.word	0x08003b45
 8003b7c:	08003b45 	.word	0x08003b45
 8003b80:	08003b45 	.word	0x08003b45
 8003b84:	08003b45 	.word	0x08003b45
 8003b88:	08003ccd 	.word	0x08003ccd
 8003b8c:	08003bf5 	.word	0x08003bf5
 8003b90:	08003c87 	.word	0x08003c87
 8003b94:	08003b45 	.word	0x08003b45
 8003b98:	08003b45 	.word	0x08003b45
 8003b9c:	08003cef 	.word	0x08003cef
 8003ba0:	08003b45 	.word	0x08003b45
 8003ba4:	08003bf5 	.word	0x08003bf5
 8003ba8:	08003b45 	.word	0x08003b45
 8003bac:	08003b45 	.word	0x08003b45
 8003bb0:	08003c8f 	.word	0x08003c8f
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	602a      	str	r2, [r5, #0]
 8003bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e09f      	b.n	8003d08 <_printf_i+0x1ec>
 8003bc8:	6820      	ldr	r0, [r4, #0]
 8003bca:	682b      	ldr	r3, [r5, #0]
 8003bcc:	0607      	lsls	r7, r0, #24
 8003bce:	f103 0104 	add.w	r1, r3, #4
 8003bd2:	6029      	str	r1, [r5, #0]
 8003bd4:	d501      	bpl.n	8003bda <_printf_i+0xbe>
 8003bd6:	681e      	ldr	r6, [r3, #0]
 8003bd8:	e003      	b.n	8003be2 <_printf_i+0xc6>
 8003bda:	0646      	lsls	r6, r0, #25
 8003bdc:	d5fb      	bpl.n	8003bd6 <_printf_i+0xba>
 8003bde:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	da03      	bge.n	8003bee <_printf_i+0xd2>
 8003be6:	232d      	movs	r3, #45	; 0x2d
 8003be8:	4276      	negs	r6, r6
 8003bea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bee:	485a      	ldr	r0, [pc, #360]	; (8003d58 <_printf_i+0x23c>)
 8003bf0:	230a      	movs	r3, #10
 8003bf2:	e012      	b.n	8003c1a <_printf_i+0xfe>
 8003bf4:	682b      	ldr	r3, [r5, #0]
 8003bf6:	6820      	ldr	r0, [r4, #0]
 8003bf8:	1d19      	adds	r1, r3, #4
 8003bfa:	6029      	str	r1, [r5, #0]
 8003bfc:	0605      	lsls	r5, r0, #24
 8003bfe:	d501      	bpl.n	8003c04 <_printf_i+0xe8>
 8003c00:	681e      	ldr	r6, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <_printf_i+0xee>
 8003c04:	0641      	lsls	r1, r0, #25
 8003c06:	d5fb      	bpl.n	8003c00 <_printf_i+0xe4>
 8003c08:	881e      	ldrh	r6, [r3, #0]
 8003c0a:	4853      	ldr	r0, [pc, #332]	; (8003d58 <_printf_i+0x23c>)
 8003c0c:	2f6f      	cmp	r7, #111	; 0x6f
 8003c0e:	bf0c      	ite	eq
 8003c10:	2308      	moveq	r3, #8
 8003c12:	230a      	movne	r3, #10
 8003c14:	2100      	movs	r1, #0
 8003c16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c1a:	6865      	ldr	r5, [r4, #4]
 8003c1c:	60a5      	str	r5, [r4, #8]
 8003c1e:	2d00      	cmp	r5, #0
 8003c20:	bfa2      	ittt	ge
 8003c22:	6821      	ldrge	r1, [r4, #0]
 8003c24:	f021 0104 	bicge.w	r1, r1, #4
 8003c28:	6021      	strge	r1, [r4, #0]
 8003c2a:	b90e      	cbnz	r6, 8003c30 <_printf_i+0x114>
 8003c2c:	2d00      	cmp	r5, #0
 8003c2e:	d04b      	beq.n	8003cc8 <_printf_i+0x1ac>
 8003c30:	4615      	mov	r5, r2
 8003c32:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c36:	fb03 6711 	mls	r7, r3, r1, r6
 8003c3a:	5dc7      	ldrb	r7, [r0, r7]
 8003c3c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c40:	4637      	mov	r7, r6
 8003c42:	42bb      	cmp	r3, r7
 8003c44:	460e      	mov	r6, r1
 8003c46:	d9f4      	bls.n	8003c32 <_printf_i+0x116>
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d10b      	bne.n	8003c64 <_printf_i+0x148>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	07de      	lsls	r6, r3, #31
 8003c50:	d508      	bpl.n	8003c64 <_printf_i+0x148>
 8003c52:	6923      	ldr	r3, [r4, #16]
 8003c54:	6861      	ldr	r1, [r4, #4]
 8003c56:	4299      	cmp	r1, r3
 8003c58:	bfde      	ittt	le
 8003c5a:	2330      	movle	r3, #48	; 0x30
 8003c5c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c60:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c64:	1b52      	subs	r2, r2, r5
 8003c66:	6122      	str	r2, [r4, #16]
 8003c68:	f8cd a000 	str.w	sl, [sp]
 8003c6c:	464b      	mov	r3, r9
 8003c6e:	aa03      	add	r2, sp, #12
 8003c70:	4621      	mov	r1, r4
 8003c72:	4640      	mov	r0, r8
 8003c74:	f7ff fee4 	bl	8003a40 <_printf_common>
 8003c78:	3001      	adds	r0, #1
 8003c7a:	d14a      	bne.n	8003d12 <_printf_i+0x1f6>
 8003c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8003c80:	b004      	add	sp, #16
 8003c82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c86:	6823      	ldr	r3, [r4, #0]
 8003c88:	f043 0320 	orr.w	r3, r3, #32
 8003c8c:	6023      	str	r3, [r4, #0]
 8003c8e:	4833      	ldr	r0, [pc, #204]	; (8003d5c <_printf_i+0x240>)
 8003c90:	2778      	movs	r7, #120	; 0x78
 8003c92:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	6829      	ldr	r1, [r5, #0]
 8003c9a:	061f      	lsls	r7, r3, #24
 8003c9c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ca0:	d402      	bmi.n	8003ca8 <_printf_i+0x18c>
 8003ca2:	065f      	lsls	r7, r3, #25
 8003ca4:	bf48      	it	mi
 8003ca6:	b2b6      	uxthmi	r6, r6
 8003ca8:	07df      	lsls	r7, r3, #31
 8003caa:	bf48      	it	mi
 8003cac:	f043 0320 	orrmi.w	r3, r3, #32
 8003cb0:	6029      	str	r1, [r5, #0]
 8003cb2:	bf48      	it	mi
 8003cb4:	6023      	strmi	r3, [r4, #0]
 8003cb6:	b91e      	cbnz	r6, 8003cc0 <_printf_i+0x1a4>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	f023 0320 	bic.w	r3, r3, #32
 8003cbe:	6023      	str	r3, [r4, #0]
 8003cc0:	2310      	movs	r3, #16
 8003cc2:	e7a7      	b.n	8003c14 <_printf_i+0xf8>
 8003cc4:	4824      	ldr	r0, [pc, #144]	; (8003d58 <_printf_i+0x23c>)
 8003cc6:	e7e4      	b.n	8003c92 <_printf_i+0x176>
 8003cc8:	4615      	mov	r5, r2
 8003cca:	e7bd      	b.n	8003c48 <_printf_i+0x12c>
 8003ccc:	682b      	ldr	r3, [r5, #0]
 8003cce:	6826      	ldr	r6, [r4, #0]
 8003cd0:	6961      	ldr	r1, [r4, #20]
 8003cd2:	1d18      	adds	r0, r3, #4
 8003cd4:	6028      	str	r0, [r5, #0]
 8003cd6:	0635      	lsls	r5, r6, #24
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	d501      	bpl.n	8003ce0 <_printf_i+0x1c4>
 8003cdc:	6019      	str	r1, [r3, #0]
 8003cde:	e002      	b.n	8003ce6 <_printf_i+0x1ca>
 8003ce0:	0670      	lsls	r0, r6, #25
 8003ce2:	d5fb      	bpl.n	8003cdc <_printf_i+0x1c0>
 8003ce4:	8019      	strh	r1, [r3, #0]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	6123      	str	r3, [r4, #16]
 8003cea:	4615      	mov	r5, r2
 8003cec:	e7bc      	b.n	8003c68 <_printf_i+0x14c>
 8003cee:	682b      	ldr	r3, [r5, #0]
 8003cf0:	1d1a      	adds	r2, r3, #4
 8003cf2:	602a      	str	r2, [r5, #0]
 8003cf4:	681d      	ldr	r5, [r3, #0]
 8003cf6:	6862      	ldr	r2, [r4, #4]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	f7fc fa88 	bl	8000210 <memchr>
 8003d00:	b108      	cbz	r0, 8003d06 <_printf_i+0x1ea>
 8003d02:	1b40      	subs	r0, r0, r5
 8003d04:	6060      	str	r0, [r4, #4]
 8003d06:	6863      	ldr	r3, [r4, #4]
 8003d08:	6123      	str	r3, [r4, #16]
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d10:	e7aa      	b.n	8003c68 <_printf_i+0x14c>
 8003d12:	6923      	ldr	r3, [r4, #16]
 8003d14:	462a      	mov	r2, r5
 8003d16:	4649      	mov	r1, r9
 8003d18:	4640      	mov	r0, r8
 8003d1a:	47d0      	blx	sl
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	d0ad      	beq.n	8003c7c <_printf_i+0x160>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	079b      	lsls	r3, r3, #30
 8003d24:	d413      	bmi.n	8003d4e <_printf_i+0x232>
 8003d26:	68e0      	ldr	r0, [r4, #12]
 8003d28:	9b03      	ldr	r3, [sp, #12]
 8003d2a:	4298      	cmp	r0, r3
 8003d2c:	bfb8      	it	lt
 8003d2e:	4618      	movlt	r0, r3
 8003d30:	e7a6      	b.n	8003c80 <_printf_i+0x164>
 8003d32:	2301      	movs	r3, #1
 8003d34:	4632      	mov	r2, r6
 8003d36:	4649      	mov	r1, r9
 8003d38:	4640      	mov	r0, r8
 8003d3a:	47d0      	blx	sl
 8003d3c:	3001      	adds	r0, #1
 8003d3e:	d09d      	beq.n	8003c7c <_printf_i+0x160>
 8003d40:	3501      	adds	r5, #1
 8003d42:	68e3      	ldr	r3, [r4, #12]
 8003d44:	9903      	ldr	r1, [sp, #12]
 8003d46:	1a5b      	subs	r3, r3, r1
 8003d48:	42ab      	cmp	r3, r5
 8003d4a:	dcf2      	bgt.n	8003d32 <_printf_i+0x216>
 8003d4c:	e7eb      	b.n	8003d26 <_printf_i+0x20a>
 8003d4e:	2500      	movs	r5, #0
 8003d50:	f104 0619 	add.w	r6, r4, #25
 8003d54:	e7f5      	b.n	8003d42 <_printf_i+0x226>
 8003d56:	bf00      	nop
 8003d58:	0801341d 	.word	0x0801341d
 8003d5c:	0801342e 	.word	0x0801342e

08003d60 <memmove>:
 8003d60:	4288      	cmp	r0, r1
 8003d62:	b510      	push	{r4, lr}
 8003d64:	eb01 0402 	add.w	r4, r1, r2
 8003d68:	d902      	bls.n	8003d70 <memmove+0x10>
 8003d6a:	4284      	cmp	r4, r0
 8003d6c:	4623      	mov	r3, r4
 8003d6e:	d807      	bhi.n	8003d80 <memmove+0x20>
 8003d70:	1e43      	subs	r3, r0, #1
 8003d72:	42a1      	cmp	r1, r4
 8003d74:	d008      	beq.n	8003d88 <memmove+0x28>
 8003d76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d7e:	e7f8      	b.n	8003d72 <memmove+0x12>
 8003d80:	4402      	add	r2, r0
 8003d82:	4601      	mov	r1, r0
 8003d84:	428a      	cmp	r2, r1
 8003d86:	d100      	bne.n	8003d8a <memmove+0x2a>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d92:	e7f7      	b.n	8003d84 <memmove+0x24>

08003d94 <_sbrk_r>:
 8003d94:	b538      	push	{r3, r4, r5, lr}
 8003d96:	4d06      	ldr	r5, [pc, #24]	; (8003db0 <_sbrk_r+0x1c>)
 8003d98:	2300      	movs	r3, #0
 8003d9a:	4604      	mov	r4, r0
 8003d9c:	4608      	mov	r0, r1
 8003d9e:	602b      	str	r3, [r5, #0]
 8003da0:	f7fd f9ca 	bl	8001138 <_sbrk>
 8003da4:	1c43      	adds	r3, r0, #1
 8003da6:	d102      	bne.n	8003dae <_sbrk_r+0x1a>
 8003da8:	682b      	ldr	r3, [r5, #0]
 8003daa:	b103      	cbz	r3, 8003dae <_sbrk_r+0x1a>
 8003dac:	6023      	str	r3, [r4, #0]
 8003dae:	bd38      	pop	{r3, r4, r5, pc}
 8003db0:	20000320 	.word	0x20000320

08003db4 <memcpy>:
 8003db4:	440a      	add	r2, r1
 8003db6:	4291      	cmp	r1, r2
 8003db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003dbc:	d100      	bne.n	8003dc0 <memcpy+0xc>
 8003dbe:	4770      	bx	lr
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003dca:	4291      	cmp	r1, r2
 8003dcc:	d1f9      	bne.n	8003dc2 <memcpy+0xe>
 8003dce:	bd10      	pop	{r4, pc}

08003dd0 <_realloc_r>:
 8003dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dd4:	4680      	mov	r8, r0
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	460e      	mov	r6, r1
 8003dda:	b921      	cbnz	r1, 8003de6 <_realloc_r+0x16>
 8003ddc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003de0:	4611      	mov	r1, r2
 8003de2:	f7ff bc49 	b.w	8003678 <_malloc_r>
 8003de6:	b92a      	cbnz	r2, 8003df4 <_realloc_r+0x24>
 8003de8:	f7ff fbda 	bl	80035a0 <_free_r>
 8003dec:	4625      	mov	r5, r4
 8003dee:	4628      	mov	r0, r5
 8003df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003df4:	f000 f81b 	bl	8003e2e <_malloc_usable_size_r>
 8003df8:	4284      	cmp	r4, r0
 8003dfa:	4607      	mov	r7, r0
 8003dfc:	d802      	bhi.n	8003e04 <_realloc_r+0x34>
 8003dfe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003e02:	d812      	bhi.n	8003e2a <_realloc_r+0x5a>
 8003e04:	4621      	mov	r1, r4
 8003e06:	4640      	mov	r0, r8
 8003e08:	f7ff fc36 	bl	8003678 <_malloc_r>
 8003e0c:	4605      	mov	r5, r0
 8003e0e:	2800      	cmp	r0, #0
 8003e10:	d0ed      	beq.n	8003dee <_realloc_r+0x1e>
 8003e12:	42bc      	cmp	r4, r7
 8003e14:	4622      	mov	r2, r4
 8003e16:	4631      	mov	r1, r6
 8003e18:	bf28      	it	cs
 8003e1a:	463a      	movcs	r2, r7
 8003e1c:	f7ff ffca 	bl	8003db4 <memcpy>
 8003e20:	4631      	mov	r1, r6
 8003e22:	4640      	mov	r0, r8
 8003e24:	f7ff fbbc 	bl	80035a0 <_free_r>
 8003e28:	e7e1      	b.n	8003dee <_realloc_r+0x1e>
 8003e2a:	4635      	mov	r5, r6
 8003e2c:	e7df      	b.n	8003dee <_realloc_r+0x1e>

08003e2e <_malloc_usable_size_r>:
 8003e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e32:	1f18      	subs	r0, r3, #4
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	bfbc      	itt	lt
 8003e38:	580b      	ldrlt	r3, [r1, r0]
 8003e3a:	18c0      	addlt	r0, r0, r3
 8003e3c:	4770      	bx	lr
	...

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
